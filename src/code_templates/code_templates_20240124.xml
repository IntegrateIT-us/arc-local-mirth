<list>
  <codeTemplateLibrary version="4.0.0">
    <id>8b1aa91e-8ded-4fd9-83be-2e181a113dc2</id>
    <name>Archive HL7 to JSON (old)</name>
    <revision>5</revision>
    <lastModified>
      <time>1694393434748</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description></description>
    <includeNewChannels>false</includeNewChannels>
    <enabledChannelIds>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
      <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
      <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
      <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>fae65206-57ff-45af-a061-8a8aeb2d37a5</id>
        <name>convertMSHtoJSON</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911273642</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	convertMSHtoJSON(segment)
	
	- Desc: This function retrieves HL7v2 HAPI format elements and values from MSH segment converts to AristaMd customized JSON object for reference

	@param {String} segment - this contains the raw segment (string)
	@return {object} objMSH - this contains the MSH segment elements composed into a single objMSH
		object.
*/
function convertMSHtoJSON(segment) {

	var scriptName= &apos;convertMSHtoJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG segment: &apos;+segment.toString()); }
	
	// define variables
	if (typeof(segment.toString()) !== undefined) {

		// MSH
		// var objMSH= new Object();
		var meta = {};
			
		// MSH.9.1 Message Type -&gt; DataModel
		if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() != &quot;&quot;) { 
			var columnName= &quot;DataModel&quot;;
			if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() == &quot;SIU&quot;) { 
				meta[columnName] = &quot;Scheduling&quot;; 
			} else if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() == &quot;ORU&quot;) {
				meta[columnName]= &quot;Order Result&quot;;
			} else if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() == &quot;OMG&quot;) {
				meta[columnName]= &quot;New Order&quot;;
			} // end if 
		} // end if 

		// MSH.9.2 Event Type -&gt; EventType
		if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString() != &quot;&quot;) { 
			var columnName= &quot;EventType&quot;;
			if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString() == &quot;S12&quot;) { 
				meta[columnName] = &quot;New&quot;; 
			} else if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString() == &quot;S14&quot;) {
				meta[columnName]= &quot;Modification&quot;;
			} else if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString() == &quot;S15&quot;) {
				meta[columnName]= &quot;Cancel&quot;;
			} // end if 
		} // end if

		// MSH.7.1 Date/Time of Message -&gt; EventDateTime
		if (msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString() != &quot;&quot;) { 
			var columnName= &quot;EventDateTime&quot;;
			if(msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString().indexOf(&quot;T&quot;)&gt;-1) {
				var columnValue = msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString().substr(0,19).replace(/[^0-9]/g, &quot;&quot;);
			} else {
				var columnValue = msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
			}
			meta[columnName] = columnValue;
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
		} // end if 

		// MSH.11.1 ProcessedId -&gt; Test
		if (msg[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;].toString() != &quot;&quot;) { 
			var columnName= &quot;Test&quot;;
			if(msg[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;].toString()== &apos;T&apos;) {
				var columnValue = &quot;true&quot;;
			} else {
				var columnValue = &quot;false&quot;;
			}
			meta[columnName] = columnValue;
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
		} // end if 

		// MSH.3.1 SendingApplication -&gt; Source.Name
		if (msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString() != &quot;&quot;) { 
			var source_name_obj= {};
			var columnName= &quot;Name&quot;;
			var columnValue= msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString();
	
			source_name_obj[columnName]= columnValue;
			var parentColumnName= &quot;Source&quot;;		
			meta[parentColumnName] = source_name_obj;
			
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+parentColumnName+&quot;] value: &quot;+JSON.stringify(source_name_obj)); }
		} // end if 

		// MSH.5.1 ReceivingApplication -&gt; Destination.Name
		if (msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString() != &quot;&quot;) { 
			var destination_name_obj= {};
			var columnName= &quot;Name&quot;;
			var columnValue= msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString();
	
			destination_name_obj[columnName]= columnValue;
			var parentColumnName= &quot;Destination&quot;;		
			meta[parentColumnName] = destination_name_obj;
			
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+parentColumnName+&quot;] value: &quot;+JSON.stringify(destination_name_obj)); }
		} // end if 

		// MSH.10.1 MessageControlID -&gt; Message.ID
		if (msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString() != &quot;&quot;) { 
			var messageControlId_obj= {};
			var columnName= &quot;ID&quot;;
			var columnValue= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
	
			messageControlId_obj[columnName]= columnValue;
			var parentColumnName= &quot;Message&quot;;		
			meta[parentColumnName] = messageControlId_obj;
			
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+parentColumnName+&quot;] value: &quot;+JSON.stringify(messageControlId_obj)); }
		} // end if 

		jsonMeta= JSON.stringify(meta); // convert to JSON
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(jsonMeta)); }

		/*
		// objMSH.4, sendingFacility
		if (msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString() != &quot;&quot;) { objMSH.sendingFacility= msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString(); }
		
		// objMSH.5, receivingApplication
		if (msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString() != &quot;&quot;) { objMSH.receivingApplication = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString(); }
		
		// objMSH.6, receivingFacility
		if (msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;].toString() != &quot;&quot;) { objMSH.receivingFacility = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;].toString(); }
		
		// objMSH.7, dateTimeOfMessage
		if (msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString() != &quot;&quot;) { objMSH.messageDateTime = msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString(); }
		
		// objMSH.8, security
		if (msg[&apos;MSH&apos;][&apos;MSH.8&apos;][&apos;MSH.8.1&apos;].toString() != &quot;&quot;) { objMSH.security = msg[&apos;MSH&apos;][&apos;MSH.8&apos;][&apos;MSH.8.1&apos;].toString(); }
		
		// objMSH.9, messageType
		if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;].toString() != &quot;&quot;) {
			objMSH.messageType = msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString();
			objMSH.eventType   = msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();
			// logger.error(scriptName+&apos;::DEBUG objMSH_messageType: &apos;+objMSH.messageType+&apos; objMSH_eventType: &apos;+objMSH.eventType);
		}
		
		// objMSH.10, messageControlID
		if (msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString() != &quot;&quot;) { 
			objMSH.messageControlID = msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString(); 
		}
		
		// objMSH.11, processingID
		if (msg[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;].toString() != &quot;&quot;) {
			objMSH.processingID = msg[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;].toString(); 
		}
		
		// objMSH.12, versionID
		if (msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;].toString() != &quot;&quot;) { objMSH.hl7version = msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;].toString(); }
		
		// objMSH.13, sequenceNumber
		if (msg[&apos;MSH&apos;][&apos;MSH.13&apos;][&apos;MSH.13.1&apos;].toString() != &quot;&quot;) { objMSH.sequenceNumber = msg[&apos;MSH&apos;][&apos;MSH.13&apos;][&apos;MSH.13.1&apos;].toString(); }
		
		// objMSH.14, continuationPointer
		if (msg[&apos;MSH&apos;][&apos;MSH.14&apos;][&apos;MSH.14.1&apos;].toString() != &quot;&quot;) { objMSH.continuationPointer = msg[&apos;MSH&apos;][&apos;MSH.14&apos;][&apos;MSH.14.1&apos;].toString(); }
		
		// objMSH.15, acceptAcknowledgmentType
		if (msg[&apos;MSH&apos;][&apos;MSH.15&apos;][&apos;MSH.15.1&apos;].toString() != &quot;&quot;) { objMSH.acceptAcknowledgmentType = msg[&apos;MSH&apos;][&apos;MSH.15&apos;][&apos;MSH.15.1&apos;].toString(); }
		
		// objMSH.16, applicationAcknowledgmentType
		if (msg[&apos;MSH&apos;][&apos;MSH.16&apos;][&apos;MSH.16.1&apos;].toString() != &quot;&quot;) { objMSH.applicationAcknowledgmentType = msg[&apos;MSH&apos;][&apos;MSH.16&apos;][&apos;MSH.16.1&apos;].toString(); }
		
		// objMSH.17, countryCode
		if (msg[&apos;MSH&apos;][&apos;MSH.17&apos;][&apos;MSH.17.1&apos;].toString() != &quot;&quot;) { objMSH.countryCode = msg[&apos;MSH&apos;][&apos;MSH.17&apos;][&apos;MSH.17.1&apos;].toString(); }
		
		// objMSH.18, characterSet
		if (msg[&apos;MSH&apos;][&apos;MSH.18&apos;][&apos;MSH.18.1&apos;].toString() != &quot;&quot;) { objMSH.characterSet= msg[&apos;MSH&apos;][&apos;MSH.18&apos;][&apos;MSH.18.1&apos;].toString(); }

		// objMSH.19, principalLanguageOfMessage
		if (msg[&apos;MSH&apos;][&apos;MSH.19&apos;][&apos;MSH.19.1&apos;].toString() != &quot;&quot;) { objMSH.principalLanguageOfMessage = msg[&apos;MSH&apos;][&apos;MSH.19&apos;][&apos;MSH.19.1&apos;].toString(); }

		if (debug&gt;0) { 
			logger.error(scriptName+&apos;::DEBUG objMSH: &apos;+JSON.stringify(objMSH)); 
		}
		*/
		channelMap.put(&apos;MSH_json&apos;,jsonMeta);
		return jsonMeta;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>42a7d964-efbf-48b1-9b28-6552a07c3bae</id>
        <name>convertPIDtoJSON</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911273555</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	convertPIDtoJSON(segment)
	
	- Desc: This function retrieves HL7v2 HAPI format elements and values from PID segment converts to AristaMd customized JSON object for reference

	@param {String} segment - this contains the raw segment (string)
	@return {object} objMSH - this contains the PID segment elements composed into a single objMSH
		object.
*/
function convertPIDtoJSON(segment) {

	var scriptName= &apos;convertPIDtoJSON&apos;;
	var debug= 0;
	// if (debug&gt;0) { 
		logger.error(scriptName+&apos;::DEBUG segment: &apos;+segment.toString()); 
	// }
	
	// define variables
	if (typeof(segment.toString()) !== undefined) {

		// MSH
		// var objMSH= new Object();
		var patientHeader= {};
		
		var patient = {};

		// declare PatientIdentifiers array
		var patientIdentifiers= [];

		// declare PatientIdentifier object
		var patientIdentifier= {};
		debug= 1;
		if(typeof(msg[&apos;PID&apos;][&apos;PID.3&apos;]) !== &apos;undefined&apos;) {
			for each (element in msg[&apos;PID&apos;][&apos;PID.3&apos;]) {
				logger.info(&apos;PID.3 element: &apos;+element);
				// PID.3.1 Patient Identifier List -&gt; Patient Identifier
				if(typeof(element[&apos;PID.3.1&apos;]) !== &apos;undefined&apos;) {
					var columnName= &quot;ID&quot;;
					if(element[&apos;PID.3.1&apos;].toString() != &quot;&quot;) { 
						patientIdentifier[columnName] = element[&apos;PID.3.1&apos;].toString();
					} else {
						patientIdentifier[columnName] = null;
					} // end if
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientIdentifier[&quot;+columnName+&quot;] typeof: &quot;+typeof(patientIdentifier[columnName])+&quot; value: &quot;+patientIdentifier[columnName]); }
				} // end if 

				// PID.3.5 Patient Identifier Type Code -&gt; IDType
				if (typeof(element[&apos;PID.3.5&apos;]) !== &apos;undefined&apos;) {
					var columnName= &quot;IDType&quot;;
					if(element[&apos;PID.3.5&apos;].toString() != &quot;&quot;) { 
						patientIdentifier[columnName] = element[&apos;PID.3.5&apos;].toString();
					} else {
						patientIdentifier[columnName] = null;	
					} // end if
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientIdentifier[&quot;+columnName+&quot;] typeof: &quot;+typeof(patientIdentifier[columnName])+&quot; value: &quot;+patientIdentifier[columnName]); }
				} // end if

				if(typeof(patientIdentifier) !== &apos;undefined&apos;) {
					patientIdentifiers.push(patientIdentifier);
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientIdentifiers typeof: &quot;+typeof(patientIdentifiers)+&quot; value: &quot;+patientIdentifiers+&quot; string: &quot;+patientIdentifiers.toString()); }
				}
				
			}

			// Add Identifiers Object to Patient Object
			var columnName= &quot;Identifiers&quot;;
			patient[columnName]= patientIdentifiers;
			
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patient[&quot;+columnName+&quot;] typeof: &quot;+typeof(patient[columnName])+&quot; value: &quot;+patient[columnName]+&quot; stringify: &quot;+JSON.stringify(patient[columnName])); }
		}


		// declare Demographics 
		var patientDemographics= {};
		debug= 0;
		// PID.5.2 FirstName -&gt; Patient Demographics FirstName 
		if (typeof(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;FirstName&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString() != &quot;&quot;) {
				patientDemographics[columnName] = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString();
			} else {
				patientDemographics[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientDemographics[&quot;+columnName+&quot;] value: &quot;+patientDemographics[columnName]); }
		} // end if
		
		// PID.5.1 LastName -&gt; Patient Demographics LastName 
		if (typeof(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;LastName&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString() != &quot;&quot;) {
				patientDemographics[columnName] = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString();
			} else {
				patientDemographics[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientDemographics[&quot;+columnName+&quot;] value: &quot;+patientDemographics[columnName]); }
		} // end if
		
		// PID.5.3 MiddleName -&gt; Patient Demographics MiddleName 
		if (typeof(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;MiddleName&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString() != &quot;&quot;) {
				patientDemographics[columnName] = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString();
			} else {
				patientDemographics[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientDemographics[&quot;+columnName+&quot;] value: &quot;+patientDemographics[columnName]); }
		} // end if

		// PID.7.1 DateOfBirth -&gt; Patient Demographics DateOfBirth 
		if (typeof(msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;DOB&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString() != &quot;&quot;) {
				patientDemographics[columnName] = msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();
			} else {
				patientDemographics[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientDemographics[&quot;+columnName+&quot;] value: &quot;+patientDemographics[columnName]); }
		}
		
		// PID.8 Administrative Sex -&gt; Patient Demographics Sex
		if (typeof(msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;Sex&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString() != &quot;&quot;) {
				patientDemographics[columnName] = msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString();
			} else {
				patientDemographics[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientDemographics[&quot;+columnName+&quot;] value: &quot;+patientDemographics[columnName]); }
		} // end if

		// PID.10.1 Race Identifier -&gt; Patient Demographics Race
		if (typeof(msg[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;Race&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;].toString() != &quot;&quot;) {
				patientDemographics[columnName] = msg[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;].toString();
			} else {
				patientDemographics[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientDemographics[&quot;+columnName+&quot;] value: &quot;+patientDemographics[columnName]); }
		} // end if 
		
		// PID.16.1 Martial Status Identifier -&gt; Patient Demographics MaritalStatus
		if (typeof(msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;MaritalStatus&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;].toString() != &quot;&quot;) {
				patientDemographics[columnName] = msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;].toString();
			} else {
				patientDemographics[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientDemographics[&quot;+columnName+&quot;] value: &quot;+patientDemographics[columnName]); }
		} // end if
		
		// PID.30 Patient Death Indicator -&gt; Patient Demographics IsDeceased
		if (typeof(msg[&apos;PID&apos;][&apos;PID.30&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;IsDeceased&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.30&apos;].toString() != &quot;&quot;) {
				patientDemographics[columnName] = msg[&apos;PID&apos;][&apos;PID.30&apos;].toString();
			} else {
				patientDemographics[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientDemographics[&quot;+columnName+&quot;] value: &quot;+patientDemographics[columnName]); }
		} // end if 
		
		// PID.29.1 Patient Death Datetime -&gt; Patient Demographics DeathDateTime
		if (typeof(msg[&apos;PID&apos;][&apos;PID.29&apos;][&apos;PID.29.1&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;DeathDateTime&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.29&apos;][&apos;PID.29.1&apos;].toString() != &quot;&quot;) {
				patientDemographics[columnName] = msg[&apos;PID&apos;][&apos;PID.29&apos;][&apos;PID.29.1&apos;].toString();
			} else {
				patientDemographics[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientDemographics[&quot;+columnName+&quot;] value: &quot;+patientDemographics[columnName]); }
		} // end if 

		// declare phoneNumbers 
		var phoneNumbers= {};

		// declare phoneNumber
		var phoneNumber= {};

		// PID.13.1 Phone Number - Home -&gt; Patient Demographics PhoneNumber Home
		if (typeof(msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.1&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;Home&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.1&apos;].toString() != &quot;&quot;) {
				phoneNumber[columnName] = msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.1&apos;].toString();
			} else {
				phoneNumber[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG phoneNumber[&quot;+columnName+&quot;] value: &quot;+phoneNumber[columnName]); }
			Object.assign(phoneNumbers, phoneNumber);
		} // end if 
		
		// PID.14.1 Phone Number - Business -&gt; Patient Demographics PhoneNumber Office
		if (typeof(msg[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.1&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;Office&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.1&apos;].toString() != &quot;&quot;) {
				phoneNumber[columnName] = msg[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.1&apos;].toString();
			} else {
				phoneNumber[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG phoneNumber[&quot;+columnName+&quot;] value: &quot;+phoneNumber[columnName]); }
			Object.assign(phoneNumbers, phoneNumber);
		} // end if

		if(typeof(phoneNumbers) !== &apos;undefined&apos;) {
			var columnName= &quot;PhoneNumber&quot;;
			patientDemographics[columnName]= phoneNumbers;
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientDemographics[&quot;+columnName+&quot;] value: &quot;+patientDemographics[columnName]); }
		} // end if 

		// PID.13.4 Email Address -&gt; Patient Demographics EmailAddresses
		if (typeof(msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.4&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;EmailAddresses&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.4&apos;].toString() != &quot;&quot;) {
				patientDemographics[columnName] = msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.4&apos;].toString();
			} else {
				patientDemographics[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientDemographics[&quot;+columnName+&quot;] value: &quot;+patientDemographics[columnName]); }
		} // end if 

		// Add Demographics Object to Patient Object
		var columnName= &quot;Demographics&quot;;
		patient[columnName]= patientDemographics;
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patient[&quot;+columnName+&quot;] value: &quot;+patient[columnName]); }

		var columnName= &apos;Patient&apos;;
		patientHeader[columnName]= jsonMeta;

		// jsonMeta= JSON.stringify(patientHeader); // convert to JSON
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientHeader: &quot;+patientHeader); }

		channelMap.put(&apos;PID_json&apos;,patientHeader);
		return jsonMeta;
	}
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>6975d386-da5e-4267-aa01-5d181743a931</id>
    <name>AristaMd-Utilities</name>
    <revision>24</revision>
    <lastModified>
      <time>1702397506235</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description>This library was added upon migration to version 3.3.0. It includes all pre-existing
code templates, and is set to be included on all pre-existing and new channels.

You should create your own new libraries and assign code templates to them as you
see fit. You should also link libraries to specific channels, so that you&apos;re not
necessarily including all code templates on all channels all the time.</description>
    <includeNewChannels>false</includeNewChannels>
    <enabledChannelIds>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
      <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
      <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>b484c4c9-6c84-4f8e-b2ec-9bff6a8cf7db</id>
        <name>checkHL7ElementIfUndefined</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911262649</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	checkElementIfUndefined (element, debug)
	
	- Function to check provided Element if Undefined or length less than 1 character return null.

	@param {element} - XML object provided (e.g. msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.1&apos;]
	@return {String} return XML object or null object reference
*/
function checkElementIfUndefined (element, debug) {
	var scriptName= &apos;checkHL7ElementIfUndefined&apos;;

	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG element: &quot;+element+&quot; typeof: &quot;+typeof(element)+&quot; string: &quot;+element.toString()+&quot; length: &quot;+element.toString().length); }
	
	if(element == &apos;undefined&apos;) {
		return null;
	} else {
		if(element.toString().length&lt;1) {
			return null;
		} else {
			return element;
		}
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>b9651842-7ccb-4761-aedf-a9a1461dd5f7</id>
        <name>Convert HL7 Date Format to ISO</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911262839</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Converts standard HL7 v2.x date format to human-readable ISO date format
*/

/*
	Author: IntegrateIT.us LLC
	toISODate: Returns an ISO-formatted date string with specified timezone offset

	Arguments
	---------
		Required
		--------
			hl7DateString:		An HL7-formatted date string (ex: &quot;yyyyMMddHHmmss&quot;

		Optional
		--------
			timezome:			A timezone identifier string corresponding to one of the java.util.TimeZone values (ex: &quot;US/Central&quot;)
*/

function toISODate( hl7DateString, timezone ) {
	var isoDate;
	var dateString;
	var hl7Formatter;
	var isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);

	if (timezone) {
		isoFormatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timezone));
	}
	
	if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString.substring(0,13)) &amp;&amp; hl7DateString.length &gt; 14 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmssZ&quot;);
	}
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 14 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
	} 
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 12 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);
	} 
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 8 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMdd&quot;);
	} 
	else dateString = hl7DateString;
	
	try {
		if (hl7Formatter) {
			isoDate = hl7Formatter.parse(hl7DateString);
			isoDate = isoFormatter.format(isoDate);
			dateString = new String(isoDate);
		}
	} catch (err) {
		dateString = hl7DateString;
	} finally {
		return dateString;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>95e528b7-1e7f-490e-86da-7c14b23ee4f3</id>
        <name>Convert ISO Date Format to HL7</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911262912</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Converts ISO date format to HL7 v2 format - toHL7Date( isoDateString, timezone, debug )
*/

/*
	Author: IntegrateIT.us LLC
	toHL7Date: Returns an HL7-formatted date string with specified timezone offset

	Arguments
	---------
		Required
		--------
			isoDateString:		An ISO-formatted date string (ex: &quot;yyyy-MM-ddTHH:mm:ssZ&quot;

		Optional
		--------
			timezome:			A timezone identifier string corresponding to one of the java.util.TimeZone values (ex: &quot;US/Central&quot;)
*/

function toHL7Date( isoDateString, timezone, debug ) 
{
	var scriptName= &quot;toHL7Date&quot;;
	var hl7Date;
	var dateString;
	var isoFormatter;
	var hl7Formatter;

	// 2020-11-07T00:01:22+00:00
	var strTimeZone= &quot;GMT-8:00&quot;;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG:BEGIN isoDateString: &quot;+isoDateString+&quot;, timezone: &quot;+timezone+&quot;, strTimeZone: &quot;+strTimeZone); }

	// ISO Date Format: yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;
	if ( isoDateString != null &amp;&amp; isoDateString.length &lt;= 25 &amp;&amp; isoDateString.length &gt;= 22) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmssZ&quot;);
		if (timezone) {
			hl7Formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(strTimeZone));
		}
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG:UPDATE isoDateString: &quot;+isoDateString+&quot;, isoFormatter: &quot;+isoFormatter.toString()+&quot;, hl7Formatter: &quot;+hl7Formatter.toString()+&quot;, timezone: &quot;+timezone+&quot;, strTimeZone: &quot;+strTimeZone); }
	}
	// ISO Date Format: yyyy-MM-dd HH:mm:ss
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 19 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
	}
	// ISO Date Format: yyyy-MM-dd HH:mm
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 16 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);
	} 
	// ISO Date Format: yyyy-MM-dd
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 10 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMdd&quot;);	
	}
	// None of the above, return original date string.
	else dateString = isoDateString;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG:END isoDateString: &quot;+isoDateString+&quot;, isoFormatter: &quot;+isoFormatter.toString()+&quot;, hl7Formatter: &quot;+hl7Formatter.toString()+&quot;, timezone: &quot;+timezone+&quot;, strTimeZone: &quot;+strTimeZone); }

	try {
		if (isoFormatter) {
			hl7Date = isoFormatter.parse(isoDateString);
			hl7Date = hl7Formatter.format(hl7Date);
			dateString = new String(hl7Date);
		}
	} catch (err) {
		dateString = isoDateString;
	} finally {
		return dateString;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>41b1ac94-64c4-42ed-a501-a0caca7ae187</id>
        <name>convertMDYtoHL7DateTime</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911263005</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**

	Convert MM-DD-YY HH:MM format to HL7 format
	
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function convertMDYtoHL7DateTime(eventDateTime, debug) {

	var scriptName= &apos;convertMDYtoHL7DateTime&apos;;
	if(typeof(debug) == &apos;undefined&apos;) { var debug= 0; }

	var lstEventDateTime= eventDateTime.toUpperCase().split(&quot; &quot;);
	var tEventDateTime= &quot;&quot;.concat(lstEventDateTime[0]).concat(&quot; &quot;).concat(lstEventDateTime[1]);

	var nEventDate= tEventDateTime.slice(6,8).concat(&quot;20&quot;).concat(tEventDateTime.slice(0,2)).concat(tEventDateTime.slice(3,5));
	var nEventTime= tEventDateTime.split(&quot; &quot;)[1];

	if(nEventTime.toString().indexOf(&quot;PM&quot;)&gt;-1) {
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG: eventTime contains PM: &quot; + nEventTime.toString().indexOf(&quot;PM&quot;)); }
		if(nEventTime.toString().length&lt;7) {
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG: eventTime length&lt;7 chars: &quot; + nEventTime.toString().length); } 
			var addLeadingZero= 12;
			var tHours= nEventTime.split(&quot;:&quot;)[0];
			var tMinutes= nEventTime.split(&quot;:&quot;)[1].replace(/[^0-9]/g, &quot;&quot;);
			var tHours= parseInt(addLeadingZero) + parseInt(tHours);
			var tEventTime= tHours.toString().concat(tMinutes.toString()).concat(&quot;00&quot;);
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG: new EventTime: &quot; + tEventTime.toString()); } 
		} else { 
			var tEventTime= nEventTime.toString().replace(/[^0-9]/g, &quot;&quot;) + &quot;00&quot;; 
		} 
	} else {
		var tEventTime= &quot;0&quot; + nEventTime.toString().replace(/[^0-9]/g, &quot;&quot;) + &quot;00&quot;; 
	}
	var nEventDateTime= nEventDate.toString().concat(tEventTime.toString());
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG datetime: &quot;+nEventDateTime); }

	return nEventDateTime;

}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>af95fd5e-8686-4b90-bd08-f11b4f5e78ee</id>
        <name>currentDate_yyyyMMddhhmmss</name>
        <revision>1</revision>
        <lastModified>
          <time>1653055235571</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** currentDate_yyyyMMddhhmmss

  	- Desc: This function returns current DateTime only YYYYMMDDHHMMSS format

	@return {string} datetime - this string object contains the current DateTime only YYYYMMDDHHMMSS format
*/
function currentDate_yyyyMMddhhmmss() {
	var today = new Date();
	// set Date with leading zeros if needed
	var tMonth= today.getMonth()+1;
	if(tMonth.toString().length&lt;2) tMonth= &apos;0&apos;+tMonth;
	var tDay= today.getDate()
	if(tDay.toString().length&lt;2) tDay= &apos;0&apos;+tDay;
	var date = today.getFullYear()+&apos;&apos;+tMonth+&apos;&apos;+tDay;
	
	// set Time with leading zeros if needed
	var tHour= today.getHours();
	if(tHour.toString().length&lt;2) tHour= &apos;0&apos;+tHour;
	var tMinute= today.getMinutes();
	if(tMinute.toString().length&lt;2) tMinute= &apos;0&apos;+tMinute;
	var tSecond= today.getSeconds();
	if(tSecond.toString().length&lt;2) tSecond= &apos;0&apos;+tSecond;
	
	var time = tHour+&apos;&apos;+tMinute+&apos;&apos;+tSecond;
	var dateTime = date+&apos;&apos;+time;

	return dateTime;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>59ebad58-f839-4429-b9fb-175fb5a4d5ec</id>
        <name>getChannelId</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911262975</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	getChannelId(nameOfChannel) function
	DESC: This function takes the string nameOfChannel Object as a parameter and returns the string channelId

	PARAMETERS:
	@param	{string} - pass the string object of the channelName
	@return 	{string} - return the channelId

	MODIFIED:	

 	USAGE:								
	E.G 
	var arrElementObjects= setXMLElementsArrayWithDescendants(xmlElement, debug);
	
*/

function getChannelId(nameOfChannel){ 
    if (nameOfChannel === undefined || nameOfChannel.length == 0) return &quot;&quot;; 
     
    var listIDs = ChannelUtil.getChannelIds(); 
    if (listIDs.isEmpty()) return &quot;&quot;; 
     
    var nameFromList; 
    for (var i = 0; i &lt; listIDs.size();i++){ 
        nameFromList = ChannelUtil.getChannelName(listIDs.get(i)); 
        if(nameFromList == nameOfChannel) return listIDs.get(i); 
    } 
    return &quot;&quot;; 
}  </code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>887718d9-8250-4b4e-9b81-4a02cc1bef45</id>
        <name>getHL7v2ACK</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911262563</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	setHL7v2ACK(msg) - DEVELOPMENT
	
	- Desc: This function set and returns HL7v2 HAPI Acknowledgement (ACK) message based on evaluating conditions

	@param 
	sourceMsg {string} - source message
	responseCode {string} - Mirth Connect processing responseCode
	responseMsg {string} - response MSA message
	responseStatus {string} - Mirth Connect processing responseStatus
	
	@return {XML} - this returns the HL7 HAPI Ack message
*/
function setHL7v2ACK(sourceMsg,responseCode,responseMsg,responseStatus) {

	var scriptName= &apos;getHL7v2ACK&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG msg.MSH: &apos;+JSON.stringify(msg[&apos;MSH&apos;].toString())); }
	
	importPackage(com.mirth.connect.model);
	// responseStatus is an optional parameter
	if (!responseStatus)
		responseStatus = {&apos;AA&apos;:Response.Status.SUCCESS,&apos;AR&apos;:Response.Status.FILTERED,&apos;AE&apos;:Response.Status.FAILURE}[responseCode] || Response.Status.UNKNOWN;
	var ack = &lt;HL7Message/&gt;;
	
	ack.MSH[&apos;MSH.1&apos;] = sourceMsg.MSH[&apos;MSH.1&apos;].toString();
	ack.MSH[&apos;MSH.2&apos;] = sourceMsg.MSH[&apos;MSH.2&apos;].toString();
	ack.MSH[&apos;MSH.3&apos;] = sourceMsg.MSH[&apos;MSH.5&apos;].copy();
	ack.MSH[&apos;MSH.4&apos;] = sourceMsg.MSH[&apos;MSH.6&apos;].copy();
	ack.MSH[&apos;MSH.5&apos;] = sourceMsg.MSH[&apos;MSH.3&apos;].copy();
	ack.MSH[&apos;MSH.6&apos;] = sourceMsg.MSH[&apos;MSH.4&apos;].copy();
	ack.MSH[&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = DateUtil.getCurrentDate(&apos;yyyyMMddHHmmss&apos;);
	ack.MSH[&apos;MSH.9&apos;][&apos;MSH.9.1&apos;] = sourceMsg.MSH[&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString();
	ack.MSH[&apos;MSH.9&apos;][&apos;MSH.9.2&apos;] = sourceMsg.MSH[&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();
	ack.MSH[&apos;MSH.9&apos;][&apos;MSH.9.3&apos;] = &apos;ACK&apos;;
	ack.MSH[&apos;MSH.10&apos;] = sourceMsg.MSH[&apos;MSH.10&apos;].copy();
	ack.MSH[&apos;MSH.11&apos;] = sourceMsg.MSH[&apos;MSH.11&apos;].copy();
	ack.MSH[&apos;MSH.12&apos;] = sourceMsg.MSH[&apos;MSH.12&apos;].copy();
	ack.MSA[&apos;MSA.1&apos;][&apos;MSA.1.1&apos;] = responseCode;
	ack.MSA[&apos;MSA.2&apos;][&apos;MSA.2.1&apos;] = sourceMsg.MSH[&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
	ack.MSA[&apos;MSA.3&apos;][&apos;MSA.3.1&apos;] = responseMsg;
	
	responseMap.put(&apos;ACK&apos;,new Response(responseStatus,SerializerFactory.getHL7Serializer().fromXML(ack)));

}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>9d1a5389-8d5f-4f98-923a-6e5570b4bdc3</id>
        <name>jsonNulltoEmptyString</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911262944</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Converts JSON Null Object values to empty string
*/

/*
	Author: IntegrateIT.us LLC
	toHL7Date: Returns an empty string

	Arguments
	---------
		Required
		--------
			JSON element:		A JSON element (e.g. &quot;MiddleName&quot;:null )

*/

function jsonNulltoEmptyString( strElement, jsonElement, debug ) 
{

	var scriptName= &quot;jsonNulltoEmptyString&quot;;
	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG jsonElement IN key:&quot;+strElement+&quot; value: &quot;+jsonElement); 
		logger.info(scriptName+&quot;::DEBUG typeof jsonElement IN: &quot;+typeof(jsonElement));
	}
	// try {
		if (typeof(jsonElement) !== &apos;undefined&apos;) {
			if (typeof(jsonElement) !== &apos;string&apos;) {
				if (typeof(jsonElement) == &apos;object&apos;) {
					var jsonElement= &quot;&quot;;
				} 
			} else {
				if (jsonElement.toString()== null) {
					var jsonElement= jsonElement.replace(null,&quot;&quot;);
				}
			}	
		} else {
			var jsonElement= &quot;&quot;;
		}
	/*
	} catch (err) {
		return jsonElement
	} finally {
		return newJsonElement;
	}
	*/
	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG jsonElement OUT key:&quot;+strElement+&quot; value: &quot;+jsonElement); 
		logger.info(scriptName+&quot;::DEBUG typeof jsonElement OUT: &quot;+typeof(jsonElement));
		logger.info(&quot;&quot;);
	}
	return jsonElement;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>a53342c5-cb0d-47b5-b156-cd559fbd40ac</id>
        <name>random_date_after_date</name>
        <revision>7</revision>
        <lastModified>
          <time>1658169955060</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	This function will produce a random date based on a provided date and number of days argument.

	@param {String} start - enter the starting date (&apos;YYYY&apos;, &apos;MM&apos;, &apos;DD&apos;) (e.g. &apos;2021&apos;, &apos;09&apos;, &apos;13&apos;)
	@param {String} days -  number of days (positive or negative) (e.g. 365, 3000, -365)
	@return {String} return description
*/
function random_date_after_date(start, days) {
	
	// randomDateAfterDate(new Date(2021, 4, 5), -365) 
	var scriptName= &apos;random_date_after_date&apos;;
	var debug= 1;
	
	// if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; start= &apos;+start+&apos; number of days: &apos;+days);
	// }
	
	var strRandom= Math.random()*days*10000;
	var strStringRandom= strRandom.toString();
	var strRandom= strStringRandom.substring(0,4);
	
	var newDate= new Date(start.getTime() + strRandom);
	// Fri Jun 26 2020 08:59:35 GMT-0600 (GMT-06:00)
	var strDate= newDate.getFullYear() + &quot;&quot; + addLeadingZeros(newDate.getMonth() + 1) + &quot;&quot; + addLeadingZeros(newDate.getDate());
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; random date generated: &apos;+strDate);
	}

	return strDate;
}

function addLeadingZeros(n) {
  
  if (n &lt;= 9) {
    return &quot;0&quot; + n;
  }
  
  return n;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>b527f706-5c50-4f44-bee5-d16dd9edd8f0</id>
        <name>random_generator</name>
        <revision>3</revision>
        <lastModified>
          <time>1653591827816</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	This function will produce a random number based on the number of characters provided into the numOfChars argument.

	@param {String} numOfChars - enter the number of random characters to be returned
	@return {String} return description
*/
function random_generator(numOfChars) {
	var scriptName= &apos;random_generator&apos;;
	var debug= 0;
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; evaluate number of characters: &apos;+numOfChars);
	}
	
	var strNumOfChars= &apos;&apos;+numOfChars+&apos;&apos;;
	var cntNumOfChars= strNumOfChars.padEnd(numOfChars,0);
	var strRandom= (Math.random()*cntNumOfChars).toFixed();
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; random number generated: &apos;+strRandom);
	}
	
	return strRandom;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>fefafe84-cb17-415b-b96e-ff00063c267a</id>
        <name>sendHttpsPostClientCert</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911262729</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**

	sendHttpsPostClientCert(state, url, certificatePath, certificatePassword) - Returns custom HTTP response
	
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} state - arg1 description
	@param {String} url - arg2 description
	@param {String} certificatePath - arg3 description
	@param {String} certificatePasswordte - arg4 description
	@return {String} return description
*/
function sendHttpsPostClientCert(state, url, certificatePath, certificatePassword) {
	// write code here.

	var scriptName= &quot;sendHttpsPostClientCert&quot;;
	var messageBody = messageObject.getEncodedData();
	var httpsSender = new Packages.com.xti.util.HTTPSSender(certificatePath, certificatePassword);

	// Set all the necessary parameters...
	httpsSender.setURL(url);
	httpsSender.setMessageBody(messageBody);

	logger.info(scriptName+&quot;::DEBUG Sending message to &quot; + url + &quot; - &quot; + messageBody);

	// Send the message to the URL...
	try {
		httpsSender.send();
		var retString = httpsSender.getReturnValue();
		retString = retString.substr(0, retString.indexOf(&quot;MSA&quot;)) + &quot;\r&quot; + retString.substr(retString.indexOf(&quot;MSA&quot;));
		var responseMessage = new Packages.com.mirth.connect.model.converters.SerializerFactory.getHL7Serializer().toXML(retString);
		channelMap.put(&apos;responseMessage&apos;,responseMessage);

		if (responseMessage[&apos;MSA&apos;][&apos;MSA.1&apos;][&apos;MSA.1.1&apos;].toString() == &apos;AA&apos;) {
			logger.info(scriptName+&quot;::DEBUG HTTPS send success. Return value= &quot; + retString);
		} else {
			logger.info(scriptName+&quot;::DEBUG HTTPS send failure. Return value= &quot; + retString);
			throw(&quot;HTTPS send failure. Return value=&quot; + retString);
		}
	} catch (e) {
		logger.info(scriptName+&quot;::DEBUG Error message= &quot; + e.message);
		throw(e.message);
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>37fab7a4-d254-46f6-925b-1c4bd8bacc48</id>
        <name>set24Hrs</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911263134</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	set24Hrs - Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function set24Hrs(d){

  if (d.slice(-2) === &quot;PM&quot;){
      var hrs = parseInt(d.slice(-7,-5))
      var mins = d.slice(-4,-2)
      hrs = hrs + 12
      var dd = d.slice(0,9) + &quot; &quot; + hrs + &quot;:&quot; + mins;
      return dd;
  } else if(d.slice(-2) === &quot;AM&quot;){
      return (d.slice(0, 16));
  } else {
      throw (&quot;UNRECOGNIZED_FORMAT&quot;,&quot;set24Hrs() Received Unrecognized Formatted String&quot;);
  }
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>690e66f5-be75-4877-9354-42bb679b7bf6</id>
    <name>CCDtoXDS</name>
    <revision>21</revision>
    <lastModified>
      <time>1661376358782</time>
      <timezone>GMT-06:00</timezone>
    </lastModified>
    <description>CCDtoXDS</description>
    <includeNewChannels>false</includeNewChannels>
    <enabledChannelIds>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>21901337-48c5-4cce-b4ff-ffdb3a14d9ba</id>
        <name>getAddress</name>
        <revision>16</revision>
        <lastModified>
          <time>1659055557599</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**  getAddress(address) - Desc: This function receives CCD/CCDA msg and returns from Address Object

   	@param {String} msg - this contains the raw message (string)
	@return {object} objAddress - this contains the patientRole elements composed into a single objPatientRole object.
	
	History
	2022-07-28 JER - Modify the streetAddressLine if multiple streetAddressLine element objects
	2021-09-20 JER - Modified to incorporate evaluation of multiple patientRole Id(s) in the case there are multiple patient identifiers
	2021-09-20 JER - Modified to patient.name incorporate evaluation of multiple patient name child elements in the case there are multiple patient identifiers
*/
function getAddress(address) {
 
	// define variables
	var debug= 0;
	var scriptName= &apos;getAddress&apos;;
	var arrAddresses= new Array();
	
	if(debug&gt;0) { logger.error(scriptName+&apos; msg= &apos;+msg); }
	if (typeof(address) !== &apos;undefined&apos;) {

		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; address.length= &apos;+address.length()+&apos; address= &apos;+address); }			
		
		if(address.length()&gt;1) {
			// for each addr element
			var j= 0;
			for(var i= 0;i&lt;1;i++) {

				var objAddress= new Object();
				objAddress.id= j;
				if(address[i][&apos;@use&apos;]) {
					objAddress.use= address[i][&apos;@use&apos;].toString();
				} // end if address element @use property is not null

				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; address[&apos;+i+&apos;].children()= &apos;+address[i].children()); }
				
				// 2022-07-28 JER - Modify the streetAddressLine if multiple streetAddressLine element objects
				var strStreetAddressLine= &apos;&apos;; var lenStreetAddressLine= address[i].streetAddressLine.length();
				for(var j= 0;j&lt;address[i].streetAddressLine.length();j++) {
					if(lenStreetAddressLine&gt;1) {
						strStreetAddressLine+= address[i].streetAddressLine[j].toString()+&apos; &apos;;
					} else {
						strStreetAddressLine=  address[i].streetAddressLine[j].toString();
					} // end if 
				} // end for 
				objAddress.streetAddressLine= strStreetAddressLine;
				
				/*
				if(address[i].streetAddressLine.toString().length&gt;0) {
					objAddress.streetAddressLine=	address[i].streetAddressLine.toString();
				} else {
					objAddress.streetAddressLine=	&quot;&quot;; 
				} // end if streetAddressLine
				*/	
					
					if(address[i].county.toString().length&gt;0) {
						objAddress.county=			address[i].county.toString()
					} else {
						objAddress.county=	&quot;&quot;; 
					} // end if county element
					
					if(address[i].city.toString().length&gt;0) {
						objAddress.city=			address[i].city.toString()
					} else {
						objAddress.city=	&quot;&quot;; 
					} // end if city element
					
					if(address[i].state.toString().length&gt;0) {
						objAddress.state=			address[i].state.toString()
					} else {
						objAddress.state= &quot;&quot;;
					} // end if state element
					
					if(address[i].postalCode.toString().length&gt;0) {
						objAddress.postalCode=		address[i].postalCode.toString()
					} else {
						objAddress.postalCode= &quot;&quot;;
					} // end if postalCode element
					
					if(address[i].useablePeriod) {
						if(address[i].useablePeriod.children().length()&gt;0) {
							for each(child in address[i].useablePeriod.children()) {
								if(child.localName()== &apos;low&apos;) {
									objAddress.beginDate=	child[&apos;@low&apos;].toString();
								}
								if(child.localName()== &apos;high&apos;) {
									objAddress.endDate=		child[&apos;@high&apos;].toString();
								}
							} // end for each
						} // end if 
					} // end if useablePeriod element
					arrAddresses.push(objAddress);
				//} // for each child element
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;function arrAddress: &apos;+JSON.stringify(arrAddresses)); }
				j++;
			} // for each address element 
		} else {
			if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; address.children()= &apos;+JSON.stringify(address.children())); }
			var objAddress= new Object();
			objAddress.id= i;
			if(address[&apos;@use&apos;]) {
				objAddress.use= address[&apos;@use&apos;].toString();
			} // end if address element @use property is not null

			if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; address.children()= &apos;+address.children()); }
				
				// for each(child in address.children()) {
				
					if(address.streetAddressLine.toString().length&gt;0) {
						objAddress.streetAddressLine=	address.streetAddressLine.toString();
					} else {
						objAddress.streetAddressLine=	&quot;&quot;; 
					} // end if streetAddressLine
					
					if(address.county.toString().length&gt;0) {
						objAddress.county=			address.county.toString()
					} else {
						objAddress.county=	&quot;&quot;; 
					} // end if county element
					
					if(address.city.toString().length&gt;0) {
						objAddress.city=			address.city.toString()
					} else {
						objAddress.city=	&quot;&quot;; 
					} // end if city element
					
					if(address.state.toString().length&gt;0) {
						objAddress.state=			address.state.toString()
					} else {
						objAddress.state= &quot;&quot;;
					} // end if state element
					
					if(address.postalCode.toString().length&gt;0) {
						objAddress.postalCode=		address.postalCode.toString()
					} else {
						objAddress.postalCode= &quot;&quot;;
					} // end if postalCode element
					
					if(address.useablePeriod) {
						if(address.useablePeriod.children().length()&gt;0) {
							for each(child in address.useablePeriod.children()) {
								if(child.localName()== &apos;low&apos;) {
									objAddress.beginDate=	child[&apos;@low&apos;].toString();
								}
								if(child.localName()== &apos;high&apos;) {
									objAddress.endDate=		child[&apos;@high&apos;].toString();
								}
							} // end for each
						} // end if 
					} // end if useablePeriod element
					arrAddresses.push(objAddress);
				// } // for each child element
				
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;function arrAddress: &apos;+JSON.stringify(arrAddresses)); }

			arrAddresses= objAddress;
			if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;function arrAddress: &apos;+JSON.stringify(arrAddresses)); }
		} // end if number of addr elements

		channelMap.put(&apos;arrAddresses&apos;,JSON.stringify(arrAddresses));
		return arrAddresses;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>6b3af922-f209-40b0-a3d2-074f147abe37</id>
        <name>getAssignedAuthor</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911325519</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** getAssignedAuthor(msg)

  	- Desc: This function receives CCD assignedAuthor XML Object and returns JavaScript object
  	- Modified 
  	2018-02-24 04:18 CT JER - Modified the msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;].toString() evaluation !== undefined to length&gt;0
	
   	@param {XML} msg - this contains the raw message (string)
	@return {object} getAssignedAuthor - contains getAssignedAuthor JS object and related properties.
*/

function getAssignedAuthor(msg) {

	var debug= 0;
	var objAssignedAuthor= new Object;

	if(debug&gt;0) { 
		logger.error(&apos;getAssignedAuthor msg: &apos;+msg);
		logger.error(&apos;getAssignedAuthor msg[assignedAuthor]: &apos;+JSON.stringify(msg[&apos;assignedAuthor&apos;])+
		&apos; typeof: &apos;+msg[&apos;assignedAuthor&apos;]+
		&apos; length: &apos;+msg[&apos;assignedAuthor&apos;].toString().length); 
	} // end if 
	
	if(typeof msg[&apos;assignedAuthor&apos;] !== &apos;undefined&apos;) {
		if(msg[&apos;assignedAuthor&apos;].children().length()&gt;0) {
			
			// &lt;assignedAuthor classCode=&quot;ASSIGNED&quot;&gt;
			// set assignedAuthor classCode
			if(typeof msg[&apos;assignedAuthor&apos;][&apos;@classCode&apos;] !== &apos;undefined&apos;) {
				if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][@classCode]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;@classCode&apos;].toString()); }
				objAssignedAuthor.classCode= msg[&apos;assignedAuthor&apos;][&apos;@classCode&apos;].toString();
			} // end if
			
			// &lt;id assigningAuthorityName=&quot;INLP_FIN&quot; extension=&quot;INLP&quot; root=&quot;2.16.840.1.113883.3.2139.200&quot;/&gt;
			// set assignedAuthor Id
			if(typeof msg[&apos;assignedAuthor&apos;][&apos;id&apos;] !== &apos;undefined&apos;) {
				// set assignedAuthor Id assigningAuthorityName
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][id][@assigningAuthorityName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString()); }
					objAssignedAuthor.assigningAuthorityName= msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString();
				} // end if
				// set assignedAuthor Id root
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@root&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][id][@root]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@root&apos;].toString()); }
					objAssignedAuthor.root= msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@root&apos;].toString();
				} // end if
				// set assignedAuthor Id extension
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@extension&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][id][@extension]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@extension&apos;].toString()); }
					objAssignedAuthor.extension= msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
				} // end if
			} // end if
			
			// set assignedAuthor Code
			if(typeof msg[&apos;assignedAuthor&apos;][&apos;code&apos;] !== &apos;undefined&apos;) {
				// set assignedAuthor code code
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@code&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][code][@code]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@code&apos;].toString()); }
					objAssignedAuthor.code= msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
				} // end if
				// set assignedAuthor code codeSystemOid
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][code][@codeSystem]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString()); }
					objAssignedAuthor.codeSystem= msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString();
				} // end if
				// set assignedAuthor code codeSystemName
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][code][@codeSystemName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;].toString()); }
					objAssignedAuthor.codeSystemName= msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;].toString();
				} // end if
				// set assignedAuthor code displayName
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@displayName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][code][@displayName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString()); }
					objAssignedAuthor.codeDisplayName= msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
				} // end if
			} // end if
			
	
			// set assignedAuthor assignedAuthoringDevice
			/* &lt;assignedAuthoringDevice&gt;&lt;manufacturerModelName&gt;Cerner Corporation&lt;/manufacturerModelName&gt;&lt;softwareName&gt;Millennium Clinical Document Generator&lt;/softwareName&gt;&lt;/assignedAuthoringDevice&gt; */
			if(typeof msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;] !== &apos;undefined&apos;) {
				// get manufacturer
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;manufacturerModelName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][assignedAuthoringDevice][manufacturerModelName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;manufacturerModelName&apos;].toString()); }
					objAssignedAuthor.assignedAuthorizingDevice_manufacturer= msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;manufacturerModelName&apos;].toString();
				} // end if 
				// get softwareName
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;softwareName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][assignedAuthoringDevice][softwareName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;softwareName&apos;].toString()); }
					objAssignedAuthor.assignedAuthorizingDevice_softwareName= msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;softwareName&apos;].toString();
				} // end if 
			} // end if 
			
			// set assignedAuthor representedOrganization
			/*  &lt;representedOrganization classCode=&quot;ORG&quot; determinerCode=&quot;INSTANCE&quot;&gt;&lt;id assigningAuthorityName=&quot;INLP_FIN&quot; extension=&quot;INLP&quot; root=&quot;2.16.840.1.113883.3.2139.200&quot;/&gt;&lt;id root=&quot;2.16.840.1.113883.3.2139&quot;/&gt;&lt;name&gt;La Porte Hospital&lt;/name&gt;
			*/

			if(debug&gt;0) { 
				logger.error(&apos;msg[assignedAuthor][representedOrganization]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;]+
					&apos; typeof: &apos;+typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;]+
					&apos; toString: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;].toString()+
					&apos; length: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;].toString().length); 
			}
			
			if(msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;].toString().length&gt;0) {
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;] !== &apos;undefined&apos;) {
					// set representedOrganization Id assigningAuthorityName
					if(typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][representedOrganization][id][@assigningAuthorityName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString()); }
						objAssignedAuthor.representedOrganization_assigningAuthorityName= msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString();
					} // end if
					// set representedOrganization Id extension
					if(typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@extension&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][representedOrganization][id][@extension]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@extension&apos;].toString()); }
						objAssignedAuthor.representedOrganization_extension= msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@extension&apos;].toString();
					} // end if
					// set representedOrganization Id root
					if(typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@root&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][representedOrganization][id][@root]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@root&apos;].toString()); }
						objAssignedAuthor.representedOrganization_root= msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@root&apos;].toString();
					} // end if
				} // end if 
			} // end if
				
			// check for assignedAuthor representedOrganization name child element
			if(typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;name&apos;] !== &apos;undefined&apos;) {
				if(msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;name&apos;].toString().length&gt;0) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][representedOrganization][name]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;name&apos;].toString()); }
					objAssignedAuthor.representedOrganizationName= msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;name&apos;].toString();	// Walgreens Drug Store 12562
				} else if (msg[&apos;assignedAuthor&apos;][&apos;assignedPerson&apos;][&apos;name&apos;].toString().length&gt;0) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][assignedPerson][name]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;assignedPerson&apos;][&apos;name&apos;].toString()); }
					objAssignedAuthor.representedOrganizationName= msg[&apos;assignedAuthor&apos;][&apos;assignedPerson&apos;][&apos;name&apos;].toString();	// Walgreens Drug Store 12562
				} // end if
			} // end if 
		} // end if
	} // end if 
	return objAssignedAuthor;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>a303a44c-4750-4b83-893f-cecf38ee1c7c</id>
        <name>getAssignedAuthorAddress</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911325540</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** setAssignedAuthorAddress(msg)

  	- Desc: This setAssignedAuthorAddress function receives message and returns objAssignedAuthorAddress toXMLString
  	- Modified:
  	2019-11-20 22:20 CST - Under development
	
   	@param {msg} - this contains the Javascript message document 
	@return {XML} objAssignedAuthorAddress - contains objAssignedAuthorAddress in XML Object string.

	Reference: https://gazelle.ihe.net/XDStarClient/rimihe-templates/rimihe-Author_XDSDocumentEntry.html
		
*/

function getAssignedAuthorAddress(msg) {

	var debug= 0;
	var arrParticipant= new Array();
	var strFunctionName= &apos;getAssignedAuthorAddress&apos;;
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; msg[author][assignedAuthor]: &apos;+msg[&apos;author&apos;][&apos;assignedAuthor&apos;].toXMLString());
		logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; msg[author][assignedAuthor][addr]: &apos;+msg[&apos;author&apos;][&apos;assignedAuthor&apos;][&apos;addr&apos;].toXMLString());
	} // end if 
		
	var objAssignedAuthorAddress= new Object;
	if(msg.author.assignedAuthor.children().length()&gt;0) {
		
		if(debug&gt;0) { 
			logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; AssignedAuthor.children().length: &apos;+msg.author.assignedAuthor.children().length()+&apos; children names: &apos;+msg.author.assignedAuthor.children());
		} // end if 
		if((msg[&apos;author&apos;][&apos;assignedAuthor&apos;][&apos;addr&apos;] !== &apos;undefined&apos;)&amp;&amp;(msg[&apos;author&apos;][&apos;assignedAuthor&apos;][&apos;addr&apos;].toString().length&gt;0)) {
			
			for each (child in msg.author.assignedAuthor.children()) {
					
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; child.fullName: &apos;+child.name()+&apos; child.text: &apos;+child.name+&apos; child.localName(): &apos;+child.localName());
				} // end if 
				if(child.localName()== &apos;addr&apos;) {
					if((child.toString() !== &apos;undefined&apos;)&amp;&amp;(child.toString().length&gt;0)) {
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; addr.toXMLString: &apos;+child.toXMLString());
						} // end if 
						objAssignedAuthorAddress.addr= child.toXMLString();
					} // end if 
				} // end if 
			} // end for each
		} // end if
		channelMap.put(&apos;objAssignedAuthorAddress&apos;,objAssignedAuthorAddress);
	} // end if

} // end proc</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>ee2d85ee-4285-4f11-9947-e1a96874d3f5</id>
        <name>getAssignedEntity</name>
        <revision>2</revision>
        <lastModified>
          <time>1654011867722</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** getAssignedEntity(msg)

  	- Desc: This function receives CCD assignedEntity XML Object and returns JavaScript object
  	- Modified 	
  	2020-01-29 19:25 CT JER - Modified to comment out the debug statement to echo the toXMLString msg[assignedEntity][assignedPerson][name][given]
	2018-04-22 16:43 CT JER - Modified to include the storing of the id.root element.attribute for reference purposes
	2018-04-15 23:42 CT JER - Modified to include additional if no value or sizeable value handling (length()&gt;1, length= 1 and the else) for givenName element value.
	2018-02-16 17:48 CT JER - Added the assignedPerson Name suffix and the representedOrganization Name

   	@param {XML} msg - this contains the raw message (string)
	@return {object} objAssignedEntity - contains objAssignedEntity JS object and related properties.
*/

function getAssignedEntity(msg) {

	var debug= 0;
	var objAssignedEntity= new Object;
	default xml namespace = &apos;urn:hl7-org:v3&apos;;
	// &lt;given xmlns=&quot;urn:hl7-org:v3&quot;&gt;Julius&lt;/given&gt;&lt;given xmlns=&quot;urn:hl7-org:v3&quot;&gt;R&lt;/given&gt;
	
	if(typeof msg[&apos;assignedEntity&apos;] !== &apos;undefined&apos;) {
		if(msg[&apos;assignedEntity&apos;].children().length()&gt;0) {
			
			// set assignedEntity classCode
			if(typeof msg[&apos;assignedEntity&apos;][&apos;@classCode&apos;] !== &apos;undefined&apos;) {
				if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][@classCode]: &apos;+msg[&apos;assignedEntity&apos;][&apos;@classCode&apos;].toString()); }
				objAssignedEntity.classCode= msg[&apos;assignedEntity&apos;][&apos;@classCode&apos;].toString();
			} // end if
			
			// set assignedEntity Id
			if(typeof msg[&apos;assignedEntity&apos;][&apos;id&apos;][0] !== &apos;undefined&apos;) {
				// set assignedEntity Id assigningAuthorityName
				if(typeof msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@assigningAuthorityName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][id][0][@assigningAuthorityName]: &apos;+msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@assigningAuthorityName&apos;].toString()); }
					objAssignedEntity.assigningAuthorityName= msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@assigningAuthorityName&apos;].toString();
				} // end if
				// set assignedEntity Id root
				if(typeof msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@root&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][id][0][@root]: &apos;+msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@root&apos;].toString()); }
					objAssignedEntity.root= msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@root&apos;].toString();
				} // end if
				// set assignedEntity Id extension
				if(typeof msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@extension&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][id][0][@extension]: &apos;+msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@extension&apos;].toString()); }
					objAssignedEntity.extension= msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@extension&apos;].toString();
				} // end if
			} // end if
			
			// set assignedEntity Code
			if(typeof msg[&apos;assignedEntity&apos;][&apos;code&apos;] !== &apos;undefined&apos;) {
				// set assignedEntity code code
				if(typeof msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@code&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][code][@code]: &apos;+msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@code&apos;].toString()); }
					objAssignedEntity.code= msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
				} // end if
				// set assignedEntity code codeSystemOid
				if(typeof msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][code][@codeSystem]: &apos;+msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString()); }
					objAssignedEntity.codeSystem= msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString();
				} // end if
				// set assignedEntity code codeSystemName
				if(typeof msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][code][@codeSystemName]: &apos;+msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;].toString()); }
					objAssignedEntity.codeSystemName= msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;].toString();
				} // end if
				// set assignedEntity code displayName
				if(typeof msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@displayName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][code][@displayName]: &apos;+msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString()); }
					objAssignedEntity.codeDisplayName= msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
				} // end if
			} // end if

		
			// set assignedEntity assignedPerson name
			if(typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;] !== &apos;undefined&apos;) {
				if(debug&gt;0) { 
					logger.error(&apos;toXMLString msg[assignedEntity][assignedPerson][name][given]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].toXMLString()+
					&apos;msg[assignedEntity][assignedPerson][name][given]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].toString()+
					&apos; typeof: &apos;+typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;]+
					&apos; length: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].length()
					);
				}
				if(typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;] !== &apos;undefined&apos;) {
					// get assignedEntity Given name	
					if((typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;] !== &apos;undefined&apos;)||(msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].toString().length&gt;0)) {	
						if(debug&gt;0) { 
							logger.error(&apos;msg[assignedEntity][assignedPerson][name][given]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;][0].toString()); 
						} // end if 
						if(msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].length()&gt;1) {
							objAssignedEntity.givenName= msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;][0].toString();
						} else if(msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].length()== 1) {
							objAssignedEntity.givenName= msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].toString();
						} else {
							objAssignedEntity.givenName= &apos;&apos;;
						} // end if 
					} // end if 
					// get assignedEntity Family name	
					if((typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;family&apos;] !== &apos;undefined&apos;)||(msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;family&apos;].length&gt;0)) {	
						if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][assignedPerson][name][family]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;family&apos;].toString().replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;)); }
						objAssignedEntity.familyName= msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;family&apos;].toString().replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;);
					} // end if
					// get assignedEntity Suffix
					if(debug&gt;0) { logger.error(&apos;getAssignedEntity msg[assignedEntity][assignedPerson][name][suffix]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;]+
						&apos; typeof: &apos;+typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;]+
						&apos; length: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;].toString().length);
					} // end if logger.error
					if((typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;] !== &apos;undefined&apos;)||(msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;].toString().length&gt;0)) {	
						if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][assignedPerson][name][suffix]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;].toString()); }
						objAssignedEntity.suffix= msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;].toString();
					} // end if 
				} // end if 
			} // end if 
			
			// set assignedEntity representedOrganization
			if(typeof msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;] !== &apos;undefined&apos;) {
				// check for assignedEntity representedOrganization name child element
				if(typeof msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;name&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][representedOrganization][name]: &apos;+msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;name&apos;].toString()); }
					objAssignedEntity.representedOrganizationName= msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;name&apos;].toString();	// Walgreens Drug Store 12562
				} // end if
				
				if(typeof msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;id&apos;] !== &apos;undefined&apos;) {
					if(typeof msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;root&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][representedOrganization][id][root]: &apos;+msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;root&apos;].toString()); }
						objAssignedEntity.representedOrganizationIdRoot= msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;root&apos;].toString();	// 12562
					} // end if 
				} // end if
			} // end if
		} // end if
	} // end if 

	if(objAssignedEntity.toString().length&gt;0) {
		channelMap.put(&apos;assignedEntity&apos;,objAssignedEntity);
	}
	
	return objAssignedEntity;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>e2cc3ab2-6619-43f6-b77e-bb2f56a8670f</id>
        <name>getAuthorPerson</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911325323</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** getAuthorPerson(object)

  	- Desc: This function receives Javascript Object and returns AuthorPerson string
  	- Modified:
	2018-02-18 10:12 CT JER - Modified to accommodate the changes to the objAssignedEntity
  	2018-02-16 10:40 CT JER - Removed the objAuthor instances reference and left the references specific to JS Rhino XPath
  	2018-02-15 16:01 CT JER - Modified included additional typeof and for each object

   	@param {object} objAuthor - this contains the Javascript Object (object)
	@return {string} strAuthorPerson - contains authorPerson string containing the required HL7.Composite.XCN datatype and related properties.
	
	[2018-02-18 10:11:47,629]  ERROR (transformer:?): objAuthor= ({assigningAuthorityName:&quot;INLP_FIN&quot;, extension:&quot;3100004118&quot;, root:&quot;2.16.840.1.113883.3.2139.200&quot;, startTime:&quot;20180208041500&quot;, stopTime:&quot;20180208075000&quot;, dispositionCode:&quot;&quot;, dispositionCodeSystemOid:&quot;&quot;, dispositionCodeSystemName:&quot;&quot;, dispositionDisplayName:&quot;Home or Self Care&quot;, encounterParticipant_code:&quot;ATND&quot;, assignedEntity_root:&quot;2.16.840.1.113883.3.2139.300&quot;, assignedEntity_extension:&quot;8284&quot;, assignedEntity_assigningAuthorityName:&quot;LPS_ORG_DOC&quot;, assignedEntity_code:&quot;&quot;, assignedEntity_codeSystem:&quot;&quot;, assignedEntity_codeSystemName:&quot;&quot;, assignedEntity_codeDisplayName:&quot;&quot;, assignedEntity_givenName:&quot;Robert&quot;, assignedEntity_familyName:&quot;Riggs&quot;})
	
*/

function getAuthorPerson(objAuthor) {

	var debug= 0;
	var cntObject= 0;
	var strAuthorPerson= &apos;&apos;;
	if(debug&gt;0) { 
		logger.error(&quot;getAuthorPerson objAuthor= &quot;+objAuthor.toSource()); 
		// logger.error(&quot;objAuthor JSON= &quot;+JSON.stringify(objAuthor, null, 4));
	}

	if(typeof objAuthor !== &apos;undefined&apos;) {	
	
		// replaced the assignedId with assignedEntity_extension
		if(typeof objAuthor.assignedEntity_extension !== &apos;undefined&apos;) {
			if(objAuthor.assignedEntity_extension.toString().length&gt;0) {
				if(debug&gt;0) { logger.error(&apos;objAuthor.assignedEntity_extension: &apos;+objAuthor.assignedEntity_extension.toString()); }
				strAuthorPerson += objAuthor.assignedEntity_extension.toString();
			} // end if 
		} // end if 

	
		// replaced the assignedPersonLastName with assignedEntity_familyName
		if(typeof objAuthor.assignedEntity_familyName !== &apos;undefined&apos;) {
			if(debug&gt;0) { logger.error(&apos;objAuthor.assignedEntity_familyName: &apos;+objAuthor.assignedEntity_familyName.toString()); }
			if(objAuthor.assignedEntity_familyName.toString().length&gt;0) {
				strAuthorPerson += &quot;^&quot;+objAuthor.assignedEntity_familyName.toString();
			} else {
				strAuthorPerson += &quot;^&quot;;
			} // end if 
		} // end if 
		// replaced the assignedPersonFirstName with assignedEntity_givenName
		if(typeof objAuthor.assignedEntity_givenName !== &apos;undefined&apos;) {
			// replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;) to remove namespaces
			// objAuthor.assignedEntity_givenName.toString().replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;)); }
			if(debug&gt;0) { 
				logger.error(&apos;objAuthor.assignedEntity_givenName: &apos;+objAuthor.assignedEntity_givenName.toString());
			} // end if 
			if(objAuthor.assignedEntity_givenName.toString().length&gt;0) {
				// strAuthorPerson += &quot;^&quot;+objAuthor.assignedEntity_givenName.toString().replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;);
				strAuthorPerson += &quot;^&quot;+objAuthor.assignedEntity_givenName;
			} else {
				strAuthorPerson += &quot;^&quot;;
			} // end if 
		} // end if

		 
		// replace the assignedPersonSuffix with assignedEntity_suffix
		if(typeof objAuthor.assignedEntity_suffix !== &apos;undefined&apos;) {
			if(debug&gt;0) { logger.error(&apos;objAuthor.assignedEntity_suffix: &apos;+objAuthor.assignedEntity_suffix.toString()); }
			if(objAuthor.assignedEntity_suffix.toString().length&gt;0) {
				strAuthorPerson += &quot;^^&quot;+objAuthor.assignedEntity_suffix.toString();
			} else {
				strAuthorPerson += &quot;^^&quot;;
			} // end if 
		} // end if 
		// replace the assignedRoot with assignedEntity_root
		if(typeof objAuthor.assignedEntity_root !== &apos;undefined&apos;) {
			if(debug&gt;0) { logger.error(&apos;objAuthor.assignedEntity_root: &apos;+objAuthor.assignedEntity_root.toString()); }
			if (objAuthor.assignedEntity_root.toString().length&gt;0) {
				strAuthorPerson += &quot;^^^^^&amp;amp;&quot;+objAuthor.assignedEntity_root.toString()+&quot;&amp;amp;ISO&quot;;
			} else {
				strAuthorPerson += &quot;^^^^^&quot;;
			} // end if
		} // end if
	} // end if 

	if(debug&gt;0) { logger.error(&quot;getAuthorPerson.strAuthorPerson: &quot;+strAuthorPerson); }
	return strAuthorPerson;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>e7b0d95b-2bde-43e7-ab61-ea1572002360</id>
        <name>getAuthors</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911325559</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** getAuthors(msg)

	- Desc: This function receives CCD msg and returns an array of Author objects 
	- Modified
	2018-02-18 13:38 CT JER - Modified to accommodate the changes to call the objAssignedAuthor function
	2018-02-10 11:32 CT JER - Verified per the HL7 Rim model 1..* assignedAuthors elements (1..* more authors) list objects persist to arrAuthors.
	2018-02-08 03:58 CT JER - Modified for additional handling verify typeof !== &apos;undefined&apos; and two conditionals to set authorInstitution property
	
	@param {String} msg - Raw msg
	@return {Array} return array of Author objects
*/
function getAuthors(msg) {
	
	var debug= 0;
	// uncertain if more than one assignedAuthor per ClinicalDocument
	if(debug&gt;0) { logger.error(&apos;getAuthor of msg[author]: &apos;+msg[&apos;author&apos;]); }
	
	var objAuthor= new Object;			
	var objAssignedAuthor= getAssignedAuthor(msg[&apos;author&apos;]);

	if(typeof objAssignedAuthor !== &apos;undefined&apos;) {
	
		// get assigningAuthorityName
		if((typeof objAssignedAuthor.assigningAuthorityName !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.assigningAuthorityName.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][id][@assigningAuthorityName]: &apos;+objAssignedAuthor.assigningAuthorityName.toString()); }
			objAuthor.IdAssigningAuthorityName= objAssignedAuthor.assigningAuthorityName.toString();
		} // end if
		// get root
		if((typeof objAssignedAuthor.root !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.root.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][id][@root]: &apos;+objAssignedAuthor.root.toString()); }
			objAuthor.Idroot= objAssignedAuthor.root.toString();
		} // end if
		// get extension
		if((typeof objAssignedAuthor.extension !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.extension.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][id][@extension]: &apos;+objAssignedAuthor.extension.toString()); }
			objAuthor.Idextension= objAssignedAuthor.extension.toString();
		} // end if			
	
		// get assignedAuthorizingDevice manufacturer -&gt; set manufacturer
		if((typeof objAssignedAuthor.assignedAuthorizingDevice_manufacturer !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.assignedAuthorizingDevice_manufacturer.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][assignedAuthoringDevice][manufacturerModelName]: &apos;+objAssignedAuthor.assignedAuthorizingDevice_manufacturer.toString()); }
			objAuthor.authorizingDevice= objAssignedAuthor.assignedAuthorizingDevice_manufacturer.toString();
		} // end if			
	
		// get assignedAuthorizingDevice softwareName -&gt; set softwareName
		if((typeof objAssignedAuthor.assignedAuthorizingDevice_softwareName !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.assignedAuthorizingDevice_softwareName.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][assignedAuthoringDevice][softwareName]: &apos;+objAssignedAuthor.assignedAuthorizingDevice_softwareName.toString()); }
			objAuthor.softwareName= objAssignedAuthor.assignedAuthorizingDevice_softwareName.toString();
		} // end if	
				
		// get objAssignedAuthor representedOrganization_assigningAuthorityName -&gt; set assigningAuthorityName
		if((typeof objAssignedAuthor.representedOrganization_assigningAuthorityName !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.representedOrganization_assigningAuthorityName.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][representedOrganization][id][assigingAuthorityName]: &apos;+objAssignedAuthor.representedOrganization_assigningAuthorityName.toString()); }
			objAuthor.representedOrganization_assigingAuthorityName= objAssignedAuthor.representedOrganization_assigningAuthorityName.toString();
		} // end if				
	
		// get objAssignedAuthor representedOrganization_extension -&gt; set extension
		if((typeof objAssignedAuthor.representedOrganization_extension !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.representedOrganization_extension.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][representedOrganization][id][extension]: &apos;+objAssignedAuthor.representedOrganization_extension.toString()); }
			objAuthor.representedOrganization_extension= objAssignedAuthor.representedOrganization_extension.toString();
		} // end if	
	
		// get objAssignedAuthor representedOrganization_root -&gt; set root
		if((typeof objAssignedAuthor.representedOrganization_root !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.representedOrganization_root.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][representedOrganization][id][root]: &apos;+objAssignedAuthor.representedOrganization_root.toString()); }
			objAuthor.representedOrganization_root= objAssignedAuthor.representedOrganization_root.toString();
		} // end if
				
		// get objAssignedAuthor.representedOrganizationName -&gt; set representedOrganizationName
		if((typeof objAssignedAuthor.representedOrganizationName !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.representedOrganizationName.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][representedOrganization][name]: &apos;+objAssignedAuthor.representedOrganizationName.toString()); }
			objAuthor.authorInstitution= objAssignedAuthor.representedOrganizationName.toString();
		} // end if
	} // end if 
	
	return objAuthor;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>d3986b7b-37b0-4f49-a339-b77570df76a6</id>
        <name>getCCDASectionMap</name>
        <revision>1</revision>
        <lastModified>
          <time>1656369794466</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** getCCDASectionMap(code)

  	- Desc: This function receives the templateId code and returns the mapped CCDA Section titlename

   	@param {String} msg - this contains the raw message (string)
	@return {object} objPatientRole - this contains the patientRole elements composed into a single objPatientRole object.
	
	History
*/
function getCCDASectionMap(code) {

	var debug= 0;
	var scriptName= &apos;getCCDASectionMap&apos;;
	
	if(code== &quot;2.16.840.1.113883.10.20.22.2.22&quot;) return &apos;Encounter Details&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.6&quot;)  return &apos;Allergies&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.1&quot;)  return &apos;Medications&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.5&quot;)  return &apos;Active Problems&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.2&quot;)  return &apos;Immunizations&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.17&quot;) return &apos;Social History&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.4&quot;)  return &apos;Vital Signs&apos;;
	if(code== &quot;1.3.6.1.4.1.19376.1.5.3.1.3.4&quot;)   return &apos;Progress Notes&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.65&quot;) return &apos;Miscellaneous Notes&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.10&quot;) return &apos;Plan of Treatment&apos;; 
	if(code== &quot;2.16.840.1.113883.10.20.22.2.7&quot;)  return &apos;Procedures&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.3&quot;)  return &apos;Results&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.8&quot;)  return &apos;Visit Diagnoses&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.18&quot;) return &apos;Insurance&apos;;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>6fa24651-0c70-4d88-95b6-a50ba345cdfc</id>
        <name>getClinicalDocumentInfo</name>
        <revision>3</revision>
        <lastModified>
          <time>1661276497143</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** getClinicalDocumentInfo(msg)

  	- Desc: This function receives CCD msg and returns clinicalDocumentInfo object
  	- Modified:
 	2018-02-10 11:20 CT JER - Modified to include capturing the SetId and versionNumber attributes

   	@param {String} msg - this contains the raw message (string)
	@return {object} objClinDocInfo - this contains a clinical document info element specific values composed into a single objClinDocInfo object.
	History 
	2022-08-23 JER - Added channelMap to capture the CCDA Document Header Information
	2021-09-20 JER - Modified to incorporate logger.error prior to returning function value
*/
function getClinicalDocumentInfo(msg) {
	var scriptName= &apos;getClinicalDocumentInfo&apos;;
	var debug= 0;
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function BEGIN msg: &apos;+msg); }
		
		var objClinDocInfo= new Object();
		
		objClinDocInfo.extension=				msg[&apos;id&apos;][&apos;@extension&apos;].toString();
		objClinDocInfo.root=					msg[&apos;id&apos;][&apos;@root&apos;].toString();	
		objClinDocInfo.assigningAuthorityName=		msg[&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString();
		objClinDocInfo.code=					msg[&apos;code&apos;][&apos;@code&apos;].toString();
		objClinDocInfo.codeSystemOid=				msg[&apos;code&apos;][&apos;@codeSystem&apos;].toString();
		objClinDocInfo.codeSystemName=			msg[&apos;code&apos;][&apos;@codeSystemName&apos;].toString();
		objClinDocInfo.displayName=				msg[&apos;code&apos;][&apos;@displayName&apos;].toString();
		objClinDocInfo.title=					msg[&apos;title&apos;].toString();
		objClinDocInfo.creationTime=				msg[&apos;effectiveTime&apos;][&apos;@value&apos;].toString().substring(0,14);
		objClinDocInfo.confCode=					msg[&apos;confidentialityCode&apos;][&apos;@code&apos;].toString();
		objClinDocInfo.confCodeSystemOid=			msg[&apos;confidentialityCode&apos;][&apos;@codeSystem&apos;].toString();
		objClinDocInfo.languageCode=				msg[&apos;languageCode&apos;][&apos;@code&apos;].toString();
		objClinDocInfo.setIdExtension=			msg[&apos;setId&apos;][&apos;@extension&apos;].toString();
		objClinDocInfo.setIdRoot=				msg[&apos;setId&apos;][&apos;@root&apos;].toString();	
		objClinDocInfo.setIdAssigningAuthorityName=	msg[&apos;setId&apos;][&apos;@assigningAuthorityName&apos;].toString();
		objClinDocInfo.documentVersion=			msg[&apos;versionNumber&apos;][&apos;@value&apos;].toString();

		// 2022-08-23 JER - Added channelMap to capture the CCDA Document Header Information
		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function objClinDocInfo: &apos;+JSON.stringify(objClinDocInfo)); }
		channelMap.put(&apos;ClinDocInfo&apos;,JSON.stringify(objClinDocInfo));
		
		return objClinDocInfo;

}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>70cd4591-c02c-43e3-8da1-b6c7f3debd3b</id>
        <name>getCustodian</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911325472</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** getCustodian(msg)

	- Desc: This function receives CCD msg and returns an array of custodian objects 
	- Modified
	2018-02-11 17:49 CT JER - Newly created to store the custodian objects

	@param {String} msg - Raw msg
	@return {Array} return array of custodian objects
*/
function getCustodian(msg) {
	
	var debug= 0;
	var objCounter= 1;
	var arrCustodian= new Array();

	// uncertain if more than one assignedCustodians per ClinicalDocument
	for each(custodian in msg[&apos;custodian&apos;][0]) {
		var objCustodian= new Object;
		objCustodian.id= objCounter;
		if(custodian.children().length()&gt;0) {
			if(debug&gt;0) { logger.error(&apos;custodian children()= &apos;+custodian.children()); }
			for each(child in custodian.children()) {
				// each assignedCustodian
				if(child.localName()== &apos;assignedCustodian&apos;) {
					// &lt;id assigningAuthorityName=&quot;HMS HOSPITAL NUMBER&quot; extension=&quot;134&quot; root=&quot;2.16.840.1.113883.3.1579.834848495152.134.500&quot;/&gt;
					if(typeof child.representedCustodianOrganization.id !== &apos;undefined&apos;) {
						objCustodian.representedOrganization_AssignAuthorityName=	child.representedCustodianOrganization.id.@assigningAuthorityName.toString();
						objCustodian.representedOrganization_Extension=  			child.representedCustodianOrganization.id.@extension.toString();
						objCustodian.representedOrganization_Root=  				child.representedCustodianOrganization.id.@root.toString();
					} // end if
					// e.g &lt;name&gt;HILL REGIONAL HOSPITAL&lt;/name&gt;
					if(typeof child.representedOrganziation.name !== &apos;undefined&apos;) {
						objCustodian.representedOrganization=					child.representedCustodianOrganization.name.toString();
					}
					// &lt;telecom use=&quot;WP&quot; value=&quot;tel:(254)580-8500&quot;/&gt;
					if(typeof child.representedOrganziation.telecom !== &apos;undefined&apos;) {
						objCustodian.representedOrganization_telecom=			child.representedCustodianOrganization.telecom.@value.toString();
					}
					// &lt;addr use=&quot;WP&quot;&gt;&lt;streetAddressLine&gt;101 CIRCLE DRIVE&lt;/streetAddressLine&gt;&lt;city&gt;HILLSBORO&lt;/city&gt;&lt;state&gt;TX&lt;/state&gt;&lt;postalCode&gt;766450000&lt;/postalCode&gt;&lt;/addr&gt;
					if(typeof child.representedOrganziation.addr !== &apos;undefined&apos;) {
						objCustodian.representedOrganization_streetAddress=				child.representedCustodianOrganization.addr.streetAddressLine.toString();
						objCustodian.representedOrganization_city=						child.representedCustodianOrganization.addr.city.toString();
						objCustodian.representedOrganization_state=						child.representedCustodianOrganization.addr.state.toString();
						objCustodian.representedOrganization_postalCode=					child.representedCustodianOrganization.addr.postalCode.toString();
					} // end if
				}
			} // end for each
		} // end if 
		objCounter++;
	} // end for each
	arrCustodian.push(objCustodian);

	return arrCustodian;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>b0e1a23f-7003-4f27-a819-985f89f80e87</id>
        <name>getEncounter</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911325138</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** getEncounter(msg)

  	- Desc: This function receives CCD msg and returns Encounter object
  	- Modified
  	2018-02-18 20:23 CT JER - Modified to include the addition of healthcareFacility Location Name - use for HealthcareFacilityTypeCode displayName
  	2018-02-16 17:33 CT JER - Added association to the getAssignedEntity to retrieve the assignedEntity related elements and attributes
  	2018-02-16 15:55 CT JER - Added handling for DischargeDisposition elements and attributes
  	2018-02-11 17:34 CT JER - Modified startTime and stopTime by applying the substring(0,14) function to remove the datetime offset
  	2018-02-10 11:27 CT JER - Corrected the setting of the objEncounter extension, root, startTime and stopTime
  	

   	@param {String} msg - this contains the raw message (string)
	@return {object} objEncounter - contains objEncounter object and related properties.
*/

function getEncounter(msg) {

var debug= 0;

	if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;] !== &apos;undefined&apos;) {
		if(msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;].children().length()&gt;0) {
			var objEncounter= new Object;
			
			// &lt;id assigningAuthorityName=&quot;HMS PATIENT ACCOUNT NUMBER&quot; extension=&quot;3480487&quot; root=&quot;2.16.840.1.113883.3.1579.834848495152.134.300&quot;/&gt;
			if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;] !== &apos;undefined&apos;) {
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][id][@assigningAuthorityName]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString()); }
					objEncounter.assigningAuthorityName= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString();
				} // end if
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@extension&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][id][@extension]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@extension&apos;].toString()); }
					objEncounter.extension= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
				} // end if
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@root&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][id][@root]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@root&apos;].toString()); }
					objEncounter.root= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@root&apos;].toString();
				} // end if
			} // end if
			
			// &lt;effectiveTime&gt;&lt;low value=&quot;20180203075200-0600&quot;/&gt;&lt;high value=&quot;20180203075200-0600&quot;/&gt;&lt;/effectiveTime&gt;
			if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;] !== &apos;undefined&apos;) {
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;low&apos;][&apos;@value&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][effectiveTime][low][@value]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;low&apos;][&apos;@value&apos;].toString()); }
					objEncounter.startTime= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;low&apos;][&apos;@value&apos;].toString().substring(0,14);
				} // end if
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;high&apos;][&apos;@value&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][effectiveTime][high][@value]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;high&apos;][&apos;@value&apos;].toString()); }
					objEncounter.stopTime= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;high&apos;][&apos;@value&apos;].toString().substring(0,14);
				} // end if
			} // end if
			
			//  &lt;dischargeDispositionCode code=&quot;1&quot; codeSystem=&quot;2.16.840.1.113883.12.112&quot; codeSystemName=&quot;HL7 Discharge Disposition&quot; displayName=&quot;DISCHARGED HOME/SELF CARE&quot;/&gt;
			if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;] !== &apos;undefined&apos;) {
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@code&apos;] !== &apos;undefined&apos;) {
					// get DischargeDisposition Code
					if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@code&apos;] !== &apos;undefined&apos;) {&#xd;						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][dischargeDispositionCode][@code]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@code&apos;].toString()); }
						objEncounter.dispositionCode= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@code&apos;].toString();
					} // end if
					// get DischargeDisposition CodeSystemOid
					if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystem&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][dischargeDispositionCode][@codeSystem]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystem&apos;].toString()); }
						objEncounter.dispositionCodeSystemOid= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystem&apos;].toString();
					} // end if
					// get DischargeDisposition CodeSystemName
					if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystemName&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][dischargeDispositionCode][@codeSystemName]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystemName&apos;].toString()); }						
						objEncounter.dispositionCodeSystemName= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystemName&apos;].toString();
					} // end if
					// get DischargeDisposition DisplayName
					if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@displayName&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][dischargeDispositionCode][@displayName]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@displayName&apos;].toString()); }
						objEncounter.dispositionDisplayName= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@displayName&apos;].toString();
					} // end if
				} // end if 
				// get DischargeDisposition originalText
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;originalText&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][dischargeDispositionCode][originalText]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;originalText&apos;].toString()); }
					objEncounter.dispositionDisplayName= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;originalText&apos;].toString();
				} // end if 
			} // end if 	
				
			// get encounterParticipant assignedEntity
			if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;encounterParticipant&apos;] !== &apos;undefined&apos;) {
					
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;encounterParticipant&apos;][&apos;@typeCode&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][@typeCode]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;encounterParticipant&apos;][&apos;@typeCode&apos;].toString()); }
					objEncounter.encounterParticipant_code= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;encounterParticipant&apos;][&apos;@typeCode&apos;].toString();
				} // end if
				
				// call getAssignedEntity
				var objAssignedEntity= getAssignedEntity(msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;encounterParticipant&apos;]);
				if(objAssignedEntity !== &apos;undefined&apos;) {
				
					// get assignedEntity Root
					if(objAssignedEntity.root != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][id][@root]: &apos;+objAssignedEntity.root.toString()); }
						objEncounter.assignedEntity_root= objAssignedEntity.root.toString();
					} // end if
					// get assignedEntity Extension
					if(objAssignedEntity.extension != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][id][@extension]: &apos;+objAssignedEntity.extension.toString()); }
						objEncounter.assignedEntity_extension= objAssignedEntity.extension.toString();
					} // end if
					// get assignedEntity AssigningAuthorityName
					if(objAssignedEntity.assigningAuthorityName != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][id][@assigningAuthorityName]: &apos;+objAssignedEntity.assigningAuthorityName.toString()); }
						objEncounter.assignedEntity_assigningAuthorityName= objAssignedEntity.assigningAuthorityName.toString();
					} // end if
					
					// get assignedEntity code
					if(objAssignedEntity.code != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][code][@code]: &apos;+objAssignedEntity.code.toString()); }
						objEncounter.assignedEntity_code= objAssignedEntity.code.toString();
					} // end if
					// get assignedEntity codeSystem
					if(objAssignedEntity.codeSystem != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][code][@codeSystem]: &apos;+objAssignedEntity.codeSystem.toString()); }
						objEncounter.assignedEntity_codeSystem= objAssignedEntity.codeSystem.toString();
					} // end if
					// get assignedEntity codeSystemName
					if(objAssignedEntity.codeSystemName != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][code][@codeSystemName]: &apos;+objAssignedEntity.codeSystemName.toString()); }
						objEncounter.assignedEntity_codeSystemName= objAssignedEntity.codeSystemName.toString();
					} // end if
					// get assignedEntity displayName
					if(objAssignedEntity.codeDisplayName != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][code][@displayName]: &apos;+objAssignedEntity.codeDisplayName.toString()); }
						objEncounter.assignedEntity_codeDisplayName= objAssignedEntity.codeDisplayName.toString();
					} // end if

					// get assignedEntity Author GivenName
					if(objAssignedEntity.givenName != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][assignedPerson][name][@given]: &apos;+objAssignedEntity.givenName.toString()); }
						objEncounter.assignedEntity_givenName= objAssignedEntity.givenName.toString();
					} // end if
					// get assignedEntity Author FamilyName
					if(objAssignedEntity.familyName != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][assignedPerson][name][@family]: &apos;+objAssignedEntity.familyName.toString()); }
						objEncounter.assignedEntity_familyName= objAssignedEntity.familyName.toString();
					} // end if					
				} // end if 
			} // end if 
			
			// get HealthcareFacilityTypeCode
			if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthCareFacility&apos;] !== &apos;undefined&apos;) {
	
				// set healthcareFacility classCode
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;@classCode&apos;] !== &apos;undefined&apos;) {
					if((typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;@classCode&apos;] != null)&amp;&amp;(msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;@classCode&apos;].toString().length&gt;0)) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][location][healthcareFacility][@classCode].toString(): &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;@classCode&apos;].toString()); }
						objEncounter.healthcareFacility_classCode= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;@classCode&apos;].toString();
					} // end if 
				} // end if

				// set healthcareFacility Location 
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;] !== &apos;undefined&apos;) {
	
					// set healthcareFacility Location classCode
					if((typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;@classCode&apos;] != null)&amp;&amp;(msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;@classCode&apos;].toString().length&gt;0)) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][location][healthcareFacility][location][@classCode].toString(): &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;@classCode&apos;].toString()); }
						objEncounter.healthcareFacilityLocation_classCode= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;@classCode&apos;].toString();
					} // end if 

					// set healthcareFacility Location Name - use for HealthcareFacilityTypeCode displayName
					if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;name&apos;] !== &apos;undefined&apos;) {
						if((typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;name&apos;] != null)&amp;&amp;(msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;name&apos;].toString().length&gt;0)) {
							if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][location][healthcareFacility][location][name].toString(): &apos;+msg.componentOf.encompassingEncounter.location.healthcareFacility.location.name.toString()); }
							objEncounter.healthcareFacilityLocation_name= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;name&apos;].toString();
							channelMap.put(healthcareFacilityDisplayName,objEncounter.healthcareFacilityLocation_name);
						} // end if 
					} // end if
				} // end if 
			} // end if 
		} // end if 
	} // end if
		
	return objEncounter;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>811b8224-4f41-4d15-8869-bbc5083c5533</id>
        <name>getEncounterDetails</name>
        <revision>9</revision>
        <lastModified>
          <time>1657116996485</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**  getEncounterDetails(object) - Desc: This function evaluates the Encounter Details Section of the CCDA to create arrObservations array of objObservations objects 

   	@param {String} msg - this contains the raw message (string)
	@return {object} objPatientRole - this contains the patientRole elements composed into a single objPatientRole object.
	
	History
	2021-09-20 JER - Modified to incorporate evaluation of multiple patientRole Id(s) in the case there are multiple patient identifiers
	2021-09-20 JER - Modified to patient.name incorporate evaluation of multiple patient name child elements in the case there are multiple patient identifiers
*/
function getEncounterDetails(section) {

	// define variables
	var debug= 0;
	var scriptName= &apos;getEncounterDetails&apos;;
	var arrObservations= [];
	
	// if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(section)= &apos;+typeof(section)+&apos; section= &apos;+section); 
	// }

	logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A&apos;+&apos;\n&apos;);
	
	if (typeof(section[&apos;entry&apos;][&apos;encounter&apos;][&apos;entryRelationship&apos;][&apos;act&apos;] !== &apos;undefined&apos;)) {
		
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B act.children()= &apos;+section[&apos;entry&apos;][&apos;encounter&apos;][&apos;entryRelationship&apos;][&apos;act&apos;].children()+&apos;\n&apos;);
		
		var cnt= 0;
		for(child in section[&apos;entry&apos;][&apos;encounter&apos;][&apos;entryRelationship&apos;][&apos;act&apos;].children()) {
			
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C&apos;+&apos;\n&apos;);
			
			if(child.localName()== &apos;entryRelationship&apos;) {
				if (child[&apos;@typeCode&apos;].toString() == &apos;SUBJ&apos;) {
					
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D&apos;+&apos;\n&apos;);
					var objObservation= new Object();
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos;: entryRelationship.act= &apos;+entryRelationship[&apos;@typeCode&apos;].toString()+&apos; of entryRelationship= &apos;+entryRelationship);
					objObservation.id= cnt;
					objObservation.typeCode= &apos;SUBJ&apos;;

					cnt++;
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos;: objObservation= &apos;+objObservation);
					arrObservations.push(objObservation);
				}
			}
		}
	}
	
	channelMap.put(&apos;arrObservations&apos;,arrObservations);
	return arrObservations;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>f9d47f7b-aeaa-4232-a93c-99e8045a89e0</id>
        <name>getEthnicGroupCode</name>
        <revision>14</revision>
        <lastModified>
          <time>1661352317364</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**  getEthnicGroupCode(ethnicity) - Desc: This function receives CCD/CCDA msg and returns from getEthnicGroupCode Object

   	@param {String} msg - this contains the raw message (string)
	@return {object} objEthnicity - this contains the elements composed into a single objEthnicity object.
	
	History
	2022-08-21 JER - Handling of nullFlavor property with UNK value
	2022-08-17 JER - Modifying arrEthnicity from array to objEthnicity as a singular object
	2021-09-20 JER - leveraging the getTelecom for getEthnicGroupCode script
*/
function getEthnicGroupCode(ethnicity) {
 
	// define variables
	var debug= 0;
	var scriptName= &apos;getEthnicGroupCode&apos;;
	// var arrEthnicity= new Array();
	
	if(debug&gt;0) { logger.error(scriptName+&apos; ethnicity= &apos;+ethnicity); }
	if (typeof(ethnicity) !== &apos;undefined&apos;) {

		if(debug&gt;0) { 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; object.length= &apos;+ethnicity.length+&apos; value= &apos;+ethnicity);
		}
		
		var j= 0;
		for(var i= 0;i&lt;ethnicity.length();i++) {

			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(ethnicity[&apos;+i+&apos;][@code])= &apos;+typeof(ethnicity[i][&apos;@code&apos;])+&apos; ethnicity[@code]= &apos;+ethnicity[i][&apos;@code&apos;]);
			}

			var objEthnicity= new Object();
			// 2022-08-19 JER - Added evaluation of code if undefined or has toString gt zero (0) 
			if((typeof(ethnicity[i][&apos;@code&apos;])!== &apos;undefined&apos;)&amp;&amp;(ethnicity[i][&apos;@code&apos;].toString().length&gt;0)) {

				if(debug&gt; 0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; ethnicity[&apos;+i+&apos;][@code]: &apos;+ethnicity[i][&apos;@code&apos;].toString()); }
					
				objEthnicity.id= j;
				objEthnicity.code= ethnicity[i][&apos;@code&apos;].toString();
				objEthnicity.codeSystem= ethnicity[i][&apos;@codeSystem&apos;].toString();
				objEthnicity.codeSystemName= ethnicity[i][&apos;@codeSystemName&apos;].toString();
				objEthnicity.displayName= ethnicity[i][&apos;@displayName&apos;].toString();

			} else {
				logger.error(&apos;B&apos;);
				if(debug&gt; 0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; ethnicity[&apos;+i+&apos;][@code]: &apos;+ethnicity[i][&apos;@code&apos;].toString()); }
					
				objEthnicity.id= j;
				objEthnicity.code= &apos;LA4489-6&apos;;
				objEthnicity.codeSystem= &apos;1.3.6.1.4.1.12009.10.1.1817&apos;;
				objEthnicity.codeSystemName= &apos;LOINC UCUM Codes for Electronic Messaging&apos;
				objEthnicity.displayName= &apos;Unknown&apos;
					
				if(debug&gt;0) {
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function objEthnicity: &apos;+JSON.stringify(objEthnicity));
				}
			} // end if 
				
			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function objEthnicity: &apos;+JSON.stringify(objEthnicity)); 
			}
			j++;
		} // for each address element 

		//2022-08-17 JER - Modifying arrEthnicity from array to objEthnicity as a singular object
		// channelMap.put(&apos;arrEthnicity&apos;,JSON.stringify(arrEthnicity));
		// return arrEthnicity;
		if(objEthnicity) {
			return objEthnicity;
		} // end if 
	} else {
		return;
	} // end if 
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>b6a4ff9d-f944-409f-8d73-46f34fa598dc</id>
        <name>getLanguageCommunication</name>
        <revision>3</revision>
        <lastModified>
          <time>1660773608059</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**  getLanguageCommunication(language) - Desc: This function receives CCD/CCDA msg and returns from getLanguageCommunication Object

   	@param {String} msg - this contains the raw message (string)
	@return {object} objLanguage - this contains the elements composed into a single objLanguage object.
	
	History
	2022-08-17 JER - Modifying arrLanguage from array to objLanguage as a singular object
	2021-09-20 JER - leveraging the getTelecom for getLanguageCommunication script
*/
function getLanguageCommunication(language) {
 
	// define variables
	var debug= 0;
	var scriptName= &apos;getLanguageCommunication&apos;;
	// var arrLanguage= new Array();
	
	if(debug&gt;0) { logger.error(scriptName+&apos; language= &apos;+language); }
	if (typeof(language) !== &apos;undefined&apos;) {

		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; object.length= &apos;+language.length()+&apos; value= &apos;+language);	}			
		
		if(language[&apos;languageCode&apos;].length()&gt;0) {
			// for each language element
			var j= 0;
			for(var i= 0;i&lt;language[&apos;languageCode&apos;].length();i++) {

				var objLanguage= new Object();
				// objLanguage.id= j;
				if(language[&apos;languageCode&apos;][i][&apos;@code&apos;].toString().length&gt;0) {
					
					if(debug&gt; 0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; language[languageCode][&apos;+i+&apos;][@code]: &apos;+language[&apos;languageCode&apos;][i][&apos;@code&apos;].toString()); }
					
					objLanguage.code= language[&apos;languageCode&apos;][i][&apos;@code&apos;].toString();
					objLanguage.codeSystem= language[&apos;languageCode&apos;][i][&apos;@codeSystem&apos;].toString();
					objLanguage.codeSystemName= language[&apos;languageCode&apos;][i][&apos;@codeSystemName&apos;].toString();
					objLanguage.displayName= language[&apos;languageCode&apos;][i][&apos;@displayName&apos;].toString();
				} // end if 

				// 2022-08-17 JER - Modifying arrLanguage from array to objLanguage as a singular object
				// arrLanguage.push(objLanguage);
				
				//} // for each child element
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function objLanguage: &apos;+JSON.stringify(objLanguage)); }
				j++;
			} // for each address element 
		} // end if 

		// 2022-08-17 JER - Modifying arrLanguage from array to objLanguage as a singular object
		// channelMap.put(&apos;arrLanguage&apos;,JSON.stringify(arrLanguage));
		// return arrLanguage;
		return objLanguage;
	} else {
		return;
	} // end if 
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>f9b60e30-9568-4d8e-8a7a-e3760ff98cf2</id>
        <name>getParticipant</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911325443</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** getParticipant(msg)

  	- Desc: This function receives CCD msg and returns Participant objects
  	- Modified
	2019-11-21 CT JER - Copy of the getPerformer function

   	@param {String} msg - this contains the raw message (string)
	@return {array} arrParticipant - contains arrParticipant array contains objParticipant objects and related properties.
*/

function getParticipant(msg) {

	var debug= 0;
	var arrParticipant= new Array();

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; msg[component][structuredBody][component][section][entry]..*[participant]: &apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][&apos;section&apos;][&apos;entry&apos;]..*[&apos;participant&apos;].toXMLString()); 
		logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; msg[component][structuredBody][component][section][entry]..*[participant][@addr]: &apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][&apos;section&apos;][&apos;entry&apos;]..*[&apos;participant&apos;][&apos;@addr&apos;].toXMLString()); 
	} // end if 
	
	for each (participant in msg[component][structuredBody][component][section][entry]..*[participant]) {
	
		if((participant !== &apos;undefined&apos;)&amp;&amp;(participant.toString().length()&gt;0)) {
			var strPartCount= 0;
			if(debug&gt;0) { logger.error(&apos;participant[&apos;+strPartCount+&apos;]: &apos;+participant); }
			
			var objParticipant= new Object;
			if(participant.children().length()&gt;0) {
					
					if(debug&gt;0) { logger.error(&apos;Participant.children().length: &apos;+participant.children().length()+&apos; children names: &apos;+participant.children()); }
					// str = str.replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;);
					
					if(participant[&apos;addr&apos;] != null) {
						// check for functionCode element and it&apos;s attributes
						if(typeof participant[&apos;addr&apos;] !== &apos;undefined&apos;) {
							// check for functionCode code attribute
							if(participant[&apos;addr&apos;].toString().length&gt;0) {
								// get Participant Address
								if(debug&gt;0) { logger.error(&apos;participant[addr].toString(): &apos;+participant[&apos;addr&apos;].toXMLString()); }
								objParticipant.addr= participant[&apos;addr&apos;].toString();				// PP
							} // end if 
						} // end if 
						
					} // end if 

				} // end if
			//} // end if 
			arrParticipant.push(objParticipant);
			strPartCount++;
		} // end for each
	} // end if
	channelMap.put(&apos;objParticipant&apos;,arrParticipant);
	return arrParticipant;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>ddf9102b-8eaa-451e-875c-d359ef078c35</id>
        <name>getPatientRole</name>
        <revision>28</revision>
        <lastModified>
          <time>1660679866865</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** getPatientRole(msg)

  	- Desc: This function receives CCD msg and returns from patientRole Object

   	@param {String} msg - this contains the raw message (string)
	@return {object} objPatientRole - this contains the patientRole elements composed into a single objPatientRole object.
	
	History
	2022-08-16 JER - Removed this code from the getPatientRole and add to the channel transformer separate these values from the patientRole object
	2022-08-14 JER - Modified/Add the patient/raceCode, patient/ethnicGroupCode and patient/languageCommunication coded element
	2022-07-28 JER - Modified to evaluate multiple name.given elements with the first as firstName and secondary elements as middleNames
	2021-09-20 JER - Modified to incorporate evaluation of multiple patientRole Id(s) in the case there are multiple patient identifiers
	2021-09-20 JER - Modified to patient.name incorporate evaluation of multiple patient name child elements in the case there are multiple patient identifiers
*/
function getPatientRole(msg) {

	// define variables
	var debug= 0;
	var scriptName= &apos;getPatientRole&apos;;
	var arrPatientIds= new Array();
	default xml namespace = new Namespace(&apos;urn:hl7-org:v3&apos;);
	
	if(debug&gt;0) { logger.error(scriptName+&apos; msg= &apos;+msg); }
	if (typeof(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;].toString()) !== &apos;undefined&apos;) {

		var objPatientRole= new Object();
		
		// 2021-09-20 JER - Modified to incorporate evaluation of multiple patientRole Id(s) in the case there are multiple patient identifiers
		if (typeof(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;]) !== &apos;undefined&apos;) {
			
			if(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;].length()&gt;0) {
				if(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;].length()&gt; 1) {
					for each(child in msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;]) {
					
						var objPatientId= new Object();
						objPatientId.patientId=						child[&apos;@extension&apos;].toString();
						objPatientId.assigningAuthorityOid=			child[&apos;@root&apos;].toString();
						objPatientId.assigningAuthorityName= 			child[&apos;@assigningAuthorityName&apos;].toString();
						arrPatientIds.push(objPatientId);
						if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function evaluate recordTarget.patientRole.Id objPatientId: &apos;+JSON.stringify(objPatientId)); }
					
					} // end for each 
					objPatientRole.patientIds=		arrPatientIds;
				} else {
					objPatientRole.patientId=					msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
					objPatientRole.assigningAuthorityOid=			msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;][&apos;@root&apos;].toString();
					objPatientRole.assigningAuthorityName= 			msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString();;
				}
			} // end if 
		} // end if 

		objPatientRole.address= getAddress(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;addr&apos;])
		
		// 2021-09-20 JER - Modified to patient.name incorporate evaluation of multiple patient name child elements in the case there are multiple patient identifiers
		for(var i= 0;i&lt;msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;].length();i++) {
			
			if (typeof(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][i]) !== &apos;undefined&apos;) {
				if(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][i][&apos;@use&apos;] == &apos;L&apos;) {

					if(debug&gt;0) { 
						logger.error(&apos;recordTarget.patientRole.patient.name= &apos;+JSON.stringify(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][0].toString())); 
					}
					// 2022-07-28 JER - Modified to evaluate multiple name.given elements with the first as firstName and secondary elements as middleNames
					objPatientRole.lastName=	msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][i][&apos;family&apos;].toString();
					for(var j= 0;j&lt;msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][i][&apos;given&apos;].length();j++) {
						if(j==0) {
							objPatientRole.firstName=	msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][i][&apos;given&apos;][j].toString();
						} else {
							objPatientRole.middleName=	msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][i][&apos;given&apos;][j].toString();
						}
					} // end for 
				} // end if 
			} // end if
			 
		} // end for

		objPatientRole.gender=			msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;administrativeGenderCode&apos;][&apos;@code&apos;].toString();
		objPatientRole.dateOfBirth=		msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;birthTime&apos;][&apos;@value&apos;].toString();
		// objPID.dateOfBirth=			convertDate(msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].text().toString(),&quot;MM-dd-yyyy&quot;);
		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; phoneNumber= &apos;+msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;telecom&apos;]); }
		objPatientRole.telecom=			getTelecom(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;telecom&apos;]);
		// objPatientRole.phoneNumber=	msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;telecom&apos;][&apos;@value&apos;].toString();

		/* 2022-08-16 JER - Removed this code from the getPatientRole and add to the channel transformer separate these values from the patientRole object */
		/*
		// 2022-08-14 JER - Modified/Add the patient/raceCode coded element
		if(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;raceCode&apos;]) {
			objPatientRole.race= 		getRaceCode(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;raceCode&apos;]);
		} // end if
		
		// 2022-08-14 JER - Modified/Add the patient/ethnicGroupCode coded element
		if(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;ethnicGroupCode&apos;]) {
			objPatientRole.ethnicity= 	getEthnicGroupCode(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;ethnicGroupCode&apos;]);
		} // end if 

		// 2022-08-14 JER - Modified/Add the patient/languageCommunication coded element
		if(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;languageCommunication&apos;]) {
			objPatientRole.language= 	getLanguageCommunication(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;languageCommunication&apos;]);
		} // end if 
		*/
		
		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;function F objPatientRole: &apos;+JSON.stringify(objPatientRole)); }
		channelMap.put(&apos;objPatientRole&apos;,objPatientRole);
		return objPatientRole;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>ceb659b6-95fb-4a37-8bb1-7198343b0976</id>
        <name>getPerformer</name>
        <revision>5</revision>
        <lastModified>
          <time>1657116983503</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** getPerformer(msg)

  	- Desc: This function receives CCD msg and returns Performer objects
  	- Modified
	2018-02-16 18:21 CT JER - Modified call the getAssignedEntity function to reference the serviceEvent\assignedEntity child elements and attributes instead of using XPath assignments - reusability of the getAssignedEntities
	2018-02-16 10:40 CT JER - Corrected typo error still referencing performerChild object no longer in reference/deprecated usage of performer[&apos;functionCode&apos;][&apos;@displayName&apos;] XPath reference
	2018-02-15 08:37 CT JER - Modified changed from usage of children(), child and attribute XML ECMAScript E4X calls to specific XMLPath calls
  	2018-02-14 17:19 CT JER - Modified to provide additional handling typeof != &apos;undefined&apos; on the functionCode element and child elements and their attributes
	2018-02-07 11:44 CT JER - Modified for additional handling verify typeof !== &apos;undefined&apos;

   	@param {String} msg - this contains the raw message (string)
	@return {array} arrPerformer - contains arrPerformer array contains objPerformer objects and related properties.
*/

function getPerformer(msg) {

	var debug= 0;
	var arrPerformer= new Array();

	if(msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;] !== &apos;undefined&apos;) {
		var strPerfCount= 0;
		for each (performer in msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;][0]) {
			if(debug&gt;0) { logger.error(&apos;performer[&apos;+strPerfCount+&apos;]: &apos;+performer); }
			//if(typeof performer !== &apos;undefined&apos;) {
				var objPerformer= new Object;
				if(performer.children().length()&gt;0) {
					
					if(debug&gt;0) { logger.error(&apos;Performer.children().length: &apos;+performer.children().length()+&apos; children names: &apos;+performer.children()); }
					// str = str.replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;);
					
					if(performer[&apos;functionCode&apos;][&apos;@code&apos;] != null) {
						// check for functionCode element and it&apos;s attributes
						if(typeof performer[&apos;functionCode&apos;][&apos;@code&apos;] !== &apos;undefined&apos;) {
							// check for functionCode code attribute
							if(performer[&apos;functionCode&apos;][&apos;@code&apos;].toString().length&gt;0) {
								// get Provider Role
								if(debug&gt;0) { logger.error(&apos;performer[functionCode][@code].toString(): &apos;+performer[&apos;functionCode&apos;][&apos;@code&apos;].toString()); }
								objPerformer.functionCode= performer[&apos;functionCode&apos;][&apos;@code&apos;].toString();				// PP
							} // end if 
						} // end if 
						// check for functionCode displayName attribute
						if(typeof performer[&apos;functionCode&apos;][&apos;@displayName&apos;] !=null) {
							// check for functionCode displayName attribute
							if(performer[&apos;functionCode&apos;][&apos;@displayName&apos;].toString().length&gt;0) {
								// get Provider Role
								if(debug&gt;0) { logger.error(&apos;performer[functionCode][@displayName].toString(): &apos;+performer[&apos;functionCode&apos;][&apos;@displayName&apos;].toString()); }
								objPerformer.functionDisplayNmae= performer[&apos;functionCode&apos;][&apos;@displayName&apos;].toString();						// PP
							} // end if 
						} // end if 
						if(typeof performer[&apos;functionCode&apos;][&apos;@codeSystem&apos;] !=null) {
							// check for functionCode codeSystem attribute
							if(performer[&apos;functionCode&apos;][&apos;@codeSystem&apos;].toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[functionCode][@codeSystem].toString(): &apos;+performer[&apos;functionCode&apos;][&apos;@codeSystem&apos;].toString()); }
								objPerformer.functionCodeSystem= performer[&apos;functionCode&apos;][&apos;@codeSystem&apos;].toString(); 		// 2.16.840.1.113883.12.443
							} // end if 
						} // end if
					} // end if

					channelMap.put(&apos;Performer&apos;,objPerformer);

					var objAssignedEntity= getAssignedEntity(performer);
					if(objAssignedEntity !== &apos;undefined&apos;) {
						
						// check for assignedEntity id assigningAuthorityName 
						if(typeof objAssignedEntity.assigningAuthorityName !== &apos;undefined&apos;) {
							if(objAssignedEntity.assigningAuthorityName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][id][@assigningAuthorityName].toString(): &apos;+objAssignedEntity.assigningAuthorityName.toString()); }
								objPerformer.assignedEntity_assigningAuthorityName= objAssignedEntity.assigningAuthorityName.toString(); 		// 2.16.840.1.113883.12.443
							} // end if							
						} // end if 
						
						// check for assignedEntity id root 
						if(typeof objAssignedEntity.root !== &apos;undefined&apos;) {
							if(objAssignedEntity.root.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][id][@root].toString(): &apos;+objAssignedEntity.root.toString()); }
								objPerformer.assignedEntity_root= objAssignedEntity.root.toString(); 		// 2.16.840.1.113883.12.443
							} // end if							
						} // end if 

						// check for assignedEntity id extension 
						if(typeof objAssignedEntity.extension !== &apos;undefined&apos;) {
							if(objAssignedEntity.extension.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][id][@extension].toString(): &apos;+objAssignedEntity.extension.toString()); }
								objPerformer.assignedEntity_extension= objAssignedEntity.extension.toString(); 		// 2.16.840.1.113883.12.443
							} // end if							
						} // end if 

						
						// &lt;code code=&quot;208D00000X&quot; codeSystem=&quot;2.16.840.1.113883.6.101&quot; codeSystemName=&quot;NUCC Health Care Provider Taxonomy&quot; displayName=&quot;General Practice&quot;/&gt;
						// check for assignedEntity code element
						if(typeof objAssignedEntity.code !== &apos;undefined&apos;) {
							if(objAssignedEntity.code.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][code][@code].toString(): &apos;+objAssignedEntity.code.toString()); }
								objPerformer.assignedEntity_code= objAssignedEntity.code.toString(); 				// 208D00000X
							} // end if							
						} // end if 

						// check for assignedEntity codeSystem element
						if(typeof objAssignedEntity.codeSystem !== &apos;undefined&apos;) {
							if(objAssignedEntity.codeSystem.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][code][@codeSystem].toString(): &apos;+objAssignedEntity.codeSystem.toString()); }
								objPerformer.assignedEntity_codeSystem= objAssignedEntity.codeSystem.toString(); 			// 2.16.840.1.113883.6.101
							} // end if							
						} // end if 
						
						// check for assignedEntity codeSystemName element
						if(typeof objAssignedEntity.codeSystemName !== &apos;undefined&apos;) {
							if(objAssignedEntity.codeSystemName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][code][@codeSystemName].toString(): &apos;+objAssignedEntity.codeSystemName.toString()); }
								objPerformer.assignedEntity_codeSystemName= objAssignedEntity.codeSystemName.toString(); 		// NUCC Health Care Provider Taxonomy
							} // end if							
						} // end if 

						// check for assignedEntity displayName element
						if(typeof objAssignedEntity.displayName !== &apos;undefined&apos;) {
							if(objAssignedEntity.displayName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][code][@displayName].toString(): &apos;+objAssignedEntity.displayName.toString()); }
								objPerformer.assignedEntity_displayName= objAssignedEntity.codeSystemName.toString(); 		// NUCC Health Care Provider Taxonomy
							} // end if							
						} // end if 						

						
						// check for assignedEntity assignedPerson Given name
						if(typeof objAssignedEntity.givenName !== &apos;undefined&apos;) {
							if(objAssignedEntity.givenName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][assignedPerson][name][given].toString(): &apos;+objAssignedEntity.givenName.toString()); }
								objPerformer.assignedEntity_givenName= objAssignedEntity.givenName.toString(); 		// NUCC Health Care Provider Taxonomy
							} // end if							
						} // end if
						
						// check for assignedEntity assignedPerson Family name
						if(typeof objAssignedEntity.familyName !== &apos;undefined&apos;) {
							if(objAssignedEntity.familyName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][assignedPerson][name][family].toString(): &apos;+objAssignedEntity.familyName.toString()); }
								objPerformer.assignedEntity_familyName= objAssignedEntity.familyName.toString(); 		// NUCC Health Care Provider Taxonomy
							} // end if							
						} // end if

						if(debug&gt;0) { logger.error(&apos;getPerformer objAssignedEntity.suffix: &apos;+objAssignedEntity.suffix+
							&apos; typeof: &apos;+typeof objAssignedEntity.suffix); }
							
						// check for assignedEntity assignedPerson Suffix
						if(typeof objAssignedEntity.suffix !== &apos;undefined&apos;) {
							if(objAssignedEntity.suffix.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][assignedPerson][name][suffix].toString(): &apos;+objAssignedEntity.suffix.toString()); }
								objPerformer.assignedEntity_suffix= objAssignedEntity.suffix.toString(); 		// NUCC Health Care Provider Taxonomy
							} // end if							
						} // end if
						
						
						// check for assignedEntity representedOrganization name
						if(typeof objAssignedEntity.representedOrganizationName !== &apos;undefined&apos;) {
							if(objAssignedEntity.representedOrganizationName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][representedOrganization][name].toString(): &apos;+objAssignedEntity.representedOrganizationName.toString()); }
								objPerformer.assignedEntity_representedOrganization= objAssignedEntity.representedOrganizationName.toString(); 		// Walgreens Drug Store 12562
							} // end if							
						} // end if
						
					} // end if 

				} // end if
			//} // end if 
			
			if(objPerformer.toString().length&gt;0) {
				channelMap.put(&apos;objPerformer&apos;,objPerformer);
			}
			
			arrPerformer.push(objPerformer);
			strPerfCount++;
		} // end for each
	} // end if

	if(arrPerformer.toString().length&gt;0) {
		channelMap.put(&apos;arrPerformer&apos;,arrPerformer);
	}
	
	return arrPerformer;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>1a0a3a57-4870-42f3-bb1a-bb5c3cc79ad9</id>
        <name>getRaceCode</name>
        <revision>25</revision>
        <lastModified>
          <time>1661352336919</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**  getRace(race) - Desc: This function receives CCD/CCDA msg and returns from RaceCode Object

   	@param {String} msg - this contains the raw message (string)
	@return {object} objRace - this contains the elements composed into a single objRace object.
	
	History
	2022-08-21 JER - Handling of nullFlavor property with UNK value
	2022-08-19 JER - Added evaluation of code if undefined or has toString gt zero (0)
	2022-08-19 JER - perform finalize review to confirm objRace has populated with value
	2022-08-17 JER - Modifying arrRace from array to objRace as a singular object
	2021-09-20 JER - leveraging the getTelecom for getRaceCode script
*/
function getRaceCode(race) {
 
	// define variables
	var debug= 0;
	var scriptName= &apos;getRaceCode&apos;;
	// 2022-08-17 JER - Modifying arrRace from array to objRace as a singular object
	// var arrRace= new Array();
	
	if(debug&gt;0) { logger.error(scriptName+&apos; race= &apos;+race); }
	if (typeof(race) !== &apos;undefined&apos;) {

		if(debug&gt;0) { 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(race)= &apos;+typeof(race)+&apos; object.length= &apos;+race.length()+&apos; value= &apos;+race);	
		}			
		

		// if(race.length()&gt;0) {
			// for each race element
			var j= 0;
			for(var i= 0;i&lt;race.length();i++) {

			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(race[&apos;+i+&apos;][@code])= &apos;+typeof(race[i][&apos;@code&apos;])+&apos; race[@code]= &apos;+race[i][&apos;@code&apos;]);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; PART 1: typeof(race[&apos;+i+&apos;][@code])= &apos;+typeof(race[i][&apos;@code&apos;]));
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; PART 2: race[&apos;+i+&apos;][@code].toString().length= &apos;+race[i][&apos;@code&apos;].toString().length);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(race[&apos;+i+&apos;][@code])= &apos;+typeof(race[i][&apos;@code&apos;])+&apos; race[&apos;+i+&apos;][@code].toString().length= &apos;+race[i][&apos;@code&apos;].toString().length+&apos; EVALUATION= &apos;+((typeof(race[i][&apos;@code&apos;]) !== &apos;undefined&apos;)&amp;&amp;(race[i][&apos;@code&apos;].toString().length&gt;0)));
			}
				
				var objRace= new Object();
				// 2022-08-19 JER - Added evaluation of code if undefined or has toString gt zero (0) 
				if((typeof(race[i][&apos;@code&apos;])!== &apos;undefined&apos;)&amp;&amp;(race[i][&apos;@code&apos;].toString().length&gt;0)) {
					// objRace.id= j;
					//if(race[i][&apos;@code&apos;].toString().length&gt;0) {
					
						if(debug&gt; 0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; race[&apos;+i+&apos;][@code]: &apos;+race[i][&apos;@code&apos;].toString()); }
					
						objRace.code= race[i][&apos;@code&apos;].toString();
						objRace.codeSystem= race[i][&apos;@codeSystem&apos;].toString();
						objRace.codeSystemName= race[i][&apos;@codeSystemName&apos;].toString();
						objRace.displayName= race[i][&apos;@displayName&apos;].toString();
					//} // end if 
				
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function objRace: &apos;+JSON.stringify(objRace)); 
					}
				} else {
					var objRace= new Object();
					// objRace.id= j;
					
					objRace.code= &apos;LA4489-6&apos;;
					objRace.codeSystem= &apos;1.3.6.1.4.1.12009.10.1.1817&apos;;
					objRace.codeSystemName= &apos;LOINC UCUM Codes for Electronic Messaging&apos;
					objRace.displayName= &apos;Unknown&apos;
					
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function objRace: &apos;+JSON.stringify(objRace)); 
					}
				} // end if 
				j++;
			} // for each address element 
		// } // end if 

		// 2022-08-17 JER - Modifying arrRace from array to objRace as a singular object
		// channelMap.put(&apos;arrRace&apos;,JSON.stringify(arrRace));
		// return arrRace;
		// 2022-08-19 JER - perform finalize review to confirm objRace has populated with value
		if(objRace) {
			return objRace;
		} // end if 
	} else {
		return;
	} // end if 
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>a3b08547-8ed2-4097-a7e7-ea43e052f13b</id>
        <name>getServiceEvent</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911325104</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** getServiceEvent(msg)

  	- Desc: This function receives CCD msg and returns Service Event objects
  	- Modified:
	2018-11-12 JER - Modified additional debugging for function
  	2018-02-14 JER - Modified to capture the serviceEvent ClassCode and DisplayName attribute values
  	2018-02-12 JER - multiple documentationOf (1..M) with (1..1) serviceEvents

   	@param {String} msg - this contains the raw message (string)
	@return {array} arrServiceEvents - this array contains list of objServiceEvent objects composed into the arrServiceEvents
*/
function getServiceEvent(msg) {

	// define variables
	var scriptName= &apos;getServiceEvent&apos;;
	var arrServiceEvent= new Array();
	var tSrvcCount= 1;
	var debug= 0;
	if(debug&gt;0) { logger.error(&apos;Function: &apos;+scriptName+&apos; msg[documentationOf]= &apos;+msg[&apos;documentationOf&apos;].toXMLString()); }

	if(msg[&apos;documentationOf&apos;] !== &apos;undefined&apos;) {
		for each(documentationOf in msg[&apos;documentationOf&apos;]) {
			if(documentationOf.serviceEvent !== &apos;undefined&apos;) {
				for each(serviceEvent in documentationOf.serviceEvent) {
					var objServiceEvent= new Object();
					objServiceEvent.id= 	tSrvcCount;
					if(typeof serviceEvent.@classCode !== &apos;undefined&apos;) {
						if(serviceEvent.@classCode.length()&gt;0) {
							objServiceEvent.classCode=	serviceEvent.@classCode.toString();
						} // end if 
					} // end if 
					if(serviceEvent.children().length()&gt;0) {
						if(typeof serviceEvent.id.@extension !== &apos;undefined&apos;) {
							objServiceEvent.extension=	serviceEvent.id.@extension.toString();
						} else {
							objServiceEvent.extension=    &apos;&apos;;
						} // end if
						if(typeof serviceEvent.id.@root !== &apos;undefined&apos;) {
							objServiceEvent.root=		serviceEvent.id.@root.toString();
						} else {
							objServiceEvent.root=		&apos;&apos;;
						} // end if
						if(typeof serviceEvent.code.@displayName !== &apos;undefined&apos;) {
							objServiceEvent.displayName=	serviceEvent.code.@displayName.toString();
						} else {
							objServiceEvent.displayName=    &apos;&apos;;
						} // end if
						if(typeof serviceEvent.effectiveTime.low.@value !== &apos;undefined&apos;) {
							objServiceEvent.startTime=	serviceEvent.effectiveTime.low.@value.toString().substring(0,14);
						} else {
							objServiceEvent.startTime=	&apos;&apos;;
						} // end if
						if(typeof serviceEvent.effectiveTime.high.@value !== &apos;undefined&apos;) {
							objServiceEvent.stopTime=	serviceEvent.effectiveTime.high.@value.toString().substring(0,14);
						} else {
							objServiceEvent.stopTime=	&apos;&apos;;
						} // end if
					} // end if 
					arrServiceEvent.push(objServiceEvent);
				} // end for each	
			} // end if 
		} // end for each
	} // end if 

	if(debug&gt;0) { logger.error(&apos;Function: &apos;+scriptName+&apos; arrServiceEvent= &apos;+JSON.stringify(arrServiceEvent, null, 4)); }
	
	return arrServiceEvent;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>24958132-05d2-43f5-ab96-d4055c40804c</id>
        <name>getTelecom</name>
        <revision>18</revision>
        <lastModified>
          <time>1656365508834</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**  getTelecom(telecom) - Desc: This function receives CCD/CCDA msg and returns from Telecom Object

   	@param {String} msg - this contains the raw message (string)
	@return {object} objAddress - this contains the elements composed into a single objTelecom object.
	
	History
	2021-09-20 JER - Modified to incorporate evaluation of multiple patientRole Id(s) in the case there are multiple patient identifiers
	2021-09-20 JER - Modified to patient.name incorporate evaluation of multiple patient name child elements in the case there are multiple patient identifiers
*/
function getTelecom(telecom) {
 
	// define variables
	var debug= 0;
	var scriptName= &apos;getTelecom&apos;;
	var arrTelecom= new Array();
	
	if(debug&gt;0) { logger.error(scriptName+&apos; telecom= &apos;+telecom); }
	if (typeof(telecom) !== &apos;undefined&apos;) {

		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; object.length= &apos;+telecom.length()+&apos; value= &apos;+telecom);	}			
		
		if(telecom.length()&gt;0) {
			// for each addr element
			var j= 0;
			for(var i= 0;i&lt;telecom.length();i++) {

				var objTelecom= new Object();
				objTelecom.id= j;
				if(telecom[i][&apos;@value&apos;].toString().length&gt; 0) {
					if(telecom[i][&apos;@value&apos;].toString().indexOf(&apos;:&apos;)&gt;-1) {
						
						if(debug&gt; 0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; telecom[&apos;+i+&apos;][@value]: &apos;+telecom[i][&apos;@value&apos;].toString()); }
						
						var lstTelecom=	telecom[i][&apos;@value&apos;].toString().split(&apos;:&apos;);
						var varName= lstTelecom[0];
						
						if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; varName: &apos;+varName); }
						
						switch (varName) {
							case &quot;tel&quot;: 	objTelecom.type= varName; break;
							case &quot;fax&quot;: 	objTelecom.type= varName; break;
							case &quot;mailto&quot;: 	objTelecom.type= varName; break;
							default: 		objTelecom.type= varName; break;
						} // end switch 
						// remove the + character from the value
						objTelecom.value= lstTelecom[1].replace(&apos;+&apos;,&apos;&apos;);
					} else {
						objTelecom.value= telecom[i][&apos;@value&apos;].toString().replace(&apos;+&apos;,&apos;&apos;);
					} // end if 
				} // end if 
				
				arrTelecom.push(objTelecom);
				
				//} // for each child element
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;function arrTelecom: &apos;+JSON.stringify(arrTelecom)); }
				j++;
			} // for each address element 
		} // end if 

		channelMap.put(&apos;arrTelecom&apos;,JSON.stringify(arrTelecom));
		return arrTelecom;
	} else {
		return;
	} // end if 
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>39531322-8698-4cdf-9824-d225f1bc60ea</id>
        <name>getXdsAuthorPerson</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911325271</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** getXdsAuthorPerson

	- Desc: This function receives Author Object and returns a CCD authorPerson XML
	- Modified:
	2018-02-25 12:35 PM CST - Perform additional checks on the supplied object typeof and null checks

	@param {object} objAuthor - the objAuthor object passed input argument
	@return {XML} return stringXML containing the newly devised XML containing the authorPerson

*/
function getXdsAuthorPerson(objAuthor) {

	// 0^Allscripts^System^^^^^^&amp;amp;1.3.6.1.4.1.22812.4.10065404.0.3.3
	var authorPerson= &apos;&apos;;
	var debug= 0;

	if(debug&gt;0) { logger.error(&apos;getXdsAuthorPerson Input objAuthor: &apos;+objAuthor); }

	// Author Id Extension
	if((typeof objAuthor.extension !== &apos;undefined&apos;)&amp;&amp;(objAuthor.extension != null)) {
		if(objAuthor.extension.toString().length&gt;0) {
			if(debug&gt;0) { logger.error(&apos;objAuthor.extension: &apos;+objAuthor.extension.toString()); }
			authorPerson += objAuthor.extension.toString()+&apos;^&apos;;
		} else {
			authorPerson += &apos;^&apos;;
		} // end if
	} else {
		authorPerson += &apos;^&apos;;
	} // end if 

	// Author LastName
	if((typeof objAuthor.idExtension !== &apos;undefined&apos;)&amp;&amp;(objAuthor.idExtension != null)) {
		if(objAuthor.idExtension.toString().length&gt;0) {
			authorPerson += objAuthor.idExtension.toString()+&apos;^&apos;;
		} else {
			authorPerson += &apos;^&apos;;
		} // end if
	} else {
		authorPerson += &apos;^&apos;;
	} // end if 

	// Author FirstName
	if((typeof objAuthor.idExtension !== &apos;undefined&apos;)&amp;&amp;(objAuthor.idExtension != null)) {
		if(objAuthor.idExtension.toString().length&gt;0) {
			authorPerson += objAuthor.idExtension.toString()+&apos;^&apos;;
		} else {
			authorPerson += &apos;^&apos;;
		} // end if
	} else {
		authorPerson += &apos;^&apos;;
	} // end if 


	// Author Id Root - objAssignedAuthor.root
	if((typeof objAuthor.root !== &apos;undefined&apos;)&amp;&amp;(objAuthor.root != null)) {
		if(objAuthor.root.toString().length&gt;0) {
			if(debug&gt;0) { logger.error(&apos;objAuthor.root: &apos;+objAuthor.root.toString()); }
			authorPerson += &apos;^^^^^&apos;+objAuthor.root.toString();
		} else {
			authorPerson += &apos;^^^^^&apos;;
		} // end if
	} else {
		authorPerson += &apos;^^^^^&apos;; 
	} // end if

	if(debug) { logger.error(&apos;getXdsAuthorPerson authorPerson: &apos;+authorPerson); }
	channelMap.put(&apos;authorPerson&apos;,authorPerson);	

	return authorPerson;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>bac30250-f269-474b-a628-e41b4a27ca54</id>
        <name>getXdsSourcePatientId</name>
        <revision>2</revision>
        <lastModified>
          <time>1654275735219</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** getXdsSourcePatientId(object)

  	 - Desc: This function receives patientRole JavaScript Object and returns a sourcePatientId String

	@param {object} objPatientRole - the objPatientRole object passed input argument
	@return {string} return string containing the newly devised string containing the sourcePatientId
*/
// @return {XML} return stringXML containing the newly devised XML containing the sourcePatientInfo
function getXdsSourcePatientId(objPatientRole) {

	var debug= 0;
	/*
	var objSourcePatientId= new Object;
	//if (msg.namespace() != undefined) { default xml namespace = msg.namespace(); } else { default xml namespace = &apos;&apos;; }
	var rim = new Namespace(&apos;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&apos;);

	var stringXML= new XML(&apos;&lt;ValueList/&gt;&apos;);
	*/
	if(typeof objPatientRole.patientId !== &apos;undefined&apos;) {
		var pid_3=  objPatientRole.patientId+&quot;^^^&amp;amp;&quot;+objPatientRole.assigningAuthorityOid+&quot;&amp;amp;ISO&quot;;
		if(debug&gt;1) { logger.error(&quot;objPatientRole.patientid: &quot;+objPatientRole.patientId.toString()); }
	} else { var pid_3= &apos;&apos;; }
			
	// var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_3+&apos;&lt;/Value&gt;&apos;);
	var strSourcePatientId= pid_3;

	return strSourcePatientId;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>cc1f343b-bfa4-4994-9402-bb78c1ad6388</id>
        <name>getXdsSourcePatientInfo</name>
        <revision>3</revision>
        <lastModified>
          <time>1654275670549</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** getXdsSourcePatientInfo(object)

  	- Desc: This function receives patientRole JavaScript Object and returns a XML SourcePatientInfo JavaScript object

	@param {object} objPatientRole - the objPatientRole object passed input argument
	@return {object} return object containing the newly devised string for XML containing the sourcePatientInfo
*/
// @return {XML} return stringXML containing the newly devised XML containing the sourcePatientInfo
function getXdsSourcePatientInfo(objPatientRole) {

	var objSourcePatientInfo= new Object;
	var rim = new Namespace(&apos;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&apos;);
	var stringXML= new XML(&apos;&lt;ValueList/&gt;&apos;);
	
	var pid_3=  &quot;PID-3|&quot;+objPatientRole.patientId+&quot;^^^&quot;+objPatientRole.assigningAuthorityName+&quot;&amp;amp;&quot;+objPatientRole.assigningAuthorityOid+&quot;&amp;amp;ISO&quot;
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_3+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid3= pid_3;
	
	var pid_5=  &quot;PID-5|&quot;+objPatientRole.lastName+&quot;^&quot;+objPatientRole.firstName+&quot;^^^^&quot;
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_5+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid5= pid_5;
	
	var pid_7=  &quot;PID-7|&quot;+objPatientRole.dateOfBirth
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_7+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid7= pid_7;
	
	var pid_8=  &quot;PID-8|&quot;+objPatientRole.gender
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_8+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid8= pid_8;
	
	var pid_11= &quot;PID-11|&quot;+objPatientRole.streetAddress+&quot;^^&quot;+objPatientRole.city+&quot;^&quot;+objPatientRole.state+&quot;^&quot;+objPatientRole.postalCode+&quot;^&quot;+objPatientRole.country
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_11+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid11= pid_11;
	
	var pid_13= &quot;PID-13|&quot;+objPatientRole.phoneNumber
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_13+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid13= pid_13;
	
	return objSourcePatientInfo;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>d78fd3dc-2f75-4b0e-ab30-1e7eea48e0c1</id>
        <name>setXdsAuthor</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911325343</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** setXdsMetadataAuthor(object)

  	- Desc: This setXdsAuthor function receives Javascript Array of Objects and author XML string
  	- Modified:
  	2018-02-26 19:20 CST - Under development
	2018-02-25 12:40PM CST - Replacement of the Call getPerformer, getAuthor and usage of objEncounter transformation function.

   	@param {object} arrPerformer - this contains the Javascript Object (object) - could pass in 
	@return {XML} authorXML - contains authorXML XML Object string to build out the Template : XDSDocumentEntry.author (urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d) XML scheme.

	Reference: https://gazelle.ihe.net/XDStarClient/rimihe-templates/rimihe-Author_XDSDocumentEntry.html
		
*/

function setXdsMetadataAuthor(arrAuthors) {

	var debug= 1;
	var i= 0;
	
	if(debug&gt;0) { logger.error(&apos;setXdsAuthor arrAuthors: &apos;+JSON.stringify(arrAuthors)); } 
	
	if(typeof arrAuthor !== &apos;undefined&apos;) {
		if(arrAuthor.length&gt;1) {
			for each(objAuthor in arrAuthors) {
				if(debug&gt;0) { logger.error(&apos;objAuthor[&apos;+i+&apos;]: &apos;+JSON.stringify(objAuthor)+
					&apos; typeof: &apos;+typeof objAuthor+
					&apos; length: &apos;+objAuthor.length());
				} // end if 
		
				var authorXML = new XML(&apos;&lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;&gt;&lt;/rim:Classification&gt;&apos;);

				// need to confirm the objAuthor contains the representedOrganization
				// create Author Person - using either objAuthor.assignedEntity_familyName OR objEncounter.assignedEntity_familyName call the getAuthorPerson function
				if((typeof objAuthor.assignedEntity_familyName !== &apos;undefined&apos;)&amp;&amp;(objAuthor.assignedEntity_familyName.toString() != null)) { 
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorPerson&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
					xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= getAuthorPerson(objAuthor);
				} else {
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorPerson&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
				} // end if 
		
				// create Author Institution - objAuthor.authorInstitution
				if((typeof objAuthor.authorInstitution !== &apos;undefined&apos;)&amp;&amp;(objAuthor.authorInstitution.toString() != null)) {
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorInstitution&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
					xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.authorInstitution.toString();
				} else {
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorInstitution&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
				} // end if
		
				// create Author Role 
				// objPerformers.functionDisplayName
				if((typeof objAuthor.functionDisplayName !== &apos;undefined&apos;)&amp;&amp;(objAuthor.functionDisplayName.toString() != null)) {
					if(objAuthor.functionDisplayName.toString().length&gt;0) {
						var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorRole&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
						xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.functionDisplayName.toString();
					} // end if 
					// objEncounter.encounterParticipant_code
				} else if((typeof objAuthor.encounterParticipant_code !== &apos;undefined&apos;)&amp;&amp;(objAuthor.encounterParticipant_code.toString() != null)) {
					if(objAuthor.encounterParticipant_code.toString().length&gt;0) {
						var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorRole&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
						xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.functionDisplayName.toString();
					} // end if 
				// objEncounter.assignedEntity_codeDisplayName
				} else if((typeof objAuthor.assignedEntity_codeDisplayName !== &apos;undefined&apos;)&amp;&amp;(objAuthor.assignedEntity_codeDisplayName.toString() != null)) {
					if(objAuthor.assignedEntity_codeDisplayName.toString().length&gt;0) {
						var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorRole&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
						xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.assignedEntity_codeDisplayName.toString();
					} // end if 
				} else {
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorRole&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;Medical Doctor&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
				} // end if 
		
				// create Author Specialty
				// objPerformers.assignedDisplayName
				if((typeof objAuthor.assignedDisplayName !== &apos;undefined&apos;)&amp;&amp;(objAuthor.assignedDisplayName.toString() != null)) {
					if(objAuthor.assignedDisplayName.toString().length&gt;0) {
						var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
						xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.assignedDisplayName.toString();
					} // end if 
				// objEncounter.assignedEntity_codeDisplayName
				} else if((typeof objAuthor.assignedEntity_codeDisplayName !== &apos;undefined&apos;)&amp;&amp;(objAuthor.assignedEntity_codeDisplayName.toString() != null)) {
					if(objAuthor.assignedEntity_codeDisplayName.toString().length&gt;0) {
						var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
						xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.assignedEntity_codeDisplayName.toString();
					} // end if 
				} else {
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;General Medicine&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
				} // end if 
			} // end for each
		} // end if 
	} else {		
		var classificationXML=     [&apos;rim:Classification&apos;][&apos;@id&apos;]=&quot;1234&quot;; 
		classificationXML+=        [&apos;rim:Classification&apos;][&apos;@ClassificationScheme&apos;]= &quot;urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d&quot;;
		classificationXML+=        [&apos;rim:Classification&apos;][&apos;@classifiedObject&apos;]= &quot;&quot;;
		var authorXML = new XML(classificationXML);
			
		var authorPersonXML=    	new XML(&apos;&lt;rim:Slot name=&quot;authorPerson&quot;&gt;&lt;/rim:Slot&gt;&apos;);
		authorPersonXML+= 		new XML(&apos;&lt;rim:ValueList&gt;&lt;/rim:ValueList&gt;&apos;);
		authorPersonXML+=	 	new XML(&apos;&lt;rim:Value&gt;&lt;/rim:Value&gt;&apos;);
		authorXML+= authorPersonXML; 

		var authorInstitutionXML=    new XML(&apos;&lt;rim:Slot name=&quot;authorInstitution&quot;&gt;&lt;/rim:Slot&gt;&apos;);
		authorInstitutionXML+= 		new XML(&apos;&lt;rim:ValueList&gt;&lt;/rim:ValueList&gt;&apos;);
		authorInstitutionXML+=		new XML(&apos;&lt;rim:Value&gt;&lt;/rim:Value&gt;&apos;);
		authorXML+= authorInstitutionXML;

		var authorRoleXML=  new XML(&apos;&lt;rim:Slot name=&quot;authorRole&quot;&gt;&lt;/rim:Slot&gt;&apos;);
		authorRoleXML+= 	new XML(&apos;&lt;rim:ValueList&gt;&lt;/rim:ValueList&gt;&apos;);
		authorRoleXML+=	new XML(&apos;&lt;rim:Value&gt;&lt;/rim:Value&gt;&apos;);
		authorXML+= autorRoleXML;
		
		var authorSpecialtyXML =		new XML(&apos;&lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;&lt;/rim:Slot&gt;&apos;);
		authorSpecialtyXML+= new XML(&apos;&lt;rim:ValueList&gt;&lt;/rim:ValueList&gt;&apos;);
		authorSpecialtyXML+= new XML(&apos;&lt;rim:Value&gt;&lt;/rim:Value&gt;&apos;);
		authorXML+= authorSpecialtyXML;
				
	} // end if 	
		
	return authorXML;
} // end function</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>e16c8d14-3775-4146-8975-0d93ea65b7c7</id>
    <name>CSV</name>
    <revision>5</revision>
    <lastModified>
      <time>1672445597904</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description></description>
    <includeNewChannels>false</includeNewChannels>
    <enabledChannelIds>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>14b7de16-de3e-4994-b123-b4d0d3d712aa</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
      <string>076d39da-7152-40db-91a1-1746167239e9</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>57cb9c3b-3e0a-4a17-9c1a-fcc6d0d4ee16</id>
        <name>createHL7FromObject</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911308116</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** createHL7FromObject

  	- Desc: This function receives an Object and returns formed HL7 in XML format
  	- Modified
	2020-03-04 JER - Created
	
Message Structure

MSH|^~\&amp;|||||||&lt;Event&gt;||&lt;Processing ID&gt;|&lt;Version&gt;|
PID|||&lt;Patient Identifiers&gt;||&lt;Patient Name&gt;||&lt;Date of Birth&gt;|&lt;Sex&gt;||||||||||&lt;PatientVisit ID&gt;|&lt;SSN&gt;|
PV1|||&lt;Patient Location&gt;||||||||||||||||&lt;Patient Visit ID&gt;|
TXA||&lt;Report Type&gt;||&lt;Activity Date/Time&gt;|&lt;Primary Provider ID&gt;|&lt;Origination
Date/Time&gt;|&lt;Transcription Date/Time&gt;|||&lt;Assigned Document Authenticator ID&gt;||&lt;Document ID&gt;|||||&lt;Document Completion Status&gt;||&lt;Document Availability Status&gt;|
OBX||&lt;Value Type&gt;|||&lt;Observation Value&gt;|||&lt;Abnormal Flag&gt;|


Data Element Details
Required
	PID-3: Patient Identifiers
	TXA-2: Report Type
	TXA-4: Activity Date/Time
	TXA-5: Primary Activity Provider ID
 	TXA-12: Document ID - Unique ID that globally identifies a document
	OBX-2: Value Type - TX or FT for transcriptions. RP for reference pointers
	OBX-5: Observation Value - Body of the document

	
   	@param {String} msg - this contains a RAW message (i.e. msg)
	@return {Object} objMsgContent - this object contains objectification of the RAW msg string
*/
function createHL7FromObject (msgObject, debug) {

	var debug= 0;  // 0= OFF, 1= ON
	var currDateTime= getCurrentDateTime();	// only supports YYYYMMDDHHMMSS
	var transDescription= &apos;createHL7FromObject&apos;;
	var objMsgContent= msgObject;

	// set or modify these values as needed
	var setID = &apos;1&apos;;
	var msgCode= &apos;MDM&apos;;
	var eventType= &apos;T02&apos;;
	channelMap.put(&apos;msgType&apos;,msgCode+&apos;^&apos;+eventType);
	channelMap.put(&apos;currentUUID&apos;,UUIDGenerator.getUUID());
	channelMap.put(&apos;messageId&apos;,$(&apos;currentUUID&apos;));
	
	var sendingApplication= &apos;ABC-APPLICATION&apos;;
	var receivingApplication= &apos;EPIC&apos;
	var messageProcessingId= &apos;P&apos;;  // reference HL7 Table 0103 WHERE P= Production, T= Test, D= Debugging, N= Non-Production, V= Valdation
	var hl7version= &apos;2.3&apos;;
	var patientClass= &apos;I&apos;;  		// reference HL7 Table 0004 https://www.hl7.org/fhir/v2/0004/index.html
	//
	tmp[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;]= sendingApplication;
	tmp[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;]= channelMap.get(&apos;SendingFacility&apos;);
	tmp[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;]= receivingApplication;
	tmp[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;]= channelMap.get(&apos;ReceivingFacility&apos;);
	tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;]= currDateTime;
	tmp[&apos;MSH&apos;][&apos;MSH.8&apos;][&apos;MSH.8.1&apos;]= &apos;&apos;;
	tmp[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;]= msgCode;
	tmp[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;]= eventType;
	tmp[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]= $(&apos;currentUUID&apos;);
	tmp[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;]= messageProcessingId;
	tmp[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;]= hl7version;
	
	tmp[&apos;PID&apos;][&apos;PID.1&apos;][&apos;PID.1.1&apos;] = setID;
	tmp[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;]= objMsgContent.PatId;
	tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;]= objMsgContent.PatientLastNm;
	tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;]= objMsgContent.PatientFirstNm;
	tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;]= objMsgContent.PatientMiddleNm;
	tmp[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;]= objMsgContent.PatientDOB;
	tmp[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;]= objMsgContent.PatientGender.toString().substring(0, 1);
	tmp[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;]= objMsgContent.EncounterId;
	tmp[&apos;PID&apos;][&apos;PID.19&apos;][&apos;PID.19.1&apos;]= objMsgContent.PatientSSN;
	
	tmp[&apos;PV1&apos;][&apos;PV1.1&apos;][&apos;PV1.1.1&apos;] = setID;
	tmp[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;] = objMsgContent.EncounterId;
	
	tmp[&apos;TXA&apos;][&apos;TXA.1&apos;][&apos;TXA.1.1&apos;] = setID;
	tmp[&apos;TXA&apos;][&apos;TXA.2&apos;][&apos;TXA.2.1&apos;] = objMsgContent.ReportType;
	tmp[&apos;TXA&apos;][&apos;TXA.4&apos;][&apos;TXA.4.1&apos;] = objMsgContent.Activity_DTTM;
	tmp[&apos;TXA&apos;][&apos;TXA.5&apos;][&apos;TXA.5.1&apos;] = objMsgContent.ProvId;
	tmp[&apos;TXA&apos;][&apos;TXA.4&apos;][&apos;TXA.6.1&apos;] = objMsgContent.OriginiationDTTM;
	tmp[&apos;TXA&apos;][&apos;TXA.4&apos;][&apos;TXA.7.1&apos;] = objMsgContent.TranscribedDTTM;
	tmp[&apos;TXA&apos;][&apos;TXA.12&apos;][&apos;TXA.12.1&apos;] = objMsgContent.DocumentId;
	tmp[&apos;TXA&apos;][&apos;TXA.12&apos;][&apos;TXA.17.1&apos;] = objMsgContent.DOCStatus.toString().substring(0, 1);
	
	tmp[&apos;OBX&apos;][&apos;OBX.1&apos;][&apos;OBX.1.1&apos;] = setID;
	tmp[&apos;OBX&apos;][&apos;OBX.2&apos;][&apos;OBX.2.1&apos;] = objMsgContent.ValueType; 
	tmp[&apos;OBX&apos;][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;] = objMsgContent.DocumentBodyRTF;
	
	if (debug&gt;0) { logger.error(transDescription+&apos; tmp: &apos;+tmp); }	
	// var message = SerializerFactory.getSerializer(&apos;HL7V2&apos;).fromXML(tmp);
	
	return tmp;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>52de370a-1383-4a87-91d9-0edfc5b1b195</id>
        <name>getCurrentDateTime</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911308073</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** getCurrentDateTime

  	- Desc: This function returns current DateTime only YYYYMMDDHHMMSS format

	@return {string} datetime - this string object contains the current DateTime only YYYYMMDDHHMMSS format
*/
function getCurrentDateTime() {
	var today = new Date();
	// set Date with leading zeros if needed
	var tMonth= today.getMonth()+1;
	if(tMonth.toString().length&lt;2) tMonth= &apos;0&apos;+tMonth;
	var tDay= today.getDate()
	if(tDay.toString().length&lt;2) tDay= &apos;0&apos;+tDay;
	var date = today.getFullYear()+&apos;&apos;+tMonth+&apos;&apos;+tDay;
	
	// set Time with leading zeros if needed
	var tHour= today.getHours();
	if(tHour.toString().length&lt;2) tHour= &apos;0&apos;+tHour;
	var tMinute= today.getMinutes();
	if(tMinute.toString().length&lt;2) tMinute= &apos;0&apos;+tMinute;
	var tSecond= today.getSeconds();
	if(tSecond.toString().length&lt;2) tSecond= &apos;0&apos;+tSecond;
	
	var time = tHour+&apos;&apos;+tMinute+&apos;&apos;+tSecond;
	var dateTime = date+&apos;&apos;+time;

	return dateTime;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>b2763dd8-0786-491f-940f-62342980ffd0</id>
        <name>occurrences</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911308138</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** occurrences

	-Desc: This function that count occurrences of a substring in a string.
	
 	@param {String} string               The string
 	@param {String} subString            The sub string to search for
 	@param {Boolean} [allowOverlapping]  Optional. (Default:false)
 	
 	@author Vitim.us https://gist.github.com/victornpb/7736865
 	@see Unit Test https://jsfiddle.net/Victornpb/5axuh96u/
 	@see http://stackoverflow.com/questions/4009756/how-to-count-string-occurrence-in-string/7924240#7924240
 */
function occurrences(string, subString, allowOverlapping) {

    string += &quot;&quot;;
    subString += &quot;&quot;;
    if (subString.length &lt;= 0) return (string.length + 1);

    var n = 0,
        pos = 0,
        step = allowOverlapping ? 1 : subString.length;

    while (true) {
        pos = string.indexOf(subString, pos);
        if (pos &gt;= 0) {
            ++n;
            pos += step;
        } else break;
    }
    return n;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>ae1b069c-7384-490e-b649-b8aaf508eb9c</id>
        <name>parseCSVtoObject</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911308185</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** parseCSVtoObject

  	- Desc: This function receives a RAW msg string and returns string objectified

   	@param {String} msg - this contains a RAW message (i.e. msg)
	@return {Object} objMsgContents - this object contains objectification of the RAW msg string
*/
function parseCSVtoObject (msg, debug) {

	// var debug=1; // 0= OFF, 1= channelMap, 2= logger.error
	var funcDescription= &apos;parseCSVtoObject&apos;;
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+funcDescription+&apos; msg: &apos;+msg); }
	
	// create obj Message Contents
	var objMsgContents= new Object(); 
	
// CHS FACILITY NAME
	if(msg[&apos;row&apos;][&apos;column1&apos;].toString().length&gt;0) {
		objMsgContents.FacName= msg[&apos;row&apos;][&apos;column1&apos;].toString();
	} else {
		objMsgContents.FacName= &apos;&apos;;
	}
	channelMap.put(&apos;FacName&apos;,objMsgContents.FacName);	
// CHS REGION
	if(msg[&apos;row&apos;][&apos;column2&apos;].toString().length&gt;0) {
		objMsgContents.ChsRegion= msg[&apos;row&apos;][&apos;column2&apos;].toString();
	} else {
		objMsgContents.ChsRegion= &apos;X&apos;;
	}
	channelMap.put(&apos;ChsRegion&apos;,objMsgContents.ChsRegion);
// CHS EHR SYSTEM	
	if(msg[&apos;row&apos;][&apos;column3&apos;].toString().length&gt;0) {
		objMsgContents.adtEHR= msg[&apos;row&apos;][&apos;column3&apos;].toString();
	} else {
		objMsgContents.adtEHR= &apos;&apos;;
	}
	channelMap.put(&apos;adtEHR&apos;,objMsgContents.adtEHR);	
// SENDING FACILITY	
	if(msg[&apos;row&apos;][&apos;column4&apos;].toString().length&gt;0) {
		objMsgContents.SendingFacility= msg[&apos;row&apos;][&apos;column4&apos;].toString()
	} else {
		objMsgContents.SendingFacility= &apos;&apos;;
	}
// RECV FACILITY	
	if(msg[&apos;row&apos;][&apos;column5&apos;].toString().length&gt;0) {
		objMsgContents.ReceivingFacility= msg[&apos;row&apos;][&apos;column5&apos;].toString();
	} else {
		objMsgContents.ReceivingFacility= &apos;&apos;;
	}
	channelMap.put(&apos;ReceivingFacility&apos;,objMsgContents.ReceivingFacility);
// PAT MRN	
	if(msg[&apos;row&apos;][&apos;column6&apos;].toString().length&gt;0) {
		objMsgContents.PatientIdentifier= msg[&apos;row&apos;][&apos;column6&apos;].toString();
	} else {
		objMsgContents.PatientIdentifier= &apos;&apos;;
	}
	channelMap.put(&apos;PatientId&apos;,objMsgContents.PatientIdentifier);		
// PAT ACCT #	
	if(msg[&apos;row&apos;][&apos;column7&apos;].toString().length&gt;0) {
		objMsgContents.PatientAcct= msg[&apos;row&apos;][&apos;column7&apos;].toString();
	} else {
		objMsgContents.PatientAcct= &apos;&apos;;
	}
	channelMap.put(&apos;PatientAcct&apos;,objMsgContents.PatientAcct);	
// PAT LAST NAME	
	if(msg[&apos;row&apos;][&apos;column8&apos;].toString().length&gt;0) {
		objMsgContents.PatientLastName= msg[&apos;row&apos;][&apos;column8&apos;].toString();
	} else {
		objMsgContents.PatientLastName= &apos;&apos;;
	}
	channelMap.put(&apos;PatientLastName&apos;,objMsgContents.PatientLastName);
// PAT ADDRESS FIRST NAME	
	if(msg[&apos;row&apos;][&apos;column9&apos;].toString().length&gt;0) {
		objMsgContents.PatientFirstName= msg[&apos;row&apos;][&apos;column9&apos;].toString();
	} else {
		objMsgContents.PatientFirstName= &apos;&apos;;
	}
	channelMap.put(&apos;PatientFirstName&apos;,objMsgContents.PatientFirstName);
// PAT ADDRESS DOB	
	if(msg[&apos;row&apos;][&apos;column10&apos;].toString().length&gt;0) {
		objMsgContents.PatientDOB= msg[&apos;row&apos;][&apos;column10&apos;].toString();
	} else {
		objMsgContents.PatientDOB= &apos;19000101&apos;;
	}
// PAT GENDER	
	if(msg[&apos;row&apos;][&apos;column11&apos;].toString().length&gt;0) {
		objMsgContents.PatientGender= msg[&apos;row&apos;][&apos;column11&apos;].toString();
	} else {
		objMsgContents.PatientGender= &apos;&apos;;
	}
// PAT PHONE	
	if(msg[&apos;row&apos;][&apos;column12&apos;].toString().length&gt;0) {
		objMsgContents.PatientPhoneNumber= msg[&apos;row&apos;][&apos;column12&apos;].toString();
	} else {
		objMsgContents.PatientPhoneNumber= &apos;&apos;;
	}
// PAT ADDRESS STREET	
	if(msg[&apos;row&apos;][&apos;column13&apos;].toString().length&gt;0) {
		objMsgContents.PatientAddressStreet= msg[&apos;row&apos;][&apos;column13&apos;].toString();
	} else {
		objMsgContents.PatientAddressStreet= &apos;&apos;;
	}
	channelMap.put(&apos;PatientAddressStreet&apos;,objMsgContents.PatientAddressStreet);
// PAT ADDRESS CITY	
	if(msg[&apos;row&apos;][&apos;column14&apos;].toString().length&gt;0) {
		objMsgContents.PatientAddressCity= msg[&apos;row&apos;][&apos;column14&apos;].toString();
	} else {
		objMsgContents.PatientAddressCity= &apos;&apos;;
	}
	channelMap.put(&apos;PatientAddressCity&apos;,objMsgContents.PatientAddressCity);
// PAT ADDRESS ST	
	if(msg[&apos;row&apos;][&apos;column15&apos;].toString().length&gt;0) {
		objMsgContents.PatientAddressState= msg[&apos;row&apos;][&apos;column15&apos;].toString();
	} else {
		objMsgContents.PatientAddressState= &apos;&apos;;
	}
	channelMap.put(&apos;PatientAddressState&apos;,objMsgContents.PatientAddressState);	
// PAT ADDRESS ZIP
	if(msg[&apos;row&apos;][&apos;column16&apos;].toString().length&gt;0) {
		objMsgContents.PatientAddressZip= msg[&apos;row&apos;][&apos;column16&apos;].toString();
	} else {
		objMsgContents.PatientAddressZip= &apos;&apos;;
	}
	channelMap.put(&apos;PatientAddressZip&apos;,objMsgContents.PatientAddressZip);	
	
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+funcDescription+&apos; object: &apos;+JSON.stringify(objMsgContents)); }
	return objMsgContents;
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>20fccfb1-1271-4619-a849-649feea2da3c</id>
        <name>parseHL7MDMtoObject</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911308161</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** parseHL7MDMtoObject

  	- Desc: This function receives a RAW HL7v2 MDM message string and returns string objectified
  	- Modified
	2020-03-03 JER - Modified to iterate through the instances of the row XML object into JS Object
	2020-03-27 JER - parse DOB to provide YYYYMMDD format
	
   	@param {String} msg - this contains a RAW message (i.e. msg)
	@return {Object} objMsgContent - this object contains objectification of the RAW msg string
*/
function parseHL7MDMtoObject (msg, debug) {

	// var debug=1; // 0= OFF, 1= channelMap, 2= logger.error
	var funcDescription= &apos;parseHL7MDMtoObject&apos;;
	var intCount= 0;
	var chkNumeric= false;
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+funcDescription+&apos; msg: &apos;+msg); } 

	var arrORUMessageSegments= new Array();

	for each(element in msg.children()) {
		if (element.name()== &apos;MSH&apos;) {
			var msgSegment= new Object();
			msgSegment.SendingApplication= 		element[&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString();
			msgSegment.SendingFacility= 			element[&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString();
			msgSegment.ReceivingApplication=		element[&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString();
			msgSegment.ReceivingFacility=			element[&apos;MSH.6&apos;][&apos;MSH.6.1&apos;].toString();
			msgSegment.MessageDateTime=			element[&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
			msgSegment.MessagesType=				element[&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString();
			msgSegment.MessageEventType=			element[&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();
			msgSegment.MessageControlId=			element[&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
			arrORUMessageSegments.push(msgSegment);
		} else if (element.name()== &apos;PID&apos;) {
			var msgSegment= new Object();
			msgSegment.PatientId= 				element[&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString();
			msgSegment.LastName=				element[&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString();
			msgSegment.FirstName=				element[&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString();
			msgSegment.MiddleName=				element[&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString();
			msgSegment.DateOfBirth=				element[&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();
			msgSegment.Gender=					element[&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString();
			msgSegment.AccountNumber=			element[&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();
			msgSegment.SSN=					element[&apos;PID.19&apos;][&apos;PID.19.1&apos;].toString();
			arrORUMessageSegments.push(msgSegment);
		} else if (element.name()== &apos;PV1&apos;) {
			msgSegment.VisitNumber=				element[&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString();
			arrORUMessageSegments.push(msgSegment);
		} else if (element.name()== &apos;TXA&apos;) {
			var documentType=					element[&apos;TXA.2&apos;][&apos;TXA.2.1&apos;].toString();
			msgSegment.DocumentType=				documentType;
			var activityDateTime=				element[&apos;TXA.4&apos;][&apos;TXA.4.2&apos;].toString().replace(/[^0-9a-zA-Z]/g,&apos;&apos;);
			msgSegment.ActivityDateTime=			activityDateTime.substring(0,8);
			msgSegment.OriginationDateTime=		activityDateTime.substring(0,8);
			msgSegment.TranscriptionDateTime=		activityDateTime.substring(0,8);
			msgSegment.ProviderCode=				element[&apos;TXA.5&apos;][&apos;TXA.5.1&apos;].toString();
			msgSegment.DocumentNumberId=			element[&apos;TXA.12&apos;][&apos;TXA.12.1&apos;].toString();
			msgSegment.DocumentNamespaceId=		element[&apos;TXA.12&apos;][&apos;TXA.12.2&apos;].toString();
			arrORUMessageSegments.push(msgSegment);
		} else if (element.name()== &apos;OBX&apos;) {
			msgSegment.ValueType=				documentType;
			msgSegment.ObservationId=			element[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString();
			arrORUMessageSegments.push(msgSegment);
		}
	}

	if(debug&gt;0) { logger.error(&apos;arrORUMessageSegments.length: &apos;+arrORUMessageSegments.length); }
	channelMap.put(&apos;arrORUMessageSegments&apos;,arrORUMessageSegments);
	return arrORUMessageSegments;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>41993c2f-fcb7-49bc-8ca4-6347847c3743</id>
        <name>parseRTFtoObject</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911308096</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** parseRTFtoObject

  	- Desc: This function receives a RAW msg string and returns string objectified
  	- Modified
	2020-03-03 JER - Modified to iterate through the instances of the row XML object into JS Object
	2020-03-27 JER - parse DOB to provide YYYYMMDD format
	
   	@param {String} msg - this contains a RAW message (i.e. msg)
	@return {Object} objMsgContent - this object contains objectification of the RAW msg string
*/
function parseRTFtoObject (msg, debug) {

	// var debug=1; // 0= OFF, 1= channelMap, 2= logger.error
	var funcDescription= &apos;parseRTFtoObject&apos;;
	var intCount= 0;
	var chkNumeric= false;
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+funcDescription+&apos; msg: &apos;+msg); } 

	// create Message objects
	var arrMsgContents= new Array();
	
	for each (row in msg[&apos;row&apos;]) {
		if (row.children().length()&gt;1) {
			if(debug&gt;0) { 
				logger.error(&apos;row[&apos;+intCount+&apos;].children.length: &apos;+row.children().length()+&apos; row children names: &apos;+row.children());
			}
			
			for each (child in row.children()) {
				
				if (child.localName().toString() == &apos;Patient_ID&apos;) {
					chkNumeric= isNumeric(child.toString());
					if(debug&gt;0) {
						logger.error(child.localName().toString()+&apos;.isNumeric:&apos;+chkNumeric);
					}
					if(isNumeric(child.toString())== true) {
						// create each Message object
						var objMsgContent= new Object();
						
						// Patient ID
						if(child.toString().length&gt;0) {
							objMsgContent.PatId= child.toString();
						} else {
							objMsgContent.PatId= &apos;&apos;;
						}
						//channelMap.put(&apos;PatId&apos;,objMsgContent.PatId);
					}
				}

				if(chkNumeric==  true) {
					// ReportType
					if(child.localName().toString() == &apos;ReportType&apos;) {
						if(child.toString().length&gt;0) {
							objMsgContent.ReportType= child.toString();
						} else {
							objMsgContent.ReportType= &apos;X&apos;;
						}	
						//channelMap.put(&apos;ReportType&apos;,objMsgContent.ReportType);
					// Activity_DTTM	
					} else if(child.localName().toString() == &apos;Activity_DTTM&apos;) {
						if(child.toString().length&gt;0) {
							objMsgContent.ActivityDT= child.toString();
						} else {
							objMsgContent.ActivityDT= &apos;&apos;;
						}	
						//channelMap.put(&apos;ActivityDT&apos;,objMsgContent.ActivityDT);
					// Prov_ID	
					} else if(child.localName().toString() == &apos;Prov_ID&apos;) {
						if(child.toString().length&gt;0) {
							objMsgContent.ProvId= child.toString();
						} else {
							objMsgContent.ProvId= &apos;&apos;;
						}	
						//channelMap.put(&apos;ProvId&apos;,objMsgContent.ProvId);
					// Prov_Last_Nm
					} else if(child.localName().toString() == &apos;Prov_Last_Nm&apos;) {
						if(child.toString().length&gt;0) {
							objMsgContent.ProvLastNm= child.toString();
						} else {
							objMsgContent.ProvLastNm= &apos;&apos;;
						}	
						// channelMap.put(&apos;ProvLastNm&apos;,objMsgContent.ProvLastNm);
					// Prov_First_Nm
					} else if(child.localName().toString() == &apos;Prov_First_Nm&apos;) {
						if(child.toString().length&gt;0) {
							objMsgContent.ProvFirstNm= child.toString();
						} else {
							objMsgContent.ProvFirstNm= &apos;&apos;;
						}	
						// channelMap.put(&apos;ProvFirstNm&apos;,objMsgContent.ProvFirstNm);
					// Prov_Middle_Nm
					} else if(child.localName().toString() == &apos;Prov_Middle_Nm&apos;) {
						if(child.toString().length&gt;0) {
							objMsgContent.ProvMiddleNm= child.toString();
						} else {
							objMsgContent.ProvMiddleNm= &apos;&apos;;
						}	
						// channelMap.put(&apos;ProvMiddleNm&apos;,objMsgContent.ProvFirstNm);
					// DocumentID
					} else if(child.localName().toString() == &apos;DocumentID&apos;) {
						if(child.toString().length&gt;0) {
							objMsgContent.DocumentId= child.toString();
						} else {
							objMsgContent.DocumentId= &apos;&apos;;
						}	
						// channelMap.put(&apos;DocumentId&apos;,objMsgContent.DocumentId);
					// Value_Type
					} else if(child.localName().toString() == &apos;Value_Type&apos;) {
						if(child.toString().length&gt;0) {
							objMsgContent.ValueType= child.toString();
						} else {
							objMsgContent.ValueType= &apos;&apos;;
						}	
						// channelMap.put(&apos;ValueType&apos;,objMsgContent.ValueType);							
					// Patient_Last_Nm
					} else if(child.localName().toString() == &apos;Patient_Last_Nm&apos;) {
						if(child.toString().length&gt;0) {
							objMsgContent.PatientLastNm= child.toString();
						} else {
							objMsgContent.PatientLastNm= &apos;&apos;;
						}	
						// channelMap.put(&apos;PatientLastNm&apos;,objMsgContent.PatientLastNm);
					// Patient_First_Nm
					} else if(child.localName().toString() == &apos;Patient_First_Nm&apos;) {
						if(child.toString().length&gt;0) {
							objMsgContent.PatientFirstNm= child.toString();
						} else {
							objMsgContent.PatientFirstNm= &apos;&apos;;
						}	
						// channelMap.put(&apos;PatientFirstNm&apos;,objMsgContent.PatientFirstNm);
					// Patient_Middle_Nm
					} else if(child.localName().toString() == &apos;Patient_Middle_Nm&apos;) {
						if(child.toString().length&gt;0) {
							objMsgContent.PatientMiddleNm= child.toString();
						} else {
							objMsgContent.PatientMiddleNm= &apos;&apos;;
						}	
						// channelMap.put(&apos;PatientMiddleNm&apos;,objMsgContent.PatientMiddleNm);
					// Patient_DOB
					} else if(child.localName().toString() == &apos;Patient_DOB&apos;) {
						if(child.toString().length&gt;0) {

							// 2020-03-27 JER - parse DOB to provide YYYYMMDD format
							var strPatientDOB= 	child.toString().replace(/-/g,&apos;&apos;).replace(/:/g,&apos;&apos;).replace(&apos; &apos;,&apos;&apos;);
							var newPatientDOB= 	strPatientDOB.substring(0,8);
							if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+funcDescription+&apos; strPatientDOB: &apos;+strPatientDOB+&apos; newPatientDOB: &apos;+newPatientDOB); } 
							objMsgContent.PatientDOB= newPatientDOB;
							// objMsgContent.PatientDOB= child.toString();
						} else {
							objMsgContent.PatientDOB= &apos;&apos;;
						}	
						// channelMap.put(&apos;PatientDOB&apos;,objMsgContent.PatientDOB);
					// Patient_Gender
					} else if(child.localName().toString() == &apos;Patient_Gender&apos;) {
						if(child.toString().length&gt;0) {
							objMsgContent.PatientGender= child.toString();
						} else {
							objMsgContent.PatientGender= &apos;&apos;;
						}	
						// channelMap.put(&apos;PatientGender&apos;,objMsgContent.PatientGender);
					// Encounter_ID
					} else if(child.localName().toString() == &apos;Encounter_ID&apos;) {
						if(child.toString().length&gt;0) {
							objMsgContent.EncounterID= child.toString();
						} else {
							objMsgContent.EncounterID= &apos;&apos;;
						}	
						// channelMap.put(&apos;EncounterID&apos;,objMsgContent.EncounterID);
					// Patient_SSN
					} else if(child.localName().toString() == &apos;Patient_SSN&apos;) {
						if(child.toString().length&gt;0) {
							objMsgContent.PatientSSN= child.toString();
						} else {
							objMsgContent.PatientSSN= &apos;&apos;;
						}	
						// channelMap.put(&apos;PatientSSN&apos;,objMsgContent.PatientSSN);
					// DOCStatus
					} else if(child.localName().toString() == &apos;DOCStatus&apos;) {
						if(child.toString().length&gt;0) {
							objMsgContent.DOCStatus= child.toString();
						} else {
							objMsgContent.DOCStatus= &apos;&apos;;
						}	
						// channelMap.put(&apos;DOCStatus&apos;,objMsgContent.DOCStatus);	
					// OriginiationDTTM
					} else if(child.localName().toString() == &apos;OriginiationDTTM&apos;) {
						if(child.toString().length&gt;0) {
							objMsgContent.OriginiationDTTM= child.toString();
						} else {
							objMsgContent.OriginiationDTTM= &apos;&apos;;
						}	
						// channelMap.put(&apos;OriginiationDTTM&apos;,objMsgContent.OriginiationDTTM);
					// TranscribedDTTM
					} else if(child.localName().toString() == &apos;TranscribedDTTM&apos;) {
						if(child.toString().length&gt;0) {
							objMsgContent.TranscribedDTTM= child.toString();
						} else {
							objMsgContent.TranscribedDTTM= &apos;&apos;;
						}	
						// channelMap.put(&apos;TranscribedDTTM&apos;,objMsgContent.TranscribedDTTM);	
					// Document_Body_RTF
					} else if(child.localName().toString() == &apos;Document_Body_RTF&apos;) {
						if(child.toString().length&gt;0) {
							objMsgContent.DocumentBodyRTF= child.toString();
						} else {
							objMsgContent.DocumentBodyRTF= &apos;&apos;;
						}	
						// channelMap.put(&apos;DocumentBodyRTF&apos;,objMsgContent.DocumentBodyRTF);		
					}
					
				}
			}
			
			if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+funcDescription+&apos; object: &apos;+JSON.stringify(objMsgContent)); }
			// store objMsgContent in arrMsgContents
			if(chkNumeric==  true) arrMsgContents.push(objMsgContent);
		}
		intCount++;
		var chkNumeric= false;
	}
	if(debug&gt;0) { logger.error(&apos;arrMsgContents.length: &apos;+arrMsgContents.length); }
	channelMap.put(&apos;arrMsgContents&apos;,arrMsgContents);
	return arrMsgContents;
} // end function

function isNumeric(num){
  return !isNaN(num)
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>a43e77d4-408e-4b99-a013-caa20e9753d2</id>
    <name>EHR_MiddleWare_HIE_Functions (IHE Standards)</name>
    <revision>5</revision>
    <lastModified>
      <time>1672445597934</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description></description>
    <includeNewChannels>false</includeNewChannels>
    <enabledChannelIds>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>14b7de16-de3e-4994-b123-b4d0d3d712aa</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
      <string>076d39da-7152-40db-91a1-1746167239e9</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>ccd7e546-4a7f-476b-9680-f021976fe1bc</id>
        <name>Create Header Root Element</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911429549</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Function (createRootElement) : It will develope root element dynamically based on the incoming message. The EHR is expected
	to send this root element to the middleware and it can never be empty or null

	@param {String} rootElementTag - Header element of the message
	@return {XML element} - &lt;PRPA_IN201309UV02 xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;urn:hl7-org:v3&quot; ITSVersion=&quot;XML_1.0&quot;&gt;
*/
function createRootElement(rootElementTag) {
	
	var rootElement = new XML(&apos;&lt;&apos;+rootElementTag+&apos;&gt;&lt;/&apos;+rootElementTag+&apos;&gt;&apos;);
	rootElement.addNamespace(new Namespace(&apos;xsi&apos;, &apos;http://www.w3.org/2001/XMLSchema-instance&apos;));
	rootElement[&apos;@xsi:schemaLocation&apos;]=&apos;urn:hl7-org:v3 ../../schema/HL7V3/NE2008/multicacheschemas/PRPA_IN201305UV02.xsd&apos;;
	rootElement[&apos;@ITSVersion&apos;]=&apos;XML_1.0&apos;;

	return rootElement;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>9575db26-d4c9-4ce1-8a9d-3f326274d89c</id>
        <name>Create Message Accept Acknowledgement Code (ackCode)</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911429588</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function createMessageAcceptAckCode(ackCode) {
	var 	accept_ack_code 	   = new XML(&apos;&lt;acceptAckCode&gt;&lt;/acceptAckCode&gt;&apos;);
	accept_ack_code[&apos;@code&apos;] = ackCode;
	return accept_ack_code;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>652252a5-fecc-4980-86c0-00ae82ab44e2</id>
        <name>Create Message Creation Time</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911429569</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Function (createMessageCreationTime) : It  will develope the XML Element &lt;creationTime value=&quot;20070810140900&quot;/&gt;, assuming the EHR
	Will always provide this value. (Empty or NULL scenario is hypothetical)

	@param {String} creationTime - The time at which the query is triggered, the EHR is expected to send this time
	in the format of YYYYMMddHHmmss
	@return {XML Element}  -  &lt;creationTime value=&quot;20070810140900&quot;/&gt;
*/
function createMessageCreationTime(creationTime) {
    var message_created_date = new XML(&apos;&lt;creationTime&gt;&lt;/creationTime&gt;&apos;);
    message_created_date[&apos;@value&apos;] = creationTime;
    return message_created_date;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>9d0e684c-5d1c-4a06-bef0-7d9deb326dd3</id>
        <name>Create Message Interaction Root (OID,Extension)</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911429698</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Function (createMessageInteractionRoot) : It will develope &lt;interactionId root=&quot;&quot; extension=&quot;&quot;/&gt;, Assuming the EHR will always provide
	interactionId root got from HIE to middleware

	@param {String} oid - OID obtained from the HIE by EHR system
	@param {String} extension - The queryType paramter in JSON
	@return {XML Element} - &lt;interactionId root=&quot;&quot; extension=&quot;&quot;/&gt;
*/
function createMessageInteractionRoot(oid,extension) {
	var 	message_interaction_id = new XML(&apos;&lt;interactionId&gt;&lt;/interactionId&gt;&apos;);
	message_interaction_id[&apos;@root&apos;] 	  = oid;
	message_interaction_id[&apos;@extension&apos;] = extension;
	return message_interaction_id;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>22ce693a-65d3-4d55-a3fd-82f3d8f694ef</id>
        <name>Create Message Processing Code</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911429605</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Function (createMessageProcessingCode) : It will develope &lt;processingCode code=&quot;P&quot;/&gt; the values are
	P: production envionment
	T: testing environment

	@param No Parameter - This function Takes by default only 2 values either 
	P or E and it will be set in global Script Area
	
	@return {XML Element} - &lt;processingCode code=&quot;P&quot;/&gt;
*/
function createMessageProcessingCode(processingCode) {
	var 	message_processing_code 	   = new XML(&apos;&lt;processingCode&gt;&lt;/processingCode&gt;&apos;);
	message_processing_code[&apos;@code&apos;] = processingCode;
	return message_processing_code;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>140687ce-14c5-4200-b519-dfb3bf108e66</id>
        <name>Create Message Processing Mode Code (modeCode)</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911429625</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Function (createMessageProcessingModeCode) : It will develope &lt;processingModeCode code=&quot;T&quot;/&gt; The middleware assumes that this data will always come
	and Empty or Null scenario is merely hypothetical

	@param {String} modeCode - The EHR is expected to send 4 different values here it can be T, I, A and R
	@return {XML Element} - &lt;processingModeCode code=&quot;T&quot;/&gt;
*/
function createMessageProcessingModeCode(modeCode) {
	var 	message_processing_mode_code 		= new XML(&apos;&lt;processingModeCode&gt;&lt;/processingModeCode&gt;&apos;);
	message_processing_mode_code[&apos;@code&apos;] 	= modeCode;
	return message_processing_mode_code;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>5c7b7869-7ab3-431e-ae02-823d701af47f</id>
        <name>Create Message Receiver (id,telecom)</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911429681</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Function (createMessageReceiver) : It will develope &lt;receiver typeCode=&quot;RCV&quot;&gt; &lt;device classCode=&quot;DEV&quot;
	determinerCode=&quot;INSTANCE&quot;&gt; &lt;id root=&quot;1.2.840.114350.1.13.999.234&quot;/&gt; &lt;/device&gt; &lt;/receiver&gt; The ID
	will be always provided by the EHR. Although the telecom parameter will be optional

	@param {String} receiverOid - This OID will be provided by EHR who obtained from HIE
	@param {Any} telecom - 
	@return {XML Element} - &lt;receiver typeCode=&quot;RCV&quot;&gt; &lt;device classCode=&quot;DEV&quot;
		determinerCode=&quot;INSTANCE&quot;&gt; &lt;id root=&quot;1.2.840.114350.1.13.999.234&quot;/&gt; &lt;/device&gt; &lt;/receiver&gt;
*/
// BEGIN: RECEIVER DEVICE/APPLICATION INFORMATION
function createMessageReceiver(receiverOid,telecomUse,telecom) {
  // &lt;receiver typeCode=&quot;RCV&quot;&gt;
	var receiver_information = new XML(&apos;&lt;receiver&gt;&lt;/receiver&gt;&apos;);
	receiver_information[&apos;@typeCode&apos;] = &quot;RCV&quot;;
  // &lt;device classCode=&quot;DEV&quot; determinerCode=&quot;INSTANCE&quot;&gt;
	var device = new XML(&apos;&lt;device&gt;&lt;/device&gt;&apos;);
	device[&apos;@classCode&apos;] = &quot;DEV&quot;;
	device[&apos;@determinerCode&apos;] = &quot;INSTANCE&quot;;
  // &lt;id root=&quot;1.2.840.114350.1.13.999.234&quot;/&gt;
	var receiver_root_id = new XML(&apos;&lt;id&gt;&lt;/id&gt;&apos;);
	receiver_root_id[&apos;@root&apos;] = receiverOid;
	device.appendChild(receiver_root_id);
	//logger.debug(telecom)
	if(telecom!=&apos;&apos;){
  // &lt;telecom value=&quot;http://servicelocation/PDQuery&quot;/&gt;
	var receiver_telecom_value = new XML(&apos;&lt;telecom&gt;&lt;/telecom&gt;&apos;);
	receiver_telecom_value[&apos;@value&apos;] = telecom;
	if(telecomUse!=&apos;&apos;){
	receiver_telecom_value[&apos;@use&apos;] = telecomUse;
	}
	device.appendChild(receiver_telecom_value);
	}
	receiver_information.appendChild(device);
  // APPEND: receiver information with header tag
	return receiver_information;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>f417e547-8a97-4aea-857d-ec5c59adcd01</id>
        <name>Create Message Root (OID,Extension / GUID)</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911429660</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Function (createMessageRoot) : It will develope &lt;id root=&quot;OID&quot; extension=&quot;ext_value&quot;/&gt; (or) &lt;id root = &quot;GUID&quot;&gt;

	@param {String} oidOrGuid - This parameter cannot be null, it will receive either OID or GUID value
	@param {String} extension - If this parameter is null then only id root with GUID will be generated
	@return {XML Element} -  &lt;id root=&quot;OID&quot; extension=&quot;ext_value&quot;/&gt; (or) &lt;id root = &quot;GUID&quot;&gt;
	
*/
function createMessageRoot(oidOrGuid, ext_id) {
    var message_root_id = new XML(&apos;&lt;id&gt;&lt;/id&gt;&apos;);
    message_root_id[&apos;@root&apos;] = oidOrGuid;
    // IF: the extension is provided then create extension attribute else not needed.
    if (ext_id != null) {
        message_root_id[&apos;@extension&apos;] = ext_id;
    }

    return message_root_id;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>5ce98b17-f257-4e56-b847-8283091f2224</id>
        <name>Create Message Sender (oid)</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911429641</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Function (createMessageSender) : It will develope the complete sender information comprising of sender device OID
	and the OID provided to the clinic which uses the EMR 

	@param {String} deviceOid - This is the baby oid provided by the EHR upon registering with HL7
	@param {String} communityOid - OID used by the clinic or hospital which uses the same  EHR (optional)
	@return {XML Element} - complete sender information
*/

// BEGIN: SENDER APPLICATION/ DEVICE INFORMATION
function createMessageSender(deviceOid,senderName,communityOid,telecom,telecomUse) {
	// &lt;sender typeCode=&quot;SND&quot;&gt;
	var sender_information = new XML(&apos;&lt;sender&gt;&lt;/sender&gt;&apos;);
	sender_information[&apos;@typeCode&apos;] = &quot;SND&quot;;
	// &lt;device classCode=&quot;DEV&quot; determinerCode=&quot;INSTANCE&quot;&gt;
	var device = new XML(&apos;&lt;device&gt;&lt;/device&gt;&apos;);
	device[&apos;@classCode&apos;] = &quot;DEV&quot;;
	device[&apos;@determinerCode&apos;] = &quot;INSTANCE&quot;;
	// &lt;id root=&quot;1.2.840.114350.1.13.999.567&quot;/&gt;
	var sender_root_id = new XML(&apos;&lt;id&gt;&lt;/id&gt;&apos;);
	sender_root_id[&apos;@root&apos;]= deviceOid;
	device.appendChild(sender_root_id);
	// communityOid: Is optional field, if it does not come then representedOrganzation 
	// should not be printed
	if(communityOid!=&apos;&apos;){
	// &lt;asAgent classCode=&quot;AGNT&quot;&gt;
	var asAgent = new XML(&apos;&lt;asAgent&gt;&lt;/asAgent&gt;&apos;);
	asAgent[&apos;@classCode&apos;] = &apos;AGNT&apos;;
	// &lt;representedOrganization classCode=&quot;ORG&quot; determinerCode=&quot;INSTANCE&quot;&gt;
	var representedOrganization = new XML(&apos;&lt;representedOrganization&gt;&lt;/representedOrganization&gt;&apos;);
	representedOrganization[&apos;@classCode&apos;] = &apos;ORG&apos;;
	representedOrganization[&apos;@determinerCode&apos;] = &apos;INSTANCE&apos;;
	// &lt;id root=&quot;1.2.3&quot; /&gt;
	var sender_home_community_id = new XML(&apos;&lt;id&gt;&lt;/id&gt;&apos;); 
	sender_home_community_id[&apos;@root&apos;] = communityOid;
	representedOrganization.appendChild(sender_home_community_id);
	if(senderName!=&apos;&apos;){
	var sender_name = new XML(&apos;&lt;name&gt;&apos;+senderName+&apos;&lt;/name&gt;&apos;);
	representedOrganization.appendChild(sender_name);
	}

	if(telecom!=&apos;&apos;){
	var sender_telecom_value = new XML(&apos;&lt;telecom&gt;&lt;/telecom&gt;&apos;);
	sender_telecom_value[&apos;@value&apos;] = telecom;
	if(telecomUse!=&apos;&apos;){
	sender_telecom_value[&apos;@use&apos;] = telecomUse;
	}
	representedOrganization.appendChild(sender_telecom_value);
	}
	
	asAgent.appendChild(representedOrganization);
	device.appendChild(asAgent);
	}
	
	sender_information.appendChild(device);
	// APPEND: receiver information with header tag
	return sender_information;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>b21e274b-4dcf-4956-902b-00928dba5316</id>
        <name>Get Destination Channel ID</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911429528</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Function (returnDestinationChannelId) : Based on the incoming query type in the JSON from EHR, the function will route the data
	to respective channel ID

	@param {String} query_type - query_type (Message types based on ITI profiles for IHE)
	@return {String} returns ChannelID of deployed channels
*/
function returnDestinationChannelId(query_type) {
	
    var hie_query_method_iti_47 = [&apos;PRPA_IN201305UV02&apos;, &apos;PRPA_IN201307UV02&apos;];
    var hie_query_method_iti_45 = [&apos;PRPA_IN201309UV02&apos;];
    var hie_query_method_iti_9  = [&apos;pixv2_iti_9&apos;];
    var hie_query_method_iti_8  = [&apos;pixv2_iti_8&apos;];
    var hie_query_method_iti_47_cont = [&apos;QUQI_IN000003UV01&apos;];
    var channelID = &apos;&apos;;
	    if (hie_query_method_iti_47.indexOf(query_type.toString()) &gt;= 0) {
	        channelID = ChannelUtil.getDeployedChannelId(&apos;TRN_EHR_JSON_TO_ITI-47_PRPA_IN201305UV02&apos;);
	    } else if (hie_query_method_iti_45.indexOf(query_type.toString()) &gt;= 0) {
	        channelID = ChannelUtil.getDeployedChannelId(&apos;TRN_EHR_JSON_TO_ITI-45_PRPA_IN201309UV02&apos;);
	    } else if (hie_query_method_iti_9.indexOf(query_type.toString()) &gt;= 0) {
	        channelID = ChannelUtil.getDeployedChannelId(&apos;TRN_EHR_JSON_TO_ITI9-PIX_QUERY&apos;);
	    } else if (hie_query_method_iti_8.indexOf(query_type.toString()) &gt;= 0) {
	        channelID = ChannelUtil.getDeployedChannelId(&apos;TRN_EHR_JSON_TO_ITI-8_PATIENT_ID_FEED&apos;);
	    }else if(hie_query_method_iti_47_cont.indexOf(query_type.toString())&gt;=0){
	    	   channelID = ChannelUtil.getDeployedChannelId(&apos;TRN_EHR_JSON_TO_ITI-47_QUQI_IN000003UV01&apos;);
	    }
    return channelID;
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>d847b61c-582d-4e7d-a814-efdb36a7baf0</id>
    <name>FHIR to HL7v2</name>
    <revision>2</revision>
    <lastModified>
      <time>1650911402551</time>
      <timezone>GMT-06:00</timezone>
    </lastModified>
    <description></description>
    <includeNewChannels>false</includeNewChannels>
    <enabledChannelIds>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>6717709a-c742-4ed5-85f1-ef473e0ed653</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>e965c471-d547-4916-8208-a1fc410c5cbe</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>61509d82-c971-4fec-85ec-5613aa3251bf</id>
        <name>encounterProcessHTTP2xxCodes</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911345954</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Encounter - Process HTTP2xx Codes from JSON to HL7v2 - Encounter/Location Resource

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function encounterProcessHTTP2xxCodes(resp, pid) {

	if (resp.contains(&apos;200&apos;)) {
	
		var objEncounter= JSON.parse(new java.lang.String(FileUtil.decode(msg[&apos;Body&apos;].toString()), &quot;UTF-8&quot;));
		var count= objEncounter.total;
		pv1[&apos;PV1.1&apos;][&apos;PV1.2.1&apos;]= &quot;N&quot;;
		if(count &gt; 0) {
			// Checking only the first entry for that patient
			for (var i= 0;i &lt;= objEncounter.total; i++) {
				
				if (keyExists(objEncounter.entry[i].resource.resourceType) &amp;&amp; objEncounter.entry[i].resource.resourceType == &quot;Encounter&quot;) {
						populateEncounter(pv1, objEncounter, i);
				} // end if 
				
				if (keyExists(objEncounter.entry[i].resource.resourceType) &amp;&amp; objEncounter.entry[i].resource.resourceType == &quot;Location&quot;) {
						populateLocation(pv1, objEncounter, i);
				} // end if 
				
			} // end for
				
		} // end if 
	
	} // end if - 200 OK

} // end if</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>7e02efdb-25ec-4c81-bf75-cd6079338e74</id>
        <name>processHTTP2xxCodes</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911346034</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Patient - Process HTTP2xx Codes from JSON to HL7v2 - Patient Resource
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function processHTTP2xxCodes(resp, pid) {

	if (resp.contains(&apos;200&apos;)) {
	
		var objPatient= JSON.parse(new java.lang.String(FileUtil.decode(msg[&apos;Body&apos;].toString()), &quot;UTF-8&quot;));
		var count= objPatient.total;
		if(count &gt; 0) {
			// Checking only the first entry for that patient
			if (keyExists(objPatient.entry[0].resource.name)) {
				pid[&apos;PID.5&apos;][&apos;PID.5.1&apos;]= extract(objPatient.entry[0].resource.name[0].family[0]);
				pid[&apos;PID.5&apos;][&apos;PID.5.2&apos;]= extract(objPatient.entry[0].resource.name[0].given[0]);
			
				if (objPatient.entry[0].resource.name[0].given.length &gt; 1) {
					pid[&apos;PID.5&apos;][&apos;PID.5.3&apos;]= extract(objPatient.entry[0].resource.name[0].given);
				} // end if 
				
				pid[&apos;PID.7&apos;][&apos;PID.7.1&apos;]= convertToHL7v2Date(extract(objPatient.entry[0].resource.birthDate));
				pid[&apos;PID.8&apos;][&apos;PID.8.1&apos;]= convertToHL7v2Table(extract(objPatient.entry[0].resource.gender), &quot;0001&quot;);
				
				if (keyExists(objPatient.entry[0].resource.telecom)) {
					pid[&apos;PID.13&apos;][&apos;PID.13.1&apos;]= extract(objPatient.entry[0].resource.telecom[0].value);
				} // end if 
				
				if (keyExists(objPatient.entry[0].resource.address)) {
					pid[&apos;PID.11&apos;][&apos;PID.11.1&apos;]= extract(objPatient.entry[0].resource.address[0].line);
					pid[&apos;PID.11&apos;][&apos;PID.11.3&apos;]= extract(objPatient.entry[0].resource.address[0].city);
					pid[&apos;PID.11&apos;][&apos;PID.11.4&apos;]= extract(objPatient.entry[0].resource.address[0].state);
					pid[&apos;PID.11&apos;][&apos;PID.11.5&apos;]= extract(objPatient.entry[0].resource.address[0].postalCode);
					pid[&apos;PID.11&apos;][&apos;PID.11.6&apos;]= extract(objPatient.entry[0].resource.address[0].country);
					
					if (keyExists(objPatient.entry[0].resource.address[0].type)) {
						pid[&apos;PID.11&apos;][&apos;PID.11.7&apos;]= convertToHL7v2Table(extract(objPatient.entry[0].resource.address[0].type),&quot;0190&quot;);
					} // end if 
				
				} // end if 
				
			} // end if 
			
		} // end if 
	
	} // end if - 200 OK

} // end if </code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>40bec2ed-2edf-4c5f-9381-27af7dcb76db</id>
        <name>processHTTP4xxCodes</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911346063</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Patient - Process HTTP4xx Codes from JSON to HL7v2 - Error 400

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function patientProcessHTTP4xxCodes(resp, pid) {

	if (resp.contains(&apos;400&apos;)) {
	
		var objError= JSON.parse(new java.lang.String(FileUtil.decode(msg[&apos;Body&apos;].toString()), &quot;UTF-8&quot;));
		if (keyExists(objError.issue)) { 
			logger.error(extract(objError.issue[0].diagnostics));
		} // end if 
		pid[&apos;PID.5&apos;][&apos;PID.5.7&apos;]= &apos;U&apos;;
		
	} // end if - 400 Error

} // end if </code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>6bad9b41-a023-4600-83e2-2eef5a99ed7f</id>
        <name>processHTTP5xxCodes</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911345995</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Patient - Process HTTP5xx Codes from JSON to HL7v2 - 500 Error

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function patientProcessHTTP5xxCodes(resp, pid) {

	if (resp.contains(&apos;500&apos;)) {
	
		var objError= JSON.parse(new java.lang.String(FileUtil.decode(msg[&apos;Body&apos;].toString()), &quot;UTF-8&quot;));
		if (keyExists(objError.issue)) { 
			logger.error(extract(objError.issue[0].diagnostics));
		} // end if 
		pid[&apos;PID.5&apos;][&apos;PID.5.7&apos;]= &apos;U&apos;;
		
	} // end if - 500 Error

} // end if </code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>0ac98fea-6d57-46fa-84a7-5e23211baaa2</id>
    <name>Fhir</name>
    <revision>2</revision>
    <lastModified>
      <time>1672445597943</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description></description>
    <includeNewChannels>false</includeNewChannels>
    <enabledChannelIds>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>14b7de16-de3e-4994-b123-b4d0d3d712aa</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
      <string>076d39da-7152-40db-91a1-1746167239e9</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>6c2074b5-91b6-452c-b7f3-97aa8d80419a</id>
        <name>Factory</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911289749</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** function(vendor,version,token)

  	- Desc: This function receives a code system code (string) and returns confidentiality array contains both the code and displayName

   	@param {String} code - this contains a code system code (string)
	@return {array} confidentiality - this array contains the Confidentiality Code and DisplayName (key,value) pair in the confidentialityCode array.
*/

var fhirObj = function(){
  
  var scriptName= &apos;fhirObj function&apos;;
  
  this.init = function(vendor,version,token){
  	var vendors = globalMap.get(&quot;FhirVendors&quot;);
  	var vendorObj = vendors[vendor];
  	if(vendorObj.name == &apos;Cerner&apos;){
  		vendorObj.uname = token;
  	}
	var fhir = Packages.com.fhir.client.FhirFactory();
     if(version == &apos;&apos;)
     	version = &quot;DSTU2&quot;;
     	
     versionURL = version.toLowerCase()+&apos;_url&apos;;
     vendorObj.url = vendorObj[versionURL];
     this.vendorObj = fhir.initFhir(version, vendorObj.url, vendorObj.uname, vendorObj.pwd);

     if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG fhir version:&quot;+version.toString()+&quot; vendorObj.url: &quot;+(vendorObj.url).toString()+&quot; vendorObj.uname: &quot;+(vendorObj.uname).toString()+&quot; vendorObj.pwd: &quot;+(vendorObj.pwd).toString()); }
     
     return this.vendorObj;
   };   
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>bb20e704-b235-464b-a0db-46e961761555</id>
    <name>FiveSixHealthcare-Utilities</name>
    <revision>14</revision>
    <lastModified>
      <time>1672445597958</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description></description>
    <includeNewChannels>false</includeNewChannels>
    <enabledChannelIds>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>14b7de16-de3e-4994-b123-b4d0d3d712aa</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
      <string>076d39da-7152-40db-91a1-1746167239e9</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>c7de9b91-9a41-43eb-8b27-83f2ae0a2fba</id>
        <name>executeQueryVerifyCode</name>
        <revision>13</revision>
        <lastModified>
          <time>1662998298586</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Creates and executes database statements

	@param {Boolean} recreate - If true, the connection will always be closed and created anew.
	@return {DatabaseConnection} The database connection object.

	History:
	2022-09-12 JER - modify from pushing row columns (i.e. properties) into array concentnate a string
	2022-08-23 JER - Modified the name from executeOperationMSSQL to executeQueryVerifyCode
	2022-08-03 JER - Addedd the IF conditional to evaluate either the pre-existing query_verify_code or executing a different SQL stored procedure or SQL statement
	2022-07-31 JER - Modified executeOperationMSSQL function to evaluate the code_values.code_value and code_values.code_value_description fields
*/
// executeOperation(&apos;executeCachedQuery&apos;,&apos;EXEC query_verify_code(&apos;419199007&apos;)&apos;)
// function executeOperation(operation, expression, parameters) {
function executeQueryVerifyCode(operation, sqlStatement) {
	var scriptName= &apos;executeQueryVerifyCode&apos;;
	var dbConn = getMSSQLDatabaseConnection(&apos;true&apos;);
	var resultArray= new Array();
	var resultList = new Array();
	var attempts = 0;
	var debug= 0;
	// package org.apache.commons.lang3.math.NumberUtils;
	var maxAttempts = org.apache.commons.lang3.math.NumberUtils.toInt($(&apos;sqlDBMaxRetries&apos;) + &apos;&apos;, 0) + 1;

	//while (attempts &lt; maxAttempts) {
	//	attempts++;

		// try {

			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; dbConn.&apos;+operation+&apos;(&apos;+sqlStatement+&apos;)&apos;); 
			}
			var resultOperation= dbConn.executeCachedQuery(sqlStatement);
			var resultSize= resultOperation.size();
			
			// 2022-08-03 JER - Addedd the IF conditional to evaluate either the pre-existing query_verify_code or executing a different SQL stored procedure or SQL statement
			// EXEC query_verify_code &apos;&quot;+observationValue+&quot;&apos;,
			if(sqlStatement.toString().indexOf(&apos;query_verify_code&apos;)&gt;-1) {
				var filterResult= false;
				var operationCnt= 0;
			
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; dbConn.resultOperation size: &apos;+resultSize+&apos; results: &apos;+resultOperation); }

				while (resultOperation.next()) {

					var pra_equivalent_json_section = resultOperation.getString(&apos;pra_equivalent_json_section&apos;);
					var pra_equivalent_field = resultOperation.getString(&apos;pra_equivalent_field&apos;);
					var pra_equivalent_json_section_order = resultOperation.getString(&apos;sort_order&apos;);
					var pra_equivalent_field_code_value = resultOperation.getString(&apos;code_value&apos;);
					var pra_equivalent_field_code_value_description = resultOperation.getString(&apos;code_value_description&apos;);

					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pra_equivalent_json_section: &apos;+pra_equivalent_json_section+&apos; pra_equivalent_field: &apos;+pra_equivalent_field+&apos; pra_equivalent_json_section_order: &apos;+pra_equivalent_json_section_order);
					}
				
					// 2022-07-11 JER - Added evaluation of PRA JSON Section value
					if((typeof(pra_equivalent_json_section)== &apos;undefined&apos;) ||(pra_equivalent_json_section== &apos;NULL&apos;)||(pra_equivalent_json_section== &apos;null&apos;)) {
						if(typeof(pra_equivalent_json_section)== &apos;undefined&apos;) {
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; query failed to return a valid value. As it returned: &apos;+typeof(pra_equivalent_json_section));
							filterResult= true;
						} else {
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; query failed to return a valid value. As it returned: &apos;+pra_equivalent_json_section.toString());
							filterResult= true;
						}
					}
					// 2022-07-11 JER - Added evaluation of PRA JSON field value
					if((typeof(pra_equivalent_field)== &apos;undefined&apos;)||(pra_equivalent_field== &apos;NULL&apos;)||(pra_equivalent_field== &apos;null&apos;)) {
						if(typeof(pra_equivalent_field)== &apos;undefined&apos;) {
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; query failed to return a valid value. As it returned: &apos;+typeof(pra_equivalent_field));
							filterResult= true;
						} else {
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; query failed to return a valid value. As it returned: &apos;+pra_equivalent_field.toString());
							filterResult= true;
						}
					}
					if(filterResult== false) {

						var arr_pra_equivalent_json_section_field= new Array();
						
						arr_pra_equivalent_json_section_field.push(pra_equivalent_json_section);
						arr_pra_equivalent_json_section_field.push(pra_equivalent_field);
						arr_pra_equivalent_json_section_field.push(pra_equivalent_json_section_order);
						arr_pra_equivalent_json_section_field.push(pra_equivalent_field_code_value);
						arr_pra_equivalent_json_section_field.push(pra_equivalent_field_code_value_description);

						// 2022-09-12 JER - modify from pushing row columns (i.e. properties) into array concentnate a string
						var str_pra_equivalent_json_section_field= arr_pra_equivalent_json_section_field.join(&apos;|&apos;); 

						if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;[&apos;+operationCnt+&apos;] query successfully return a valid values : {&apos;+str_pra_equivalent_json_section_field+&apos;}&apos;); }
						// resultArray.push(arr_pra_equivalent_json_section_field);
						resultArray.push(str_pra_equivalent_json_section_field);
					} else {
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos;[&apos;+operationCnt+&apos;] query failed to return a valid value filteredResults: &apos;+filterResults);
					}
					resultList.push(resultArray);
					operationCnt++;
				}
			} // end if 
		/*
		} finally {
			if (dbConn) {
				dbConn.close;
			}
		}
		*/
			
		/*
			if (attempts &gt;= maxAttempts) {
				var errorMessage = &apos;Unable to execute statement.\n&apos;;
				errorMessage += &apos;Expression: &apos; + expression + &apos;\n&apos;;
				if (parameters) {
					errorMessage += &apos;Parameters: &apos; + java.util.Arrays.asList(parameters).toString();
				}
				logger.error(errorMessage, e.javaException);
				throw e;
			}

			java.lang.Thread.sleep(1000);
		}
	} */

	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof: &apos;+typeof(resultList)+&apos; length: &apos;+resultList.length);
	} // end if 

	if (dbConn) { dbConn.close; }
	channelMap.put(&apos;resultList&apos;,resultList);
	// channelMap.put(&apos;resultArray&apos;,resultArray);
	// return resultArray;
	return resultList;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>5ca3bcb3-47d5-4c4d-b325-70cf3b4968e6</id>
        <name>executeSQLStatement</name>
        <revision>14</revision>
        <lastModified>
          <time>1661563946684</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Creates and executes database statements

	@param {Boolean} recreate - If true, the connection will always be closed and created anew.
	@return {DatabaseConnection} The database connection object.

	History:
	2022-08-24 JER - Modified moving the dbConn and the conditional (while or if-then) logic into the same parent if-then code block
	2022-08-23 JER - Modified the name from executeOperationMSSQL to executeSQLStatement
	2022-08-03 JER - Addedd the IF conditional to evaluate either the pre-existing query_verify_code or executing a different SQL stored procedure or SQL statement
	2022-07-31 JER - Modified executeOperationMSSQL function to evaluate the code_values.code_value and code_values.code_value_description fields
*/
// executeOperation(&apos;executeCachedQuery&apos;,&apos;EXEC &apos;query_verify_code(&apos;419199007&apos;)&apos;)
// function executeOperation(operation, expression, parameters) {
function executeSQLStatement(operation, sqlStatement, resultColumns) {
	var scriptName= &apos;executeSQLStatement&apos;;
	var dbConn = getMSSQLDatabaseConnection(&apos;true&apos;);
	var attempts = 0;
	var debug= 0;
	// package org.apache.commons.lang3.math.NumberUtils;
	var maxAttempts = org.apache.commons.lang3.math.NumberUtils.toInt($(&apos;sqlDBMaxRetries&apos;) + &apos;&apos;, 0) + 1;

	//while (attempts &lt; maxAttempts) {
	//	attempts++;

		// try {

			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; dbConn operation: &apos;+operation+&apos; sqlStatement: &apos;+sqlStatement)
			}
			
			if(operation== &apos;SELECT&apos;) {
				var resultOperation= dbConn.executeCachedQuery(sqlStatement);
				var resultSize= resultOperation.size();
				
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; dbConn.resultOperation size: &apos;+resultSize+&apos; results: &apos;+resultOperation); }
				
				while (resultOperation.next()) {
					// if resultColumns contains a string of column headers
					if((typeof(resultColumns)!== &apos;undefined&apos;)&amp;&amp;(resultColumns.toString().length&gt;0)) {
						var i=0;
						var objResultOperation= new Object();
						objResultOperation[&apos;id&apos;]= i;
						for each(column in resultColumns) {
							objResultOperation[column]= resultOperation.getString(i);
							i++;
						} // end for each
				
						var returnResult= objResultOperation;
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; executeCachedQuery specific COLUMNS SELECT returnResult: &apos;+returnResult);
						} // end if
					// no resultColumns either undefined or no column headers string length using SELECT TOP 1 * ...
					} else {
						var returnResult= resultOperation.getString(1);
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; executeCachedQuery SELECT returnResult: &apos;+returnResult);
						} // end if
					} // end if 
				} // end while
				
			} else {
				var resultOperation= dbConn.executeUpdate(sqlStatement);
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; dbConn.resultOperation result: &apos;+resultOperation); }
				
				if(resultOperation) {
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; **** SQL SUCCESS ****: RESULT=&apos; + resultOperation.toString());
					} // end if 
				} else {
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; **** SQL FAILED  ****: RESULT=&apos; + resultOperation.toString());
					} // end if 
				} // end if
				var returnResult= resultOperation;
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; executeUpdate on INSERT returnResult: &apos;+returnResult);
				} // end if
				
			} // end if 

		/*
		} finally {
			if (dbConn) {
				dbConn.close;
			}
		}
		*/
			
		/*
			if (attempts &gt;= maxAttempts) {
				var errorMessage = &apos;Unable to execute statement.\n&apos;;
				errorMessage += &apos;Expression: &apos; + expression + &apos;\n&apos;;
				if (parameters) {
					errorMessage += &apos;Parameters: &apos; + java.util.Arrays.asList(parameters).toString();
				}
				logger.error(errorMessage, e.javaException);
				throw e;
			}

			java.lang.Thread.sleep(1000);
		}
	} */

	if (dbConn) { dbConn.close; }
	return returnResult;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>e0281ac2-137c-41fb-b616-da806c6f676b</id>
        <name>getMSSQLDatabaseConnection</name>
        <revision>28</revision>
        <lastModified>
          <time>1659574033145</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Creates and instantiates database connection from the global channel map, creating a new one if necessary.

	@param {Boolean} recreate - If true, the connection will always be closed and created anew.
	@return {DatabaseConnection} The database connection object.

	History:
	2022-07-31 JER - Modified executeOperationMSSQL function to evaluate the code_values.code_value and code_values.code_value_description fields
*/
function getMSSQLDatabaseConnection(recreate) {
	var scriptName= &apos;getMSSQLDatabaseConnection&apos;;
	var dbConn = $gc(&apos;dbConn&apos;);
	var debug= 0;

	if (!dbConn || recreate) {
		if (dbConn) {
			try {
				dbConn.close(); 	
			} catch (e) {}
		}

		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; fmiMSSQLDriverString= &apos;+$(&apos;fmiMSSQLDriverString&apos;)+&apos; URL= &apos;+$(&apos;fmiMSSQLUrl&apos;)+&apos; userId= &apos;+$(&apos;fmiMSSQLUserId&apos;)+&apos; password= &apos;+$(&apos;fmiMSSQLPassword&apos;)); }
		dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;fmiMSSQLDriverString&apos;), $(&apos;fmiMSSQLUrl&apos;), $(&apos;fmiMSSQLUserId&apos;), $(&apos;fmiMSSQLPassword&apos;));
		$gc(&apos;dbConn&apos;, dbConn);
	}

	return dbConn;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>18ae91f3-476c-4bc0-b5f1-0b89efafd306</id>
        <name>getMySQLDatabaseConnection</name>
        <revision>19</revision>
        <lastModified>
          <time>1657046983417</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Creates and instantiates database connection from the global channel map, creating a new one if necessary.

	@param {Boolean} recreate - If true, the connection will always be closed and created anew.
	@return {DatabaseConnection} The database connection object.
*/
function getMySQLDatabaseConnection(recreate) {
	var scriptName= &apos;getMySQLDatabaseConnection&apos;;
	var dbConn = $gc(&apos;dbConn&apos;);
	var debug= 0;

	if (!dbConn || recreate) {
		if (dbConn) {
			try {
				dbConn.close();
			} catch (e) {}
		}

		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; mysqlDriverString= &apos;+$(&apos;fmiMySqlDriverString&apos;)+&apos; URL= &apos;+$(&apos;fmiMySqlUrl&apos;)+&apos; userId= &apos;+$(&apos;fmiMySqlUserId&apos;)+&apos; password= &apos;+$(&apos;fmiMySqlPassword&apos;));
		dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;fmiMySqlDriverString&apos;), $(&apos;fmiMySqlUrl&apos;), $(&apos;fmiMySqlUserId&apos;), $(&apos;fmiMySqlPassword&apos;));
		$gc(&apos;dbConn&apos;, dbConn);
	}

	return dbConn;
}

// executeOperation(&apos;executeCachedQuery&apos;,&apos;CALL query_verify_code(&apos;419199007&apos;)&apos;)
// function executeOperation(operation, expression, parameters) {
function executeOperationMySQL(operation, selectStatement) {
	var scriptName= &apos;executeOperationMySQL&apos;;
	var dbConn = getMySQLDatabaseConnection();
	var attempts = 0;
	var debug= 0;
	// package org.apache.commons.lang3.math.NumberUtils;
	var maxAttempts = org.apache.commons.lang3.math.NumberUtils.toInt($(&apos;sqlDBMaxRetries&apos;) + &apos;&apos;, 0) + 1;

	//while (attempts &lt; maxAttempts) {
	//	attempts++;

		// try {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; dbConn.&apos;+operation+&apos;(&apos;+selectStatement+&apos;)&apos;);
		var resultOperation= dbConn.executeCachedQuery(selectStatement);
		var resultSize= resultOperation.size();
		
		/*
		try {

			if (parameters) {
				for (var i in parameters) {
					var param = parameters[i];
					if (param instanceof Number) {
						parameters[i] = new java.lang.Integer(param);
					}
				}

				logger.error(&apos;DEBUG:: functionA: &apos;+scriptName+&apos; dbConn[&apos;+operation+&apos;](&apos;+expression+&apos;, java.util.Arrays.asList(&apos;+parameters+&apos;))&apos;);
				// logger.error(&apos;DEBUG:: function: &apos;+scriptName+&apos; dbConn[&apos;+operation+&apos;](&apos;+expression+&apos;, &apos;+parameters+&apos;)&apos;);
				// return dbConn[operation](expression, java.util.Arrays.asList(parameters));
				return dbConn[operation](expression, parameters);
				
			} else {
				
				logger.error(&apos;DEBUG:: functionB: &apos;+scriptName+&apos; operation: &apos;+operation+&apos; expression: &apos;+expression);
				return dbConn[operation](expression);
				
			}
		} catch (e) {
			logger.info(&apos;Error executing statement, checking if valid...&apos;);

			try {
				logger.error(&apos;DEBUG:: dbConn.executeCacheQuery(&apos;+expression+&apos;(&apos;+parameters+&apos;))&apos;);
				dbConn.executeCachedQuery(expression(&apos;&apos;+parameters+&apos;&apos;));
			} catch (e2) {
				logger.info(&apos;Connection invalid, recreating...&apos;);

				try {
					dbConn = getDatabaseConnection(true);
				} catch (e3) {}
			}
			*/

		// } finally {
		if (dbConn) {
			dbConn.close;
		}
		// }
			
		/*
			if (attempts &gt;= maxAttempts) {
				var errorMessage = &apos;Unable to execute statement.\n&apos;;
				errorMessage += &apos;Expression: &apos; + expression + &apos;\n&apos;;
				if (parameters) {
					errorMessage += &apos;Parameters: &apos; + java.util.Arrays.asList(parameters).toString();
				}
				logger.error(errorMessage, e.javaException);
				throw e;
			}

			java.lang.Thread.sleep(1000);
		}
	} */
	return resultSize;
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>fe8e9fc8-0e9e-416d-801e-5e82e0d05bc3</id>
    <name>HL7 to FHIR</name>
    <revision>5</revision>
    <lastModified>
      <time>1705378458644</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description>Convert HL7 to FHIR</description>
    <includeNewChannels>false</includeNewChannels>
    <enabledChannelIds/>
    <disabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>272250ac-d998-41dc-b01d-7721808b3ec6</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
      <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
      <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
      <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
      <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>a1039c2d-a891-43ac-86d8-12ad673542a4</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>43f79c44-ce32-4ed9-8523-ad9dbd82af1c</id>
        <name>convertDateTimeRangeToPeriod</name>
        <revision>1</revision>
        <lastModified>
          <time>1690140205839</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Date/Time Range (DR) data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. 19741225000000&amp;20201001000000)
	@return {object} objPeriod- this contains the HL7 Date/Time Range (DR) element into a single objPeriod JSON object.
	(e.g. 
		&quot;period&quot;: {
			&quot;start&quot;: &quot;1974-12-25&quot;,
			&quot;end&quot;: &quot;2020-10-01&quot;
		}
	)
**/
function convertDateTimeRangeToPeriod(element) {

	var scriptName= &apos;convertDateTimeRangeToPeriod&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objPeriod= new Object();
		var period = {};

		// evaluate List
		var lstDateTimeRange= element.toString().toUpperCase().split(&quot;&amp;&quot;);
		
		// DateTimeRange object contains two elements: Range Start Date/Time and Range End Date/Time
		for(i= 0;i&lt;lstDateTimeRange.length;i++) {
			var subElement= lstDateTimeRange[i].toString();
			
			//  PID-11.12.1 Range Start Date/Time (TS)
			if(i== 0) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;start&quot;;
					period[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG period[&quot;+columnName+&quot;] value: &quot;+columnValue); }
				} // end if 
			} // end if 
			//  PID-11.12.2 Range End Date/Time (TS)
			if(i== 0) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;end&quot;;
					period[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG period[&quot;+columnName+&quot;] value: &quot;+columnValue); }
				} // end if 
			} // end if 
		} // end for 
		
		objPeriod= JSON.stringify(period); // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG period: &quot;+JSON.stringify(period));
			logger.error(scriptName+&apos;::DEBUG objPeriod: &apos;+objPeriod); 
		}
		
		return objPeriod;
	} // end if 
} // end function </code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>08fdafe0-228a-4614-a0b1-38107f3a52ef</id>
        <name>convertExtendedAddressToAddress</name>
        <revision>1</revision>
        <lastModified>
          <time>1690140186443</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: This function converts HL7v2 HAPI formatted Extended Address (XAD) data element to FHIR Address object

	@param {String} element- this contains the raw HL7 element (string) (e.g. 12345 WEST MAIN STREET^^CARMEL^IN^46032)
	@return {object} objAddress- this contains the HL7 Address (XAD) element into a single objAddress JSON object.
	(e.g. 
	{ &quot;address&quot; : [{
		&quot;use&quot; : &quot;home&quot;,
		&quot;type&quot; : &quot;both&quot;,
		&quot;text&quot; : &quot;534 Erewhon St PeasantVille, Rainbow, Vic  3999&quot;,
		&quot;line&quot; : [&quot;534 Erewhon St&quot;],
		&quot;city&quot; : &quot;PleasantVille&quot;,
		&quot;district&quot; : &quot;Rainbow&quot;,
		&quot;state&quot; : &quot;Vic&quot;,
		&quot;postalCode&quot; : &quot;3999&quot;,
		&quot;period&quot; : {
			&quot;start&quot; : &quot;1974-12-25&quot;,
			&quot;stop&quot; : &quot;2020-03-07&quot;
		}
	  },
	  &quot;address&quot; : [{
		&quot;use&quot; : &quot;home&quot;,
		&quot;type&quot; : &quot;both&quot;,
		&quot;text&quot; : &quot;1123 Rockland Ave PeasantVille, Rainbow, Vic  3999&quot;,
		&quot;line&quot; : [&quot;1123 Rockland Ave&quot;],
		&quot;city&quot; : &quot;PleasantVille&quot;,
		&quot;district&quot; : &quot;Rainbow&quot;,
		&quot;state&quot; : &quot;Vic&quot;,
		&quot;postalCode&quot; : &quot;3999&quot;,
		&quot;period&quot; : {
			&quot;start&quot; : &quot;1974-12-25&quot;
		}
	  }]
	})
**/
function convertExtendedAddressToAddress(element) {

	var scriptName= &apos;convertExtendedAddressToAddress&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objAddress= new Object();
		var address = {};

		// evaluate List for Entity Identifier
		var lstExtendedAddress= element.toString().toUpperCase().split(&quot;^&quot;);
		
		// Entity Identity Identifier -&gt; @DataModel
		for(i= 0;i&lt;lstExtendedAddress.length;i++) {
			var subElement= lstExtendedAddress[i].toString();
			
			//  PID-11.1 Street Address (SAD) -&gt; address.line
			if(i== 0) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;line&quot;;
					address[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG address[&quot;+columnName+&quot;] value: &quot;+columnValue); }
				}
			}
			// PID-11.2 Other Designation (ST) -&gt; address.use
			if(i== 1) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;use&quot;;
					address[columnName]= subElement.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG address[&quot;+columnName+&quot;] value: &quot;+columnValue); }
				}
			}
			// PID-11.3 City (ST) -&gt; address.city
			if(i== 2) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;city&quot;;
					address[columnName]= subElement.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG address[&quot;+columnName+&quot;] value: &quot;+columnValue); }
				}
			}
			// PID-11.4 State or Province (ST) -&gt; address.state
			if(i== 3) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;state&quot;;
					address[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG address[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			}
			// PID-11.5 Zip or Postal Code (ST) -&gt; address.postalCode
			if(i== 4) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;postalCode&quot;;
					address[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG address[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			}
			// PID-11.6 Country (ID) - address.country
			if(i== 5) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;country&quot;;
					address[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG address[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			}
			// PID-11.7 Address type (ID) -&gt; address.type
			if(i== 6) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;type&quot;;
					address[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG address[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			}
			/*
			// PID-11.8 Other Geographic Designation (ST)
			if(i== 7) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;OtherGeographicDesignation&quot;;
					address[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG address[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			}
			*/			
			// PID-11.9 County/Parish Code (IS) -&gt; address.district
			if(i== 8) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;district&quot;;
					address[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG address[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			}
			/*
			// PID-11.10 Census Tract (IS)
			if(i== 9) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;CensusTract&quot;;
					address[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG address[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			}
			// PID-11.11 Address Representation Code (IS)
			if(i== 10) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;AddressRepresentationCode&quot;;
					address[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG address[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			}
			*/
			// PID-11.12 Address Validity Range (DR) -&gt; address.period.start or address.period.end
			if(i== 11) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;period&quot;;
					
					// call the convertDateTimeRangeToPeriod function
					var columnValue= convertDateTimeRangeToPeriod(subElement);
					address[columnName]= columnValue;
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG address[&quot;+columnName+&quot;] value: &quot;+columnValue); }
				}
			}
		} // end if 

		objAddress= JSON.stringify(address); // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG address: &quot;+JSON.stringify(address));
			logger.error(scriptName+&apos;::DEBUG objAddress: &apos;+objAddress); 
		}
		
		return objAddress;
	}
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>e71cb874-bea8-4477-9ab5-0f7ae4a9b6f4</id>
    <name>HL7v2 to JSON</name>
    <revision>52</revision>
    <lastModified>
      <time>1705378778880</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description>HL7v2 to Javascript objects Library</description>
    <includeNewChannels>true</includeNewChannels>
    <enabledChannelIds>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>a1039c2d-a891-43ac-86d8-12ad673542a4</string>
      <string>272250ac-d998-41dc-b01d-7721808b3ec6</string>
      <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
      <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
      <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
      <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
      <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>727b91fb-5d82-437c-aa92-6eba252ef290</id>
        <name>convertAddressToJSON</name>
        <revision>3</revision>
        <lastModified>
          <time>1689982257847</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Extended Address (XAD) data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. 12345 WEST MAIN STREET^^CARMEL^IN^46032)
	@return {object} objAddress- this contains the HL7 Address (XAD) element into a single objAddress JSON object.
	(e.g. 
	{ Address {
		&quot;StreetAddress&quot;=&quot;12345 WEST MAIN STREET&quot;,
		&quot;OtherDesignation&quot;=&quot;RX&quot;,
		&quot;City&quot;=&quot;CARMEL&quot;,
		&quot;StateOrProvince&quot;=&quot;IN&quot;,
		&quot;ZipOrPostalCode&quot;=&quot;46032&quot;,
		&quot;Country&quot;=&quot;&quot;,
		&quot;AddressType&quot;=&quot;&quot;,
		&quot;OtherGeographicDesignation&quot;=&quot;&quot;,
		&quot;CountyParishCode&quot;=&quot;&quot;,
		&quot;CensusTract&quot;=&quot;&quot;,
		&quot;AddressRepresentationCode&quot;=&quot;&quot;,
		&quot;AddressValidityRange&quot;=&quot;&quot;
	})
**/
function convertAddressToJSON(element) {

	var scriptName= &apos;convertAddressToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objAddress= new Object();
		var meta = {};

		// evaluate List for Entity Identifier
		var lstExtendedAddress= element.toString().toUpperCase().split(&quot;^&quot;);
		
		// Entity Identity Identifier -&gt; @DataModel
		for(i= 0;i&lt;lstExtendedAddress.length;i++) {
			var subElement= lstExtendedAddress[i].toString();
			
			//  PID-11.1 Street Address (SAD)
			if(i== 0) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;StreetAddress&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
				}
			}
			// PID-11.2 Other Designation (ST)
			if(i== 1) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;OtherDesignation&quot;;
					meta[columnName]= subElement.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
				}
			}
			// PID-11.3 City (ST)
			if(i== 2) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;City&quot;;
					meta[columnName]= subElement.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
				}
			}
			// PID-11.4 State or Province (ST)	
			if(i== 3) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;StateOrProvince&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			}
			// PID-11.5 Zip or Postal Code (ST)
			if(i== 4) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;ZipOrPostalCode&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			}
			// PID-11.6 Country (ID)
			if(i== 5) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;Country&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			}
			// PID-11.7 Address type (ID)
			if(i== 6) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;AddressType&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			}
			// PID-11.8 Other Geographic Designation (ST)
			if(i== 7) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;OtherGeographicDesignation&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			} 
			// PID-11.9 County/Parish Code (IS)
			if(i== 8) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;CountyParishCode&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			}
			// PID-11.10 Census Tract (IS)
			if(i== 9) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;CensusTract&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			}
			// PID-11.11 Address Representation Code (IS)
			if(i== 10) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;AddressRepresentationCode&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			}
			// PID-11.12 Address Validity Range (DR)
			if(i== 11) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;AddressValidityRange&quot;;
					
					// call the convertDateTimeRangeToJSON function
					var columnValue= convertDateTimeRangeToJSON(subElement);
					meta[columnName]= columnValue;
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
				}
			}
		} // end if 

		objAddress= JSON.stringify(meta); // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objAddress: &apos;+objAddress); 
		}
		
		return objAddress;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>5122dea6-6b6a-4720-993b-668f5e936666</id>
        <name>convertCodedElementToJSON</name>
        <revision>6</revision>
        <lastModified>
          <time>1689376323180</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Coded Element (CE) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. F-11380^CREATININE^I9^2148-5^CREATININE^LN)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objCodedElement - this contains the HL7  Coded Element (CE) element into a single objExtendedTelecommunicationNumber JSON object.
	(e.g. 
		{ &quot;Order Control Code Reason&quot; {
			&quot;Identifier&quot;=&quot;F-11380&quot;,
			&quot;Text&quot;=&quot;QAM&quot;,
			&quot;NameOfCodingSystem&quot;=&quot;X3&quot;,
			&quot;AlternateIdentifier&quot;=&quot;&quot;,
			&quot;AlternateText&quot;=&quot;&quot;,
			&quot;NameOfAlternateCodingSystem&quot;=&quot;&quot;
		})
	History:
	2022-08-26 JER - Substitute space character with no character
*/
function convertCodedElementToJSON(element) {

	var scriptName= &apos;convertCodedElementToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { 
		logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); 
	}
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objCodedElement= new Object();
		var meta = {};

		var i= 0;
	
		// Person Location -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Identifier&quot;;
					meta[columnName]= child.toString();

					// 2022-08-26 JER - Substitute space character with no character
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString().replace(/\s/,&apos;&apos;)); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Text&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameOfCodingSystem&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AlternateIdentifier&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString().replace(/\s/,&apos;&apos;)); }
				}
			}
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AlternateText&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameOfAlternateCodingSystem&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objCodedElement= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objCodedElement); 
		}
		
		return objCodedElement;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>5915bb31-3bed-4e68-9443-e5d7951a71c0</id>
        <name>convertCodedWithExceptionsToJSON</name>
        <revision>2</revision>
        <lastModified>
          <time>1661554929100</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Coded With Exceptions (CWE) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. F-11380^CREATININE^I9^2148-5^CREATININE^LN)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objCodedWithExceptions - this contains the HL7  Coded With Exceptions (CWE) element into a single objCodedWithExceptions JSON object.
	(e.g. 
		{ &quot;Repeat Pattern Code&quot; {
			&quot;Identifier&quot;=&quot;F-11380&quot;,
			&quot;Text&quot;=&quot;QAM&quot;,
			&quot;NameOfCodingSystem&quot;=&quot;X3&quot;,
			&quot;AlternateIdentifier&quot;=&quot;&quot;,
			&quot;AlternateText&quot;=&quot;&quot;,
			&quot;NameOfAlternateCodingSystem&quot;=&quot;&quot;,
			&quot;CodingSystemVersionId&quot;=&quot;&quot;,
			&quot;AlternateCodingSystemVersionId&quot;=&quot;&quot;,
			&quot;OriginalText&quot;=&quot;&quot;
		})

		&quot;repeatPattern&quot; : {&#xd;
      		&quot;RepeatPatternCode&quot; : {&#xd;
        			&quot;Identifier&quot; : &quot;1D  &quot;&#xd;
      		},&#xd;
      		&quot;CalendarAlignment&quot; : &quot;1&quot;&#xd;
    		},
	Components: &lt;identifier (ST)&gt; ^ &lt;text (ST)&gt; ^ &lt;name of coding system (IS)&gt; ^ &lt;alternate identifier (ST)&gt; ^ &lt;alternate text (ST)&gt; ^ &lt;name of alternate coding system (IS)&gt; ^ &lt;coding system version ID (ST)&gt; ^ alternate coding system version ID (ST)&gt; ^ &lt;original text (ST)&gt;
	History:
	2022-08-26 JER - Modify to remove all space characters from an element value using replace(/\s+/g,&apos;&apos;)
*/
function convertCodedWithExceptionsToJSON(element) {

	var scriptName= &apos;convertCodedWithExceptionsToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objCodedWithExceptions= new Object();
		var meta = {};

		var i= 0;
	
		// Person Location -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Identifier&quot;;
					// 2022-08-26 JER - Modify to remove all space characters from an element value using replace(/\s+/g,&apos;&apos;)
					meta[columnName]= child.toString().replace(/\s+/g,&apos;&apos;);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Text&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameOfCodingSystem&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AlternateIdentifier&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AlternateText&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameOfAlternateCodingSystem&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;CodingSystemVersionId&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AlternateCodingSystemVersionId&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;OriginalText&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objCodedWithExceptions= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objCodedWithExceptions); 
		}
		
		return objCodedWithExceptions;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>96326b8a-12da-4785-9685-dc6d3bd2f771</id>
        <name>convertCompositeQuantityTimingToJSON</name>
        <revision>4</revision>
        <lastModified>
          <time>1694378900897</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Composite Quantity Timing (CQT) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. 1^QAM^X3)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objCompositeQuantityTiming - this contains the HL7 Extended Composite Number and Name for Persons element into a single objCompositeQuantityTiming JSON object.
	(e.g. 
		{ &quot;Quantity/Timing&quot; {
			&quot;Quantity&quot;=&quot;1&quot;,
			&quot;Interval&quot;=&quot;QAM&quot;,
			&quot;Duration&quot;=&quot;X3&quot;
		})
	@history
	2023-02-01 JER - Modified from using JSON.stringify to NOT using the JSON.stringify on the objCompositeQuantityTiming object	
	2022-12-27 JER - Modified from calling convertCompositeQuantityWithUnitsToJSON(orc[&apos;ORC.7&apos;]) to child
*/
function convertCompositeQuantityTimingToJSON(element) {

	var scriptName= &apos;convertCompositeQuantityTimingToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objCompositeQuantityTiming= new Object();
		var meta = {};

		var i= 0;
	
		// Entity Identity Identifier -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Quantity&quot;;
					// meta[columnName]= child.toString();
					// 2022-12-27 JER - Modified from calling convertCompositeQuantityWithUnitsToJSON(orc[&apos;ORC.7&apos;]) to child
					// meta[columnName]= convertCompositeQuantityWithUnitsToJSON(orc[&apos;ORC.7&apos;]);
					meta[columnName]= convertCompositeQuantityWithUnitsToJSON(child);
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Interval&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Duration&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;StartDateTime&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;EndDateTime&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Priority&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Condition&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Text&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Conjunction&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;OrderingSequence&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 9) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;OccurrenceDuration&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 10) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;TotalOccurrences&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		// 2023-02-01 JER - Modified from using JSON.stringify to NOT using the JSON.stringify on the objCompositeQuantityTiming object
		// objCompositeQuantityTiming= JSON.stringify(meta); // convert to JSON
		objCompositeQuantityTiming= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta)); 
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objCompositeQuantityTiming); 
		}
		
		return objCompositeQuantityTiming;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>66341d47-5033-4494-bb36-eecec23a8771</id>
        <name>convertCompositeQuantityWithUnitsToJSON</name>
        <revision>2</revision>
        <lastModified>
          <time>1672172567785</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Extended Composite Number (CQ) To JSON data element values converted into JSON object for reference
	ScriptName: convertCompositeQuantityWithUnitsToJSON(element, elementName)
	@param {String} element- this contains the raw HL7 element (string) (e.g. 100^200 mcg)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objCompositeQuantityWithUnits - this contains the HL7 Extended Composite Number and Name for Persons element into a single objCompositeQuantityWithUnits JSON object.
	(e.g. 
		{ &quot;Quantity&quot; {
			&quot;Quantity&quot;=&quot;QS1&quot;,
			&quot;Units&quot;=&quot;QS1&quot;
		})
*/
function convertCompositeQuantityWithUnitsToJSON(element) {

	var scriptName= &apos;convertCompositeQuantityWithUnitsToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objCompositeQuantityWithUnits= new Object();
		var meta = {};

		var i= 0;
	
		// Entity Identity Identifier -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Quantity&quot;;
					meta[columnName]= child.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Units&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertCodedElementToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}	
			i++;
		} // end if  

		objCompositeQuantityWithUnits= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objCompositeQuantityWithUnits); 
		}
		
		return objCompositeQuantityWithUnits;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>269f8819-08ff-4995-bd4b-014320eeb034</id>
        <name>convertDateTimeRangeToJSON</name>
        <revision>1</revision>
        <lastModified>
          <time>1694384113853</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Date/Time Range (DR) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 Date/Time Range (DR) element (string) (e.g. 20140410094429^20140410214429.3+000)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objDateTimeRange - this contains the HL7 Date/Time Range (DR) with percision into a single objDateTimeRange JSON object.
	(e.g. 
		{ &quot;DateTimeRange&quot; {
			&quot;RangeStartDateTime&quot;=&quot;&quot;, (TS)
			&quot;RangeEndDateTime&quot;=&quot;&quot; (TS)
		})
*/
function convertDateTimeRangeToJSON(element) {

	var scriptName= &apos;convertDateTimeRangeToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objDateTimeRange= new Object();
		var meta = {};

		var i= 0;
	
		for each (child in element.children()) {
			/* RangeStartDateTime (TS) */
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Time&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertTimestampToJSON(child.toString());
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* RangeStopDateTime (TS) */
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Degree of Precision&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertTimestampToJSON(child.toString());
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objDateTimeRange= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objDateTimeRange: &apos;+objDateTimeRange);
		}
		
		return objDateTimeRange;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>b0908de4-5a69-4219-a3f5-0d86b53af607</id>
        <name>convertEntityIdentifierToJSON</name>
        <revision>3</revision>
        <lastModified>
          <time>1694378900938</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Entity Identifier (EI) data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. 06401191^RX^06401191140410^QS1RX)
	@return {object} objEntityIdentifier JSON - this contains the HL7 Entity Identity element into a single objEntityIdentifier JSON object.
	(e.g. 
	{ PlacerOrderNumber {
		&quot;EntityIdentifier&quot;=&quot;06401191&quot;,
		&quot;NamespaceId&quot;=&quot;RX&quot;,
		&quot;UniversalId&quot;=&quot;06401191140410&quot;,
		&quot;UniversalIdType&quot;=&quot;QS1RX&quot;
	})
*/
function convertEntityIdentifierToJSON(element) {

	var scriptName= &apos;convertEntityIdentifierToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objEntityIdentifier= new Object();
		var meta = {};

		var i= 0;
	
		// Entity Identity Identifier -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;EntityIdentifier&quot;;
					meta[columnName]= child.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NamespaceId&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}	
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;UniversalId&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;UniversalIdType&quot;;
					meta[columnName]= child.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
					
				}
			}
			i++;
		} // end if  

		objEntityIdentifier= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objEntityIdentifier); 
		}
		
		return objEntityIdentifier;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>954ffe4f-50d7-43ab-9f48-ecd85d9a4317</id>
        <name>convertExtendedAddressToJSON</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911274142</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Extended Address (XAD) data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. 12345 WEST MAIN STREET^^CARMEL^IN^46032)
	@return {object} objExtendedAddress- this contains the HL7 Extended Address (XAD) element into a single objExtendedAddress JSON object.
	(e.g. PatientAddress {
		&quot;StreetAddress&quot;=&quot;12345 WEST MAIN STREET&quot;,
		&quot;OtherDesignation&quot;=&quot;RX&quot;,
		&quot;City&quot;=&quot;CARMEL&quot;,
		&quot;StateOrProvince&quot;=&quot;IN&quot;,
		&quot;ZipOrPostalCode&quot;=&quot;46032&quot;
	})
**/
function convertExtendedAddressToJSON(element) {

	var scriptName= &apos;convertExtendedAddressToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objExtendedAddress= new Object();
		var meta = {};
		var i= 0;
	
		// Entity Identity Identifier -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;StreetAddress&quot;;
					meta[columnName]= child.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;OtherDesignation&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}	
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;City&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;StateOrProvince&quot;;
					meta[columnName]= child.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
					
				}
			}
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;ZipOrPostalCode&quot;;
					meta[columnName]= child.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
					
				}
			}
			i++;
		} // end if 

		objExtendedAddress= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objExtendedAddress); 
		}

		channelMap.put(&apos;StreetAddress&apos;,objExtendedAddress)
		return objExtendedAddress;	
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>7c6e78fd-4713-45f2-bfe6-97906527cba7</id>
        <name>convertExtendedCompositeIDNumberAndNameToJSON</name>
        <revision>2</revision>
        <lastModified>
          <time>1672175146029</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**	
	Desc: This function retrieves HL7v2 HAPI formatted convert Extended Composite ID Number And Name (XCN) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. QS1^QS1^QS1^^^^^^QS1)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objExtendedCompositeIDNumberAndName - this contains the HL7 Extended Composite ID Number and Name for Persons element into a single objExtendedCompositeIDNumberAndName JSON object.
	(e.g. 
		{ &quot;Entered By&quot; {
			&quot;IdNumber&quot;=&quot;QS1&quot;,
			&quot;FamilyName&quot;=&quot;QS1&quot;,
			&quot;GivenName&quot;=&quot;QS1&quot;
			&quot;SecondGivenName&quot;=&quot;&quot;,
			&quot;Suffix&quot;=&quot;&quot;,
			&quot;Prefix&quot;=&quot;&quot;,
			&quot;Degree&quot;=&quot;&quot;,
			&quot;SourceTable&quot;=&quot;&quot;,
			&quot;AssigningAuthority&quot;=&quot;QS1&quot;,
			&quot;NameTypeCode&quot;=&quot;&quot;,
			&quot;IdentifierCheckDigit&quot;=&quot;&quot;,
			&quot;CheckDigitScheme&quot;=&quot;&quot;,
			&quot;IdentifierTypeCode&quot;=&quot;&quot;,
			&quot;AssigningFacility&quot;=&quot;&quot;,
			&quot;NameRepresentationCode&quot;=&quot;&quot;,
			&quot;NameContext&quot;=&quot;&quot;,
			&quot;NameValidityRange&quot;=&quot;&quot;,
			&quot;EffectiveDate&quot;=&quot;&quot;,
			&quot;ExpirationDate&quot;=&quot;&quot;,
			&quot;ProfessionalSuffix&quot;=&quot;&quot;,
			&quot;AssigningJurisdiction&quot;=&quot;&quot;,
			&quot;AssigningAgencyOrDepartment&quot;=&quot;&quot;
		})
**/
function convertExtendedCompositeIDNumberAndNameToJSON(element) {

	var scriptName= &apos;convertExtendedCompositeIDNumberAndNameToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objExtendedCompositeIDNumberAndName= new Object();
		var meta = {};
		var i= 0;
	
		// Entity Identity Identifier -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;IdNumber&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertCompositeQuantityWithUnitsToJSON(child);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;FamilyName&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;GivenName&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;SecondGivenName&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Suffix&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Prefix&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Degree&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;SourceTable&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AssigningAuthority&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 9) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameTypeCode&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 10) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;IdentifierCheckDigit&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 11) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;CheckDigitScheme&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			
			if(i== 12) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;IdentifierTypeCode&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertCompositeQuantityWithUnitsToJSON(orc[&apos;ORC.7&apos;]);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 13) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AssigningFacility&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 14) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameRepresentationCode&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 15) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameContext&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 16) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameValidityRange&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 17) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameContext&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 18) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameValidityRange&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 19) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameAssemblyOrder&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 20) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;EffectiveDate&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 21) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;ExpirationDate&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 22) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;ProfessionalSuffix&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 23) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AssigningJurisdiction&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 24) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AssigningAgencyOrDepartment&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objExtendedCompositeIDNumberAndName= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(objExtendedCompositeIDNumberAndName));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objExtendedCompositeIDNumberAndName); 
		}
		
		return objExtendedCompositeIDNumberAndName;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>d1bd73e7-bada-4e38-91e5-1a6e0dd2956d</id>
        <name>convertExtendedCompositeIDWithCheckDigitToJSON</name>
        <revision>2</revision>
        <lastModified>
          <time>1694380766122</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**	
	Desc: This function retrieves HL7v2 HAPI formatted convert Extended Composite ID With Check Digit (CX) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. QS1^QS1^QS1^^^^^^QS1)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objExtendedCompositeIDWithCheckDigit - this contains the HL7 Extended Composite ID With Check Digit for Persons element into a single objExtendedCompositeIDWithCheckDigit JSON object.
	(e.g. 
		{ &quot;Entered By&quot; {
			&quot;IdNumber&quot;=&quot;&quot;, (ST)
			&quot;CheckDigit&quot;=&quot;&quot;, (ST)
			&quot;CheckDigitScheme&quot;=&quot;&quot; (ID)
			&quot;AssigningAuthority&quot;=&quot;&quot;, (HD)
			&quot;IdentifierTypeCode&quot;=&quot;&quot;, (ID)
			&quot;AssigningFacility&quot;=&quot;&quot;, (HD)
			&quot;EffectiveDate&quot;=&quot;&quot;, (DT)
			&quot;ExpirationDate&quot;=&quot;&quot;, (DT)
			&quot;AssigningJurisdiction&quot;=&quot;&quot;, (CWE)
			&quot;AssigingAgencyOrDepartment&quot;=&quot;&quot; (CWE)
		})
**/
function convertExtendedCompositeIDWithCheckDigitToJSON(element) {

	var scriptName= &apos;convertExtendedCompositeIDWithCheckDigitToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objExtendedCompositeIDWithCheckDigit= new Object();
		var meta = {};
		var i= 0;
	
		// Entity Identity Identifier -&gt; @DataModel
		for each (child in element.children()) {
			
			/* IdNumber (ST) */
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;IdNumber&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertCodedWithExceptionsToJSON(child);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* CheckDigit (ST) */
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;CheckDigit&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* CheckDigitScheme (ID) */
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;CheckDigitScheme&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* AssigningAuthority (HD) */
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AssigningAuthority&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertHierarchicDesignatorToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* IdentifierTypeCode (ID) */
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;IdentifierTypeCode&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* AssigningFacility (HD) */
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AssigningFacility&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertHierarchicDesignatorToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* EffectiveDate (DT) */
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;EffectiveDate&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* ExpirationDate (DT) */
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;ExpirationDate&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* AssigningJurisdiction (CWE)*/
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AssigningJurisdiction&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertCodedWithExceptionsToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* AssigingAgencyOrDepartment (CWE) */
			if(i== 9) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AssigningAgencyOrDepartment&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertCodedWithExceptionsToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objExtendedCompositeIDWithCheckDigit= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(objExtendedCompositeIDWithCheckDigit));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objExtendedCompositeIDWithCheckDigit); 
		}
		
		return objExtendedCompositeIDWithCheckDigit;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>5571d630-1764-4bdd-9d45-a5148991c281</id>
        <name>convertExtendedCompositeNameAndIdentificationNumberForOrganizationsToJSON</name>
        <revision>1</revision>
        <lastModified>
          <time>1694388680210</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**	
	Desc: This function retrieves HL7v2 HAPI formatted convert Extended Composite Name (XON) And Identification Number For Organizations to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. QS1^QS1^QS1^^^^^^QS1)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objExtendedCompositeNameAndIdentificationNumberForOrganizations - this contains the HL7 Extended Composite Name And Identification Number For Organizations  element into a single objExtendedCompositeNameAndIdentificationNumberForOrganizations JSON object.
	(e.g. 
		{ &quot;ExtendedCompositeNameAndIdentificationNumberForOrganizations&quot; {
			&quot;OrganizationName&quot;=&quot;&quot;, (ST)
			&quot;OrganizationNameTypeCode&quot;=&quot;&quot;, (IS)
			&quot;IdNumber&quot;=&quot;&quot; (NM)
			&quot;CheckDigit&quot;=&quot;&quot;, (NM)
			&quot;CheckDigitScheme&quot;=&quot;&quot;, (ID)
			&quot;AssigningAuthority&quot;=&quot;&quot;, (HD)
			&quot;IdentifierTypeCode&quot;=&quot;&quot;, (ID)
			&quot;AssigningFacility&quot;=&quot;&quot;, (HD)
			&quot;NameRepresentationCode&quot;=&quot;&quot;, (ID)
			&quot;OrganizationIdentifier&quot;=&quot;&quot; (ST)
		})
**/
function convertExtendedCompositeNameAndIdentificationNumberForOrganizationsToJSON(element) {

	var scriptName= &apos;convertExtendedCompositeNameAndIdentificationNumberForOrganizationsToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objExtendedCompositeNameAndIdentificationNumberForOrganizations= new Object();
		var meta = {};
		var i= 0;
	
		// Entity Identity Identifier -&gt; @DataModel
		for each (child in element.children()) {
			
			/* OrganizationName (ST) */
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;OrganizationName&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertCodedWithExceptionsToJSON(child);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* OrganizationNameTypeCode (IS) */
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;OrganizationNameTypeCode&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* IdNumber (NM) */
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;IdNumber&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* CheckDigit (NM) */
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;CheckDigit&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertHierarchicDesignatorToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* CheckDigitScheme (ID) */
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;CheckDigitScheme&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* AssigningAuthority (HD) */
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AssigningAuthority&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertHierarchicDesignatorToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* IdentifierTypeCode (ID) */
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;IdentifierTypeCode&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* AssigningFacility (HD) */
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AssigningFacility&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertHierarchicDesignatorToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* NameRepresentationCode (ID) */
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameRepresentationCode&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* OrganizationIdentifier (ST) */
			if(i== 9) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;OrganizationIdentifier&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertCodedWithExceptionsToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objExtendedCompositeNameAndIdentificationNumberForOrganizations= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(objExtendedCompositeNameAndIdentificationNumberForOrganizations));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objExtendedCompositeNameAndIdentificationNumberForOrganizations); 
		}
		
		return objExtendedCompositeNameAndIdentificationNumberForOrganizations;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>6222c84b-dd50-45d3-87a0-cc2cf996c79a</id>
        <name>convertExtendedPersonNameToJSON</name>
        <revision>2</revision>
        <lastModified>
          <time>1694383104715</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**	
	Desc: This function retrieves HL7v2 HAPI formatted convert Extended Person Name (XPN) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. QS1^QS1^QS1^^^^^^QS1)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objExtendedPersonName - this contains the HL7 Extended Person Name element into a single objExtendedPersonName JSON object.
	(e.g. 
		{ &quot;ExtendedPersonName&quot; {
			&quot;FamilyName&quot;=&quot;&quot;, (FN)
			&quot;GivenName&quot;=&quot;&quot;, (ST)
			&quot;SecondAndFurtherGivenNamesOrInitials&quot;=&quot;&quot; (ST)
			&quot;Suffix&quot;=&quot;&quot;, (ST)
			&quot;Prefix&quot;=&quot;&quot;, (ST)
			&quot;Degree&quot;=&quot;&quot;, (IS)
			&quot;NameTypeCode&quot;=&quot;&quot;, (ID)
			&quot;NameRepresentationCode&quot;=&quot;&quot;, (ID)
			&quot;NameContext&quot;=&quot;&quot;, (CE)
			&quot;NameValidityRange&quot;=&quot;&quot;, (DR)
			&quot;NameAssemblyOrder&quot;=&quot;&quot;, (ID)
			&quot;EffectiveDate&quot;=&quot;&quot;, (TS)
			&quot;ExpirationDate&quot;=&quot;&quot;, (TS)
			&quot;ProfessionalSuffix&quot;=&quot;&quot; (ST)
		})
**/
function convertExtendedPersonNameToJSON(element) {

	var scriptName= &apos;convertExtendedPersonNameToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objExtendedPersonName= new Object();
		var meta = {};
		var i= 0;
	
		// Entity Identity Identifier -&gt; @DataModel
		for each (child in element.children()) {
			
			/* FamilyName (FN) */
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;FamilyName&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertCodedWithExceptionsToJSON(child);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* GivenName (ST) */
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;GivenName&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* SecondAndFurtherGivenNamesOrInitials (ST) */
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;SecondAndFurtherGivenNamesOrInitials&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* Suffix (ST) */
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Suffix&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertHierarchicDesignatorToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* Prefix (ST) */
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Prefix&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* Degree (IS) */
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Degree&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertHierarchicDesignatorToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* Name Type Code (ID) */
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameTypeCode&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* Name Representation Code (ID) */
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameRepresentationCode&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* Name Context (CE)*/
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameContext&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertCodedElementToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* Name Validity Range (DR) */
			if(i== 9) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameValidityRange&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertCodedWithExceptionsToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* Name Assembly Order (ID) */
			if(i== 10) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameAssemblyOrder&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertCodedWithExceptionsToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* EffectiveDate (DT) */
			if(i== 11) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;EffectiveDate&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* ExpirationDate (DT) */
			if(i== 12) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;ExpirationDate&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* Professional Suffix (ST) */
			if(i== 12) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;ProfessionalSuffix&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objExtendedPersonName= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(objExtendedPersonName));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objExtendedPersonName); 
		}
		
		return objExtendedPersonName;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>89eb9367-ff7d-4f5f-afe1-acc0f225ae09</id>
        <name>convertExtendedTelecommunicationNumberToJSON</name>
        <revision>3</revision>
        <lastModified>
          <time>1694393556884</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**	
	Desc: This function retrieves HL7v2 HAPI formatted convert Extended Telecommunication Number (XTN) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. QS1^QS1^QS1^^^^^^QS1)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objExtendedTelecommunicationNumber - this contains the HL7 Extended Telecommunication Number (XTN) element into a single objExtendedTelecommunicationNumber JSON object.
	(e.g. 
		{ &quot;ExtendedTelecommunicationNumber&quot; {
			&quot;TelephoneNumber=&quot;&quot;, (ST)
			&quot;TelecommunicationUseCode&quot;=&quot;&quot;, (ID)
			&quot;TelecommunicationEquipmentType&quot;=&quot;&quot; (ID)
			&quot;EmailAddress&quot;=&quot;&quot;, (ST)
			&quot;CountryCode&quot;=&quot;&quot;, (NM)
			&quot;AreaCityCode&quot;=&quot;&quot;, (NM)
			&quot;LocalNumber&quot;=&quot;&quot;, (NM)
			&quot;Extension&quot;=&quot;&quot;, (NM)
			&quot;AnyText&quot;=&quot;&quot;, (ST)
			&quot;ExtensionPrefix&quot;=&quot;&quot;, (ST)
			&quot;SpeedDialCode&quot;=&quot;&quot;, (ST)
			&quot;UnformattedTelephoneNumber&quot;=&quot;&quot; (ST)
		})
**/
function convertExtendedTelecommunicationNumberToJSON(element) {

	var scriptName= &apos;convertExtendedTelecommunicationNumberToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objExtendedTelecommunicationNumber= new Object();
		var meta = {};
		var i= 0;
	
		// Entity Identity Identifier -&gt; @DataModel
		for each (child in element.children()) {
			
			/* TelephoneNumber (ST) */
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;TelephoneNumber&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertCodedWithExceptionsToJSON(child);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* TelecommunicationUseCode (ID) */
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;TelecommunicationUseCode&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* TelecommunicationEquipmentType (ID) */
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;TelecommunicationEquipmentType&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* EmailAddress (ST) */
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;EmailAddress&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertHierarchicDesignatorToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* CountryCode (NM) */
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;CountryCode&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* AreaCityCode (NM) */
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AreaCityCode&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertHierarchicDesignatorToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* LocalNumber (NM) */
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;LocalNumber&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* Extension (NM) */
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Extension&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* AnyText (ST)*/
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AnyText&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* ExtensionPrefix (ST) */
			if(i== 9) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;ExtensionPrefix&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* SpeedDialCode (ST) */
			if(i== 10) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;SpeedDialCode&quot;;
					meta[columnName]= child.toString();

					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* UnformattedTelephoneNumber (ST) */
			if(i== 11) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;UnformattedTelephoneNumber&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objExtendedTelecommunicationNumber= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(objExtendedTelecommunicationNumber));
			logger.error(scriptName+&apos;::DEBUG objExtendedTelecommunicationNumber: &apos;+objExtendedTelecommunicationNumber); 
		}
		
		return objExtendedTelecommunicationNumber;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>84877442-9c27-4550-a334-178c7ae94d70</id>
        <name>convertHierarchicDesignatorToJSON</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911274205</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Hierarchic Designator (HD) To JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. 100^200 mcg)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objHierarchicDesignator - this contains the HL7 Hierarchic Designator (HD) element into a single objHierarchicDesignator JSON object.
	(e.g. 
		{ &quot;Facility&quot; {
			&quot;NamespaceId&quot;=&quot;QS1&quot;,
			&quot;UniversalId&quot;=&quot;QS1&quot;,
			&quot;UniversalIdType&quot;=&quot;&quot;
		})
*/
function convertHierarchicDesignatorToJSON(element) {

	var scriptName= &apos;convertHierarchicDesignatorToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objHierarchicDesignator= new Object();
		var meta = {};

		var i= 0;
	
		// Entity Identity Identifier -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NamespaceId&quot;;
					meta[columnName]= child.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;UniversalId&quot;;
					meta[columnName]= child.toString();
					//meta[columnName]= convertCodedElementToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}	
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;UniversalIdType&quot;;
					meta[columnName]= child.toString();
					//meta[columnName]= convertCodedElementToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objHierarchicDesignator= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objHierarchicDesignator); 
		}
		
		return objHierarchicDesignator;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>653ffee7-2a91-44bc-9500-4d082e926903</id>
        <name>convertLocationAddressVariationToJSON</name>
        <revision>2</revision>
        <lastModified>
          <time>1691001755256</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	
	Desc: This function retrieves HL7v2 HAPI formatted Location with Address Variation (LA1) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. 1^QAM^X3)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objLocationAddressVariation - this contains the HL7 Location with Address Variation (LA1) element into a single objLocationAddressVariation JSON object.
	(e.g. 
		{ &quot;objDeliverToLocation&quot; {
			&quot;PointOfCare&quot;=&quot;1&quot;,
			&quot;Room&quot;=&quot;QAM&quot;,
			&quot;Bed&quot;=&quot;X3&quot;,
			&quot;Facility&quot;=&quot;&quot;,
			&quot;LocationStatus&quot;=&quot;&quot;,
			&quot;PatientLocationType&quot;=&quot;&quot;,
			&quot;Building&quot;=&quot;&quot;,
			&quot;Floor&quot;=&quot;&quot;,
			&quot;Address&quot;=&quot;&quot;
		})
*/
function convertLocationAddressVariationToJSON(element) {

	var scriptName= &apos;convertLocationAddressVariationToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objLocationAddressVariation= new Object();
		var meta = {};

		var i= 0;
	
		// Person Location -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;PointOfCare&quot;;
					meta[columnName]= child.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Room&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Bed&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Facility&quot;;
					//meta[columnName]= child.toString();
					meta[columnName]= convertHierarchicDesignatorToJSON(child);
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;LocationStatus&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;PatientLocationType&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Building&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Floor&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Address&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertAddressToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objLocationAddressVariation= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objLocationAddressVariation); 
		}
		
		return objLocationAddressVariation;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>d716b4ff-f64a-465f-9a83-1cf246612af6</id>
        <name>convertPersonLocationToJSON</name>
        <revision>2</revision>
        <lastModified>
          <time>1672677351163</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Person Location (PL) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. 1^QAM^X3)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objPersonLocation - this contains the HL7 Person Location element into a single objPersonLocation JSON object.
	https://hapifhir.github.io/hapi-hl7v2/v25/apidocs/ca/uhn/hl7v2/model/v25/datatype/PL.html&#xd;	https://profiles.ihe.net/ITI/TF/Volume2/ch-N.html#N.4
	(e.g. 
		{ &quot;Quantity/Timing&quot; {
			&quot;Quantity&quot;=&quot;1&quot;,
			&quot;Interval&quot;=&quot;QAM&quot;,
			&quot;Duration&quot;=&quot;X3&quot;
		})
*/
function convertPersonLocationToJSON(element) {

	var scriptName= &apos;convertPersonLocationToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objPersonLocation= new Object();
		var meta = {};

		var i= 0;
	
		// Person Location -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;PointOfCare&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertCompositeQuantityWithUnitsToJSON(orc[&apos;ORC.7&apos;]);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Room&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Bed&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Facility&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;LocationStatus&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;PersonLocationType&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Building&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Floor&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;LocationDescription&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 9) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;ComprehensiveLocationIdentifier&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 10) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AssigningAuthorityForLocation&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objPersonLocation= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objPersonLocation); 
		}
		
		return objPersonLocation;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>ef788d5e-5a92-470a-b2a0-06bd415276b4</id>
        <name>convertQuantityTimingToJSON</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911274059</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Timing Quantity (TQ) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. F-11380^CREATININE^I9^2148-5^CREATININE^LN)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objTimingQuantity - this contains the HL7 Timing Quantity (TQ) element into a single objTimingQuantity JSON object.
	(e.g. 
		{ &quot;QuantityTiming&quot; {
			&quot;Quantity&quot;=&quot;F-11380&quot;,
			&quot;Interval&quot;=&quot;QAM&quot;,
			&quot;Duration&quot;=&quot;X3&quot;,
			&quot;StartDateTime&quot;=&quot;&quot;,
			&quot;EndDateTime&quot;=&quot;&quot;,
			&quot;Priority&quot;=&quot;&quot;,
			&quot;Condition&quot;=&quot;&quot;,
			&quot;Text&quot;=&quot;&quot;,
			&quot;Conjunction&quot;=&quot;&quot;,
			&quot;OrderSequencing&quot;=&quot;&quot;,
			&quot;OccurrenceDuration&quot;=&quot;&quot;,
			&quot;TotalOccurrences&quot;=&quot;&quot;
		})
	Components: &lt;Quantity (CQ)&gt; ^ &lt;Interval (RI)&gt; ^ &lt;Duration (ST)&gt; ^ &lt;Start Date/Time (TS)&gt; ^ &lt;End Date/Time (TS)&gt; ^ &lt;Priority (ST)&gt; ^ &lt;Condition (ST)&gt; ^ &lt;Text (TX)&gt; ^ &lt;Conjunction (ID)&gt; ^ &lt;Order Sequencing (OSD)&gt; ^ &lt;Occurrence Duration (CE)&gt; ^ &lt;Total Occurrences (NM)&gt;
**/
function convertQuantityTimingToJSON(element) {

	var scriptName= &apos;convertQuantityTimingToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objTimingQuantity= new Object();
		var meta = {};

		var i= 0;
	
		// Person Location -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Quantity&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertCompositeQuantityWithUnitsToJSON(child);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Interval&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertRepeatIntervalToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Duration&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;StartDateTime&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertTimestampToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;EndDateTime&quot;;
					//meta[columnName]= child.toString();
					meta[columnName]= convertTimestampToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Priority&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Condition&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Text&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Conjunction&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 9) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;OrderSequencing&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 10) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;OccurrenceDuration&quot;;
					//meta[columnName]= child.toString();
					meta[columnName]= convertCodedElementToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 11) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;TotalOccurrences&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objTimingQuantity= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objTimingQuantity); 
		}
		
		return objTimingQuantity;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>ba57aac0-1dd8-47e4-aab6-9ebcca1267c0</id>
        <name>convertRepeatIntervalToJSON</name>
        <revision>2</revision>
        <lastModified>
          <time>1661554644541</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Repeat Interval (RI) To JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. 100^200 mcg)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objRepeatInterval - this contains the HL7 Repeat Interval (RI) element into a single objRepeatInterval JSON object.
	(e.g. 
		{ &quot;Interval&quot; {
			&quot;Repeat Pattern&quot;=&quot;QS1&quot;,
			&quot;Explicit Time Interval&quot;=&quot;QS1&quot;
		})
	History:
	2022-08-26 JER - trim any space characters from the element value - child.toString().replace(/\s+/g,&apos;&apos;);
*/
function convertRepeatIntervalToJSON(element) {

	var scriptName= &apos;convertRepeatIntervalToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objRepeatInterval= new Object();
		var meta = {};

		var i= 0;
	
		// Entity Identity Identifier -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Repeat Pattern&quot;;
					// 2022-08-26 JER - trim any space characters from the element value - child.toString().replace(/\s+/g,&apos;&apos;);
					meta[columnName]= child.toString().replace(/\s+/g,&apos;&apos;);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Explicit Time Interval&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}	
			i++;
		} // end if  

		objRepeatInterval= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objRepeatInterval); 
		}
		
		return objRepeatInterval;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>db8d6d68-6e76-44c2-ad1b-132b2fe9ef08</id>
        <name>convertRepeatPatternToJSON</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911273520</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Repeat Pattern (RPT) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. QAM&amp;Every morning at the institution specified time&amp;HL7xxx^HD^00^11^1^d^Y)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objRepeatPattern - this contains the HL7 Repeat Pattern (RPT) element into a single objRepeatPattern JSON object.
	(e.g. 
		{ &quot;Repeat Pattern&quot; {
			&quot;RepeatPatternCode&quot;=&quot;&quot;,
			&quot;CalendarAlignment&quot;=&quot;&quot;,
			&quot;PhaseRangeBeginValue&quot;=&quot;X3&quot;,
			&quot;PhaseRangeEndValue&quot;=&quot;&quot;,
			&quot;PeriodQuantity&quot;=&quot;&quot;,
			&quot;PeriodUnits&quot;=&quot;&quot;,
			&quot;InstitutionSpecifiedTime&quot;=&quot;&quot;,
			&quot;Event&quot;=&quot;&quot;,
			&quot;EventOffsetQuantity&quot;=&quot;&quot;,
			&quot;EventOffsetUnits&quot;=&quot;&quot;,
			&quot;GeneralTimingSpecification&quot;=&quot;&quot;
		})
	Components: &lt;Repeat Pattern Code (CWE)&gt; &amp; &lt;Calendar Alignment (ID)&gt; &amp; &lt;Phase Range Begin Value (NM)&gt; &amp; &lt;Phase Range End Value (NM)&gt; &amp; &lt;Period Quantity (NM)&gt; &amp; &lt;Period Units (CWE)&gt; &amp; &lt;Institution Specified Time (ID)&gt; &amp; &lt;Event (ID)&gt; &amp; &lt;Event Offset Quantity (NM)&gt; &amp; &lt;Event Offset Units (CWE)&gt; &amp; &lt;General Timing Specification (GTS)&gt;
*/
function convertRepeatPatternToJSON(element) {

	var scriptName= &apos;convertRepeatPatternToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objRepeatPattern= new Object();
		var meta = {};

		var i= 0;
	
		// Person Location -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;RepeatPatternCode&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertCodedWithExceptionsToJSON(child);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;CalendarAlignment&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;PhaseRangeBeginValue&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;PhaseRangeEndValue&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;PeriodQuantity&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;PeriodUnits&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;InstitutionSpecifiedTime&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Event&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;EventOffsetQuantity&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 9) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;EventOffsetUnits&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 10) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;GeneralTimingSpecification&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objRepeatPattern= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objRepeatPattern); 
		}
		
		return objRepeatPattern;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>3ad0a3bf-2d63-4d12-afc1-47e53ed22771</id>
        <name>convertSpecimenSourceToJSON</name>
        <revision>4</revision>
        <lastModified>
          <time>1694379477052</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Specimen Source (SPS) data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) for Specimen Source SPS element
	@return {object} objSpecimenSource JSON - this contains the HL7 Specimen Source SPS element into a single objSpecimenSource JSON object.
	@created:  2022-12-30 JER
	(e.g. 
		{ &quot;SpecimenSource&quot; {
			&quot;SpecimenSourceNameorCode&quot;=&quot;&quot;, (CWE)
			&quot;Additives&quot;=&quot;&quot;, (CWE)
			&quot;SpecimenCollectionMethod&quot;=&quot;&quot;, (TX)
			&quot;BodySize&quot;=&quot;&quot;, (CWE)
			&quot;SiteModifier&quot;=&quot;&quot;, (CWE)
			&quot;CollectionMethodModifierCode&quot;=&quot;&quot;, (CWE)
			&quot;SpecimenRole&quot;=&quot;&quot; (CWE)
		})
	Components: &lt;SpecimenSourceNameorCode (CWE)&gt; &amp; &lt;Additives (CWE)&gt; &amp; &lt;SpecimenCollectionMethod (TX)&gt; &amp; &lt;BodySize (CWE)&gt; &amp; &lt;SiteModifier (CWE)&gt; &amp; &lt;CollectionMethodModifierCode (CWE)&gt; &amp; &lt;SpecimenRole (CWE)&gt;

*/
function convertSpecimenSourceToJSON(element) {

	var scriptName= &apos;convertSpecimenSourceToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objSpecimenSource= new Object();
		var meta = {};

		var i= 0;
	
		// Specimen Source  -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				// Specimen Source Code or Name (CWE)
				if(child.toString().length&gt; 0) {
					var columnName= &quot;SpecimenSourceCode&quot;;
					// call convertCodedWithExceptionsToJSON
					meta[columnName]= convertCodedWithExceptionsToJSON(child.toString());
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+convertCodedWithExceptionsToJSON(child.toString())); }
				}
			}
			if(i== 1) {
				// Additives (CWE)
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Additives&quot;;
					// call convertCodedWithExceptionsToJSON
					meta[columnName]= convertCodedWithExceptionsToJSON(child.toString());
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+convertCodedWithExceptionsToJSON(child.toString())); }
				}
			}	
			if(i== 2) {
				// Specimen Collection Method (TX)
				if(child.toString().length&gt; 0) {
					var columnName= &quot;SpecimenCollectionMethod&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					// Body Site (CWE)
					var columnName= &quot;BodySite&quot;;
					// call convertCodedWithExceptionsToJSON
					meta[columnName]= convertCodedWithExceptionsToJSON(child.toString());
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+convertCodedWithExceptionsToJSON(child.toString())); }
					
				}
			}
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					// Site Modifier (CWE)
					var columnName= &quot;SiteModifier&quot;;
					// call convertCodedWithExceptionsToJSON
					meta[columnName]= convertCodedWithExceptionsToJSON(child.toString());
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+convertCodedWithExceptionsToJSON(child.toString())); }
					
				}
			}
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					// Collection Method Modifier Code (CWE)
					var columnName= &quot;CollectionMethodModifierCode&quot;;
					// call convertCodedWithExceptionsToJSON
					meta[columnName]= convertCodedWithExceptionsToJSON(child.toString());
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+convertCodedWithExceptionsToJSON(child.toString())); }
					
				}
			}
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					// Specimen Role (CWE)
					var columnName= &quot;SpecimenRole&quot;;
					// call convertCodedWithExceptionsToJSON
					meta[columnName]= convertCodedWithExceptionsToJSON(child.toString());
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+convertCodedWithExceptionsToJSON(child.toString())); }
					
				}
			}
			i++;
		} // end if  

		objSpecimenSource= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objSpecimenSource); 
		}
		
		return objSpecimenSource;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>5b278cf9-4a13-499d-9db7-485f8c0001a1</id>
        <name>convertStreetAddressToJSON</name>
        <revision>1</revision>
        <lastModified>
          <time>1689981400347</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Street Address (SAD) data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. 348 W Duarte road&amp;Duarte&amp;348)
	@return {object} objAddress- this contains the HL7 Street Address (SAD) element into a single objAddress JSON object.
	(e.g. 
	{ Address {
		&quot;Street or Mailing Address&quot;=&quot;348 W Duarte road&quot;,
		&quot;Street Name&quot;=&quot;Duarte&quot;,
		&quot;Dwelling Number&quot;=&quot;348&quot;
	})
**/
function convertStreetAddressToJSON(element) {

	var scriptName= &apos;convertStreetAddressToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objStreetAddress= new Object();
		var meta = {};

		// evaluate List
		var lstStreetAddress= element.toString().toUpperCase().split(&quot;^&quot;);
		
		// Entity Identity Identifier -&gt; @DataModel
		for(i= 0;i&lt;lstStreetAddress.length;i++) {
			var subElement= lstStreetAddress[i].toString();
			
			//  PID-11.1.1 Street Or Mailing Address (ST)
			if(i== 0) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;StreetOrMailingAddress&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
				}
			}

			//  PID-11.1.2 Street Name (ST)
			if(i== 0) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;StreetName&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
				}
			}
			
			//  PID-11.1.3 Dwelling Number (ST)
			if(i== 0) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;DwellingNumber&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
				}
			}

		} // end for 
		
		objStreetAddress= JSON.stringify(meta); // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objStreetAddress: &apos;+objStreetAddress); 
		} // end if 
		
		return objStreetAddress;
	} // end if 
	
} // end function </code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>3ca8d7ec-6b08-4a29-b2ef-c187a7b3e495</id>
        <name>convertTimestampToJSON</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911273674</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Timestamp (TS) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 Timestamp (TS) element (string) (e.g. 20140410094429^20140410214429.3+000)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objTimestamp - this contains the HL7 Timestamp (TS) with percision into a single objTimestamp JSON object.
	(e.g. 
		{ &quot;Date/Time of Transaction&quot; {
			&quot;Time&quot;=&quot;20140410094429&quot;,
			&quot;Degree of Precision&quot;=&quot;20140410214429.3+000&quot;
		})
*/
function convertTimestampToJSON(element) {

	var scriptName= &apos;convertTimestampToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objTimestamp= new Object();
		var meta = {};

		var i= 0;
	
		// Timestamp with Degree of Precision -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Time&quot;;
					meta[columnName]= child.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Degree of Precision&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objTimestamp= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objTimestamp);
		}
		
		return objTimestamp;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>0df5c531-fb4e-4483-80f7-54b9b8b6eab6</id>
        <name>convertTimingQuantityToJSON</name>
        <revision>1</revision>
        <lastModified>
          <time>1701312132836</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Timing Quantity (TQ) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. F-11380^CREATININE^I9^2148-5^CREATININE^LN)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objTimingQuantity - this contains the HL7 Timing Quantity (TQ) element into a single objTimingQuantity JSON object.
	(e.g. 
		{ &quot;QuantityTiming&quot; {
			&quot;Quantity&quot;=&quot;F-11380&quot;,
			&quot;Interval&quot;=&quot;QAM&quot;,
			&quot;Duration&quot;=&quot;X3&quot;,
			&quot;StartDateTime&quot;=&quot;&quot;,
			&quot;EndDateTime&quot;=&quot;&quot;,
			&quot;Priority&quot;=&quot;&quot;,
			&quot;Condition&quot;=&quot;&quot;,
			&quot;Text&quot;=&quot;&quot;,
			&quot;Conjunction&quot;=&quot;&quot;,
			&quot;OrderSequencing&quot;=&quot;&quot;,
			&quot;OccurrenceDuration&quot;=&quot;&quot;,
			&quot;TotalOccurrences&quot;=&quot;&quot;
		})
	Components: &lt;Quantity (CQ)&gt; ^ &lt;Interval (RI)&gt; ^ &lt;Duration (ST)&gt; ^ &lt;Start Date/Time (TS)&gt; ^ &lt;End Date/Time (TS)&gt; ^ &lt;Priority (ST)&gt; ^ &lt;Condition (ST)&gt; ^ &lt;Text (TX)&gt; ^ &lt;Conjunction (ID)&gt; ^ &lt;Order Sequencing (OSD)&gt; ^ &lt;Occurrence Duration (CE)&gt; ^ &lt;Total Occurrences (NM)&gt;
**/
function convertTimingQuantityToJSON(element) {

	var scriptName= &apos;convertTimingQuantityToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objTimingQuantity= new Object();
		var meta = {};

		var i= 0;
	
		// Person Location -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Quantity&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertCompositeQuantityWithUnitsToJSON(child);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Interval&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertRepeatIntervalToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Duration&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;StartDateTime&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertTimestampToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;EndDateTime&quot;;
					//meta[columnName]= child.toString();
					meta[columnName]= convertTimestampToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Priority&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Condition&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Text&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Conjunction&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 9) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;OrderSequencing&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 10) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;OccurrenceDuration&quot;;
					//meta[columnName]= child.toString();
					meta[columnName]= convertCodedElementToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 11) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;TotalOccurrences&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objTimingQuantity= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objTimingQuantity); 
		}
		
		return objTimingQuantity;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>6a03a975-7cff-46a4-b41b-2dd6107d8f20</id>
        <name>hl7_get_patient_identifier</name>
        <revision>2</revision>
        <lastModified>
          <time>1669746065076</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse HL7v2 message PID segment the PID.3 patient identifier element and return a Javascript Array object contain PID.3.1, PID.3.4 and PID.3.5
	
	Filename: hl7_get_patient_identifier
	@param {String} pid object - This will contains the XML representation of the HL7v2 PID segment desired PID identifier element for the patient identifier (e.g. PID-2, PID-3, PID-4)
	@return {String} return - Return an array of patient identifier object containing the patient identifier (PID-3.1), patient identifier domain (PID-3.4), and patient identifier assigning authority (PID-3.5)
	E.G.   
		&lt;PID.3&gt;&lt;PID.3.1&gt;1112223233&lt;/PID.3.1&gt;&lt;PID.3.2&gt;&lt;/PID.3.2&gt;&lt;PID.3.3&gt;&lt;/PID.3.3&gt;&lt;PID.3.4&gt;BJC&lt;/PID.3.4&gt;&lt;PID.3.5&gt;2.16.840.35553.312.331.1112223233&lt;/PID.3.5&gt;&lt;/PID.3&gt;
		&lt;PID.3&gt;&lt;PID.3.1&gt;99823204&lt;/PID.3.1&gt;&lt;PID.3.2&gt;&lt;/PID.3.2&gt;&lt;PID.3.3&gt;&lt;/PID.3.3&gt;&lt;PID.3.4&gt;EPIC&lt;/PID.3.4&gt;&lt;PID.3.5&gt;2.16.840.13663.23.17&lt;/PID.3.5&gt;&lt;/PID.3&gt;
	History:
	
*/
function hl7_get_patient_identifier(pid) {

	var scriptName= &apos;hl7_get_patient_identifier&apos;
	var debug= 0;
	var arrPatientIdentifiers= new Array();
	
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pid typeof: &apos;+typeof(pid)+&apos; length: &apos;+pid.length()+&apos; pid identifier: &apos;+pid); } 
	
	for(var i= 0;i&lt;pid.length();i++) {
		
		var objPatientIdentifier= new Object();
		objPatientIdentifier.patientIdentifier= pid[i][&apos;PID.3.1&apos;].toString();
		objPatientIdentifier.patientIdentifierDomain= pid[i][&apos;PID.3.4&apos;].toString();
		objPatientIdentifier.identifierTypeCode= pid[i][&apos;PID.3.5&apos;].toString();
	
		if(debug&gt;0) { 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pid[&apos;+i+&apos;] typeof: &apos;+typeof(pid[i])+&apos; length: &apos;+pid[i].length+&apos; pid identifier: &apos;+pid[i]); 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pid[&apos;+i+&apos;] patientIdentifier: &apos;+objPatientIdentifier.patientIdentifier); 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pid[&apos;+i+&apos;] patientIdentifierDomain: &apos;+objPatientIdentifier.patientIdentifierDomain); 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pid[&apos;+i+&apos;] identifierTypeCode: &apos;+objPatientIdentifier.identifierTypeCode); 			
		} 
		
		arrPatientIdentifiers.push(objPatientIdentifier);
	} // end for
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; return arrPatientIdentifiers: &apos;+JSON.stringify(arrPatientIdentifiers)); }
	
	return arrPatientIdentifiers;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>e44a9587-5cf2-42d5-98ff-2ed41a1528e9</id>
        <name>json_dg1_diagnosis</name>
        <revision>3</revision>
        <lastModified>
          <time>1694378426486</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse HL7v2 message DG1 segment and return a Javascript object
	
	Filename: json_dg1_diagnosis.js
	@param {String} orc - This will contains the XML representation of the HL7v2 DG1 egment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 DG1 segment
	History:
	2023-09-09 JER - Created mirroring the json_patient_allergy code template as DG1 has similiar limited content provided from QS1 Pharmacy system as AL1 segment
*/
function json_dg1_diagnosis(dg1) {

	var scriptName= &apos;json_dg1_diagnosis&apos;;
	var debug= 0;

	var objDiagnosis= {};
	
	// DG1.1 - set Id
	if(dg1[&apos;DG1.1&apos;].toString().length&gt;0) objDiagnosis.setId= dg1[&apos;DG1.1&apos;][&apos;DG1.1.1&apos;].toString();

	// DG1.2 - Diagnosis Coding Method
	if(dg1[&apos;DG1.2&apos;].toString().length&gt;0) objDiagnosis.diagnosisCodingMethod= dg1[&apos;DG1.2&apos;][&apos;DG1.2.1&apos;].toString();
	
	// DG1.3 - Diagnosis Code (identifier(ST)^text(ST)^name of codeSystem(ID)^alternate Id(ST)^alternate text(ST)^name of alternate codeSystem(ID) )
	if(dg1[&apos;DG1.3&apos;].toString().length&gt;0) objDiagnosis.diagnosisCode= convertCodedElementToJSON(dg1[&apos;DG1.3&apos;]);
	
	// DG1.4 - Diagnosis Description (ST)
	if(dg1[&apos;DG1.4&apos;].toString().length&gt;0) objDiagnosis.diagnosisDescription= dg1[&apos;DG1.4&apos;][&apos;DG1.4.1&apos;].toString();
	
	// DG1.5 - Diagnosis Date/Time (TS)
	if(dg1[&apos;DG1.5&apos;].toString().length&gt;0) objDiagnosis.diagnosisDateTime= dg1[&apos;DG1.5&apos;][&apos;DG1.5.1&apos;].toString();
	
	// DG1.6 - Diagnosis Type (IS)
	if(dg1[&apos;DG1.6&apos;].toString().length&gt;0) objDiagnosis.diagnosisType= dg1[&apos;DG1.6&apos;].toString();
	
	// DG1.7 - Major Diagnosis Category (identifier(ST)^text(ST)^name of codeSystem(ID)^alternate Id(ST)^alternate text(ST)^name of alternate codeSystem(ID) )
	if(dg1[&apos;DG1.7&apos;].toString().length&gt;0) objDiagnosis.majorDiagnosisCategory= convertCodedElementToJSON(dg1[&apos;DG1.7&apos;]);
	
	// DG1.8 - Diagnosis Related Group (identifier(ST)^text(ST)^name of codeSystem(ID)^alternate Id(ST)^alternate text(ST)^name of alternate codeSystem(ID) )
	if(dg1[&apos;DG1.8&apos;].toString().length&gt;0) objDiagnosis.diagnosisRelatedGroup= convertCodedElementToJSON(dg1[&apos;DG1.8&apos;]);
	
	// DG1.9 - DRG Approval Indicator (ID)
	if(dg1[&apos;DG1.9&apos;].toString().length&gt;0) objDiagnosis.drgApprovalIndicator= dg1[&apos;DG1.9&apos;].toString();
	
	// DG1.10 - DRG Grouper Review Code (IS)
	if(dg1[&apos;DG1.10&apos;].toString().length&gt;0) objDiagnosis.drgGrouperReviewCode= dg1[&apos;DG1.10&apos;].toString();
	
	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objDiagnosis= &apos;+objDiagnosis);
		logger.error(scriptName+&apos;:DEBUG:: stringify(objDiagnosis)= &apos;+JSON.stringify(objDiagnosis));
	}
	
	channelMap.put(&apos;Diagnosis&apos;,JSON.stringify(objDiagnosis));
	return objDiagnosis;
	
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>ba484bc7-89c7-4ef6-bb85-5ebc30a44b43</id>
        <name>json_in1_insurance</name>
        <revision>2</revision>
        <lastModified>
          <time>1694390963657</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse HL7v2 message IN1 segment and return a Javascript object
	
	Filename: json_in1_insurance.js
	@param {String} orc - This will contains the XML representation of the HL7v2 IN1 egment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 IN1 segment
	History:
	2023-09-09 JER - Created mirroring the json_dg1_diagnosis code template as IN1 has similiar limited content provided from QS1 Pharmacy system as IN1 segment
*/
function json_in1_insurance(in1) {

	var scriptName= &apos;json_in1_insurance&apos;;
	var debug= 0;

	var objInsurance= {};
	
	// IN1.1 - set Id (SI)
	if(in1[&apos;IN1.1&apos;].toString().length&gt;0) objInsurance.setId= in1[&apos;IN1.1&apos;][&apos;IN1.1.1&apos;].toString();

	// IN1.2 - Insurance Plan Id (CE)
	if(in1[&apos;IN1.2&apos;].toString().length&gt;0) objInsurance.insurancePlanId= convertCodedElementToJSON(in1[&apos;IN1.2&apos;]);
	
	// IN1.3 - Insurance Company Id (CX)
	if(in1[&apos;IN1.3&apos;].toString().length&gt;0) objInsurance.insuranceCompanyId= convertExtendedCompositeIDWithCheckDigitToJSON(in1[&apos;IN1.3&apos;]);
	
	// IN1.4 - Insurance Company Name (XCN)
	if(in1[&apos;IN1.4&apos;].toString().length&gt;0) objInsurance.insuranceCompanyName= convertExtendedCompositeIDNumberAndNameToJSON(in1[&apos;IN1.4&apos;]);
	
	// IN1.5 - Insurance Company Address (XAD)
	if(in1[&apos;IN1.5&apos;].toString().length&gt;0) objInsurance.insuranceCompanyAddress= convertExtendedAddressToJSON(in1[&apos;IN1.5&apos;]);
	
	// IN1.6 - Insurance Co Contact Person (XPN)
	if(in1[&apos;IN1.6&apos;].toString().length&gt;0) objInsurance.insuranceCoContactPerson= convertExtendedPersonNameToJSON(in1[&apos;IN1.6&apos;]);
	
	// IN1.7 - Insurance Co Phone Number (XTN)
	if(in1[&apos;IN1.7&apos;].toString().length&gt;0) objInsurance.insuranceCoPhoneNumber= convertExtendedTelecommunicationNumberToJSON(in1[&apos;IN1.7&apos;]);
	
	// IN1.8 - Group Number (ST)
	if(in1[&apos;IN1.8&apos;].toString().length&gt;0) objInsurance.groupNumber= in1[&apos;IN1.8&apos;][&apos;IN1.8.1&apos;].toString();
	
	// IN1.9 - Group Name (XCN)
	if(in1[&apos;IN1.9&apos;].toString().length&gt;0) objInsurance.groupName= convertExtendedCompositeIDNumberAndNameToJSON(in1[&apos;IN1.9&apos;]);
	
	// IN1.10 - Insured Group Employee ID (CX)
	if(in1[&apos;IN1.10&apos;].toString().length&gt;0) objInsurance.insuredGroupEmployeeId= convertExtendedCompositeIDWithCheckDigitToJSON(in1[&apos;IN1.10&apos;]);
	
	// IN1.11 - Insured Group Employee Name (XON)
	if(in1[&apos;IN1.11&apos;].toString().length&gt;0) objInsurance.insuredGroupEmployeeId= convertExtendedCompositeNameAndIdentificationNumberForOrganizationsToJSON(in1[&apos;IN1.11&apos;]);
	
	// IN1.12 - Plan Effective Date (DT)
	if(in1[&apos;IN1.12&apos;].toString().length&gt;0) objInsurance.planEffectiveDate= in1[&apos;IN1.12&apos;][&apos;IN1.12.1&apos;].toString();
	
	// IN1.13 - Plan Expiration Date (DT)
	if(in1[&apos;IN1.13&apos;].toString().length&gt;0) objInsurance.planExpirationDate= in1[&apos;IN1.13&apos;][&apos;IN1.13.1&apos;].toString();
	
	// IN1.17 - Insured Relationship to Patient (CE)
	if(in1[&apos;IN1.17&apos;].toString().length&gt;0) objInsurance.insuredRelationshipToPatient= in1[&apos;IN1.17&apos;][&apos;IN1.17.1&apos;].toString();
	
	// IN1.20 - Assignment of Benefits (IS)
	if(in1[&apos;IN1.20&apos;].toString().length&gt;0) objInsurance.assignmentOfBenefits= in1[&apos;IN1.20&apos;][&apos;IN1.20.1&apos;].toString();
	
	// IN1.22 - Coordination of Benefit Priority (ST)
	if(in1[&apos;IN1.22&apos;].toString().length&gt;0) objInsurance.benefitPriority= in1[&apos;IN1.22&apos;][&apos;IN1.22.1&apos;].toString();
	
	// IN1.36 - Policy Number (ST)
	if(in1[&apos;IN1.22&apos;].toString().length&gt;0) objInsurance.policyNumber= in1[&apos;IN1.36&apos;][&apos;IN1.36.1&apos;].toString();
	
	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objInsurance= &apos;+objInsurance);
		logger.error(scriptName+&apos;:DEBUG:: stringify(objInsurance)= &apos;+JSON.stringify(objInsurance));
	}
	
	channelMap.put(&apos;Diagnosis&apos;,JSON.stringify(objInsurance));
	return objInsurance;
	
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>7c6d63d8-bf55-4204-b727-6aaa157c962d</id>
        <name>json_mrg_patient</name>
        <revision>3</revision>
        <lastModified>
          <time>1657634910685</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse HL7v2 MRG segment and return a Javascript object

	@param {String} mrg - This will contains the XML representation of the HL7v2 MRG segment
	
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 MRG segment
	History:
	2022-02-28 jer - Modified to include the MRG-7.1 lastName and MRG-7.2 firstName properties to merge object
	
*/
function json_mrg_patient(mrg) {

	var scriptName= &apos;json_mrg_patient&apos;;
	/*
	logger.error(scriptName+&apos;:DEBUG:: mrg= &apos;+mrg);
	*/
	var mergePatient= {};
	
	for each(mrg1 in mrg[&apos;MRG.1&apos;]) {
			
		var pidNum = mrg1[&apos;MRG.1.1&apos;].toString();
		var entity = mrg1[&apos;MRG.1.4&apos;].toString();
		// 2022-02-22 jer - verify if PID.3.5 exists if not is undefined
		if(mrg1[&apos;MRG.1.5&apos;].toString().length&gt;0) {
			var IDCode = mrg1[&apos;MRG.1.5&apos;].toString();
		}
			
		//logger.error(scriptName+&apos;:DEBUG:: typeof(IDCode)= &apos;+typeof(IDCode));

		// 2022-02-22 jer - verify if undefined or defined with value of MRN
		if((typeof(IDCode)== &apos;undefined&apos;) || (IDCode.indexOf(&apos;MRN&apos;)&gt;-1)) {
			if(entity != null) {
				mergePatient.mrn= pidNum;
				mergePatient.mrnDomain= entity;
			}
		}
		else if (IDCode.indexOf(&quot;MR&quot;)&gt;-1) {
			if(entity != null) {
				mergePatient.mpi= pidNum;
				mergePatient.mpiDomain= entity;
			}
		}
	}

	// 2022-02-28 jer - Modified to include the MRG-7.1 lastName and MRG-7.2 firstName properties to merge object
	mergePatient.firstName= 	mrg[&apos;MRG.7&apos;][&apos;MRG.7.2&apos;].toString();
	mergePatient.middleName= mrg[&apos;MRG.7&apos;][&apos;MRG.7.3&apos;].toString();
	mergePatient.lastName= 	mrg[&apos;MRG.7&apos;][&apos;MRG.7.1&apos;].toString();
		
	// logger.error(scriptName+&apos;:DEBUG:: mergePatient= &apos;+JSON.stringify(mergePatient));
	return mergePatient;
	
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>be99b75f-95fa-4cb3-9ed8-982d2a573878</id>
        <name>json_msh_header</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911274231</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse HL7v2 MSH header segment and return a Javascript object

	@param {String} msh - This will contains the XML representation of the HL7v2 MSH header segment
	@param {String} patient - This will contains the XML representation of the Javascript patient object
	
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 MSH segment
	History:
**/
function json_msh_header(msh) {

	var scriptName= &apos;json_msh_header&apos;;
	var debug= 0;
	if(debug&gt;0) { logger.error(scriptName+&apos;:DEBUG:: msh= &apos;+msh); }

	var header= {};

	header.sendingApplication= 		msh[&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString();
	header.sendingFacility= 			msh[&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString();
	header.receivingApplication= 		msh[&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString();
	header.receivingFacility= 		msh[&apos;MSH.6&apos;][&apos;MSH.6.1&apos;].toString();
	header.messageDateTime=			msh[&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
	header.messageType= 			msh[&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString();
	header.eventType= 				msh[&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();
	header.messageControlId=			msh[&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
	header.processingId=			msh[&apos;MSH.11&apos;][&apos;MSH.11.1&apos;].toString();
	header.versionId=				msh[&apos;MSH.12&apos;][&apos;MSH.12.1&apos;].toString();

	if(debug&gt;0) { logger.error(scriptName+&apos;:DEBUG:: header= &apos;+JSON.stringify(header)); }
	return header;

}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>4acd1786-cc12-4432-9c61-085fcd057109</id>
        <name>json_obr_observation_request</name>
        <revision>4</revision>
        <lastModified>
          <time>1672850688701</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse HL7v2 message OBR segment and return a Javascript object
	
	Filename: json_obr_observation_request.js
	@param {String} obr - This will contains the XML representation of the HL7v2 OBR segment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 OBR segment
	History:
	2023-01-04 JER - Modified to evaluate the OBR.2.1 field to determine the type of order as order_type
	
*/
function json_obr_observation_request(obr) {

	var scriptName= &apos;json_obr_observation_request&apos;;
	var debug= 0;
	/*
	logger.error(scriptName+&apos;:DEBUG:: obr= &apos;+obr);;
	*/
	var objObservationRequest= {};
	
	// OBR.1 - set Id (ID)
	// if(obr[&apos;OBR.1&apos;].toString().length&gt;0) objObservationRequest.setId= convertTimingQuantityToJSON(obr[&apos;OBX.1&apos;]);
	if(obr[&apos;OBR.1&apos;].toString().length&gt;0) objObservationRequest.setId= obr[&apos;OBR.1&apos;][&apos;OBR.1.1&apos;].toString();

	// OBR.2 - Placer Order Number (EI)
	// if(obr[&apos;OBR.2&apos;].toString().length&gt;0) objObservationRequest.placerOrderNumber= convertCodedElementToJSON(obr[&apos;OBR.2&apos;]);
	if(obr[&apos;OBR.2&apos;].toString().length&gt;0) objObservationRequest.placerOrderNumber= convertEntityIdentifierToJSON(obr[&apos;OBR.2&apos;]);

	// 2023-01-04 JER - Modified to evaluate the OBR.2.1 field to determine the type of order as order_type
	if(obr[&apos;OBR.2&apos;][&apos;OBR.2.1&apos;].toString()== &apos;RAD&apos;) {
		objObservationRequest.orderType= &apos;Radiology&apos;;
	} else if(obr[&apos;OBR.2&apos;][&apos;OBR.2.1&apos;].toString()== &apos;LAB&apos;) {
		objObservationRequest.orderType= &apos;Laboratory&apos;	
	} else if(obr[&apos;OBR.2&apos;][&apos;OBR.2.1&apos;].toString()== &apos;LAB-SPM&apos;) {
		objObservationRequest.orderType= &apos;Laboratory-Specimen&apos;;
	} else {
		objObservationRequest.orderType= &apos;Common Order&apos;;
	}
	
	// OBR.3 - Filler Order Number (EI)
	// CE - Observation Identifier (identifier^text^name of codeSystem^alternate Id^alternate text^name of alternate codeSystem)
	if(obr[&apos;OBR.3&apos;].toString().length&gt;0) objObservationRequest.fillerOrderNumber= convertEntityIdentifierToJSON(obr[&apos;OBR.3&apos;]);
	
	// OBR.4 - Universal Order Service Identifier (CE)
	if(obr[&apos;OBR.4&apos;].toString().length&gt;0) objObservationRequest.orderServiceIdentifier= convertCodedElementToJSON(obr[&apos;OBR.4&apos;]);
	
	// OBR.5 - Priority (ID)
	if(obr[&apos;OBR.5&apos;].toString().length&gt;0) objObservationRequest.priorityIdentifier= obr[&apos;OBR.5&apos;][&apos;OBR.5.1&apos;].toString();
	
	// OBR.6 - Requested DateTime (TS)
	if(obr[&apos;OBR.6&apos;].toString().length&gt;0) objObservationRequest.requestedDateTime= convertTimestampToJSON(obr[&apos;OBR.6&apos;]);
	
	// OBR.7 - Observed DateTime (TS)
	if(obr[&apos;OBR.7&apos;].toString().length&gt;0) objObservationRequest.observedDateTime= convertTimestampToJSON(obr[&apos;OBR.7&apos;]);
	
	// OBR.8 - Observed End DateTime (TS)
	if(obr[&apos;OBR.8&apos;].toString().length&gt;0) objObservationRequest.observedEndDateTime= convertTimestampToJSON(obr[&apos;OBR.8&apos;]);
	
	// OBR.9 - Collection Volume (CQ)
	if(obr[&apos;OBR.9&apos;].toString().length&gt;0) objObservationRequest.collectionVolume= convertCompositeQuantityWithUnitsToJSON(obr[&apos;OBR.9&apos;]);
	
	// OBR.10 - Collector Identifier (XCN)
	if(obr[&apos;OBR.10&apos;].toString().length&gt;0) objObservationRequest.collectorIdentifier= convertExtendedCompositeIDNumberAndNameToJSON(obr[&apos;OBR.10&apos;]);
	
	// OBR.11 - Specimen Action Code (ID)
	if(obr[&apos;OBR.11&apos;].toString().length&gt;0) objObservationRequest.specimenActionCode= obr[&apos;OBR.11&apos;][&apos;OBR.11.1&apos;].toString();
	
	// OBR.12 - Danger Code (CE)
	if(obr[&apos;OBR.12&apos;].toString().length&gt;0) objObservationRequest.dangerCode= convertCodedElementToJSON(obr[&apos;OBR.12&apos;]);
	
	// OBR.13 - Relevant Clinical Information (ST)
	if(obr[&apos;OBR.13&apos;].toString().length&gt;0) objObservationRequest.relevantClinicalInformation= obr[&apos;OBR.13&apos;][&apos;OBR.13.1&apos;].toString();
	
	// OBR.14 - Specimen Received DateTime (TS)
	if(obr[&apos;OBR.14&apos;].toString().length&gt;0) objObservationRequest.specimenReceivedDateTime= convertTimestampToJSON(obr[&apos;OBR.14&apos;]);
	
	// OBR.15 - Specimen Source (SPS)
	if(obr[&apos;OBR.15&apos;].toString().length&gt;0) objObservationRequest.producersId= convertSpecimenSourceToJSON(obr[&apos;OBR.15&apos;]);
	
	// convertExtendedCompositeIDNumberAndNameToJSON
	// OBR.16 - Ordering Provider (XCN)
	if(obr[&apos;OBR.16&apos;].toString().length&gt;0) objObservationRequest.orderingProvider= convertExtendedCompositeIDNumberAndNameToJSON(obr[&apos;OBR.16&apos;]);
	
	// convertExtendedTelecommunicationNumberToJSON
	// OBR.17 - Order Callback Phone Number (XTN)
	if(obr[&apos;OBR.17&apos;].toString().length&gt;0) objObservationRequest.orderingProvider= convertExtendedTelecommunicationNumberToJSON(obr[&apos;OBR.17&apos;]);

	// OBR.18 - Placer Field 1 (ST)
	if(obr[&apos;OBR.18&apos;].toString().length&gt;0) objObservationRequest.placerField1= obr[&apos;OBR.18&apos;][&apos;OBR.18.1&apos;].toString();
	
	// OBR.19 - Placer Field 2 (ST)
	if(obr[&apos;OBR.19&apos;].toString().length&gt;0) objObservationRequest.placerField2= obr[&apos;OBR.19&apos;][&apos;OBR.19.1&apos;].toString();
	
	// OBR.20 - Filler Field 1 (ST)
	if(obr[&apos;OBR.20&apos;].toString().length&gt;0) objObservationRequest.fillerField1= obr[&apos;OBR.20&apos;][&apos;OBR.20.1&apos;].toString();
	
	// OBR.21 - Filler Field 2 (ST)
	if(obr[&apos;OBR.21&apos;].toString().length&gt;0) objObservationRequest.fillerField2= obr[&apos;OBR.21&apos;][&apos;OBR.21.1&apos;].toString();
	
	// OBR.22 - Results Report Status Change DateTime (TS)
	if(obr[&apos;OBR.22&apos;].toString().length&gt;0) objObservationRequest.resultsReportStatusChange= convertTimestampToJSON(obr[&apos;OBR.22&apos;]);
	
	// OBR.25 - Result Status (ID)
	if(obr[&apos;OBR.25&apos;].toString().length&gt;0) objObservationRequest.resultStatus= obr[&apos;OBR.25&apos;][&apos;OBR.25.1&apos;].toString();
	
	// OBR.27 - Quantity/Timing (TQ)
	// convertQuantityTimingToJSON
	if(obr[&apos;OBR.27&apos;].toString().length&gt;0) objObservationRequest.quantityTiming= convertQuantityTimingToJSON(obr[&apos;OBR.27&apos;]);
	
	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objObservationRequest= &apos;+objObservationRequest);
		logger.error(scriptName+&apos;:DEBUG:: observationRequest= &apos;+JSON.stringify(objObservationRequest));
	}
	
	channelMap.put(&apos;observationRequest&apos;,JSON.stringify(objObservationRequest));
	return objObservationRequest;
	
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>5119b5c7-d424-4c3a-acf5-f584386a780a</id>
        <name>json_obx_observation</name>
        <revision>2</revision>
        <lastModified>
          <time>1705337819213</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse HL7v2 message OBX segment and return a Javascript object
	
	Filename: json_obx_observation.js
	@param {String} obx - This will contains the XML representation of the HL7v2 OBX segment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 OBX segment
	Created: 2024-01-15 JER
	History:
	2024-01-15 JER - Created modeled after json_patient_allergy function
*/
function json_obx_observation(obx) {

	var scriptName= &apos;json_obx_observation&apos;;
	var debug= 0;
	var objObservation= {};
	
	// OBX.1 - set Id
	if(obx[&apos;OBX.1&apos;].toString().length&gt;0) objObservation.setId= obx[&apos;OBX.1&apos;][&apos;OBX.1.1&apos;].toString();

	// OBX.2 - Value Type
	if(obx[&apos;OBX.2&apos;].toString().length&gt;0) objObservation.valueType= obx[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString();
	
	// OBX.3 - Observation Identifier CE (identifier^text^name of codeSystem^alternate Id^alternate text^name of alternate codeSystem)
	if(obx[&apos;OBX.3&apos;].toString().length&gt;0) objObservation.observationIdentifier= convertCodedElementToJSON(obx[&apos;OBX.3&apos;]);
	
	// OBX.4 - Observation Substitution ID (ST)
	if(obx[&apos;OBX.4&apos;].toString().length&gt;0) objObservation.substitutionID= obx[&apos;OBX.4&apos;][&apos;OBX.4.1&apos;];
	
	// OBX.5 - Observation Value (ST)
	if(obx[&apos;OBX.5&apos;].toString().length&gt;0) objObservation.observationValue= obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;];
	
	// OBX.6 - Observation Units CE (identifier^text^name of codeSystem^alternate Id^alternate text^name of alternate codeSystem)
	if(obx[&apos;OBX.6&apos;].toString().length&gt;0) objObservation.units= convertCodedElementToJSON(obx[&apos;OBX.6&apos;]);
	
	// OBX.11 - Observation Result Status
	if(obx[&apos;OBX.11&apos;].toString().length&gt;0) objObservation.resultStatus= obx[&apos;OBX.11&apos;][&apos;OBX.11.1&apos;];
		
	// OBX.14 - Date/Time of Observation
	if(obx[&apos;OBX.14&apos;].toString().length&gt;0) objObservation.resultStatus= obx[&apos;OBX.14&apos;][&apos;OBX.14.1&apos;];
	
	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objObservation= &apos;+objObservation);
		logger.error(scriptName+&apos;:DEBUG:: observation= &apos;+JSON.stringify(objObservation));
	}
	
	channelMap.put(&apos;Observation&apos;,JSON.stringify(objObservation));
	return objObservation;
	
}

</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>90f2b4d7-4691-49ca-854c-70b8da39b589</id>
        <name>json_obx_observation_result</name>
        <revision>4</revision>
        <lastModified>
          <time>1672759028368</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse HL7v2 message OBX segment and return a Javascript object
	
	Filename: json_obx_observation_result.js
	@param {String} orc - This will contains the XML representation of the HL7v2 OBX segment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 OBX segment
	History:
	2022-12-27 JER - Modified function name from json_obx_observation to json_obx_observation_result
*/
function json_obx_observation_result(obx) {

	var scriptName= &apos;json_obx_observation_result&apos;;
	var debug= 0;
	/*
	logger.error(scriptName+&apos;:DEBUG:: obx= &apos;+obx);;
	*/
	var objObservation= {};
	
	// OBX.1 - set Id
	// if(obx[&apos;OBX.1&apos;].toString().length&gt;0) objObservation.setId= convertTimingQuantityToJSON(obx[&apos;OBX.1&apos;]);
	if(obx[&apos;OBX.1&apos;].toString().length&gt;0) objObservation.setId= obx[&apos;OBX.1&apos;][&apos;OBX.1.1&apos;].toString();

	// OBX.2 - Value Type
	// if(obx[&apos;OBX.2&apos;].toString().length&gt;0) objObservation.valueType= convertCodedElementToJSON(obx[&apos;OBX.2&apos;]);
	if(obx[&apos;OBX.2&apos;].toString().length&gt;0) objObservation.valueType= obx[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString();
	
	// OBX.3 - Observation Identifier (identifier^text^name of codeSystem^alternate Id^alternate text^name of alternate codeSystem)
	if(obx[&apos;OBX.3&apos;].toString().length&gt;0) objObservation.observationIdentifier= convertCodedElementToJSON(obx[&apos;OBX.3&apos;]);
	
	// OBX.4 - Observation Sub-Id
	if(obx[&apos;OBX.4&apos;].toString().length&gt;0) objObservation.observationSubId= obx[&apos;OBX.4&apos;][&apos;OBX.4.1&apos;].toString();
	
	// OBX.5 - Observation Value
	if(obx[&apos;OBX.5&apos;].toString().length&gt;0) objObservation.observationValue= obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
	
	// OBX.6 - Units
	if(obx[&apos;OBX.6&apos;].toString().length&gt;0) objObservation.units= convertCodedElementToJSON(obx[&apos;OBX.6&apos;]);
	
	// OBX.7 - References Range
	if(obx[&apos;OBX.7&apos;].toString().length&gt;0) objObservation.referencesRange= obx[&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString();
	
	// OBX.8 - Abnormal Flags
	if(obx[&apos;OBX.8&apos;].toString().length&gt;0) objObservation.deliverToLocation= obx[&apos;OBX.8&apos;][&apos;OBX.8.1&apos;].toString();
	
	// OBX.9 - Probability
	if(obx[&apos;OBX.9&apos;].toString().length&gt;0) objObservation.probability= obx[&apos;OBX.9&apos;][&apos;OBX.9.1&apos;].toString();
	
	// OBX.10 - Nature Of Abnormal Test
	if(obx[&apos;OBX.10&apos;].toString().length&gt;0) objObservation.natureOfAbnormalTest= obx[&apos;OBX.10&apos;][&apos;OBX.10.1&apos;].toString();
	
	// OBX.11 - Observation Result Status
	if(obx[&apos;OBX.11&apos;].toString().length&gt;0) objObservation.observationResultStatus= obx[&apos;OBX.11&apos;][&apos;OBX.11.1&apos;].toString();
	
	// OBX.12 - Effective Date of Reference Range
	if(obx[&apos;OBX.12&apos;].toString().length&gt;0) objObservation.effectiveDateReferenceRange= convertTimestampToJSON(obx[&apos;OBX.12&apos;]);
	
	// OBX.13 - User Defined Access Checks
	if(obx[&apos;OBX.13&apos;].toString().length&gt;0) objObservation.userDefinedAccessChecks= obx[&apos;OBX.13&apos;][&apos;OBX.13.1&apos;].toString();
	
	// OBX.14 - Observation Date/Time
	if(obx[&apos;OBX.14&apos;].toString().length&gt;0) objObservation.observationDateTime= convertTimestampToJSON(obx[&apos;OBX.14&apos;]);
	
	// OBX.15 - Producers Id (CE)
	if(obx[&apos;OBX.15&apos;].toString().length&gt;0) objObservation.producersId= convertCodedElementToJSON(obx[&apos;OBX.15&apos;]);
	
	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objObservation= &apos;+objObservation);
		logger.error(scriptName+&apos;:DEBUG:: commonOrder= &apos;+JSON.stringify(objObservation));
	}
	
	// channelMap.put(&apos;PharmacyEncodedOrder&apos;,JSON.stringify(objObservation));
	return objObservation;
	
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>face095c-44fa-4f83-8492-5a3e9d0a6f16</id>
        <name>json_orc_common_order</name>
        <revision>8</revision>
        <lastModified>
          <time>1675451690021</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse HL7v2 ORC segment and return a Javascript object

	@param {String} orc - This will contains the XML representation of the HL7v2 ORC segment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 ORC segment
	History:
	2023-02-01 jer - Modified from calling convertCompositeQuantityWithUnitsToJSON to convertCompositeQuantityTimingToJSON() function
	2023-01-20 JER - Modified to evaluate the provided order control codes to align with a description value
	2023-01-02 JER - Added enterersLocation orc[ORC.13]
	2022-12-31 jer - Modified the declaration of orderStatus from orc[&apos;ORC.5&apos;] to orc[&apos;ORC.5&apos;][&apos;ORC.5.1&apos;]
	2022-04-07 jer - Created from json_pv1_visit(pv1) method to populate visit centric content
*/
function json_orc_common_order(orc) {

	var scriptName= &apos;json_orc_common_order&apos;;
	var debug= 0;
	/*
	logger.error(scriptName+&apos;:DEBUG:: orc= &apos;+orc);;
	*/
	var objCommonOrder= {};
	
	/* 2023-01-20 JER - Modified to evaluate the provided order control codes to align with a description value */
	if(orc[&apos;ORC.1&apos;].toString().length&gt;0) {
		var orderControl= orc[&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString();
		
		switch (orderControl) {
  			case &apos;CA&apos;:
    				var strOrderControl= &apos;CANCELLED&apos;;
    				break;
  			case &apos;DC&apos;:
  				var strOrderControl= &apos;DISCONTINUED&apos;;
  				break;
  			case &apos;DR&apos;:
    				var strOrderControl= &apos;DISCONTINUED&apos;;
  				break;
  			case &apos;NW&apos;:
    				var strOrderControl= &apos;NEW&apos;;
  				break;
  			case &apos;OC&apos;:
    				var strOrderControl= &apos;CANCELLED&apos;;
  				break;
  			case &apos;OD&apos;:
    				var strOrderControl= &apos;DISCONTINUED&apos;;
  				break;
  			case &apos;RF&apos;:
    				var strOrderControl= &apos;REFILL&apos;;
  				break;
  			case &apos;RO&apos;:
    				var strOrderControl= &apos;REPLACEMENT&apos;;
  				break;
  			case &apos;XO&apos;:
    				var strOrderControl= &apos;MODIFIED&apos;;
  				break;
  			default:
    				var strOrderControl= &apos;MODIFIED&apos;;
    				break;
		}
		objCommonOrder.orderControl= strOrderControl;
	} else {
		objCommonOrder.orderControl= &apos;MODIFIED&apos;;
	}
	if(orc[&apos;ORC.2&apos;].toString().length&gt;0) objCommonOrder.placerOrderNumber= convertEntityIdentifierToJSON(orc[&apos;ORC.2&apos;]);
	if(orc[&apos;ORC.3&apos;].toString().length&gt;0) objCommonOrder.fillerOrderNumber= convertEntityIdentifierToJSON(orc[&apos;ORC.3&apos;]);
	if(orc[&apos;ORC.4&apos;].toString().length&gt;0) objCommonOrder.placerGroupNumber= convertEntityIdentifierToJSON(orc[&apos;ORC.4&apos;]);
	// 2022-12-31 jer - Modified the declaration of orderStatus from orc[&apos;ORC.5&apos;] to orc[&apos;ORC.5&apos;][&apos;ORC.5.1&apos;]
	if(orc[&apos;ORC.5&apos;].toString().length&gt;0) objCommonOrder.orderStatus= orc[&apos;ORC.5&apos;][&apos;ORC.5.1&apos;].toString();
	if(orc[&apos;ORC.6&apos;].toString().length&gt;0) objCommonOrder.responseFlag= orc[&apos;ORC.6&apos;].toString();

	// 2023-02-01 jer - Modified from calling convertCompositeQuantityWithUnitsToJSON to convertCompositeQuantityTimingToJSON() function
	// 2022-04-07 jer - Added convertCompositeQuantityWithUnitsToJSON code template
	// if(orc[&apos;ORC.7&apos;].toString().length&gt;0) objCommonOrder.quantityTiming= convertCompositeQuantityWithUnitsToJSON(orc[&apos;ORC.7&apos;]);
	if(orc[&apos;ORC.7&apos;].toString().length&gt;0) objCommonOrder.quantityTiming=  convertCompositeQuantityTimingToJSON(orc[&apos;ORC.7&apos;]);
	
	if(orc[&apos;ORC.8&apos;].toString().length&gt;0) {
		var objParentOrder= {};
		for(i= 0;i&lt;orc[&apos;ORC.8&apos;].children().length;i++) {
			if (i== 0) {
				var placerAssignedIdentifier= convertEntityIdentifierToJSON(orc[&apos;ORC.8&apos;][&apos;ORC.8.1&apos;]);
				objParentOrder.placedAssignedIdentifier= placerAssignedIdentifier;	
			}
			if (i== 1) {
				var fillerAssignedIdentifier= convertEntityIdentifierToJSON(orc[&apos;ORC.8&apos;][&apos;ORC.8.2&apos;]);
				objParentOrder.fillerAssignedIdentifier= fillerAssignedIdentifier;	
			}
		}
		objCommonOrder.parentOrder= JSON.stringify(objParentOrder);
	}
	if(orc[&apos;ORC.9&apos;].toString().length&gt;0)  objCommonOrder.dateTimeOfTransaction= convertTimestampToJSON(orc[&apos;ORC.9&apos;]);
	if(orc[&apos;ORC.10&apos;].toString().length&gt;0) objCommonOrder.enteredBy= convertExtendedCompositeIDNumberAndNameToJSON(orc[&apos;ORC.10&apos;]);
	if(orc[&apos;ORC.11&apos;].toString().length&gt;0) objCommonOrder.verifiedBy= convertExtendedCompositeIDNumberAndNameToJSON(orc[&apos;ORC.11&apos;]);
	if(orc[&apos;ORC.12&apos;].toString().length&gt;0) objCommonOrder.orderingProvider= convertExtendedCompositeIDNumberAndNameToJSON(orc[&apos;ORC.12&apos;]);
	// 2023-01-02 JER - Added enterersLocation orc[ORC.13]
	if(orc[&apos;ORC.13&apos;].toString().length&gt;0) objCommonOrder.enterersLocation= convertPersonLocationToJSON(orc[&apos;ORC.13&apos;]);
	if(orc[&apos;ORC.15&apos;].toString().length&gt;0) objCommonOrder.orderedEffectiveDateTime= convertTimestampToJSON(orc[&apos;ORC.15&apos;]);
	
	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objCommonOrder= &apos;+objCommonOrder);
		logger.error(scriptName+&apos;:DEBUG:: commonOrder= &apos;+JSON.stringify(objCommonOrder));
	}
	
	channelMap.put(&apos;commonOrder&apos;,JSON.stringify(objCommonOrder));
	return objCommonOrder;
	
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>4841091d-7809-4f22-a722-2b90d6023fa7</id>
        <name>json_patient_allergy</name>
        <revision>3</revision>
        <lastModified>
          <time>1694302179456</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse HL7v2 message AL1 segment and return a Javascript object
	
	Filename: json_patient_allergy.js
	@param {String} orc - This will contains the XML representation of the HL7v2 AL1 segment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 AL1 segment
	History:
	
*/
function json_patient_allergy(al1) {

	var scriptName= &apos;json_patient_allergy&apos;;
	var debug= 0;
	/*
	logger.error(scriptName+&apos;:DEBUG:: al1= &apos;+al1);;
	*/
	var objAllergy= {};
	
	// AL1.1 - set Id
	if(al1[&apos;AL1.1&apos;].toString().length&gt;0) objAllergy.setId= al1[&apos;AL1.1&apos;][&apos;AL1.1.1&apos;].toString();

	// AL1.2 - Type Code
	// if(al1[&apos;AL1.2&apos;].toString().length&gt;0) objAllergy.valueType= convertCodedElementToJSON(al1[&apos;AL1.2&apos;]);
	if(al1[&apos;AL1.2&apos;].toString().length&gt;0) objAllergy.typeCode= convertCodedElementToJSON(al1[&apos;AL1.2&apos;]);
	
	// AL1.3 - Allergen Code (identifier^text^name of codeSystem^alternate Id^alternate text^name of alternate codeSystem)
	if(al1[&apos;AL1.3&apos;].toString().length&gt;0) objAllergy.allergyCode= convertCodedElementToJSON(al1[&apos;AL1.3&apos;]);
	
	// AL1.4 - Severity Code
	if(al1[&apos;AL1.4&apos;].toString().length&gt;0) objAllergy.severityCode= convertCodedElementToJSON(al1[&apos;AL1.4&apos;]);
	
	// AL1.5 - Reaction Code
	var arrReactionCode= new Array();
	for each(reaction in al1[&apos;AL1.5&apos;]) {
		arrReactionCode.push(reaction[&apos;AL1.5.1&apos;].toString());
	} // end for each
	if(al1[&apos;AL1.5&apos;].toString().length&gt;0) objAllergy.reactionCode= arrReactionCode;
	
	// AL1.6 - Identification Date
	if(al1[&apos;AL1.6&apos;].toString().length&gt;0) objAllergy.identificationDate= al1[&apos;AL1.6&apos;][&apos;AL1.6.1&apos;].toString();
	
	
	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objAllergy= &apos;+objAllergy);
		logger.error(scriptName+&apos;:DEBUG:: commonOrder= &apos;+JSON.stringify(objAllergy));
	}
	
	channelMap.put(&apos;Allergy&apos;,JSON.stringify(objAllergy));
	return objAllergy;
	
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>0cf1a598-a8e4-4e52-a0fb-640de35367fa</id>
        <name>json_pid_gender</name>
        <revision>3</revision>
        <lastModified>
          <time>1658534603167</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to handle Patient Gender parsing PID.8

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function json_pid_gender(pid, patient) {

	var scriptName= &apos;json_pid_gender&apos;;
	var gender= pid[&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString().toUpperCase();

//	logger.error(scriptName+&apos;:DEBUG:: pidGender= &apos;+pid+&apos; patient= &apos;+patient);
	
	if (gender == &apos;F&apos; || gender == &apos;FEMALE&apos;){
		patient.gender= &apos;Female&apos;;
	}
	
	else if (gender == &apos;M&apos; || gender == &apos;MALE&apos;){
		patient.gender= &apos;Male&apos;;
	}
	
	else if (gender == &apos;O&apos; || gender == &apos;OTHER&apos;){
		patient.gender= &apos;Other&apos;;
	}
	
	else if (gender == &apos;U&apos; || gender == &apos;UNKNOWN&apos;){
		patient.gender= &apos;Unknown&apos;;
	}
	else{
		patient.gender= pid[&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString();
	}
	
//	logger.error(scriptName+&apos;:DEBUG:: patient= &apos;+JSON.stringify(patient));
	return patient;
		
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>3f1d523c-515d-4ec8-805b-2deb20470993</id>
        <name>json_pid_patient</name>
        <revision>25</revision>
        <lastModified>
          <time>1705339842780</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse HL7v2 PID segment and return a Javascript object

	@param {String} pid - This will contains the XML representation of the HL7v2 PID segment
	
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 PID segment
	History:
	2023-09-21 JER - Added code to evaluate patientIdentifier for either PID-3 in addition to PID-4 value
	2023-09-10 JER - Added phone numbers (home and business) PID.13 and PID.14 with other updates references objPatient
	2022-08-25 JER - Modified from mrn and mrnDomain to identifier and assigningAuthorityName
	2022-05-13 JER - per requested customer provides unique Patient Id in PID.4
	2022-02-25 JER - Modified to include the call json_pv1_patient(pv1, patient) method to populate visit-centric content
*/
function json_pid_patient(pid) {

	var scriptName= &apos;json_pid_patient&apos;;
	var debug= 0;
	
	var objPatient= {};

	if(debug&gt;0) {
		logger.debug(&apos;DEBUG::&apos;+scriptName+&apos; pid[PID.4] typeof: &apos;+typeof(pid[&apos;PID.4&apos;])+&apos; PID.4 value: &apos;+pid[&apos;PID.4&apos;].toString()+&apos; PID.4.1 value: &apos;+pid[&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString());
		logger.debug(&apos;DEBUG::&apos;+scriptName+&apos; pid[PID.3] typeof: &apos;+typeof(pid[&apos;PID.3&apos;])+&apos; PID.3 value: &apos;+pid[&apos;PID.3&apos;].toString()+&apos; PID.3.1 value: &apos;+pid[&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString());
	} // end if 
	
	if(pid[&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString().length&gt;0) {
		// 2022-05-13 JER - per requested customer provides unique Patient Id in PID.4
		for each(pid4 in pid[&apos;PID.4&apos;]) {
			
			var pidNum = pid4[&apos;PID.4.1&apos;].toString();
			var entity = pid4[&apos;PID.4.4&apos;].toString();
			// 2022-02-22 jer - verify if PID.3.5 exists if not is undefined
			if(pid4[&apos;PID.4.5&apos;].toString().length&gt;0) {
				var IDCode = pid4[&apos;PID.4.5&apos;].toString();
			} // end if 

			// 2022-02-22 jer - verify if undefined or defined with value of MRN
			if((typeof(IDCode)== &apos;undefined&apos;) || (IDCode.indexOf(&apos;MRN&apos;)&gt;-1)) {
				if(entity != null) {
					// 2022-08-25 JER - Modified from mrn and mrnDomain to identifier and assigningAuthorityName
					objPatient.identifier= pidNum;
					objPatient.assigningAuthorityName= entity;
					channelMap.put(&apos;identifier&apos;,pidNum); 
					channelMap.put(&apos;assigningAuthorityName&apos;,entity);
				}
			} else if (IDCode.indexOf(&quot;MR&quot;)&gt;-1) {
				if(entity != null) {
					// 2022-08-25 JER - Modified from mpi and mpiDomain to mpiIdentifier and globalAssigningAuthorityName
					objPatient.mpiIdentifier= pidNum;
					objPatient.globalAssigningAuthorityName= entity;
					channelMap.put(&apos;mpiIdentifier&apos;,pidNum); 
					channelMap.put(&apos;globalAssigningAuthorityName&apos;,entity);
				}
			} else {
				if(entity != null) {
					// 2022-08-25 JER - Modified from mpi and mpiDomain to mpiIdentifier and globalAssigningAuthorityName
					objPatient.mpiIdentifier= pidNum;
					objPatient.globalAssigningAuthorityName= entity;
					channelMap.put(&apos;mpiIdentifier&apos;,pidNum); 
					channelMap.put(&apos;globalAssigningAuthorityName&apos;,entity);
				} // end if 
			} // end if 
		} // end for 
	// 2023-09-21 JER - Added code to evaluate patientIdentifier for either PID-3 in addition to PID-4 value
	} else if(pid[&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString().length&gt;0) {

		// 2022-05-13 JER - per requested customer provides unique Patient Id in PID.4
		for each(pid3 in pid[&apos;PID.3&apos;]) {
			
			var pidNum = pid3[&apos;PID.3.1&apos;].toString();
			var entity = pid3[&apos;PID.3.4&apos;].toString();
			// 2022-02-22 jer - verify if PID.3.5 exists if not is undefined
			if(pid3[&apos;PID.3.5&apos;].toString().length&gt;0) {
				var IDCode = pid3[&apos;PID.3.5&apos;].toString();
			} // end if 
			
			//logger.error(scriptName+&apos;:DEBUG:: typeof(IDCode)= &apos;+typeof(IDCode));

			// 2022-02-22 jer - verify if undefined or defined with value of MRN
			if((typeof(IDCode)== &apos;undefined&apos;) || (IDCode.indexOf(&apos;MRN&apos;)&gt;-1)) {
				if(entity != null) {
					// 2022-08-25 JER - Modified from mrn and mrnDomain to identifier and assigningAuthorityName
					objPatient.identifier= pidNum;
					objPatient.assigningAuthorityName= entity;
					channelMap.put(&apos;identifier&apos;,pidNum); 
					channelMap.put(&apos;assigningAuthorityName&apos;,entity);
				}
			} else if (IDCode.indexOf(&quot;MR&quot;)&gt;-1) {
				if(entity != null) {
					// 2022-08-25 JER - Modified from mpi and mpiDomain to mpiIdentifier and globalAssigningAuthorityName
					objPatient.mpiIdentifier= pidNum;
					objPatient.globalAssigningAuthorityName= entity;
					channelMap.put(&apos;mpiIdentifier&apos;,pidNum); 
					channelMap.put(&apos;globalAssigningAuthorityName&apos;,entity);
				}
			} else {
				if(entity != null) {
					// 2022-08-25 JER - Modified from mpi and mpiDomain to mpiIdentifier and globalAssigningAuthorityName
					objPatient.mpiIdentifier= pidNum;
					objPatient.globalAssigningAuthorityName= entity;
					channelMap.put(&apos;mpiIdentifier&apos;,pidNum); 
					channelMap.put(&apos;globalAssigningAuthorityName&apos;,entity);
				} // end if 
			} // end if 
		} // end for 
	} // end if 

	objPatient.encounterNumber= pid[&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();
	objPatient.firstName= pid[&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString();
	if(pid[&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString().length&gt;0) objPatient.middleName=  pid[&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString();
	objPatient.lastName=  pid[&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString();
	objPatient.dob= pid[&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();
	objPatient.gender= pid[&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString();

	// 2022-04-07 jer - added convertExtendedAddressToJSON method for Patient Address
	/* Patient Address PID.11 (XAD) */
	if(pid[&apos;PID.11&apos;].toString().length&gt;0) objPatient.patientAddress= convertExtendedAddressToJSON(pid[&apos;PID.11&apos;]);

	// 2023-09-10 JER - Added phone numbers (home and business) PID.13 and PID.14
	/* Phone Number - Home (XTN) PID.13 */
	if(pid[&apos;PID.13&apos;].toString().length&gt;0) objPatient.phoneNumberHome= convertExtendedTelecommunicationNumberToJSON(pid[&apos;PID.13&apos;]);
	
	/* Phone Number - Business (XTN) PID.14 */
	if(pid[&apos;PID.14&apos;].toString().length&gt;0) objPatient.phoneNumberBusiness= convertExtendedTelecommunicationNumberToJSON(pid[&apos;PID.14&apos;]);

	/* Patient Account Number (CX) PID.18 */
	if(pid[&apos;PID.18&apos;].toString().length&gt;0) objPatient.patientAccountNumber= pid[&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();
	// 2023-10-09 JER - Added the patient Ethnicity using the convertCodedElementToJSON using PID-22
	if(pid[&apos;PID.22&apos;].toString().length&gt;0) objPatient.ethnicity= convertCodedElementToJSON(pid[&apos;PID.22&apos;])
	/* Patient Death Date and Time PID.29 */
	if(pid[&apos;PID.29&apos;].toString().length&gt;0) objPatient.deathDateTime= pid[&apos;PID.29&apos;][&apos;PID.29.1&apos;].toString();
	/* Patient Death Indicator PID.30 */
	if(pid[&apos;PID.30&apos;].toString().length&gt;0) objPatient.deathIndicator= pid[&apos;PID.30&apos;][&apos;PID.30.1&apos;].toString();

	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objPatient= &apos;+objPatient);
		logger.error(scriptName+&apos;:DEBUG:: stringify(objPatient)= &apos;+JSON.stringify(objPatient));
	}
	
	channelMap.put(&apos;Patient&apos;,JSON.stringify(objPatient));
	return objPatient;
	
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>69da7aa7-e93a-40ce-9b8c-732e90d0d580</id>
        <name>json_pid_patient_alliant</name>
        <revision>6</revision>
        <lastModified>
          <time>1705342753028</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse HL7v2 PID segment and return a Javascript object 
	File:  json_pid_patient_alliant.js
	Clone of: json_pid_patient

	@param {String} pid - This will contains the XML representation of the HL7v2 PID segment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 PID segment
	
	History:
	2024-01-15 JER - Added the handling of the SoftWriters Patient Identifier into alternateIdentifier property
	2023-11-29 JER - Modified to include the handling of the AlliantPatientIdConfig (supported values: PID-3,PID-4,PID-18) to determine the patient identifier
	2023-10-09 JER - Added the patient Ethnicity using the convertCodedElementToJSON using PID-22
	2023-09-21 JER - Added code to evaluate patientIdentifier for either PID-3 in addition to PID-4 value
	2023-09-10 JER - Added phone numbers (home and business) PID.13 and PID.14 with other updates references objPatient
	2022-08-25 JER - Modified from mrn and mrnDomain to identifier and assigningAuthorityName
	2022-05-13 JER - per requested customer provides unique Patient Id in PID.4
	2022-02-25 JER - Modified to include the call json_pv1_patient(pv1, patient) method to populate visit-centric content
*/
function json_pid_patient_alliant(pid, locationPatientId) {

	var scriptName= &apos;json_pid_patient_alliant&apos;;
	var debug= 0;
	var objPatient= {};
	if(channelMap.get(&apos;PatientID_SW&apos;)) alternateIdentifier= channelMap.get(&apos;PatientID_SW&apos;);
	
	// if locationPatientId is not defined or has no string value - set to default
	if( (typeof(locationPatientId)== undefined) || (locationPatientId.toString().length&lt;1) ) {
		var locationPatientId= &apos;default&apos;;
	} // end if 
	
	if(debug&gt;0) {
		logger.debug(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; locationPatientId: &apos;+locationPatientId);
		logger.debug(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; pid[PID.4] typeof: &apos;+typeof(pid[&apos;PID.4&apos;])+&apos; PID.4 value: &apos;+pid[&apos;PID.4&apos;].toString()+&apos; PID.4.1 value: &apos;+pid[&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString());
		logger.debug(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; pid[PID.3] typeof: &apos;+typeof(pid[&apos;PID.3&apos;])+&apos; PID.3 value: &apos;+pid[&apos;PID.3&apos;].toString()+&apos; PID.3.1 value: &apos;+pid[&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString());
	} // end if 
	
	// 2023-11-29 JER - Modified to include the handling of the AlliantPatientIdConfig (supported values: PID-3,PID-4,PID-18) to determine the patient identifier
	if(locationPatientId.toString().indexOf(&apos;PID&apos;)&gt;-1) {
		
		var lstLocationPatientId= locationPatientId.toString().split(&apos;,&apos;);
		for each(eachLocation in lstLocationPatientId) {
			
			// if the AlliantPatientId ConfigMap key value pair contains PID-3
			if(eachLocation.toString().indexOf(&apos;PID-3&apos;)&gt;-1) {

				// 2024-01-15 JER - Added to evaluate if typeof PID.3 has a value
				if(typeof(pid[&apos;PID.3&apos;][&apos;PID.3.1&apos;])!== &apos;undefined&apos;) { 
		
					// 2023-09-21 JER - Added code to evaluate patientIdentifier for either PID-3 in addition to PID-4 value
					if(pid[&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString().length&gt;0) {
						// 2022-05-13 JER - per requested customer provides unique Patient Id in PID.4
						for each(pid3 in pid[&apos;PID.3&apos;]) {
			
							var pidNum = pid3[&apos;PID.3.1&apos;].toString();
							var entity = pid3[&apos;PID.3.4&apos;].toString();
							// 2022-02-22 jer - verify if PID.3.5 exists if not is undefined
							if(pid3[&apos;PID.3.5&apos;].toString().length&gt;0) {
								var IDCode = pid3[&apos;PID.3.5&apos;].toString();
							} // end if 
			
							//logger.error(scriptName+&apos;:DEBUG:: typeof(IDCode)= &apos;+typeof(IDCode));

							// 2022-02-22 jer - verify if undefined or defined with value of MRN
							if((typeof(IDCode)== &apos;undefined&apos;) || (IDCode.indexOf(&apos;MRN&apos;)&gt;-1)) {
								
								if(entity != null) {
									// 2022-08-25 JER - Modified from mrn and mrnDomain to identifier and assigningAuthorityName
									objPatient.identifier= pidNum;
									objPatient.assigningAuthorityName= entity;
									channelMap.put(&apos;identifier&apos;,pidNum); 
									channelMap.put(&apos;assigningAuthorityName&apos;,entity);
								} // end if 
							} else if (IDCode.indexOf(&quot;MR&quot;)&gt;-1) {
								if(entity != null) {
									// 2022-08-25 JER - Modified from mpi and mpiDomain to mpiIdentifier and globalAssigningAuthorityName
									objPatient.mpiIdentifier= pidNum;
									objPatient.globalAssigningAuthorityName= entity;
									channelMap.put(&apos;mpiIdentifier&apos;,pidNum); 
									channelMap.put(&apos;globalAssigningAuthorityName&apos;,entity);
								} // end if 
							} else {
								if(entity != null) {
									// 2022-08-25 JER - Modified from mpi and mpiDomain to mpiIdentifier and globalAssigningAuthorityName
									objPatient.mpiIdentifier= pidNum;
									objPatient.globalAssigningAuthorityName= entity;
									channelMap.put(&apos;mpiIdentifier&apos;,pidNum); 
									channelMap.put(&apos;globalAssigningAuthorityName&apos;,entity);
								} // end if 
							} // end if 
							
						} // end for
					
					} // end if 
				
				} // end if 
			
			// if the AlliantPatientIdConfig ConfigMap key value pair contains PID-4
			} else if(eachLocation.toString().indexOf(&apos;PID-4&apos;)&gt;-1) {

				// 2024-01-15 JER - Added to evaluate if typeof PID.4 has a value
				if(typeof(pid[&apos;PID.4&apos;][&apos;PID.4.1&apos;])!== &apos;undefined&apos;) { 
		
					if(pid[&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString().length&gt;0) {
						// 2022-05-13 JER - per requested customer provides unique Patient Id in PID.4
						for each(pid4 in pid[&apos;PID.4&apos;]) {
			
							var pidNum = pid4[&apos;PID.4.1&apos;].toString();
							var entity = pid4[&apos;PID.4.4&apos;].toString();
					
							// 2022-02-22 jer - verify if PID.4.5 exists if not is undefined
							if(pid4[&apos;PID.4.5&apos;].toString().length&gt;0) {
								var IDCode = pid4[&apos;PID.4.5&apos;].toString();
							} // end if 

							// 2022-02-22 jer - verify if undefined or defined with value of MRN
							if((typeof(IDCode)== &apos;undefined&apos;) || (IDCode.indexOf(&apos;MRN&apos;)&gt;-1)) {
								if(entity != null) {
									// 2022-08-25 JER - Modified from mrn and mrnDomain to identifier and assigningAuthorityName
									objPatient.identifier= pidNum;
									objPatient.assigningAuthorityName= entity;
									channelMap.put(&apos;identifier&apos;,pidNum); 
									channelMap.put(&apos;assigningAuthorityName&apos;,entity);
								} // end if 
					
							} else if (IDCode.indexOf(&quot;MR&quot;)&gt;-1) {
								if(entity != null) {
									// 2022-08-25 JER - Modified from mpi and mpiDomain to mpiIdentifier and globalAssigningAuthorityName
									objPatient.mpiIdentifier= pidNum;
									objPatient.globalAssigningAuthorityName= entity;
									channelMap.put(&apos;mpiIdentifier&apos;,pidNum); 
									channelMap.put(&apos;globalAssigningAuthorityName&apos;,entity);
								} // end if 
					
							} else {
								if(entity != null) {
									// 2022-08-25 JER - Modified from mpi and mpiDomain to mpiIdentifier and globalAssigningAuthorityName
									objPatient.mpiIdentifier= pidNum;
									objPatient.globalAssigningAuthorityName= entity;
									channelMap.put(&apos;mpiIdentifier&apos;,pidNum); 
									channelMap.put(&apos;globalAssigningAuthorityName&apos;,entity);
								} // end if 
							} // end if 
						} // end for
					} // end if 
				} // end if 
			// if the AlliantPatientIdConfig ConfigMap key value pair contains PID-18
			} else if(eachLocation.toString().indexOf(&apos;PID-18&apos;)&gt;-1) {
				
				if(pid[&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString().length&gt;0) {
				
					// if PID-18.1 exists
					if(pid[&apos;PID.18&apos;][&apos;PID.18.1&apos;]) {
						var pidNum = pid[&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();
					} 
					// if PID-18.4 exists
					if(pid[&apos;PID.18&apos;][&apos;PID.18.4&apos;]) {
						var entity= pid[&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();
					} else {
						var entity= &apos;&apos;;
					} // end if 
					// if PID-18.5 exists
					if(pid[&apos;PID.18&apos;][&apos;PID.18.5&apos;]) {
						var IDCode = pid[&apos;PID.18&apos;][&apos;PID.18.5&apos;].toString();
					} else {
						var IDCode = &apos;&apos;;
					} // end if 
				
					// if pidNum exists 
					if(pidNum) {
						objPatient.identifier= pidNum;
						objPatient.assigningAuthorityName= entity;
						channelMap.put(&apos;identifier&apos;,pidNum); 
						channelMap.put(&apos;assigningAuthorityName&apos;,entity);
					} // end if 
				
				} // end if 
			} // end if 
		} // end for each
	
	// 2023-11-29 JER - Modified for non locationPatientId 
	} else {
		
		// 2023-09-21 JER - Added code to evaluate patientIdentifier for either PID-3 in addition to PID-4 value
		if(pid[&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString().length&gt;0) {

			// 2022-05-13 JER - per requested customer provides unique Patient Id in PID.4
			for each(pid3 in pid[&apos;PID.3&apos;]) {
			
				var pidNum = pid3[&apos;PID.3.1&apos;].toString();
				var entity = pid3[&apos;PID.3.4&apos;].toString();
				// 2022-02-22 jer - verify if PID.3.5 exists if not is undefined
				if(pid3[&apos;PID.3.5&apos;].toString().length&gt;0) {
					var IDCode = pid3[&apos;PID.3.5&apos;].toString();
				} // end if 
			
				//logger.error(scriptName+&apos;:DEBUG:: typeof(IDCode)= &apos;+typeof(IDCode));

				// 2022-02-22 jer - verify if undefined or defined with value of MRN
				if((typeof(IDCode)== &apos;undefined&apos;) || (IDCode.indexOf(&apos;MRN&apos;)&gt;-1)) {
					if(entity != null) {
						// 2022-08-25 JER - Modified from mrn and mrnDomain to identifier and assigningAuthorityName
						objPatient.identifier= pidNum;
						objPatient.assigningAuthorityName= entity;
						channelMap.put(&apos;identifier&apos;,pidNum); 
						channelMap.put(&apos;assigningAuthorityName&apos;,entity);
					} // end if 
					
				} else if (IDCode.indexOf(&quot;MR&quot;)&gt;-1) {
					if(entity != null) {
						// 2022-08-25 JER - Modified from mpi and mpiDomain to mpiIdentifier and globalAssigningAuthorityName
						objPatient.mpiIdentifier= pidNum;
						objPatient.globalAssigningAuthorityName= entity;
						channelMap.put(&apos;mpiIdentifier&apos;,pidNum); 
						channelMap.put(&apos;globalAssigningAuthorityName&apos;,entity);
					} // end if 
					
				} else {
					if(entity != null) {
						// 2022-08-25 JER - Modified from mpi and mpiDomain to mpiIdentifier and globalAssigningAuthorityName
						objPatient.mpiIdentifier= pidNum;
						objPatient.globalAssigningAuthorityName= entity;
						channelMap.put(&apos;mpiIdentifier&apos;,pidNum); 
						channelMap.put(&apos;globalAssigningAuthorityName&apos;,entity);
					} // end if 
				} // end if 
			
			} // end for
			
		// PID-4
		} else if(pid[&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString().length&gt;0) {
			
			// 2022-05-13 JER - per requested customer provides unique Patient Id in PID.4
			for each(pid4 in pid[&apos;PID.4&apos;]) {
			
				var pidNum = pid4[&apos;PID.4.1&apos;].toString();
				var entity = pid4[&apos;PID.4.4&apos;].toString();
					
				// 2022-02-22 jer - verify if PID.4.5 exists if not is undefined
				if(pid4[&apos;PID.4.5&apos;].toString().length&gt;0) {
					var IDCode = pid4[&apos;PID.4.5&apos;].toString();
				} // end if 

				// 2022-02-22 jer - verify if undefined or defined with value of MRN
				if((typeof(IDCode)== &apos;undefined&apos;) || (IDCode.indexOf(&apos;MRN&apos;)&gt;-1)) {
					if(entity != null) {
						// 2022-08-25 JER - Modified from mrn and mrnDomain to identifier and assigningAuthorityName
						objPatient.identifier= pidNum;
						objPatient.assigningAuthorityName= entity;
						channelMap.put(&apos;identifier&apos;,pidNum); 
						channelMap.put(&apos;assigningAuthorityName&apos;,entity);
					} // end if 
					
				} else if (IDCode.indexOf(&quot;MR&quot;)&gt;-1) {
					if(entity != null) {
						// 2022-08-25 JER - Modified from mpi and mpiDomain to mpiIdentifier and globalAssigningAuthorityName
						objPatient.mpiIdentifier= pidNum;
						objPatient.globalAssigningAuthorityName= entity;
						channelMap.put(&apos;mpiIdentifier&apos;,pidNum); 
						channelMap.put(&apos;globalAssigningAuthorityName&apos;,entity);
					} // end if 
				
				} else {
					if(entity != null) {
						// 2022-08-25 JER - Modified from mpi and mpiDomain to mpiIdentifier and globalAssigningAuthorityNameobalAssigningAuthorityName
						objPatient.mpiIdentifier= pidNum;
						objPatient.globalAssigningAuthorityName= entity;
						channelMap.put(&apos;mpiIdentifier&apos;,pidNum); 
						channelMap.put(&apos;globalAssigningAuthorityName&apos;,entity);
					} // end if 
				} // end if 
			} // end for
			
		// PID-18	
		} else if(pid[&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString().length&gt;0) {
				
			// if PID-18.1 exists
			if(pid[&apos;PID.18&apos;][&apos;PID.18.1&apos;]) {
				var pidNum = pid[&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();
			} 
			// if PID-18.4 exists
			if(pid[&apos;PID.18&apos;][&apos;PID.18.4&apos;]) {
				var entity= pid[&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();
			} else {
				var entity= &apos;&apos;;
			} // end if 
			// if PID-18.5 exists
			if(pid[&apos;PID.18&apos;][&apos;PID.18.5&apos;]) {
				var IDCode = pid[&apos;PID.18&apos;][&apos;PID.18.5&apos;].toString();
			} else {
				var IDCode = &apos;&apos;;
			} // end if 
				
			// if pidNum exists 
			if(pidNum) {
				objPatient.identifier= pidNum;
				objPatient.assigningAuthorityName= entity;
				channelMap.put(&apos;identifier&apos;,pidNum); 
				channelMap.put(&apos;assigningAuthorityName&apos;,entity);
			} // end if
			
		} // end if
		
	} // end if 

	// 2024-01-15 JER - Added the handling of the SoftWriters Patient Identifier into alternateIdentifier property
	if(alternateIdentifier) objPatient.alternateIdentifier= alternateIdentifier;
	objPatient.encounterNumber= pid[&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();
	objPatient.firstName= pid[&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString();
	if(pid[&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString().length&gt;0) objPatient.middleName=  pid[&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString();
	objPatient.lastName=  pid[&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString();
	objPatient.dob= pid[&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();
	objPatient.gender= pid[&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString();
	// 2022-04-07 jer - added convertExtendedAddressToJSON method for Patient Address
	/* Patient Address PID.11 (XAD) */
	if(pid[&apos;PID.11&apos;].toString().length&gt;0) objPatient.patientAddress= convertExtendedAddressToJSON(pid[&apos;PID.11&apos;]);

	// 2023-09-10 JER - Added phone numbers (home and business) PID.13 and PID.14
	/* Phone Number - Home (XTN) PID.13 */
	if(pid[&apos;PID.13&apos;].toString().length&gt;0) objPatient.phoneNumberHome= convertExtendedTelecommunicationNumberToJSON(pid[&apos;PID.13&apos;]);
	
	/* Phone Number - Business (XTN) PID.14 */
	if(pid[&apos;PID.14&apos;].toString().length&gt;0) objPatient.phoneNumberBusiness= convertExtendedTelecommunicationNumberToJSON(pid[&apos;PID.14&apos;]);

	/* Patient Account Number (CX) PID.18 */
	if(pid[&apos;PID.18&apos;].toString().length&gt;0) objPatient.patientAccountNumber= pid[&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();
	// 2023-10-09 JER - Added the patient Ethnicity using the convertCodedElementToJSON using PID-22
	if(pid[&apos;PID.22&apos;].toString().length&gt;0) objPatient.ethnicity= convertCodedElementToJSON(pid[&apos;PID.22&apos;])
	/* Patient Death Date and Time PID.29 */
	if(pid[&apos;PID.29&apos;].toString().length&gt;0) objPatient.deathDateTime= pid[&apos;PID.29&apos;][&apos;PID.29.1&apos;].toString();
	/* Patient Death Indicator PID.30 */
	if(pid[&apos;PID.30&apos;].toString().length&gt;0) objPatient.deathIndicator= pid[&apos;PID.30&apos;][&apos;PID.30.1&apos;].toString();

	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objPatient= &apos;+objPatient);
		logger.error(scriptName+&apos;:DEBUG:: stringify(objPatient)= &apos;+JSON.stringify(objPatient));
	}
	
	channelMap.put(&apos;Patient&apos;,JSON.stringify(objPatient));
	return objPatient;
	
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>27b01dc9-fa98-48ff-af65-82929d6dc4d7</id>
        <name>json_pv1_clinician</name>
        <revision>4</revision>
        <lastModified>
          <time>1673290110742</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse HL7v2 message PV1 segment  and return a Javascript object
	
	Filename: json_pv1_clinician.js
	@param {String} pv1 - This will contains the XML representation of the HL7v2 PV1 segment
	@return {String} return - Returning the Javascript object representation of the converted HL7v2 PV1 segment
	History:
	2023-01-09 JER - Modified all physicians to Doctor
	
*/
function json_pv1_clinician(pv1) {

	var scriptName= &apos;json_pv1_clinician&apos;;
	var debug= 0;
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pv1= &apos;+pv1); }

	var arrClinician= new Array();
	
	// Clinician object
	var objClinician= {};
	
	// PV1.7 - attending physician
	// PV1.7.1 - Id Number
	if(pv1[&apos;PV1.7&apos;][&apos;PV1.7.1&apos;].toString().length&gt;0) objClinician.idNumber= pv1[&apos;PV1.7&apos;][&apos;PV1.7.1&apos;].toString();

	// PV1.7.2 - Last/Family Name
	if(pv1[&apos;PV1.7&apos;][&apos;PV1.7.2&apos;].toString().length&gt;0) objClinician.lastName= pv1[&apos;PV1.7&apos;][&apos;PV1.7.2&apos;].toString();

	// PV1.7.3 - First/Given Name
	if(pv1[&apos;PV1.7&apos;][&apos;PV1.7.3&apos;].toString().length&gt;0) objClinician.firstName= pv1[&apos;PV1.7&apos;][&apos;PV1.7.3&apos;].toString();

	// PV1.7.9.1 - Assigning Authority - Namespace Id
	if(pv1[&apos;PV1.7&apos;][&apos;PV1.7.9&apos;][&apos;PV1.7.9.1&apos;].toString().length&gt;0) objClinician.assigningAuthority= pv1[&apos;PV1.7&apos;][&apos;PV1.7.9&apos;][&apos;PV1.7.9.1&apos;].toString();

	if(pv1[&apos;PV1.7&apos;][&apos;PV1.7.1&apos;].toString().length&gt;0) {
		// 2023-01-09 JER - Modified all physicians to Doctor
		// objClinician.clinicanType= &apos;Attending Physician&apos;;
		objClinician.clinicanType= &apos;Doctor&apos;;
		arrClinician.push(objClinician);
	} // end if 
	
	// Clinician object
	var objClinician= {};
	
	// PV1.8 - referring physician
	// PV1.8.1 - Id Number
	if(pv1[&apos;PV1.8&apos;][&apos;PV1.8.1&apos;].toString().length&gt;0) objClinician.idNumber= pv1[&apos;PV1.8&apos;][&apos;PV1.8.1&apos;].toString();

	// PV1.8.2 - Last/Family Name
	if(pv1[&apos;PV1.8&apos;][&apos;PV1.8.2&apos;].toString().length&gt;0) objClinician.lastName= pv1[&apos;PV1.8&apos;][&apos;PV1.8.2&apos;].toString();

	// PV1.8.3 - First/Given Name
	if(pv1[&apos;PV1.8&apos;][&apos;PV1.8.3&apos;].toString().length&gt;0) objClinician.firstName= pv1[&apos;PV1.8&apos;][&apos;PV1.8.3&apos;].toString();

	// PV1.8.9.1 - Assigning Authority - Namespace Id
	if(pv1[&apos;PV1.8&apos;][&apos;PV1.8.9&apos;][&apos;PV1.8.9.1&apos;].toString().length&gt;0) objClinician.assigningAuthority= pv1[&apos;PV1.8&apos;][&apos;PV1.8.9&apos;][&apos;PV1.8.9.1&apos;].toString();

	if(pv1[&apos;PV1.8&apos;][&apos;PV1.8.1&apos;].toString().length&gt;0) {
		// 2023-01-09 JER - Modified all physicians to Doctor
		// objClinician.clinicanType= &apos;Referring Physician&apos;;	
		objClinician.clinicanType= &apos;Doctor&apos;;
		arrClinician.push(objClinician);
	} // end if 
	
	// Clinician object
	var objClinician= {};
	
	// PV1.9 - consulting physician
	// PV1.9.1 - Id Number
	if(pv1[&apos;PV1.9&apos;][&apos;PV1.9.1&apos;].toString().length&gt;0) objClinician.idNumber= pv1[&apos;PV1.9&apos;][&apos;PV1.9.1&apos;].toString();

	// PV1.9.2 - Last/Family Name
	if(pv1[&apos;PV1.9&apos;][&apos;PV1.9.2&apos;].toString().length&gt;0) objClinician.lastName= pv1[&apos;PV1.9&apos;][&apos;PV1.9.2&apos;].toString();

	// PV1.9.3 - First/Given Name
	if(pv1[&apos;PV1.9&apos;][&apos;PV1.9.3&apos;].toString().length&gt;0) objClinician.firstName= pv1[&apos;PV1.9&apos;][&apos;PV1.9.3&apos;].toString();

	// PV1.9.9.1 - Assigning Authority - Namespace Id
	if(pv1[&apos;PV1.9&apos;][&apos;PV1.9.9&apos;][&apos;PV1.9.9.1&apos;].toString().length&gt;0) objClinician.assigningAuthority= pv1[&apos;PV1.9&apos;][&apos;PV1.9.9&apos;][&apos;PV1.9.9.1&apos;].toString();

	if(pv1[&apos;PV1.9&apos;][&apos;PV1.9.1&apos;].toString().length&gt;0) {
		// 2023-01-09 JER - Modified all physicians to Doctor
		// objClinician.clinicanType= &apos;Consulting Physician&apos;;
		objClinician.clinicanType= &apos;Doctor&apos;;
		arrClinician.push(objClinician);
	} // end if 

	// Clinician object
	var objClinician= {};
	
	// PV1.17 - admitting physician
	for each(admittingPhysician in pv1[&apos;PV1.17&apos;]) {
		// PV1.17.1 - Id Number
		if(admittingPhysician[&apos;PV1.17.1&apos;].toString().length&gt;0) objClinician.idNumber= admittingPhysician[&apos;PV1.17.1&apos;].toString();

		// PV1.17.2 - Last/Family Name
		if(admittingPhysician[&apos;PV1.17.2&apos;].toString().length&gt;0) objClinician.lastName= admittingPhysician[&apos;PV1.17.2&apos;].toString();

		// PV1.17.3 - First/Given Name
		if(admittingPhysician[&apos;PV1.17.3&apos;].toString().length&gt;0) objClinician.firstName= admittingPhysician[&apos;PV1.17.3&apos;].toString();

		// PV1.17.9.1 - Assigning Authority - Namespace Id
		if(admittingPhysician[&apos;PV1.17.9&apos;][&apos;PV1.17.9.1&apos;].toString().length&gt;0) objClinician.assigningAuthority= admittingPhysician[&apos;PV1.17.9&apos;][&apos;PV1.17.9.1&apos;].toString();

		if(admittingPhysician[&apos;PV1.17.1&apos;].toString().length&gt;0) {
			// 2023-01-09 JER - Modified all physicians to Doctor
			// objClinician.clinicanType= &apos;Admitting Physician&apos;;
			objClinician.clinicanType= &apos;Doctor&apos;;
			arrClinician.push(objClinician);
		} // end if 
	} // end for each

	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: clinician= &apos;+JSON.stringify(arrClinician));
	}
	
	channelMap.put(&apos;Clinicians&apos;,JSON.stringify(arrClinician));
	return arrClinician;
	
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>9d68bf38-3dce-405f-b051-6098c894cd17</id>
        <name>json_pv1_encounter</name>
        <revision>2</revision>
        <lastModified>
          <time>1676394827377</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse HL7v2 PV1 segment and return a Javascript object

	@param {String} pv1 - This will contains the XML representation of the HL7v2 PV1 segment
	@param {String} patient - This will contains the XML representation of the Javascript patient object
	
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 PV1 segment
	History:
	2023-02-14 JER - Evaluate to capture the encounterType from PV1.2.1
	2022-11-14 JER - Modified from the json_pv1_visit to json_pv1_encounter and removed dependency on the patient object
*/
function json_pv1_encounter(pv1) {
	
	var scriptName= &apos;json_pv1_encounter&apos;;
	var debug= 0;
	var encounter= {};

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pv1= &apos;+JSON.stringify(pv1));
	}
	
	// 2022-08-26 JER - JSON stringify the globalChannel variable - evaluate organization if defined and toString.length GT 0 to persist to visit.organization
	// &quot;organization&quot; : &quot;\&quot;QS1\&quot;&quot;,
	var organization= JSON.stringify(channelMap.get(&apos;organization&apos;)).replace(/[^\w\s]/gi, &apos;&apos;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(organization): &apos;+typeof(organization)+&apos; length: &apos;+organization.length);
	
	if((typeof(organization)!== &apos;undefined&apos;)&amp;&amp;(organization.toString().length&gt;0)) {
		encounter.organization= organization;
	} // end if

	// 2023-02-14 JER - Evaluate to capture the encounterType from PV1.2.1
	if(typeof(pv1[&apos;PV1.2&apos;])!== &apos;undefined&apos;) {
		if(pv1[&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString().length&gt;0) {
			var encounterTypeCode= pv1[&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString();
			if(encounterTypeCode== &apos;E&apos;) {
				encounter.encounterType= &apos;Emergency&apos;;
			} else if(encounterTypeCode== &apos;I&apos;) {
				encounter.encounterType= &apos;Inpatient&apos;;  	
			} else if((encounterTypeCode== &apos;O&apos;)||(encounterTypeCode== &apos;R&apos;)) {
				encounter.encounterType= &apos;Outpatient&apos;;
			} else if(encounterTypeCode== &apos;P&apos;) {
				encounter.encounterType= &apos;PreAdmit&apos;;
			}
		} else {
			encounter.encounterType= &apos;&apos;;
		}
	} // end if 

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(pv1[PV1.3])= &apos;+typeof(pv1[&apos;PV1.3&apos;])+&apos; pv1[PV1.3]= &apos;+pv1[&apos;PV1.3&apos;]); 
	// 2022-08-26 JER - Modified from using object: patient to visit

	if(typeof(pv1[&apos;PV1.3&apos;])!== &apos;undefined&apos;) {
		if(pv1[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString().length&gt;0) {
			encounter.facility= pv1[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString();
		} else {
			encounter.facility= &apos;&apos;;
		}
	} else {
		if((typeof(channelMap.get(&apos;organization&apos;))!== &apos;undefined&apos;)&amp;&amp;(channelMap.get(&apos;organization&apos;).toString().length&gt;0)) {
			encounter.facility= channelMap.get(&apos;organization&apos;);
		} else {
			encounter.facility= &apos;&apos;;
		} // end if 
	} // end if

	if(pv1[&apos;PV1.3&apos;][&apos;PV1.3.1&apos;].toString()) {
		encounter.unit= 	pv1[&apos;PV1.3&apos;][&apos;PV1.3.1&apos;].toString();
	} else {
		encounter.unit=	&apos;&apos;;
	}

	if(pv1[&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString()) {
		encounter.room= 	pv1[&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString();
	} else {
		encounter.room=	&apos;&apos;;
	}

	if(pv1[&apos;PV1.3&apos;][&apos;PV1.3.3&apos;].toString()) {
		encounter.bedID= 	pv1[&apos;PV1.3&apos;][&apos;PV1.3.3&apos;].toString();
	} else {
		encounter.bedID=	&apos;&apos;;
	} // end if 
		

	if(pv1[&apos;PV1.6&apos;][&apos;PV1.6.1&apos;].toString().length&gt;0) {
		encounter.prior_unit= 	pv1[&apos;PV1.6&apos;][&apos;PV1.6.1&apos;].toString();
		encounter.prior_room= 	pv1[&apos;PV1.6&apos;][&apos;PV1.6.2&apos;].toString();
		encounter.prior_bedID=	pv1[&apos;PV1.6&apos;][&apos;PV1.6.3&apos;].toString();
	} else {
		encounter.prior_unit= 	&apos;&apos;;
		encounter.prior_room= 	&apos;&apos;;
		encounter.prior_bedID=	&apos;&apos;;
	}

	// 2022-03-02 JER - Acquire device_Id/room to synchronize data between the Caregility Admin Portal and data table on the BJC side.
	if((typeof(pv1[&apos;PV1.3&apos;][&apos;PV1.3.9&apos;])!== &apos;undefined&apos;)&amp;&amp;(pv1[&apos;PV1.3&apos;][&apos;PV1.3.9&apos;].toString().length&gt;0)) {
		encounter.deviceID= pv1[&apos;PV1.3&apos;][&apos;PV1.3.9&apos;].toString();
		channelMap.put(&apos;deviceID&apos;,encounter.deviceID);
	} // end if 

	if(pv1[&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString()){
		encounter.encounter_identifier= pv1[&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString();
	} else {
		encounter.encounter_identifier= &apos;&apos;;
	} // end if  

	// 2022-03-10 PP - per Greg&apos;s email dated 03/14, Admit/Discharge in YYYYMMDD format
	if(pv1[&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString()){
		encounter.admissionDate= pv1[&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString().substring(0,8);
	} // end if 
	
	// 2022-08-26 JER - Modified from using object: patient to visit
	if(pv1[&apos;PV1.45&apos;][&apos;PV1.45.1&apos;].toString()){
		encounter.dischargeDate= pv1[&apos;PV1.45&apos;][&apos;PV1.45.1&apos;].toString().substring(0,8);
	} else {
		encounter.dischargeDate= &apos;&apos;;
	}
	
	if(debug&gt;0) { logger.error(scriptName+&apos;:DEBUG:: encounter= &apos;+JSON.stringify(encounter)); }

	return encounter;

}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>562b1fd8-8825-47dd-a811-f836954fde33</id>
        <name>json_pv1_visit</name>
        <revision>22</revision>
        <lastModified>
          <time>1694394895383</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse HL7v2 PV1 segment and return a Javascript object

	@param {String} pv1 - This will contains the XML representation of the HL7v2 PV1 segment
	@param {String} patient - This will contains the XML representation of the Javascript patient object
	
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 PV1 segment
	History:
	2022-08-26 JER - JSON stringify the globalChannel variable - evaluate organization if defined and toString.length GT 0 to persist to visit.organization
	2022-08-26 JER - Modified from using object: patient to visit and 
	2022-07-22 JER - Removed dependencies on pid segment
	2022-03-07 JER - Added channelMap.put(&apos;deviceID&apos;,patient.deviceID)
	2022-03-02 JER - Acquire device_Id/room to synchronize data between the Caregility Admin Portal and data table on the BJC side.
	2022-02-28 JER Modified to copy patient.organization to patient.facility if no value for PV1.3.4 element value
*/
function json_pv1_visit(pv1, patient) {

	var scriptName= &apos;json_pv1_visit&apos;;
	var debug= 0;
	
	var objVisit= {};

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pv1= &apos;+pv1+&apos; patient: &apos;+JSON.stringify(patient));
	}
	
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(pv1[PV1.3][PV1.3.4])= &apos;+typeof(pv1[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;])+&apos; pv1[PV1.3][PV1.3.4]= &apos;+pv1[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString()); }

	// 2022-08-26 JER - JSON stringify the globalChannel variable - evaluate organization if defined and toString.length GT 0 to persist to objVisit.organization
	// &quot;organization&quot; : &quot;\&quot;QS1\&quot;&quot;,
	var organization= JSON.stringify(channelMap.get(&apos;organization&apos;)).replace(/[^\w\s]/gi, &apos;&apos;);
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(organization): &apos;+typeof(organization)+&apos; length: &apos;+organization.length); }
	
	if((typeof(organization)!== &apos;undefined&apos;)&amp;&amp;(organization.toString().length&gt;0)) {
		objVisit.organization= organization;
	} // end if

	// 2022-08-26 JER - Modified from using object: patient to visit
	if((typeof(pv1[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;])!== &apos;undefined&apos;)&amp;&amp;(pv1[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString().length&gt;0)) {
		objVisit.facility= pv1[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString();
	} else {
		if((typeof(channelMap.get(&apos;organization&apos;))!== &apos;undefined&apos;)&amp;&amp;(channelMap.get(&apos;organization&apos;).toString().length&gt;0)) {
			objVisit.facility= channelMap.get(&apos;organization&apos;);
		} // end if 
	} // end if
	
	objVisit.unit= 	pv1[&apos;PV1.3&apos;][&apos;PV1.3.1&apos;].toString().replace(&apos;-&apos;,&apos;&apos;);
	objVisit.room= 	pv1[&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString().replace(&apos;-&apos;,&apos;&apos;);
	objVisit.bedID= 	pv1[&apos;PV1.3&apos;][&apos;PV1.3.3&apos;].toString().replace(&apos;-&apos;,&apos;&apos;);
		
	/* 2022-02-27 JER - removed as not storing prior location (i.e. unit, room, bed)
	if(pv1[&apos;PV1.6&apos;][&apos;PV1.6.1&apos;].toString().length&gt;0) {
		patient.prior_unit= 	pv1[&apos;PV1.6&apos;][&apos;PV1.6.1&apos;].toString();
		patient.prior_room= 	pv1[&apos;PV1.6&apos;][&apos;PV1.6.2&apos;].toString();
		patient.prior_bedID=	pv1[&apos;PV1.6&apos;][&apos;PV1.6.3&apos;].toString();
	}
	*/

	// 2022-03-02 JER - Acquire device_Id/room to synchronize data between the Caregility Admin Portal and data table on the BJC side.
	if((typeof(pv1[&apos;PV1.3&apos;][&apos;PV1.3.9&apos;])!== &apos;undefined&apos;)&amp;&amp;(pv1[&apos;PV1.3&apos;][&apos;PV1.3.9&apos;].toString().length&gt;0)) {
		objVisit.deviceID= pv1[&apos;PV1.3&apos;][&apos;PV1.3.9&apos;].toString();
		channelMap.put(&apos;deviceID&apos;,objVisit.deviceID);
	} // end if 

	/* Attending Doctor (XCN) PV1-7 */
	if(pv1[&apos;PV1.7&apos;].toString().length&gt;0) objVisit.attendingDoctor= convertExtendedCompositeIDNumberAndNameToJSON(pv1[&apos;PV1.7&apos;]);

	// 2022-08-26 JER - Modified from using object: patient to visit
	if(pv1[&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString()){
	//	patient.admissionDate= pv1[&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString();
		objVisit.admissionDate= pv1[&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString().substring(0,8);
		if(pv1[&apos;PV1.44&apos;][&apos;PV1.44.2&apos;].toString().length&gt;0) objVisit.admissionTime= pv1[&apos;PV1.44&apos;][&apos;PV1.44.2&apos;].toString().substring(0,8);
	} // end if 
	
	// 2022-08-26 JER - Modified from using object: patient to visit
	if(pv1[&apos;PV1.45&apos;][&apos;PV1.45.1&apos;].toString()){
	//	patient.dischargeDate= pv1[&apos;PV1.45&apos;][&apos;PV1.45.1&apos;].toString();
		objVisit.dischargeDate= pv1[&apos;PV1.45&apos;][&apos;PV1.45.1&apos;].toString().substring(0,8);
		if(pv1[&apos;PV1.45&apos;][&apos;PV1.45.2&apos;].toString().length&gt;0) objVisit.dischargeTime= pv1[&apos;PV1.45&apos;][&apos;PV1.45.2&apos;].toString().substring(0,8);
	}
	
	if(debug&gt;0) { logger.error(scriptName+&apos;:DEBUG:: objVisit= &apos;+JSON.stringify(objVisit)); }
	// 2022-08-26 JER - Modified from using object: patient to objVisit
	return objVisit;

}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>b8a31168-fc3a-4a2c-8999-284b33104067</id>
        <name>json_rol_clinician</name>
        <revision>8</revision>
        <lastModified>
          <time>1673286103839</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse HL7v2 message ROL segment and return a Javascript object
	
	Filename: json_rol_clinician.js
	@param {String} rol - This will contains the XML representation of the HL7v2 ROL segment
	@return {String} return - Returning the Javascript object representation of the converted HL7v2 ROL segment
	History:
	
*/
function json_rol_clinician(rol) {

	var scriptName= &apos;json_rol_clinician&apos;;
	var debug= 0;
	//if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; rol typeof= &apos;+typeof(rol)+&apos; rol: &apos;+rol); 
	//}
	
	// Clinician object
	var objClinician= {};
	
	// ROL.1 - Role Instance Identifier (EI)
	if(rol[&apos;ROL.1&apos;][&apos;ROL.1.1&apos;].toString().length&gt;0) objClinician.id= rol[&apos;ROL.1&apos;][&apos;ROL.1.1&apos;].toString();

	// ROL.2 - Action Code (ID)
	if(rol[&apos;ROL.2&apos;][&apos;ROL.2.1&apos;].toString().length&gt;0) objClinician.actionCode= rol[&apos;ROL.2&apos;][&apos;ROL.2.1&apos;].toString();

	// ROL.3 - Role (Identifier, Text, CodingSystemName, CodingSystemNameOid (CE)
	logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof rol[ROL.3]: &apos;+typeof(rol[&apos;ROL.3&apos;])+&apos; stringify: &apos;+rol[&apos;ROL.3&apos;]);
	if(typeof(rol[&apos;ROL.3&apos;])!== &apos;undefined&apos;) {
		objClinician.role= convertCodedElementToJSON(rol[&apos;ROL.3&apos;]);
	} else {
		objClinician.role= &apos;&apos;;
	} // end if 
	// if(debug&gt;0) 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; objClinician.role: &apos;+JSON.stringify(objClinician.role));
		
	// ROL.4 - Role Person (XCN)
	logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof rol[ROL.4]: &apos;+typeof(rol[&apos;ROL.4&apos;])+&apos; stringify: &apos;+rol[&apos;ROL.4&apos;]);
	if(typeof(rol[&apos;ROL.4&apos;])!== &apos;undefined&apos;) {
		objClinician.rolePerson= convertExtendedCompositeIDNumberAndNameToJSON(rol[&apos;ROL.4&apos;]);
	} else {
		objClinician.rolePerson= &apos;&apos;;
	} // end if 
	// if(debug&gt;0) 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; objClinician.rolePerson: &apos;+JSON.stringify(objClinician.rolePerson));
	
	// ROL.5 - Role Begin DateTime (TS)
	if(typeof(rol[&apos;ROL.5&apos;])!== &apos;undefined&apos;) {
		objClinician.roleBeginDatetime= convertTimestampToJSON(rol[&apos;ROL&apos;][&apos;ROL.5&apos;]);
	} else {
		objClinician.roleBeginDatetime= &apos;&apos;;
	} // end if 
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; objClinician.roleBeginDatetime: &apos;+objClinician.roleBeginDatetime);
	
	// ROL.6 - Role End DateTime (TS)
	if(typeof(rol[&apos;ROL.6&apos;])!== &apos;undefined&apos;) {
		objClinician.roleEndDatetime= convertTimestampToJSON(rol[&apos;ROL&apos;][&apos;ROL.6&apos;]);
	} else {
		objClinician.roleEndDateTime= &apos;&apos;;
	} // end if 
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; objClinician.roleEndDateTime: &apos;+objClinician.roleEndDateTime);
	
	// ROL.7 - Role Duration
	if(typeof(rol[&apos;ROL.7&apos;])!== &apos;undefined&apos;) {
		objClinician.roleDuration= convertCodedElementToJSON(rol[&apos;ROL&apos;][&apos;ROL.7&apos;]);
	} else {
		objClinician.roleDuration= &apos;&apos;;
	} // end if 
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; objClinician.roleDuration: &apos;+objClinician.roleDuration);

	// ROL.8 - Role Action Reason
	if(typeof(rol[&apos;ROL.8&apos;])!== &apos;undefined&apos;) {
		objClinician.roleActionReason= convertCodedElementToJSON(rol[&apos;ROL&apos;][&apos;ROL.8&apos;]);
	} else {
		objClinician.roleActionReason= &apos;&apos;;
	} // end if 
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; objClinician.roleActionReason: &apos;+objClinician.roleActionReason);

	// ROL.9 - Provider Type
	if(typeof(rol[&apos;ROL.9&apos;])!== &apos;undefined&apos;) {
		objClinician.providerType= convertCodedElementToJSON(rol[&apos;ROL&apos;][&apos;ROL.9&apos;]);
	} else {
		objClinician.providerType= &apos;&apos;;
	} // end if 
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; objClinician.providerType: &apos;+objClinician.providerType);

	// ROL.10 - Organization Unit Type
	if(typeof(rol[&apos;ROL.10&apos;])!== &apos;undefined&apos;) {
		objClinician.organizationUnitType= convertCodedElementToJSON(rol[&apos;ROL&apos;][&apos;ROL.10&apos;]);
	} else {
		objClinician.organizationUnitType= &apos;&apos;;
	} // end if 
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; objClinician.organizationUnitType: &apos;+objClinician.organizationUnitType);

	// ROL.11 - Office/Home Address
	if(typeof(rol[&apos;ROL.11&apos;])!== &apos;undefined&apos;) {
		objClinician.officeAddress= convertExtendedAddressToJSON(rol[&apos;ROL&apos;][&apos;ROL.11&apos;]);
	} else {
		objClinician.officeAddress= &apos;&apos;;
	} // end if 
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; objClinician.officeAddress: &apos;+objClinician.officeAddress);

	// ROL.12 - Phone
	if(typeof(rol[&apos;ROL.12&apos;])!== &apos;undefined&apos;) {
		objClinician.phone= convertExtendedTelecommunicationNumberToJSON(rol[&apos;ROL&apos;][&apos;ROL.12&apos;]);
	} else {
		objClinician.phone= &apos;&apos;;
	} // end if 
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; objClinician.phone: &apos;+objClinician.phone);


	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: clinician= &apos;+JSON.stringify(objClinician));
	}
	
	channelMap.put(&apos;Clinician&apos;,JSON.stringify(objClinician));
	return objClinician;
	
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>50c99e0a-74d5-463c-8163-79f3582a81d8</id>
        <name>json_rxd_pharmacy_dispense_order</name>
        <revision>1</revision>
        <lastModified>
          <time>1701312132664</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse HL7v2 Pharmacy/Treatment Dispensed Order (RXD) segment and return a Javascript object

	@param {String} orc - This will contains the XML representation of the HL7v2 RXD segment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 RXD segment
	History:
	2022-04-15 jer - Finalized remaining properties 
	2022-04-14 jer - Created from json_rxd_timing_quantity(rxd) method to populate visit centric content
*/
function json_rxd_pharmacy_dispense_order(rxd) {

	var scriptName= &apos;json_rxd_pharmacy_dispense_order&apos;;
	var debug= 0;
	/*
	logger.error(scriptName+&apos;:DEBUG:: rxd= &apos;+rxd);;
	*/
	var objPharmacyDispenseOrder= {};
	
	// rxd.1 - Dispense SubId Counter
	// if(rxd[&apos;RXD.1&apos;].toString().length&gt;0) objPharmacyDispenseOrder.quantityTiming= convertTimingQuantityToJSON(rxd[&apos;RXD.1&apos;]);
	if(rxd[&apos;RXD.1&apos;].toString().length&gt;0) objPharmacyDispenseOrder.dispenseIdCounter= rxd[&apos;RXD.1&apos;][&apos;RXD.1.1&apos;].toString();

	// rxd.2 - Dispense Give Code
	if(rxd[&apos;RXD.2&apos;].toString().length&gt;0) objPharmacyDispenseOrder.dispenseGiveCode= convertCodedElementToJSON(rxd[&apos;RXD.2&apos;]);
	
	// rxd.3 - DateTime Dispensed
	if(rxd[&apos;RXD.3&apos;].toString().length&gt;0) objPharmacyDispenseOrder.giveAmountMinimum= convertTimestampToJSON(rxd[&apos;RXD.3&apos;]);
	
	// rxd.4 - Actual Dispense Amount
	if(rxd[&apos;RXD.4&apos;].toString().length&gt;0) objPharmacyDispenseOrder.actualDispenseAmount= rxd[&apos;RXD.4&apos;][&apos;RXD.4.1&apos;].toString();
	
	// rxd.5 - Actual Dispense Units
	if(rxd[&apos;RXD.5&apos;].toString().length&gt;0) objPharmacyDispenseOrder.actualDispenseUnits= convertCodedElementToJSON(rxd[&apos;RXD.5&apos;]);
	
	// rxd.6 - Actual Dosage Form
	if(rxd[&apos;RXD.6&apos;].toString().length&gt;0) objPharmacyDispenseOrder.actualDosageForm= convertCodedElementToJSON(rxd[&apos;RXD.6&apos;]);
	
	// rxd.7 - Prescription Number
	if(rxd[&apos;RXD.7&apos;].toString().length&gt;0) objPharmacyDispenseOrder.prescriptionNumber= rxd[&apos;RXD.7&apos;][&apos;RXD.7.1&apos;].toString();

	// rxd.8 - Number of Refills Remaining
	if(rxd[&apos;RXD.8&apos;].toString().length&gt;0) objPharmacyDispenseOrder.refillsRemaining= rxd[&apos;RXD.8&apos;][&apos;RXD.8.1&apos;].toString();
	
	// rxd.9 - Dispense Notes
	if(rxd[&apos;RXD.9&apos;].toString().length&gt;0) objPharmacyDispenseOrder.dispenseNotes= rxd[&apos;RXD.9&apos;][&apos;RXD.9.1&apos;].toString();
	
	// rxd.10 - Dispensing Provider
	if(rxd[&apos;RXD.10&apos;].toString().length&gt;0) objPharmacyDispenseOrder.dispensingProvider=convertExtendedCompositeIDNumberAndNameToJSON(rxd[&apos;RXD.10&apos;]);
	
	// rxd.11 - Substitution Status
	if(rxd[&apos;RXD.11&apos;].toString().length&gt;0) objPharmacyDispenseOrder.substitutionStatus= rxd[&apos;RXD.11&apos;][&apos;RXD.11.1&apos;].toString();
	
	// rxd.12 - Total Daily Dose
	if(rxd[&apos;RXD.12&apos;].toString().length&gt;0) objPharmacyDispenseOrder.totalDailyDose= convertCompositeQuantityWithUnitsToJSON(rxd[&apos;RXD.12&apos;]);
	
	// rxd.13 - Dispense-To Location
	if(rxd[&apos;RXD.13&apos;].toString().length&gt;0) objPharmacyDispenseOrder.dispenseToLocation= 
	convertLocationAddressVariationToJSON(rxd[&apos;RXD.13&apos;]);
	
	// rxd.14 - Needs Human Review 
	if(rxd[&apos;RXD.14&apos;].toString().length&gt;0) objPharmacyDispenseOrder.needsHumanReview= rxd[&apos;RXD.14&apos;][&apos;RXD.14.1&apos;].toString();
	
	// rxd.15 - Pharmacy/Treatment Suppliers Special Dispensing Instructions
	if(rxd[&apos;RXD.15&apos;].toString().length&gt;0) objPharmacyDispenseOrder.pharmacySuppliersSpecialDispensingInstructions= convertCodedElementToJSON(rxd[&apos;RXD.15&apos;]);
	
	// rxd.16 - Actual Strength
	if(rxd[&apos;RXD.16&apos;].toString().length&gt;0) objPharmacyDispenseOrder.actualStrength= rxd[&apos;RXD.16&apos;][&apos;RXD.16.1&apos;].toString();

	// rxd.17 - Actual Strength Units
	if(rxd[&apos;RXD.17&apos;].toString().length&gt;0) objPharmacyDispenseOrder.actualStrengthUnit= convertCodedElementToJSON(rxd[&apos;RXD.17&apos;]);
	
	// rxd.18 - Substance Lot Number
	if(rxd[&apos;RXD.18&apos;].toString().length&gt;0) objPharmacyDispenseOrder.substanceLotNumber= rxd[&apos;RXD.18&apos;][&apos;RXD.18.1&apos;].toString();
	
	// rxd.19 - Substance Expiration Date
	if(rxd[&apos;RXD.19&apos;].toString().length&gt;0) objPharmacyDispenseOrder.substanceExpirationDate=convertTimestampToJSON(rxd[&apos;RXD.19&apos;]);
	
	// rxd.20 - Substance Manufacturer Name
	if(rxd[&apos;RXD.20&apos;].toString().length&gt;0) objPharmacyDispenseOrder.substanceManufacturerName= convertCodedElementToJSON(rxd[&apos;RXD.20&apos;]);
	
	// rxd.21 - Give Indication
	if(rxd[&apos;RXD.21&apos;].toString().length&gt;0) objPharmacyDispenseOrder.giveIndication= convertCodedElementToJSON(rxd[&apos;RXD.21&apos;]);
	
	// rxd.22 - Dispense Package Size
	if(rxd[&apos;RXD.22&apos;].toString().length&gt;0) objPharmacyDispenseOrder.dispensePackageSize= rxd[&apos;RXD.22&apos;][&apos;RXD.22.1&apos;].toString();

	// rxd.23 - Dispense Package Size Unit
	if(rxd[&apos;RXD.23&apos;].toString().length&gt;0) objPharmacyDispenseOrder.dispensePackageSizeUnit= convertCodedElementToJSON(rxd[&apos;RXD.23&apos;]);

	// rxd.24 - Dispense Package Method
	if(rxd[&apos;RXD.24&apos;].toString().length&gt;0) objPharmacyDispenseOrder.dispensePackageMethod= rxd[&apos;RXD.24&apos;][&apos;RXD.24.1&apos;].toString();

	// rxd.25 - Supplementary Code
	if(rxd[&apos;RXD.25&apos;].toString().length&gt;0) objPharmacyDispenseOrder.supplementaryCode= convertCodedElementToJSON(rxd[&apos;RXD.25&apos;]);

	// rxd.26 - Initiating Location
	if(rxd[&apos;RXD.26&apos;].toString().length&gt;0) objPharmacyDispenseOrder.initiatingLocation= convertCodedElementToJSON(rxd[&apos;RXD.26&apos;]);

	// rxd.27 - Packaging/Assembly Location
	if(rxd[&apos;RXD.27&apos;].toString().length&gt;0) objPharmacyDispenseOrder.packagingLocation= convertCodedElementToJSON(rxd[&apos;RXD.27&apos;]);

	// rxd.28 - Actual Drug Strength Volume
	if(rxd[&apos;RXD.28&apos;].toString().length&gt;0) objPharmacyDispenseOrder.actualDrugStrengthVolume= rxd[&apos;RXD.28&apos;][&apos;RXD.28.1&apos;].toString();

	// rxd.29 - Actual Drug Strength Volume Units
	if(rxd[&apos;RXD.29&apos;].toString().length&gt;0) objPharmacyDispenseOrder.actualDrugStrengthVolumeUnits= convertCodedWithExceptionsToJSON(rxd[&apos;RXD.29&apos;]);

	// rxd.30 - Dispense to Pharmacy
	if(rxd[&apos;RXD.30&apos;].toString().length&gt;0) objPharmacyDispenseOrder.dispenseToPharmacy= convertCodedWithExceptionsToJSON(rxd[&apos;RXD.30&apos;]);
	
	// rxd.31 - Dispense to Pharmacy Address
	if(rxd[&apos;RXD.31&apos;].toString().length&gt;0) objPharmacyDispenseOrder.dispenseToPharmacyAddress= convertExtendedAddressToJSON(rxd[&apos;RXD.31&apos;]);

	// rxd.32 - Pharmacy Order Type
	if(rxd[&apos;RXD.32&apos;].toString().length&gt;0) objPharmacyDispenseOrder.pharmacyOrderType= rxd[&apos;RXD.32&apos;][&apos;RXD.32.1&apos;].toString();

	// rxd.33 - Dispense Type
	if(rxd[&apos;RXD.33&apos;].toString().length&gt;0) objPharmacyDispenseOrder.dispenseType= convertCodedWithExceptionsToJSON(rxd[&apos;RXD.33&apos;]);

	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objPharmacyDispenseOrder= &apos;+objPharmacyDispenseOrder);
		logger.error(scriptName+&apos;:DEBUG:: commonOrder= &apos;+JSON.stringify(objPharmacyDispenseOrder));
	}
	
	channelMap.put(&apos;PharmacyEncodedOrder&apos;,JSON.stringify(objPharmacyDispenseOrder));
	return objPharmacyDispenseOrder;
	
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>4797d1ea-5a48-4474-80d6-9fce7cac4506</id>
        <name>json_rxe_pharmacy_encoded_order</name>
        <revision>2</revision>
        <lastModified>
          <time>1689376220851</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse HL7v2 Pharmacy/Treatment Encoded Order (RXE) segment and return a Javascript object

	@param {String} orc - This will contains the XML representation of the HL7v2 RXE segment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 RXE segment
	History:
	2022-04-12 jer - Added RXE-11 through RXE-44
	2022-04-11 jer - Added RXE-6 through RXE-10
	2022-04-07 jer - Created from json_rxe_timing_quantity(rxe) method to populate visit centric content
*/
function json_rxe_pharmacy_encoded_order(rxe) {

	var scriptName= &apos;json_rxe_pharmacy_encoded_order&apos;;
	var debug= 0;
	/*
	logger.error(scriptName+&apos;:DEBUG:: rxe= &apos;+rxe);;
	*/
	var objPharmacyEncodedOrder= {};
	
	// RXE.1 - Quantity/Timing
	if(rxe[&apos;RXE.1&apos;].toString().length&gt;0) objPharmacyEncodedOrder.quantityTiming= convertTimingQuantityToJSON(rxe[&apos;RXE.1&apos;]);
	// if(rxe[&apos;RXE.1&apos;].toString().length&gt;0) objPharmacyEncodedOrder.setId= rxe[&apos;RXE.1&apos;][&apos;RXE.1.1&apos;].toString();

	// RXE.2 - Give Code
	if(rxe[&apos;RXE.2&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveCode= convertCodedElementToJSON(rxe[&apos;RXE.2&apos;]);
	
	// RXE.3 - Give Amount - Minimum
	if(rxe[&apos;RXE.3&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveAmountMinimum= rxe[&apos;RXE.3&apos;][&apos;RXE.3.1&apos;].toString();
	
	// RXE.4 - Give Amount - Maximum
	if(rxe[&apos;RXE.4&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveAmountMaximum= rxe[&apos;RXE.4&apos;][&apos;RXE.4.1&apos;].toString();
	
	// RXE.5 - Give Units
	if(rxe[&apos;RXE.5&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveUnits= convertCodedElementToJSON(rxe[&apos;RXE.5&apos;]);
	
	// RXE.6 - Give Dosage Form
	if(rxe[&apos;RXE.6&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveDosageForm= convertCodedElementToJSON(rxe[&apos;RXE.6&apos;]);
	
	// RXE.7 - Provider&apos;s Administration Instructions
	if(rxe[&apos;RXE.7&apos;].toString().length&gt;0) objPharmacyEncodedOrder.provideAdminInstructions= convertCodedElementToJSON(rxe[&apos;RXE.7&apos;]);
	
	// RXE.8 - Deliver-To Location
	if(rxe[&apos;RXE.8&apos;].toString().length&gt;0) objPharmacyEncodedOrder.deliverToLocation= 
	convertLocationAddressVariationToJSON(rxe[&apos;RXE.8&apos;]);
	
	// RXE.9 - Substitution Status
	if(rxe[&apos;RXE.9&apos;].toString().length&gt;0) objPharmacyEncodedOrder.substitutionStatus= rxe[&apos;RXE.9&apos;][&apos;RXE.9.1&apos;].toString();
	
	// RXE.10 - Dispense Amount
	if(rxe[&apos;RXE.10&apos;].toString().length&gt;0) objPharmacyEncodedOrder.dispenseAmount= rxe[&apos;RXE.10&apos;][&apos;RXE.10.1&apos;].toString();
	
	// RXE.11 - Dispense Units
	if(rxe[&apos;RXE.11&apos;].toString().length&gt;0) objPharmacyEncodedOrder.dispenseUnits= convertCodedElementToJSON(rxe[&apos;RXE.11&apos;]);
	
	// RXE.12 - Number of Refills
	if(rxe[&apos;RXE.12&apos;].toString().length&gt;0) objPharmacyEncodedOrder.substitutionStatus= rxe[&apos;RXE.12&apos;][&apos;RXE.12.1&apos;].toString();
	
	// RXE.13 - Order Provider&apos;s DEA Number
	if(rxe[&apos;RXE.13&apos;].toString().length&gt;0) objPharmacyEncodedOrder.orderingProviderDEANumber=convertExtendedCompositeIDNumberAndNameToJSON(rxe[&apos;RXE.13&apos;]);
	
	// RXE.14 - Pharamcist/Treatment Supplier Verifier Id
	if(rxe[&apos;RXE.14&apos;].toString().length&gt;0) objPharmacyEncodedOrder.pharmacistSupplierVerifierId=convertExtendedCompositeIDNumberAndNameToJSON(rxe[&apos;RXE.14&apos;]); 

	// RXE.15 - Prescription Number
	if(rxe[&apos;RXE.15&apos;].toString().length&gt;0) objPharmacyEncodedOrder.prescriptionNumber= rxe[&apos;RXE.15&apos;][&apos;RXE.15.1&apos;].toString();
	
	// RXE.16 - Number of Refills Remaining
	if(rxe[&apos;RXE.16&apos;].toString().length&gt;0) objPharmacyEncodedOrder.refillsRemaining= rxe[&apos;RXE.16&apos;][&apos;RXE.16.1&apos;].toString();
	
	// RXE.17 - Number of Refills/Doses Dispensed
	if(rxe[&apos;RXE.17&apos;].toString().length&gt;0) objPharmacyEncodedOrder.refillsDispensed= rxe[&apos;RXE.17&apos;][&apos;RXE.17.1&apos;].toString();

	// RXE.18 - DateTime of Most Recent Refill or Dose Dispensed
	if(rxe[&apos;RXE.18&apos;].toString().length&gt;0) objPharmacyEncodedOrder.mostRecentRefillOrDispensed=convertTimestampToJSON(rxe[&apos;RXE.18&apos;]);

	// RXE.19 - Total Daily Dose
	if(rxe[&apos;RXE.19&apos;].toString().length&gt;0) objPharmacyEncodedOrder.totalDailyDose= convertCompositeQuantityWithUnitsToJSON(rxe[&apos;RXE.19&apos;]);

	// RXE.20 - Needs Human Review
	if(rxe[&apos;RXE.20&apos;].toString().length&gt;0) objPharmacyEncodedOrder.refillsDispensed= rxe[&apos;RXE.20&apos;][&apos;RXE.20.1&apos;].toString();

	// RXE.21 - Pharmacy/Treatment Suppliers Special Dispensing Instructions
	if(rxe[&apos;RXE.21&apos;].toString().length&gt;0) objPharmacyEncodedOrder.pharmacySuppliersSpecialDispensingInstructions= convertCodedElementToJSON(rxe[&apos;RXE.21&apos;]);

	// RXE.22 - Give Per
	if(rxe[&apos;RXE.22&apos;].toString().length&gt;0) objPharmacyEncodedOrder.givePer= rxe[&apos;RXE.22&apos;][&apos;RXE.22.1&apos;].toString();
	
	// RXE.23 - Give Rate Amount
	if(rxe[&apos;RXE.23&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveRateAmount= rxe[&apos;RXE.23&apos;][&apos;RXE.23.1&apos;].toString();

	// RXE.24 - Give Rate Units
	if(rxe[&apos;RXE.24&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveRateUnits= convertCodedElementToJSON(rxe[&apos;RXE.24&apos;]);

	// RXE.25 - Give Strength
	if(rxe[&apos;RXE.25&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveStrength= rxe[&apos;RXE.25&apos;][&apos;RXE.25.1&apos;].toString();

	// RXE.26 - Give Strength Units
	if(rxe[&apos;RXE.26&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveStrengthUnits= convertCodedElementToJSON(rxe[&apos;RXE.26&apos;]);

	// RXE.27 - Give Indication
	if(rxe[&apos;RXE.27&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveIndication= convertCodedElementToJSON(rxe[&apos;RXE.27&apos;]);
	
	// RXE.28 - Dispense Package Size
	if(rxe[&apos;RXE.28&apos;].toString().length&gt;0) objPharmacyEncodedOrder.dispensePackageSize= rxe[&apos;RXE.28&apos;][&apos;RXE.28.1&apos;].toString();

	// RXE.29 - Dispense Package Size Unit
	if(rxe[&apos;RXE.29&apos;].toString().length&gt;0) objPharmacyEncodedOrder.dispensePackageSizeUnit= convertCodedElementToJSON(rxe[&apos;RXE.29&apos;]);

	// RXE.30 - Dispense Package Method
	if(rxe[&apos;RXE.30&apos;].toString().length&gt;0) objPharmacyEncodedOrder.dispensePackageMethod= rxe[&apos;RXE.30&apos;][&apos;RXE.30.1&apos;].toString();

	// RXE.31 - Supplementary Code
	if(rxe[&apos;RXE.31&apos;].toString().length&gt;0) objPharmacyEncodedOrder.supplementaryCode= convertCodedElementToJSON(rxe[&apos;RXE.31&apos;]);

	// RXE.32 - Original Order DateTime
	if(rxe[&apos;RXE.32&apos;].toString().length&gt;0) objPharmacyEncodedOrder.originalOrderDateTime=convertTimestampToJSON(rxe[&apos;RXE.32&apos;]);

	// RXE.33 - Give Drug Strength Volume
	if(rxe[&apos;RXE.33&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveDrugStengthVolume= rxe[&apos;RXE.33&apos;][&apos;RXE.33.1&apos;].toString();

	// RXE.34 - Give Drug Stength Volume Units
	if(rxe[&apos;RXE.34&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveDrugStengthVolumeUnits= convertCodedWithExceptionsToJSON(rxe[&apos;RXE.34&apos;]);
	
	// RXE.35 - Controlled Substance Schedule
	if(rxe[&apos;RXE.35&apos;].toString().length&gt;0) objPharmacyEncodedOrder.controlledSubstanceSchedule= convertCodedWithExceptionsToJSON(rxe[&apos;RXE.35&apos;]);

	// RXE.36 - Formulary Status
	if(rxe[&apos;RXE.36&apos;].toString().length&gt;0) objPharmacyEncodedOrder.formularyStatus= rxe[&apos;RXE.36&apos;][&apos;RXE.36.1&apos;].toString();

	// RXE.37 - Pharmaceutical Substance Alternative
	if(rxe[&apos;RXE.37&apos;].toString().length&gt;0) objPharmacyEncodedOrder.pharmaceuticalSubstanceAlternative= convertCodedWithExceptionsToJSON(rxe[&apos;RXE.37&apos;]);

	// RXE.38 - Pharmacy of Most Recent Fill
	if(rxe[&apos;RXE.38&apos;].toString().length&gt;0) objPharmacyEncodedOrder.pharmacyMostRecentFill= convertCodedWithExceptionsToJSON(rxe[&apos;RXE.38&apos;]);

	// RXE.39 - Initial Dispense Amount
	if(rxe[&apos;RXE.39&apos;].toString().length&gt;0) objPharmacyEncodedOrder.initialDispenseAmount= rxe[&apos;RXE.39&apos;][&apos;RXE.39.1&apos;].toString();

	// RXE.40 - Dispensing Pharmacy
	if(rxe[&apos;RXE.40&apos;].toString().length&gt;0) objPharmacyEncodedOrder.dispensingPharmacy= convertCodedWithExceptionsToJSON(rxe[&apos;RXE.40&apos;]);

	// RXE.41 - Dispensing Pharmacy Address
	if(rxe[&apos;RXE.41&apos;].toString().length&gt;0) objPharmacyEncodedOrder.dispensingPharmacyAddress= convertExtendedAddressToJSON(rxe[&apos;RXE.41&apos;]);

	// RXE.42 - Deliver to Patient Location
	if(rxe[&apos;RXE.42&apos;].toString().length&gt;0) objPharmacyEncodedOrder.deliverToPatientLocation= convertPersonLocationToJSON(rxe[&apos;RXE.42&apos;]);

	// RXE.43 - Deliver to Address
	if(rxe[&apos;RXE.43&apos;].toString().length&gt;0) objPharmacyEncodedOrder.deliverToAddress= convertExtendedAddressToJSON(rxe[&apos;RXE.43&apos;]);

	// RXE.44 - Pharmacy Order Type
	if(rxe[&apos;RXE.44&apos;].toString().length&gt;0) objPharmacyEncodedOrder.pharmacyOrderType= rxe[&apos;RXE.44&apos;][&apos;RXE.44.1&apos;].toString();

	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objPharmacyEncodedOrder= &apos;+objPharmacyEncodedOrder);
		logger.error(scriptName+&apos;:DEBUG:: commonOrder= &apos;+JSON.stringify(objPharmacyEncodedOrder));
	}
	
	channelMap.put(&apos;PharmacyEncodedOrder&apos;,JSON.stringify(objPharmacyEncodedOrder));
	return objPharmacyEncodedOrder;
	
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>b32eccc4-2348-432b-b58a-da794913d1ee</id>
        <name>json_rxo_pharmacy_treatment_order</name>
        <revision>1</revision>
        <lastModified>
          <time>1694397935953</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse HL7v2 Pharmacy/Treatment Order (RXO) segment and return a Javascript object

	@param {String} orc - This will contains the XML representation of the HL7v2 rxo segment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 rxo segment
	History:
	2022-04-12 jer - Added rxo-11 through rxo-44
	2022-04-11 jer - Added rxo-6 through rxo-10
	2022-04-07 jer - Created from json_rxo_timing_quantity(rxo) method to populate visit centric content
*/
function json_rxo_pharmacy_treatment_order(rxo) {

	var scriptName= &apos;json_rxo_pharmacy_treatment_order&apos;;
	var debug= 0;
	/*
	logger.error(scriptName+&apos;:DEBUG:: rxo= &apos;+rxo);;
	*/
	var objPharmacyTreatmentOrder= {};
	
	// rxo.1 - Requested Give Code
	if(rxo[&apos;rxo.1&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveCode= convertCodedElementToJSON(rxo[&apos;rxo.1&apos;]);
	
	// rxo.2 - Requested Give Amount - Minimum
	if(rxo[&apos;rxo.2&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveAmountMinimum= rxo[&apos;rxo.2&apos;][&apos;rxo.2.1&apos;].toString();
	
	// rxo.3 - Requested Give Amount - Maximum
	if(rxo[&apos;rxo.3&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveAmountMaximum= rxo[&apos;rxo.3&apos;][&apos;rxo.3.1&apos;].toString();
	
	// rxo.4 - Requested Give Units
	if(rxo[&apos;rxo.4&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveUnits= convertCodedElementToJSON(rxo[&apos;rxo.4&apos;]);
	
	// rxo.5 - Requested Give Dosage Form
	if(rxo[&apos;rxo.5&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveDosageForm= convertCodedElementToJSON(rxo[&apos;rxo.5&apos;]);
	
	// rxo.6 - Provider&apos;s Treatment Instructions
	if(rxo[&apos;rxo.6&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.providerTreatmentInstructions= convertCodedElementToJSON(rxo[&apos;rxo.6&apos;]);
	
	// rxo.7 - Provider&apos;s Administration Instructions
	if(rxo[&apos;rxo.7&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.providerAdminInstructions= convertCodedElementToJSON(rxo[&apos;rxo.7&apos;]);
	
	// rxo.8 - Deliver-To Location
	if(rxo[&apos;rxo.8&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.deliverToLocation= convertLocationAddressVariationToJSON(rxo[&apos;rxo.8&apos;]);
	
	// rxo.9 - Allow Substitutions ID
	if(rxo[&apos;rxo.9&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.allowSubstitutions= rxo[&apos;rxo.9&apos;][&apos;rxo.9.1&apos;].toString();

	// rxo.10 - Requested Dispense Code
	if(rxo[&apos;rxo.10&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedDispenseCode= rxo[&apos;rxo.10&apos;][&apos;rxo.10.1&apos;].toString();

	// rxo.11 - Requested Dispense Amount
	if(rxo[&apos;rxo.11&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedDispenseAmount= rxo[&apos;rxo.10&apos;][&apos;rxo.11.1&apos;].toString();
	
	// rxo.12 - Requested Dispense Units
	if(rxo[&apos;rxo.12&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedDispenseUnits= convertCodedElementToJSON(rxo[&apos;rxo.12&apos;]);
	
	// rxo.13 - Number of Refills
	if(rxo[&apos;rxo.13&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.numberOfRefills= rxo[&apos;rxo.13&apos;][&apos;rxo.13.1&apos;].toString();
	
	// rxo.14 - Order Provider&apos;s DEA Number
	if(rxo[&apos;rxo.14&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.orderingProviderDEANumber=convertExtendedCompositeIDNumberAndNameToJSON(rxo[&apos;rxo.14&apos;]);
	
	// rxo.15 - Pharamcist/Treatment Supplier Verifier Id
	if(rxo[&apos;rxo.15&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.pharmacistSupplierVerifierId=convertExtendedCompositeIDNumberAndNameToJSON(rxo[&apos;rxo.15&apos;]); 

	// rxo.16 - Needs Human Review
	if(rxo[&apos;rxo.16&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.needsHumanReview= rxo[&apos;rxo.16&apos;][&apos;rxo.16.1&apos;].toString();

	// rxo.17 - Requested Give Per
	if(rxo[&apos;rxo.17&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGivePer= rxo[&apos;rxo.17&apos;][&apos;rxo.17.1&apos;].toString();

	// rxo.18 - Requested Give Strength
	if(rxo[&apos;rxo.18&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveStrength= rxo[&apos;rxo.18&apos;][&apos;rxo.18.1&apos;].toString();

	// rxo.19 - Requested Give Strength Units
	if(rxo[&apos;rxo.19&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveStrengthUnits= convertCodedElementToJSON(rxo[&apos;rxo.19&apos;]);

	// rxo.20 - Requested Give Indication
	if(rxo[&apos;rxo.20&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveIndication= convertCodedElementToJSON(rxo[&apos;rxo.20&apos;]);
	
	// rxo.21 - Requested Give Rate Amount
	if(rxo[&apos;rxo.21&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveRateAmount= rxo[&apos;rxo.23&apos;][&apos;rxo.21.1&apos;].toString();

	// rxo.22 - Requested Give Rate Units
	if(rxo[&apos;rxo.22&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveRateUnits= convertCodedElementToJSON(rxo[&apos;rxo.22&apos;]);
	
	// rxo.23 - Total Daily Dose
	if(rxo[&apos;rxo.23&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.totalDailyDose= convertCompositeQuantityWithUnitsToJSON(rxo[&apos;rxo.23&apos;]);
	
	// rxo.24 - Supplementary Code
	if(rxo[&apos;rxo.24&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.supplementaryCode= convertCodedElementToJSON(rxo[&apos;rxo.24&apos;]);

	// rxo.25 - Requested Give Drug Strength Volume
	if(rxo[&apos;rxo.25&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveDrugStengthVolume= rxo[&apos;rxo.25&apos;][&apos;rxo.25.1&apos;].toString();

	// rxo.26 - Give Drug Stength Volume Units
	if(rxo[&apos;rxo.26&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveDrugStengthVolumeUnits= convertCodedWithExceptionsToJSON(rxo[&apos;rxo.26&apos;]);
	
	// rxo.27 - Pharmacy Order Type
	if(rxo[&apos;rxo.27&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.pharmacyOrderType= rxo[&apos;rxo.27&apos;][&apos;rxo.27.1&apos;].toString();

	// rxo.28 - Dispensing Interval
	if(rxo[&apos;rxo.28&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.dispensingInterval= rxo[&apos;rxo.28&apos;][&apos;rxo.28.1&apos;].toString();

	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objPharmacyTreatmentOrder= &apos;+objPharmacyTreatmentOrder);
		logger.error(scriptName+&apos;:DEBUG:: commonOrder= &apos;+JSON.stringify(objPharmacyTreatmentOrder));
	}
	
	channelMap.put(&apos;PharmacyTreatmentOrder&apos;,JSON.stringify(objPharmacyTreatmentOrder));
	return objPharmacyTreatmentOrder;
	
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>f911f482-9001-4458-960f-b3bd3084a797</id>
        <name>json_rxr_pharmacy_treatment_route</name>
        <revision>1</revision>
        <lastModified>
          <time>1701312132721</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse HL7v2 Pharmacy/Treatment Route (RXR) segment and return a Javascript object

	@param {String} orc - This will contains the XML representation of the HL7v2 RXR segment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 RXR segment
	History:
	2022-04-15 jer - Finalized the script
	2022-04-14 jer - Created from json_rxd_timing_quantity(rxr) method to populate visit centric content
*/
function json_rxr_pharmacy_treatment_route(rxr) {

	var scriptName= &apos;json_rxr_pharmacy_treatment_route&apos;;
	var debug= 0;
	/*
	logger.error(scriptName+&apos;:DEBUG:: rxr= &apos;+rxr);;
	*/
	var objPharmacyTreatmentRoute= {};
	
	// rxr.1 - Route
	if(rxr[&apos;RXR.1&apos;].toString().length&gt;0) objPharmacyTreatmentRoute.route= rxr[&apos;RXR.1&apos;][&apos;RXR.1.1&apos;].toString();

	// rxr.2 - Administrative Site
	if(rxr[&apos;RXR.2&apos;].toString().length&gt;0) objPharmacyTreatmentRoute.administrativeSite= convertCodedWithExceptionsToJSON(rxr[&apos;RXR.2&apos;]);
	
	// rxr.3 - Adminisrative Device
	if(rxr[&apos;RXR.3&apos;].toString().length&gt;0) objPharmacyTreatmentRoute.administrativeDevice= convertCodedElementToJSON(rxr[&apos;RXR.3&apos;]);
	
	// rxr.4 - Adminisrative Method
	if(rxr[&apos;RXR.4&apos;].toString().length&gt;0) objPharmacyTreatmentRoute.administrativeMethod= convertCodedWithExceptionsToJSON(rxr[&apos;RXR.4&apos;]);
	
	// rxr.5 - Routing Instructions
	if(rxr[&apos;RXR.5&apos;].toString().length&gt;0) objPharmacyTreatmentRoute.routingInstructions= convertCodedElementToJSON(rxr[&apos;RXR.5&apos;]);
	
	// rxr.6 - Administrative Site Modifier
	if(rxr[&apos;RXR.6&apos;].toString().length&gt;0) objPharmacyTreatmentRoute.administrativeSiteModifier= convertCodedWithExceptionsToJSON(rxr[&apos;RXR.6&apos;]);

	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objPharmacyTreatmentRoute= &apos;+objPharmacyTreatmentRoute);
		logger.error(scriptName+&apos;:DEBUG:: Pharmacy Treatment Route= &apos;+JSON.stringify(objPharmacyTreatmentRoute));
	}
	
	channelMap.put(&apos;PharmacyTreatmentRoute&apos;,JSON.stringify(objPharmacyTreatmentRoute));
	return objPharmacyTreatmentRoute;
	
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>1f72c115-ff36-4790-98ee-3876f305fdd8</id>
        <name>json_tq1_timing_quantity</name>
        <revision>15</revision>
        <lastModified>
          <time>1702399146040</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse HL7v2 TQ1 segment and return a Javascript object

	@param {String} orc - This will contains the XML representation of the HL7v2 TQ1 segment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 TQ1 segment
	History:
	2023-12-12 JER - Modified to handle multiple values in Timing Quantity Explicit Time TQ1.4
	2022-04-07 jer - Created from json_tq1_timing_quantity(tq1) method to populate visit centric content
*/
function json_tq1_timing_quantity(tq1) {

	var scriptName= &apos;json_tq1_timing_quantity&apos;;
	var debug= 0;
	/*
	logger.error(scriptName+&apos;:DEBUG:: tq1= &apos;+tq1);;
	*/
	var objTimingQuantity= {};
	
	if(tq1[&apos;TQ1.1&apos;].toString().length&gt;0) objTimingQuantity.setId= tq1[&apos;TQ1.1&apos;][&apos;TQ1.1.1&apos;].toString();
	// 2022-04-07 jer - Added convertCompositeQuantityWithUnitsToJSON code template
	if(tq1[&apos;TQ1.2&apos;].toString().length&gt;0) objTimingQuantity.quantity= convertCompositeQuantityWithUnitsToJSON(tq1[&apos;TQ1.2&apos;]);
	if(tq1[&apos;TQ1.3&apos;].toString().length&gt;0) objTimingQuantity.repeatPattern= convertRepeatPatternToJSON(tq1[&apos;TQ1.3&apos;]);
	// 2023-12-12 JER - Modified to handle multiple values in Timing Quantity Explicit Time TQ1.4
	if(tq1[&apos;TQ1.4&apos;].toString().length&gt;0) {
		if(tq1[&apos;TQ1.4&apos;][&apos;TQ1.4.1&apos;].length()&gt;1) {
			var arrExplicitTime= [];
			for each(explicitTime in tq1[&apos;TQ1.4&apos;][&apos;TQ1.4.1&apos;]) {
				var objExplicitTime= {};
				objExplicitTime.explicitTime= explicitTime.toString();
				if(debug&gt;0) logger.error(&apos;DEBUG::objExplicitTime: &apos;+JSON.stringify(objExplicitTime));&#xd;				arrExplicitTime.push(objExplicitTime);
			} // end for each
			if(debug&gt;0) logger.error(&apos;DEBUG::arrExplicitTime: &apos;+JSON.stringify(arrExplicitTime));
			objTimingQuantity= arrExplicitTime;
			if(debug&gt;0) logger.debug(&apos;DEBUG::Code Template:&apos;+scriptName+&apos; List of Explicit Time(s): &apos;+JSON.stringify(arrExplicitTime));
		} else {
			objTimingQuantity.explicitTime= tq1[&apos;TQ1.4&apos;][&apos;TQ1.4.1&apos;].toString();
			if(debug&gt;0) logger.debug(&apos;DEBUG::Code Template:&apos;+scriptName+&apos; Singular Explicit Time: &apos;+arrExplicitTime);
		} // end if 
	} // end if 
	// if(tq1[&apos;TQ1.4&apos;].toString().length&gt;0) objTimingQuantity.explicitTime= tq1[&apos;TQ1.4&apos;][&apos;TQ1.4.1&apos;][0].toString();
	if(tq1[&apos;TQ1.5&apos;].toString().length&gt;0) objTimingQuantity.relativeTimeAndUnits= convertCompositeQuantityWithUnitsToJSON(tq1[&apos;TQ1.5&apos;]);
	if(tq1[&apos;TQ1.6&apos;].toString().length&gt;0) objTimingQuantity.serviceDuration= convertCompositeQuantityWithUnitsToJSON(tq1[&apos;TQ1.6&apos;]);
	if(tq1[&apos;TQ1.7&apos;].toString().length&gt;0) objTimingQuantity.startDateTime= convertTimestampToJSON(tq1[&apos;TQ1.7&apos;]);
	if(tq1[&apos;TQ1.8&apos;].toString().length&gt;0) objTimingQuantity.endDateTime= convertTimestampToJSON(tq1[&apos;TQ1.8&apos;]);
	if(tq1[&apos;TQ1.9&apos;].toString().length&gt;0) objTimingQuantity.priority= convertCodedWithExceptionsToJSON(tq1[&apos;TQ1.9&apos;]);	
	if(tq1[&apos;TQ1.10&apos;].toString().length&gt;0) objTimingQuantity.conditionText= tq1[&apos;TQ1.10&apos;][&apos;TQ1.10.1&apos;].toString();
	if(tq1[&apos;TQ1.11&apos;].toString().length&gt;0) objTimingQuantity.textInstruction= tq1[&apos;TQ1.11&apos;][&apos;TQ1.11.1&apos;].toString();
	if(tq1[&apos;TQ1.12&apos;].toString().length&gt;0) objTimingQuantity.conjunction= tq1[&apos;TQ1.12&apos;][&apos;TQ1.12.1&apos;].toString();
	if(tq1[&apos;TQ1.13&apos;].toString().length&gt;0) objTimingQuantity.occurenceDuration= convertCompositeQuantityWithUnitsToJSON(tq1[&apos;TQ1.13&apos;]);
	if(tq1[&apos;TQ1.14&apos;].toString().length&gt;0) objTimingQuantity.totalOccurrences= tq1[&apos;TQ1.14&apos;][&apos;TQ1.14.1&apos;].toString();
	
	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objTimingQuantity= &apos;+objTimingQuantity);
		logger.error(scriptName+&apos;:DEBUG:: commonOrder= &apos;+JSON.stringify(objTimingQuantity));
	}
	
	channelMap.put(&apos;timingQuantity&apos;,JSON.stringify(objTimingQuantity));
	return objTimingQuantity;
	
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>657afa1d-6f97-460d-a4c8-8e24f283de40</id>
        <name>json_zpi_add_prescription_information</name>
        <revision>1</revision>
        <lastModified>
          <time>1701312132778</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse Soft Writers Framework HL7 Additional Prescription Information Segment (ZPI) segment and return a Javascript object

	@param {String} zpi - This will contains the XML representation of the HL7v2 ZPI segment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 ZPI segment
	History:
	2022-04-15 jer - Finalized remaining properties 
	2022-04-14 jer - Created from json_zpi_add_prescription_information(zpi) method to populate additional prescription information content
*/
function json_zpi_add_prescription_information(zpi) {

	var scriptName= &apos;json_zpi_add_prescription_information&apos;;
	var debug= 0;
	/*
	logger.error(scriptName+&apos;:DEBUG:: zpi= &apos;+zpi);;
	*/
	var objAddPrescriptionInfo= {};
	
	// zpi.1 - Package Type (type: ST, len: 10)
	if(zpi[&apos;ZPI.1&apos;].toString().length&gt;0) objAddPrescriptionInfo.packageType= zpi[&apos;ZPI.1&apos;][&apos;ZPI.1.1&apos;].toString();

	// zpi.2 - Number of Labels (type: NM, len: 5)
	if(zpi[&apos;ZPI.2&apos;].toString().length&gt;0) objAddPrescriptionInfo.numberOfLabels= zpi[&apos;ZPI.2&apos;][&apos;ZPI.2.1&apos;].toString();
	
	// zpi.3 - Label Quantity (type: NM, len: 18)
	if(zpi[&apos;ZPI.3&apos;].toString().length&gt;0) objAddPrescriptionInfo.labelQuantity= zpi[&apos;ZPI.3&apos;][&apos;ZPI.3.1&apos;].toString();
	
	// zpi.4 - Zone (type: ST, len: 10)
	if(zpi[&apos;ZPI.4&apos;].toString().length&gt;0) objAddPrescriptionInfo.zone= zpi[&apos;ZPI.4&apos;][&apos;ZPI.4.1&apos;].toString();
	
	// zpi.5 - Prescription Bin (type: ST, len: 10)
	if(zpi[&apos;ZPI.5&apos;].toString().length&gt;0) objAddPrescriptionInfo.prescriptionBin= zpi[&apos;ZPI.5&apos;][&apos;ZPI.5.1&apos;].toString();
	
	// zpi.6 - Total Quantity Written (type: NM, len: 18)
	if(zpi[&apos;ZPI.6&apos;].toString().length&gt;0) objAddPrescriptionInfo.totalQuantityWritten= zpi[&apos;ZPI.6&apos;][&apos;ZPI.6.1&apos;].toString();
	
	// zpi.7 - Total Quantity Dispensed (type: NM, len: 18)
	if(zpi[&apos;ZPI.7&apos;].toString().length&gt;0) objAddPrescriptionInfo.totalQuantityDispensed= zpi[&apos;ZPI.7&apos;][&apos;ZPI.7.1&apos;].toString();

	// zpi.8 - Fill Quantity Written (type: NM, len: 18)
	if(zpi[&apos;ZPI.8&apos;].toString().length&gt;0) objAddPrescriptionInfo.fillQuantityWritten= zpi[&apos;ZPI.8&apos;][&apos;ZPI.8.1&apos;].toString();
	
	// zpi.9 - Maximum Daily Dose Allowed (type: NM, len: 18)
	if(zpi[&apos;ZPI.9&apos;].toString().length&gt;0) objAddPrescriptionInfo.maxDailyDoseAllowed= zpi[&apos;ZPI.9&apos;][&apos;ZPI.9.1&apos;].toString();
	
	// zpi.10 - Days Supplied (type: NM, len: 5)
	if(zpi[&apos;ZPI.10&apos;].toString().length&gt;0) objAddPrescriptionInfo.daysSupplied= zpi[&apos;ZPI.10&apos;][&apos;ZPI.10.1&apos;].toString();
	
	// zpi.11 - Times Per Day (type: NM, len: 5)
	if(zpi[&apos;ZPI.11&apos;].toString().length&gt;0) objAddPrescriptionInfo.timesPerDay= zpi[&apos;ZPI.11&apos;][&apos;ZPI.11.1&apos;].toString();
	
	// zpi.12 - Date Written (type: TS, len: 26)
	if(zpi[&apos;ZPI.11&apos;].toString().length&gt;0) objAddPrescriptionInfo.dateWritten= convertTimestampToJSON(zpi[&apos;ZPI.12&apos;]);
	
	// zpi.13 - Prepack (type: ST, len: 1)
	if(zpi[&apos;ZPI.13&apos;].toString().length&gt;0) objAddPrescriptionInfo.prepack= zpi[&apos;ZPI.13&apos;][&apos;ZPI.13.1&apos;].toString();
	
	// zpi.14 - Cycle Fill (type: ST, len: 1)
	if(zpi[&apos;ZPI.14&apos;].toString().length&gt;0) objAddPrescriptionInfo.cycleFill= zpi[&apos;ZPI.14&apos;][&apos;ZPI.14.1&apos;].toString();
	
	// zpi.15 - MAR Group Level (type: ST, len: 1)
	if(zpi[&apos;ZPI.15&apos;].toString().length&gt;0) objAddPrescriptionInfo.MARGroupLevel= zpi[&apos;ZPI.15&apos;][&apos;ZPI.15.1&apos;].toString();
	
	// zpi.16 - MAR Group (type: ST, len: 1= value: Y|N)
	if(zpi[&apos;ZPI.16&apos;].toString().length&gt;0) objAddPrescriptionInfo.MARGroup= zpi[&apos;ZPI.16&apos;][&apos;ZPI.16.1&apos;].toString();
	
	// zpi.17 - Partial Status (type: ST, len: 1)
	if(zpi[&apos;ZPI.17&apos;].toString().length&gt;0) objAddPrescriptionInfo.partialStatus= zpi[&apos;ZPI.17&apos;][&apos;ZPI.17.1&apos;].toString();
	
	// zpi.18 - Intended Quantity (type: NM, len: 9)
	if(zpi[&apos;ZPI.18&apos;].toString().length&gt;0) objAddPrescriptionInfo.intendedQuantity= zpi[&apos;ZPI.18&apos;][&apos;ZPI.18.1&apos;].toString();
	
	// zpi.19 - Intended Days Supply (type: NM, len: 5)
	if(zpi[&apos;ZPI.19&apos;].toString().length&gt;0) objAddPrescriptionInfo.intendedDaysSupplied= zpi[&apos;ZPI.19&apos;][&apos;ZPI.19.1&apos;].toString();
	
	// zpi.20 - Origin Code (type: ST, len: 1)
	if(zpi[&apos;ZPI.20&apos;].toString().length&gt;0) objAddPrescriptionInfo.originCode= zpi[&apos;ZPI.20&apos;][&apos;ZPI.20.1&apos;].toString();
	
	// zpi.21 - Rx GUID (type: ST, len: 50)
	if(zpi[&apos;ZPI.21&apos;].toString().length&gt;0) objAddPrescriptionInfo.rxGuid= zpi[&apos;ZPI.21&apos;][&apos;ZPI.21.1&apos;].toString();
	
	// zpi.22 - Tote ID (type: ST, len: 10 =&gt; value: Y|N)
	if(zpi[&apos;ZPI.22&apos;].toString().length&gt;0) objAddPrescriptionInfo.toteId= zpi[&apos;ZPI.22&apos;][&apos;ZPI.22.1&apos;].toString();
	
	// zpi.23 - Custom Field (type: CE)
	// Components: &lt;Identifier (ST)&gt; ^ &lt;Text (ST)&gt; ^ &lt;Name of Coding System (ID)&gt; ^ &lt;Alternate Identifier (ST)&gt; ^&lt;Alternate Text (ST)&gt; ^ &lt;Name of Alternate Coding System(ID)&gt;
	if(zpi[&apos;ZPI.23&apos;].toString().length&gt;0) objAddPrescriptionInfo.customField= convertCodedElementToJSON(zpi[&apos;ZPI.23&apos;]);
	
	// zpi.24 - Rx Type (type: ST, len: 1 =&gt; value: A= Acute, C= Chronic, P= PRN, S= Supply)
	if(zpi[&apos;ZPI.24&apos;].toString().length&gt;0) objAddPrescriptionInfo.rxType= zpi[&apos;ZPI.24&apos;][&apos;ZPI.24.1&apos;].toString();
	
	// zpi.25 - Linked Reorder Number (type: ST, len: 10)
	if(zpi[&apos;ZPI.25&apos;].toString().length&gt;0) objAddPrescriptionInfo.linkedReorderNumber= zpi[&apos;ZPI.25&apos;][&apos;ZPI.25.1&apos;].toString();
	
	// zpi.26 - Extra Dose Indicator (type: ST, len: 1 =&gt; value: Y|N)
	if(zpi[&apos;ZPI.26&apos;].toString().length&gt;0) objAddPrescriptionInfo.extraDoseIndicator= zpi[&apos;ZPI.26&apos;][&apos;ZPI.26.1&apos;].toString();
	
	// zpi.27 - Leave of Absence Indicator (type: ST, len: 1 =&gt; value: Y|N)
	if(zpi[&apos;ZPI.27&apos;].toString().length&gt;0) objAddPrescriptionInfo.leaveOfAbsenceIndicator= zpi[&apos;ZPI.27&apos;][&apos;ZPI.27.1&apos;].toString();

	// zpi.28 - Delivery ID (type: ST, len: 10)
	if(zpi[&apos;ZPI.28&apos;].toString().length&gt;0) objAddPrescriptionInfo.deliveryId= zpi[&apos;ZPI.28&apos;][&apos;ZPI.28.1&apos;].toString();

	// zpi.29 - Partial Tablet Indicator (type: ST, len: 1 =&gt; value: Y|N)
	if(zpi[&apos;ZPI.29&apos;].toString().length&gt;0) objAddPrescriptionInfo.partialTabletIndicator= zpi[&apos;ZPI.29&apos;][&apos;ZPI.29.1&apos;].toString();

	// zpi.30 - Raw Administration Times (type: ST, len: 250)
	/*
	This field will contain the raw administration times exactly as keyed by the pharmacy. Each repeat will represent a split. Multiple administration times for the same split will be delimited by a comma. Blank time boxes will be included. Leading and trailing spaces will be not trimmed.
	*/
	if(zpi[&apos;ZPI.30&apos;].toString().length&gt;0) objAddPrescriptionInfo.rawAdministrationTimes= zpi[&apos;ZPI.30&apos;][&apos;ZPI.30.1&apos;].toString();

	// zpi.31 - Product Type (type: ST, len: 1 =&gt; value: D= Drug Product, C= Compound, I= IV)
	if(zpi[&apos;ZPI.31&apos;].toString().length&gt;0) objAddPrescriptionInfo.productType= zpi[&apos;ZPI.31&apos;][&apos;ZPI.31.1&apos;].toString();

	// zpi.32 - Treatment (type: ST, len: 1 =&gt; value: Y|N)
	if(zpi[&apos;ZPI.32&apos;].toString().length&gt;0) objAddPrescriptionInfo.treatment= zpi[&apos;ZPI.32&apos;][&apos;ZPI.32.1&apos;].toString();

	// zpi.33 - PhRxExpireDate (type: TS, len: 26)
	if(zpi[&apos;ZPI.33&apos;].toString().length&gt;0) objAddPrescriptionInfo.phRxExpireDate= convertTimestampToJSON(zpi[&apos;ZPI.33&apos;]);

	// zpi.34 - Rx Number (type: ST, len: 20)
	if(zpi[&apos;ZPI.34&apos;].toString().length&gt;0) objAddPrescriptionInfo.rxNumber= zpi[&apos;ZPI.34&apos;][&apos;ZPI.34.1&apos;].toString();

	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objAddPrescriptionInfo= &apos;+objAddPrescriptionInfo);
		logger.error(scriptName+&apos;:DEBUG:: commonOrder= &apos;+JSON.stringify(objAddPrescriptionInfo));
	}
	
	channelMap.put(&apos;PharmacyEncodedOrder&apos;,JSON.stringify(objAddPrescriptionInfo));
	return objAddPrescriptionInfo;
	
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>a51c99ab-24ce-4729-b37a-ca740ede5b0d</id>
        <name>set_patient_identifier</name>
        <revision>2</revision>
        <lastModified>
          <time>1705378778896</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template function is to parse HL7v2 PID-3 element and return a JSON Javascript object 
	File:  set_patient_identifier.js

	@param {String} pid3 - This will contains the XML representation of the HL7v2 PID-3 element (e.g. PID-3 or PID-4 or PID-18)
	@return {String} return - Returning the Javascript object representation of the converted JSON patient identifier element object.
	
	History:
	2024-01-15 JER - if pid3 contains indexOf(&quot;\\&quot;) store the original patient Identifier as alternateIdentifier
*/
function set_patient_identifier(pid3, domain) {			
	
	var scriptName= &apos;set_patient_identifier&apos;;
	var debug= 0;
	var arrPatientIdentifiers= new Array();
	// if(debug&gt;0) { 
		logger.debug(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; pid3: &apos;+pid3);
		logger.debug(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; domain: &apos;+domain);
	// } // end if 
	
	for each(_pid3 in pid3) {
		
		var objPatient= new Object();
		// if expected to evaluate first element in pid3 for domain (aka entity)
			
		// PID.3
		// if element value contains \\ prefix string (e.g. &quot;ZTEST\\F\\2847&quot;) - remove the prefix string
		if(_pid3.indexOf(&apos;3&apos;)&gt;-1) {
		
			if(_pid3[&apos;PID.3.1&apos;].toString().indexOf(&quot;\\&quot;)&gt;-1) {
				
				var lstPatientId= _pid3[&apos;PID.3.1&apos;].toString().split(&quot;\\&quot;);
				var patientId= lstPatientId[(lstPatientId.length-1)];  // 2847
				var altId= _pid3[&apos;PID.3.1&apos;].toString();
				
				if(domain== 1) { 
					var entity= lstPatientId[0]; // ZTEST
				} else if(domain== 3) {
					var entity = _pid3[&apos;PID.3.3&apos;].toString();
				} else if(domain== 4) {
					var entity = _pid3[&apos;PID.3.4&apos;].toString();
				} else if(domain== 5) {
					var entity = _pid3[&apos;PID.3.5&apos;].toString();
				} else {
					var entity = _pid3[&apos;PID.3.4&apos;].toString();
				} // end if 
				
			} else {
			
				var patientId= _pid3[&apos;PID.3.1&apos;].toString();
			
				if(domain== 3) {
					var entity = _pid3[&apos;PID.3.3&apos;].toString();
				} else if(domain== 4) {
					var entity = _pid3[&apos;PID.3.4&apos;].toString();
				} else if(domain== 5) {
					var entity = _pid3[&apos;PID.3.5&apos;].toString();
				} else {
					var entity = _pid3[&apos;PID.3.4&apos;].toString();
				} // end if 
		
			} // end if 
		
			// 2022-02-22 jer - verify if PID.3.5 exists if not is undefined
			if(_pid3[&apos;PID.3.5&apos;].toString().length&gt;0) {
				var IDCode = _pid3[&apos;PID.3.5&apos;].toString();
			} // end if 
		} // end if 
		
		// PID.4
		// if element value contains \\ prefix string (e.g. &quot;ZTEST\\F\\2847&quot;) - remove the prefix string
		if(_pid3.indexOf(&apos;4&apos;)&gt;-1) {
		
			if(_pid3[&apos;PID.4.1&apos;].toString().indexOf(&quot;\\&quot;)&gt;-1) {
				
				var lstPatientId= _pid3[&apos;PID.4.1&apos;].toString().split(&quot;\\&quot;);
				var patientId= lstPatientId[(lstPatientId.length-1)];  // 2847
				var altId= _pid3[&apos;PID.3.1&apos;].toString();
				
				if(domain== 1) { 
					var entity= lstPatientId[0]; // ZTEST
				} else if(domain== 3) {
					var entity = _pid3[&apos;PID.4.3&apos;].toString();
				} else if(domain== 4) {
					var entity = _pid3[&apos;PID.4.4&apos;].toString();
				} else if(domain== 5) {
					var entity = _pid3[&apos;PID.4.5&apos;].toString();
				} else {
					var entity = _pid3[&apos;PID.4.4&apos;].toString();
				} // end if 
				
			} else {
			
				var patientId= _pid3[&apos;PID.4.1&apos;].toString();
			
				if(domain== 3) {
					var entity = _pid3[&apos;PID.4.3&apos;].toString();
				} else if(domain== 4) {
					var entity = _pid3[&apos;PID.4.4&apos;].toString();
				} else if(domain== 5) {
					var entity = _pid3[&apos;PID.4.5&apos;].toString();
				} else {
					var entity = _pid3[&apos;PID.4.4&apos;].toString();
				} // end if 
		
			} // end if 
			
			// 2022-02-22 jer - verify if PID.4.5 exists if not is undefined
			if(_pid3[&apos;PID.4.5&apos;].toString().length&gt;0) {
				var IDCode = _pid3[&apos;PID.4.5&apos;].toString();
			} // end if 
		
		} // end if 
		
		// PID.18
		// if element value contains \\ prefix string (e.g. &quot;ZTEST\\F\\2847&quot;) - remove the prefix string
		if(_pid3.indexOf(&apos;18&apos;)&gt;-1) {
						
			if(_pid3[&apos;PID.18.1&apos;].toString().length&gt;0) var patientId= _pid3[&apos;PID.18.1&apos;].toString();
			if(_pid3[&apos;PID.18.4&apos;].toString().length&gt;0) var entity = 	_pid3[&apos;PID.18.4&apos;].toString();
			if(_pid3[&apos;PID.18.5&apos;].toString().length&gt;0) var IDCode = 	_pid3[&apos;PID.18.5&apos;].toString();
		} // end if 	
		
		// 2022-02-22 jer - verify if undefined or defined with value of MRN
		if((typeof(IDCode)== &apos;undefined&apos;) || (IDCode.indexOf(&apos;MRN&apos;)&gt;-1)) {
			if(entity != null) {
				// 2022-08-25 JER - Modified from mrn and mrnDomain to identifier and assigningAuthorityName
				objPatient.identifier= patientId;
				objPatient.assigningAuthorityName= entity;
				
				if(typeof(altId) !== &apos;undefined&apos;) {
					objPatient.alternateIdentifier= altId;
					channelMap.put(&apos;alternateIdentifier&apos;,altId);
				} // end if 
				
				channelMap.put(&apos;identifier&apos;,patientId);
				channelMap.put(&apos;assigningAuthorityName&apos;,entity);
			} // end if 
		} else if (IDCode.indexOf(&quot;MR&quot;)&gt;-1) {
			if(entity != null) {
				// 2022-08-25 JER - Modified from mpi and mpiDomain to mpiIdentifier and globalAssigningAuthorityName
				objPatient.mpiIdentifier= patientId;
				objPatient.globalAssigningAuthorityName= entity;
				
				if(typeof(altId) !== &apos;undefined&apos;) {
					objPatient.alternateIdentifier= altId;
					channelMap.put(&apos;alternateIdentifier&apos;,altId);
				} // end if 
				
				channelMap.put(&apos;mpiIdentifier&apos;,patientId);
				channelMap.put(&apos;globalAssigningAuthorityName&apos;,entity);
			} // end if 
		} else {
			if(entity != null) {
				// 2022-08-25 JER - Modified from mpi and mpiDomain to mpiIdentifier and globalAssigningAuthorityName
				objPatient.mpiIdentifier= patientId;
				objPatient.globalAssigningAuthorityName= entity;
				
				if(typeof(altId) !== &apos;undefined&apos;) {
					objPatient.alternateIdentifier= altId;
					channelMap.put(&apos;alternateIdentifier&apos;,altId);
				} // end if 
						
				channelMap.put(&apos;mpiIdentifier&apos;,patientId); 
				channelMap.put(&apos;globalAssigningAuthorityName&apos;,entity);
			} // end if 
		} // end if 
		arrPatientIdentifiers.push(objPatient);
	} // end for

	channelMap.put(&apos;arrPatientIdentifiers&apos;,JSON.stringify(arrPatientIdentifiers));
	return arrPatientIdentifiers;
	
} // end function</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>06fc07c7-b2aa-4298-b2ab-a825bccefef3</id>
    <name>HL7v2.3</name>
    <revision>8</revision>
    <lastModified>
      <time>1672445597967</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description>HL7v2.3 Library</description>
    <includeNewChannels>false</includeNewChannels>
    <enabledChannelIds>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>14b7de16-de3e-4994-b123-b4d0d3d712aa</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
      <string>076d39da-7152-40db-91a1-1746167239e9</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>e5a8825f-1bd4-4a74-8768-669fe2c24b9c</id>
        <name>getEVN_v23</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911263100</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	getEVN_v23(msg)
	
	- Desc: This function retrieves HL7v2 HAPI format elements and values from EVN segment stored in
	object for reference

	@param {String} msg - this contains the raw message (string)
	@return {object} objEVN - this contains the EVN segment elements composed into a single objMSH
		object.
*/
function getEVN_v23(msg) {

	// define variables
	if (typeof(msg[&apos;EVN&apos;].toString()) !== undefined) {

		// EVN	
		var objEVN= new Object();

		if (msg[&apos;EVN&apos;].length() &gt; 0) {
			objEVN = [];
			var index = 0;
			for each (seg in msg.EVN) {
				objEVN[index] = {};

				// EVN.1, eventType
				if (seg[&apos;EVN.1&apos;][&apos;EVN.1.1&apos;].toString() != &quot;&quot;) { objEVN[index].eventType = seg[&apos;EVN.1&apos;][&apos;EVN.1.1&apos;]; }

				// EVN.2, recordedDateTime
				if (seg[&apos;EVN.2&apos;][&apos;EVN.2.1&apos;].toString() != &quot;&quot;) { objEVN[index].recordedDateTime = seg[&apos;EVN.2&apos;][&apos;EVN.2.1&apos;]; }

				// EVN.3, plannedEventDateTime
				if (seg[&apos;EVN.3&apos;][&apos;EVN.3.1&apos;].toString() != &quot;&quot;) { objEVN[index].plannedEventDateTime = seg[&apos;EVN.3&apos;][&apos;EVN.3.1&apos;]; }

				// EVN.4, eventReasonCode
				if (seg[&apos;EVN.4&apos;][&apos;EVN.4.1&apos;].toString() != &quot;&quot;) { objEVN[index].eventReasonCode = seg[&apos;EVN.4&apos;][&apos;EVN.4.1&apos;]; }

				// EVN.5, operatorId
				objEVN[index].operatorId = {};
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.1&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.id = seg[&apos;EVN.5&apos;][&apos;EVN.5.1&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.2&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.lastName = seg[&apos;EVN.5&apos;][&apos;EVN.5.2&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.3&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.firstName = seg[&apos;EVN.5&apos;][&apos;EVN.5.3&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.4&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.middleInitOrName = seg[&apos;EVN.5&apos;][&apos;EVN.5.4&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.5&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.suffix = seg[&apos;EVN.5&apos;][&apos;EVN.5.5&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.6&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.prefix = seg[&apos;EVN.5&apos;][&apos;EVN.5.6&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.7&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.degree = seg[&apos;EVN.5&apos;][&apos;EVN.5.7&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.8&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.sourceTable = seg[&apos;EVN.5&apos;][&apos;EVN.5.8&apos;]; }
				objEVN[index].operatorId.assigningAuthority = {};
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.9&apos;][&apos;EVN.5.9.1&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.assigningAuthority.id = seg[&apos;EVN.5&apos;][&apos;EVN.5.9&apos;][&apos;EVN.5.9.1&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.9&apos;][&apos;EVN.5.9.2&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.assigningAuthority.universalId = seg[&apos;EVN.5&apos;][&apos;EVN.5.9&apos;][&apos;EVN.5.9.2&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.9&apos;][&apos;EVN.5.9.3&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.assigningAuthority.universalIdType = seg[&apos;EVN.5&apos;][&apos;EVN.5.9&apos;][&apos;EVN.5.9.3&apos;]; }
				if (Object.keys(objEVN[index].operatorId.assigningAuthority).length == 0) {
					if (seg[&apos;EVN.5&apos;][&apos;EVN.5.9&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.assigningAuthority.id = seg[&apos;EVN.5&apos;][&apos;EVN.5.9&apos;]; }
					else delete objEVN[index].operatorId.assigningAuthority;
				}
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.10&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.nameTypeCode = seg[&apos;EVN.5&apos;][&apos;EVN.5.10&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.11&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.identifierCheckDigit = seg[&apos;EVN.5&apos;][&apos;EVN.5.11&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.12&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.codeIdentifyingCheckDigitScheme = seg[&apos;EVN.5&apos;][&apos;EVN.5.12&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.13&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.identifierTypeCode = seg[&apos;EVN.5&apos;][&apos;EVN.5.13&apos;]; }
				objEVN[index].operatorId.assigningFacility = {};
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.14&apos;][&apos;EVN.5.14.1&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.assigningFacility.id = seg[&apos;EVN.5&apos;][&apos;EVN.5.14&apos;][&apos;EVN.5.14.1&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.14&apos;][&apos;EVN.5.14.2&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.assigningFacility.universalId = seg[&apos;EVN.5&apos;][&apos;EVN.5.14&apos;][&apos;EVN.5.14.2&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.14&apos;][&apos;EVN.5.14.3&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.assigningFacility.universalIdType = seg[&apos;EVN.5&apos;][&apos;EVN.5.14&apos;][&apos;EVN.5.14.3&apos;]; }
				if (Object.keys(objEVN[index].operatorId.assigningFacility).length == 0) {
					if (seg[&apos;EVN.5&apos;][&apos;EVN.5.14&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.assigningFacility.id = seg[&apos;EVN.5&apos;][&apos;EVN.5.14&apos;]; }
					else delete objEVN[index].operatorId.assigningFacility;
				}
				if (Object.keys(objEVN[index].operatorId).length == 0) {
					delete objEVN[index].operatorId;
				}

				// EVN.6, eventOccurred
				if (seg[&apos;EVN.6&apos;][&apos;EVN.6.1&apos;].toString() != &quot;&quot;) { objEVN[index].eventOccurred = seg[&apos;EVN.6&apos;][&apos;EVN.6.1&apos;]; }

				// clean up EVN and increment index
				if (Object.keys(objEVN[index]).length == 0) {
					delete objEVN[index];
				} else {
					index++;
				}
			}
		}
		
		return objEVN;
	
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>d5e9153f-9f43-4749-8155-d08d7eca1e47</id>
        <name>getGT1_v23</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911262435</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	getGT1_v23(msg)
	
	- Desc: This function retrieves HL7v2 HAPI format elements and values from GT1 segment stored in
	object for reference

	@param {String} msg - this contains the raw message (string)
	@return {object} objGT1 - this contains the GT1 segment elements composed into a single objGT1
		object.
*/
function getGT1_v23(msg) {

	// define variables
	if (typeof(msg[&apos;GT1&apos;].toString()) !== undefined) {

		// PV1	
		var objGT1= new Object();
	
		if (msg[&apos;GT1&apos;].length() &gt; 0) {
			objGT1 = [];
			var index = 0;
			for each (seg in msg[&apos;GT1&apos;]) {
				objGT1[index] = {};
		
				// GT1.1, setId
				if (seg[&apos;GT1.1&apos;][&apos;GT1.1.1&apos;].toString() != &quot;&quot;) { objGT1[index].setId = seg[&apos;GT1.1&apos;][&apos;GT1.1.1&apos;]; }
		
				// GT1.2, guarantorNumber
				objGT1[index].guarantorNumber = [];
				for each (field in seg[&apos;GT1.2&apos;]) {
					var block = {};
					if (field[&apos;GT1.2.1&apos;].toString() != &quot;&quot;) { block.id = field[&apos;GT1.2.1&apos;]; }
					if (field[&apos;GT1.2.2&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;GT1.2.2&apos;]; }
					if (field[&apos;GT1.2.3&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;GT1.2.3&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;GT1.2.4&apos;][&apos;GT1.2.4.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;GT1.2.4&apos;][&apos;GT1.2.4.1&apos;]; }
					if (field[&apos;GT1.2.4&apos;][&apos;GT1.2.4.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;GT1.2.4&apos;][&apos;GT1.2.4.2&apos;]; }
					if (field[&apos;GT1.2.4&apos;][&apos;GT1.2.4.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;GT1.2.4&apos;][&apos;GT1.2.4.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;GT1.2.4&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;GT1.2.4&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;GT1.2.5&apos;].toString() != &quot;&quot;) { block.idTypeCode = field[&apos;GT1.2.5&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;GT1.2.6&apos;][&apos;GT1.2.6.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;GT1.2.6&apos;][&apos;GT1.2.6.1&apos;]; }
					if (field[&apos;GT1.2.6&apos;][&apos;GT1.2.6.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;GT1.2.6&apos;][&apos;GT1.2.6.2&apos;]; }
					if (field[&apos;GT1.2.6&apos;][&apos;GT1.2.6.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;GT1.2.6&apos;][&apos;GT1.2.6.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;GT1.2.6&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;GT1.2.6&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorNumber.push(block);
					}
				}
				if (Object.keys(objGT1[index].guarantorNumber).length == 0) {
					delete objGT1[index].guarantorNumber;
				}
		
				// GT1.3, guarantorName
				objGT1[index].guarantorName = [];
				for each (field in seg[&apos;GT1.3&apos;]) {
					var block = {};
					if (field[&apos;GT1.3.1&apos;].toString() != &quot;&quot;) { block.lastName = field[&apos;GT1.3.1&apos;]; }
					if (field[&apos;GT1.3.2&apos;].toString() != &quot;&quot;) { block.firstName = field[&apos;GT1.3.2&apos;]; }
					if (field[&apos;GT1.3.3&apos;].toString() != &quot;&quot;) { block.middleInitOrName = field[&apos;GT1.3.3&apos;]; }
					if (field[&apos;GT1.3.4&apos;].toString() != &quot;&quot;) { block.suffix = field[&apos;GT1.3.4&apos;]; }
					if (field[&apos;GT1.3.5&apos;].toString() != &quot;&quot;) { block.prefix = field[&apos;GT1.3.5&apos;]; }
					if (field[&apos;GT1.3.6&apos;].toString() != &quot;&quot;) { block.degree = field[&apos;GT1.3.6&apos;]; }
					if (field[&apos;GT1.3.7&apos;].toString() != &quot;&quot;) { block.nameTypeCode = field[&apos;GT1.3.7&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorName.push(block);
					}	
				}
				if (objGT1[index].guarantorName.length == 0) {
					delete objGT1[index].guarantorName;
				}
		
				// GT1.4, guarantorSpouseName
				objGT1[index].guarantorSpouseName = [];
				for each (field in seg[&apos;GT1.4&apos;]) {
					var block = {};
					if (field[&apos;GT1.4.1&apos;].toString() != &quot;&quot;) { block.lastName = field[&apos;GT1.4.1&apos;]; }
					if (field[&apos;GT1.4.2&apos;].toString() != &quot;&quot;) { block.firstName = field[&apos;GT1.4.2&apos;]; }
					if (field[&apos;GT1.4.3&apos;].toString() != &quot;&quot;) { block.middleInitOrName = field[&apos;GT1.4.3&apos;]; }
					if (field[&apos;GT1.4.4&apos;].toString() != &quot;&quot;) { block.suffix = field[&apos;GT1.4.4&apos;]; }
					if (field[&apos;GT1.4.5&apos;].toString() != &quot;&quot;) { block.prefix = field[&apos;GT1.4.5&apos;]; }
					if (field[&apos;GT1.4.6&apos;].toString() != &quot;&quot;) { block.degree = field[&apos;GT1.4.6&apos;]; }
					if (field[&apos;GT1.4.7&apos;].toString() != &quot;&quot;) { block.nameTypeCode = field[&apos;GT1.4.7&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorSpouseName.push(block);
					}	
				}
				if (objGT1[index].guarantorSpouseName.length == 0) {
					delete objGT1[index].guarantorSpouseName;
				}
		
				// GT1.5, guarantorAddress
				objGT1[index].guarantorAddress = [];
				for each (field in seg[&apos;GT1.5&apos;]) {
					var block = {};
					if (field[&apos;GT1.5.1&apos;].toString() != &quot;&quot;) { block.streetAddress = field[&apos;GT1.5.1&apos;]; }
					if (field[&apos;GT1.5.2&apos;].toString() != &quot;&quot;) { block.otherDesignation = field[&apos;GT1.5.2&apos;]; }
					if (field[&apos;GT1.5.3&apos;].toString() != &quot;&quot;) { block.city = field[&apos;GT1.5.3&apos;]; }
					if (field[&apos;GT1.5.4&apos;].toString() != &quot;&quot;) { block.stateOrProvince = field[&apos;GT1.5.4&apos;]; }
					if (field[&apos;GT1.5.5&apos;].toString() != &quot;&quot;) { block.zip = field[&apos;GT1.5.5&apos;]; }
					if (field[&apos;GT1.5.6&apos;].toString() != &quot;&quot;) { block.country = field[&apos;GT1.5.6&apos;]; }
					if (field[&apos;GT1.5.7&apos;].toString() != &quot;&quot;) { block.addressType = field[&apos;GT1.5.7&apos;]; }
					if (field[&apos;GT1.5.8&apos;].toString() != &quot;&quot;) { block.otherGeographicDesignation = field[&apos;GT1.5.8&apos;]; }
					if (field[&apos;GT1.5.9&apos;].toString() != &quot;&quot;) { block.countyOrParishCode = field[&apos;GT1.5.9&apos;]; }
					if (field[&apos;GT1.5.10&apos;].toString() != &quot;&quot;) { block.censusTract = field[&apos;GT1.5.10&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorAddress.push(block);
					}
				}
				if (objGT1[index].guarantorAddress.length == 0) {
					delete objGT1[index].guarantorAddress;
				}
		
				// GT1.6, guarantorPhNumHome
				objGT1[index].guarantorPhNumHome = [];
				for each (field in seg[&apos;GT1.6&apos;]) {
					var block = {};
					if (field[&apos;GT1.6.1&apos;].toString() != &quot;&quot;) { block.number = field[&apos;GT1.6.1&apos;]; }
					if (field[&apos;GT1.6.2&apos;].toString() != &quot;&quot;) { block.telecommunicationUseCode = field[&apos;GT1.6.2&apos;]; }
					if (field[&apos;GT1.6.3&apos;].toString() != &quot;&quot;) { block.telecommunicationEquipmentType = field[&apos;GT1.6.3&apos;]; }
					if (field[&apos;GT1.6.4&apos;].toString() != &quot;&quot;) { block.emailAddress = field[&apos;GT1.6.4&apos;]; }
					if (field[&apos;GT1.6.5&apos;].toString() != &quot;&quot;) { block.countryCode = field[&apos;GT1.6.5&apos;]; }
					if (field[&apos;GT1.6.6&apos;].toString() != &quot;&quot;) { block.areaCityCode = field[&apos;GT1.6.6&apos;]; }
					if (field[&apos;GT1.6.7&apos;].toString() != &quot;&quot;) { block.phoneNumber = field[&apos;GT1.6.7&apos;]; }
					if (field[&apos;GT1.6.8&apos;].toString() != &quot;&quot;) { block.extension = field[&apos;GT1.6.8&apos;]; }
					if (field[&apos;GT1.6.9&apos;].toString() != &quot;&quot;) { block.text = field[&apos;GT1.6.9&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorPhNumHome.push(block);
					}
				}
				if (objGT1[index].guarantorPhNumHome.length == 0) {
					delete objGT1[index].guarantorPhNumHome;
				}
		
				// GT1.7, guarantorPhNumBusiness
				objGT1[index].guarantorPhNumBusiness = [];
				for each (field in seg[&apos;GT1.7&apos;]) {
					var block = {};
					if (field[&apos;GT1.7.1&apos;].toString() != &quot;&quot;) { block.number = field[&apos;GT1.7.1&apos;]; }
					if (field[&apos;GT1.7.2&apos;].toString() != &quot;&quot;) { block.telecommunicationUseCode = field[&apos;GT1.7.2&apos;]; }
					if (field[&apos;GT1.7.3&apos;].toString() != &quot;&quot;) { block.telecommunicationEquipmentType = field[&apos;GT1.7.3&apos;]; }
					if (field[&apos;GT1.7.4&apos;].toString() != &quot;&quot;) { block.emailAddress = field[&apos;GT1.7.4&apos;]; }
					if (field[&apos;GT1.7.5&apos;].toString() != &quot;&quot;) { block.countryCode = field[&apos;GT1.7.5&apos;]; }
					if (field[&apos;GT1.7.6&apos;].toString() != &quot;&quot;) { block.areaCityCode = field[&apos;GT1.7.6&apos;]; }
					if (field[&apos;GT1.7.7&apos;].toString() != &quot;&quot;) { block.phoneNumber = field[&apos;GT1.7.7&apos;]; }
					if (field[&apos;GT1.7.8&apos;].toString() != &quot;&quot;) { block.extension = field[&apos;GT1.7.8&apos;]; }
					if (field[&apos;GT1.7.9&apos;].toString() != &quot;&quot;) { block.text = field[&apos;GT1.7.9&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorPhNumBusiness.push(block);
					}
				}
				if (objGT1[index].guarantorPhNumBusiness.length == 0) {
					delete objGT1[index].guarantorPhNumBusiness;
				}
		
				// GT1.8, guarantorDatetimeOfBirth
				if (seg[&apos;GT1.8&apos;][&apos;GT1.8.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorDatetimeOfBirth = seg[&apos;GT1.8&apos;][&apos;GT1.8.1&apos;]; }
		
				// GT1.9, guarantorSex
				if (seg[&apos;GT1.9&apos;][&apos;GT1.9.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorSex = seg[&apos;GT1.9&apos;][&apos;GT1.9.1&apos;]; }
		
				// GT1.10, guarantorType
				if (seg[&apos;GT1.10&apos;][&apos;GT1.10.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorType = seg[&apos;GT1.10&apos;][&apos;GT1.10.1&apos;]; }
		
				// GT1.11, guarantorRelationship
				if (seg[&apos;GT1.11&apos;][&apos;GT1.11.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorRelationship = seg[&apos;GT1.11&apos;][&apos;GT1.11.1&apos;]; }
		
				// GT1.12, guarantorSSN
				if (seg[&apos;GT1.12&apos;][&apos;GT1.12.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorSSN = seg[&apos;GT1.12&apos;][&apos;GT1.12.1&apos;]; }
		
				// GT1.13, guarantorDateBegin
				if (seg[&apos;GT1.13&apos;][&apos;GT1.13.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorDateBegin = seg[&apos;GT1.13&apos;][&apos;GT1.13.1&apos;]; }
		
				// GT1.14, guarantorDateEnd
				if (seg[&apos;GT1.14&apos;][&apos;GT1.14.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorDateEnd = seg[&apos;GT1.14&apos;][&apos;GT1.14.1&apos;]; }
		
				// GT1.15, guarantorPriority
				if (seg[&apos;GT1.15&apos;][&apos;GT1.15.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorPriority = seg[&apos;GT1.15&apos;][&apos;GT1.15.1&apos;]; }
		
				// GT1.16, guarantorEmployerName
				objGT1[index].guarantorEmployerName = [];
				for each (field in seg[&apos;GT1.16&apos;]) {
					var block = {};
					if (field[&apos;GT1.16.1&apos;].toString() != &quot;&quot;) { block.lastName = field[&apos;GT1.16.1&apos;]; }
					if (field[&apos;GT1.16.2&apos;].toString() != &quot;&quot;) { block.firstName = field[&apos;GT1.16.2&apos;]; }
					if (field[&apos;GT1.16.3&apos;].toString() != &quot;&quot;) { block.middleInitOrName = field[&apos;GT1.16.3&apos;]; }
					if (field[&apos;GT1.16.4&apos;].toString() != &quot;&quot;) { block.suffix = field[&apos;GT1.16.4&apos;]; }
					if (field[&apos;GT1.16.5&apos;].toString() != &quot;&quot;) { block.prefix = field[&apos;GT1.16.5&apos;]; }
					if (field[&apos;GT1.16.6&apos;].toString() != &quot;&quot;) { block.degree = field[&apos;GT1.16.6&apos;]; }
					if (field[&apos;GT1.16.7&apos;].toString() != &quot;&quot;) { block.nameTypeCode = field[&apos;GT1.16.7&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorEmployerName.push(block);
					}	
				}
				if (objGT1[index].guarantorEmployerName.length == 0) {
					delete objGT1[index].guarantorEmployerName;
				}
		
				// GT1.17, guarantorEmployerAddress
				objGT1[index].guarantorEmployerAddress = [];
				for each (field in seg[&apos;GT1.17&apos;]) {
					var block = {};
					if (field[&apos;GT1.17.1&apos;].toString() != &quot;&quot;) { block.streetAddress = field[&apos;GT1.17.1&apos;]; }
					if (field[&apos;GT1.17.2&apos;].toString() != &quot;&quot;) { block.otherDesignation = field[&apos;GT1.17.2&apos;]; }
					if (field[&apos;GT1.17.3&apos;].toString() != &quot;&quot;) { block.city = field[&apos;GT1.17.3&apos;]; }
					if (field[&apos;GT1.17.4&apos;].toString() != &quot;&quot;) { block.stateOrProvince = field[&apos;GT1.17.4&apos;]; }
					if (field[&apos;GT1.17.5&apos;].toString() != &quot;&quot;) { block.zip = field[&apos;GT1.17.5&apos;]; }
					if (field[&apos;GT1.17.6&apos;].toString() != &quot;&quot;) { block.country = field[&apos;GT1.17.6&apos;]; }
					if (field[&apos;GT1.17.7&apos;].toString() != &quot;&quot;) { block.addressType = field[&apos;GT1.17.7&apos;]; }
					if (field[&apos;GT1.17.8&apos;].toString() != &quot;&quot;) { block.otherGeographicDesignation = field[&apos;GT1.17.8&apos;]; }
					if (field[&apos;GT1.17.9&apos;].toString() != &quot;&quot;) { block.countyOrParishCode = field[&apos;GT1.17.9&apos;]; }
					if (field[&apos;GT1.17.10&apos;].toString() != &quot;&quot;) { block.censusTract = field[&apos;GT1.17.10&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorEmployerAddress.push(block);
					}
				}
				if (objGT1[index].guarantorEmployerAddress.length == 0) {
					delete objGT1[index].guarantorEmployerAddress;
				}
		
				// GT1.18, guarantorEmployerPhoneNumber
				objGT1[index].guarantorEmployerPhoneNumber = [];
				for each (field in seg[&apos;GT1.18&apos;]) {
					var block = {};
					if (field[&apos;GT1.18.1&apos;].toString() != &quot;&quot;) { block.number = field[&apos;GT1.18.1&apos;]; }
					if (field[&apos;GT1.18.2&apos;].toString() != &quot;&quot;) { block.telecommunicationUseCode = field[&apos;GT1.18.2&apos;]; }
					if (field[&apos;GT1.18.3&apos;].toString() != &quot;&quot;) { block.telecommunicationEquipmentType = field[&apos;GT1.18.3&apos;]; }
					if (field[&apos;GT1.18.4&apos;].toString() != &quot;&quot;) { block.emailAddress = field[&apos;GT1.18.4&apos;]; }
					if (field[&apos;GT1.18.5&apos;].toString() != &quot;&quot;) { block.countryCode = field[&apos;GT1.18.5&apos;]; }
					if (field[&apos;GT1.18.6&apos;].toString() != &quot;&quot;) { block.areaCityCode = field[&apos;GT1.18.6&apos;]; }
					if (field[&apos;GT1.18.7&apos;].toString() != &quot;&quot;) { block.phoneNumber = field[&apos;GT1.18.7&apos;]; }
					if (field[&apos;GT1.18.8&apos;].toString() != &quot;&quot;) { block.extension = field[&apos;GT1.18.8&apos;]; }
					if (field[&apos;GT1.18.9&apos;].toString() != &quot;&quot;) { block.text = field[&apos;GT1.18.9&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorEmployerPhoneNumber.push(block);
					}
				}
				if (objGT1[index].guarantorEmployerPhoneNumber.length == 0) {
					delete objGT1[index].guarantorEmployerPhoneNumber;
				}
		
				// GT1.19, guarantorEmployeeIDNumber
				objGT1[index].guarantorEmployeeIDNumber = [];
				for each (field in seg[&apos;GT1.19&apos;]) {
					var block = {};
					if (field[&apos;GT1.19.1&apos;].toString() != &quot;&quot;) { block.id = field[&apos;GT1.19.1&apos;]; }
					if (field[&apos;GT1.19.2&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;GT1.19.2&apos;]; }
					if (field[&apos;GT1.19.3&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;GT1.19.3&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;GT1.19.4&apos;][&apos;GT1.19.4.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;GT1.19.4&apos;][&apos;GT1.19.4.1&apos;]; }
					if (field[&apos;GT1.19.4&apos;][&apos;GT1.19.4.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;GT1.19.4&apos;][&apos;GT1.19.4.2&apos;]; }
					if (field[&apos;GT1.19.4&apos;][&apos;GT1.19.4.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;GT1.19.4&apos;][&apos;GT1.19.4.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;GT1.19.4&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;GT1.19.4&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;GT1.19.5&apos;].toString() != &quot;&quot;) { block.idTypeCode = field[&apos;GT1.19.5&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;GT1.19.6&apos;][&apos;GT1.19.6.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;GT1.19.6&apos;][&apos;GT1.19.6.1&apos;]; }
					if (field[&apos;GT1.19.6&apos;][&apos;GT1.19.6.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;GT1.19.6&apos;][&apos;GT1.19.6.2&apos;]; }
					if (field[&apos;GT1.19.6&apos;][&apos;GT1.19.6.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;GT1.19.6&apos;][&apos;GT1.19.6.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;GT1.19.6&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;GT1.19.6&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorEmployeeIDNumber.push(block);
					}
				}
				if (objGT1[index].guarantorEmployeeIDNumber.length == 0) {
					delete objGT1[index].guarantorEmployeeIDNumber;
				}
		
				// GT1.20, guarantorEmploymentStatus
				if (seg[&apos;GT1.20&apos;][&apos;GT1.20.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorEmploymentStatus = seg[&apos;GT1.20&apos;][&apos;GT1.20.1&apos;]; }
		
				// GT1.21, guarantorOrganizationName
				objGT1[index].guarantorOrganizationName = [];
				for each (field in seg[&apos;GT1.21&apos;]) {
					var block = {};
					if (field[&apos;GT1.21.1&apos;].toString() != &quot;&quot;) { block.organizationName = field[&apos;GT1.21.1&apos;]; }
					if (field[&apos;GT1.21.2&apos;].toString() != &quot;&quot;) { block.organizationNameTypeCode = field[&apos;GT1.21.2&apos;]; }
					if (field[&apos;GT1.21.3&apos;].toString() != &quot;&quot;) { block.idNumber = field[&apos;GT1.21.3&apos;]; }
					if (field[&apos;GT1.21.4&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;GT1.21.4&apos;]; }
					if (field[&apos;GT1.21.5&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;GT1.21.5&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;GT1.21.6&apos;][&apos;GT1.21.6.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;GT1.21.6&apos;][&apos;GT1.21.6.1&apos;]; }
					if (field[&apos;GT1.21.6&apos;][&apos;GT1.21.6.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;GT1.21.6&apos;][&apos;GT1.21.6.2&apos;]; }
					if (field[&apos;GT1.21.6&apos;][&apos;GT1.21.6.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;GT1.21.6&apos;][&apos;GT1.21.6.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;GT1.21.6&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;GT1.21.6&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;GT1.21.7&apos;].toString() != &quot;&quot;) { block.idTypeCode = field[&apos;GT1.21.7&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;GT1.21.8&apos;][&apos;GT1.21.8.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;GT1.21.8&apos;][&apos;GT1.21.8.1&apos;]; }
					if (field[&apos;GT1.21.8&apos;][&apos;GT1.21.8.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;GT1.21.8&apos;][&apos;GT1.21.8.2&apos;]; }
					if (field[&apos;GT1.21.8&apos;][&apos;GT1.21.8.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;GT1.21.8&apos;][&apos;GT1.21.8.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;GT1.21.8&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;GT1.21.8&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorOrganizationName.push(block);
					}
				}
				if (objGT1[index].guarantorOrganizationName.length == 0) {
					delete objGT1[index].guarantorOrganizationName;
				}
		
				// GT1.22, guarantorBillingHoldFlag
				if (seg[&apos;GT1.22&apos;][&apos;GT1.22.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorBillingHoldFlag = seg[&apos;GT1.22&apos;][&apos;GT1.22.1&apos;]; }
		
				// GT1.23, guarantorCreditRatingCode
				objGT1[index].guarantorCreditRatingCode = {};
				if (seg[&apos;GT1.23&apos;][&apos;GT1.23.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorCreditRatingCode.id = seg[&apos;GT1.23&apos;][&apos;GT1.23.1&apos;]; }
				if (seg[&apos;GT1.23&apos;][&apos;GT1.23.2&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorCreditRatingCode.text = seg[&apos;GT1.23&apos;][&apos;GT1.23.2&apos;]; }
				if (seg[&apos;GT1.23&apos;][&apos;GT1.23.3&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorCreditRatingCode.codingSystem = seg[&apos;GT1.23&apos;][&apos;GT1.23.3&apos;]; }
				if (seg[&apos;GT1.23&apos;][&apos;GT1.23.4&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorCreditRatingCode.altId = seg[&apos;GT1.23&apos;][&apos;GT1.23.4&apos;]; }
				if (seg[&apos;GT1.23&apos;][&apos;GT1.23.5&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorCreditRatingCode.altText = seg[&apos;GT1.23&apos;][&apos;GT1.23.5&apos;]; }
				if (seg[&apos;GT1.23&apos;][&apos;GT1.23.6&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorCreditRatingCode.altCodingSystem = seg[&apos;GT1.23&apos;][&apos;GT1.23.6&apos;]; }
				if (Object.keys(objGT1[index].guarantorCreditRatingCode).length == 0) {
					delete objGT1[index].guarantorCreditRatingCode;
				}
		
				// GT1.24, guarantorDeathDateAndTime
				if (seg[&apos;GT1.24&apos;][&apos;GT1.24.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorDeathDateAndTime = seg[&apos;GT1.24&apos;][&apos;GT1.24.1&apos;]; }
		
				// GT1.25, guarantorDeathFlag
				if (seg[&apos;GT1.25&apos;][&apos;GT1.25.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorDeathFlag = seg[&apos;GT1.25&apos;][&apos;GT1.25.1&apos;]; }
		
				// GT1.26, guarantorChargeAdjustmentCode
				objGT1[index].guarantorChargeAdjustmentCode = {};
				if (seg[&apos;GT1.26&apos;][&apos;GT1.26.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorChargeAdjustmentCode.id = seg[&apos;GT1.26&apos;][&apos;GT1.26.1&apos;]; }
				if (seg[&apos;GT1.26&apos;][&apos;GT1.26.2&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorChargeAdjustmentCode.text = seg[&apos;GT1.26&apos;][&apos;GT1.26.2&apos;]; }
				if (seg[&apos;GT1.26&apos;][&apos;GT1.26.3&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorChargeAdjustmentCode.codingSystem = seg[&apos;GT1.26&apos;][&apos;GT1.26.3&apos;]; }
				if (seg[&apos;GT1.26&apos;][&apos;GT1.26.4&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorChargeAdjustmentCode.altId = seg[&apos;GT1.26&apos;][&apos;GT1.26.4&apos;]; }
				if (seg[&apos;GT1.26&apos;][&apos;GT1.26.5&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorChargeAdjustmentCode.altText = seg[&apos;GT1.26&apos;][&apos;GT1.26.5&apos;]; }
				if (seg[&apos;GT1.26&apos;][&apos;GT1.26.6&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorChargeAdjustmentCode.altCodingSystem = seg[&apos;GT1.26&apos;][&apos;GT1.26.6&apos;]; }
				if (Object.keys(objGT1[index].guarantorChargeAdjustmentCode).length == 0) {
					delete objGT1[index].guarantorChargeAdjustmentCode;
				}
		
				// GT1.27, guarantorHouseholdAnnualIncome
				objGT1[index].guarantorHouseholdAnnualIncome = {};
				objGT1[index].guarantorHouseholdAnnualIncome.price = {};
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.1&apos;][&apos;GT1.27.1.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.price.quantity = seg[&apos;GT1.27&apos;][&apos;GT1.27.1&apos;][&apos;GT1.27.1.1&apos;]; }
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.1&apos;][&apos;GT1.27.1.2&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.price.denomination = seg[&apos;GT1.27&apos;][&apos;GT1.27.1&apos;][&apos;GT1.27.1.2&apos;]; }
				if (Object.keys(objGT1[index].guarantorHouseholdAnnualIncome.price).length == 0) {
					if (seg[&apos;GT1.27&apos;][&apos;GT1.27.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.price.quantity = seg[&apos;GT1.27&apos;][&apos;GT1.27.1&apos;]; }
					else delete objGT1[index].guarantorHouseholdAnnualIncome.price;
				}
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.2&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.priceType = seg[&apos;GT1.27&apos;][&apos;GT1.27.2&apos;]; }
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.3&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.fromValue = seg[&apos;GT1.27&apos;][&apos;GT1.27.3&apos;]; }
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.4&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.toValue = seg[&apos;GT1.27&apos;][&apos;GT1.27.4&apos;]; }
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.5&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.rangeUnits = seg[&apos;GT1.27&apos;][&apos;GT1.27.5&apos;]; }
				objGT1[index].guarantorHouseholdAnnualIncome.rangeType = {};
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.rangeType.id = seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.1&apos;]; }
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.2&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.rangeType.text = seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.2&apos;]; }
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.3&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.rangeType.codingSystem = seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.3&apos;]; }
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.4&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.rangeType.altId = seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.4&apos;]; }
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.5&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.rangeType.altText = seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.5&apos;]; }
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.6&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.rangeType.altCodingSystem = seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.6&apos;]; }
				if (Object.keys(objGT1[index].guarantorHouseholdAnnualIncome.rangeType).length == 0) {
					if (seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.rangeType.id = seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;]; }
					else delete objGT1[index].guarantorHouseholdAnnualIncome.rangeType;
				}
				if (Object.keys(objGT1[index].guarantorHouseholdAnnualIncome).length == 0) {
					delete objGT1[index].guarantorHouseholdAnnualIncome;
				}
		
				// GT1.28, guarantorHouseholdSize
				if (seg[&apos;GT1.28&apos;][&apos;GT1.28.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdSize = seg[&apos;GT1.28&apos;][&apos;GT1.28.1&apos;]; }
		
				// GT1.29, guarantorEmployerIDNumber
				objGT1[index].guarantorEmployerIDNumber = [];
				for each (field in seg[&apos;GT1.29&apos;]) {
					var block = {};
					if (field[&apos;GT1.29.1&apos;].toString() != &quot;&quot;) { block.id = field[&apos;GT1.29.1&apos;]; }
					if (field[&apos;GT1.29.2&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;GT1.29.2&apos;]; }
					if (field[&apos;GT1.29.3&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;GT1.29.3&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;GT1.29.4&apos;][&apos;GT1.29.4.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;GT1.29.4&apos;][&apos;GT1.29.4.1&apos;]; }
					if (field[&apos;GT1.29.4&apos;][&apos;GT1.29.4.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;GT1.29.4&apos;][&apos;GT1.29.4.2&apos;]; }
					if (field[&apos;GT1.29.4&apos;][&apos;GT1.29.4.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;GT1.29.4&apos;][&apos;GT1.29.4.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;GT1.29.4&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;GT1.29.4&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;GT1.29.5&apos;].toString() != &quot;&quot;) { block.idTypeCode = field[&apos;GT1.29.5&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;GT1.29.6&apos;][&apos;GT1.29.6.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;GT1.29.6&apos;][&apos;GT1.29.6.1&apos;]; }
					if (field[&apos;GT1.29.6&apos;][&apos;GT1.29.6.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;GT1.29.6&apos;][&apos;GT1.29.6.2&apos;]; }
					if (field[&apos;GT1.29.6&apos;][&apos;GT1.29.6.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;GT1.29.6&apos;][&apos;GT1.29.6.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;GT1.29.6&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;GT1.29.6&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorEmployerIDNumber.push(block);
					}
				}
				if (objGT1[index].guarantorEmployerIDNumber.length == 0) {
					delete objGT1[index].guarantorEmployerIDNumber;
				}
		
				// GT1.30, guarantorMaritalStatusCode
				if (seg[&apos;GT1.30&apos;][&apos;GT1.30.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorMaritalStatusCode = seg[&apos;GT1.30&apos;][&apos;GT1.30.1&apos;]; }
		
				// GT1.31, guarantorHireEffectiveDate
				if (seg[&apos;GT1.31&apos;][&apos;GT1.31.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHireEffectiveDate = seg[&apos;GT1.31&apos;][&apos;GT1.31.1&apos;]; }
		
				// GT1.32, employmentStopDate
				if (seg[&apos;GT1.32&apos;][&apos;GT1.32.1&apos;].toString() != &quot;&quot;) { objGT1[index].employmentStopDate = seg[&apos;GT1.32&apos;][&apos;GT1.32.1&apos;]; }
		
				// GT1.33, livingDependency
				if (seg[&apos;GT1.33&apos;][&apos;GT1.33.1&apos;].toString() != &quot;&quot;) { objGT1[index].livingDependency = seg[&apos;GT1.33&apos;][&apos;GT1.33.1&apos;]; }
		
				// GT1.34, ambulatoryStatus
				if (seg[&apos;GT1.34&apos;][&apos;GT1.34.1&apos;].toString() != &quot;&quot;) { objGT1[index].ambulatoryStatus = seg[&apos;GT1.34&apos;][&apos;GT1.34.1&apos;]; }
		
				// GT1.35, citizenship
				if (seg[&apos;GT1.35&apos;][&apos;GT1.35.1&apos;].toString() != &quot;&quot;) { objGT1[index].citizenship = seg[&apos;GT1.35&apos;][&apos;GT1.35.1&apos;]; }
		
				// GT1.36, primaryLanguage
				objGT1[index].primaryLanguage = {};
				if (seg[&apos;GT1.36&apos;][&apos;GT1.36.1&apos;].toString() != &quot;&quot;) { objGT1[index].primaryLanguage.id = seg[&apos;GT1.36&apos;][&apos;GT1.36.1&apos;]; }
				if (seg[&apos;GT1.36&apos;][&apos;GT1.36.2&apos;].toString() != &quot;&quot;) { objGT1[index].primaryLanguage.text = seg[&apos;GT1.36&apos;][&apos;GT1.36.2&apos;]; }
				if (seg[&apos;GT1.36&apos;][&apos;GT1.36.3&apos;].toString() != &quot;&quot;) { objGT1[index].primaryLanguage.codingSystem = seg[&apos;GT1.36&apos;][&apos;GT1.36.3&apos;]; }
				if (seg[&apos;GT1.36&apos;][&apos;GT1.36.4&apos;].toString() != &quot;&quot;) { objGT1[index].primaryLanguage.altId = seg[&apos;GT1.36&apos;][&apos;GT1.36.4&apos;]; }
				if (seg[&apos;GT1.36&apos;][&apos;GT1.36.5&apos;].toString() != &quot;&quot;) { objGT1[index].primaryLanguage.altText = seg[&apos;GT1.36&apos;][&apos;GT1.36.5&apos;]; }
				if (seg[&apos;GT1.36&apos;][&apos;GT1.36.6&apos;].toString() != &quot;&quot;) { objGT1[index].primaryLanguage.altCodingSystem = seg[&apos;GT1.36&apos;][&apos;GT1.36.6&apos;]; }
				if (Object.keys(objGT1[index].primaryLanguage).length == 0) {
					delete objGT1[index].primaryLanguage;
				}
		
				// GT1.37, livingArrangement
				if (seg[&apos;GT1.37&apos;][&apos;GT1.37.1&apos;].toString() != &quot;&quot;) { objGT1[index].livingArrangement = seg[&apos;GT1.37&apos;][&apos;GT1.37.1&apos;]; }
		
				// GT1.38, publicityIndicator
				objGT1[index].publicityIndicator = {};
				if (seg[&apos;GT1.38&apos;][&apos;GT1.38.1&apos;].toString() != &quot;&quot;) { objGT1[index].publicityIndicator.id = seg[&apos;GT1.38&apos;][&apos;GT1.38.1&apos;]; }
				if (seg[&apos;GT1.38&apos;][&apos;GT1.38.2&apos;].toString() != &quot;&quot;) { objGT1[index].publicityIndicator.text = seg[&apos;GT1.38&apos;][&apos;GT1.38.2&apos;]; }
				if (seg[&apos;GT1.38&apos;][&apos;GT1.38.3&apos;].toString() != &quot;&quot;) { objGT1[index].publicityIndicator.codingSystem = seg[&apos;GT1.38&apos;][&apos;GT1.38.3&apos;]; }
				if (seg[&apos;GT1.38&apos;][&apos;GT1.38.4&apos;].toString() != &quot;&quot;) { objGT1[index].publicityIndicator.altId = seg[&apos;GT1.38&apos;][&apos;GT1.38.4&apos;]; }
				if (seg[&apos;GT1.38&apos;][&apos;GT1.38.5&apos;].toString() != &quot;&quot;) { objGT1[index].publicityIndicator.altText = seg[&apos;GT1.38&apos;][&apos;GT1.38.5&apos;]; }
				if (seg[&apos;GT1.38&apos;][&apos;GT1.38.6&apos;].toString() != &quot;&quot;) { objGT1[index].publicityIndicator.altCodingSystem = seg[&apos;GT1.38&apos;][&apos;GT1.38.6&apos;]; }
				if (Object.keys(objGT1[index].publicityIndicator).length == 0) {
					delete objGT1[index].publicityIndicator;
				}
		
				// GT1.39, protectionIndicator
				if (seg[&apos;GT1.39&apos;][&apos;GT1.39.1&apos;].toString() != &quot;&quot;) { objGT1[index].protectionIndicator = seg[&apos;GT1.39&apos;][&apos;GT1.39.1&apos;]; }
		
				// GT1.40, studentIndicator
				if (seg[&apos;GT1.40&apos;][&apos;GT1.40.1&apos;].toString() != &quot;&quot;) { objGT1[index].studentIndicator = seg[&apos;GT1.40&apos;][&apos;GT1.40.1&apos;]; }
		
				// GT1.41, religion
				if (seg[&apos;GT1.41&apos;][&apos;GT1.41.1&apos;].toString() != &quot;&quot;) { objGT1[index].religion = seg[&apos;GT1.41&apos;][&apos;GT1.41.1&apos;]; }
		
				// GT1.42, mothersMaidenName
				objGT1[index].mothersMaidenName = {};
				if (seg[&apos;GT1.42&apos;][&apos;GT1.42.1&apos;].toString() != &quot;&quot;) { objGT1[index].mothersMaidenName.lastName = seg[&apos;GT1.42&apos;][&apos;GT1.42.1&apos;]; }
				if (seg[&apos;GT1.42&apos;][&apos;GT1.42.2&apos;].toString() != &quot;&quot;) { objGT1[index].mothersMaidenName.firstName = seg[&apos;GT1.42&apos;][&apos;GT1.42.2&apos;]; }
				if (seg[&apos;GT1.42&apos;][&apos;GT1.42.3&apos;].toString() != &quot;&quot;) { objGT1[index].mothersMaidenName.middleInitOrName = seg[&apos;GT1.42&apos;][&apos;GT1.42.3&apos;]; }
				if (seg[&apos;GT1.42&apos;][&apos;GT1.42.4&apos;].toString() != &quot;&quot;) { objGT1[index].mothersMaidenName.suffix = seg[&apos;GT1.42&apos;][&apos;GT1.42.4&apos;]; }
				if (seg[&apos;GT1.42&apos;][&apos;GT1.42.5&apos;].toString() != &quot;&quot;) { objGT1[index].mothersMaidenName.prefix = seg[&apos;GT1.42&apos;][&apos;GT1.42.5&apos;]; }
				if (seg[&apos;GT1.42&apos;][&apos;GT1.42.6&apos;].toString() != &quot;&quot;) { objGT1[index].mothersMaidenName.degree = seg[&apos;GT1.42&apos;][&apos;GT1.42.6&apos;]; }
				if (seg[&apos;GT1.42&apos;][&apos;GT1.42.7&apos;].toString() != &quot;&quot;) { objGT1[index].mothersMaidenName.nameTypeCode = seg[&apos;GT1.42&apos;][&apos;GT1.42.7&apos;]; }
				if (Object.keys(objGT1[index].mothersMaidenName).length == 0) {
					delete objGT1[index].mothersMaidenName;
				}
		
				// GT1.43, nationality
				objGT1[index].nationality = {};
				if (seg[&apos;GT1.43&apos;][&apos;GT1.43.1&apos;].toString() != &quot;&quot;) { objGT1[index].nationality.id = seg[&apos;GT1.43&apos;][&apos;GT1.43.1&apos;]; }
				if (seg[&apos;GT1.43&apos;][&apos;GT1.43.2&apos;].toString() != &quot;&quot;) { objGT1[index].nationality.text = seg[&apos;GT1.43&apos;][&apos;GT1.43.2&apos;]; }
				if (seg[&apos;GT1.43&apos;][&apos;GT1.43.3&apos;].toString() != &quot;&quot;) { objGT1[index].nationality.codingSystem = seg[&apos;GT1.43&apos;][&apos;GT1.43.3&apos;]; }
				if (seg[&apos;GT1.43&apos;][&apos;GT1.43.4&apos;].toString() != &quot;&quot;) { objGT1[index].nationality.altId = seg[&apos;GT1.43&apos;][&apos;GT1.43.4&apos;]; }
				if (seg[&apos;GT1.43&apos;][&apos;GT1.43.5&apos;].toString() != &quot;&quot;) { objGT1[index].nationality.altText = seg[&apos;GT1.43&apos;][&apos;GT1.43.5&apos;]; }
				if (seg[&apos;GT1.43&apos;][&apos;GT1.43.6&apos;].toString() != &quot;&quot;) { objGT1[index].nationality.altCodingSystem = seg[&apos;GT1.43&apos;][&apos;GT1.43.6&apos;]; }
				if (Object.keys(objGT1[index].nationality).length == 0) {
					delete objGT1[index].nationality;
				}
		
				// GT1.44, ethnicGroup
				if (seg[&apos;GT1.44&apos;][&apos;GT1.44.1&apos;].toString() != &quot;&quot;) { objGT1[index].ethnicGroup = seg[&apos;GT1.44&apos;][&apos;GT1.44.1&apos;]; }
		
				// GT1.45, contactPersonsName
				objGT1[index].contactPersonsName = [];
				for each (field in seg[&apos;GT1.45&apos;]) {
					var block = {};
					if (field[&apos;GT1.45.1&apos;].toString() != &quot;&quot;) { block.lastName = field[&apos;GT1.45.1&apos;]; }
					if (field[&apos;GT1.45.2&apos;].toString() != &quot;&quot;) { block.firstName = field[&apos;GT1.45.2&apos;]; }
					if (field[&apos;GT1.45.3&apos;].toString() != &quot;&quot;) { block.middleInitOrName = field[&apos;GT1.45.3&apos;]; }
					if (field[&apos;GT1.45.4&apos;].toString() != &quot;&quot;) { block.suffix = field[&apos;GT1.45.4&apos;]; }
					if (field[&apos;GT1.45.5&apos;].toString() != &quot;&quot;) { block.prefix = field[&apos;GT1.45.5&apos;]; }
					if (field[&apos;GT1.45.6&apos;].toString() != &quot;&quot;) { block.degree = field[&apos;GT1.45.6&apos;]; }
					if (field[&apos;GT1.45.7&apos;].toString() != &quot;&quot;) { block.nameTypeCode = field[&apos;GT1.45.7&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].contactPersonsName.push(block);
					}	
				}
				if (objGT1[index].contactPersonsName.length == 0) {
					delete objGT1[index].contactPersonsName;
				}
		
				// GT1.46, contactPersonsTelephoneNumber
				objGT1[index].contactPersonsTelephoneNumber = [];
				for each (field in seg[&apos;GT1.46&apos;]) {
					var block = {};
					if (field[&apos;GT1.46.1&apos;].toString() != &quot;&quot;) { block.number = field[&apos;GT1.46.1&apos;]; }
					if (field[&apos;GT1.46.2&apos;].toString() != &quot;&quot;) { block.telecommunicationUseCode = field[&apos;GT1.46.2&apos;]; }
					if (field[&apos;GT1.46.3&apos;].toString() != &quot;&quot;) { block.telecommunicationEquipmentType = field[&apos;GT1.46.3&apos;]; }
					if (field[&apos;GT1.46.4&apos;].toString() != &quot;&quot;) { block.emailAddress = field[&apos;GT1.46.4&apos;]; }
					if (field[&apos;GT1.46.5&apos;].toString() != &quot;&quot;) { block.countryCode = field[&apos;GT1.46.5&apos;]; }
					if (field[&apos;GT1.46.6&apos;].toString() != &quot;&quot;) { block.areaCityCode = field[&apos;GT1.46.6&apos;]; }
					if (field[&apos;GT1.46.7&apos;].toString() != &quot;&quot;) { block.phoneNumber = field[&apos;GT1.46.7&apos;]; }
					if (field[&apos;GT1.46.8&apos;].toString() != &quot;&quot;) { block.extension = field[&apos;GT1.46.8&apos;]; }
					if (field[&apos;GT1.46.9&apos;].toString() != &quot;&quot;) { block.text = field[&apos;GT1.46.9&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].contactPersonsTelephoneNumber.push(block);
					}
				}
				if (objGT1[index].contactPersonsTelephoneNumber.length == 0) {
					delete objGT1[index].contactPersonsTelephoneNumber;
				}
		
				// GT1.47, contactReason
				objGT1[index].contactReason = {};
				if (seg[&apos;GT1.47&apos;][&apos;GT1.47.1&apos;].toString() != &quot;&quot;) { objGT1[index].contactReason.id = seg[&apos;GT1.47&apos;][&apos;GT1.47.1&apos;]; }
				if (seg[&apos;GT1.47&apos;][&apos;GT1.47.2&apos;].toString() != &quot;&quot;) { objGT1[index].contactReason.text = seg[&apos;GT1.47&apos;][&apos;GT1.47.2&apos;]; }
				if (seg[&apos;GT1.47&apos;][&apos;GT1.47.3&apos;].toString() != &quot;&quot;) { objGT1[index].contactReason.codingSystem = seg[&apos;GT1.47&apos;][&apos;GT1.47.3&apos;]; }
				if (seg[&apos;GT1.47&apos;][&apos;GT1.47.4&apos;].toString() != &quot;&quot;) { objGT1[index].contactReason.altId = seg[&apos;GT1.47&apos;][&apos;GT1.47.4&apos;]; }
				if (seg[&apos;GT1.47&apos;][&apos;GT1.47.5&apos;].toString() != &quot;&quot;) { objGT1[index].contactReason.altText = seg[&apos;GT1.47&apos;][&apos;GT1.47.5&apos;]; }
				if (seg[&apos;GT1.47&apos;][&apos;GT1.47.6&apos;].toString() != &quot;&quot;) { objGT1[index].contactReason.altCodingSystem = seg[&apos;GT1.47&apos;][&apos;GT1.47.6&apos;]; }
				if (Object.keys(objGT1[index].contactReason).length == 0) {
					delete objGT1[index].contactReason;
				}
		
				// GT1.48, contactRelationship
				if (seg[&apos;GT1.48&apos;][&apos;GT1.48.1&apos;].toString() != &quot;&quot;) { objGT1[index].contactRelationship = seg[&apos;GT1.48&apos;][&apos;GT1.48.1&apos;]; }
		
				// GT1.49, jobTitle
				if (seg[&apos;GT1.49&apos;][&apos;GT1.49.1&apos;].toString() != &quot;&quot;) { objGT1[index].jobTitle = seg[&apos;GT1.49&apos;][&apos;GT1.49.1&apos;]; }
		
				// GT1.50, jobCodeClass
				objGT1[index].jobCodeClass = {};
				if (seg[&apos;GT1.50&apos;][&apos;GT1.50.1&apos;].toString() != &quot;&quot;) { objGT1[index].jobCodeClass.id = seg[&apos;GT1.50&apos;][&apos;GT1.50.1&apos;]; }
				if (seg[&apos;GT1.50&apos;][&apos;GT1.50.1&apos;].toString() != &quot;&quot;) { objGT1[index].jobCodeClass.id = seg[&apos;GT1.50&apos;][&apos;GT1.50.1&apos;]; }
				if (Object.keys(objGT1[index].jobCodeClass).length == 0) {
					delete objGT1[index].jobCodeClass;
				}
		
				// GT1.51, guarantorEmployersOrganization
				objGT1[index].guarantorEmployersOrganization = [];
				for each (field in seg[&apos;GT1.51&apos;]) {
					var block = {};
					if (field[&apos;GT1.51.1&apos;].toString() != &quot;&quot;) { block.organizationName = field[&apos;GT1.51.1&apos;]; }
					if (field[&apos;GT1.51.2&apos;].toString() != &quot;&quot;) { block.organizationNameTypeCode = field[&apos;GT1.51.2&apos;]; }
					if (field[&apos;GT1.51.3&apos;].toString() != &quot;&quot;) { block.idNumber = field[&apos;GT1.51.3&apos;]; }
					if (field[&apos;GT1.51.4&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;GT1.51.4&apos;]; }
					if (field[&apos;GT1.51.5&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;GT1.51.5&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;GT1.51.6&apos;][&apos;GT1.51.6.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;GT1.51.6&apos;][&apos;GT1.51.6.1&apos;]; }
					if (field[&apos;GT1.51.6&apos;][&apos;GT1.51.6.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;GT1.51.6&apos;][&apos;GT1.51.6.2&apos;]; }
					if (field[&apos;GT1.51.6&apos;][&apos;GT1.51.6.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;GT1.51.6&apos;][&apos;GT1.51.6.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;GT1.51.6&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;GT1.51.6&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;GT1.51.7&apos;].toString() != &quot;&quot;) { block.idTypeCode = field[&apos;GT1.51.7&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;GT1.51.8&apos;][&apos;GT1.51.8.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;GT1.51.8&apos;][&apos;GT1.51.8.1&apos;]; }
					if (field[&apos;GT1.51.8&apos;][&apos;GT1.51.8.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;GT1.51.8&apos;][&apos;GT1.51.8.2&apos;]; }
					if (field[&apos;GT1.51.8&apos;][&apos;GT1.51.8.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;GT1.51.8&apos;][&apos;GT1.51.8.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;GT1.51.8&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;GT1.51.8&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorEmployersOrganization.push(block);
					}
				}
				if (objGT1[index].guarantorEmployersOrganization.length == 0) {
					delete objGT1[index].guarantorEmployersOrganization;
				}
				// GT1.52, handicap
				if (seg[&apos;GT1.52&apos;][&apos;GT1.52.1&apos;].toString() != &quot;&quot;) { objGT1[index].handicap = seg[&apos;GT1.52&apos;][&apos;GT1.52.1&apos;]; }
		
				// GT1.53, jobStatus
				if (seg[&apos;GT1.53&apos;][&apos;GT1.53.1&apos;].toString() != &quot;&quot;) { objGT1[index].jobStatus = seg[&apos;GT1.53&apos;][&apos;GT1.53.1&apos;]; }
		
				// GT1.54, guarantorFinancialClass
				objGT1[index].guarantorFinancialClass = {};
				if (seg[&apos;GT1.54&apos;][&apos;GT1.54.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorFinancialClass.financialClass = seg[&apos;GT1.54&apos;][&apos;GT1.54.1&apos;]; }
				if (seg[&apos;GT1.54&apos;][&apos;GT1.54.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorFinancialClass.effectiveDate = seg[&apos;GT1.54&apos;][&apos;GT1.54.1&apos;]; }
				if (Object.keys(objGT1[index].guarantorFinancialClass).length == 0) {
					delete objGT1[index].guarantorFinancialClass;
				}
		
				// GT1.55, guarantorRace
				if (seg[&apos;GT1.55&apos;][&apos;GT1.55.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorRace = seg[&apos;GT1.55&apos;][&apos;GT1.55.1&apos;]; }
		
				// clean up GT1 and increment index
				if (Object.keys(objGT1[index]).length == 0) {
					delete objGT1[index];
				} else {
					index++;
				}
			}
		} // end if 	
		
		return objGT1;
	
	} // end if 
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>65c3f0e2-bb64-4403-96ef-3d40b54c6f58</id>
        <name>getHL7MessageFromXML</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911263032</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	getHL7MessageFromXML(msg)- Desc: This function retrieves the HL7v2 content from a SOAP-WS Service response
	from the ns1:return XML element value.

	@param {String} msg - provide the SOAP-WS XML responses containing HL7 message
	@return {String} - return param msg returns the HL7 string
*/
function getHL7MessageFromXML(msg) {
	
	var scriptName= &apos;getHL7MessageFromXML&apos;;
	var debug= 1;
	
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; BEFORE msg: &apos;+msg); }
	msg= msg.*::[&apos;Body&apos;].*::[&apos;submitMessageResponse&apos;].*::[&apos;return&apos;].toString();
	channelMap.put(&apos;hl7ack&apos;,msg);

	msg = new XML(SerializerFactory.getSerializer(&apos;HL7V2&apos;).toXML(msg));
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER XML to HL7 Serializer msg: &apos;+msg); }
	
	return msg;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>0fa46c3c-e815-4701-80cb-80b5946c55e2</id>
        <name>getIN1_v23</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911263061</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	getIN1_v23(msg)
	
	- Desc: This function retrieves HL7v2 HAPI format elements and values from IN1 segment stored in
	object for reference

	@param {String} msg - this contains the raw message (string)
	@return {object} objIN1 - this contains the IN1 segment elements composed into a single objIN1
		object.
*/
function getIN1_v23(msg) {

	// define variables
	if (typeof(msg[&apos;IN1&apos;].toString()) !== undefined) {

		// IN1
		var objIN1= new Object();
	
		if (msg[&apos;IN1&apos;].length() &gt; 0) {
			objIN1 = [];
			var index = 0;
			for each (seg in msg.IN1) {
				objIN1[index] = {};
				
				// IN1.1, setId
				if (seg[&apos;IN1.1&apos;][&apos;IN1.1.1&apos;].toString() != &quot;&quot;) { objIN1[index].setId = seg[&apos;IN1.1&apos;][&apos;IN1.1.1&apos;]; }
		
				// IN1.2, planId
				objIN1[index].planId = {};
				if (seg[&apos;IN1.2&apos;][&apos;IN1.2.1&apos;].toString() != &quot;&quot;) { objIN1[index].planId.id = seg[&apos;IN1.2&apos;][&apos;IN1.2.1&apos;]; }
				if (seg[&apos;IN1.2&apos;][&apos;IN1.2.2&apos;].toString() != &quot;&quot;) { objIN1[index].planId.text = seg[&apos;IN1.2&apos;][&apos;IN1.2.2&apos;]; }
				if (seg[&apos;IN1.2&apos;][&apos;IN1.2.3&apos;].toString() != &quot;&quot;) { objIN1[index].planId.codingSystem = seg[&apos;IN1.2&apos;][&apos;IN1.2.3&apos;]; }
				if (seg[&apos;IN1.2&apos;][&apos;IN1.2.4&apos;].toString() != &quot;&quot;) { objIN1[index].planId.altId = seg[&apos;IN1.2&apos;][&apos;IN1.2.4&apos;]; }
				if (seg[&apos;IN1.2&apos;][&apos;IN1.2.5&apos;].toString() != &quot;&quot;) { objIN1[index].planId.altText = seg[&apos;IN1.2&apos;][&apos;IN1.2.5&apos;]; }
				if (seg[&apos;IN1.2&apos;][&apos;IN1.2.6&apos;].toString() != &quot;&quot;) { objIN1[index].planId.altCodingSystem = seg[&apos;IN1.2&apos;][&apos;IN1.2.6&apos;]; }
				if (Object.keys(objIN1[index].planId).length == 0) {
					delete objIN1[index].planId;
				}
		
				// IN1.3, companyId
				objIN1[index].companyId = [];
				for each (field in seg[&apos;IN1.3&apos;]) {
					var block = {};
					if (field[&apos;IN1.3.1&apos;].toString() != &quot;&quot;) { block.id = field[&apos;IN1.3.1&apos;]; }
					if (field[&apos;IN1.3.2&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;IN1.3.2&apos;]; }
					if (field[&apos;IN1.3.3&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;IN1.3.3&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;IN1.3.4&apos;][&apos;IN1.3.4.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.3.4&apos;][&apos;IN1.3.4.1&apos;]; }
					if (field[&apos;IN1.3.4&apos;][&apos;IN1.3.4.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;IN1.3.4&apos;][&apos;IN1.3.4.2&apos;]; }
					if (field[&apos;IN1.3.4&apos;][&apos;IN1.3.4.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;IN1.3.4&apos;][&apos;IN1.3.4.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;IN1.3.4&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.3.4&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;IN1.3.5&apos;].toString() != &quot;&quot;) { block.idTypeCode = field[&apos;IN1.3.5&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;IN1.3.6&apos;][&apos;IN1.3.6.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.3.6&apos;][&apos;IN1.3.6.1&apos;]; }
					if (field[&apos;IN1.3.6&apos;][&apos;IN1.3.6.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;IN1.3.6&apos;][&apos;IN1.3.6.2&apos;]; }
					if (field[&apos;IN1.3.6&apos;][&apos;IN1.3.6.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;IN1.3.6&apos;][&apos;IN1.3.6.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;IN1.3.6&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.3.6&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].companyId.push(block);
					}
				}
				if (objIN1[index].companyId.length == 0) {
					delete objIN1[index].companyId;
				}
		
				// IN1.4, companyName
				objIN1[index].companyName = [];
				for each (field in seg[&apos;IN1.4&apos;]) {
					var block = {};
					if (field[&apos;IN1.4.1&apos;].toString() != &quot;&quot;) { block.organizationName = field[&apos;IN1.4.1&apos;]; }
					if (field[&apos;IN1.4.2&apos;].toString() != &quot;&quot;) { block.organizationNameTypeCode = field[&apos;IN1.4.2&apos;]; }
					if (field[&apos;IN1.4.3&apos;].toString() != &quot;&quot;) { block.idNumber = field[&apos;IN1.4.3&apos;]; }
					if (field[&apos;IN1.4.4&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;IN1.4.4&apos;]; }
					if (field[&apos;IN1.4.5&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;IN1.4.5&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;IN1.4.6&apos;][&apos;IN1.4.6.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.4.6&apos;][&apos;IN1.4.6.1&apos;]; }
					if (field[&apos;IN1.4.6&apos;][&apos;IN1.4.6.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;IN1.4.6&apos;][&apos;IN1.4.6.2&apos;]; }
					if (field[&apos;IN1.4.6&apos;][&apos;IN1.4.6.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;IN1.4.6&apos;][&apos;IN1.4.6.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;IN1.4.6&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.4.6&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;IN1.4.7&apos;].toString() != &quot;&quot;) { block.idTypeCode = field[&apos;IN1.4.7&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;IN1.4.8&apos;][&apos;IN1.4.8.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.4.8&apos;][&apos;IN1.4.8.1&apos;]; }
					if (field[&apos;IN1.4.8&apos;][&apos;IN1.4.8.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;IN1.4.8&apos;][&apos;IN1.4.8.2&apos;]; }
					if (field[&apos;IN1.4.8&apos;][&apos;IN1.4.8.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;IN1.4.8&apos;][&apos;IN1.4.8.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;IN1.4.8&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.4.8&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].companyName.push(block);
					}
				}
				if (objIN1[index].companyName.length == 0) {
					delete objIN1[index].companyName;
				}
				
				// IN1.5, companyAddress
				objIN1[index].companyAddress = [];
				for each (field in seg[&apos;IN1.5&apos;]) {
					var block = {};
					if (field[&apos;IN1.5.1&apos;].toString() != &quot;&quot;) { block.streetAddress = field[&apos;IN1.5.1&apos;]; }
					if (field[&apos;IN1.5.2&apos;].toString() != &quot;&quot;) { block.otherDesignation = field[&apos;IN1.5.2&apos;]; }
					if (field[&apos;IN1.5.3&apos;].toString() != &quot;&quot;) { block.city = field[&apos;IN1.5.3&apos;]; }
					if (field[&apos;IN1.5.4&apos;].toString() != &quot;&quot;) { block.stateOrProvince = field[&apos;IN1.5.4&apos;]; }
					if (field[&apos;IN1.5.5&apos;].toString() != &quot;&quot;) { block.zip = field[&apos;IN1.5.5&apos;]; }
					if (field[&apos;IN1.5.6&apos;].toString() != &quot;&quot;) { block.country = field[&apos;IN1.5.6&apos;]; }
					if (field[&apos;IN1.5.7&apos;].toString() != &quot;&quot;) { block.addressType = field[&apos;IN1.5.7&apos;]; }
					if (field[&apos;IN1.5.8&apos;].toString() != &quot;&quot;) { block.otherGeographicDesignation = field[&apos;IN1.5.8&apos;]; }
					if (field[&apos;IN1.5.9&apos;].toString() != &quot;&quot;) { block.countyOrParishCode = field[&apos;IN1.5.9&apos;]; }
					if (field[&apos;IN1.5.10&apos;].toString() != &quot;&quot;) { block.censusTract = field[&apos;IN1.5.10&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].companyAddress.push(block);
					}
				}
				if (objIN1[index].companyAddress.length == 0) {
					delete objIN1[index].companyAddress;
				}
		
				// IN1.6, companyContactPerson
				objIN1[index].companyContactPerson = [];
				for each (field in seg[&apos;IN1.6&apos;]) {
					var block = {};
					if (field[&apos;IN1.6.1&apos;].toString() != &quot;&quot;) { block.lastName = field[&apos;IN1.6.1&apos;]; }
					if (field[&apos;IN1.6.2&apos;].toString() != &quot;&quot;) { block.firstName = field[&apos;IN1.6.2&apos;]; }
					if (field[&apos;IN1.6.3&apos;].toString() != &quot;&quot;) { block.middleInitOrName = field[&apos;IN1.6.3&apos;]; }
					if (field[&apos;IN1.6.4&apos;].toString() != &quot;&quot;) { block.suffix = field[&apos;IN1.6.4&apos;]; }
					if (field[&apos;IN1.6.5&apos;].toString() != &quot;&quot;) { block.prefix = field[&apos;IN1.6.5&apos;]; }
					if (field[&apos;IN1.6.6&apos;].toString() != &quot;&quot;) { block.degree = field[&apos;IN1.6.6&apos;]; }
					if (field[&apos;IN1.6.7&apos;].toString() != &quot;&quot;) { block.nameTypeCode = field[&apos;IN1.6.7&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].companyContactPerson.push(block);
					}	
				}
				if (objIN1[index].companyContactPerson.length == 0) {
					delete objIN1[index].companyContactPerson;
				}
		
				// IN1.7, companyPhoneNumber
				objIN1[index].companyPhoneNumber = [];
				for each (field in seg[&apos;IN1.7&apos;]) {
					var block = {};
					if (field[&apos;IN1.7.1&apos;].toString() != &quot;&quot;) { block.number = field[&apos;IN1.7.1&apos;]; }
					if (field[&apos;IN1.7.2&apos;].toString() != &quot;&quot;) { block.telecommunicationUseCode = field[&apos;IN1.7.2&apos;]; }
					if (field[&apos;IN1.7.3&apos;].toString() != &quot;&quot;) { block.telecommunicationEquipmentType = field[&apos;IN1.7.3&apos;]; }
					if (field[&apos;IN1.7.4&apos;].toString() != &quot;&quot;) { block.emailAddress = field[&apos;IN1.7.4&apos;]; }
					if (field[&apos;IN1.7.5&apos;].toString() != &quot;&quot;) { block.countryCode = field[&apos;IN1.7.5&apos;]; }
					if (field[&apos;IN1.7.6&apos;].toString() != &quot;&quot;) { block.areaCityCode = field[&apos;IN1.7.6&apos;]; }
					if (field[&apos;IN1.7.7&apos;].toString() != &quot;&quot;) { block.phoneNumber = field[&apos;IN1.7.7&apos;]; }
					if (field[&apos;IN1.7.8&apos;].toString() != &quot;&quot;) { block.extension = field[&apos;IN1.7.8&apos;]; }
					if (field[&apos;IN1.7.9&apos;].toString() != &quot;&quot;) { block.text = field[&apos;IN1.7.9&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].companyPhoneNumber.push(block);
					}
				}
				if (objIN1[index].companyPhoneNumber.length == 0) {
					delete objIN1[index].companyPhoneNumber;
				}
		
				// IN1.8, groupNumber
				if (seg[&apos;IN1.8&apos;][&apos;IN1.8.1&apos;].toString() != &quot;&quot;) { objIN1[index].groupNumber = seg[&apos;IN1.8&apos;][&apos;IN1.8.1&apos;]; }
		
				// IN1.9, groupName
				objIN1[index].groupName = [];
				for each (field in seg[&apos;IN1.9&apos;]) {
					var block = {};
					if (field[&apos;IN1.9.1&apos;].toString() != &quot;&quot;) { block.organizationName = field[&apos;IN1.9.1&apos;]; }
					if (field[&apos;IN1.9.2&apos;].toString() != &quot;&quot;) { block.organizationNameTypeCode = field[&apos;IN1.9.2&apos;]; }
					if (field[&apos;IN1.9.3&apos;].toString() != &quot;&quot;) { block.idNumber = field[&apos;IN1.9.3&apos;]; }
					if (field[&apos;IN1.9.4&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;IN1.9.4&apos;]; }
					if (field[&apos;IN1.9.5&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;IN1.9.5&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;IN1.9.6&apos;][&apos;IN1.9.6.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.9.6&apos;][&apos;IN1.9.6.1&apos;]; }
					if (field[&apos;IN1.9.6&apos;][&apos;IN1.9.6.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;IN1.9.6&apos;][&apos;IN1.9.6.2&apos;]; }
					if (field[&apos;IN1.9.6&apos;][&apos;IN1.9.6.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;IN1.9.6&apos;][&apos;IN1.9.6.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;IN1.9.6&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.9.6&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;IN1.9.7&apos;].toString() != &quot;&quot;) { block.idTypeCode = field[&apos;IN1.9.7&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;IN1.9.8&apos;][&apos;IN1.9.8.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.9.8&apos;][&apos;IN1.9.8.1&apos;]; }
					if (field[&apos;IN1.9.8&apos;][&apos;IN1.9.8.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;IN1.9.8&apos;][&apos;IN1.9.8.2&apos;]; }
					if (field[&apos;IN1.9.8&apos;][&apos;IN1.9.8.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;IN1.9.8&apos;][&apos;IN1.9.8.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;IN1.9.8&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.9.8&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].groupName.push(block);
					}
				}
				if (objIN1[index].groupName.length == 0) {
					delete objIN1[index].groupName;
				}
		
				// IN1.10, groupEmpId
				objIN1[index].groupEmpId = [];
				for each (field in seg[&apos;IN1.10&apos;]) {
					var block = {};
					if (field[&apos;IN1.10.1&apos;].toString() != &quot;&quot;) { block.id = field[&apos;IN1.10.1&apos;]; }
					if (field[&apos;IN1.10.2&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;IN1.10.2&apos;]; }
					if (field[&apos;IN1.10.3&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;IN1.10.3&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;IN1.10.4&apos;][&apos;IN1.10.4.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.10.4&apos;][&apos;IN1.10.4.1&apos;]; }
					if (field[&apos;IN1.10.4&apos;][&apos;IN1.10.4.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;IN1.10.4&apos;][&apos;IN1.10.4.2&apos;]; }
					if (field[&apos;IN1.10.4&apos;][&apos;IN1.10.4.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;IN1.10.4&apos;][&apos;IN1.10.4.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;IN1.10.4&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.10.4&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;IN1.10.5&apos;].toString() != &quot;&quot;) { block.idTypeCode = field[&apos;IN1.10.5&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;IN1.10.6&apos;][&apos;IN1.10.6.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.10.6&apos;][&apos;IN1.10.6.1&apos;]; }
					if (field[&apos;IN1.10.6&apos;][&apos;IN1.10.6.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;IN1.10.6&apos;][&apos;IN1.10.6.2&apos;]; }
					if (field[&apos;IN1.10.6&apos;][&apos;IN1.10.6.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;IN1.10.6&apos;][&apos;IN1.10.6.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;IN1.10.6&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.10.6&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].groupEmpId.push(block);
					}
				}
				if (objIN1[index].groupEmpId.length == 0) {
					delete objIN1[index].groupEmpId;
				}
		
				// IN1.11, groupEmpName
				objIN1[index].groupEmpName = [];
				for each (field in seg[&apos;IN1.11&apos;]) {
					var block = {};
					if (field[&apos;IN1.11.1&apos;].toString() != &quot;&quot;) { block.organizationName = field[&apos;IN1.11.1&apos;]; }
					if (field[&apos;IN1.11.2&apos;].toString() != &quot;&quot;) { block.organizationNameTypeCode = field[&apos;IN1.11.2&apos;]; }
					if (field[&apos;IN1.11.3&apos;].toString() != &quot;&quot;) { block.idNumber = field[&apos;IN1.11.3&apos;]; }
					if (field[&apos;IN1.11.4&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;IN1.11.4&apos;]; }
					if (field[&apos;IN1.11.5&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;IN1.11.5&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;IN1.11.6&apos;][&apos;IN1.11.6.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.11.6&apos;][&apos;IN1.11.6.1&apos;]; }
					if (field[&apos;IN1.11.6&apos;][&apos;IN1.11.6.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;IN1.11.6&apos;][&apos;IN1.11.6.2&apos;]; }
					if (field[&apos;IN1.11.6&apos;][&apos;IN1.11.6.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;IN1.11.6&apos;][&apos;IN1.11.6.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;IN1.11.6&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.11.6&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;IN1.11.7&apos;].toString() != &quot;&quot;) { block.idTypeCode = field[&apos;IN1.11.7&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;IN1.11.8&apos;][&apos;IN1.11.8.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.11.8&apos;][&apos;IN1.11.8.1&apos;]; }
					if (field[&apos;IN1.11.8&apos;][&apos;IN1.11.8.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;IN1.11.8&apos;][&apos;IN1.11.8.2&apos;]; }
					if (field[&apos;IN1.11.8&apos;][&apos;IN1.11.8.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;IN1.11.8&apos;][&apos;IN1.11.8.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;IN1.11.8&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.11.8&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].groupEmpName.push(block);
					}
				}
				if (objIN1[index].groupEmpName.length == 0) {
					delete objIN1[index].groupEmpName;
				}
		
				// IN1.12, planEffectiveDate
				if (seg[&apos;IN1.12&apos;][&apos;IN1.12.1&apos;].toString() != &quot;&quot;) { objIN1[index].planEffectiveDate = seg[&apos;IN1.12&apos;][&apos;IN1.12.1&apos;]; }
		
				// IN1.13, planExpirationDate
				if (seg[&apos;IN1.13&apos;][&apos;IN1.13.1&apos;].toString() != &quot;&quot;) { objIN1[index].planExpirationDate = seg[&apos;IN1.13&apos;][&apos;IN1.13.1&apos;]; }
		
				// IN1.14, authorizationInformation
				objIN1[index].authorizationInformation = {};
				if (seg[&apos;IN1.14&apos;][&apos;IN1.14.1&apos;].toString() != &quot;&quot;) { objIN1[index].authorizationInformation.authorizationNumber = seg[&apos;IN1.14&apos;][&apos;IN1.14.1&apos;]; }
				if (seg[&apos;IN1.14&apos;][&apos;IN1.14.2&apos;].toString() != &quot;&quot;) { objIN1[index].authorizationInformation.date = seg[&apos;IN1.14&apos;][&apos;IN1.14.2&apos;]; }
				if (seg[&apos;IN1.14&apos;][&apos;IN1.14.3&apos;].toString() != &quot;&quot;) { objIN1[index].authorizationInformation.source = seg[&apos;IN1.14&apos;][&apos;IN1.14.3&apos;]; }
				if (Object.keys(objIN1[index].authorizationInformation).length == 0) {
					delete objIN1[index].authorizationInformation;
				}
		
				// IN1.15, planType
				if (seg[&apos;IN1.15&apos;][&apos;IN1.15.1&apos;].toString() != &quot;&quot;) { objIN1[index].planType = seg[&apos;IN1.15&apos;][&apos;IN1.15.1&apos;]; }
				
				// IN1.16, insuredName
				objIN1[index].insuredName = [];
				for each (field in seg[&apos;IN1.16&apos;]) {
					var block = {};
					if (field[&apos;IN1.16.1&apos;].toString() != &quot;&quot;) { block.lastName = field[&apos;IN1.16.1&apos;]; }
					if (field[&apos;IN1.16.2&apos;].toString() != &quot;&quot;) { block.firstName = field[&apos;IN1.16.2&apos;]; }
					if (field[&apos;IN1.16.3&apos;].toString() != &quot;&quot;) { block.middleInitOrName = field[&apos;IN1.16.3&apos;]; }
					if (field[&apos;IN1.16.4&apos;].toString() != &quot;&quot;) { block.suffix = field[&apos;IN1.16.4&apos;]; }
					if (field[&apos;IN1.16.5&apos;].toString() != &quot;&quot;) { block.prefix = field[&apos;IN1.16.5&apos;]; }
					if (field[&apos;IN1.16.6&apos;].toString() != &quot;&quot;) { block.degree = field[&apos;IN1.16.6&apos;]; }
					if (field[&apos;IN1.16.7&apos;].toString() != &quot;&quot;) { block.nameTypeCode = field[&apos;IN1.16.7&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].insuredName.push(block);
					}	
				}
				if (objIN1[index].insuredName.length == 0) {
					delete objIN1[index].insuredName;
				}
		
				// IN1.17, insuredRelationshipToPatient
				if (seg[&apos;IN1.17&apos;][&apos;IN1.17.1&apos;].toString() != &quot;&quot;) { objIN1[index].insuredRelationshipToPatient = seg[&apos;IN1.17&apos;][&apos;IN1.17.1&apos;]; }
				
				// IN1.18, insuredDob
				if (seg[&apos;IN1.18&apos;][&apos;IN1.18.1&apos;].toString() != &quot;&quot;) { objIN1[index].insuredDob = seg[&apos;IN1.18&apos;][&apos;IN1.18.1&apos;]; }
				
				// IN1.19, insuredAddress
				objIN1[index].insuredAddress = [];
				for each (field in seg[&apos;IN1.19&apos;]) {
					var block = {};
					if (field[&apos;IN1.19.1&apos;].toString() != &quot;&quot;) { block.streetAddress = field[&apos;IN1.19.1&apos;]; }
					if (field[&apos;IN1.19.2&apos;].toString() != &quot;&quot;) { block.otherDesignation = field[&apos;IN1.19.2&apos;]; }
					if (field[&apos;IN1.19.3&apos;].toString() != &quot;&quot;) { block.city = field[&apos;IN1.19.3&apos;]; }
					if (field[&apos;IN1.19.4&apos;].toString() != &quot;&quot;) { block.stateOrProvince = field[&apos;IN1.19.4&apos;]; }
					if (field[&apos;IN1.19.5&apos;].toString() != &quot;&quot;) { block.zip = field[&apos;IN1.19.5&apos;]; }
					if (field[&apos;IN1.19.6&apos;].toString() != &quot;&quot;) { block.country = field[&apos;IN1.19.6&apos;]; }
					if (field[&apos;IN1.19.7&apos;].toString() != &quot;&quot;) { block.addressType = field[&apos;IN1.19.7&apos;]; }
					if (field[&apos;IN1.19.8&apos;].toString() != &quot;&quot;) { block.otherGeographicDesignation = field[&apos;IN1.19.8&apos;]; }
					if (field[&apos;IN1.19.9&apos;].toString() != &quot;&quot;) { block.countyOrParishCode = field[&apos;IN1.19.9&apos;]; }
					if (field[&apos;IN1.19.10&apos;].toString() != &quot;&quot;) { block.censusTract = field[&apos;IN1.19.10&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].insuredAddress.push(block);
					}
				}
				if (objIN1[index].insuredAddress.length == 0) {
					delete objIN1[index].insuredAddress;
				}
		
				// IN1.20, assignmentOfBenefits
				if (seg[&apos;IN1.20&apos;][&apos;IN1.20.1&apos;].toString() != &quot;&quot;) { objIN1[index].assignmentOfBenefits = seg[&apos;IN1.20&apos;][&apos;IN1.20.1&apos;]; }
				
				// IN1.21, coordinationOfBenefits
				if (seg[&apos;IN1.21&apos;][&apos;IN1.21.1&apos;].toString() != &quot;&quot;) { objIN1[index].coordinationOfBenefits = seg[&apos;IN1.21&apos;][&apos;IN1.21.1&apos;]; }
				
				// IN1.22, coordinationOfBenefitsPriority
				if (seg[&apos;IN1.22&apos;][&apos;IN1.22.1&apos;].toString() != &quot;&quot;) { objIN1[index].coordinationOfBenefitsPriority = seg[&apos;IN1.22&apos;][&apos;IN1.22.1&apos;]; }
				
				// IN1.23, noticeOfAdmissionFlag
				if (seg[&apos;IN1.23&apos;][&apos;IN1.23.1&apos;].toString() != &quot;&quot;) { objIN1[index].noticeOfAdmissionFlag = seg[&apos;IN1.23&apos;][&apos;IN1.23.1&apos;]; }
				
				// IN1.24, noticeOfAdmissionDate
				if (seg[&apos;IN1.24&apos;][&apos;IN1.24.1&apos;].toString() != &quot;&quot;) { objIN1[index].noticeOfAdmissionDate = seg[&apos;IN1.24&apos;][&apos;IN1.24.1&apos;]; }
				
				// IN1.25, reportOfEligibilityFlag
				if (seg[&apos;IN1.25&apos;][&apos;IN1.25.1&apos;].toString() != &quot;&quot;) { objIN1[index].reportOfEligibilityFlag = seg[&apos;IN1.25&apos;][&apos;IN1.25.1&apos;]; }
				
				// IN1.26, reportOfEligibilityDate
				if (seg[&apos;IN1.26&apos;][&apos;IN1.26.1&apos;].toString() != &quot;&quot;) { objIN1[index].reportOfEligibilityDate = seg[&apos;IN1.26&apos;][&apos;IN1.26.1&apos;]; }
				
				// IN1.27, releaseInformationCode
				if (seg[&apos;IN1.27&apos;][&apos;IN1.27.1&apos;].toString() != &quot;&quot;) { objIN1[index].releaseInformationCode = seg[&apos;IN1.27&apos;][&apos;IN1.27.1&apos;]; }
				
				// IN1.28, preAdmitCert
				if (seg[&apos;IN1.28&apos;][&apos;IN1.28.1&apos;].toString() != &quot;&quot;) { objIN1[index].preAdmitCert = seg[&apos;IN1.28&apos;][&apos;IN1.28.1&apos;]; }
				
				// IN1.29, verificationDateTime
				if (seg[&apos;IN1.29&apos;][&apos;IN1.29.1&apos;].toString() != &quot;&quot;) { objIN1[index].verificationDateTime = seg[&apos;IN1.29&apos;][&apos;IN1.29.1&apos;]; }
				
				// IN1.30, verificationBy
				objIN1[index].verificationBy = {};
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.1&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.id = seg[&apos;IN1.30&apos;][&apos;IN1.30.1&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.2&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.lastName = seg[&apos;IN1.30&apos;][&apos;IN1.30.2&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.3&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.firstName = seg[&apos;IN1.30&apos;][&apos;IN1.30.3&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.4&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.middleInitOrName = seg[&apos;IN1.30&apos;][&apos;IN1.30.4&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.5&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.suffix = seg[&apos;IN1.30&apos;][&apos;IN1.30.5&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.6&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.prefix = seg[&apos;IN1.30&apos;][&apos;IN1.30.6&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.7&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.degree = seg[&apos;IN1.30&apos;][&apos;IN1.30.7&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.8&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.sourceTable = seg[&apos;IN1.30&apos;][&apos;IN1.30.8&apos;]; }
				objIN1[index].verificationBy.assigningAuthority = {};
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.9&apos;][&apos;IN1.30.9.1&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.assigningAuthority.id = seg[&apos;IN1.30&apos;][&apos;IN1.30.9&apos;][&apos;IN1.30.9.1&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.9&apos;][&apos;IN1.30.9.2&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.assigningAuthority.universalId = seg[&apos;IN1.30&apos;][&apos;IN1.30.9&apos;][&apos;IN1.30.9.2&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.9&apos;][&apos;IN1.30.9.3&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.assigningAuthority.universalIdType = seg[&apos;IN1.30&apos;][&apos;IN1.30.9&apos;][&apos;IN1.30.9.3&apos;]; }
				if (Object.keys(objIN1[index].verificationBy.assigningAuthority).length == 0) {
					if (seg[&apos;IN1.30&apos;][&apos;IN1.30.9&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.assigningAuthority.id = seg[&apos;IN1.30&apos;][&apos;IN1.30.9&apos;]; }
					else delete objIN1[index].verificationBy.assigningAuthority;
				}
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.10&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.nameTypeCode = seg[&apos;IN1.30&apos;][&apos;IN1.30.10&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.11&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.identifierCheckDigit = seg[&apos;IN1.30&apos;][&apos;IN1.30.11&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.12&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.codeIdentifyingCheckDigitScheme = seg[&apos;IN1.30&apos;][&apos;IN1.30.12&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.13&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.identifierTypeCode = seg[&apos;IN1.30&apos;][&apos;IN1.30.13&apos;]; }
				objIN1[index].verificationBy.assigningFacility = {};
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.14&apos;][&apos;IN1.30.14.1&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.assigningFacility.id = seg[&apos;IN1.30&apos;][&apos;IN1.30.14&apos;][&apos;IN1.30.14.1&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.14&apos;][&apos;IN1.30.14.2&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.assigningFacility.universalId = seg[&apos;IN1.30&apos;][&apos;IN1.30.14&apos;][&apos;IN1.30.14.2&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.14&apos;][&apos;IN1.30.14.3&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.assigningFacility.universalIdType = seg[&apos;IN1.30&apos;][&apos;IN1.30.14&apos;][&apos;IN1.30.14.3&apos;]; }
				if (Object.keys(objIN1[index].verificationBy.assigningFacility).length == 0) {
					if (seg[&apos;IN1.30&apos;][&apos;IN1.30.14&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.assigningFacility.id = seg[&apos;IN1.30&apos;][&apos;IN1.30.14&apos;]; }
					else delete objIN1[index].verificationBy.assigningFacility;
				}
				if (Object.keys(objIN1[index].verificationBy).length == 0) {
					delete objIN1[index].verificationBy;
				}
		
				// IN1.31, typeOfAgreementCode
				if (seg[&apos;IN1.31&apos;][&apos;IN1.31.1&apos;].toString() != &quot;&quot;) { objIN1[index].typeOfAgreementCode = seg[&apos;IN1.31&apos;][&apos;IN1.31.1&apos;]; }
				
				// IN1.32, billingStatus
				if (seg[&apos;IN1.32&apos;][&apos;IN1.32.1&apos;].toString() != &quot;&quot;) { objIN1[index].billingStatus = seg[&apos;IN1.32&apos;][&apos;IN1.32.1&apos;]; }
				
				// IN1.33, lifetimeReserveDays
				if (seg[&apos;IN1.33&apos;][&apos;IN1.33.1&apos;].toString() != &quot;&quot;) { objIN1[index].lifetimeReserveDays = seg[&apos;IN1.33&apos;][&apos;IN1.33.1&apos;]; }
				
				// IN1.34, delayBeforeLrDay
				if (seg[&apos;IN1.34&apos;][&apos;IN1.34.1&apos;].toString() != &quot;&quot;) { objIN1[index].delayBeforeLrDay = seg[&apos;IN1.34&apos;][&apos;IN1.34.1&apos;]; }
				
				// IN1.35, companyPlanCode
				if (seg[&apos;IN1.35&apos;][&apos;IN1.35.1&apos;].toString() != &quot;&quot;) { objIN1[index].companyPlanCode = seg[&apos;IN1.35&apos;][&apos;IN1.35.1&apos;]; }
				
				// IN1.36, policyNumber
				if (seg[&apos;IN1.36&apos;][&apos;IN1.36.1&apos;].toString() != &quot;&quot;) { objIN1[index].policyNumber = seg[&apos;IN1.36&apos;][&apos;IN1.36.1&apos;]; }
				
				// IN1.37, policyDeductible
				objIN1[index].policyDeductible = {};
				objIN1[index].policyDeductible.price = {};
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.1&apos;][&apos;IN1.37.1.1&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.price.quantity = seg[&apos;IN1.37&apos;][&apos;IN1.37.1&apos;][&apos;IN1.37.1.1&apos;]; }
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.1&apos;][&apos;IN1.37.1.2&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.price.denomination = seg[&apos;IN1.37&apos;][&apos;IN1.37.1&apos;][&apos;IN1.37.1.2&apos;]; }
				if (Object.keys(objIN1[index].policyDeductible.price).length == 0) {
					if (seg[&apos;IN1.37&apos;][&apos;IN1.37.1&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.price.quantity = seg[&apos;IN1.37&apos;][&apos;IN1.37.1&apos;]; }
					else delete objIN1[index].policyDeductible.price;
				}
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.2&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.priceType = seg[&apos;IN1.37&apos;][&apos;IN1.37.2&apos;]; }
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.3&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.fromValue = seg[&apos;IN1.37&apos;][&apos;IN1.37.3&apos;]; }
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.4&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.toValue = seg[&apos;IN1.37&apos;][&apos;IN1.37.4&apos;]; }
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.5&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.rangeUnits = seg[&apos;IN1.37&apos;][&apos;IN1.37.5&apos;]; }
				objIN1[index].policyDeductible.rangeType = {};
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.1&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.rangeType.id = seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.1&apos;]; }
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.2&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.rangeType.text = seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.2&apos;]; }
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.3&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.rangeType.codingSystem = seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.3&apos;]; }
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.4&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.rangeType.altId = seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.4&apos;]; }
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.5&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.rangeType.altText = seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.5&apos;]; }
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.6&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.rangeType.altCodingSystem = seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.6&apos;]; }
				if (Object.keys(objIN1[index].policyDeductible.rangeType).length == 0) {
					if (seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.rangeType.id = seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;]; }
					else delete objIN1[index].policyDeductible.rangeType;
				}
				if (Object.keys(objIN1[index].policyDeductible).length == 0) {
					delete objIN1[index].policyDeductible;
				}
		
				// IN1.38, policyLimitAmount
				objIN1[index].policyLimitAmount = {};
				objIN1[index].policyLimitAmount.price = {};
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.1&apos;][&apos;IN1.38.1.1&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.price.quantity = seg[&apos;IN1.38&apos;][&apos;IN1.38.1&apos;][&apos;IN1.38.1.1&apos;]; }
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.1&apos;][&apos;IN1.38.1.2&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.price.denomination = seg[&apos;IN1.38&apos;][&apos;IN1.38.1&apos;][&apos;IN1.38.1.2&apos;]; }
				if (Object.keys(objIN1[index].policyLimitAmount.price).length == 0) {
					if (seg[&apos;IN1.38&apos;][&apos;IN1.38.1&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.price.quantity = seg[&apos;IN1.38&apos;][&apos;IN1.38.1&apos;]; }
					else delete objIN1[index].policyLimitAmount.price;
				}
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.2&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.priceType = seg[&apos;IN1.38&apos;][&apos;IN1.38.2&apos;]; }
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.3&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.fromValue = seg[&apos;IN1.38&apos;][&apos;IN1.38.3&apos;]; }
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.4&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.toValue = seg[&apos;IN1.38&apos;][&apos;IN1.38.4&apos;]; }
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.5&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.rangeUnits = seg[&apos;IN1.38&apos;][&apos;IN1.38.5&apos;]; }
				objIN1[index].policyLimitAmount.rangeType = {};
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.1&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.rangeType.id = seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.1&apos;]; }
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.2&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.rangeType.text = seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.2&apos;]; }
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.3&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.rangeType.codingSystem = seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.3&apos;]; }
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.4&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.rangeType.altId = seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.4&apos;]; }
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.5&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.rangeType.altText = seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.5&apos;]; }
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.6&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.rangeType.altCodingSystem = seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.6&apos;]; }
				if (Object.keys(objIN1[index].policyLimitAmount.rangeType).length == 0) {
					if (seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.rangeType.id = seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;]; }
					else delete objIN1[index].policyLimitAmount.rangeType;
				}
				if (Object.keys(objIN1[index].policyLimitAmount).length == 0) {
					delete objIN1[index].policyLimitAmount;
				}
		
				// IN1.39, policyLimitDays
				if (seg[&apos;IN1.39&apos;][&apos;IN1.39.1&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitDays = seg[&apos;IN1.39&apos;][&apos;IN1.39.1&apos;]; }
				
				// IN1.40, roomRateSemiPrivate
				objIN1[index].roomRateSemiPrivate = {};
				objIN1[index].roomRateSemiPrivate.price = {};
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.1&apos;][&apos;IN1.40.1.1&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.price.quantity = seg[&apos;IN1.40&apos;][&apos;IN1.40.1&apos;][&apos;IN1.40.1.1&apos;]; }
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.1&apos;][&apos;IN1.40.1.2&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.price.denomination = seg[&apos;IN1.40&apos;][&apos;IN1.40.1&apos;][&apos;IN1.40.1.2&apos;]; }
				if (Object.keys(objIN1[index].roomRateSemiPrivate.price).length == 0) {
					if (seg[&apos;IN1.40&apos;][&apos;IN1.40.1&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.price.quantity = seg[&apos;IN1.40&apos;][&apos;IN1.40.1&apos;]; }
					else delete objIN1[index].roomRateSemiPrivate.price;
				}
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.2&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.priceType = seg[&apos;IN1.40&apos;][&apos;IN1.40.2&apos;]; }
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.3&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.fromValue = seg[&apos;IN1.40&apos;][&apos;IN1.40.3&apos;]; }
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.4&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.toValue = seg[&apos;IN1.40&apos;][&apos;IN1.40.4&apos;]; }
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.5&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.rangeUnits = seg[&apos;IN1.40&apos;][&apos;IN1.40.5&apos;]; }
				objIN1[index].roomRateSemiPrivate.rangeType = {};
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.1&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.rangeType.id = seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.1&apos;]; }
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.2&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.rangeType.text = seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.2&apos;]; }
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.3&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.rangeType.codingSystem = seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.3&apos;]; }
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.4&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.rangeType.altId = seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.4&apos;]; }
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.5&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.rangeType.altText = seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.5&apos;]; }
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.6&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.rangeType.altCodingSystem = seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.6&apos;]; }
				if (Object.keys(objIN1[index].roomRateSemiPrivate.rangeType).length == 0) {
					if (seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.rangeType.id = seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;]; }
					else delete objIN1[index].roomRateSemiPrivate.rangeType;
				}
				if (Object.keys(objIN1[index].roomRateSemiPrivate).length == 0) {
					delete objIN1[index].roomRateSemiPrivate;
				}
		
				// IN1.41, roomRatePrivate
				objIN1[index].roomRatePrivate = {};
				objIN1[index].roomRatePrivate.price = {};
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.1&apos;][&apos;IN1.41.1.1&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.price.quantity = seg[&apos;IN1.41&apos;][&apos;IN1.41.1&apos;][&apos;IN1.41.1.1&apos;]; }
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.1&apos;][&apos;IN1.41.1.2&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.price.denomination = seg[&apos;IN1.41&apos;][&apos;IN1.41.1&apos;][&apos;IN1.41.1.2&apos;]; }
				if (Object.keys(objIN1[index].roomRatePrivate.price).length == 0) {
					if (seg[&apos;IN1.41&apos;][&apos;IN1.41.1&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.price.quantity = seg[&apos;IN1.41&apos;][&apos;IN1.41.1&apos;]; }
					else delete objIN1[index].roomRatePrivate.price;
				}
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.2&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.priceType = seg[&apos;IN1.41&apos;][&apos;IN1.41.2&apos;]; }
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.3&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.fromValue = seg[&apos;IN1.41&apos;][&apos;IN1.41.3&apos;]; }
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.4&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.toValue = seg[&apos;IN1.41&apos;][&apos;IN1.41.4&apos;]; }
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.5&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.rangeUnits = seg[&apos;IN1.41&apos;][&apos;IN1.41.5&apos;]; }
				objIN1[index].roomRatePrivate.rangeType = {};
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.1&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.rangeType.id = seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.1&apos;]; }
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.2&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.rangeType.text = seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.2&apos;]; }
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.3&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.rangeType.codingSystem = seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.3&apos;]; }
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.4&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.rangeType.altId = seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.4&apos;]; }
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.5&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.rangeType.altText = seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.5&apos;]; }
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.6&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.rangeType.altCodingSystem = seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.6&apos;]; }
				if (Object.keys(objIN1[index].roomRatePrivate.rangeType).length == 0) {
					if (seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.rangeType.id = seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;]; }
					else delete objIN1[index].roomRatePrivate.rangeType;
				}
				if (Object.keys(objIN1[index].roomRatePrivate).length == 0) {
					delete objIN1[index].roomRatePrivate;
				}
		
				// IN1.42, insuredEmploymentStatus
				objIN1[index].insuredEmploymentStatus = {};
				if (seg[&apos;IN1.42&apos;][&apos;IN1.42.1&apos;].toString() != &quot;&quot;) { objIN1[index].insuredEmploymentStatus.id = seg[&apos;IN1.42&apos;][&apos;IN1.42.1&apos;]; }
				if (seg[&apos;IN1.42&apos;][&apos;IN1.42.2&apos;].toString() != &quot;&quot;) { objIN1[index].insuredEmploymentStatus.text = seg[&apos;IN1.42&apos;][&apos;IN1.42.2&apos;]; }
				if (seg[&apos;IN1.42&apos;][&apos;IN1.42.3&apos;].toString() != &quot;&quot;) { objIN1[index].insuredEmploymentStatus.codingSystem = seg[&apos;IN1.42&apos;][&apos;IN1.42.3&apos;]; }
				if (seg[&apos;IN1.42&apos;][&apos;IN1.42.4&apos;].toString() != &quot;&quot;) { objIN1[index].insuredEmploymentStatus.altId = seg[&apos;IN1.42&apos;][&apos;IN1.42.4&apos;]; }
				if (seg[&apos;IN1.42&apos;][&apos;IN1.42.5&apos;].toString() != &quot;&quot;) { objIN1[index].insuredEmploymentStatus.altText = seg[&apos;IN1.42&apos;][&apos;IN1.42.5&apos;]; }
				if (seg[&apos;IN1.42&apos;][&apos;IN1.42.6&apos;].toString() != &quot;&quot;) { objIN1[index].insuredEmploymentStatus.altCodingSystem = seg[&apos;IN1.42&apos;][&apos;IN1.42.6&apos;]; }
				if (Object.keys(objIN1[index].insuredEmploymentStatus).length == 0) {
					delete objIN1[index].insuredEmploymentStatus;
				}
				
				// IN1.43, insuredSex
				if (seg[&apos;IN1.43&apos;][&apos;IN1.43.1&apos;].toString() != &quot;&quot;) { objIN1[index].insuredSex = seg[&apos;IN1.43&apos;][&apos;IN1.43.1&apos;]; }
				
				// IN1.44, insuredEmployerAddress
				objIN1[index].insuredEmployerAddress = [];
				for each (field in seg[&apos;IN1.44&apos;]) {
					var block = {};
					if (field[&apos;IN1.44.1&apos;].toString() != &quot;&quot;) { block.streetAddress = field[&apos;IN1.44.1&apos;]; }
					if (field[&apos;IN1.44.2&apos;].toString() != &quot;&quot;) { block.otherDesignation = field[&apos;IN1.44.2&apos;]; }
					if (field[&apos;IN1.44.3&apos;].toString() != &quot;&quot;) { block.city = field[&apos;IN1.44.3&apos;]; }
					if (field[&apos;IN1.44.4&apos;].toString() != &quot;&quot;) { block.stateOrProvince = field[&apos;IN1.44.4&apos;]; }
					if (field[&apos;IN1.44.5&apos;].toString() != &quot;&quot;) { block.zip = field[&apos;IN1.44.5&apos;]; }
					if (field[&apos;IN1.44.6&apos;].toString() != &quot;&quot;) { block.country = field[&apos;IN1.44.6&apos;]; }
					if (field[&apos;IN1.44.7&apos;].toString() != &quot;&quot;) { block.addressType = field[&apos;IN1.44.7&apos;]; }
					if (field[&apos;IN1.44.8&apos;].toString() != &quot;&quot;) { block.otherGeographicDesignation = field[&apos;IN1.44.8&apos;]; }
					if (field[&apos;IN1.44.9&apos;].toString() != &quot;&quot;) { block.countyOrParishCode = field[&apos;IN1.44.9&apos;]; }
					if (field[&apos;IN1.44.10&apos;].toString() != &quot;&quot;) { block.censusTract = field[&apos;IN1.44.10&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].insuredEmployerAddress.push(block);
					}
				}
				if (objIN1[index].insuredEmployerAddress.length == 0) {
					delete objIN1[index].insuredEmployerAddress;
				}
		
				// IN1.45, verificationStatus
				if (seg[&apos;IN1.45&apos;][&apos;IN1.45.1&apos;].toString() != &quot;&quot;) { objIN1[index].verificationStatus = seg[&apos;IN1.45&apos;][&apos;IN1.45.1&apos;]; }
				
				// IN1.46, priorInsurancePlanId
				if (seg[&apos;IN1.46&apos;][&apos;IN1.46.1&apos;].toString() != &quot;&quot;) { objIN1[index].priorInsurancePlanId = seg[&apos;IN1.46&apos;][&apos;IN1.46.1&apos;]; }
				
				// IN1.47, coverageType
				if (seg[&apos;IN1.47&apos;][&apos;IN1.47.1&apos;].toString() != &quot;&quot;) { objIN1[index].coverageType = seg[&apos;IN1.47&apos;][&apos;IN1.47.1&apos;]; }
				
				// IN1.48, handicap
				if (seg[&apos;IN1.48&apos;][&apos;IN1.48.1&apos;].toString() != &quot;&quot;) { objIN1[index].handicap = seg[&apos;IN1.48&apos;][&apos;IN1.48.1&apos;]; }
				
				// IN1.49, insuredIdNumber
				objIN1[index].insuredIdNumber = [];
				for each (field in seg[&apos;IN1.49&apos;]) {
					var block = {};
					if (field[&apos;IN1.49.1&apos;].toString() != &quot;&quot;) { block.id = field[&apos;IN1.49.1&apos;]; }
					if (field[&apos;IN1.49.2&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;IN1.49.2&apos;]; }
					if (field[&apos;IN1.49.3&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;IN1.49.3&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;IN1.49.4&apos;][&apos;IN1.49.4.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.49.4&apos;][&apos;IN1.49.4.1&apos;]; }
					if (field[&apos;IN1.49.4&apos;][&apos;IN1.49.4.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;IN1.49.4&apos;][&apos;IN1.49.4.2&apos;]; }
					if (field[&apos;IN1.49.4&apos;][&apos;IN1.49.4.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;IN1.49.4&apos;][&apos;IN1.49.4.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;IN1.49.4&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.49.4&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;IN1.49.5&apos;].toString() != &quot;&quot;) { block.idTypeCode = field[&apos;IN1.49.5&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;IN1.49.6&apos;][&apos;IN1.49.6.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.49.6&apos;][&apos;IN1.49.6.1&apos;]; }
					if (field[&apos;IN1.49.6&apos;][&apos;IN1.49.6.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;IN1.49.6&apos;][&apos;IN1.49.6.2&apos;]; }
					if (field[&apos;IN1.49.6&apos;][&apos;IN1.49.6.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;IN1.49.6&apos;][&apos;IN1.49.6.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;IN1.49.6&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.49.6&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].insuredIdNumber.push(block);
					}
				}
				if (objIN1[index].insuredIdNumber.length == 0) {
					delete objIN1[index].insuredIdNumber;
				}

				// clean up IN1 and increment index
				if (Object.keys(objIN1[index]).length == 0) {
					delete objIN1[index];
				} else {
					index++;
				}
			}
		}
		return objIN1;	
	} // end if 
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>11129b32-0d06-4bbf-881a-466425800808</id>
        <name>getMSH_v23</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911262873</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	getMSH_v23(msg)
	
	- Desc: This function retrieves HL7v2 HAPI format elements and values from MSH segment stored in
	object for reference

	@param {String} msg - this contains the raw message (string)
	@return {object} objMSH - this contains the MSH segment elements composed into a single objMSH
		object.
*/
function getMSH_v23(msg) {

	var scriptName= &apos;getMSH_v23&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG msg.MSH: &apos;+JSON.stringify(msg[&apos;MSH&apos;].toString())); }
	
	// define variables
	if (typeof(msg[&apos;MSH&apos;].toString()) !== undefined) {

		// MSH
		// var objMSH= new Object();
		var objMSH= {};

		// MSH.1, fieldSeparator
		if (msg[&apos;MSH&apos;][&apos;MSH.1&apos;].toString() != &quot;&quot;) { objMSH.fieldSeparator = msg[&apos;MSH&apos;][&apos;MSH.1&apos;].toString(); }
					
		// objMSH.2, encodingCharacters
		if (msg[&apos;MSH&apos;][&apos;MSH.2&apos;].toString() != &quot;&quot;) { objMSH.subFieldSeparator = msg[&apos;MSH&apos;][&apos;MSH.2&apos;].toString(); }
		
		// objMSH.3, sendingApplication
		if (msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString() != &quot;&quot;) { objMSH.sendingApplication = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString(); }
		
		// objMSH.4, sendingFacility
		if (msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString() != &quot;&quot;) { objMSH.sendingFacility= msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString(); }
		
		// objMSH.5, receivingApplication
		if (msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString() != &quot;&quot;) { objMSH.receivingApplication = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString(); }
		
		// objMSH.6, receivingFacility
		if (msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;].toString() != &quot;&quot;) { objMSH.receivingFacility = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;].toString(); }
		
		// objMSH.7, dateTimeOfMessage
		if (msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString() != &quot;&quot;) { objMSH.messageDateTime = msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString(); }
		
		// objMSH.8, security
		if (msg[&apos;MSH&apos;][&apos;MSH.8&apos;][&apos;MSH.8.1&apos;].toString() != &quot;&quot;) { objMSH.security = msg[&apos;MSH&apos;][&apos;MSH.8&apos;][&apos;MSH.8.1&apos;].toString(); }
		
		// objMSH.9, messageType
		if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;].toString() != &quot;&quot;) {
			objMSH.messageType = msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString();
			objMSH.eventType   = msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();
			// logger.error(scriptName+&apos;::DEBUG objMSH_messageType: &apos;+objMSH.messageType+&apos; objMSH_eventType: &apos;+objMSH.eventType);
		}
		
		// objMSH.10, messageControlID
		if (msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString() != &quot;&quot;) { 
			objMSH.messageControlID = msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString(); 
		}
		
		// objMSH.11, processingID
		if (msg[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;].toString() != &quot;&quot;) {
			objMSH.processingID = msg[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;].toString(); 
		}
		
		// objMSH.12, versionID
		if (msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;].toString() != &quot;&quot;) { objMSH.hl7version = msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;].toString(); }
		
		// objMSH.13, sequenceNumber
		if (msg[&apos;MSH&apos;][&apos;MSH.13&apos;][&apos;MSH.13.1&apos;].toString() != &quot;&quot;) { objMSH.sequenceNumber = msg[&apos;MSH&apos;][&apos;MSH.13&apos;][&apos;MSH.13.1&apos;].toString(); }
		
		// objMSH.14, continuationPointer
		if (msg[&apos;MSH&apos;][&apos;MSH.14&apos;][&apos;MSH.14.1&apos;].toString() != &quot;&quot;) { objMSH.continuationPointer = msg[&apos;MSH&apos;][&apos;MSH.14&apos;][&apos;MSH.14.1&apos;].toString(); }
		
		// objMSH.15, acceptAcknowledgmentType
		if (msg[&apos;MSH&apos;][&apos;MSH.15&apos;][&apos;MSH.15.1&apos;].toString() != &quot;&quot;) { objMSH.acceptAcknowledgmentType = msg[&apos;MSH&apos;][&apos;MSH.15&apos;][&apos;MSH.15.1&apos;].toString(); }
		
		// objMSH.16, applicationAcknowledgmentType
		if (msg[&apos;MSH&apos;][&apos;MSH.16&apos;][&apos;MSH.16.1&apos;].toString() != &quot;&quot;) { objMSH.applicationAcknowledgmentType = msg[&apos;MSH&apos;][&apos;MSH.16&apos;][&apos;MSH.16.1&apos;].toString(); }
		
		// objMSH.17, countryCode
		if (msg[&apos;MSH&apos;][&apos;MSH.17&apos;][&apos;MSH.17.1&apos;].toString() != &quot;&quot;) { objMSH.countryCode = msg[&apos;MSH&apos;][&apos;MSH.17&apos;][&apos;MSH.17.1&apos;].toString(); }
		
		// objMSH.18, characterSet
		if (msg[&apos;MSH&apos;][&apos;MSH.18&apos;][&apos;MSH.18.1&apos;].toString() != &quot;&quot;) { objMSH.characterSet= msg[&apos;MSH&apos;][&apos;MSH.18&apos;][&apos;MSH.18.1&apos;].toString(); }

		// objMSH.19, principalLanguageOfMessage
		if (msg[&apos;MSH&apos;][&apos;MSH.19&apos;][&apos;MSH.19.1&apos;].toString() != &quot;&quot;) { objMSH.principalLanguageOfMessage = msg[&apos;MSH&apos;][&apos;MSH.19&apos;][&apos;MSH.19.1&apos;].toString(); }

		if (debug&gt;0) { 
			logger.error(scriptName+&apos;::DEBUG objMSH: &apos;+JSON.stringify(objMSH)); 
		}
		
		return objMSH;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>02666541-6d28-4fe9-8aa1-8d875a993d18</id>
        <name>getPD1_v23</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911262605</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	getPD1_v23(msg)
	
	- Desc: This function retrieves HL7v2 HAPI format elements and values from PD1 segment stored in
	object for reference

	@param {String} msg - this contains the raw message (string)
	@return {object} objPD1 - this contains the PD1 segment elements composed into a single objPD1 object.
*/
function getPD1_v23(msg) {

	// define variables
	if (typeof(msg[&apos;PD1&apos;]) !== undefined) {

		// PD1	
		var objPD1= new Object();

		if (msg[&apos;PD1&apos;].length() &gt; 0) {
			var index = 0;
			for each (seg in msg.PD1) {

				// PD1.1, Living Dependency
				if (seg[&apos;PD1.1&apos;].toString() != &apos;&apos;) { objPD1.livingDependency= seg[&apos;PD1.1&apos;].toString(); }
					
				// PD1.2, Living Arrangement
				if (seg[&apos;PD1.2&apos;].toString() != &apos;&apos;) { objPD1.livingArrangement= seg[&apos;PD1.2&apos;].toString(); }
					
				// PD1.3, Patient Primary Facility
				if(typeof(seg[&apos;PD1.3&apos;]) !== &apos;undefined&apos;) {
					
					var objPatientPrimaryFacility= new Object();
						if (seg[&apos;PD1.3&apos;][&apos;PD1.3.1&apos;].toString() != &quot;&quot;) { objPatientPrimaryFacility.organizationName= seg[&apos;PD1.3&apos;][&apos;PD1.3.1&apos;].toString(); }
						if (seg[&apos;PD1.3&apos;][&apos;PD1.3.2&apos;].toString() != &quot;&quot;) { objPatientPrimaryFacility.organizationNameTypeCode= seg[&apos;PD1.3&apos;][&apos;PD1.3.2&apos;].toString(); }
						if (seg[&apos;PD1.3&apos;][&apos;PD1.3.3&apos;].toString() != &quot;&quot;) { objPatientPrimaryFacility.id= seg[&apos;PD1.3&apos;][&apos;PD1.3.3&apos;].toString(); }
						if (seg[&apos;PD1.3&apos;][&apos;PD1.3.4&apos;].toString() != &quot;&quot;) { objPatientPrimaryFacility.checkDigit= seg[&apos;PD1.3&apos;][&apos;PD1.3.4&apos;].toString(); }
						if (seg[&apos;PD1.3&apos;][&apos;PD1.3.5&apos;].toString() != &quot;&quot;) { objPatientPrimaryFacility.checkDigitScheme= seg[&apos;PD1.3&apos;][&apos;PD1.3.5&apos;].toString(); }
					
					var objAssigningAuthority= new Object();
						if (seg[&apos;PD1.3&apos;][&apos;PD1.3.6&apos;][&apos;PD1.3.6.1&apos;].toString() != &quot;&quot;) { objAssigningAuthority.namespaceId= seg[&apos;PD1.3&apos;][&apos;PD1.3.6&apos;][&apos;PD1.3.6.1&apos;].toString(); }
						if (seg[&apos;PD1.3&apos;][&apos;PD1.3.6&apos;][&apos;PD1.3.6.2&apos;].toString() != &quot;&quot;) { objAssigningAuthority.universalId= seg[&apos;PD1.3&apos;][&apos;PD1.3.6&apos;][&apos;PD1.3.6.2&apos;].toString(); }
						if (seg[&apos;PD1.3&apos;][&apos;PD1.3.6&apos;][&apos;PD1.3.6.3&apos;].toString() != &quot;&quot;) { objAssigningAuthority.universalIdType= seg[&apos;PD1.3&apos;][&apos;PD1.3.6&apos;][&apos;PD1.3.6.3&apos;].toString(); }
						objPatientPrimaryFacility.assigningAuthority= objAssigningAuthority;
					
					if (seg[&apos;PD1.3&apos;][&apos;PD1.3.7&apos;].toString() != &quot;&quot;) { objPatientPrimaryFacility.identifierTypeCode= seg[&apos;PD1.3&apos;][&apos;PD1.3.7&apos;].toString(); }
					
					var objAssigningFacility= new Object();
						if (seg[&apos;PD1.3&apos;][&apos;PD1.3.8&apos;][&apos;PD1.3.8.1&apos;].toString() != &quot;&quot;) { objAssigningFacility.namespaceId= seg[&apos;PD1.3&apos;][&apos;PD1.3.8&apos;][&apos;PD1.3.8.1&apos;].toString(); }
						if (seg[&apos;PD1.3&apos;][&apos;PD1.3.8&apos;][&apos;PD1.3.8.2&apos;].toString() != &quot;&quot;) { objAssigningFacility.universalId= seg[&apos;PD1.3&apos;][&apos;PD1.3.8&apos;][&apos;PD1.3.8.2&apos;].toString(); }
						if (seg[&apos;PD1.3&apos;][&apos;PD1.3.8&apos;][&apos;PD1.3.8.3&apos;].toString() != &quot;&quot;) { objAssigningFacility.universalIdType= seg[&apos;PD1.3&apos;][&apos;PD1.3.8&apos;][&apos;PD1.3.8.3&apos;].toString(); }
						objPatientPrimaryFacility.assigningFacility= objAssigningFacility;
					
					objPD1.patientPrimaryFacility= objPatientPrimaryFacility;
				}					
			
				// PD1.4, Primary Care Provider Name &amp;amp; ID
				if(typeof(seg[&apos;PD1.4&apos;]) !== &apos;undefined&apos;) {
					var objPrimaryCareProviderName= new Object();
					if (seg[&apos;PD1.4&apos;][&apos;PD1.4.1&apos;].toString() != &quot;&quot;) { objPrimaryCareProviderName.id= seg[&apos;PD1.4&apos;][&apos;PD1.4.1&apos;].toString(); }
					if (seg[&apos;PD1.4&apos;][&apos;PD1.4.2&apos;].toString() != &quot;&quot;) { objPrimaryCareProviderName.familyName= seg[&apos;PD1.4&apos;][&apos;PD1.4.2&apos;].toString(); }
					if (seg[&apos;PD1.4&apos;][&apos;PD1.4.3&apos;].toString() != &quot;&quot;) { objPrimaryCareProviderName.givenName= seg[&apos;PD1.4&apos;][&apos;PD1.4.3&apos;].toString(); }
					if (seg[&apos;PD1.4&apos;][&apos;PD1.4.4&apos;].toString() != &quot;&quot;) { objPrimaryCareProviderName.middleName= seg[&apos;PD1.4&apos;][&apos;PD1.4.4&apos;].toString(); }
					if (seg[&apos;PD1.4&apos;][&apos;PD1.4.5&apos;].toString() != &quot;&quot;) { objPrimaryCareProviderName.suffix= seg[&apos;PD1.4&apos;][&apos;PD1.4.5&apos;].toString(); }
					if (seg[&apos;PD1.4&apos;][&apos;PD1.4.6&apos;].toString() != &quot;&quot;) { objPrimaryCareProviderName.prefix= seg[&apos;PD1.4&apos;][&apos;PD1.4.6&apos;].toString(); }
					if (seg[&apos;PD1.4&apos;][&apos;PD1.4.7&apos;].toString() != &quot;&quot;) { objPrimaryCareProviderName.degree= seg[&apos;PD1.4&apos;][&apos;PD1.4.7&apos;].toString(); }
					if (seg[&apos;PD1.4&apos;][&apos;PD1.4.8&apos;].toString() != &quot;&quot;) { objPrimaryCareProviderName.sourceTable= seg[&apos;PD1.4&apos;][&apos;PD1.4.8&apos;].toString(); }
					
					var objAssigningFacility= new Object();
						if (seg[&apos;PD1.4&apos;][&apos;PD1.4.9&apos;][&apos;PD1.4.9.1&apos;].toString() != &quot;&quot;) { objAssigningFacility.namespaceId= seg[&apos;PD1.4&apos;][&apos;PD1.4.9&apos;][&apos;PD1.4.9.1&apos;].toString(); }
						if (seg[&apos;PD1.4&apos;][&apos;PD1.4.9&apos;][&apos;PD1.4.9.2&apos;].toString() != &quot;&quot;) { objAssigningFacility.universalId= seg[&apos;PD1.4&apos;][&apos;PD1.4.9&apos;][&apos;PD1.4.9.2&apos;].toString(); }
						if (seg[&apos;PD1.4&apos;][&apos;PD1.4.9&apos;][&apos;PD1.4.9.3&apos;].toString() != &quot;&quot;) { objAssigningFacility.universalIdType= seg[&apos;PD1.4&apos;][&apos;PD1.4.9&apos;][&apos;PD1.4.9.3&apos;].toString(); }
						objPrimaryCareProviderName.assigningAuthority= objAssigningFacility;
					
					objPD1.primaryCareProviderName= objPrimaryCareProviderName;
				}
								
				/*
				// clean up SCH and increment index
				if (Object.keys(objSCH[index]).length == 0) {
					delete objSCH[index];
				} else {
					index++;
				}
				*/
				
			}
		}
		
		return objPD1;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>c6bdb3e9-fd12-4821-81d1-34ea8cf274ae</id>
        <name>getPID_v23</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911262767</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	getPID_v23(msg)
	
	- Desc: This function retrieves HL7v2 HAPI format elements and values from PID segment stored in
	object for reference

	@param {String} msg - this contains the raw message (string)
	@return {object} objPID - this contains the PID segment elements composed into a single objMSH
		object.
*/
function getPID_v23(msg) {

	var scriptName= &apos;getPID_v23&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG msg.PID: &apos;+JSON.stringify(msg[&apos;PID&apos;].toString())); }
	
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG msg[PID] not undefined= &apos;+(typeof(msg[&apos;PID&apos;].toString()) !== undefined)); }
	
	// define variables
	if (typeof(msg[&apos;PID&apos;].toString()) !== undefined) {

		// PID	
		var objPID= {};

		// PID.1, setId
		if (msg[&apos;PID&apos;][&apos;PID.1&apos;][&apos;PID.1.1&apos;].toString() != &quot;&quot;) {objPID.setId = msg[&apos;PID&apos;][&apos;PID.1&apos;][&apos;PID.1.1&apos;].toString(); }
		
		// PID.2, externalPatientId
		if (msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;].toString() != &quot;&quot;) { objPID.externalPatientId= msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;].toString(); }
	
		// PID.3, patientId
		if (msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString() != &quot;&quot;) { objPID.patientId= msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString(); }
		
		// PID.4, alternatePatientId
		if (msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString() != &quot;&quot;) { objPID.alternatePatientId= msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString(); }
		
		// PID.5, patientName
		var objPatientName= {};
		if (msg[&apos;PID&apos;][&apos;PID.5&apos;].toString().length&gt; 0) {
				
			if (msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString() != &quot;&quot;) { objPatientName.lastName = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString() != &quot;&quot;) { objPatientName.firstName = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString() != &quot;&quot;) { objPatientName.middleName = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.4&apos;].toString() != &quot;&quot;) { objPatientName.suffix = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.4&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.5&apos;].toString() != &quot;&quot;) { objPatientName.prefix = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.5&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.6&apos;].toString() != &quot;&quot;) { objPatientName.degree = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.6&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.7&apos;].toString() != &quot;&quot;) { objPatientName.nameTypeCode = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.7&apos;].toString(); }
		
			objPID.patientName= objPatientName;
			channelMap.put(&apos;objPID.patientName&apos;,objPatientName);
		}	

		// PID.6, mothersMaidenName
		var objMotherMaidenName= {};
		for each (field in msg[&apos;PID&apos;][&apos;PID.6&apos;].children()) {
			if (field[&apos;PID.6.1&apos;].toString() != &quot;&quot;) { objMothersMaidenName.lastName = field[&apos;PID.6.1&apos;].toString(); }
			if (field[&apos;PID.6.2&apos;].toString() != &quot;&quot;) { objMothersMaidenName.firstName = field[&apos;PID.6.2&apos;].toString(); }
			if (field[&apos;PID.6.3&apos;].toString() != &quot;&quot;) { objMothersMaidenName.middleName =field[&apos;PID.6.3&apos;].toString(); }
			if (field[&apos;PID.6.4&apos;].toString() != &quot;&quot;) { objMothersMaidenName.suffix = field[&apos;PID.6.4&apos;].toString(); }
			if (field[&apos;PID.6.5&apos;].toString() != &quot;&quot;) { objMothersMaidenName.prefix = field[&apos;PID.6.5&apos;].toString(); }
			if (field[&apos;PID.6.6&apos;].toString() != &quot;&quot;) { objMothersMaidenName.degree = field[&apos;PID.6.6&apos;].toString(); }
			if (field[&apos;PID.6.7&apos;].toString() != &quot;&quot;) { objMothersMaidenName.nameTypeCode = field[&apos;PID.6.7&apos;].toString(); }
		}
		
		if (objMotherMaidenName.length &gt; 0) {
			objPID.motherMaidenName= objMotherMaidenName;
			channelMap.put(&apos;objPID.motherMaidenName&apos;,objMotherMaidenName);
		}
		
		// PID.7, dateTimeBirth
		if (msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString() != &quot;&quot;) {objPID.dateTimeBirth = msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString(); }
				
		// PID.8, gender
		if (msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString() != &quot;&quot;) {objPID.gender = msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString(); }
				
		// PID.9, alias
		var objPatientAlias= {};
		for each (field in msg[&apos;PID&apos;][&apos;PID.9&apos;].children()) {
			if (field[&apos;PID.9.1&apos;].toString() != &quot;&quot;) { objPatientAlias.lastName = field[&apos;PID.9.1&apos;].toString(); }
			if (field[&apos;PID.9.2&apos;].toString() != &quot;&quot;) { objPatientAlias.firstName = field[&apos;PID.9.2&apos;].toString(); }
			if (field[&apos;PID.9.3&apos;].toString() != &quot;&quot;) { objPatientAlias.middleName = field[&apos;PID.9.3&apos;].toString(); }
			if (field[&apos;PID.9.4&apos;].toString() != &quot;&quot;) { objPatientAlias.suffix = field[&apos;PID.9.4&apos;].toString(); }
			if (field[&apos;PID.9.5&apos;].toString() != &quot;&quot;) { objPatientAlias.prefix = field[&apos;PID.9.5&apos;].toString(); }
			if (field[&apos;PID.9.6&apos;].toString() != &quot;&quot;) { objPatientAlias.degree = field[&apos;PID.9.6&apos;].toString(); }
			if (field[&apos;PID.9.7&apos;].toString() != &quot;&quot;) { objPatientAlias.nameTypeCode = field[&apos;PID.9.7&apos;].toString(); }
		}
		if (objPatientAlias.length &gt; 0) {
			objPID.patientAlias= objPatientAlias;
			channelMap.put(&apos;objPID.patientAlias&apos;,objPatientAlias);
		}
		
		// PID.10, race
		if (msg[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;].toString() != &quot;&quot;) {objPID.race = msg[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;].toString(); }

		// PID.11, address
		var objPatientAddress= {};
		if (msg[&apos;PID&apos;][&apos;PID.11&apos;].toString().length&gt; 0) {
					
			if (msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;].toString().length&gt; 0) { objPatientAddress.streetAddress = msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.2&apos;].toString().length&gt; 0) { objPatientAddress.otherDesignation = msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.2&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;].toString().length&gt; 0) { objPatientAddress.city = msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.4&apos;].toString().length&gt; 0) { objPatientAddress.stateOrProvince = msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.4&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;].toString().length&gt; 0) { objPatientAddress.zip = msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.6&apos;].toString().length&gt; 0) { objPatientAddress.country = msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.6&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.7&apos;].toString().length&gt; 0) { objPatientAddress.addressType = msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.7&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.8&apos;].toString().length&gt; 0) { objPatientAddress.otherGeographicDesignation = msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.8&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.9&apos;].toString().length&gt; 0) { objPatientAddress.countyOrParishCode = msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.9&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.10&apos;].toString().length&gt; 0) { objPatientAddress.censusTract = msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.10&apos;].toString(); }
			
			objPID.patientAddress= objPatientAddress;
			channelMap.put(&apos;objPID.patientAddress&apos;,objPatientAddress);
		}
		
		// PID.12, countyCode
		if (msg[&apos;PID&apos;][&apos;PID.12&apos;][&apos;PID.12.1&apos;].toString() != &quot;&quot;) {objPID.countyCode = msg[&apos;PID&apos;][&apos;PID.12&apos;][&apos;PID.12.1&apos;].toString(); }
				
		// PID.13, homePhone
		var objHomePhone = {};
		for each (field in msg[&apos;PID&apos;][&apos;PID.13&apos;].children()) {
			if (field[&apos;PID.13.1&apos;].toString() != &quot;&quot;) { objHomePhone.number = field[&apos;PID.13.1&apos;].toString(); }
			if (field[&apos;PID.13.2&apos;].toString() != &quot;&quot;) { objHomePhone.telecommunicationUseCode = field[&apos;PID.13.2&apos;].toString(); }
			if (field[&apos;PID.13.3&apos;].toString() != &quot;&quot;) { objHomePhone.telecommunicationEquipmentType = field[&apos;PID.13.3&apos;].toString(); }
			if (field[&apos;PID.13.4&apos;].toString() != &quot;&quot;) { objHomePhone.emailAddress = field[&apos;PID.13.4&apos;].toString(); }
			if (field[&apos;PID.13.5&apos;].toString() != &quot;&quot;) { objHomePhone.countryCode = field[&apos;PID.13.5&apos;].toString(); }
			if (field[&apos;PID.13.6&apos;].toString() != &quot;&quot;) { objHomePhone.areaCityCode = field[&apos;PID.13.6&apos;].toString(); }
			if (field[&apos;PID.13.7&apos;].toString() != &quot;&quot;) { objHomePhone.phoneNumber = field[&apos;PID.13.7&apos;].toString(); }
			if (field[&apos;PID.13.8&apos;].toString() != &quot;&quot;) { objHomePhone.extension = field[&apos;PID.13.8&apos;].toString(); }
			if (field[&apos;PID.13.9&apos;].toString() != &quot;&quot;) { objHomePhone.text = field[&apos;PID.13.9&apos;].toString(); }
		}
		if (objHomePhone.length &gt; 0) {
			objPID.homePhone =objHomePhone;
			channelMap.put(&apos;objPID.homePhone&apos;,objHomePhone);
		}
		
		// PID.14, businessPhone
		var objBusinessPhone = {};
		for each (field in msg[&apos;PID&apos;][&apos;PID.14&apos;]) {
			if (field[&apos;PID.14.1&apos;].toString() != &quot;&quot;) { objBusinessPhone.number = field[&apos;PID.14.1&apos;].toString(); }
			if (field[&apos;PID.14.2&apos;].toString() != &quot;&quot;) { objBusinessPhone.telecommunicationUseCode = field[&apos;PID.14.2&apos;].toString(); }
			if (field[&apos;PID.14.3&apos;].toString() != &quot;&quot;) { objBusinessPhone.telecommunicationEquipmentType = field[&apos;PID.14.3&apos;].toString(); }
			if (field[&apos;PID.14.4&apos;].toString() != &quot;&quot;) { objBusinessPhone.emailAddress = field[&apos;PID.14.4&apos;].toString(); }
			if (field[&apos;PID.14.5&apos;].toString() != &quot;&quot;) { objBusinessPhone.countryCode = field[&apos;PID.14.5&apos;].toString(); }
			if (field[&apos;PID.14.6&apos;].toString() != &quot;&quot;) { objBusinessPhone.areaCityCode = field[&apos;PID.14.6&apos;].toString(); }
			if (field[&apos;PID.14.7&apos;].toString() != &quot;&quot;) { objBusinessPhone.phoneNumber = field[&apos;PID.14.7&apos;].toString(); }
			if (field[&apos;PID.14.8&apos;].toString() != &quot;&quot;) { objBusinessPhone.extension = field[&apos;PID.14.8&apos;].toString(); }
			if (field[&apos;PID.14.9&apos;].toString() != &quot;&quot;) { objBusinessPhone.text = field[&apos;PID.14.9&apos;].toString(); }
		}
		if (objBusinessPhone.length &gt; 0) {
			objPID.businessPhone= objBusinessPhone;
			channelMap.put(&apos;objPID.businessPhone&apos;,objBusinessPhone);
		}
		
		// PID.15, primaryLanguage
		if (msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.1&apos;].toString() != &quot;&quot;) { objPID.primaryLanguage = msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.1&apos;].toString(); }
		
		// PID.16, maritalStatus
		if (msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;].toString() != &quot;&quot;) { objPID.maritalStatus = msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;].toString(); }
				
		// PID.17, religion
		if (msg[&apos;PID&apos;][&apos;PID.17&apos;][&apos;PID.17.1&apos;].toString() != &quot;&quot;) { objPID.religion = msg[&apos;PID&apos;][&apos;PID.17&apos;][&apos;PID.17.1&apos;].toString(); }
		
		// PID.18, accountNumber
		if (msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString() != &quot;&quot;) { objPID.accountNumber = msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString(); }
			
		// PID.19, ssn
		if (msg[&apos;PID&apos;][&apos;PID.19&apos;][&apos;PID.19.1&apos;].toString() != &quot;&quot;) {objPID.ssn = msg[&apos;PID&apos;][&apos;PID.19&apos;][&apos;PID.19.1&apos;].toString(); }
				
		// PID.20, driversLicenseNumber
		if (msg[&apos;PID&apos;][&apos;PID.20&apos;][&apos;PID.20.1&apos;].toString() != &quot;&quot;) {objPID.driversLicenseNumber = msg[&apos;PID&apos;][&apos;PID.20&apos;][&apos;PID.20.1&apos;].toString(); }
		
		// PID.21, mothersId
		if (msg[&apos;PID&apos;][&apos;PID.21&apos;][&apos;PID.21.1&apos;].toString() != &quot;&quot;) {objPID.mothersId = msg[&apos;PID&apos;][&apos;PID.21&apos;][&apos;PID.21.1&apos;].toString(); }
		
		// PID.22, ethnicGroup
		if (msg[&apos;PID&apos;][&apos;PID.22&apos;][&apos;PID.22.1&apos;].toString() != &quot;&quot;) {objPID.ethnicGroup = msg[&apos;PID&apos;][&apos;PID.22&apos;][&apos;PID.22.1&apos;].toString(); }
				
		// PID.23, birthPlace
		if (msg[&apos;PID&apos;][&apos;PID.23&apos;][&apos;PID.23.1&apos;].toString() != &quot;&quot;) {objPID.birthPlace = msg[&apos;PID&apos;][&apos;PID.23&apos;][&apos;PID.23.1&apos;].toString(); }
				
		// PID.24, multipleBirthIndicator
		if (msg[&apos;PID&apos;][&apos;PID.24&apos;][&apos;PID.24.1&apos;].toString() != &quot;&quot;) {objPID.multipleBirthIndicator = msg[&apos;PID&apos;][&apos;PID.24&apos;][&apos;PID.24.1&apos;].toString(); }
				
	}
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG objPID: &apos;+JSON.stringify(objPID)); }
		
	return objPID;
}
</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>25fcc15a-e935-46c2-9a33-103ae3ef585c</id>
        <name>getPV1_v23</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911262681</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	getPV1_v23(msg)
	
	- Desc: This function retrieves HL7v2 HAPI format elements and values from PV1 segment stored in
	object for reference

	@param {String} msg - this contains the raw message (string)
	@return {object} objPV1 - this contains the PV1 segment elements composed into a single objMSH
		object.
*/
function getPV1_v23(msg) {

	var scriptName= &quot;getPV1_v23&quot;;
	var debug= 0;
	
	// define variables
	if (typeof(msg[&apos;PV1&apos;]) !== undefined) {

		// PV1	
		var pv1;
		var objPV1= {};

		if (msg[&apos;PV1&apos;].toString().length &gt; 0) {

			var index = 0;
			for each (seg in msg.PV1.children()) {
	
				if(debug&gt; 0) logger.error(scriptName+&apos;::DEBUG seg[&quot;+index+&quot;]: &apos;+seg.toString());
	
				// PV1.1, setId
				if (seg[&apos;PV1.1&apos;][&apos;PV1.1.1&apos;].toString() != &quot;&quot;) {objPV1.setId = seg[&apos;PV1.1&apos;][&apos;PV1.1.1&apos;].toString(); }
		
				// PV1.2, externalId
				if (seg[&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString() != &quot;&quot;) { objPV1.externalId = seg[&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString(); }
							
				// PV1.3, assignedPatientLocation
				objPV1.assignedPatientLocation = {};
				if (seg[&apos;PV1.3&apos;][&apos;PV1.3.1&apos;].toString() != &quot;&quot;) { objPV1.assignedPatientLocation.pointOfCare = seg[&apos;PV1.3&apos;][&apos;PV1.3.1&apos;].toString(); }
				if (seg[&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString() != &quot;&quot;) { objPV1.assignedPatientLocation.room = seg[&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString(); }
				if (seg[&apos;PV1.3&apos;][&apos;PV1.3.3&apos;].toString() != &quot;&quot;) { objPV1.assignedPatientLocation.bed = seg[&apos;PV1.3&apos;][&apos;PV1.3.3&apos;].toString(); }
				
				objPV1.facility = {};
				if (seg[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;][&apos;PV1.3.4.1&apos;].toString() != &quot;&quot;) { objPV1.facility.nameSpaceId =  seg[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;][&apos;PV1.3.4.1&apos;].toString(); }
				if (seg[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;][&apos;PV1.3.4.2&apos;].toString() != &quot;&quot;) { objPV1.facility.universalId =  seg[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;][&apos;PV1.3.4.2&apos;].toString(); }
				if (seg[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;][&apos;PV1.3.4.3&apos;].toString() != &quot;&quot;) { objPV1.facility.universalIdType =  seg[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;][&apos;PV1.3.4.3&apos;].toString(); }

				if (seg[&apos;PV1.3&apos;][&apos;PV1.3.5&apos;].toString() != &quot;&quot;) { objPV1.assignedPatientLocation.locationStatus = seg[&apos;PV1.3&apos;][&apos;PV1.3.5&apos;].toString(); }
				if (seg[&apos;PV1.3&apos;][&apos;PV1.3.6&apos;].toString() != &quot;&quot;) { objPV1.assignedPatientLocation.personLocationType = seg[&apos;PV1.3&apos;][&apos;PV1.3.6&apos;].toString(); }
				if (seg[&apos;PV1.3&apos;][&apos;PV1.3.7&apos;].toString() != &quot;&quot;) { objPV1.assignedPatientLocation.building = seg[&apos;PV1.3&apos;][&apos;PV1.3.7&apos;].toString(); }
				if (seg[&apos;PV1.3&apos;][&apos;PV1.3.8&apos;].toString() != &quot;&quot;) { objPV1.assignedPatientLocation.floor = seg[&apos;PV1.3&apos;][&apos;PV1.3.8&apos;].toString(); }
				if (seg[&apos;PV1.3&apos;][&apos;PV1.3.9&apos;].toString() != &quot;&quot;) { objPV1.assignedPatientLocation.locationDescription = seg[&apos;PV1.3&apos;][&apos;PV1.3.9&apos;].toString(); }
		
				// PV1.4, admissionType
				if (seg[&apos;PV1.4&apos;][&apos;PV1.4.1&apos;].toString() != &quot;&quot;) { objPV1.admissionType = seg[&apos;PV1.4&apos;][&apos;PV1.4.1&apos;].toString(); }

				// PV1.5, preadmitNumber
				objPV1.preadmitNumber = {};
				if (seg[&apos;PV1.5&apos;][&apos;PV1.5.1&apos;].toString() != &quot;&quot;) { objPV1.preadmitNumber.id = seg[&apos;PV1.5&apos;][&apos;PV1.5.1&apos;].toString(); }
				if (seg[&apos;PV1.5&apos;][&apos;PV1.5.2&apos;].toString() != &quot;&quot;) { objPV1.preadmitNumber.identifierCheckDigit = seg[&apos;PV1.5&apos;][&apos;PV1.5.2&apos;].toString(); }
				if (seg[&apos;PV1.5&apos;][&apos;PV1.5.3&apos;].toString() != &quot;&quot;) { objPV1.preadmitNumber.codeIdentifyingCheckDigitScheme = seg[&apos;PV1.5&apos;][&apos;PV1.5.3&apos;].toString(); }
				
				objPV1.preadmitNumber.assigningAuthority = {};
				if (seg[&apos;PV1.5&apos;][&apos;PV1.5.4&apos;][&apos;PV1.5.4.1&apos;].toString() != &quot;&quot;) { objPV1.preadmitNumber.assigningAuthority.namespaceId = seg[&apos;PV1.5&apos;][&apos;PV1.5.4&apos;][&apos;PV1.5.4.1&apos;].toString(); }
				if (seg[&apos;PV1.5&apos;][&apos;PV1.5.4&apos;][&apos;PV1.5.4.2&apos;].toString() != &quot;&quot;) { objPV1.preadmitNumber.assigningAuthority.universalId = seg[&apos;PV1.5&apos;][&apos;PV1.5.4&apos;][&apos;PV1.5.4.2&apos;].toString(); }
				if (seg[&apos;PV1.5&apos;][&apos;PV1.5.4&apos;][&apos;PV1.5.4.3&apos;].toString() != &quot;&quot;) { objPV1.preadmitNumber.assigningAuthority.universalIdType = seg[&apos;PV1.5&apos;][&apos;PV1.5.4&apos;][&apos;PV1.5.4.3&apos;].toString(); }
/*
				if (seg[&apos;PV1.5&apos;][&apos;PV1.5.5&apos;].toString() != &quot;&quot;) { pv1[index].preadmitNumber.idTypeCode = seg[&apos;PV1.5&apos;][&apos;PV1.5.5&apos;]; }
				pv1[index].preadmitNumber.assigningFacility = {};
				if (seg[&apos;PV1.5&apos;][&apos;PV1.5.6&apos;][&apos;PV1.5.6.1&apos;].toString() != &quot;&quot;) { pv1[index].preadmitNumber.assigningFacility.namespaceId = seg[&apos;PV1.5&apos;][&apos;PV1.5.6&apos;][&apos;PV1.5.6.1&apos;]; }
				if (seg[&apos;PV1.5&apos;][&apos;PV1.5.6&apos;][&apos;PV1.5.6.2&apos;].toString() != &quot;&quot;) { pv1[index].preadmitNumber.assigningFacility.universalId = seg[&apos;PV1.5&apos;][&apos;PV1.5.6&apos;][&apos;PV1.5.6.2&apos;]; }
				if (seg[&apos;PV1.5&apos;][&apos;PV1.5.6&apos;][&apos;PV1.5.6.3&apos;].toString() != &quot;&quot;) { pv1[index].preadmitNumber.assigningFacility.universalIdType = seg[&apos;PV1.5&apos;][&apos;PV1.5.6&apos;][&apos;PV1.5.6.3&apos;]; }
				if (Object.keys(pv1[index].preadmitNumber.assigningFacility).length == 0) {
					if (seg[&apos;PV1.5&apos;][&apos;PV1.5.6&apos;].toString() != &quot;&quot;) { pv1[index].preadmitNumber.assigningFacility.namespaceId = seg[&apos;PV1.5&apos;][&apos;PV1.5.6&apos;]; }
					else delete pv1[index].preadmitNumber.assigningFacility;
				}
				if (Object.keys(pv1[index].preadmitNumber).length == 0) {
					delete pv1[index].preadmitNumber;
				}

				// PV1.6, priorPatientLocation
				pv1[index].priorPatientLocation = {};
				if (seg[&apos;PV1.6&apos;][&apos;PV1.6.1&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.pointOfCare = seg[&apos;PV1.6&apos;][&apos;PV1.6.1&apos;]; }
				if (seg[&apos;PV1.6&apos;][&apos;PV1.6.2&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.room = seg[&apos;PV1.6&apos;][&apos;PV1.6.2&apos;]; }
				if (seg[&apos;PV1.6&apos;][&apos;PV1.6.3&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.bed = seg[&apos;PV1.6&apos;][&apos;PV1.6.3&apos;]; }
				pv1[index].priorPatientLocation.facility = {};
				if (seg[&apos;PV1.6&apos;][&apos;PV1.6.4&apos;][&apos;PV1.6.4.1&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.facility.nameSpaceId =  seg[&apos;PV1.6&apos;][&apos;PV1.6.4&apos;][&apos;PV1.6.4.1&apos;]; }
				if (seg[&apos;PV1.6&apos;][&apos;PV1.6.4&apos;][&apos;PV1.6.4.2&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.facility.universalId =  seg[&apos;PV1.6&apos;][&apos;PV1.6.4&apos;][&apos;PV1.6.4.2&apos;]; }
				if (seg[&apos;PV1.6&apos;][&apos;PV1.6.4&apos;][&apos;PV1.6.4.3&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.facility.universalIdType =  seg[&apos;PV1.6&apos;][&apos;PV1.6.4&apos;][&apos;PV1.6.4.3&apos;]; }
				if (Object.keys(pv1[index].priorPatientLocation.facility).length == 0) {
					if (seg[&apos;PV1.6&apos;][&apos;PV1.6.4&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.facility.nameSpaceId = seg[&apos;PV1.6&apos;][&apos;PV1.6.4&apos;]; }
					else delete pv1[index].priorPatientLocation.facility;
				}
				if (seg[&apos;PV1.6&apos;][&apos;PV1.6.5&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.locationStatus = seg[&apos;PV1.6&apos;][&apos;PV1.6.5&apos;]; }
				if (seg[&apos;PV1.6&apos;][&apos;PV1.6.6&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.personLocationType = seg[&apos;PV1.6&apos;][&apos;PV1.6.6&apos;]; }
				if (seg[&apos;PV1.6&apos;][&apos;PV1.6.7&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.building = seg[&apos;PV1.6&apos;][&apos;PV1.6.7&apos;]; }
				if (seg[&apos;PV1.6&apos;][&apos;PV1.6.8&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.floor = seg[&apos;PV1.6&apos;][&apos;PV1.6.8&apos;]; }
				if (seg[&apos;PV1.6&apos;][&apos;PV1.6.9&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.locationDescription = seg[&apos;PV1.6&apos;][&apos;PV1.6.9&apos;]; }
				if (Object.keys(pv1[index].priorPatientLocation).length == 0) {
					delete pv1[index].priorPatientLocation;
				}

				// PV1.7, attendingDoctor
				pv1[index].attendingDoctor = [];
				for each (field in seg[&apos;PV1.7&apos;]) {
					var block = {};
					if (field[&apos;PV1.7.1&apos;].toString() != &quot;&quot;) { block.id = field[&apos;PV1.7.1&apos;]; }
					if (field[&apos;PV1.7.2&apos;].toString() != &quot;&quot;) { block.lastName = field[&apos;PV1.7.2&apos;]; }
					if (field[&apos;PV1.7.3&apos;].toString() != &quot;&quot;) { block.firstName = field[&apos;PV1.7.3&apos;]; }
					if (field[&apos;PV1.7.4&apos;].toString() != &quot;&quot;) { block.middleInitOrName = field[&apos;PV1.7.4&apos;]; }
					if (field[&apos;PV1.7.5&apos;].toString() != &quot;&quot;) { block.suffix = field[&apos;PV1.7.5&apos;]; }
					if (field[&apos;PV1.7.6&apos;].toString() != &quot;&quot;) { block.prefix = field[&apos;PV1.7.6&apos;]; }
					if (field[&apos;PV1.7.7&apos;].toString() != &quot;&quot;) { block.degree = field[&apos;PV1.7.7&apos;]; }
					if (field[&apos;PV1.7.8&apos;].toString() != &quot;&quot;) { block.sourceTable = field[&apos;PV1.7.8&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;PV1.7.9&apos;][&apos;PV1.7.9.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.id = field[&apos;PV1.7.9&apos;][&apos;PV1.7.9.1&apos;]; }
					if (field[&apos;PV1.7.9&apos;][&apos;PV1.7.9.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;PV1.7.9&apos;][&apos;PV1.7.9.2&apos;]; }
					if (field[&apos;PV1.7.9&apos;][&apos;PV1.7.9.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;PV1.7.9&apos;][&apos;PV1.7.9.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;PV1.7.9&apos;].toString() != &quot;&quot;) { block.assigningAuthority.id = field[&apos;PV1.7.9&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;PV1.7.10&apos;].toString() != &quot;&quot;) { block.nameTypeCode = field[&apos;PV1.7.10&apos;]; }
					if (field[&apos;PV1.7.11&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;PV1.7.11&apos;]; }
					if (field[&apos;PV1.7.12&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;PV1.7.12&apos;]; }
					if (field[&apos;PV1.7.13&apos;].toString() != &quot;&quot;) { block.identifierTypeCode = field[&apos;PV1.7.13&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;PV1.7.14&apos;][&apos;PV1.7.14.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.id = field[&apos;PV1.7.14&apos;][&apos;PV1.7.14.1&apos;]; }
					if (field[&apos;PV1.7.14&apos;][&apos;PV1.7.14.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;PV1.7.14&apos;][&apos;PV1.7.14.2&apos;]; }
					if (field[&apos;PV1.7.14&apos;][&apos;PV1.7.14.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;PV1.7.14&apos;][&apos;PV1.7.14.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;PV1.7.14&apos;].toString() != &quot;&quot;) { block.assigningFacility.id = field[&apos;PV1.7.14&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						pv1[index].attendingDoctor.push(block);
					}
				}
				if (pv1[index].attendingDoctor.length == 0) {
					delete pv1[index].attendingDoctor;
				}

				// PV1.8, referringDoctor
				pv1[index].referringDoctor = [];
				for each (field in seg[&apos;PV1.8&apos;]) {
					var block = {};
					if (field[&apos;PV1.8.1&apos;].toString() != &quot;&quot;) { block.id = field[&apos;PV1.8.1&apos;]; }
					if (field[&apos;PV1.8.2&apos;].toString() != &quot;&quot;) { block.lastName = field[&apos;PV1.8.2&apos;]; }
					if (field[&apos;PV1.8.3&apos;].toString() != &quot;&quot;) { block.firstName = field[&apos;PV1.8.3&apos;]; }
					if (field[&apos;PV1.8.4&apos;].toString() != &quot;&quot;) { block.middleInitOrName = field[&apos;PV1.8.4&apos;]; }
					if (field[&apos;PV1.8.5&apos;].toString() != &quot;&quot;) { block.suffix = field[&apos;PV1.8.5&apos;]; }
					if (field[&apos;PV1.8.6&apos;].toString() != &quot;&quot;) { block.prefix = field[&apos;PV1.8.6&apos;]; }
					if (field[&apos;PV1.8.7&apos;].toString() != &quot;&quot;) { block.degree = field[&apos;PV1.8.7&apos;]; }
					if (field[&apos;PV1.8.8&apos;].toString() != &quot;&quot;) { block.sourceTable = field[&apos;PV1.8.8&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;PV1.8.9&apos;][&apos;PV1.8.9.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.id = field[&apos;PV1.8.9&apos;][&apos;PV1.8.9.1&apos;]; }
					if (field[&apos;PV1.8.9&apos;][&apos;PV1.8.9.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;PV1.8.9&apos;][&apos;PV1.8.9.2&apos;]; }
					if (field[&apos;PV1.8.9&apos;][&apos;PV1.8.9.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;PV1.8.9&apos;][&apos;PV1.8.9.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;PV1.8.9&apos;].toString() != &quot;&quot;) { block.assigningAuthority.id = field[&apos;PV1.8.9&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;PV1.8.10&apos;].toString() != &quot;&quot;) { block.nameTypeCode = field[&apos;PV1.8.10&apos;]; }
					if (field[&apos;PV1.8.11&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;PV1.8.11&apos;]; }
					if (field[&apos;PV1.8.12&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;PV1.8.12&apos;]; }
					if (field[&apos;PV1.8.13&apos;].toString() != &quot;&quot;) { block.identifierTypeCode = field[&apos;PV1.8.13&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;PV1.8.14&apos;][&apos;PV1.8.14.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.id = field[&apos;PV1.8.14&apos;][&apos;PV1.8.14.1&apos;]; }
					if (field[&apos;PV1.8.14&apos;][&apos;PV1.8.14.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;PV1.8.14&apos;][&apos;PV1.8.14.2&apos;]; }
					if (field[&apos;PV1.8.14&apos;][&apos;PV1.8.14.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;PV1.8.14&apos;][&apos;PV1.8.14.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;PV1.8.14&apos;].toString() != &quot;&quot;) { block.assigningFacility.id = field[&apos;PV1.8.14&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						pv1[index].referringDoctor.push(block);
					}
				}
				if (pv1[index].referringDoctor.length == 0) {
					delete pv1[index].referringDoctor;
				}
				
				// PV1.9, consultingDoctor
				pv1[index].consultingDoctor = [];
				for each (field in seg[&apos;PV1.9&apos;]) {
					var block = {};
					if (field[&apos;PV1.9.1&apos;].toString() != &quot;&quot;) { block.id = field[&apos;PV1.9.1&apos;]; }
					if (field[&apos;PV1.9.2&apos;].toString() != &quot;&quot;) { block.lastName = field[&apos;PV1.9.2&apos;]; }
					if (field[&apos;PV1.9.3&apos;].toString() != &quot;&quot;) { block.firstName = field[&apos;PV1.9.3&apos;]; }
					if (field[&apos;PV1.9.4&apos;].toString() != &quot;&quot;) { block.middleInitOrName = field[&apos;PV1.9.4&apos;]; }
					if (field[&apos;PV1.9.5&apos;].toString() != &quot;&quot;) { block.suffix = field[&apos;PV1.9.5&apos;]; }
					if (field[&apos;PV1.9.6&apos;].toString() != &quot;&quot;) { block.prefix = field[&apos;PV1.9.6&apos;]; }
					if (field[&apos;PV1.9.7&apos;].toString() != &quot;&quot;) { block.degree = field[&apos;PV1.9.7&apos;]; }
					if (field[&apos;PV1.9.8&apos;].toString() != &quot;&quot;) { block.sourceTable = field[&apos;PV1.9.8&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;PV1.9.9&apos;][&apos;PV1.9.9.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.id = field[&apos;PV1.9.9&apos;][&apos;PV1.9.9.1&apos;]; }
					if (field[&apos;PV1.9.9&apos;][&apos;PV1.9.9.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;PV1.9.9&apos;][&apos;PV1.9.9.2&apos;]; }
					if (field[&apos;PV1.9.9&apos;][&apos;PV1.9.9.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;PV1.9.9&apos;][&apos;PV1.9.9.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;PV1.9.9&apos;].toString() != &quot;&quot;) { block.assigningAuthority.id = field[&apos;PV1.9.9&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;PV1.9.10&apos;].toString() != &quot;&quot;) { block.nameTypeCode = field[&apos;PV1.9.10&apos;]; }
					if (field[&apos;PV1.9.11&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;PV1.9.11&apos;]; }
					if (field[&apos;PV1.9.12&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;PV1.9.12&apos;]; }
					if (field[&apos;PV1.9.13&apos;].toString() != &quot;&quot;) { block.identifierTypeCode = field[&apos;PV1.9.13&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;PV1.9.14&apos;][&apos;PV1.9.14.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.id = field[&apos;PV1.9.14&apos;][&apos;PV1.9.14.1&apos;]; }
					if (field[&apos;PV1.9.14&apos;][&apos;PV1.9.14.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;PV1.9.14&apos;][&apos;PV1.9.14.2&apos;]; }
					if (field[&apos;PV1.9.14&apos;][&apos;PV1.9.14.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;PV1.9.14&apos;][&apos;PV1.9.14.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;PV1.9.14&apos;].toString() != &quot;&quot;) { block.assigningFacility.id = field[&apos;PV1.9.14&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						pv1[index].consultingDoctor.push(block);
					}
				}
				if (pv1[index].consultingDoctor.length == 0) {
					delete pv1[index].consultingDoctor;
				}
				
				// PV1.10, hospitalService
				if (seg[&apos;PV1.10&apos;][&apos;PV1.10.1&apos;].toString() != &quot;&quot;) { pv1[index].hospitalService = seg[&apos;PV1.10&apos;][&apos;PV1.10.1&apos;]; }

				// PV1.11, temporaryLocation
				pv1[index].temporaryLocation = {};
				if (seg[&apos;PV1.11&apos;][&apos;PV1.11.1&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.pointOfCare = seg[&apos;PV1.11&apos;][&apos;PV1.11.1&apos;]; }
				if (seg[&apos;PV1.11&apos;][&apos;PV1.11.2&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.room = seg[&apos;PV1.11&apos;][&apos;PV1.11.2&apos;]; }
				if (seg[&apos;PV1.11&apos;][&apos;PV1.11.3&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.bed = seg[&apos;PV1.11&apos;][&apos;PV1.11.3&apos;]; }
				pv1[index].temporaryLocation.facility = {};
				if (seg[&apos;PV1.11&apos;][&apos;PV1.11.4&apos;][&apos;PV1.11.4.1&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.facility.nameSpaceId =  seg[&apos;PV1.11&apos;][&apos;PV1.11.4&apos;][&apos;PV1.11.4.1&apos;]; }
				if (seg[&apos;PV1.11&apos;][&apos;PV1.11.4&apos;][&apos;PV1.11.4.2&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.facility.universalId =  seg[&apos;PV1.11&apos;][&apos;PV1.11.4&apos;][&apos;PV1.11.4.2&apos;]; }
				if (seg[&apos;PV1.11&apos;][&apos;PV1.11.4&apos;][&apos;PV1.11.4.3&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.facility.universalIdType =  seg[&apos;PV1.11&apos;][&apos;PV1.11.4&apos;][&apos;PV1.11.4.3&apos;]; }
				if (Object.keys(pv1[index].temporaryLocation.facility).length == 0) {
					if (seg[&apos;PV1.11&apos;][&apos;PV1.11.4&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.facility.nameSpaceId = seg[&apos;PV1.11&apos;][&apos;PV1.11.4&apos;]; }
					else delete pv1[index].temporaryLocation.facility;
				}
				if (seg[&apos;PV1.11&apos;][&apos;PV1.11.5&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.locationStatus = seg[&apos;PV1.11&apos;][&apos;PV1.11.5&apos;]; }
				if (seg[&apos;PV1.11&apos;][&apos;PV1.11.6&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.personLocationType = seg[&apos;PV1.11&apos;][&apos;PV1.11.6&apos;]; }
				if (seg[&apos;PV1.11&apos;][&apos;PV1.11.7&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.building = seg[&apos;PV1.11&apos;][&apos;PV1.11.7&apos;]; }
				if (seg[&apos;PV1.11&apos;][&apos;PV1.11.8&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.floor = seg[&apos;PV1.11&apos;][&apos;PV1.11.8&apos;]; }
				if (seg[&apos;PV1.11&apos;][&apos;PV1.11.9&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.locationDescription = seg[&apos;PV1.11&apos;][&apos;PV1.11.9&apos;]; }
				if (Object.keys(pv1[index].temporaryLocation).length == 0) {
					delete pv1[index].temporaryLocation;
				}

				// PV1.12, preadmitTestIndicator
				if (seg[&apos;PV1.12&apos;][&apos;PV1.12.1&apos;].toString() != &quot;&quot;) { pv1[index].preadmitTestIndicator = seg[&apos;PV1.12&apos;][&apos;PV1.12.1&apos;]; }

				// PV1.13, readmissionIndicator
				if (seg[&apos;PV1.13&apos;][&apos;PV1.13.1&apos;].toString() != &quot;&quot;) { pv1[index].readmissionIndicator = seg[&apos;PV1.13&apos;][&apos;PV1.13.1&apos;]; }

				// PV1.14, admitSource
				if (seg[&apos;PV1.14&apos;][&apos;PV1.14.1&apos;].toString() != &quot;&quot;) { pv1[index].admitSource = seg[&apos;PV1.14&apos;][&apos;PV1.14.1&apos;]; }

				// PV1.15, ambulatoryStatus
				pv1[index].ambulatoryStatus = [];
				for each (field in seg[&apos;PV1.15&apos;]) {
					if (field[&apos;PV1.15.1&apos;].toString() != &quot;&quot;) {
						pv1[index].ambulatoryStatus.push(field[&apos;PV1.15.1&apos;]);
					}
				}
				if (pv1[index].ambulatoryStatus.length == 0){
					delete pv1[index].ambulatoryStatus;
				}

				// PV1.16, vipIndicator
				if (seg[&apos;PV1.16&apos;][&apos;PV1.16.1&apos;].toString() != &quot;&quot;) { pv1[index].vipIndicator = seg[&apos;PV1.16&apos;][&apos;PV1.16.1&apos;]; }

				// PV1.17, admittingDoctor
				pv1[index].admittingDoctor = [];
				for each (field in seg[&apos;PV1.17&apos;]) {
					var block = {};
					if (field[&apos;PV1.17.1&apos;].toString() != &quot;&quot;) { block.id = field[&apos;PV1.17.1&apos;]; }
					if (field[&apos;PV1.17.2&apos;].toString() != &quot;&quot;) { block.lastName = field[&apos;PV1.17.2&apos;]; }
					if (field[&apos;PV1.17.3&apos;].toString() != &quot;&quot;) { block.firstName = field[&apos;PV1.17.3&apos;]; }
					if (field[&apos;PV1.17.4&apos;].toString() != &quot;&quot;) { block.middleInitOrName = field[&apos;PV1.17.4&apos;]; }
					if (field[&apos;PV1.17.5&apos;].toString() != &quot;&quot;) { block.suffix = field[&apos;PV1.17.5&apos;]; }
					if (field[&apos;PV1.17.6&apos;].toString() != &quot;&quot;) { block.prefix = field[&apos;PV1.17.6&apos;]; }
					if (field[&apos;PV1.17.7&apos;].toString() != &quot;&quot;) { block.degree = field[&apos;PV1.17.7&apos;]; }
					if (field[&apos;PV1.17.8&apos;].toString() != &quot;&quot;) { block.sourceTable = field[&apos;PV1.17.8&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;PV1.17.9&apos;][&apos;PV1.17.9.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.id = field[&apos;PV1.17.9&apos;][&apos;PV1.17.9.1&apos;]; }
					if (field[&apos;PV1.17.9&apos;][&apos;PV1.17.9.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;PV1.17.9&apos;][&apos;PV1.17.9.2&apos;]; }
					if (field[&apos;PV1.17.9&apos;][&apos;PV1.17.9.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;PV1.17.9&apos;][&apos;PV1.17.9.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;PV1.17.9&apos;].toString() != &quot;&quot;) { block.assigningAuthority.id = field[&apos;PV1.17.9&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;PV1.17.10&apos;].toString() != &quot;&quot;) { block.nameTypeCode = field[&apos;PV1.17.10&apos;]; }
					if (field[&apos;PV1.17.11&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;PV1.17.11&apos;]; }
					if (field[&apos;PV1.17.12&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;PV1.17.12&apos;]; }
					if (field[&apos;PV1.17.13&apos;].toString() != &quot;&quot;) { block.identifierTypeCode = field[&apos;PV1.17.13&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;PV1.17.14&apos;][&apos;PV1.17.14.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.id = field[&apos;PV1.17.14&apos;][&apos;PV1.17.14.1&apos;]; }
					if (field[&apos;PV1.17.14&apos;][&apos;PV1.17.14.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;PV1.17.14&apos;][&apos;PV1.17.14.2&apos;]; }
					if (field[&apos;PV1.17.14&apos;][&apos;PV1.17.14.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;PV1.17.14&apos;][&apos;PV1.17.14.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;PV1.17.14&apos;].toString() != &quot;&quot;) { block.assigningFacility.id = field[&apos;PV1.17.14&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						pv1[index].admittingDoctor.push(block);
					}
				}
				if (pv1[index].admittingDoctor.length == 0) {
					delete pv1[index].admittingDoctor;
				}
				
				// PV1.18, patientType
				if (seg[&apos;PV1.18&apos;][&apos;PV1.18.1&apos;].toString() != &quot;&quot;) { pv1[index].patientType = seg[&apos;PV1.18&apos;][&apos;PV1.18.1&apos;]; }

				// PV1.19, visitNumber
				pv1[index].visitNumber = {};
				if (seg[&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.id = seg[&apos;PV1.19&apos;][&apos;PV1.19.1&apos;]; }
				if (seg[&apos;PV1.19&apos;][&apos;PV1.19.2&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.identifierCheckDigit = seg[&apos;PV1.19&apos;][&apos;PV1.19.2&apos;]; }
				if (seg[&apos;PV1.19&apos;][&apos;PV1.19.3&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.codeIdentifyingCheckDigitScheme = seg[&apos;PV1.19&apos;][&apos;PV1.19.3&apos;]; }
				pv1[index].visitNumber.assigningAuthority = {};
				if (seg[&apos;PV1.19&apos;][&apos;PV1.19.4&apos;][&apos;PV1.19.4.1&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.assigningAuthority.namespaceId = seg[&apos;PV1.19&apos;][&apos;PV1.19.4&apos;][&apos;PV1.19.4.1&apos;]; }
				if (seg[&apos;PV1.19&apos;][&apos;PV1.19.4&apos;][&apos;PV1.19.4.2&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.assigningAuthority.universalId = seg[&apos;PV1.19&apos;][&apos;PV1.19.4&apos;][&apos;PV1.19.4.2&apos;]; }
				if (seg[&apos;PV1.19&apos;][&apos;PV1.19.4&apos;][&apos;PV1.19.4.3&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.assigningAuthority.universalIdType = seg[&apos;PV1.19&apos;][&apos;PV1.19.4&apos;][&apos;PV1.19.4.3&apos;]; }
				if (Object.keys(pv1[index].visitNumber.assigningAuthority).length == 0) {
					if (seg[&apos;PV1.19&apos;][&apos;PV1.19.4&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.assigningAuthority.namespaceId = seg[&apos;PV1.19&apos;][&apos;PV1.19.4&apos;]; }
					else delete pv1[index].visitNumber.assigningAuthority;
				}
				if (seg[&apos;PV1.19&apos;][&apos;PV1.19.5&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.idTypeCode = seg[&apos;PV1.19&apos;][&apos;PV1.19.5&apos;]; }
				pv1[index].visitNumber.assigningFacility = {};
				if (seg[&apos;PV1.19&apos;][&apos;PV1.19.6&apos;][&apos;PV1.19.6.1&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.assigningFacility.namespaceId = seg[&apos;PV1.19&apos;][&apos;PV1.19.6&apos;][&apos;PV1.19.6.1&apos;]; }
				if (seg[&apos;PV1.19&apos;][&apos;PV1.19.6&apos;][&apos;PV1.19.6.2&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.assigningFacility.universalId = seg[&apos;PV1.19&apos;][&apos;PV1.19.6&apos;][&apos;PV1.19.6.2&apos;]; }
				if (seg[&apos;PV1.19&apos;][&apos;PV1.19.6&apos;][&apos;PV1.19.6.3&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.assigningFacility.universalIdType = seg[&apos;PV1.19&apos;][&apos;PV1.19.6&apos;][&apos;PV1.19.6.3&apos;]; }
				if (Object.keys(pv1[index].visitNumber.assigningFacility).length == 0) {
					if (seg[&apos;PV1.19&apos;][&apos;PV1.19.6&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.assigningFacility.namespaceId = seg[&apos;PV1.19&apos;][&apos;PV1.19.6&apos;]; }
					else delete pv1[index].visitNumber.assigningFacility;
				}
				if (Object.keys(pv1[index].visitNumber).length == 0) {
					delete pv1[index].visitNumber;
				}
				
				// PV1.20, financialClass
				pv1[index].financialClass = {};
				if (seg[&apos;PV1.20&apos;][&apos;PV1.20.1&apos;].toString() != &quot;&quot;) { pv1[index].financialClass.financialClass = seg[&apos;PV1.20&apos;][&apos;PV1.20.1&apos;]; }
				if (seg[&apos;PV1.20&apos;][&apos;PV1.20.2&apos;].toString() != &quot;&quot;) { pv1[index].financialClass.effectiveDate = seg[&apos;PV1.20&apos;][&apos;PV1.20.2&apos;]; }
				if (Object.keys(pv1[index].financialClass).length == 0) {
					delete pv1[index].financialClass;
				}

				// PV1.21, chargePriceIndicator
				if (seg[&apos;PV1.21&apos;][&apos;PV1.21.1&apos;].toString() != &quot;&quot;) { pv1[index].chargePriceIndicator = seg[&apos;PV1.21&apos;][&apos;PV1.21.1&apos;]; }

				// PV1.22, courtesyCode
				if (seg[&apos;PV1.22&apos;][&apos;PV1.22.1&apos;].toString() != &quot;&quot;) { pv1[index].courtesyCode = seg[&apos;PV1.22&apos;][&apos;PV1.22.1&apos;]; }

				// PV1.23, creditRating
				if (seg[&apos;PV1.23&apos;][&apos;PV1.23.1&apos;].toString() != &quot;&quot;) { pv1[index].creditRating = seg[&apos;PV1.23&apos;][&apos;PV1.23.1&apos;]; }

				// PV1.24, contractCode
				pv1[index].contractCode = [];
				for each (field in seg[&apos;PV1.24&apos;]) {
					if (field[&apos;PV1.24.1&apos;].toString() != &quot;&quot;) {
						pv1[index].contractCode.push(field[&apos;PV1.24.1&apos;]);
					}
				}
				if (pv1[index].contractCode.length == 0) {
					delete pv1[index].contractCode;
				}

				// PV1.25, contractEffectiveDate
				pv1[index].contractEffectiveDate = [];
				for each (field in seg[&apos;PV1.25&apos;]) {
					if (field[&apos;PV1.25.1&apos;].toString() != &quot;&quot;) {
						pv1[index].contractEffectiveDate.push(field[&apos;PV1.25.1&apos;]);
					}
				}
				if (pv1[index].contractEffectiveDate.length == 0) {
					delete pv1[index].contractEffectiveDate;
				}

				// PV1.26, contractAmount
				pv1[index].contractAmount = [];
				for each (field in seg[&apos;PV1.26&apos;]) {
					if (field[&apos;PV1.26.1&apos;].toString() != &quot;&quot;) {
						pv1[index].contractAmount.push(field[&apos;PV1.26.1&apos;]);
					}
				}
				if (pv1[index].contractAmount.length == 0) {
					delete pv1[index].contractAmount;
				}

				// PV1.27, contractPeriod
				pv1[index].contractPeriod = [];
				for each (field in seg[&apos;PV1.27&apos;]) {
					if (field[&apos;PV1.27.1&apos;].toString() != &quot;&quot;) {
						pv1[index].contractPeriod.push(field[&apos;PV1.27.1&apos;]);
					}
				}
				if (pv1[index].contractPeriod.length == 0) {
					delete pv1[index].contractPeriod;
				}

				// PV1.28, interestCode
				if (seg[&apos;PV1.28&apos;][&apos;PV1.28.1&apos;].toString() != &quot;&quot;) { pv1[index].interestCode = seg[&apos;PV1.28&apos;][&apos;PV1.28.1&apos;]; }

				// PV1.29, transferToBadDebtCode
				if (seg[&apos;PV1.29&apos;][&apos;PV1.29.1&apos;].toString() != &quot;&quot;) { pv1[index].transferToBadDebtCode = seg[&apos;PV1.29&apos;][&apos;PV1.29.1&apos;]; }

				// PV1.30, transferToBadDebtDate
				if (seg[&apos;PV1.30&apos;][&apos;PV1.30.1&apos;].toString() != &quot;&quot;) { pv1[index].transferToBadDebtDate = seg[&apos;PV1.30&apos;][&apos;PV1.30.1&apos;]; }

				// PV1.31, badDebtAgencyCode
				if (seg[&apos;PV1.31&apos;][&apos;PV1.31.1&apos;].toString() != &quot;&quot;) { pv1[index].badDebtAgencyCode = seg[&apos;PV1.31&apos;][&apos;PV1.31.1&apos;]; }

				// PV1.32, badDebtTransferAmount
				if (seg[&apos;PV1.32&apos;][&apos;PV1.32.1&apos;].toString() != &quot;&quot;) { pv1[index].badDebtTransferAmount = seg[&apos;PV1.32&apos;][&apos;PV1.32.1&apos;]; }

				// PV1.33, badDebtRecoveryAmount
				if (seg[&apos;PV1.33&apos;][&apos;PV1.33.1&apos;].toString() != &quot;&quot;) { pv1[index].badDebtRecoveryAmount = seg[&apos;PV1.33&apos;][&apos;PV1.33.1&apos;]; }

				// PV1.34, deleteAccountIndicator
				if (seg[&apos;PV1.34&apos;][&apos;PV1.34.1&apos;].toString() != &quot;&quot;) { pv1[index].deleteAccountIndicator = seg[&apos;PV1.34&apos;][&apos;PV1.34.1&apos;]; }

				// PV1.35, deleteAccountDate
				if (seg[&apos;PV1.35&apos;][&apos;PV1.35.1&apos;].toString() != &quot;&quot;) { pv1[index].deleteAccountDate = seg[&apos;PV1.35&apos;][&apos;PV1.35.1&apos;]; }

				// PV1.36, dischargeDisposition
				if (seg[&apos;PV1.36&apos;][&apos;PV1.36.1&apos;].toString() != &quot;&quot;) { pv1[index].dischargeDisposition = seg[&apos;PV1.36&apos;][&apos;PV1.36.1&apos;]; }

				// PV1.37, dischargedtoLocation
				pv1[index].dischargedtoLocation = {};
				if (seg[&apos;PV1.37&apos;][&apos;PV1.37.1&apos;].toString() != &quot;&quot;) { pv1[index].dischargedtoLocation.dischargeLocation = seg[&apos;PV1.37&apos;][&apos;PV1.37.1&apos;]; }
				if (seg[&apos;PV1.37&apos;][&apos;PV1.37.2&apos;].toString() != &quot;&quot;) { pv1[index].dischargedtoLocation.effectiveDate = seg[&apos;PV1.37&apos;][&apos;PV1.37.2&apos;]; }
				if (Object.keys(pv1[index].dischargedtoLocation).length == 0) {
					delete pv1[index].dischargedtoLocation;
				}

				// PV1.38, dietType
				if (seg[&apos;PV1.38&apos;][&apos;PV1.38.1&apos;].toString() != &quot;&quot;) { pv1[index].dietType = seg[&apos;PV1.38&apos;][&apos;PV1.38.1&apos;]; }

				// PV1.39, servicingFacility
				if (seg[&apos;PV1.39&apos;][&apos;PV1.39.1&apos;].toString() != &quot;&quot;) { pv1[index].servicingFacility = seg[&apos;PV1.39&apos;][&apos;PV1.39.1&apos;]; }

				// PV1.40, bedStatus
				if (seg[&apos;PV1.40&apos;][&apos;PV1.40.1&apos;].toString() != &quot;&quot;) { pv1[index].bedStatus = seg[&apos;PV1.40&apos;][&apos;PV1.40.1&apos;]; }

				// PV1.41, accountStatus
				if (seg[&apos;PV1.41&apos;][&apos;PV1.41.1&apos;].toString() != &quot;&quot;) { pv1[index].accountStatus = seg[&apos;PV1.41&apos;][&apos;PV1.41.1&apos;]; }

				// PV1.42, pendingLocation
				pv1[index].pendingLocation = {};
				if (seg[&apos;PV1.42&apos;][&apos;PV1.42.1&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.pointOfCare = seg[&apos;PV1.42&apos;][&apos;PV1.42.1&apos;]; }
				if (seg[&apos;PV1.42&apos;][&apos;PV1.42.2&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.room = seg[&apos;PV1.42&apos;][&apos;PV1.42.2&apos;]; }
				if (seg[&apos;PV1.42&apos;][&apos;PV1.42.3&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.bed = seg[&apos;PV1.42&apos;][&apos;PV1.42.3&apos;]; }
				pv1[index].pendingLocation.facility = {};
				if (seg[&apos;PV1.42&apos;][&apos;PV1.42.4&apos;][&apos;PV1.42.4.1&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.facility.nameSpaceId =  seg[&apos;PV1.42&apos;][&apos;PV1.42.4&apos;][&apos;PV1.42.4.1&apos;]; }
				if (seg[&apos;PV1.42&apos;][&apos;PV1.42.4&apos;][&apos;PV1.42.4.2&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.facility.universalId =  seg[&apos;PV1.42&apos;][&apos;PV1.42.4&apos;][&apos;PV1.42.4.2&apos;]; }
				if (seg[&apos;PV1.42&apos;][&apos;PV1.42.4&apos;][&apos;PV1.42.4.3&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.facility.universalIdType =  seg[&apos;PV1.42&apos;][&apos;PV1.42.4&apos;][&apos;PV1.42.4.3&apos;]; }
				if (Object.keys(pv1[index].pendingLocation.facility).length == 0) {
					if (seg[&apos;PV1.42&apos;][&apos;PV1.42.4&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.facility.nameSpaceId = seg[&apos;PV1.42&apos;][&apos;PV1.42.4&apos;]; }
					else delete pv1[index].pendingLocation.facility;
				}
				if (seg[&apos;PV1.42&apos;][&apos;PV1.42.5&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.locationStatus = seg[&apos;PV1.42&apos;][&apos;PV1.42.5&apos;]; }
				if (seg[&apos;PV1.42&apos;][&apos;PV1.42.6&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.personLocationType = seg[&apos;PV1.42&apos;][&apos;PV1.42.6&apos;]; }
				if (seg[&apos;PV1.42&apos;][&apos;PV1.42.7&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.building = seg[&apos;PV1.42&apos;][&apos;PV1.42.7&apos;]; }
				if (seg[&apos;PV1.42&apos;][&apos;PV1.42.8&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.floor = seg[&apos;PV1.42&apos;][&apos;PV1.42.8&apos;]; }
				if (seg[&apos;PV1.42&apos;][&apos;PV1.42.9&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.locationDescription = seg[&apos;PV1.42&apos;][&apos;PV1.42.9&apos;]; }
				if (Object.keys(pv1[index].pendingLocation).length == 0) {
					delete pv1[index].pendingLocation;
				}

				// PV1.43, priorTemporaryLocation
				pv1[index].priorTemporaryLocation = {};
				if (seg[&apos;PV1.43&apos;][&apos;PV1.43.1&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.pointOfCare = seg[&apos;PV1.43&apos;][&apos;PV1.43.1&apos;]; }
				if (seg[&apos;PV1.43&apos;][&apos;PV1.43.2&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.room = seg[&apos;PV1.43&apos;][&apos;PV1.43.2&apos;]; }
				if (seg[&apos;PV1.43&apos;][&apos;PV1.43.3&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.bed = seg[&apos;PV1.43&apos;][&apos;PV1.43.3&apos;]; }
				pv1[index].priorTemporaryLocation.facility = {};
				if (seg[&apos;PV1.43&apos;][&apos;PV1.43.4&apos;][&apos;PV1.43.4.1&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.facility.nameSpaceId =  seg[&apos;PV1.43&apos;][&apos;PV1.43.4&apos;][&apos;PV1.43.4.1&apos;]; }
				if (seg[&apos;PV1.43&apos;][&apos;PV1.43.4&apos;][&apos;PV1.43.4.2&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.facility.universalId =  seg[&apos;PV1.43&apos;][&apos;PV1.43.4&apos;][&apos;PV1.43.4.2&apos;]; }
				if (seg[&apos;PV1.43&apos;][&apos;PV1.43.4&apos;][&apos;PV1.43.4.3&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.facility.universalIdType =  seg[&apos;PV1.43&apos;][&apos;PV1.43.4&apos;][&apos;PV1.43.4.3&apos;]; }
				if (Object.keys(pv1[index].priorTemporaryLocation.facility).length == 0) {
					if (seg[&apos;PV1.43&apos;][&apos;PV1.43.4&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.facility.nameSpaceId = seg[&apos;PV1.43&apos;][&apos;PV1.43.4&apos;]; }
					else delete pv1[index].priorTemporaryLocation.facility;
				}
				if (seg[&apos;PV1.43&apos;][&apos;PV1.43.5&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.locationStatus = seg[&apos;PV1.43&apos;][&apos;PV1.43.5&apos;]; }
				if (seg[&apos;PV1.43&apos;][&apos;PV1.43.6&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.personLocationType = seg[&apos;PV1.43&apos;][&apos;PV1.43.6&apos;]; }
				if (seg[&apos;PV1.43&apos;][&apos;PV1.43.7&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.building = seg[&apos;PV1.43&apos;][&apos;PV1.43.7&apos;]; }
				if (seg[&apos;PV1.43&apos;][&apos;PV1.43.8&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.floor = seg[&apos;PV1.43&apos;][&apos;PV1.43.8&apos;]; }
				if (seg[&apos;PV1.43&apos;][&apos;PV1.43.9&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.locationDescription = seg[&apos;PV1.43&apos;][&apos;PV1.43.9&apos;]; }
				if (Object.keys(pv1[index].priorTemporaryLocation).length == 0) {
					delete pv1[index].priorTemporaryLocation;
				}

				// PV1.44, admitDateTime
				if (seg[&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString() != &quot;&quot;) { pv1[index].admitDateTime = seg[&apos;PV1.44&apos;][&apos;PV1.44.1&apos;]; }

				// PV1.45, dischargeDateTime
				if (seg[&apos;PV1.45&apos;][&apos;PV1.45.1&apos;].toString() != &quot;&quot;) { pv1[index].dischargeDateTime = seg[&apos;PV1.45&apos;][&apos;PV1.45.1&apos;]; }

				// PV1.46, currentPatientBalance
				if (seg[&apos;PV1.46&apos;][&apos;PV1.46.1&apos;].toString() != &quot;&quot;) { pv1[index].currentPatientBalance = seg[&apos;PV1.46&apos;][&apos;PV1.46.1&apos;]; }

				// PV1.47, totalCharges
				if (seg[&apos;PV1.47&apos;][&apos;PV1.47.1&apos;].toString() != &quot;&quot;) { pv1[index].totalCharges = seg[&apos;PV1.47&apos;][&apos;PV1.47.1&apos;]; }

				// PV1.48, totalAdjustments
				if (seg[&apos;PV1.48&apos;][&apos;PV1.48.1&apos;].toString() != &quot;&quot;) { pv1[index].totalAdjustments = seg[&apos;PV1.48&apos;][&apos;PV1.48.1&apos;]; }

				// PV1.49, totalPayments
				if (seg[&apos;PV1.49&apos;][&apos;PV1.49.1&apos;].toString() != &quot;&quot;) { pv1[index].totalPayments = seg[&apos;PV1.49&apos;][&apos;PV1.49.1&apos;]; }

				// PV1.50, alternateVisitID
				pv1[index].alternateVisitID = {};
				if (seg[&apos;PV1.50&apos;][&apos;PV1.50.1&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.id = seg[&apos;PV1.50&apos;][&apos;PV1.50.1&apos;]; }
				if (seg[&apos;PV1.50&apos;][&apos;PV1.50.2&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.identifierCheckDigit = seg[&apos;PV1.50&apos;][&apos;PV1.50.2&apos;]; }
				if (seg[&apos;PV1.50&apos;][&apos;PV1.50.3&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.codeIdentifyingCheckDigitScheme = seg[&apos;PV1.50&apos;][&apos;PV1.50.3&apos;]; }
				pv1[index].alternateVisitID.assigningAuthority = {};
				if (seg[&apos;PV1.50&apos;][&apos;PV1.50.4&apos;][&apos;PV1.50.4.1&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.assigningAuthority.namespaceId = seg[&apos;PV1.50&apos;][&apos;PV1.50.4&apos;][&apos;PV1.50.4.1&apos;]; }
				if (seg[&apos;PV1.50&apos;][&apos;PV1.50.4&apos;][&apos;PV1.50.4.2&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.assigningAuthority.universalId = seg[&apos;PV1.50&apos;][&apos;PV1.50.4&apos;][&apos;PV1.50.4.2&apos;]; }
				if (seg[&apos;PV1.50&apos;][&apos;PV1.50.4&apos;][&apos;PV1.50.4.3&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.assigningAuthority.universalIdType = seg[&apos;PV1.50&apos;][&apos;PV1.50.4&apos;][&apos;PV1.50.4.3&apos;]; }
				if (Object.keys(pv1[index].alternateVisitID.assigningAuthority).length == 0) {
					if (seg[&apos;PV1.50&apos;][&apos;PV1.50.4&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.assigningAuthority.namespaceId = seg[&apos;PV1.50&apos;][&apos;PV1.50.4&apos;]; }
					else delete pv1[index].alternateVisitID.assigningAuthority;
				}
				if (seg[&apos;PV1.50&apos;][&apos;PV1.50.5&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.idTypeCode = seg[&apos;PV1.50&apos;][&apos;PV1.50.5&apos;]; }
				pv1[index].alternateVisitID.assigningFacility = {};
				if (seg[&apos;PV1.50&apos;][&apos;PV1.50.6&apos;][&apos;PV1.50.6.1&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.assigningFacility.namespaceId = seg[&apos;PV1.50&apos;][&apos;PV1.50.6&apos;][&apos;PV1.50.6.1&apos;]; }
				if (seg[&apos;PV1.50&apos;][&apos;PV1.50.6&apos;][&apos;PV1.50.6.2&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.assigningFacility.universalId = seg[&apos;PV1.50&apos;][&apos;PV1.50.6&apos;][&apos;PV1.50.6.2&apos;]; }
				if (seg[&apos;PV1.50&apos;][&apos;PV1.50.6&apos;][&apos;PV1.50.6.3&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.assigningFacility.universalIdType = seg[&apos;PV1.50&apos;][&apos;PV1.50.6&apos;][&apos;PV1.50.6.3&apos;]; }
				if (Object.keys(pv1[index].alternateVisitID.assigningFacility).length == 0) {
					if (seg[&apos;PV1.50&apos;][&apos;PV1.50.6&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.assigningFacility.namespaceId = seg[&apos;PV1.50&apos;][&apos;PV1.50.6&apos;]; }
					else delete pv1[index].alternateVisitID.assigningFacility;
				}
				if (Object.keys(pv1[index].alternateVisitID).length == 0) {
					delete pv1[index].alternateVisitID;
				}

				// PV1.51, visitIndicator
				if (seg[&apos;PV1.51&apos;][&apos;PV1.51.1&apos;].toString() != &quot;&quot;) { pv1[index].visitIndicator = seg[&apos;PV1.51&apos;][&apos;PV1.51.1&apos;]; }

				// PV1.52, otherHealthcareProvider
				pv1[index].otherHealthcareProvider = {};
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.1&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.id = seg[&apos;PV1.52&apos;][&apos;PV1.52.1&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.2&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.lastName = seg[&apos;PV1.52&apos;][&apos;PV1.52.2&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.3&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.firstName = seg[&apos;PV1.52&apos;][&apos;PV1.52.3&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.4&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.middleInitOrName = seg[&apos;PV1.52&apos;][&apos;PV1.52.4&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.5&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.suffix = seg[&apos;PV1.52&apos;][&apos;PV1.52.5&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.6&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.prefix = seg[&apos;PV1.52&apos;][&apos;PV1.52.6&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.7&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.degree = seg[&apos;PV1.52&apos;][&apos;PV1.52.7&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.8&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.sourceTable = seg[&apos;PV1.52&apos;][&apos;PV1.52.8&apos;]; }
				pv1[index].otherHealthcareProvider.assigningAuthority = {};
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.9&apos;][&apos;PV1.52.9.1&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.assigningAuthority.id = seg[&apos;PV1.52&apos;][&apos;PV1.52.9&apos;][&apos;PV1.52.9.1&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.9&apos;][&apos;PV1.52.9.2&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.assigningAuthority.universalId = seg[&apos;PV1.52&apos;][&apos;PV1.52.9&apos;][&apos;PV1.52.9.2&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.9&apos;][&apos;PV1.52.9.3&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.assigningAuthority.universalIdType = seg[&apos;PV1.52&apos;][&apos;PV1.52.9&apos;][&apos;PV1.52.9.3&apos;]; }
				if (Object.keys(pv1[index].otherHealthcareProvider.assigningAuthority).length == 0) {
					if (seg[&apos;PV1.52&apos;][&apos;PV1.52.9&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.assigningAuthority.id = seg[&apos;PV1.52&apos;][&apos;PV1.52.9&apos;]; }
					else delete pv1[index].otherHealthcareProvider.assigningAuthority;
				}
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.10&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.nameTypeCode = seg[&apos;PV1.52&apos;][&apos;PV1.52.10&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.11&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.identifierCheckDigit = seg[&apos;PV1.52&apos;][&apos;PV1.52.11&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.12&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.codeIdentifyingCheckDigitScheme = seg[&apos;PV1.52&apos;][&apos;PV1.52.12&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.13&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.identifierTypeCode = seg[&apos;PV1.52&apos;][&apos;PV1.52.13&apos;]; }
				pv1[index].otherHealthcareProvider.assigningFacility = {};
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.14&apos;][&apos;PV1.52.14.1&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.assigningFacility.id = seg[&apos;PV1.52&apos;][&apos;PV1.52.14&apos;][&apos;PV1.52.14.1&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.14&apos;][&apos;PV1.52.14.2&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.assigningFacility.universalId = seg[&apos;PV1.52&apos;][&apos;PV1.52.14&apos;][&apos;PV1.52.14.2&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.14&apos;][&apos;PV1.52.14.3&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.assigningFacility.universalIdType = seg[&apos;PV1.52&apos;][&apos;PV1.52.14&apos;][&apos;PV1.52.14.3&apos;]; }
				if (Object.keys(pv1[index].otherHealthcareProvider.assigningFacility).length == 0) {
					if (seg[&apos;PV1.52&apos;][&apos;PV1.52.14&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.assigningFacility.id = seg[&apos;PV1.52&apos;][&apos;PV1.52.14&apos;]; }
					else delete pv1[index].otherHealthcareProvider.assigningFacility;
				}
				if (Object.keys(pv1[index].otherHealthcareProvider).length == 0) {
					delete pv1[index].otherHealthcareProvider;
				}
				*/
				
				index++;
				
				/*
				if(debug&gt; 0) {
					logger.error(scriptName+&apos;::DEBUG seg[&quot;+index+&quot;]: &apos;+seg.toString());
					logger.error(scriptName+&apos;::DEBUG pv1[&quot;+index+&quot;]: &apos;+pv1.toString());
				}
				*/
			
			}
		}
		
		logger.error(scriptName+&apos;::DEBUG objPV1: &apos;+JSON.stringify(objPV1));		
		return objPV1;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>517b87b6-8ea2-48ba-899d-895b700069ee</id>
        <name>getSCH_v23</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911262510</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	getSCH_v23(msg)
	
	- Desc: This function retrieves HL7v2 HAPI format elements and values from SCH segment stored in
	object for reference

	@param {String} msg - this contains the raw message (string)
	@return {object} objSCH - this contains the SCH segment elements composed into a single objSCH object.
*/
function getSCH_v23(msg) {

	// define variables
	if (typeof(msg[&apos;SCH&apos;].toString()) !== undefined) {

		// SCH	
		var objSCH= new Object();

		if (msg[&apos;SCH&apos;].length() &gt; 0) {
			var index = 0;
			for each (seg in msg.SCH) {

				// SCH.1, placerAppointmentId
				if(typeof(seg[&apos;SCH.1&apos;]) !== &apos;undefined&apos;) {
					var objPlacerAppointmentId= new Object();
					if (seg[&apos;SCH.1&apos;][&apos;SCH.1.1&apos;].toString() != &quot;&quot;) { objPlacerAppointmentId.id= seg[&apos;SCH.1&apos;][&apos;SCH.1.1&apos;].toString(); }
					if (seg[&apos;SCH.1&apos;][&apos;SCH.1.2&apos;].toString() != &quot;&quot;) { objPlacerAppointmentId.namespaceId= seg[&apos;SCH.1&apos;][&apos;SCH.1.2&apos;].toString(); }
					if (seg[&apos;SCH.1&apos;][&apos;SCH.1.3&apos;].toString() != &quot;&quot;) { objPlacerAppointmentId.universalId= seg[&apos;SCH.1&apos;][&apos;SCH.1.3&apos;].toString(); }
					if (seg[&apos;SCH.1&apos;][&apos;SCH.1.4&apos;].toString() != &quot;&quot;) { objPlacerAppointmentId.universalIdType= seg[&apos;SCH.1&apos;][&apos;SCH.1.4&apos;].toString(); }
					
					objSCH.objPlacerAppointmentId= objPlacerAppointmentId;
				}
					
				// SCH.2, fillerAppointmentId
				if(typeof(seg[&apos;SCH.2&apos;]) !== &apos;undefined&apos;) {
					var objFillerAppointmentId= new Object();
					if (seg[&apos;SCH.2&apos;][&apos;SCH.2.1&apos;].toString() != &quot;&quot;) { objFillerAppointmentId.id= seg[&apos;SCH.2&apos;][&apos;SCH.2.1&apos;].toString(); }
					if (seg[&apos;SCH.2&apos;][&apos;SCH.2.2&apos;].toString() != &quot;&quot;) { objFillerAppointmentId.namespaceId= seg[&apos;SCH.2&apos;][&apos;SCH.2.2&apos;].toString(); }
					if (seg[&apos;SCH.2&apos;][&apos;SCH.2.3&apos;].toString() != &quot;&quot;) { objFillerAppointmentId.universalId= seg[&apos;SCH.2&apos;][&apos;SCH.2.3&apos;].toString(); }
					if (seg[&apos;SCH.2&apos;][&apos;SCH.2.4&apos;].toString() != &quot;&quot;) { objFillerAppointmentId.universalIdType= seg[&apos;SCH.2&apos;][&apos;SCH.2.4&apos;].toString(); }
					
					objSCH.fillerAppointmentId= objFillerAppointmentId;
				}
				
				// SCH.3, occurrenceNumber
				if (seg[&apos;SCH.3&apos;][&apos;SCH.3.1&apos;].toString() != &quot;&quot;) { objSCH.occurrenceNumber = seg[&apos;SCH.3&apos;][&apos;SCH.3.1&apos;].toString(); }

				// SCH.4, placerGroupNumber
				if(typeof(seg[&apos;SCH.4&apos;]) !== &apos;undefined&apos;) {
					var objPlacerGroupNumber= new Object();
					if (seg[&apos;SCH.4&apos;][&apos;SCH.4.1&apos;].toString() != &quot;&quot;) { objPlacerGroupNumber.id= seg[&apos;SCH.4&apos;][&apos;SCH.4.1&apos;].toString(); }
					if (seg[&apos;SCH.4&apos;][&apos;SCH.4.2&apos;].toString() != &quot;&quot;) { objPlacerGroupNumber.namespaceId= seg[&apos;SCH.4&apos;][&apos;SCH.4.2&apos;].toString(); }
					if (seg[&apos;SCH.4&apos;][&apos;SCH.4.3&apos;].toString() != &quot;&quot;) { objPlacerGroupNumber.universalId= seg[&apos;SCH.4&apos;][&apos;SCH.4.3&apos;].toString(); }
					if (seg[&apos;SCH.4&apos;][&apos;SCH.4.4&apos;].toString() != &quot;&quot;) { objPlacerGroupNumber.universalIdType= seg[&apos;SCH.4&apos;][&apos;SCH.4.4&apos;].toString(); }
					
					objSCH.placerGroupNumber= objPlacerGroupNumber;
				}

				// SCH.5, scheduleId
				if(typeof(seg[&apos;SCH.5&apos;]) !== &apos;undefined&apos;) {
					var objScheduleId= new Object();
					if (seg[&apos;SCH.5&apos;][&apos;SCH.5.1&apos;].toString() != &quot;&quot;) { objScheduleId.id= seg[&apos;SCH.5&apos;][&apos;SCH.5.1&apos;].toString(); }
					if (seg[&apos;SCH.5&apos;][&apos;SCH.5.2&apos;].toString() != &quot;&quot;) { objScheduleId.text= seg[&apos;SCH.5&apos;][&apos;SCH.5.2&apos;].toString(); }
					if (seg[&apos;SCH.5&apos;][&apos;SCH.5.3&apos;].toString() != &quot;&quot;) { objScheduleId.codeSystem= seg[&apos;SCH.5&apos;][&apos;SCH.5.3&apos;].toString(); }
					if (seg[&apos;SCH.5&apos;][&apos;SCH.5.4&apos;].toString() != &quot;&quot;) { objScheduleId.alternateId= seg[&apos;SCH.5&apos;][&apos;SCH.5.4&apos;].toString(); }
					if (seg[&apos;SCH.5&apos;][&apos;SCH.5.5&apos;].toString() != &quot;&quot;) { objScheduleId.alternateText= seg[&apos;SCH.5&apos;][&apos;SCH.5.5&apos;].toString(); }
					if (seg[&apos;SCH.5&apos;][&apos;SCH.5.6&apos;].toString() != &quot;&quot;) { objScheduleId.altCodeSystem= seg[&apos;SCH.5&apos;][&apos;SCH.5.6&apos;].toString(); }
					
					objSCH.scheduleId= objScheduleId;
				}
				
				// SCH.6, eventReason
				if(typeof(seg[&apos;SCH.6&apos;]) !== &apos;undefined&apos;) {
					var objEventReason= new Object();
					if (seg[&apos;SCH.6&apos;][&apos;SCH.6.1&apos;].toString() != &quot;&quot;) { objEventReason.id= seg[&apos;SCH.6&apos;][&apos;SCH.6.1&apos;].toString(); }
					if (seg[&apos;SCH.6&apos;][&apos;SCH.6.2&apos;].toString() != &quot;&quot;) { objEventReason.text= seg[&apos;SCH.6&apos;][&apos;SCH.6.2&apos;].toString(); }
					if (seg[&apos;SCH.6&apos;][&apos;SCH.6.3&apos;].toString() != &quot;&quot;) { objEventReason.codeSystem= seg[&apos;SCH.6&apos;][&apos;SCH.6.3&apos;].toString(); }
					if (seg[&apos;SCH.6&apos;][&apos;SCH.6.4&apos;].toString() != &quot;&quot;) { objEventReason.alternateId= seg[&apos;SCH.6&apos;][&apos;SCH.6.4&apos;].toString(); }
					if (seg[&apos;SCH.6&apos;][&apos;SCH.6.5&apos;].toString() != &quot;&quot;) { objEventReason.alternateText= seg[&apos;SCH.6&apos;][&apos;SCH.6.5&apos;].toString(); }
					if (seg[&apos;SCH.6&apos;][&apos;SCH.6.6&apos;].toString() != &quot;&quot;) { objEventReason.altCodeSystem= seg[&apos;SCH.6&apos;][&apos;SCH.6.6&apos;].toString(); }
					
					objSCH.eventReason= objEventReason;
				}

				// SCH.7, appointmentReason
				if(typeof(seg[&apos;SCH.7&apos;]) !== &apos;undefined&apos;) {
					var objAppointmentReason= new Object();
					if (seg[&apos;SCH.7&apos;][&apos;SCH.7.1&apos;].toString() != &quot;&quot;) { objAppointmentReason.id= seg[&apos;SCH.7&apos;][&apos;SCH.7.1&apos;].toString(); }
					if (seg[&apos;SCH.7&apos;][&apos;SCH.7.2&apos;].toString() != &quot;&quot;) { objAppointmentReason.text= seg[&apos;SCH.7&apos;][&apos;SCH.7.2&apos;].toString(); }
					if (seg[&apos;SCH.7&apos;][&apos;SCH.7.3&apos;].toString() != &quot;&quot;) { objAppointmentReason.codeSystem= seg[&apos;SCH.7&apos;][&apos;SCH.7.3&apos;].toString(); }
					if (seg[&apos;SCH.7&apos;][&apos;SCH.7.4&apos;].toString() != &quot;&quot;) { objAppointmentReason.alternateId= seg[&apos;SCH.7&apos;][&apos;SCH.7.4&apos;].toString(); }
					if (seg[&apos;SCH.7&apos;][&apos;SCH.7.5&apos;].toString() != &quot;&quot;) { objAppointmentReason.alternateText= seg[&apos;SCH.7&apos;][&apos;SCH.7.5&apos;].toString(); }
					if (seg[&apos;SCH.7&apos;][&apos;SCH.7.6&apos;].toString() != &quot;&quot;) { objAppointmentReason.altCodeSystem= seg[&apos;SCH.7&apos;][&apos;SCH.7.6&apos;].toString(); }
					
					objSCH.appointmentReason= objAppointmentReason;
				}
				
				// SCH.8, appointmentType
				if(typeof(seg[&apos;SCH.8&apos;]) !== &apos;undefined&apos;) {
					var x= new Object();
					if (seg[&apos;SCH.8&apos;][&apos;SCH.8.1&apos;].toString() != &quot;&quot;) { objAppointmentType.id= seg[&apos;SCH.8&apos;][&apos;SCH.8.1&apos;].toString(); }
					if (seg[&apos;SCH.8&apos;][&apos;SCH.8.2&apos;].toString() != &quot;&quot;) { objAppointmentType.text= seg[&apos;SCH.8&apos;][&apos;SCH.8.2&apos;].toString(); }
					if (seg[&apos;SCH.8&apos;][&apos;SCH.8.3&apos;].toString() != &quot;&quot;) { objAppointmentType.codeSystem= seg[&apos;SCH.8&apos;][&apos;SCH.8.3&apos;].toString(); }
					if (seg[&apos;SCH.8&apos;][&apos;SCH.8.4&apos;].toString() != &quot;&quot;) { objAppointmentType.alternateId= seg[&apos;SCH.8&apos;][&apos;SCH.8.4&apos;].toString(); }
					if (seg[&apos;SCH.8&apos;][&apos;SCH.8.5&apos;].toString() != &quot;&quot;) { objAppointmentType.alternateText= seg[&apos;SCH.8&apos;][&apos;SCH.8.5&apos;].toString(); }
					if (seg[&apos;SCH.8&apos;][&apos;SCH.8.6&apos;].toString() != &quot;&quot;) { objAppointmentType.altCodeSystem= seg[&apos;SCH.8&apos;][&apos;SCH.8.6&apos;].toString(); }
					
					objSCH.appointmentType= objAppointmentType;
				}

				// SCH.9, appointmentDuration
				if (seg[&apos;SCH.9&apos;][&apos;SCH.9.1&apos;].toString() != &quot;&quot;) { objSCH.appointmentDuration= seg[&apos;SCH.9&apos;][&apos;SCH.9.1&apos;].toString(); }

				// SCH.10, appointmentDurationUnits
				if(typeof(seg[&apos;SCH.10&apos;]) !== &apos;undefined&apos;) {
					var objAppointmentDurationUnits= new Object();
					if (seg[&apos;SCH.10&apos;][&apos;SCH.10.1&apos;].toString() != &quot;&quot;) { objAppointmentDurationUnits.id= seg[&apos;SCH.10&apos;][&apos;SCH.10.1&apos;].toString(); }
					if (seg[&apos;SCH.10&apos;][&apos;SCH.10.2&apos;].toString() != &quot;&quot;) { objAppointmentDurationUnits.text= seg[&apos;SCH.10&apos;][&apos;SCH.10.2&apos;].toString(); }
					if (seg[&apos;SCH.10&apos;][&apos;SCH.10.3&apos;].toString() != &quot;&quot;) { objAppointmentDurationUnits.codeSystem= seg[&apos;SCH.10&apos;][&apos;SCH.10.3&apos;].toString(); }
					if (seg[&apos;SCH.10&apos;][&apos;SCH.10.4&apos;].toString() != &quot;&quot;) { objAppointmentDurationUnits.alternateId= seg[&apos;SCH.10&apos;][&apos;SCH.10.4&apos;].toString(); }
					if (seg[&apos;SCH.10&apos;][&apos;SCH.10.5&apos;].toString() != &quot;&quot;) { objAppointmentDurationUnits.alternateText= seg[&apos;SCH.10&apos;][&apos;SCH.10.5&apos;].toString(); }
					if (seg[&apos;SCH.10&apos;][&apos;SCH.10.6&apos;].toString() != &quot;&quot;) { objAppointmentDurationUnits.altCodeSystem= seg[&apos;SCH.10&apos;][&apos;SCH.10.6&apos;].toString(); }
					
					objSCH.appointmentDurationUnits= objAppointmentDurationUnits;
				}
				
				// SCH.11, appointmentTimingQuantity
				if(typeof(seg[&apos;SCH.11&apos;]) !== &apos;undefined&apos;) {
					
					var objAppointmentTimingQuantity= new Object();

					// SCH.11.1, quantity
					if(typeof(seg[&apos;SCH.11&apos;][&apos;SCH.11.1&apos;]) !== &apos;undefined&apos;) {
						var objAppointmentTimingQuantityCE= new Object();
						if (seg[&apos;SCH.11&apos;][&apos;SCH.11.1&apos;][&apos;SCH.11.1.1&apos;].toString() != &quot;&quot;) { objAppointmentTimingQuantityCE.quantity= seg[&apos;SCH.11&apos;][&apos;SCH.11.1&apos;][&apos;SCH.11.1.1&apos;].toString(); }
						if (seg[&apos;SCH.11&apos;][&apos;SCH.11.1&apos;][&apos;SCH.11.1.2&apos;].toString() != &quot;&quot;) { objAppointmentTimingQuantityCE.units= seg[&apos;SCH.11&apos;][&apos;SCH.11.1&apos;][&apos;SCH.11.1.2&apos;].toString(); }
						objAppointmentTimingQuantity.quantity= objAppointmentTimingQuantityCE;
					}
					
					// SCH.11.2, interval
					if(typeof(seg[&apos;SCH.11&apos;][&apos;SCH.11.2&apos;]) !== &apos;undefined&apos;) {
						var objAppointmentTimingQuantityInterval= new Object();
						if (seg[&apos;SCH.11&apos;][&apos;SCH.11.2&apos;][&apos;SCH.11.2.1&apos;].toString() != &quot;&quot;) { objAppointmentTimingQuantityInterval.pattern= seg[&apos;SCH.11&apos;][&apos;SCH.11.2&apos;][&apos;SCH.11.2.1&apos;].toString(); }
						if (seg[&apos;SCH.11&apos;][&apos;SCH.11.2&apos;][&apos;SCH.11.2.2&apos;].toString() != &quot;&quot;) { objAppointmentTimingQuantityInterval.interval= seg[&apos;SCH.11&apos;][&apos;SCH.11.2&apos;][&apos;SCH.11.2.2&apos;].toString(); }
						objAppointmentTimingQuantity.interval= objAppointmentTimingQuantityInterval;
					}
					
					// SCH.11.3, duration
					if (seg[&apos;SCH.11&apos;][&apos;SCH.11.3&apos;].toString() != &apos;&apos;) { objAppointmentTimingQuantity.duration= seg[&apos;SCH.11&apos;][&apos;SCH.11.3&apos;].toString(); }
					
					// SCH.11.4, start date/time
					if (seg[&apos;SCH.11&apos;][&apos;SCH.11.4&apos;].toString() != &apos;&apos;) { objAppointmentTimingQuantity.startDateTime= seg[&apos;SCH.11&apos;][&apos;SCH.11.4&apos;].toString(); }
					
					// SCH.11.5, stop date/time
					if (seg[&apos;SCH.11&apos;][&apos;SCH.11.5&apos;].toString() != &apos;&apos;) { objAppointmentTimingQuantity.stopDateTime= seg[&apos;SCH.11&apos;][&apos;SCH.11.5&apos;].toString(); }
				
					objSCH.appointmentTimingQuantity= objAppointmentTimingQuantity;
				}	
				
				// SCH.12, placer contact person
				if(typeof(seg[&apos;SCH.12&apos;]) !== &apos;undefined&apos;) {
					var objPlacerContactPerson= new Object();
					if (seg[&apos;SCH.12&apos;][&apos;SCH.12.1&apos;].toString() != &quot;&quot;) { objPlacerContactPerson.id= seg[&apos;SCH.12&apos;][&apos;SCH.12.1&apos;].toString(); }
					if (seg[&apos;SCH.12&apos;][&apos;SCH.12.2&apos;].toString() != &quot;&quot;) { objPlacerContactPerson.familyName= seg[&apos;SCH.12&apos;][&apos;SCH.12.2&apos;].toString(); }
					if (seg[&apos;SCH.12&apos;][&apos;SCH.12.3&apos;].toString() != &quot;&quot;) { objPlacerContactPerson.givenName= seg[&apos;SCH.12&apos;][&apos;SCH.12.3&apos;].toString(); }
					if (seg[&apos;SCH.12&apos;][&apos;SCH.12.4&apos;].toString() != &quot;&quot;) { objPlacerContactPerson.middleName= seg[&apos;SCH.12&apos;][&apos;SCH.12.4&apos;].toString(); }
					if (seg[&apos;SCH.12&apos;][&apos;SCH.12.5&apos;].toString() != &quot;&quot;) { objPlacerContactPerson.suffix= seg[&apos;SCH.12&apos;][&apos;SCH.12.5&apos;].toString(); }
					if (seg[&apos;SCH.12&apos;][&apos;SCH.12.6&apos;].toString() != &quot;&quot;) { objPlacerContactPerson.prefix= seg[&apos;SCH.12&apos;][&apos;SCH.12.6&apos;].toString(); }
					if (seg[&apos;SCH.12&apos;][&apos;SCH.12.7&apos;].toString() != &quot;&quot;) { objPlacerContactPerson.degree= seg[&apos;SCH.12&apos;][&apos;SCH.12.7&apos;].toString(); }
					if (seg[&apos;SCH.12&apos;][&apos;SCH.12.8&apos;].toString() != &quot;&quot;) { objPlacerContactPerson.sourceTable= seg[&apos;SCH.12&apos;][&apos;SCH.12.8&apos;].toString(); }
					if (seg[&apos;SCH.12&apos;][&apos;SCH.12.9&apos;].toString() != &quot;&quot;) { objPlacerContactPerson.assigningAuthority= seg[&apos;SCH.12&apos;][&apos;SCH.12.9&apos;].toString(); }
					
					objSCH.placerContractPerson= objPlacerContactPerson;
				}
					
				// SCH.13, placer contact phone number
				if(typeof(seg[&apos;SCH.13&apos;]) !== &apos;undefined&apos;) {
					var objPlacerContactPhoneNumber= new Object();
					if (seg[&apos;SCH.13&apos;][&apos;SCH.13.1&apos;].toString() != &quot;&quot;) { objPlacerContactPhoneNumber.telephoneNumber= seg[&apos;SCH.13&apos;][&apos;SCH.13.1&apos;].toString(); }
					if (seg[&apos;SCH.13&apos;][&apos;SCH.13.2&apos;].toString() != &quot;&quot;) { objPlacerContactPhoneNumber.useCode= seg[&apos;SCH.13&apos;][&apos;SCH.13.2&apos;].toString(); }
					if (seg[&apos;SCH.13&apos;][&apos;SCH.13.3&apos;].toString() != &quot;&quot;) { objPlacerContactPhoneNumber.equipmentType= seg[&apos;SCH.13&apos;][&apos;SCH.13.3&apos;].toString(); }
					if (seg[&apos;SCH.13&apos;][&apos;SCH.13.4&apos;].toString() != &quot;&quot;) { objPlacerContactPhoneNumber.emailAddress= seg[&apos;SCH.13&apos;][&apos;SCH.13.4&apos;].toString(); }
					if (seg[&apos;SCH.13&apos;][&apos;SCH.13.5&apos;].toString() != &quot;&quot;) { objPlacerContactPhoneNumber.countryCode= seg[&apos;SCH.13&apos;][&apos;SCH.13.5&apos;].toString(); }
					if (seg[&apos;SCH.13&apos;][&apos;SCH.13.6&apos;].toString() != &quot;&quot;) { objPlacerContactPhoneNumber.areaCode= seg[&apos;SCH.13&apos;][&apos;SCH.13.6&apos;].toString(); }
					if (seg[&apos;SCH.13&apos;][&apos;SCH.13.6&apos;].toString() != &quot;&quot;) { objPlacerContactPhoneNumber.phoneNumber= seg[&apos;SCH.13&apos;][&apos;SCH.13.7&apos;].toString(); }

					objSCH.placerContactPhoneNumber= objPlacerContactPhoneNumber;
				}
				
				// SCH.14, placer contact address
				if(typeof(seg[&apos;SCH.14&apos;]) !== &apos;undefined&apos;) {
					var objPlacerContactAddress= new Object();
					if (seg[&apos;SCH.14&apos;][&apos;SCH.14.1&apos;].toString() != &quot;&quot;) { objPlacerContactAddress.streetAddress= seg[&apos;SCH.14&apos;][&apos;SCH.14.1&apos;].toString(); }
					if (seg[&apos;SCH.14&apos;][&apos;SCH.14.2&apos;].toString() != &quot;&quot;) { objPlacerContactAddress.otherDesignation= seg[&apos;SCH.14&apos;][&apos;SCH.14.2&apos;].toString(); }
					if (seg[&apos;SCH.14&apos;][&apos;SCH.14.3&apos;].toString() != &quot;&quot;) { objPlacerContactAddress.city= seg[&apos;SCH.14&apos;][&apos;SCH.14.3&apos;].toString(); }
					if (seg[&apos;SCH.14&apos;][&apos;SCH.14.4&apos;].toString() != &quot;&quot;) { objPlacerContactAddress.state= seg[&apos;SCH.14&apos;][&apos;SCH.14.4&apos;].toString(); }
					if (seg[&apos;SCH.14&apos;][&apos;SCH.14.5&apos;].toString() != &quot;&quot;) { objPlacerContactAddress.postalCode= seg[&apos;SCH.14&apos;][&apos;SCH.14.5&apos;].toString(); }
					if (seg[&apos;SCH.14&apos;][&apos;SCH.14.6&apos;].toString() != &quot;&quot;) { objPlacerContactAddress.country= seg[&apos;SCH.14&apos;][&apos;SCH.14.6&apos;].toString(); }
					if (seg[&apos;SCH.14&apos;][&apos;SCH.14.7&apos;].toString() != &quot;&quot;) { objPlacerContactAddress.addressType= seg[&apos;SCH.14&apos;][&apos;SCH.14.7&apos;].toString(); }
				
					objSCH.placerContactAddress= objPlacerContactAddress;
				}
				
				// SCH.15, placer contact location
				if(typeof(seg[&apos;SCH.15&apos;]) !== &apos;undefined&apos;) {
					var objPlacerContactLocation= new Object();
					if (seg[&apos;SCH.15&apos;][&apos;SCH.15.1&apos;].toString() != &quot;&quot;) { objPlacerContactLocation.pointOfCare= seg[&apos;SCH.15&apos;][&apos;SCH.15.1&apos;].toString(); }
					if (seg[&apos;SCH.15&apos;][&apos;SCH.15.2&apos;].toString() != &quot;&quot;) { objPlacerContactLocation.room= seg[&apos;SCH.15&apos;][&apos;SCH.15.2&apos;].toString(); }
					if (seg[&apos;SCH.15&apos;][&apos;SCH.15.3&apos;].toString() != &quot;&quot;) { objPlacerContactLocation.bed= seg[&apos;SCH.15&apos;][&apos;SCH.15.3&apos;].toString(); }
					if (seg[&apos;SCH.15&apos;][&apos;SCH.15.4&apos;].toString() != &quot;&quot;) { objPlacerContactLocation.facility= seg[&apos;SCH.15&apos;][&apos;SCH.15.4&apos;].toString(); }
					if (seg[&apos;SCH.15&apos;][&apos;SCH.15.5&apos;].toString() != &quot;&quot;) { objPlacerContactLocation.locationStatus= seg[&apos;SCH.15&apos;][&apos;SCH.15.5&apos;].toString(); }
				
					objSCH.placerContactLocation= objPlacerContactLocation;
				}
				
				// SCH.16, filler contact person
				if(typeof(seg[&apos;SCH.16&apos;]) !== &apos;undefined&apos;) {
					var objFillerContactPerson= new Object();
					
					if (seg[&apos;SCH.16&apos;][&apos;SCH.16.1&apos;].toString() != &quot;&quot;) { objFillerContactPerson.id= seg[&apos;SCH.16&apos;][&apos;SCH.16.1&apos;].toString(); }
					if (seg[&apos;SCH.16&apos;][&apos;SCH.16.2&apos;].toString() != &quot;&quot;) { objFillerContactPerson.familyName= seg[&apos;SCH.16&apos;][&apos;SCH.16.2&apos;].toString(); }
					if (seg[&apos;SCH.16&apos;][&apos;SCH.16.3&apos;].toString() != &quot;&quot;) { objFillerContactPerson.givenName= seg[&apos;SCH.16&apos;][&apos;SCH.16.3&apos;].toString(); }
					if (seg[&apos;SCH.16&apos;][&apos;SCH.16.4&apos;].toString() != &quot;&quot;) { objFillerContactPerson.middleName= seg[&apos;SCH.16&apos;][&apos;SCH.16.4&apos;].toString(); }
					if (seg[&apos;SCH.16&apos;][&apos;SCH.16.5&apos;].toString() != &quot;&quot;) { objFillerContactPerson.suffix= seg[&apos;SCH.16&apos;][&apos;SCH.16.5&apos;].toString(); }
					if (seg[&apos;SCH.16&apos;][&apos;SCH.16.6&apos;].toString() != &quot;&quot;) { objFillerContactPerson.prefix= seg[&apos;SCH.16&apos;][&apos;SCH.16.6&apos;].toString(); }
					if (seg[&apos;SCH.16&apos;][&apos;SCH.16.7&apos;].toString() != &quot;&quot;) { objFillerContactPerson.degree= seg[&apos;SCH.16&apos;][&apos;SCH.16.7&apos;].toString(); }
					if (seg[&apos;SCH.16&apos;][&apos;SCH.16.8&apos;].toString() != &quot;&quot;) { objFillerContactPerson.sourceTable= seg[&apos;SCH.16&apos;][&apos;SCH.16.8&apos;].toString(); }
					if (seg[&apos;SCH.16&apos;][&apos;SCH.16.9&apos;].toString() != &quot;&quot;) { objFillerContactPerson.assigningAuthority= seg[&apos;SCH.16&apos;][&apos;SCH.16.9&apos;].toString(); }
					
					objSCH.fillerContractPerson= objFillerContactPerson;
				}
				
				// SCH.17, filler contact phone number
				if(typeof(seg[&apos;SCH.17&apos;]) !== &apos;undefined&apos;) {
					var objFillerContactPhoneNumber= new Object();
					if (seg[&apos;SCH.17&apos;][&apos;SCH.17.1&apos;].toString() != &quot;&quot;) { objFillerContactPhoneNumber.telephoneNumber= seg[&apos;SCH.17&apos;][&apos;SCH.17.1&apos;].toString(); }
					if (seg[&apos;SCH.17&apos;][&apos;SCH.17.2&apos;].toString() != &quot;&quot;) { objFillerContactPhoneNumber.useCode= seg[&apos;SCH.17&apos;][&apos;SCH.17.2&apos;].toString(); }
					if (seg[&apos;SCH.17&apos;][&apos;SCH.17.3&apos;].toString() != &quot;&quot;) { objFillerContactPhoneNumber.equipmentType= seg[&apos;SCH.17&apos;][&apos;SCH.17.3&apos;].toString(); }
					if (seg[&apos;SCH.17&apos;][&apos;SCH.17.4&apos;].toString() != &quot;&quot;) { objFillerContactPhoneNumber.emailAddress= seg[&apos;SCH.17&apos;][&apos;SCH.17.4&apos;].toString(); }
					if (seg[&apos;SCH.17&apos;][&apos;SCH.17.5&apos;].toString() != &quot;&quot;) { objFillerContactPhoneNumber.countryCode= seg[&apos;SCH.17&apos;][&apos;SCH.17.5&apos;].toString(); }
					if (seg[&apos;SCH.17&apos;][&apos;SCH.17.6&apos;].toString() != &quot;&quot;) { objFillerContactPhoneNumber.areaCode= seg[&apos;SCH.17&apos;][&apos;SCH.17.6&apos;].toString(); }
					if (seg[&apos;SCH.17&apos;][&apos;SCH.17.6&apos;].toString() != &quot;&quot;) { objFillerContactPhoneNumber.phoneNumber= seg[&apos;SCH.17&apos;][&apos;SCH.17.7&apos;].toString(); }

					objSCH.fillerContactPhoneNumber= objFillerContactPhoneNumber;
				}
				
				// SCH.18, placer contact address
				if(typeof(seg[&apos;SCH.18&apos;]) !== &apos;undefined&apos;) {
					var objFillerContactAddress= new Object();
					if (seg[&apos;SCH.18&apos;][&apos;SCH.18.1&apos;].toString() != &quot;&quot;) { objFillerContactAddress.streetAddress= seg[&apos;SCH.18&apos;][&apos;SCH.18.1&apos;].toString(); }
					if (seg[&apos;SCH.18&apos;][&apos;SCH.18.2&apos;].toString() != &quot;&quot;) { objFillerContactAddress.otherDesignation= seg[&apos;SCH.18&apos;][&apos;SCH.18.2&apos;].toString(); }
					if (seg[&apos;SCH.18&apos;][&apos;SCH.18.3&apos;].toString() != &quot;&quot;) { objFillerContactAddress.city= seg[&apos;SCH.18&apos;][&apos;SCH.18.3&apos;].toString(); }
					if (seg[&apos;SCH.18&apos;][&apos;SCH.18.4&apos;].toString() != &quot;&quot;) { objFillerContactAddress.state= seg[&apos;SCH.18&apos;][&apos;SCH.18.4&apos;].toString(); }
					if (seg[&apos;SCH.18&apos;][&apos;SCH.18.5&apos;].toString() != &quot;&quot;) { objFillerContactAddress.postalCode= seg[&apos;SCH.18&apos;][&apos;SCH.18.5&apos;].toString(); }
					if (seg[&apos;SCH.18&apos;][&apos;SCH.18.6&apos;].toString() != &quot;&quot;) { objFillerContactAddress.country= seg[&apos;SCH.18&apos;][&apos;SCH.18.6&apos;].toString(); }
					if (seg[&apos;SCH.18&apos;][&apos;SCH.18.7&apos;].toString() != &quot;&quot;) { objFillerContactAddress.addressType= seg[&apos;SCH.18&apos;][&apos;SCH.18.7&apos;].toString(); }
				
					objSCH.fillerContactAddress= objFillerContactAddress;
				}
				
				// SCH.19, placer contact location
				if(typeof(seg[&apos;SCH.19&apos;]) !== &apos;undefined&apos;) {
					var objFillerContactLocation= new Object();
					if (seg[&apos;SCH.19&apos;][&apos;SCH.19.1&apos;].toString() != &quot;&quot;) { objFillerContactLocation.pointOfCare= seg[&apos;SCH.19&apos;][&apos;SCH.19.1&apos;].toString(); }
					if (seg[&apos;SCH.19&apos;][&apos;SCH.19.2&apos;].toString() != &quot;&quot;) { objFillerContactLocation.room= seg[&apos;SCH.19&apos;][&apos;SCH.19.2&apos;].toString(); }
					if (seg[&apos;SCH.19&apos;][&apos;SCH.19.3&apos;].toString() != &quot;&quot;) { objFillerContactLocation.bed= seg[&apos;SCH.19&apos;][&apos;SCH.19.3&apos;].toString(); }
					if (seg[&apos;SCH.19&apos;][&apos;SCH.19.4&apos;].toString() != &quot;&quot;) { objFillerContactLocation.facility= seg[&apos;SCH.19&apos;][&apos;SCH.19.4&apos;].toString(); }
					if (seg[&apos;SCH.19&apos;][&apos;SCH.19.5&apos;].toString() != &quot;&quot;) { objFillerContactLocation.locationStatus= seg[&apos;SCH.19&apos;][&apos;SCH.19.5&apos;].toString(); }
				
					objSCH.placerContactLocation= objFillerContactLocation;
				}
				
				// SCH.20, entered by person
				if(typeof(seg[&apos;SCH.20&apos;]) !== &apos;undefined&apos;) {
					var objEnteredByPerson= new Object();
					
					if (seg[&apos;SCH.20&apos;][&apos;SCH.20.1&apos;].toString() != &quot;&quot;) { objEnteredByPerson.id= seg[&apos;SCH.20&apos;][&apos;SCH.20.1&apos;].toString(); }
					if (seg[&apos;SCH.20&apos;][&apos;SCH.20.2&apos;].toString() != &quot;&quot;) { objEnteredByPerson.familyName= seg[&apos;SCH.20&apos;][&apos;SCH.20.2&apos;].toString(); }
					if (seg[&apos;SCH.20&apos;][&apos;SCH.20.3&apos;].toString() != &quot;&quot;) { objEnteredByPerson.givenName= seg[&apos;SCH.20&apos;][&apos;SCH.20.3&apos;].toString(); }
					if (seg[&apos;SCH.20&apos;][&apos;SCH.20.4&apos;].toString() != &quot;&quot;) { objEnteredByPerson.middleName= seg[&apos;SCH.20&apos;][&apos;SCH.20.4&apos;].toString(); }
					if (seg[&apos;SCH.20&apos;][&apos;SCH.20.5&apos;].toString() != &quot;&quot;) { objEnteredByPerson.suffix= seg[&apos;SCH.20&apos;][&apos;SCH.20.5&apos;].toString(); }
					if (seg[&apos;SCH.20&apos;][&apos;SCH.20.6&apos;].toString() != &quot;&quot;) { objEnteredByPerson.prefix= seg[&apos;SCH.20&apos;][&apos;SCH.20.6&apos;].toString(); }
					if (seg[&apos;SCH.20&apos;][&apos;SCH.20.7&apos;].toString() != &quot;&quot;) { objEnteredByPerson.degree= seg[&apos;SCH.20&apos;][&apos;SCH.20.7&apos;].toString(); }
					if (seg[&apos;SCH.20&apos;][&apos;SCH.20.8&apos;].toString() != &quot;&quot;) { objEnteredByPerson.sourceTable= seg[&apos;SCH.20&apos;][&apos;SCH.20.8&apos;].toString(); }
					if (seg[&apos;SCH.20&apos;][&apos;SCH.20.9&apos;].toString() != &quot;&quot;) { objEnteredByPerson.assigningAuthority= seg[&apos;SCH.20&apos;][&apos;SCH.20.9&apos;].toString(); }
					
					objSCH.fillerContractPerson= objEnteredByPerson;
				}

				// SCH.21, entered by phone number
				if(typeof(seg[&apos;SCH.21&apos;]) !== &apos;undefined&apos;) {
					var objEnteredByPhoneNumber= new Object();
					if (seg[&apos;SCH.21&apos;][&apos;SCH.21.1&apos;].toString() != &quot;&quot;) { objEnteredByPhoneNumber.telephoneNumber= seg[&apos;SCH.21&apos;][&apos;SCH.21.1&apos;].toString(); }
					if (seg[&apos;SCH.21&apos;][&apos;SCH.21.2&apos;].toString() != &quot;&quot;) { objEnteredByPhoneNumber.useCode= seg[&apos;SCH.21&apos;][&apos;SCH.21.2&apos;].toString(); }
					if (seg[&apos;SCH.21&apos;][&apos;SCH.21.3&apos;].toString() != &quot;&quot;) { objEnteredByPhoneNumber.equipmentType= seg[&apos;SCH.21&apos;][&apos;SCH.21.3&apos;].toString(); }
					if (seg[&apos;SCH.21&apos;][&apos;SCH.21.4&apos;].toString() != &quot;&quot;) { objEnteredByPhoneNumber.emailAddress= seg[&apos;SCH.21&apos;][&apos;SCH.21.4&apos;].toString(); }
					if (seg[&apos;SCH.21&apos;][&apos;SCH.21.5&apos;].toString() != &quot;&quot;) { objEnteredByPhoneNumber.countryCode= seg[&apos;SCH.21&apos;][&apos;SCH.21.5&apos;].toString(); }
					if (seg[&apos;SCH.21&apos;][&apos;SCH.21.6&apos;].toString() != &quot;&quot;) { objEnteredByPhoneNumber.areaCode= seg[&apos;SCH.21&apos;][&apos;SCH.21.6&apos;].toString(); }
					if (seg[&apos;SCH.21&apos;][&apos;SCH.21.6&apos;].toString() != &quot;&quot;) { objEnteredByPhoneNumber.phoneNumber= seg[&apos;SCH.21&apos;][&apos;SCH.21.7&apos;].toString(); }

					objSCH.enteredByPhoneNumber= objEnteredByPhoneNumber;
				}
				
				// SCH.22, entered by location
				if(typeof(seg[&apos;SCH.22&apos;]) !== &apos;undefined&apos;) {
					var objEnteredByLocation= new Object();
					if (seg[&apos;SCH.22&apos;][&apos;SCH.22.1&apos;].toString() != &quot;&quot;) { objEnteredByLocation.streetAddress= seg[&apos;SCH.22&apos;][&apos;SCH.22.1&apos;].toString(); }
					if (seg[&apos;SCH.22&apos;][&apos;SCH.22.2&apos;].toString() != &quot;&quot;) { objEnteredByLocation.otherDesignation= seg[&apos;SCH.22&apos;][&apos;SCH.22.2&apos;].toString(); }
					if (seg[&apos;SCH.22&apos;][&apos;SCH.22.3&apos;].toString() != &quot;&quot;) { objEnteredByLocation.city= seg[&apos;SCH.22&apos;][&apos;SCH.22.3&apos;].toString(); }
					if (seg[&apos;SCH.22&apos;][&apos;SCH.22.4&apos;].toString() != &quot;&quot;) { objEnteredByLocation.state= seg[&apos;SCH.22&apos;][&apos;SCH.22.4&apos;].toString(); }
					if (seg[&apos;SCH.22&apos;][&apos;SCH.22.5&apos;].toString() != &quot;&quot;) { objEnteredByLocation.postalCode= seg[&apos;SCH.22&apos;][&apos;SCH.22.5&apos;].toString(); }
					if (seg[&apos;SCH.22&apos;][&apos;SCH.22.6&apos;].toString() != &quot;&quot;) { objEnteredByLocation.country= seg[&apos;SCH.22&apos;][&apos;SCH.22.6&apos;].toString(); }
					if (seg[&apos;SCH.22&apos;][&apos;SCH.22.7&apos;].toString() != &quot;&quot;) { objEnteredByLocation.addressType= seg[&apos;SCH.22&apos;][&apos;SCH.22.7&apos;].toString(); }
				
					objSCH.placerContactAddress= objEnteredByLocation;
				}
				
				// SCH.23, parent placer appointment id
				if(typeof(seg[&apos;SCH.23&apos;]) !== &apos;undefined&apos;) {
					var objParentPlacerAppointmentId= new Object();
					if (seg[&apos;SCH.23&apos;][&apos;SCH.23.1&apos;].toString() != &quot;&quot;) { objParentPlacerAppointmentId.id= seg[&apos;SCH.23&apos;][&apos;SCH.23.1&apos;].toString(); }
					if (seg[&apos;SCH.23&apos;][&apos;SCH.23.2&apos;].toString() != &quot;&quot;) { objParentPlacerAppointmentId.namespaceId= seg[&apos;SCH.23&apos;][&apos;SCH.23.2&apos;].toString(); }
					if (seg[&apos;SCH.23&apos;][&apos;SCH.23.3&apos;].toString() != &quot;&quot;) { objParentPlacerAppointmentId.universalId= seg[&apos;SCH.23&apos;][&apos;SCH.23.3&apos;].toString(); }
					if (seg[&apos;SCH.23&apos;][&apos;SCH.23.4&apos;].toString() != &quot;&quot;) { objParentPlacerAppointmentId.universalIdType= seg[&apos;SCH.23&apos;][&apos;SCH.23.4&apos;].toString(); }
					
					objSCH.parentPlacerAppointmentId= objParentPlacerAppointmentId;
				}
				
				// SCH.24, parent filler appointment id
				if(typeof(seg[&apos;SCH.24&apos;]) !== &apos;undefined&apos;) {
					var objParentFillerAppointmentId= new Object();
					if (seg[&apos;SCH.24&apos;][&apos;SCH.24.1&apos;].toString() != &quot;&quot;) { objParentFillerAppointmentId.id= seg[&apos;SCH.24&apos;][&apos;SCH.24.1&apos;].toString(); }
					if (seg[&apos;SCH.24&apos;][&apos;SCH.24.2&apos;].toString() != &quot;&quot;) { objParentFillerAppointmentId.namespaceId= seg[&apos;SCH.24&apos;][&apos;SCH.24.2&apos;].toString(); }
					if (seg[&apos;SCH.24&apos;][&apos;SCH.24.3&apos;].toString() != &quot;&quot;) { objParentFillerAppointmentId.universalId= seg[&apos;SCH.24&apos;][&apos;SCH.24.3&apos;].toString(); }
					if (seg[&apos;SCH.24&apos;][&apos;SCH.24.4&apos;].toString() != &quot;&quot;) { objParentFillerAppointmentId.universalIdType= seg[&apos;SCH.24&apos;][&apos;SCH.24.4&apos;].toString(); }
					
					objSCH.parentFillerAppointmentId= objParentFillerAppointmentId;
				}
				
				// SCH.25, filler status code
				if(typeof(seg[&apos;SCH.25&apos;]) !== &apos;undefined&apos;) {
					var objFillerStatusCode= new Object();
					if (seg[&apos;SCH.25&apos;][&apos;SCH.25.1&apos;].toString() != &quot;&quot;) { objFillerStatusCode.id= seg[&apos;SCH.25&apos;][&apos;SCH.25.1&apos;].toString(); }
					if (seg[&apos;SCH.25&apos;][&apos;SCH.25.2&apos;].toString() != &quot;&quot;) { objFillerStatusCode.text= seg[&apos;SCH.25&apos;][&apos;SCH.25.2&apos;].toString(); }
					if (seg[&apos;SCH.25&apos;][&apos;SCH.25.3&apos;].toString() != &quot;&quot;) { objFillerStatusCode.codeSystem= seg[&apos;SCH.25&apos;][&apos;SCH.25.3&apos;].toString(); }
					if (seg[&apos;SCH.25&apos;][&apos;SCH.25.4&apos;].toString() != &quot;&quot;) { objFillerStatusCode.alternateId= seg[&apos;SCH.25&apos;][&apos;SCH.25.4&apos;].toString(); }
					if (seg[&apos;SCH.25&apos;][&apos;SCH.25.5&apos;].toString() != &quot;&quot;) { objFillerStatusCode.alternateText= seg[&apos;SCH.25&apos;][&apos;SCH.25.5&apos;].toString(); }
					if (seg[&apos;SCH.25&apos;][&apos;SCH.25.6&apos;].toString() != &quot;&quot;) { objFillerStatusCode.altCodeSystem= seg[&apos;SCH.25&apos;][&apos;SCH.25.6&apos;].toString(); }

					objSCH.fillerStatusCode= objFillerStatusCode;
				}
				
				/*
				// clean up SCH and increment index
				if (Object.keys(objSCH[index]).length == 0) {
					delete objSCH[index];
				} else {
					index++;
				}
				*/
				
			}
		}
		
		return objSCH;
	}
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>ee8d4c72-de8a-4e42-8de4-e56376c99c69</id>
    <name>HL7v3</name>
    <revision>4</revision>
    <lastModified>
      <time>1690140133399</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description>HL7v3 Library</description>
    <includeNewChannels>false</includeNewChannels>
    <enabledChannelIds>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
      <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
      <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
      <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>46863fa1-cc19-42b4-b713-5048a69d7fe1</id>
        <name>getHL7v3AdministrativeGender</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911325383</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** getHL7v3AdministrativeGender(code)

  	- Desc: This function receives a code system code (string) and returns adminGender array contains both the code and displayName

   	@param {String} code - this contains a code system code (string)
	@return {array} adminGender - this array contains the Gender and DisplayName (key,value) pair in the adminGender array.
*/

function getHL7v3AdministrativeGender(code) {

	// define local variables
	var adminGender= {};
	adminGender.codeSystem= &quot;2.16.840.1.133883.5.1&quot;
	adminGender.codeSystemName= &quot;HL7 AdministrativeGender&quot;;

	if(&quot;M&quot; == code) {
		adminGender.code= &quot;M&quot;;
		adminGender.displayName= &quot;Male&quot;;
	} else if (&quot;F&quot; == code) {
		adminGender.code= &quot;F&quot;;
		adminGender.displayName= &quot;Female&quot;;
	} else {
		adminGender.code= &quot;UN&quot;;
		adminGender.displayName= &quot;Undifferentiated&quot;;
	}

	return adminGender;

}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>e48db441-8556-4a03-a3e2-d018a8f9f608</id>
        <name>getHL7v3Confidentiality</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911325172</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** getHL7v3Confidentiality(code)

  	- Desc: This function receives a code system code (string) and returns confidentiality array contains both the code and displayName

   	@param {String} code - this contains a code system code (string)
	@return {array} confidentiality - this array contains the Confidentiality Code and DisplayName (key,value) pair in the confidentialityCode array.
*/

function getHL7v3Confidentiality(code) {

	// define local variables
	var confidentiality= {};
	confidentiality.codeSystem= &quot;2.16.840.1.113883.5.25&quot;
	confidentiality.codeSystemName= &quot;HL7 Confidentiality&quot;;

	if(&quot;N&quot; == code) {
		confidentiality.code= &quot;N&quot;;
		confidentiality.displayName= &quot;Normal&quot;;
	} else if (&quot;R&quot; == code) {
		confidentiality.code= &quot;R&quot;;
		confidentiality.displayName= &quot;Restricted&quot;;
	} else {
		confidentiality.code= &quot;V&quot;;
		confidentiality.displayName= &quot;Very Restricted&quot;;
	}

	return confidentiality;

}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>759504b7-8f74-4a3a-bd4a-1a6ff876f59a</id>
        <name>getMCCI_IN000002()</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911325420</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	getMCCI_IN000002() Desc:  Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getMCCI_IN000002() { 
	var mcci = &apos;&lt;MCCI_IN000002UV01 ITSVersion=&quot;XML_1.0&quot;&gt;&apos; + 
		&apos;&lt;id root=&quot;2.16.840.1.113883.1.3&quot; extension=&quot;&quot;/&gt;&apos; + 
		&apos;&lt;creationTime value=&quot;&quot;/&gt;&apos; + 
		&apos;&lt;versionCode controlInformationRoot=&quot;2.16.840.1.113883.11.19373&quot; code=&quot;V3PR1&quot;/&gt;&apos; + 
		&apos;&lt;interactionId root=&quot;2.16.840.1.113883.1.6&quot; extension=&quot;MCCI_IN000002UV01&quot;/&gt;&apos; + 
		&apos;&lt;processingCode code=&quot;D&quot;/&gt;&apos; + 
		&apos;&lt;processingModeCode code=&quot;T&quot;/&gt;&apos; +
		&apos;&lt;acceptAckCode code=&quot;NE&quot;/&gt;&apos; + 
		&apos;&lt;receiver typeCode=&quot;RCV&quot;&gt;&apos; + 
			&apos;&lt;device classCode=&quot;DEV&quot; determinerCode=&quot;INSTANCE&quot;&gt;&apos; + 
				&apos;&lt;id controlInformationRoot=&quot;2.16.840.1.113883.3.40.5.1&quot; controlInformationExtension=&quot;Organization&quot;/&gt;&apos; + 
				&apos;&lt;asAgent classCode=&quot;AGNT&quot;&gt;&apos; + 
					&apos;&lt;representedOrganization classCode=&quot;ORG&quot; determinerCode=&quot;INSTANCE&quot;&gt;&apos; + 
						&apos;&lt;id controlInformationRoot=&quot;2.16.840.1.113883.3.51.200&quot; controlInformationExtension=&quot;&quot;/&gt;&apos; + 
					&apos;&lt;/representedOrganization&gt;&apos; + 
				&apos;&lt;/asAgent&gt;&apos; + 
			&apos;&lt;/device&gt;&apos; + 
		&apos;&lt;/receiver&gt;&apos; + 
		&apos;&lt;sender typeCode=&quot;SND&quot;&gt;&apos; + 
			&apos;&lt;device classCode=&quot;DEV&quot; determinerCode=&quot;INSTANCE&quot;&gt;&apos; + 
				&apos;&lt;id controlInformationRoot=&quot;2.16.840.1.113883.3.40.5.2&quot; controlInformationExtension=&quot;Organization&quot;/&gt;&apos; + 
				&apos;&lt;asAgent classCode=&quot;AGNT&quot;&gt;&apos; + 
					&apos;&lt;representedOrganization classCode=&quot;ORG&quot; determinerCode=&quot;INSTANCE&quot;&gt;&apos; + 
						&apos;&lt;id controlInformationRoot=&quot;2.16.840.1.113883.3.51.200&quot; controlInformationExtension=&quot;&quot;/&gt;&apos; + 
					&apos;&lt;/representedOrganization&gt;&apos; + 
				&apos;&lt;/asAgent&gt;&apos; + 
			&apos;&lt;/device&gt;&apos; + 
		&apos;&lt;/sender&gt;&apos; + 
		&apos;&lt;acknowledgement typeCode=&quot;AE&quot;&gt;&apos; + 
			&apos;&lt;targetMessage&gt;&apos; + 
				&apos;&lt;id root=&quot;2.16.840.1.113883.1.3&quot; extension=&quot;&quot;/&gt;&apos; + 
			&apos;&lt;/targetMessage&gt;&apos; + 
			&apos;&lt;acknowledgementDetail&gt;&apos; + 
				&apos;&lt;code code=&quot;&quot;/&gt;&apos; + 
				&apos;&lt;text value=&quot;&quot;/&gt;&apos; + 
			&apos;&lt;/acknowledgementDetail&gt;&apos; + 
		&apos;&lt;/acknowledgement&gt;&apos; + 
	&apos;&lt;/MCCI_IN000002UV01&gt;&apos;; 
		
	return mcci;
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>d316c4bc-9e10-4162-b67c-e514afc59fa3</id>
    <name>HealthArc Channel Helpers</name>
    <revision>4</revision>
    <lastModified>
      <time>1706147053839</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description>HealthArc.io Channel Helper Functions</description>
    <includeNewChannels>false</includeNewChannels>
    <enabledChannelIds>
      <string>895ee0ef-745c-464d-a46c-e51331a01c3f</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>272250ac-d998-41dc-b01d-7721808b3ec6</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
      <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
      <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
      <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
      <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>a1039c2d-a891-43ac-86d8-12ad673542a4</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>bc768cd6-d735-40b1-9617-a3417481fe19</id>
        <name>Convert CSV to JSON</name>
        <revision>1</revision>
        <lastModified>
          <time>1706120884963</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} csv - CSV string with column headers
	@return {String} return JSON object using column headers and field keys
*/
function convertCsvToJson(csv) {
	var textXML = SerializerFactory.getSerializer(&apos;DELIMITED&apos;).toXML(csv);
	var xml = new XML(textXML);
	var dataItems = [];
	for (var i = 1; i &lt;= xml[&apos;row&apos;].length() - 1; i++) {
		var jsonData = {};
		for (var j = 1; j &lt;= xml[&apos;row&apos;][0].children().length(); j++) {
			var column = &apos;column&apos; + j.toString();
			var header = xml[&apos;row&apos;][0][column].toString().replace(/\s/g, &apos;_&apos;).replace(/-/g, &apos;_&apos;).toLowerCase();
			var value = xml[&apos;row&apos;][i][column].toString();
			
			jsonData[header] = value;
			
		}
		dataItems.push(jsonData);
	}

	return JSON.stringify(dataItems);
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>537d816c-81ff-4507-85c6-85e28b8c546c</id>
        <name>Convert JSON to CSV</name>
        <revision>1</revision>
        <lastModified>
          <time>1706120885050</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Converts JSON to CSV.
**/
/*	@param {String} jsonData - JSON string with [0] index key as headers for csv
	@return {String} return csv
*/	

function convertJsonToCsv(data) {
	try{
		var json = JSON.parse(data);	
		var fields = Object.keys(json[0])
		var replacer = function(key, value) { return value === null ? &apos;&apos; : value } 
		var csv = json.map(function(row){
		  return fields.map(function(fieldName){
		    return JSON.stringify(row[fieldName], replacer)
		  }).join(&apos;,&apos;)
		})
		csv.unshift(fields.join(&apos;,&apos;)) // add header column
		csv = csv.join(&apos;\r\n&apos;);
		return csv;
	}catch(error){
		return error;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>ff3df0b8-cfa2-4ec9-82ac-37c9e4830e0c</id>
        <name>Generic - Send message to channel destination</name>
        <revision>1</revision>
        <lastModified>
          <time>1706120885155</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function sendMessageToChannelDestination(channelID, destinationID, map, data) {
	var msgMap;
	var outData = {};
	
	if (!map) {
		msgMap = Maps.map();
	} else {
		msgMap = Maps.map(map);
	}

	if (data == null || data == undefined) {
		data = &apos;&apos;;
	}

	if (msgMap.get(&apos;sourceChannelId&apos;) == null) {
		msgMap.add(&apos;sourceChannelId&apos;, channelId);
	}
	if (msgMap.get(&apos;sourceChannelName&apos;) == null) {
		msgMap.add(&apos;sourceChannelName&apos;, channelName);
	}

	// Dirty way to handle connector message not being defined. Handles cases where this function 
	// is used in a source js writer.
	try {
		if (msgMap.get(&apos;sourceMessageId&apos;) == null &amp;&amp; connectorMessage &amp;&amp; connectorMessage.getMessageId()) {
			msgMap.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString());
		}
	} catch(ex) {}

	var msgRequest = new RawMessage(data, [destinationID], msgMap);
	var msgResponse = router.routeMessageByChannelId(channelID, msgRequest);

	if (msgResponse == null) {
		// return;
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;; 
	}
	if (msgResponse.getStatus() == null) {
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;;
	}

	if (msgResponse.getStatus() == &apos;ERROR&apos;) {
		throw msgResponse.getMessage();
	}

	return msgResponse.getMessage();
	
	
	// var msgResponse;

	/*
	try {
		msgResponse = router.routeMessageByChannelId(channelID, msgRequest);
		outData.status = &apos;success&apos;;
		outData.status_message = &apos;message successfully sent to channel&apos;;
	} catch (ex) {
		outData.status = &apos;error&apos;;
		outData.status_message = ex.toString();
		return outData;
	}

	if (msgResponse.getStatus() == null) {
		outData.response_status = &apos;unknown&apos;;
		logger.error(&apos;Code Template &quot;Send message to channel by id&quot;: channel &quot;&apos; + ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;);
	}
	
	switch (String(msgResponse.getStatus())) {
		case &apos;ERROR&apos;:
			outData.response_status = &apos;error&apos;;
			break;
		case &apos;FILTERED&apos;:
			outData.response_status = &apos;filtered&apos;;
			break;
		case &apos;QUEUED&apos;:
			outData.response_status = &apos;queued&apos;;
			break;
		case &apos;RECEIVED&apos;:
			outData.response_status = &apos;received&apos;;
			break;
		case &apos;SENT&apos;:
			outData.response_status = &apos;sent&apos;;
			break;
	}

	outData.response_message = msgResponse.getMessage();

	return outData;
	*/
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>f4cd9e71-4f8d-4472-80a9-31b533f4d578</id>
        <name>Get bots DB connection to specified environment</name>
        <revision>1</revision>
        <lastModified>
          <time>1706120884906</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Get a new bots database connection. Be sure to wrap in try/finally block to close database connection.

	@param {String} environment - prod, staging, dev, local
	@return {String} return database connection
*/
function GetBotsDBConnection() {
	var username = configurationMap.get(&apos;bots-db-user&apos;);
	var password = configurationMap.get(&apos;bots-db-pass&apos;);
	var uri = configurationMap.get(&apos;bots-db-uri&apos;);	
	return DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, uri, username, password);
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>554bd282-172b-43a0-8902-992baf63b04d</id>
        <name>Get DB connection to specified environment</name>
        <revision>1</revision>
        <lastModified>
          <time>1706120885107</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Get a new database connection. 

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetDBConnection(environment) {
	if (environment != &apos;prod&apos; &amp;&amp; environment != &apos;staging&apos; &amp;&amp; environment != &apos;dev&apos; &amp;&amp; environment != &apos;local&apos;) {
		return null;
	}
	
	var username = configurationMap.get(&apos;docsink-db-user-&apos; + environment);
	var password = configurationMap.get(&apos;docsink-db-pass-&apos; + environment);
	var uri = configurationMap.get(&apos;docsink-db-uri-&apos; + environment);

	return DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.cj.jdbc.Driver&apos;, uri, username, password);
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>552a87ed-b5a0-4546-9e5c-0a768661a351</id>
        <name>Postprocessor - Generate channel response</name>
        <revision>1</revision>
        <lastModified>
          <time>1706120884842</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function generateChannelResponse() {
	// This script executes once after a message has been processed
	// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
	
	var destinations = sourceMap.get(&apos;destinationSet&apos;);
	var metadataIds = destinations.toArray();
	
	if (metadataIds.length == 0) {
		return ResponseFactory.getErrorResponse(&apos;invalid request&apos;);
	}
	
	var smsg = message.getConnectorMessages().get(0);
	if (smsg.getStatus() == &apos;ERROR&apos;) {
		if (smsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(smsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(smsg.getResponseData().getMessage());
	}
	
	var metadataID = metadataIds[0];
	var cmsg = message.getConnectorMessages().get(metadataID);

	if (cmsg.getStatus() == &apos;ERROR&apos;) {
		if (cmsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(cmsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;SENT&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;FILTERED&apos;) {
		return ResponseFactory.getFilteredResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;QUEUED&apos;) {
		return ResponseFactory.getQueuedResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;RECEIVED&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else {
		return cmsg;
	}
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>3f7c2c35-276b-4889-8aa8-f2b1143a2ceb</id>
    <name>JSON</name>
    <revision>2</revision>
    <lastModified>
      <time>1687560581483</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description></description>
    <includeNewChannels>false</includeNewChannels>
    <enabledChannelIds>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>14b7de16-de3e-4994-b123-b4d0d3d712aa</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
      <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
      <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
      <string>076d39da-7152-40db-91a1-1746167239e9</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>aba0dfc1-85df-4c06-a201-f73b1a4d3afb</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5adcf0e4-782c-4e9d-a105-f67795fe6644</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>a85524dd-c14f-4560-ac37-a20b5595d594</id>
        <name>updateJsonString</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911273804</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	updateJsonString - input current string with new string to produce an updated JSON string
	
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateJsonString(currentString, newString) {

	var scriptName= &apos;updateJsonString&apos;;
	var debug= 1;
	if(debug&gt;0) { 
		logger.info(scriptName+&quot;::DEBUG currentString: &quot;+currentString+&quot; typeof.currentString: &quot;+typeof(currentString)); 
		logger.info(scriptName+&quot;::DEBUG newString: &quot;+newString+&quot; typeof.newString: &quot;+typeof(newString));
	}
	
	var json_obj = JSON.parse(currentString); 
	var new_json_obj= JSON.parse(newString);
	if(debug&gt;0) { 
		logger.info(scriptName+&quot;::DEBUG JSON.parse currentString object: &quot;+JSON.stringify(json_obj)+&quot; typeof.currentString: &quot;+typeof(json_obj)); 
		logger.info(scriptName+&quot;::DEBUG JSON.parse newString object: &quot;+JSON.stringify(new_json_obj)+&quot; typeof.newString: &quot;+typeof(new_json_obj));
	}	
	// json_obj[newKey] = newValue;
	// if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG original_json_obj: &quot;+JSON.stringify(original_json_obj)+&quot; newObj: &quot;+JSON.stringify(json_obj)); }
    	var key= Object.keys(new_json_obj);
    	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG typeof(key): &quot;+typeof(key)+&quot; [string]key: &quot;+JSON.stringify(key.toString())); }
	var value= new_json_obj[key];
    	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG typeof(value): &quot;+typeof(value)+&quot; [string]value: &quot;+JSON.stringify(value)); }

	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG typeof(new_json_obj): &quot;+typeof(new_json_obj)+&quot; [string]new_json_obj: &quot;+JSON.stringify(new_json_obj)); }
	return JSON.stringify(new_json_obj);
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>4e0d8d75-22c1-41bd-91f7-947bd0d16a49</id>
    <name>JSON to HL7</name>
    <revision>3</revision>
    <lastModified>
      <time>1690140133417</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description></description>
    <includeNewChannels>false</includeNewChannels>
    <enabledChannelIds>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
      <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
      <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
      <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>1f032820-431b-47ba-8364-ecb99d33ac64</id>
        <name>jsonToHL7_MSH</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911262802</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	jsonToHL7_MSH(msg)
	
	- Desc: This function retrieves HL7v2 HAPI format elements and values from MSH segment stored in
	object for reference

	@param {String} msg - this contains the raw message (string)
	@return {object} xmlMSH - this contains the MSH segment elements composed into a single xmlMSH object.
*/
function jsonToHL7_MSH(msg) {

	var scriptName= &apos;jsonToHL7_MSH&apos;;
	var debug= 1;
	// var jsonObject = JSON.parse(JSON.stringify(msg));
	var jsonObject = JSON.parse(connectorMessage.getRawData());

	logger.info(scriptName+&quot;::DEBUG1:msg: &quot;+JSON.stringify(msg));
	logger.info(scriptName+&quot;::DEBUG2:jsonObject: &quot;+jsonObject);
	logger.info(scriptName+&quot;::DEBUG:jsonObject.Meta: &quot;+jsonObject[&apos;Meta&apos;]);

	var patienId = input.PATIENT_ID;
	var patientName = input.PATIENT_NAME;
	var idCard = input.ID_NO;
	msg=tmp;
	createSegment(&apos;MSH&apos;, msg);
	msg[&apos;MSH&apos;][&apos;MSH.1&apos;]= &quot;|&quot;;
	msg[&apos;MSH&apos;][&apos;MSH.2&apos;]= &quot;^~\\&amp;&quot;;
	msg[&apos;MSH&apos;][&apos;MSH.3&apos;]= patienId;
	msg[&apos;MSH&apos;][&apos;MSH.4&apos;]= patientName;
	msg[&apos;MSH&apos;][&apos;MSH.5&apos;]= idCard;
	
	/*
	for each (element in msg[&apos;&quot;Meta&quot;&apos;]) {
		for (var key in element) {
			logger.info(scriptName+&quot;::DEBUG:key: &quot;+key);
		}
	}
	*/
	for each (element in msg[&apos;Meta&apos;]) {
		// here for..in is appropriate since this is not an array
		for (var key in element) {
			logger.info(scriptName+&quot;::DEBUG3:key= &quot;+key);
		}
	};

	var encountersObject = [];

	/*
	for each (var obx in msg.OBX) {
		obxJson.push({
			value1: &apos;Canned Comment&apos;,
        		value2: obx[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString(),
        		value3: obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString()
		});
	}

	//Loop through all PV1 Seigments
	for (i=0; i &lt; msg[&apos;MSH&apos;].length(); i++) {
		//Build Allergies Sub Object
		encountersSubObject = {code:{}};

		//Encounters.Code Begin
		encountersSubObject.code.code = msg[&apos;PV1&apos;][i][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString();
		encountersSubObject.code.originalText = msg[&apos;PV1&apos;][i][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString();
		encountersSubObject.code.displayName = msg[&apos;PV1&apos;][i][&apos;PV1.2&apos;][&apos;PV1.2.2&apos;].toString();
	}

	if (debug&gt;0) { 
		logger.error(scriptName+&apos;::DEBUG msg: &apos;+JSON.stringify(msg)); 
		logger.error(scriptName+&apos;::DEBUG msg.jsonObject: &apos;+jsonObject); 
	}

	var jsonObject = JSON.parse(msg);

	for each (element in jsonObject) {
		logger.error(scriptName+&apos;::DEBUG msg.element: &apos;+element);
	}
	
	// define variables
	if (typeof(msg[&apos;Meta&apos;].toString()) !== undefined) {

		// MSH
		var tmp= new XML();

		// MSH Segment
		tmp[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;]= msg[&apos;Meta&apos;][&apos;Order&apos;][&apos;OrderingFacility&apos;].toString();
		tmp[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;]= msg[&apos;Meta&apos;][&apos;Source&apos;][&apos;Name&apos;].toString();
		tmp[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;]= msg[&apos;Meta&apos;][&apos;Source&apos;][&apos;ID&apos;].toString();
		tmp[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;]= msg[&apos;Meta&apos;][&apos;Source&apos;][&apos;Name&apos;].toString();
		tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;]= msg[&apos;Meta&apos;][&apos;EventDateTime&apos;].toString();

		if(msg[&apos;Meta&apos;][&apos;DataModel&apos;].toString().indexOf(&quot;^&quot;)) {
			var lstMessageType= msg[&apos;Meta&apos;][&apos;DataModel&apos;].toString().split(&quot;^&quot;);
			tmp[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;]= lstMessageType[0];
			tmp[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;]= lstMessageType[1];
		} else {
			tmp[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;]= &quot;ORU&quot;;
			tmp[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;]= msg[&apos;Meta&apos;][&apos;DataModel&apos;].toString();
		}
		tmp[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]= UUIDGenerator.getUUID().toString();
		tmp[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;]= msg[&apos;Meta&apos;][&apos;Test&apos;].toString();
		tmp[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;]= &quot;2.3&quot;;

		if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG tmpMSH: &apos;+tmp); }
		return tmp;
	}
	*/
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>7fdec067-f3a0-4963-ae9e-625d3150e9ad</id>
    <name>Misty Templates</name>
    <revision>9</revision>
    <lastModified>
      <time>1667197823924</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description></description>
    <includeNewChannels>false</includeNewChannels>
    <enabledChannelIds>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
      <string>076d39da-7152-40db-91a1-1746167239e9</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>8f065b0b-d803-45d2-a012-4633ec24294a</id>
        <name>convert_array_json_object</name>
        <revision>1</revision>
        <lastModified>
          <time>1666624836785</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	fileName:		convert_array_json_object.js
	name:		Convert Array object to JSON object for HL7 OBX Observations
	authored:		Jeffrey Ritz
	created:		2022-10-19 
	description:	Script used to convert array of Observation values (e.g. OBX-1, OBX-3, OBX-5, etc.) into JSON HL7 object observation
	history:
*/
function convert_array_json_object(arrObservation, strValue) {
	
	var scriptName= &apos;convert_array_json_object&apos;;
	var debug= 0;
	
	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; strValue: &apos;+strValue+&apos; arrObservation: &apos;+JSON.stringify(arrObservation));
	}
	
	var objObservation= new Object();
	
	if((typeof(arrObservation)!== &apos;undefined&apos;)&amp;&amp;(arrObservation.length== 8)) {
	
		objObservation.obx11=	arrObservation[0];
		objObservation.obx31= 	arrObservation[1];
		objObservation.obx32= 	arrObservation[2];
		objObservation.obx33= 	arrObservation[3];
		objObservation.obx51= 	arrObservation[4];
		objObservation.obx111= 	arrObservation[5];
		objObservation.obx141= 	arrObservation[7]; 		// date/time of the observation
		objObservation.obx161=	arrObservation[6]; 		// responsible observer		
	} else {
		if(debug&gt;0) { 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; either arrObservation is undefined OR arrObservation.length LT 8 elements&apos;);
		}
	} // end if 
	
	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; strValue: &apos;+strValue+&apos; return objObservation: &apos;+JSON.stringify(objObservation));
	}
	return objObservation;

} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>43e0a98b-7775-4091-8a49-1432a0a44cb7</id>
        <name>convert_csv_hl7_json_header</name>
        <revision>2</revision>
        <lastModified>
          <time>1666618817925</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse msg translate into HL7 JSON object for Header

	scriptName: convert_csv_hl7_json_header.js
	@param {object}  msg - CSV row object 
	@return {object} JSON Object - This returns object as the HL7 JSON object for Message Header HL7 segment
	History:*/
function convert_csv_hl7_json_header(msg) {

	var debug= 0;
	var scriptName= &apos;convert_csv_hl7_json_header&apos;;

	// BUILD  MSHC
	var objMsgHeader= new Object();
	objMsgHeader.sendingApplication=	&apos;ECW&apos;;
	objMsgHeader.sendingFacility= 	&apos;NOMS&apos;;
	objMsgHeader.receivingApplication= &apos;EPIC&apos;;
	objMsgHeader.messageDateTime= 	DateUtil.getCurrentDate(&apos;yyyyMMddHHmmss&apos;).toString();
	objMsgHeader.messageControlId= 	DateUtil.getCurrentDate(&apos;yyyyMMddHHmmss&apos;).toString()+&apos;_&apos;+connectorMessage.getMessageId();
	
	channelMap.put(&apos;msgHeader&apos;,objMsgHeader);
	return objMsgHeader;
} </code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>2e2d2d8e-e50c-49ec-9def-a50c311ea482</id>
        <name>convert_csv_hl7_json_observation_result</name>
        <revision>2</revision>
        <lastModified>
          <time>1666729869268</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse msg translate into HL7 JSON object for Observation Result

	scriptName: convert_csv_hl7_json_observation_result.js
	@param {object}  msg - CSV row object
	@return {object} JSON Object - This returns object as the HL7 JSON object for Observation Result HL7 segment
	History:
	2022-10-25 JER - Modified to include the observationResult.vitalsId from msg[row][vitalsId]
*/
function convert_csv_hl7_json_observation_result(msg) {

	var debug= 0;
	var scriptName= &apos;convert_csv_hl7_json_observation_result&apos;;
	
	// BUILD OBR
	var objObservationResult= new Object();
	objObservationResult.vitalsId= 			msg[&apos;row&apos;][&apos;VitalsID&apos;].toString();
	objObservationResult.observationDateTime= 	msg[&apos;row&apos;][&apos;EncDate&apos;].toString();					// Observation Date/Time
	

	channelMap.put(&apos;msgObservationResult&apos;,objObservationResult);
	return objObservationResult;
} </code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>3319bfdf-6247-4fe9-8349-d3e49f75c59c</id>
        <name>convert_csv_hl7_json_patient</name>
        <revision>1</revision>
        <lastModified>
          <time>1666618817980</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse msg translate into HL7 JSON object for Patients

	scriptName: convert_csv_hl7_json_patient.js
	@param {object}  msg - CSV row object 
	@return {object} JSON Object - This returns object as the HL7 JSON object for Patients HL7 segment
	History:
*/
function convert_csv_hl7_json_patient(msg) {

	var debug= 0;
	var scriptName= &apos;convert_csv_hl7_json_patient&apos;;convert_csv_hl7_json_patient
	
	// BUILD  PID
	var objPatient= new  Object();
	objPatient.identifier= 			msg[&apos;row&apos;][&apos;PtId&apos;].toString();				//pat id
	objPatient.lastName=			&apos;&apos;;
	objPatient.firstName= 			&apos;&apos;;											// given name
	objPatient.middleName=			&apos;&apos;;											// mid init
	objPatient.dateOfBirth=			&apos;&apos;;											// pt dob
	objPatient.gender=				&apos;&apos;; 										// gender											
	objPatient.encounter=			msg[&apos;row&apos;][&apos;encID&apos;].toString();				// encounter id

	channelMap.put(&apos;msgPatient&apos;,objPatient);
	return objPatient;
} </code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>125b7b7d-ce9b-4772-92f5-2d888375b96f</id>
        <name>convert_csv_hl7_json_visit</name>
        <revision>1</revision>
        <lastModified>
          <time>1666619394956</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to parse msg translate into HL7 JSON object for Visit

	scriptName: convert_csv_hl7_json_visit.js
	@param {object}  msg - CSV row object
	@return {object} JSON Object - This returns object as the HL7 JSON object for Visit HL7 segment
	History:
*/
function convert_csv_hl7_json_visit(msg) {

	var debug= 0;
	var scriptName= &apos;convert_csv_hl7_json_visit&apos;;
	
	// BUILD PV1
	var objVisit= new  Object();
	objVisit.unit=				&apos;&apos;;									// department used if creating an encounter rather than matching to a converted historical encounter
	objVisit.visitNumber= 		msg[&apos;row&apos;][&apos;encID&apos;].toString();			// visit Number from encId number
	objVisit.admissionDate=		msg[&apos;row&apos;][&apos;EncDate&apos;].toString();			// admit date/time
	objVisit.dischargeDate=		&apos;&apos;;		

	channelMap.put(&apos;msgVisit&apos;,objVisit);
	return objVisit;
} </code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>b311dd51-1675-41f2-902b-246e96bb42f3</id>
        <name>csv_create_observation_json_object</name>
        <revision>12</revision>
        <lastModified>
          <time>1667198060555</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	fileName:		csv_create_observation_json_object.js
	name:		CSV Create Observation JSON Object
	authored:		Jeffrey Ritz
	created:		2022-10-26
	input:		&lt;array&gt; object to import the observation array (e.g. [&apos;obx11:1&apos;,&apos;obx21:ST&apos;,&apos;obx31:INT001&apos;, etc.)
	output:		JavaScript object to objectify the observation array
	description:	Productin Evaluate Coded Elements from the CCDA into arrObservations per SQL query to find praMatching elements
	history:
	2022-10-30 JER - Modified to not use switch but to use if condition
*/
function csv_create_observation_json_object(arrObservation) {
	var scriptName= &apos;csv_create_observation_json_object&apos;;
	var debug= 0;
	var objObservation= new Object();

	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; BEGIN arrObservation object: &apos;+JSON.stringify(arrObservation)); }
	
	for(var i= 0;i&lt;arrObservation.length;i++) {
		
		if(i== 0) {
			if(arrObservation[i].toString().length&gt;0) {
				objObservation.obx11= 	arrObservation[i];
			} else {
				objObservation.obx11= 	&apos;&apos;;
			} 
		} else if(i== 1) {
			if(arrObservation[i].toString().length&gt;0) {
				objObservation.obx21= 	arrObservation[i];
			} else {
				objObservation.obx21= 	&apos;&apos;;
			} 
		} else if(i== 2) {
			if(arrObservation[i].toString().length&gt;0) {
				objObservation.obx31= 	arrObservation[i];
			} else {
				objObservation.obx31= 	&apos;&apos;;
			}		
		} else if(i== 3) {
			if(arrObservation[i].toString().length&gt;0) {
				objObservation.obx32= 	arrObservation[i];
			} else {
				objObservation.obx32= 	&apos;&apos;;
			} 
		} else if(i== 4) {
			if(arrObservation[i].toString().length&gt;0) {
				objObservation.obx33= 	arrObservation[i];
			} else {
				objObservation.obx33= 	&apos;&apos;;
			}
		} else if(i== 5) {
			if(arrObservation[i].toString().length&gt;0) {
				objObservation.obx51= 	arrObservation[i];
			} else {
				objObservation.obx51= 	&apos;&apos;;
			} 			
		} else if(i== 6) {
			if(arrObservation[i].toString().length&gt;0) {
				objObservation.obx111= 	arrObservation[i];
			} else {
				objObservation.obx111= 	&apos;&apos;;
			}
		} else if(i== 7) {
			if(arrObservation[i].toString().length&gt;0) {
				if(arrObservation[i].toString()== &apos;NULL&apos;) {
					objObservation.obx141= 	get_current_date_time();
				} else {
					objObservation.obx141= 	arrObservation[i];
				} // end if 
			} else {
				objObservation.obx141= 	&apos;&apos;;
			}
		} else if(i&gt; 7) {
			if(arrObservation[i].toString().length&gt;0) {
				objObservation.obx161= 	arrObservation[i];
			} else {
				objObservation.obx161= 	&apos;&apos;;
			}
		} // end if 
		
	} // end for each
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; END objObservation object: &apos;+JSON.stringify(objObservation)); }
	
	return objObservation;
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>952d5633-d403-4d6d-89be-ba7f4a83b455</id>
        <name>get_current_date_time</name>
        <revision>1</revision>
        <lastModified>
          <time>1667197823935</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** get_current_date_time

  	- Desc: This function returns current DateTime only YYYYMMDDHHMMSS format

	@return {string} datetime - this string object contains the current DateTime only YYYYMMDDHHMMSS format
*/
function get_current_date_time() {
	var today = new Date();
	// set Date with leading zeros if needed
	var tMonth= today.getMonth()+1;
	if(tMonth.toString().length&lt;2) tMonth= &apos;0&apos;+tMonth;
	var tDay= today.getDate()
	if(tDay.toString().length&lt;2) tDay= &apos;0&apos;+tDay;
	var date = today.getFullYear()+&apos;&apos;+tMonth+&apos;&apos;+tDay;
	
	// set Time with leading zeros if needed
	var tHour= today.getHours();
	if(tHour.toString().length&lt;2) tHour= &apos;0&apos;+tHour;
	var tMinute= today.getMinutes();
	if(tMinute.toString().length&lt;2) tMinute= &apos;0&apos;+tMinute;
	var tSecond= today.getSeconds();
	if(tSecond.toString().length&lt;2) tSecond= &apos;0&apos;+tSecond;
	
	var time = tHour+&apos;&apos;+tMinute+&apos;&apos;+tSecond;
	var dateTime = date+&apos;&apos;+time;

	return dateTime;
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>8dd4d83e-1be4-4e3f-a4c3-f6cbbb308670</id>
    <name>Misty Utilities</name>
    <revision>3</revision>
    <lastModified>
      <time>1682526446316</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description>This library was added upon migration to version 3.3.0. It includes all pre-existing
code templates, and is set to be included on all pre-existing and new channels.

You should create your own new libraries and assign code templates to them as you
see fit. You should also link libraries to specific channels, so that you&apos;re not
necessarily including all code templates on all channels all the time.</description>
    <includeNewChannels>false</includeNewChannels>
    <enabledChannelIds>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>14b7de16-de3e-4994-b123-b4d0d3d712aa</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
      <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
      <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
      <string>076d39da-7152-40db-91a1-1746167239e9</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5adcf0e4-782c-4e9d-a105-f67795fe6644</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>3cb6b5d1-4a72-4cf8-b961-7bfe18db8de0</id>
        <name>calcSizeBase64EncodedMsg</name>
        <revision>1</revision>
        <lastModified>
          <time>1667335285520</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function calcSizeBase64EncodedMsg(size) {

	var code_size=    ((size*4)/3)
	var padding_size= (size % 3) ? (3- (size % 3)) : 0;
	var crlfs_size=   2 + (2 * (code_size + padding_size) / 72);
	var total_size=   code_size + padding_size + crlfs_size;

	return total_size;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>cde358c5-0fee-43be-8cf5-732f79e69340</id>
        <name>convertDate</name>
        <revision>1</revision>
        <lastModified>
          <time>1667335285561</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	convertDate(date, outpattern)
*/
// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
var patterns = [
	&apos;yyyy-MM-dd HH:mm:ss:SSS&apos;,
	&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;,
	&apos;yyyy-MM-dd HH:mm:ss&apos;,
	&apos;yyyy-MM-dd HH:mm&apos;,
	&apos;EEE MMM dd HH:mm:ss:SSS zzz yyyy&apos;,
	&apos;EEE MMM dd HH:mm:ss.SSS zzz yyyy&apos;,
	&apos;EEE MMM dd HH:mm:ss zzz yyyy&apos;,
	&apos;EEE MMM dd zzz yyyy&apos;,
	&apos;dd-MMM-yyyy HH:mm:ss:SSS&apos;,
	&apos;dd-MMM-yyyy HH:mm:ss.SSS&apos;,
	&apos;dd-MMM-yyyy HH:mm:ss&apos;,
	&apos;MM/dd/yyyy&apos;,	
	&apos;yyyy-MM-dd&apos;,
	&apos;yyyy MM dd&apos;,
	&apos;yyyy.MM.dd&apos;,
	&apos;MM-dd-yyyy&apos;,
	&apos;MM dd yyyy&apos;,
	&apos;MM.dd.yyyy&apos;,
	&apos;HH:mm:ss:SSS&apos;,
	&apos;HH:mm:ss.SSS&apos;,
	&apos;HH:mm:ss&apos;,
	&apos;yyyyMMddHHmmssSSS&apos;,
	&apos;yyyyMMddHHmmss&apos;,
	&apos;yyyyMMddHHmm&apos;,
	&apos;hh:mm aa&apos;];

var formatters = [];
for each (pattern in patterns) {
	formatters.push(org.joda.time.format.DateTimeFormat.forPattern(pattern));
}

function convertDate(date, outpattern) {
	var instant = 0;
	if (typeof date == &apos;number&apos; || date instanceof java.lang.Number)
		instant = new Number(date);
	else if (date instanceof Date || date instanceof java.util.Date)
		instant = date.getTime();
	else if (date instanceof org.joda.time.ReadableInstant)
		instant = date.getMillis();
	else {
		for each (formatter in formatters) {
			try {
				instant = formatter.parseMillis(new String(date));
				break;
			} catch(e) {}
		}
	}

	return org.joda.time.format.DateTimeFormat.forPattern(outpattern).print(instant);
}
</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>af83ee0a-3c38-48c6-bb34-0e3783f687f8</id>
        <name>currentDate_yyyyMMddhhmmss</name>
        <revision>5</revision>
        <lastModified>
          <time>1667421141871</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** currentDate_yyyyMMddhhmmss

	@return {String} return currentDate in yyyyMMddhhmmss string format

	// Modified: To include addition checks on the length of each datepart 
*/
function currentDate_yyyyMMddhhmmss() {

	var scriptName= &apos;currentDate_yyyyMMddhhmmss&apos;;
	var debug= 0;
	
	var today = new Date();
	var day = today.getDate();
	var month = today.getMonth()+1; //January is 0!
	var year = today.getFullYear();
	var hour = today.getHours();	// 0-23
	var minute = today.getMinutes();	// 0-59
	var second = today.getSeconds();  // 0-59

	if(day.toString().length&lt;2) { day = &apos;0&apos;+day } 
	if(month.toString().length&lt;2) { month = &apos;0&apos;+month }
	if(hour.toString().length&lt;2) { hour = &apos;0&apos;+hour }
	if(minute.toString().length&lt;2) { minute = &apos;0&apos;+minute }
	if(second.toString().length&lt;2) { second = &apos;0&apos;+second }
	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; currentDate day: &apos;+day+&apos; month:&apos; +month+&apos; year: &apos;+year+&apos; hour: &apos;+hour+&apos; minutes: &apos;+minute+&apos; seconds: &apos;+second); 
	}
	var newDate= year+&apos;&apos;+month+&apos;&apos;+day+&apos;&apos;+hour+&apos;&apos;+minute+&apos;&apos;+second;
	if(debug&gt;0) { logger.error(&quot;currentDate_yyyyMMddhhmmss() returns: &quot;+newDate); }
	return newDate;

}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>10e63131-3e24-4419-a268-ed823aba5790</id>
    <name>Molecular Designs Code Templates</name>
    <revision>39</revision>
    <lastModified>
      <time>1695240089339</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description>This library contains code templates created by Datica Mirth OCI channels and Molecular Designs</description>
    <includeNewChannels>true</includeNewChannels>
    <enabledChannelIds>
      <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
      <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
      <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
      <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
      <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
      <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
      <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
      <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
      <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
      <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
      <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>b1789859-2c5e-4720-a617-17bb12289034</id>
        <name> Perform sFTP Put Action (ip, port, user, pass, filename, msg)</name>
        <revision>1</revision>
        <lastModified>
          <time>1687559459553</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: Perform sFTP Put Javascript to connect over SFTP and Put a file on the remote disk
	Name:  Perform sFTP Put Action (ip, port, user, pass, filename, msg)
	@param {String} ip - provide the IP address
		  {String} port - provide the port number
		  {String} user - provide the username
		  {String} pass - provide the password
		  {String} filename - provide the filename
		  {String} msg - XML presentation of the message to be sent as a file
	@return {String} return response (Success or Failure)
*/
function sftpPut(ip, port, user, pass, filename, msg){
	importPackage(com.jcraft.jsch);
	importPackage(java.io);
	importPackage(java.lang);
	importPackage(java.nio.charset);
	
	function toByteArray(str){
		var bytes = [];
		for (var i = 0; i &lt; str.length; ++i) {
    		bytes.push(str.charCodeAt(i));
		}
		return bytes;
	}
	
	// testing vars
	var debug= 0;
	
	//create object.
	var jsch = new JSch();
	jsch.setConfig(&apos;StrictHostKeyChecking&apos;,&apos;no&apos;);
	var session = jsch.getSession(user,ip,port);
	session.setPassword(pass);
	session.setTimeout(10000);
	session.connect();
	var channel = session.openChannel(&apos;sftp&apos;);
	var ioexception = new Packages.java.io.IOException;
	channel.connect();
	if(debug&gt;0) {logger.info(&apos;Connected to SFTP: &apos;);}
	if(debug&gt;0) {logger.info(&apos;Home Directory: &apos; + channel.getHome());}
	channel.cd(&apos;/&apos;); //Folder on the SFTP server where file will be found

	var filename = filename;
	var filebody = msg;
	channel.put(filebody);

	channel.disconnect();
	session.disconnect();	
	return;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>f435d6e5-73bb-4515-8a35-5c6409576e03</id>
        <name>contains_number</name>
        <revision>16</revision>
        <lastModified>
          <time>1670430449839</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: This script is used to evaluate a string if contains a number

	scriptName: contains_number
	@param {String} arg1 - arg1 description
	@return {boolean} return true or false depending if isNaN() - if isNan() -&gt; return true otherwise -&gt; return false
	e.g., write_msg_to_disk($(&apos;rawhl7&apos;),api_error_directory,$(&apos;ark_uuid&apos;));
	History:
*/
function contains_number(text) {

	var scriptName= &apos;contains_number&apos;;
	var debug= 0;

	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; verify text: &apos;+text); }

	if((typeof(text) !== &apos;undefined&apos;) &amp;&amp; (text.toString().length&gt;0))  {

		if((text.toString()== &apos;DETECTED&apos;)||(text.toString()== &apos;TRUE&apos;)) {
			return false;
		} else if(text.toString()== &apos;NOT DETECTED&apos;) {
			return false;
		} else if(text.toString()== &apos;INVALID&apos;) {
			return false;
		} else {
			var arrText= text.toString().split(&apos;&apos;);
			if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; arrText: &apos;+JSON.stringify(arrText)); }
			// curObservationValue.toString() !== &apos;NaN&apos;)
			for each(strElement in arrText) {
				// if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; element: &apos;+element+&apos; isNaN(): &apos;+element.toString().isNaN()); }
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof element: &apos;+typeof(strElement));
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; toString: &apos;+strElement.toString());
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; element toString() !== isNaN(): &apos;+(strElement.toString()!== &apos;NaN&apos;)); 
				}
				if(strElement.toString() !== &apos;NaN&apos;) {
					return true;
				} // end if
			} // end for
		} // end if 
		return false;
	} // end if
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>96be75c3-dddb-4d84-83e1-7484a54f6d7f</id>
        <name>Convert HL7 Date Format to ISO</name>
        <revision>1</revision>
        <lastModified>
          <time>1665512795175</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Converts standard HL7 v2.x date format to human-readable ISO date format
*/

/*
	Author: Datica Inc.
	toISODate: Returns an ISO-formatted date string with specified timezone offset

	Arguments
	---------
		Required
		--------
			hl7DateString:		An HL7-formatted date string (ex: &quot;yyyyMMddHHmmss&quot;

		Optional
		--------
			timezome:			A timezone identifier string corresponding to one of the java.util.TimeZone values (ex: &quot;US/Central&quot;)
*/

function toISODate( hl7DateString, timezone ) {
	var isoDate;
	var dateString;
	var hl7Formatter;
	var isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);

	if (timezone) {
		isoFormatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timezone));
	}
	
	if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString.substring(0,13)) &amp;&amp; hl7DateString.length &gt; 14 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmssZ&quot;);
	}
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 14 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
	} 
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 12 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);
	} 
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 8 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMdd&quot;);
	} 
	else dateString = hl7DateString;
	
	try {
		if (hl7Formatter) {
			isoDate = hl7Formatter.parse(hl7DateString);
			isoDate = isoFormatter.format(isoDate);
			dateString = new String(isoDate);
		}
	} catch (err) {
		dateString = hl7DateString;
	} finally {
		return dateString;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>f4574fa7-05b8-420b-b6a2-a1cb6e3fe1f5</id>
        <name>Convert HL7 Ethnic Code to Ethnicity Coded Element (CWS) data type</name>
        <revision>1</revision>
        <lastModified>
          <time>1684362812785</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Convert HL7 Ethnic Code to Ethnicity Coded ELement (CWS) data type

	@scriptName: hl7_modify_ethnic_code_pid22_to_ethnic_coded_element
	@descName:   Convert HL7 Ethnic Code to Ethnicity Coded ELement Data Type
	@authorName: Jeffrey Ritz
	Parameters:
	@param {XML} pid22 - contains the XML HL7 representation of the PID-22 element
	@return {XML} newEthnicity - returns the modified XML HL7 representation of the PID-22 element
*/
function hl7_modify_ethnic_code_pid22_to_ethnic_coded_element(pid22) {

	var scriptName= &apos;hl7_modify_ethnic_code_pid22_to_ethnic_coded_element&apos;
	var debug= 0;

	// 2023-03-07 JER - Added code per Streamline Issues List - 20220306 item# 3
	// https://phinvads.cdc.gov/vads/ViewValueSet.action?id=2088950C-6EF8-E111-B875-001A4BE7FA90
	var newEthnicity= new XML(&apos;&lt;PID.22&gt;&lt;/PID.22&gt;&apos;);

	if(typeof(pid22)!== &apos;undefined&apos;) {
	
		for each(element in pid22) {

			if(element[&apos;PID.22.1&apos;].toString().length&gt;0) {
				var pid221= element[&apos;PID.22.1&apos;].toString();
				switch (pid221) {
					case &apos;H&apos;: 
						var strPid22= pid221+&apos;^Hispanic or Latino^HL70189&apos;;
						break;
					case &apos;N&apos;: 
						var strPid22= pid221+&apos;^Not Hispanic or Latino^HL70189&apos;;
						break;
					case &apos;U&apos;:
						var strPid22= pid221+&apos;^Unknown^HL70189&apos;;
						break;
					default: 
						var strPid22= &apos;U^Unknown^HL70189&apos;;
				} // end switch
			} else {
				var strPid22= &apos;&apos;;
			} // end if 
			newEthnicity.appendChild(strPid22);
		} // end for each
		
	} // end if 

	return newEthnicity;

} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>f3cf4590-3887-434e-bd9f-e94556abaaee</id>
        <name>Convert HL7 Ethnic Code to Ethnicity Coded Element Data Type</name>
        <revision>2</revision>
        <lastModified>
          <time>1682526446368</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Convert HL7 Ethnic Code to Ethnicity Coded Element (CWS) data type

	@scriptName: hl7_modify_ethnic_code_pid22_to_ethnic_coded_element
	@descName:   Convert HL7 Ethnic Code to Ethnicity Coded Element Data Type
	@authorName: Jeffrey Ritz
	Parameters:
	@param {XML} pid22 - contains the XML HL7 representation of the PID-22 element
	@return {XML} newEthnicity - returns the modified XML HL7 representation of the PID-22 element
*/
function hl7_modify_ethnic_code_pid22_to_ethnic_coded_element(pid22) {

	var scriptName= &apos;hl7_modify_ethnic_code_pid22_to_ethnic_coded_element&apos;
	var debug= 0;

	// 2023-03-07 JER - Added code per Streamline Issues List - 20220306 item# 3
	// https://phinvads.cdc.gov/vads/ViewValueSet.action?id=2088950C-6EF8-E111-B875-001A4BE7FA90
	var newEthnicity= new XML(&apos;&lt;PID.22&gt;&lt;/PID.22&gt;&apos;);

	if(typeof(pid22)!== &apos;undefined&apos;) {
	
		for each(element in pid22) {

			if(element[&apos;PID.22.1&apos;].toString().length&gt;0) {
				var pid221= element[&apos;PID.22.1&apos;].toString();
				switch (pid221) {
					case &apos;H&apos;: 
						var strPid22= pid221+&apos;^Hispanic or Latino^HL70189&apos;;
						break;
					case &apos;N&apos;: 
						var strPid22= pid221+&apos;^Not Hispanic or Latino^HL70189&apos;;
						break;
					case &apos;U&apos;:
						var strPid22= pid221+&apos;^Unknown^HL70189&apos;;
						break;
					default: 
						var strPid22= &apos;U^Unknown^HL70189&apos;;
				} // end switch
			} else {
				var strPid22= &apos;&apos;;
			} // end if 
			newEthnicity.appendChild(strPid22);
		} // end for each
		
	} // end if 

	return newEthnicity;

} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>d7a12547-25f0-4062-b86f-5fdf6eaa4dd1</id>
        <name>Convert ISO Date Format to HL7</name>
        <revision>1</revision>
        <lastModified>
          <time>1665512795228</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Converts ISO date format to HL7 v2 format
*/

/*
	Author: Datica Inc.
	toHL7Date: Returns an HL7-formatted date string with specified timezone offset

	Arguments
	---------
		Required
		--------
			isoDateString:		An ISO-formatted date string (ex: &quot;yyyy-MM-ddTHH:mm:ssZ&quot;

		Optional
		--------
			timezome:			A timezone identifier string corresponding to one of the java.util.TimeZone values (ex: &quot;US/Central&quot;)
*/

function toHL7Date( isoDateString, timezone ) 
{
	var hl7Date;
	var dateString;
	var isoFormatter;
	var hl7Formatter;

	// ISO Date Format: yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;
	if ( isoDateString != null &amp;&amp; isoDateString.length &lt;= 25 &amp;&amp; isoDateString.length &gt;= 22) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmssZ&quot;);
		if (timezone) {
			hl7Formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timezone));
		}
	}
	// ISO Date Format: yyyy-MM-dd HH:mm:ss
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 19 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
	}
	// ISO Date Format: yyyy-MM-dd HH:mm
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 16 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);	
	} 
	// ISO Date Format: yyyy-MM-dd
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 10 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMdd&quot;);	
	}
	// None of the above, return original date string.
	else dateString = isoDateString;

	try {
		if (isoFormatter) {
			hl7Date = isoFormatter.parse(isoDateString);
			hl7Date = hl7Formatter.format(hl7Date);
			dateString = new String(hl7Date);
		}
	} catch (err) {
		dateString = isoDateString;
	} finally {
		return dateString;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>060b8f26-61b5-4185-bc65-cff05085bfe2</id>
        <name>Filter Non Detected Observation Results</name>
        <revision>3</revision>
        <lastModified>
          <time>1678138972714</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Evaluate the OBX-5.1 values for Detected vs Non-Detected result values to determine if needed to filter the observation results
		
	fileName:		filter_non_detected_observations_results.js
	name:		Filter Non Detected Observation Results
	authored:		Jeffrey Ritz
	created:		2023-02-22
	desc:		Evaluate the OBX-5.1 values for Detected vs Non-Detected result values
	specimenDetected= true  -&gt; desired specimens detected used to permit the entire message to be sent
	specimenDetected= false -&gt; desired specimens detected used to filter the entire message
	history:
	2024-02-24 JER - Clone of the remove_observations_from_observation_result_codes.js function
*/
function filter_non_detected_observations_results(msg) {
	
	var scriptName= &apos;filter_non_detected_observations_results&apos;;
	var debug= 1;
	var detected= false;
	var i= 1;	// used for the OBX children objects
	var j= 1;	// used for all msg children objects
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);
	
	// for each segment - child per msg.children()
	for each(child in msg.children()) {
	
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof: &apos;+typeof(child)+&apos; localName: &apos;+child.localName()+&apos; child: &apos;+child);
	
		if(child.localName()== &apos;OBX&apos;) {
		
			// process each OBX
			var curObservationValue=child[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString().toUpperCase();
				
			// evaluate if element value is numerical exponential
			if(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1) {
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; determined value contains an exponential 1.00E value: &apos;+(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1)); }
			}
				
			// evaluate if element value is number 
			if(parseInt(curObservationValue.toString() !== &apos;NaN&apos;)) {
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; determined value contains IS a number: &apos;+parseInt(curObservationValue.toString()!== &apos;NaN&apos;)); }
			}
	
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] curObservationValue: &apos;+curObservationValue);
			
			// 2022-10-17 JER - Added evaluate if NaN - only 
			if((curObservationValue== &apos;DETECTED&apos;)||(curObservationValue== &apos;TRUE&apos;)||(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1)||parseInt(curObservationValue.toString()!== &apos;NaN&apos;)) {
				detected= true;
			} // end if 
				
			i++;
		}  // end if 
		j++;
	} // end for
	
	channelMap.put(&apos;specimenDetected&apos;,detected); // true, false, invalid
	
	if(detected== true) {
		return true;
	} else {
		return false;
	}
} 
</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>4cb42e06-7c9a-4fd2-bcb5-b9f4053a9c19</id>
        <name>Get Segments After a Particular Segment</name>
        <revision>3</revision>
        <lastModified>
          <time>1684206232165</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Returns an array of segments with the specified name that come after a given segment in the message.
*/
/*
	Author: Nick Rupley
	Date Modified: 2/13/2013
	getSegmentsAfter: Returns an array of segments with the specified name that come after a given segment in the message.

	Arguments
	---------
		Required
		--------
			root:			The root HL7Message node of the message, or the parent of the segment node.
			startSeg:		The segment AFTER which to start collecting segments.
			segName:		The name (String or RegExp) of the segments you want to collect.

		Optional
		--------
			consecutiveInd:	If true, indicates that the segments are expected to come directly after startSeg. 
							If false, segments are collected until another segment with the same name as startSeg is encountered.
							Defaults to false.
			stopSegNames:	An array of segment names that, when encountered, stop the collection of segments.
*/

function getSegmentsAfter(root, startSeg, segName, consecutiveInd, stopSegNames) {
	function test(str) {
		return segName instanceof RegExp ? segName.test(str) : segName === str;
	}

	// The index to start collection is the next one up from the starting segment
	var index = startSeg.childIndex()+1;
	// The return array
	var out = [];
	// Boolean placeholder to stop iteration
	var done = false;
	// Object that will contain all of the stopSegNames strings, bound to a truthy value (1)
	var stopNames = {};
	// Indicates whether we have any stop segments
	var stopNamesInd = false;
	// If stopSegNames is defined
	if (stopSegNames !== undefined &amp;&amp; stopSegNames !== null) {
		// Set our indicator to true
		stopNamesInd = true;
		// Add each string in the array to our object
		for each (name in stopSegNames)
			stopNames[name] = 1;
	}

	// Iterate through each child in the root, starting at the segment after startSeg, and
	// ending at the final segment, or when the done flag is set to true.
	while (index &lt; root.children().length() &amp;&amp; !done) {
		// If a stop segment is encountered, stop iteration
		if (stopNamesInd &amp;&amp; root.children()[index].name().toString() in stopNames)
			done = true;
		// If a segment with the same name as startSeg is encountered, stop iteration
		else if (root.children()[index].name().toString() == startSeg.name().toString() &amp;&amp; !consecutiveInd)
			done = true;
		// If we&apos;re only collecting consecutive segments and we encounter a segment with a name other than segName, stop iteration
		else if (!test(root.children()[index].name().toString()) &amp;&amp; consecutiveInd)
			done = true;
		// If all previous tests passed, and the current segment has a name of segName, then add it to our array
		else if (test(root.children()[index].name().toString()))
			out.push(root.children()[index]);
		// Increment our index counter
		index++;
	}

	// Return the output array
	return out;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>45a0316e-0d5a-42b6-b7cc-d786a97cceba</id>
        <name>Is Message Observation Value Detected</name>
        <revision>9</revision>
        <lastModified>
          <time>1695836657922</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: This script is used to evaluate the provided messageObservation Value (OBX-5) to determine if the value should 
	be designated as DETECTED or NON-DETECTED

	@param {String} messageObservationValue - this only argument is the OBX-5 value provided to be evaluated by this script
	@return {String} return - to return the detected boolean value of detected= true or non-detected= false (true|false) 
	history
	2023-09-27 JER - Modified to include Conversion from Exponential value (1.00E10 or 9.44E1) to Number with Precision
*/
function isMessageObservationValueDetected(messageObservationValue) {

	var scriptName= &apos;isMessageObservationValueDetected&apos;;
	var debug= 0;
	var blnDetected= false;
	
	if(debug&gt;0) logger.debug(&apos;DEBUG::&apos;+scriptName+&apos; evaluate messageObservationValue: &apos;+messageObservationValue);

	if((messageObservationValue.indexOf(&apos;.&apos;)&gt;-1) &amp;&amp; (messageObservationValue.indexOf(&apos;E&apos;)&gt;-1)) {
		messageObservationValue= Number(messageObservationValue).toPrecision();
		if(debug&gt;0) logger.debug(&apos;DEBUG::&apos;+scriptName+&apos; messageObservationValue CONTAINS an exponential value add precision: &apos;+messageObservationValue.toString()+&apos; type: &apos;+typeof(messageObservationValue));
	} // end if 

	// 2023-09-27 JER - Conversion from Exponential value (1.00E10 or 9.44E1) to Number with Precision 
	if(isNaN(messageObservationValue) == false) {
		blnDetected= true;
		if(debug&gt;0) logger.debug(&apos;DEBUG::&apos;+scriptName+&apos; messageObservationValue isNAN: &apos;+isNaN(messageObservationValue)+&apos; value: &apos;+messageObservationValue.toString().toUpperCase()+&apos; blnDetected: &apos;+blnDetected);
	// evaluate if element value is numerical exponential
	} else if(messageObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1) {
		// IS AN EXPONENTIAL NUMERIC EXPRESSION (1.00E10, ETC.)
		blnDetected= true;
		if(debug&gt;0) logger.debug(&apos;DEBUG::&apos;+scriptName+&apos; messageObservationValue CONTAINS an exponential 1.00E value: &apos;+messageObservationValue.toString()+&apos; blnDetected: &apos;+blnDetected);
	} else if(messageObservationValue.toString().toUpperCase().indexOf(&apos;INVALID&apos;)&gt;-1) {				
		// INVALID
		blnDetected= false;
		if(debug&gt;0) logger.debug(&apos;DEBUG::&apos;+scriptName+&apos; messageObservationValue CONTAINS an INVALID text value: &apos;+messageObservationValue.toString().toUpperCase()+&apos; blnDetected: &apos;+blnDetected);
	} else if(messageObservationValue.toString().toUpperCase().indexOf(&apos;NOT DETECTED&apos;)&gt;-1) {
		// NON-DETECTED
		blnDetected= false;
		if(debug&gt;0) logger.debug(&apos;DEBUG::&apos;+scriptName+&apos; messageObservationValue CONTAINS NOT DETECTED text value: &apos;+messageObservationValue.toString().toUpperCase()+&apos; blnDetected: &apos;+blnDetected);
	} else if (parseInt(messageObservationValue.toString() !== &apos;NaN&apos;)) {
		// IS A NUMBER
		blnDetected= true;
		if(debug&gt;0) logger.debug(&apos;DEBUG::&apos;+scriptName+&apos; messageObservationValue CONTAINS a number value: &apos;+messageObservationValue.toString()+&apos; blnDetected: &apos;+blnDetected);
	} else if(messageObservationValue.toString().toUpperCase()== &apos;DETECTED&apos;) {
		// DETECTED
		blnDetected= true;
		if(debug&gt;0) logger.debug(&apos;DEBUG::&apos;+scriptName+&apos; messageObservationValue CONTAINS a number value: &apos;+messageObservationValue.toString()+&apos; blnDetected: &apos;+blnDetected);
	} // end if 
	
	if(blnDetected== true) {
		return &apos;DETECTED&apos;;
	} else {
		return &apos;NOT DETECTED&apos;;
	} // end if 
	
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>11196ba8-3264-42a9-a59a-7a3cc2ca6754</id>
        <name>Remove Duplicate Segments</name>
        <revision>9</revision>
        <lastModified>
          <time>1685384555341</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
Desc:  Evaluate the OBX versus the observed result code (OBX-3.1) evaluated against Configuration Setting variable: ADPHNotifiablePathogens to determine whether to exclude the Observation Results (OBX) segments from the message and set the pathogenDetected channelMap variable.
	
	fileName:		remove_duplicate_segments.js
	name:		Remove Duplicate Segments
	@authored:	Jeffrey Ritz
	@created:		2023-05-29
	@description:	Remove duplicate segments

	history:
	2023-02-27 JER - Cloned the Remove Observations From Observation Result Codes
*/
function remove_duplicate_segments(msg, removeDuplicateSegmentName) {
	
	var scriptName= &apos;remove_duplicate_segments&apos;;
	var debug= 0;
	var arrRemoveDuplicateSegments= new Array();

	// 2023-04-26 JER - Modified to determine if should evaluate detectable or not
	
	// var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);

	var lastSegmentName= &apos;&apos;;
	var lastSegmentIndex= 0;
	var lastSegment= &apos;&apos;;
	var arrDeleteSegments= new Array();

	var i= 0;
	for each(seg in msg.children()) {
		
		var segmentName= seg.name();
		if(segmentName== removeDuplicateSegmentName) {
		
			var getSegmentIndex= seg.childIndex();
		
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; segment[&apos;+i+&apos;] getSegmentIndex: &apos;+getSegmentIndex+&apos; segment: &apos;+seg);

			if(segmentName== lastSegmentName) {

				var strRemoveDuplicateSegments= segmentName+&apos;[&apos;+lastSegmentIndex+&apos;]: &apos;+seg;
				arrRemoveDuplicateSegments.push(strRemoveDuplicateSegments);
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; found seg[&apos;+i+&apos;] segmentName: &apos;+segmentName+&apos; lastSegmentName: &apos;+lastSegmentName+&apos; IF segmentName== lastSegmentName: &apos;+(segmentName== lastSegmentName)+&apos; DELETE last segment: &apos;+lastSegment);
				delete msg.children()[lastSegmentIndex]; 
			} 

			lastSegment= seg;
			lastSegmentIndex= getSegmentIndex;
			lastSegmentName= segmentName;
		} // end if 
		
	} // end for each 

	if(arrRemoveDuplicateSegments.length&gt;0) channelMap.put(&apos;removeDuplicateSegments&apos;,arrRemoveDuplicateSegments);
	return msg;

}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>25d364f7-09cf-4470-8694-a5930e88d2e3</id>
        <name>Remove Non Desired HL7 Segments</name>
        <revision>9</revision>
        <lastModified>
          <time>1678129664685</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: Remove non-desired HL7 Segments from the HL7 message 
	&#xd;
	@fileName:	remove_non_desired_hl7_segments.js
	@name:		Remove Non Desired HL7 Segments
	@authored:	Jeffrey Ritz
	@created:		2023-03-01
	@description:	Remove non-desired HL7 Segments from Message
	@return:		XML Object - returns the HL7 XML representation of the HL7 message excluding the non-desired segments

	history:
	2023-03-02 JER - remove the carriage return line feeds from the segmentsFiltered channelMap variable
	2023-02-27 JER - Cloned the Remove Observations From Observation Result Codes
*/
function remove_non_desired_hl7_segments(msg, removeSegmentsList) {
	
	var scriptName= &apos;remove_non_desired_hl7_segments&apos;;
	var debug= 0;
	var detected= false;
	var i= 0;
	var segmentsFiltered = new Array();
	var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);
	
	// for each segment - child per msg.children()
	for each(child in msg.children()) {
	
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof: &apos;+typeof(child)+&apos; localName: &apos;+child.localName()+&apos; child: &apos;+child);

		if(child.localName()== &apos;MSH&apos;) {
			var msgCtrlId= child[&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
		}
	
		if(removeSegmentsList.indexOf(child.localName())&lt;0) {
		
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] determined segment: &apos;+child.localName()+&apos; KEEP IT as is NOT CONTAINED in the removeSegments List of: &apos;+removeSegmentsList); 
			tmp.appendChild(child);
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] ADD SEGMENT: &apos;+child.localName());
		} else {
			// 2023-03-01 JER - Added the collective observationFiltered channelMap variable to capture the array of filtered observations
			var segmentFiltered= &apos;Filtered segment[&apos;+i+&apos;]: &apos;+child.localName()+&apos;\r\n&apos;;
			segmentsFiltered.push(segmentFiltered);
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; determined segment[&apos;+i+&apos;]: &apos;+child.localName()+&apos; REMOVE IT as it IS CONTAINED in the removeSegments List of: &apos;+removeSegmentsList); 
		} // end if 	
		i++;
		
	} // end for

	// 2023-03-02 JER - remove the carriage return line feeds from the segmentsFiltered channelMap variable
	var strSegmentsFiltered= segmentsFiltered;
	var segmentsFiltered= segmentsFiltered.toString().replace(/[\r][\n]/g,&apos;&apos;);
	channelMap.put(&apos;segmentsFiltered&apos;,segmentsFiltered);
	channelMap.put(&apos;remove_segments_msg&apos;,tmp);

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg: &apos;+msgCtrlId+&apos; non-desired REMOVED segments: &apos;+&apos;\r\n&apos;+strSegmentsFiltered);
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; remove_segments_msg: &apos;+$c(&apos;remove_segments_msg&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; tmp: &apos;+$c(&apos;remove_segments_msg&apos;));
	} // end if 
	
	return tmp;
}
</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>9b1fdd3d-b72c-4e06-af09-29acc6c98903</id>
        <name>Remove Observations From Observation Alternative Codes</name>
        <revision>3</revision>
        <lastModified>
          <time>1682530152063</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  Evaluate the OBX versus the observation identifier alternative identifier code (OBX-3.4) evaluated against Configuration Setting variable: TNRemoveObservations
	to determine whether to exclude the Observation Results (OBX) segments from the message and set the pathogenDetected channelMap variable.
	
	fileName:		remove_observations_from_observation_alternative_code.js
	name:		Remove Observations From Observation Alternative Codes
	authored:		Jeffrey Ritz
	created:		2023-04-18
	description:	Evaluate the OBX versus the observed result code (OBX-3.4) evaluated against Configuration Setting variable: TNRemoveObservations
	to determine whether to exclude the Observation Results (OBX) segments from the message. 
	history:
	2023-04-18 JER - Cloned the pre-existing remove_observations_from_observation_result_codes 
*/
function remove_observations_from_observation_alternative_code(msg, removeObservations) {
	
	var scriptName= &apos;remove_observations_from_observation_alternative_code&apos;;
	var debug= 0;
	// allowedObservations
	var allowedObservationsCount= 0;
	var allowedObservations= new Array();
	// removedObservations
	var removedObservationsCount= 0;
	var removedObservations= new Array();
	
	var i= 1;
	var j= 1;

	var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);
	
	// for each segment - child per msg.children()
	for each(child in msg.children()) {
	
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof: &apos;+typeof(child)+&apos; localName: &apos;+child.localName()+&apos; child: &apos;+child);

		if(child.localName()== &apos;MSH&apos;) {
			var msgCtrlId= child[&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
		}
	
		if(child.localName()== &apos;OBX&apos;) {
		
			// process each OBX
			// 2023-03-02 JER - Modification to evaluate differences between CWE (Coded Extended) vs ST (String) data type 
			var obx21= child[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString();
			// if(child[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString()== &apos;CWE&apos;) {
			var obx31= child[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
			var obx32= child[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
			var obx34= child[&apos;OBX.3&apos;][&apos;OBX.3.4&apos;].toString();
			var obx51= child[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
			// } // end if 
			var curObservationValue= obx51;
			
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; obx21: &apos;+obx21+&apos; obx34: &apos;+obx34+&apos; obx51: &apos;+obx51+&apos; observedValue: &apos;+curObservationValue);
			
			if(debug&gt;0) {
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;] obx34 typeof: &apos;+typeof(obx34)+&apos; obx34: &apos;+obx34);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;] TNRemoveObservations: &apos;+removeObservations);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;] removeObservations.indexOf(obx34): &apos;+removeObservations.indexOf(obx34));
			}
			
			if(removeObservations.indexOf(obx34)&lt;0) {		

				// 2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] FOUND TN Remove Observation OBX-3.1: &apos;+obx31+&apos; value: &apos;+curObservationValue+&apos; from the list of codes: &apos;+removeObservations+&apos; evaluation: &apos;+removeObservations.indexOf(obx34)+&apos; to ADD this observation OBX Segment.&apos;); 
				
				tmp.appendChild(child);
				allowedObservationsCount++;
				var strAllowedObservations= &apos;Allowed Observations[&apos;+allowedObservationsCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32;
				allowedObservations.push(obx31);
				
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; removeObservations[&apos;+i+&apos;] allowObservations:&apos; +strAllowedObservations);
				
			} else {
				
				// 2023-03-01 JER - Added the collective observationFiltered channelMap variable to capture the array of filtered observations
				removedObservationsCount++;
				var strRemovedObservations= &apos;Filtered Observation[&apos;+removedObservationsCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32+&apos;\r\n&apos;;
				removedObservations.push(obx31);

				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; removeObservations[&apos;+i+&apos;] removedObservations:&apos; +strRemovedObservations);
			
			}
			i++;
		} else {
			// 2023-02-24 JER - Modified to use appendChild E4X denoted XML function
			tmp.appendChild(child);
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] ADD SEGMENT: &apos;+child.localName());
		} // end for
		
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; tmp[&apos;+j+&apos;] contains: &apos;+tmp);
		j++;
		
	} // end for

	// 2023-03-02 JER - remove the carriage return line feeds from the observationsFiltered channelMap variable
	// var observationsFiltered= observationsFiltered.toString().replace(/[\r][\n]/g,&apos;&apos;);
	channelMap.put(&apos;allowedObservations&apos;,allowedObservations);
	channelMap.put(&apos;removedObservations&apos;,removedObservations);

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg: &apos;+msgCtrlId+&apos; allowed observations: &apos;+$c(&apos;allowedObservations&apos;)+&apos; and removed observations: &apos;+$c(&apos;removedObservations&apos;));
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; tmp: &apos;+tmp);
	} // end if 
	
	return tmp;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>227e3592-01f0-4d39-b1aa-6aeda30489e2</id>
        <name>Remove Observations From Observation Alternative Codes (NEW)</name>
        <revision>1</revision>
        <lastModified>
          <time>1684206232287</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  Evaluate the OBX versus the observation identifier alternative identifier code (OBX-3.4) evaluated against Configuration Setting variable: TNRemoveObservations
	to determine whether to exclude the Observation Results (OBX) segments from the message and set the pathogenDetected channelMap variable.
	
	fileName:		remove_observations_from_observation_alternative_code_new.js
	name:		Remove Observations From Observation Alternative Codes (NEW)
	authored:		Jeffrey Ritz
	created:		2023-04-18
	description:	Evaluate the OBX versus the observed result code (OBX-3.4) evaluated against Configuration Setting variable: TNRemoveObservations
	to determine whether to exclude the Observation Results (OBX) segments from the message. 
	history:
	2023-05-08 JER - Modified to include a removeNonDetected variable if provided with a 1 - then remove nonDetected observations
	2023-05-08 JER - Modified to evaluate observation types (CWE) differently than other coded values
	2023-04-18 JER - Cloned the pre-existing remove_observations_from_observation_result_codes 
*/
function remove_observations_from_observation_alternative_code_new(msg, removeObservations, removeNonDetected) {
	
	var scriptName= &apos;remove_observations_from_observation_alternative_code_new&apos;;
	var debug= 0;
	var detected= false;
	var pathogenDetected= false;
	
	// allowedObservations
	var allowedObservationsCount= 0;
	var allowedObservations= new Array();
	
	// removedObservations
	var removedObservationsCount= 0;
	var removedObservations= new Array();
	if(typeof(removeNonDetected)== undefined) var removeNonDetected= 0;
	
	var i= 1;
	var j= 1;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; removeObservations: &apos;+removeObservations+&apos; removeNonDetected: &apos;+removeNonDetected); 

	// var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);
	

	for each(seg in msg..OBR) {
	
		var perSegAllowedObservationSegments= 0;
		
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof: &apos;+typeof(seg)+&apos; seg[&apos;+j+&apos;]: &apos;+seg);
	
		var allowedObservationSegments= 0;
		for each(obx in getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBX&apos;,false,&apos;OBR&apos;)) {
			
			// process each OBX
			var obx21= obx[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString;
			var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
			var obx32= obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
			var obx34= obx[&apos;OBX.3&apos;][&apos;OBX.3.4&apos;].toString();
			var obx51= obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
			
			// 2023-02-27 JER - Modified from OBX.5.1 to OBX.5.2
			if(obx[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString()== &apos;CWE&apos;) {
				var observationCode= obx34;
				var curObservationValue=	obx[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
			} else {
				var observationCode= obx31;
				var curObservationValue=	obx51.toString().toUpperCase();
			} // end if
						
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+j+&apos;] observationCode: &apos;+observationCode+&apos; obx31: &apos;+obx31+&apos; obx32: &apos;+obx32+&apos; obx51: &apos;+obx51+&apos; curObservationValue: &apos;+curObservationValue);
			
			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] curObservationValue: &apos;+curObservationValue);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] observationCode: &apos;+observationCode+&apos; removeObservations: &apos;+removeObservations+&apos; EVAL: &apos;+removeObservations.indexOf(observationCode));
			} // end if 
			
			// 2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
			if(removeObservations.indexOf(observationCode)&gt;-1) {	

				// 2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] FOUND Observation Code: &apos;+observationCode+&apos; value: &apos;+curObservationValue+&apos; from the list of codes: &apos;+removeObservations+&apos; evaluation: &apos;+removeObservations.indexOf(observationCode)+&apos; to REMOVE this observation OBX Segment.&apos;); 

				removedObservationsCount++;
				var strObservationCode= observationCode+&apos;:&apos;+curObservationValue;
				var strRemovedObservations= &apos;Filtered Observation[&apos;+removedObservationsCount+&apos;] Observation CODE: &apos;+observationCode+&apos; DESCRIPTION: &apos;+obx32+&apos; obx34: &apos;+obx34+&apos; curObservationValue: &apos;+curObservationValue+&apos;\t\r\n&apos;;
				removedObservations.push(strObservationCode);
						
				delete msg.children()[obx.childIndex()];
						
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; REMOVE removable Non-Detected observation CODE: &apos;+observationCode+&apos; removeObservations[&apos;+removedObservationsCount+&apos;] removedObservations:&apos; +strRemovedObservations);
			
			} else {
				
				pathogenDetected= true;
						
				perSegAllowedObservationSegments++;
				allowedObservationsCount++;
				var strObservationCode= observationCode+&apos;:&apos;+curObservationValue;
				var strAllowedObservations= &apos;Allowed Observations[&apos;+allowedObservationsCount+&apos;] Observation CODE: &apos;+observationCode+&apos; DESCRIPTION: &apos;+obx32+ &apos;obx34: &apos;+obx34;
				allowedObservations.push(strObservationCode);
					
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; PERMITTED removable Detected observation CODE: &apos;+observationCode+&apos; allowedObservations[&apos;+allowedObservationsCount+&apos;] allowObservations:&apos; +strAllowedObservations);
			
			} // end if 
			
			j++;
			
		} // end for 
		i++;
		
		// 2024-04-26 JER - Modified to evaluate if any allowedObservations are found - if none then remove associated OBR and SPM segments
		if(perSegAllowedObservationSegments&lt;1) {

			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;SPM&apos;,true,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;TEST::&apos;+scriptName+&apos; SPM getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()+1]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()+1]; 

			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBR&apos;,false,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;TEST::&apos;+scriptName+&apos; OBR getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()]; 
			
		} // end if 
		
	} // end for each

	channelMap.put(&apos;altAllowedObservations&apos;,allowedObservations);
	channelMap.put(&apos;altRemovedObservations&apos;,removedObservations);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; allowedObservations: &apos;+allowedObservations);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; removedObservations: &apos;+removedObservations);
	} // end if 
	
	channelMap.put(&apos;pathogenDetected&apos;,pathogenDetected); // true, false, invalid
	channelMap.put(&apos;modified_msg&apos;,msg);
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pathogenDetected: &apos;+$c(&apos;pathogenDetected&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg: &apos;+$c(&apos;modified_msg&apos;));
	} // end if 
	
	return msg;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>38330d91-1b7c-4159-9530-f55314118d06</id>
        <name>Remove Observations From Observation Result Codes</name>
        <revision>65</revision>
        <lastModified>
          <time>1684206231981</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  Evaluate the OBX versus the observed result code (OBX-3.1) evaluated against Configuration Setting variable: ADPHNotifiablePathogens
	to determine whether to exclude the Observation Results (OBX) segments from the message and set the pathogenDetected channelMap variable.
	
	fileName:		remove_observations_from_observation_result_codes.js
	name:		Remove Observations From Observation Result Codes
	authored:		Jeffrey Ritz
	created:		2023-02-22
	description:	Evaluate the OBX versus the observed result code (OBX-3.1) evaluated against Configuration Setting variable: ADPHNotifiablePathogens
	to determine whether to exclude the Observation Results (OBX) segments from the message and set the pathogenDetected channelMap variable.
	pathogenDetected= true -&gt; desired pathogens detected persist the observation result OBX segment in the transformed message (msg)
	pathogenDetected= false -&gt; failed to observe the desired pathogen or Non-Detected result remove observation result from OBX segment in transformed message (msg)
	history:
	2023-04-20 JER - Modified changed from OBX.3.4 to OBX.3.1
	2023-03-06 JER - Modified to incorporate the count of the detected in OBX[OBX.1][OBX.1.1]
	2023-03-03 JER - Moved the curObservationValue was moved up to be evaluated and accompanying logger.error statement
	2023-03-02 JER - Modification to evaluate differences between CWE (Coded Extended) vs ST (String) data type
		if obx-2.1 is EQ CWE reference observation code from obx-3.4
		if obx-2.1 is NE CWE (e.g. ST) reference observation code from obx-3.1
	2023-03-02 JER - remove the carriage return line feeds from the observationsFiltered channelMap variable
	2023-03-01 JER - Added the collective observationFiltered channelMap variable to capture the array of filtered observations obx31 and obx32 values
	2023-02-27 JER - Modified from: $cfg(&apos;ADPHNotifiablePathogens&apos;) to: allowedObservationCodeList
	2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
	2023-02-23 JER - Converted transformer to code_template 
*/
function remove_observations_from_observation_result_codes(msg, allowedObservationCodeList) {
	
	var scriptName= &apos;remove_observations_from_observation_result_codes&apos;;
	var debug= 0;
	var detected= false;
	var nonDetectedFilteredCount= 0;
	var nonDetectedFiltered= new Array();
	var permittedPathogenOrder= false;
	var i= 1;
	var j= 1;
	var observationsFiltered = new Array();
	var observationsFilteredCount= 0;
	var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);
	
	// for each segment - child per msg.children()
	for each(child in msg.children()) {
	
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof: &apos;+typeof(child)+&apos; localName: &apos;+child.localName()+&apos; child: &apos;+child);

		if(child.localName()== &apos;MSH&apos;) {
			var msgCtrlId= child[&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
		}
	
		if(child.localName()== &apos;OBX&apos;) {
		
			// process each OBX
			// 2023-03-02 JER - Modification to evaluate differences between CWE (Coded Extended) vs ST (String) data type 
			var obx21= child[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString();
			if(child[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString()== &apos;CWE&apos;) {
				// 2023-04-20 JER - Modified changed from OBX.3.4 to OBX.3.1
				var obx31= child[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
				var obx51= child[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
			} else if(child[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString()== &apos;ST&apos;) {
				var obx31= child[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
				var obx51= child[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString().toUpperCase();
			} else {
				var obx31= child[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
				var obx51= child[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString().toUpperCase();
			} // end if 
			var obx32= child[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
			var curObservationValue= obx51;
			
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; obx21: &apos;+obx21+&apos; obx31: &apos;+obx31+&apos; obx32: &apos;+obx32+&apos; obx51: &apos;+obx51+&apos; observedValue: &apos;+curObservationValue);
			
			if(debug&gt;0) {
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;] typeof: &apos;+typeof(obx31)+&apos; obx31: &apos;+obx31);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;] ADPHNotifiablePathogens: &apos;+$cfg(&apos;ADPHNotifiablePathogens&apos;));
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;] obx31 contained in ADPHNotifiablePathogens evaluation: &apos;+$cfg(&apos;ADPHNotifiablePathogens&apos;).indexOf(obx31));
			}
			
			// 2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
			// if($cfg(&apos;ADPHNotifiablePathogens&apos;).indexOf(obx31)&gt;-1) {
			if(allowedObservationCodeList.indexOf(obx31)&gt;-1) {		
				permittedPathogenOrder= true;

				// 2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] FOUND ADPH Notifiable Pathogens: &apos;+obx31+&apos; value: &apos;+curObservationValue+&apos; from the list of codes: &apos;+allowedObservationCodeList+&apos; evaluation: &apos;+allowedObservationCodeList.indexOf(obx31)+&apos; permitted Order Observation OBX Segment.&apos;); 
				
				// evaluate if element value is numerical exponential
				if(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; determined value contains an exponential 1.00E value: &apos;+(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1));
				}
	
				if(debug&gt;0) {
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;].5.1 (curObservationValue== DETECTED): &apos;+(curObservationValue== &apos;DETECTED&apos;));
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;].5.1 (curObservationValue== TRUE): &apos;+(curObservationValue== &apos;TRUE&apos;));
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;].5.1 (curObservationValue.toString().indexOf(1.00E)&gt;-1): &apos;+(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1));
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;].5.1 parseInt(curObservationValue)!== NaN): &apos;+(parseInt(curObservationValue) !== &apos;NaN&apos;));
				} // end if 
				
				// 2022-10-17 JER - Added evaluate if NaN - only 
				if(((curObservationValue== &apos;DETECTED&apos;)&amp;&amp;(parseInt(curObservationValue) !== &apos;NaN&apos;))||(curObservationValue== &apos;TRUE&apos;)||(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1)) {
					detected= true;
					// 2023-03-06 JER - Modified to incorporate the count of the detected in OBX[OBX.1][OBX.1.1]
					// child[&apos;OBX.1&apos;][&apos;OBX.1.1&apos;]= detectedCount;
					// detectedCount++;
					// 2023-02-24 JER - Modified to use appendChild E4X denoted XML function
					tmp.appendChild(child);
					//if(debug&gt;0) 
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] DETECTED: &apos;+detected+&apos; ADD SEGMENT: &apos;+child.localName());
				} else {
					nonDetectedFilteredCount++;
					var strNonDetectedFiltered= &apos;Non-Detected[&apos;+nonDetectedFilteredCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32;
					nonDetectedFiltered.push(strNonDetectedFiltered);
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] NOT DETECTED: &apos;+detected+&apos; REMOVE SEGMENT: &apos;+child.localName());
				} // end if 
				
			} else {
					// 2023-03-01 JER - Added the collective observationFiltered channelMap variable to capture the array of filtered observations
					observationsFilteredCount++;
					var observationFiltered= &apos;Observation[&apos;+observationsFilteredCount+&apos;] CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32+&apos;\r\n&apos;;
					observationsFiltered.push(observationFiltered);
					//if(debug&gt;0)
					// 2023-03-05 JER - Modified to include description of failed to find the ADPH Notifiable Pathogen observed results 
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] DID NOT FIND ADPH Notifiable Pathogens: &apos;+obx31+&apos; value: &apos;+curObservationValue+&apos; from the list of codes: &apos;+allowedObservationCodeList+&apos; evaluation: &apos;+allowedObservationCodeList.indexOf(obx31)+&apos; rejected Order Observation OBX Segment.&apos;); 
			}
			i++;
		} else {
			// 2023-02-24 JER - Modified to use appendChild E4X denoted XML function
			// tmp+= child;
			tmp.appendChild(child);
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] ADD SEGMENT: &apos;+child.localName());
		} // end for
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; tmp[&apos;+j+&apos;] contains: &apos;+tmp);
		j++;
	} // end for

	if(observationsFiltered.length&lt;1) {
		observationsFiltered= &apos;NONE&apos;;
	} // end if 
	
	channelMap.put(&apos;pathogenDetected&apos;,detected); // true, false, invalid
	
	var strObservationsFiltered= observationsFiltered;
	// 2023-03-02 JER - remove the carriage return line feeds from the observationsFiltered channelMap variable
	var observationsFiltered= observationsFiltered.toString().replace(/[\r][\n]/g,&apos;&apos;);
	channelMap.put(&apos;observationsFiltered&apos;,observationsFiltered);
	channelMap.put(&apos;nonDetectedFiltered&apos;,nonDetectedFiltered);

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg: &apos;+msgCtrlId+&apos; observation required pathogens: &apos;+$c(&apos;pathogenDetected&apos;)+&apos; these observations were FILTERED: &apos;+&apos;\r\n&apos;+strObservationsFiltered);
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pathogenDetected: &apos;+$c(&apos;pathogenDetected&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; tmp: &apos;+tmp);
	} // end if 
	
	return tmp;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>6a4a40c1-ee91-497a-b8df-e4bf5ea220b8</id>
        <name>Remove Observations From Observation Result Codes (New2)</name>
        <revision>20</revision>
        <lastModified>
          <time>1684421734891</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
Desc:  Evaluate the OBX versus the observed result code (OBX-3.1) evaluated against Configuration Setting variable: ADPHNotifiablePathogens to determine whether to exclude the Observation Results (OBX) segments from the message and set the pathogenDetected channelMap variable.
	
	fileName:		remove_observations_from_observation_result_codes_new2.js
	name:		Remove Observations From Observation Result Codes (New2)
	@authored:	Jeffrey Ritz
	@created:		2023-02-27
	@description:	Remove observations with Non-Detected Results and mark Detected to be Allowed/Filtered

	history:
	2023-05-18 JER - persist the OBR segment childIndex() and msg segment children() the OBR childIndex() remove the prior segment -&gt; ORC segment
	2023-04-26 JER - Modified to determine if should evaluate detectable or not
	2023-04-21 JER - Consider following https://github.com/nextgenhealthcare/connect/discussions/5244
	2023-02-27 JER - Cloned the Remove Observations From Observation Result Codes
*/
function remove_observations_from_observation_result_codes_new2(msg, allowedObservationCodeList, filterDetectable) {
	
	var scriptName= &apos;remove_observations_from_observation_result_codes_new2&apos;;
	var debug= 0;
	var detected= false;
	// Allowed Observations Filtered List
	var nonDetectedFilteredCount= 0;
	var nonDetectedFiltered= new Array();
	// Disallowed Observations Filtered listStyleType
	var disallowedObservationsCount= 0;
	var disallowedObservations= new Array();
	
	var permittedPathogenOrder= false;
	// 2023-04-26 JER - Modified to determine if should evaluate detectable or not
	
	var i= 1;
	var j= 1;
	var k= 1;
	var observationsFiltered = new Array();
	var observationsFilteredCount= 0;
	// var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);

	var num_orc= msg..ORC.length();

	for each(seg in msg..OBR) {	
	
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; seg[&apos;+j+&apos;]: &apos;+seg+&apos; childIndex(): &apos;+seg.childIndex());
		
		// 2023-05-18 JER - persist the OBR segment childIndex()
		var obrChildIndex= seg.childIndex(); 
		
		var allowedObservationSegments= 0;
		for each(obx in getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBX&apos;,false,&apos;OBR&apos;)) {
			
			// process each OBX
			if(obx[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString()== &apos;CWE&apos;) {
				var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.4&apos;].toString();
			} else {
				var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
			} // end if 
			var obx32= obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
			var obx51= obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
			
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+j+&apos;] obx31: &apos;+obx31+&apos; obx32: &apos;+obx32+&apos; obx51: &apos;+obx51);
			
			// 2023-02-27 JER - Modified from OBX.5.1 to OBX.5.2
			if(child[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().length&lt;1) {
				var curObservationValue=obx[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
			} else {
				var curObservationValue=obx51.toString().toUpperCase();
			} // end if 
			
			if(debug&gt;0) {
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] curObservationValue: &apos;+curObservationValue);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] obx31: &apos;+obx31+&apos; EVAL FOUND: &apos;+allowedObservationCodeList.indexOf(obx31)+&apos; allowedObservationCodeList: &apos;+allowedObservationCodeList);
			}
			// 2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
			if(allowedObservationCodeList.indexOf(obx31)&gt;-1) {	

				channelMap.put(&apos;pathogenDetected&apos;,true);
				// evaluate if element value is numerical exponential
				if(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains an exponential 1.00E value: &apos;+(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1));
				} // end if 
				
				// evaluate if element value is number 
				if(parseInt(curObservationValue.toString() !== &apos;NaN&apos;)) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains IS a number: &apos;+parseInt(curObservationValue.toString()!== &apos;NaN&apos;));
				} // end if 

				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; filterDetecteable: &apos;+filterDetecteable);
				// 2023-04-26 JER - Evaluate if allowing either Detected or Non-Detected values
				if(filterDetectable=== true) {

					// 2022-10-17 JER - Added evaluate if NaN - only 
					if((curObservationValue== &apos;DETECTED&apos;)||(curObservationValue== &apos;TRUE&apos;)||(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1)||parseInt(curObservationValue.toString()!== &apos;NaN&apos;)) {
				
						allowedObservationSegments++;
						detected= true;
						//tmp.appendChild(child);
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] DETECTED OBX.5.1 value: &apos;+curObservationValue+&apos; checkDetected: &apos;+filterDetecteable+&apos; DETECTED: &apos;+detected+&apos; KEEP SEGMENT: &apos;+obx);
					} else {
						nonDetectedFilteredCount++;
						var strNonDetectedFiltered= &apos;Non-Detected[&apos;+nonDetectedFilteredCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32;
						nonDetectedFiltered.push(strNonDetectedFiltered);

						delete msg.children()[obx.childIndex()];
					
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] NON-DETECTED OBX.5.1 value: &apos;+curObservationValue+&apos; checkDetected: &apos;+filterDetecteable+&apos; vs NON-DETECTED: &apos;+detected+&apos; REMOVE SEGMENT: &apos;+obx);
				
					} // end if 
				
				// 2023-04-26 JER - Evaluate if allowing either Detected or Non-Detected values
				} else {
					
					allowedObservationSegments++;
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] NO NON-DETECTED FILTER - ALLOW OBX.5.1 value &apos;+curObservationValue+&apos; checkDetected: &apos;+filterDetecteable+&apos; ALLOW ALL Detectable values ALLOW SEGMENT: &apos;+obx);
					
				} // end if 
			
			} else {
				
				disallowedObservationsCount++;
				var strDisallowedObservations= &apos;Disallowed Observations[&apos;+disallowedObservationsCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32;
				disallowedObservations.push(strDisallowedObservations);
				
				delete msg.children()[obx.childIndex()];
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.3.1 value: &apos;+obx31+&apos; DISALLOWED Observation[&apos;+disallowedObservationsCount+&apos;] REMOVE SEGMENT: &apos;+obx);
				
			} // end if 
			j++;
			
		} // end for 
		i++;
		
		// 2024-04-26 JER - Modified to evaluate if any allowedObservations are found - if none then remove associated OBR and SPM segments
		if(allowedObservationSegments&lt;1) {

			/*
			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;SPM&apos;,true,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;TEST::&apos;+scriptName+&apos; SPM getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()]; 
			*/
			
			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBR&apos;,false,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;TEST::&apos;+scriptName+&apos; OBR getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()]; 

			// 2023-05-18 JER - msg segment children() the OBR childIndex() remove the prior segment -&gt; ORC segment
			delete msg.children()[obrChildIndex-1];

			
		} // end if 
		
	} // end for each

	channelMap.put(&apos;specimenDetected&apos;,detected); // true, false, invalid
	channelMap.put(&apos;modified_msg&apos;,msg);
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; specimenDetected: &apos;+$c(&apos;specimenDetected&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg: &apos;+$c(&apos;modified_msg&apos;));
	} // end if 
	
	return msg;

} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>33061588-3e3a-43ac-8f10-862e5283ffe6</id>
        <name>Remove Observations From Observation Result Codes (New3)</name>
        <revision>2</revision>
        <lastModified>
          <time>1685382852602</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
Desc:  Evaluate the OBX versus the observed result code (OBX-3.1) evaluated against Configuration Setting variable: ADPHNotifiablePathogens to determine whether to exclude the Observation Results (OBX) segments from the message and set the pathogenDetected channelMap variable.
	
	fileName:		remove_observations_from_observation_result_codes_new3.js
	name:		Remove Observations From Observation Result Codes (New3)
	@authored:	Jeffrey Ritz
	@created:		2023-02-27
	@description:	Remove observations with Non-Detected Results and mark Detected to be Allowed/Filtered

	history:
	2023-05-22 JER - Modified to include the set of the curObservationValue of OBX.5.2 based on OBX.2.1 as &apos;CWE&apos;
	2023-05-18 JER - persist the OBR segment childIndex() and msg segment children() the OBR childIndex() remove the prior segment -&gt; ORC segment
	2023-04-26 JER - Modified to determine if should evaluate detectable or not
	2023-04-21 JER - Consider following https://github.com/nextgenhealthcare/connect/discussions/5244
	2023-02-27 JER - Cloned the Remove Observations From Observation Result Codes
*/
function remove_observations_from_observation_result_codes_new3(msg, allowedObservationCodeList, filterDetectable) {
	
	var scriptName= &apos;remove_observations_from_observation_result_codes_new3&apos;;
	var debug= 0;
	var detected= false;
	// Allowed Observations Filtered List
	var nonDetectedFilteredCount= 0;
	var nonDetectedFiltered= new Array();
	var lstNonDetectedFiltered= new Array();
	
	// Allowed Observations Filtered List
	var allowedObservationsCount= 0;
	var allowedObservations= new Array();
	var lstAllowedObservations= new Array();
	
	// Disallowed Observations Filtered listStyleType
	var disallowedObservationsCount= 0;
	var disallowedObservations= new Array();
	var lstDisallowedObservations= new Array();
	
	var permittedPathogenOrder= false;
	// 2023-04-26 JER - Modified to determine if should evaluate detectable or not
	
	var i= 1;
	var j= 1;
	var k= 1;
	var observationsFiltered = new Array();
	var observationsFilteredCount= 0;
	// 2023-05-18 JER - persist all OBR related segment indexes
	var arrObrChildIndex= new Array();
	
	// var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);

	var num_orc= msg..ORC.length();

	for each(seg in msg..OBR) {	

		var allowedObservationSegments= 0;
		
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; seg[&apos;+j+&apos;]: &apos;+seg+&apos; childIndex(): &apos;+seg.childIndex());
		
		// 2023-05-18 JER - persist the OBR segment childIndex()
		var obrChildIndex= seg.childIndex(); 
		
		var allowedObservationSegments= 0;
		for each(obx in getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBX&apos;,false,&apos;OBR&apos;)) {
			
			// process each OBX
			if(obx[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString()== &apos;CWE&apos;) {
				var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.4&apos;].toString();
				// 2023-05-22 JER - Modified to include the set of the curObservationValue of OBX.5.2 based on OBX.2.1 as &apos;CWE&apos;
				var curObservationValue=obx[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
			} else {
				var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
				// 2023-05-22 JER - Modified to include the set of the curObservationValue of OBX.5.2 based on OBX.2.1 as &apos;CWE&apos;
				var curObservationValue=obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
			} // end if 
			var obx32= obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
			var obx51= obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
			
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+j+&apos;] obx31: &apos;+obx31+&apos; obx32: &apos;+obx32+&apos; curObservationValue: &apos;+curObservationValue);
			
			/*
			// 2023-05-22 JER - Modified to include the set of the curObservationValue of OBX.5.2 based on OBX.2.1 as &apos;CWE&apos;
			// 2023-02-27 JER - Modified from OBX.5.1 to OBX.5.2
			if(child[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().length&lt;1) {
				var curObservationValue=obx[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
			} else {
				var curObservationValue=obx51.toString().toUpperCase();
			} // end if 
			*/
			
			if(debug&gt;0) {
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] obx31: &apos;+obx31+&apos; EVAL FOUND: &apos;+allowedObservationCodeList.indexOf(obx31)+&apos; allowedObservationCodeList: &apos;+allowedObservationCodeList);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] curObservationValue: &apos;+curObservationValue);
			}
			
			// 2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
			if(allowedObservationCodeList.indexOf(obx31)&gt;-1) {	

				channelMap.put(&apos;pathogenDetected&apos;,true);
				// evaluate if element value is numerical exponential
				if(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains an exponential 1.00E value: &apos;+(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1));
					curObservationValue= &apos;DETECTED&apos;;
				} // end if 

				// 8.01E+04
				if(curObservationValue.toString().indexOf(&apos;8.01E&apos;)&gt;-1) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains an exponential 8.01E value: &apos;+(curObservationValue.toString().indexOf(&apos;8.01E&apos;)&gt;-1));
					curObservationValue= &apos;DETECTED&apos;;
				} // end if 
				
				// evaluate if element value is number 
				if(parseInt(curObservationValue.toString() !== &apos;NaN&apos;)) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains IS a number: &apos;+parseInt(curObservationValue.toString()!== &apos;NaN&apos;));
					curObservationValue= &apos;DETECTED&apos;;
				} // end if 

				if(debug&gt;0) {
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] obx31: &apos;+obx31+&apos; filterDetectable: &apos;+filterDetectable+&apos; filterDetectable.indexOf(true): &apos;+(filterDetectable.indexOf(&apos;true&apos;)));
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] obx31: &apos;+obx31+&apos; curObservationValue: &apos;+curObservationValue.toUpperCase()+&apos; curObservationValue NEQ NOT DETECTED: &apos;+(curObservationValue.toUpperCase()!== &apos;NOT DETECTED&apos;));
				} // end if
				
				// 2023-04-26 JER - Evaluate if allowing either Detected or Non-Detected values
				if(filterDetectable.indexOf(&apos;true&apos;)&gt;-1) {

					// 2022-10-17 JER - Added evaluate if NaN - only 
					// if((curObservationValue== &apos;DETECTED&apos;)||(curObservationValue== &apos;TRUE&apos;)||(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1)||parseInt(curObservationValue.toString()!== &apos;NaN&apos;)) {
					// 2023-05-22 JER - Modified to evaluate only the string &apos;NOT DETECTED&apos;
					if(curObservationValue.toUpperCase()!== &apos;NOT DETECTED&apos;) {

						// required to evaluate to determine if require to filter ORM and SPM segments
						allowedObservationSegments++;
						
						allowedObservationsCount++;
						detected= true;
						var strAllowedObservations= &apos;OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] Allowed[&apos;+allowedObservationsCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32+&apos; curObservationValue: &apos;+curObservationValue;
						if(allowedObservations.indexOf(strAllowedObservations)&lt;0) {
							allowedObservations.push(strAllowedObservations);
						} // end if 
				
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] DETECTED OBX.5.1 value: &apos;+curObservationValue+&apos; checkDetected: &apos;+filterDetectable+&apos; DETECTED: &apos;+detected+&apos; KEEP SEGMENT: &apos;+obx);
					} else {
						
						nonDetectedFilteredCount++;
						var strNonDetectedFiltered= &apos;OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] Non-Detected[&apos;+nonDetectedFilteredCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32+&apos; curObservationValue: &apos;+curObservationValue;
						if(nonDetectedFiltered.indexOf(strNonDetectedFiltered)&lt;0) {
							nonDetectedFiltered.push(strNonDetectedFiltered);
						} // end if 
						delete msg.children()[obx.childIndex()];
					
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] NON-DETECTED OBX.5.1 value: &apos;+curObservationValue+&apos; checkDetected: &apos;+filterDetectable+&apos; vs NON-DETECTED: &apos;+detected+&apos; REMOVE SEGMENT: &apos;+obx);
				
					} // end if 
				
				// 2023-04-26 JER - Evaluate if allowing either Detected or Non-Detected values
				} else {

					detected= true;
					allowedObservationsCount++;
					var strAllowedObservations= &apos;OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] Allowed[&apos;+allowedObservationsCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32+&apos; curObservationValue: &apos;+curObservationValue;
					if(allowedObservations.indexOf(strAllowedObservations)&lt;0) {
						allowedObservations.push(strAllowedObservations);
					} // end if 
					
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] Allowed Observations OBX.5.1 value &apos;+curObservationValue+&apos; checkDetected: &apos;+filterDetectable+&apos; ALLOW ALL Detectable values ALLOW SEGMENT: &apos;+obx);
					
				} // end if 
			
			} else {
				
				disallowedObservationsCount++;
				var strDisallowedObservations= &apos;OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] Disallowed Observations[&apos;+disallowedObservationsCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32+&apos; curObservationValue: &apos;+curObservationValue;
				if(disallowedObservations.indexOf(strDisallowedObservations)&lt;0) {
					disallowedObservations.push(strDisallowedObservations);
				} // end if 
				
				delete msg.children()[obx.childIndex()];

				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.3.1 value: &apos;+obx31+&apos; DISALLOWED Observation[&apos;+disallowedObservationsCount+&apos;] REMOVE SEGMENT: &apos;+obx);
				
			} // end if 
			j++;
			
		} // end for 
		i++;

		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR childIndex[&apos;+obrChildIndex+&apos;] allowedObservationSegments: &apos;+allowedObservationSegments); 
		
		// 2024-04-26 JER - Modified to evaluate if any allowedObservations are found - if none then remove associated OBR and SPM segments
		if(allowedObservationSegments&lt;1) {

			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;SPM&apos;,true,&apos;OBR&apos;);

			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; delete SPM getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[obrChildIndex+1]+&apos; value: &apos;+getSegment);
			delete msg.children()[obrChildIndex+1]; 
			
			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBR&apos;,false,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; delete OBR getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()]; 

			// if(debug&gt;0) 
			//logger.error(&apos;DEBUG::&apos;+scriptName+&apos; delete segment typeof: &apos;+typeof(msg.children()[obrChildIndex-1])+&apos; index: &apos;+[obrChildIndex-1]+&apos; value: &apos;+msg.children()[obrChildIndex-1]);
			// 2023-05-18 JER - msg segment children() the OBR childIndex() remove the prior segment -&gt; ORC segment
			//delete msg.children()[obrChildIndex-1];

			
		} // end if 

		// per OBR segment push into an overall list to be persisted in channelMap
		lstAllowedObservations.push(allowedObservations);
		lstDisallowedObservations.push(disallowedObservations);
		lstNonDetectedFiltered.push(nonDetectedFiltered);
		
	} // end for each

	
	if(lstAllowedObservations.length&gt;0) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; lstAllowedObservations: &apos;+lstAllowedObservations); 
		channelMap.put(&apos;arrAllowedObservations&apos;,lstAllowedObservations);
	}  // end if 
	
	if(lstDisallowedObservations.length&gt;0) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; lstDisallowedObservations: &apos;+lstDisallowedObservations);  
		channelMap.put(&apos;arrDisallowedObservations&apos;,lstDisallowedObservations); 
	} // end if 
	
	if(lstNonDetectedFiltered.length&gt;0) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; lstNonDetectedFiltered: &apos;+lstNonDetectedFiltered); 
		channelMap.put(&apos;arrNonDetectedFiltered&apos;,lstNonDetectedFiltered); 
	} // end if 

	channelMap.put(&apos;specimenDetected&apos;,detected); // true, false, invalid
	channelMap.put(&apos;modified_msg&apos;,msg);
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; specimenDetected: &apos;+$c(&apos;specimenDetected&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg: &apos;+$c(&apos;modified_msg&apos;));
	} // end if 
	
	return msg;

}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>aa4e63f3-ba6f-443a-ad3d-549b334b33fa</id>
        <name>Remove Observations From Observation Result Codes New</name>
        <revision>44</revision>
        <lastModified>
          <time>1693008655886</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
Desc:  Evaluate the OBX versus the observed result code (OBX-3.1) evaluated against Configuration Setting variable: ADPHNotifiablePathogens to determine whether to exclude the Observation Results (OBX) segments from the message and set the pathogenDetected channelMap variable.
	
	fileName:		remove_observations_from_observation_result_codes_new.js
	name:		Remove Observations From Observation Result Codes (New)
	@authored:	Jeffrey Ritz
	@created:		2023-02-27
	@description:	Remove observations with Non-Detected Results and mark Detected to be Allowed/Filtered

	history:
	2023-08-25 JER - Modified moved the static Config Map setting to a function parameterized variable and added debug to check/verify two parameterized variables
	2023-04-26 JER - Modified to determine if should evaluate detectable or not
	2023-04-21 JER - Consider following https://github.com/nextgenhealthcare/connect/discussions/5244
	2023-02-27 JER - Cloned the Remove Observations From Observation Result Codes
*/
function remove_observations_from_observation_result_codes_new(msg, allowedObservationCodeList, filterNotifiablePathogensNonDetectable) {
	
	var scriptName= &apos;remove_observations_from_observation_result_codes_new&apos;;
	var debug= 0;
	var detected= false;
	// Allowed Observations Filtered List
	var nonDetectedFilteredCount= 0;
	var nonDetectedFiltered= new Array();
	// Disallowed Observations Filtered listStyleType
	var disallowedObservationsCount= 0;
	var disallowedObservations= new Array();
	
	var permittedPathogenOrder= false;
	// 2023-04-26 JER - Modified to determine if should evaluate detectable or not
	// 2023-08-25 JER - Modified moved the static Config Map setting to a function parameterized variable and added debug to check/verify two parameterized variables
	// var filterNotifiablePathogensNonDetectable= $cfg(&apos;TNNotifiablePathogensDetectable&apos;);
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; allowedObservationCodeList: &apos;+allowedObservationCodeList);
		logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; filterNotifiablePathogensNonDetectable: &apos;+filterNotifiablePathogensNonDetectable);
	} // end if 
	
	var i= 1;
	var j= 1;
	var observationsFiltered = new Array();
	var observationsFilteredCount= 0;
	// var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);
	
	for each(seg in msg..OBR) {	
	
		logger.error(&apos;TEST::&apos;+scriptName+&apos; seg[&apos;+j+&apos;]: &apos;+seg);
	
		var allowedObservationSegments= 0;
		for each(obx in getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBX&apos;,false,&apos;OBR&apos;)) {
			
			// process each OBX
			var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
			var obx32= obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
			var obx51= obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
			
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+j+&apos;] obx31: &apos;+obx31+&apos; obx32: &apos;+obx32+&apos; obx51: &apos;+obx51);
			
			// 2023-02-27 JER - Modified from OBX.5.1 to OBX.5.2
			if(child[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().length&lt;1) {
				var curObservationValue=obx[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
			} else {
				var curObservationValue=obx51.toString().toUpperCase();
			} // end if 
			
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] curObservationValue: &apos;+curObservationValue);
			
			// 2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
			if(allowedObservationCodeList.indexOf(obx31)&gt;-1) {	
			
				// evaluate if element value is numerical exponential
				if(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains an exponential 1.00E value: &apos;+(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1));
				} // end if 
				
				// evaluate if element value is number 
				if(parseInt(curObservationValue.toString() !== &apos;NaN&apos;)) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains IS a number: &apos;+parseInt(curObservationValue.toString()!== &apos;NaN&apos;));
				} // end if 

				// 2023-04-26 JER - Evaluate if allowing either Detected or Non-Detected values
				if(filterNotifiablePathogensNonDetectable== true) {

					// 2022-10-17 JER - Added evaluate if NaN - only 
					if((curObservationValue== &apos;DETECTED&apos;)||(curObservationValue== &apos;TRUE&apos;)||(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1)||parseInt(curObservationValue.toString()!== &apos;NaN&apos;)) {
				
						allowedObservationSegments++;
						detected= true;
						//tmp.appendChild(child);
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.1 value: &apos;+curObservationValue+&apos; DETECTED: &apos;+detected+&apos; KEEP SEGMENT: &apos;+obx);
					} else {
						nonDetectedFilteredCount++;
						var strNonDetectedFiltered= &apos;Non-Detected[&apos;+nonDetectedFilteredCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32;
						nonDetectedFiltered.push(strNonDetectedFiltered);
				
						delete msg.children()[obx.childIndex()];
					
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.1 value: &apos;+curObservationValue+&apos; NON-DETECTED: &apos;+detected+&apos; REMOVE SEGMENT: &apos;+obx);
				
					} // end if 
				
				// 2023-04-26 JER - Evaluate if allowing either Detected or Non-Detected values
				} else {
					
					allowedObservationSegments++;
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] ALLOW OBX.5.1 value &apos;+curObservationValue+&apos; ALLOW ALL Detectable values ALLOW SEGMENT: &apos;+obx);
					
				} // end if 
			
			} else {
				
				disallowedObservationsCount++;
				var strDisallowedObservations= &apos;Disallowed Observations[&apos;+disallowedObservationsCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32;
				disallowedObservations.push(strDisallowedObservations);
				
				delete msg.children()[obx.childIndex()];
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.3.1 value: &apos;+obx31+&apos; DISALLOWED Observation[&apos;+disallowedObservationsCount+&apos;] REMOVE SEGMENT: &apos;+obx);
				
			} // end if 
			j++;
			
		} // end for 
		i++;
		
		// 2024-04-26 JER - Modified to evaluate if any allowedObservations are found - if none then remove associated OBR and SPM segments
		if(allowedObservationSegments&lt;1) {

			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;SPM&apos;,true,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;TEST::&apos;+scriptName+&apos; SPM getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()+1]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()+1]; 

			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBR&apos;,false,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;TEST::&apos;+scriptName+&apos; OBR getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()]; 
			
		} // end if 
		
	} // end for each

	channelMap.put(&apos;disallowedObservations&apos;,disallowedObservations); 
	channelMap.put(&apos;specimenDetected&apos;,detected); // true, false, invalid
	channelMap.put(&apos;modified_msg&apos;,msg);
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; disallowedObservations: &apos;+$c(&apos;disallowedObservations&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; specimenDetected: &apos;+$c(&apos;specimenDetected&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg: &apos;+$c(&apos;modified_msg&apos;));
	} // end if 
	
	return msg;

} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>9178bdf8-2739-408f-af89-2253335982ee</id>
        <name>Remove Observations From Observation Result Codes Non-Detected Results</name>
        <revision>2</revision>
        <lastModified>
          <time>1687559459663</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
Desc:  Evaluate the OBX versus the observed result code (OBX-3.1) evaluated against Configuration Setting variable: ADPHNotifiablePathogens to determine whether to exclude the Observation Results (OBX) segments from the message and set the pathogenDetected channelMap variable.
	
	fileName:		remove_observations_from_observation_result_codes_new.js
	name:			Remove Observations From Observation Result Codes (New)
	@authored:		Jeffrey Ritz
	@created:		2023-02-27
	@description:	Remove observations with Non-Detected Results and mark Detected to be Allowed/Filtered

	history:
	2023-05-22 JER - Modified to include the set of the curObservationValue of OBX.5.2 based on OBX.2.1 as &apos;CWE&apos;
	2023-05-18 JER - persist the OBR segment childIndex() and msg segment children() the OBR childIndex() remove the prior segment -&gt; ORC segment
	2023-04-26 JER - Modified to determine if should evaluate detectable or not
	2023-04-21 JER - Consider following https://github.com/nextgenhealthcare/connect/discussions/5244
	2023-02-27 JER - Cloned the Remove Observations From Observation Result Codes
*/
function remove_observations_from_observation_result_codes_new(msg, allowedObservationCodeList, filterDetectable) {
	
	var scriptName= &apos;remove_observations_from_observation_result_codes_new&apos;;
	var debug= 0;
	var detected= false;
	// Allowed Observations Filtered List
	var nonDetectedFilteredCount= 0;
	var nonDetectedFiltered= new Array();
	var lstNonDetectedFiltered= new Array();
	
	// Allowed Observations Filtered List
	var allowedObservationsCount= 0;
	var allowedObservations= new Array();
	var lstAllowedObservations= new Array();
	
	// Disallowed Observations Filtered listStyleType
	var disallowedObservationsCount= 0;
	var disallowedObservations= new Array();
	var lstDisallowedObservations= new Array();
	
	var permittedPathogenOrder= false;
	// 2023-04-26 JER - Modified to determine if should evaluate detectable or not
	
	var i= 1;
	var j= 1;
	var k= 1;
	var observationsFiltered = new Array();
	var observationsFilteredCount= 0;
	// 2023-05-18 JER - persist all OBR related segment indexes
	var arrObrChildIndex= new Array();
	
	// var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);

	var num_orc= msg..ORC.length();

	for each(seg in msg..OBR) {	

		var allowedObservationSegments= 0;
		
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; seg[&apos;+j+&apos;]: &apos;+seg+&apos; childIndex(): &apos;+seg.childIndex());
		
		// 2023-05-18 JER - persist the OBR segment childIndex()
		var obrChildIndex= seg.childIndex(); 
		
		var allowedObservationSegments= 0;
		for each(obx in getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBX&apos;,false,&apos;OBR&apos;)) {
			
			// process each OBX
			if(obx[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString()== &apos;CWE&apos;) {
				var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.4&apos;].toString();
				// 2023-05-22 JER - Modified to include the set of the curObservationValue of OBX.5.2 based on OBX.2.1 as &apos;CWE&apos;
				var curObservationValue=obx[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
			} else {
				var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
				// 2023-05-22 JER - Modified to include the set of the curObservationValue of OBX.5.2 based on OBX.2.1 as &apos;CWE&apos;
				var curObservationValue=obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
			} // end if 
			var obx32= obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
			var obx51= obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
			
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+j+&apos;] obx31: &apos;+obx31+&apos; obx32: &apos;+obx32+&apos; curObservationValue: &apos;+curObservationValue);
			
			/*
			// 2023-05-22 JER - Modified to include the set of the curObservationValue of OBX.5.2 based on OBX.2.1 as &apos;CWE&apos;
			// 2023-02-27 JER - Modified from OBX.5.1 to OBX.5.2
			if(child[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().length&lt;1) {
				var curObservationValue=obx[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
			} else {
				var curObservationValue=obx51.toString().toUpperCase();
			} // end if 
			*/
			
			if(debug&gt;0) {
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] obx31: &apos;+obx31+&apos; EVAL FOUND: &apos;+allowedObservationCodeList.indexOf(obx31)+&apos; allowedObservationCodeList: &apos;+allowedObservationCodeList);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] curObservationValue: &apos;+curObservationValue);
			}
			
			// 2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
			if(allowedObservationCodeList.indexOf(obx31)&gt;-1) {	

				channelMap.put(&apos;pathogenDetected&apos;,true);
				// evaluate if element value is numerical exponential
				if(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains an exponential 1.00E value: &apos;+(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1));
					curObservationValue= &apos;DETECTED&apos;;
				} // end if 

				// 8.01E+04
				if(curObservationValue.toString().indexOf(&apos;8.01E&apos;)&gt;-1) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains an exponential 8.01E value: &apos;+(curObservationValue.toString().indexOf(&apos;8.01E&apos;)&gt;-1));
					curObservationValue= &apos;DETECTED&apos;;
				} // end if 
				
				// evaluate if element value is number 
				if(parseInt(curObservationValue.toString() !== &apos;NaN&apos;)) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains IS a number: &apos;+parseInt(curObservationValue.toString()!== &apos;NaN&apos;));
					curObservationValue= &apos;DETECTED&apos;;
				} // end if 

				if(debug&gt;0) {
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] obx31: &apos;+obx31+&apos; filterDetectable: &apos;+filterDetectable+&apos; filterDetectable.indexOf(true): &apos;+(filterDetectable.indexOf(&apos;true&apos;)));
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] obx31: &apos;+obx31+&apos; curObservationValue: &apos;+curObservationValue.toUpperCase()+&apos; curObservationValue NEQ NOT DETECTED: &apos;+(curObservationValue.toUpperCase()!== &apos;NOT DETECTED&apos;));
				} // end if
				
				// 2023-04-26 JER - Evaluate if allowing either Detected or Non-Detected values
				if(filterDetectable.indexOf(&apos;true&apos;)&gt;-1) {

					// 2022-10-17 JER - Added evaluate if NaN - only 
					// if((curObservationValue== &apos;DETECTED&apos;)||(curObservationValue== &apos;TRUE&apos;)||(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1)||parseInt(curObservationValue.toString()!== &apos;NaN&apos;)) {
					// 2023-05-22 JER - Modified to evaluate only the string &apos;NOT DETECTED&apos;
					if(curObservationValue.toUpperCase()!== &apos;NOT DETECTED&apos;) {

						// required to evaluate to determine if require to filter ORM and SPM segments
						allowedObservationSegments++;
						
						allowedObservationsCount++;
						detected= true;
						var strAllowedObservations= &apos;OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] Allowed[&apos;+allowedObservationsCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32+&apos; curObservationValue: &apos;+curObservationValue;
						if(allowedObservations.indexOf(strAllowedObservations)&lt;0) {
							allowedObservations.push(strAllowedObservations);
						} // end if 
				
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] DETECTED OBX.5.1 value: &apos;+curObservationValue+&apos; checkDetected: &apos;+filterDetectable+&apos; DETECTED: &apos;+detected+&apos; KEEP SEGMENT: &apos;+obx);
					} else {
						
						nonDetectedFilteredCount++;
						var strNonDetectedFiltered= &apos;OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] Non-Detected[&apos;+nonDetectedFilteredCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32+&apos; curObservationValue: &apos;+curObservationValue;
						if(nonDetectedFiltered.indexOf(strNonDetectedFiltered)&lt;0) {
							nonDetectedFiltered.push(strNonDetectedFiltered);
						} // end if 
						delete msg.children()[obx.childIndex()];
					
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] NON-DETECTED OBX.5.1 value: &apos;+curObservationValue+&apos; checkDetected: &apos;+filterDetectable+&apos; vs NON-DETECTED: &apos;+detected+&apos; REMOVE SEGMENT: &apos;+obx);
				
					} // end if 
				
				// 2023-04-26 JER - Evaluate if allowing either Detected or Non-Detected values
				} else {

					detected= true;
					allowedObservationsCount++;
					var strAllowedObservations= &apos;OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] Allowed[&apos;+allowedObservationsCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32+&apos; curObservationValue: &apos;+curObservationValue;
					if(allowedObservations.indexOf(strAllowedObservations)&lt;0) {
						allowedObservations.push(strAllowedObservations);
					} // end if 
					
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] Allowed Observations OBX.5.1 value &apos;+curObservationValue+&apos; checkDetected: &apos;+filterDetectable+&apos; ALLOW ALL Detectable values ALLOW SEGMENT: &apos;+obx);
					
				} // end if 
			
			} else {
				
				disallowedObservationsCount++;
				var strDisallowedObservations= &apos;OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] Disallowed Observations[&apos;+disallowedObservationsCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32+&apos; curObservationValue: &apos;+curObservationValue;
				if(disallowedObservations.indexOf(strDisallowedObservations)&lt;0) {
					disallowedObservations.push(strDisallowedObservations);
				} // end if 
				
				delete msg.children()[obx.childIndex()];

				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.3.1 value: &apos;+obx31+&apos; DISALLOWED Observation[&apos;+disallowedObservationsCount+&apos;] REMOVE SEGMENT: &apos;+obx);
				
			} // end if 
			j++;
			
		} // end for 
		i++;

		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR childIndex[&apos;+obrChildIndex+&apos;] allowedObservationSegments: &apos;+allowedObservationSegments); 
		
		// 2024-04-26 JER - Modified to evaluate if any allowedObservations are found - if none then remove associated OBR and SPM segments
		if(allowedObservationSegments&lt;1) {

			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;SPM&apos;,true,&apos;OBR&apos;);

			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; delete SPM getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[obrChildIndex+1]+&apos; value: &apos;+getSegment);
			delete msg.children()[obrChildIndex+1]; 
			
			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBR&apos;,false,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; delete OBR getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()]; 

			// if(debug&gt;0) 
			//logger.error(&apos;DEBUG::&apos;+scriptName+&apos; delete segment typeof: &apos;+typeof(msg.children()[obrChildIndex-1])+&apos; index: &apos;+[obrChildIndex-1]+&apos; value: &apos;+msg.children()[obrChildIndex-1]);
			// 2023-05-18 JER - msg segment children() the OBR childIndex() remove the prior segment -&gt; ORC segment
			//delete msg.children()[obrChildIndex-1];

			
		} // end if 

		// per OBR segment push into an overall list to be persisted in channelMap
		lstAllowedObservations.push(allowedObservations);
		lstDisallowedObservations.push(disallowedObservations);
		lstNonDetectedFiltered.push(nonDetectedFiltered);
		
	} // end for each

	
	if(lstAllowedObservations.length&gt;0) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; lstAllowedObservations: &apos;+lstAllowedObservations); 
		channelMap.put(&apos;arrAllowedObservations&apos;,lstAllowedObservations);
	}  // end if 
	
	if(lstDisallowedObservations.length&gt;0) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; lstDisallowedObservations: &apos;+lstDisallowedObservations);  
		channelMap.put(&apos;arrDisallowedObservations&apos;,lstDisallowedObservations); 
	} // end if 
	
	if(lstNonDetectedFiltered.length&gt;0) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; lstNonDetectedFiltered: &apos;+lstNonDetectedFiltered); 
		channelMap.put(&apos;arrNonDetectedFiltered&apos;,lstNonDetectedFiltered); 
	} // end if 

	channelMap.put(&apos;specimenDetected&apos;,detected); // true, false, invalid
	channelMap.put(&apos;modified_msg&apos;,msg);
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; specimenDetected: &apos;+$c(&apos;specimenDetected&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg: &apos;+$c(&apos;modified_msg&apos;));
	} // end if 
	
	return msg;

}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>d8952806-86fd-4404-b8ed-f3bd375c9eb9</id>
        <name>Remove Observations Non Detected Results New</name>
        <revision>10</revision>
        <lastModified>
          <time>1682539562304</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: Remove observations with Non-Detected Results and mark Detected to be Allowed/Filtered  

	@fileName:	remove_observations_non_detected_results_new.js
	@name:		Remove Observations Non Detected Results (New)
	@authored:	Jeffrey Ritz
	@created:		2023-02-27
	@description:	Remove observations with Non-Detected Results and mark Detected to be Allowed/Filtered

	history:
	2023-04-21 JER - Consider following https://github.com/nextgenhealthcare/connect/discussions/5244
	2023-02-27 JER - Cloned the Remove Observations From Observation Result Codes
*/
function remove_observations_non_detected_results_new(msg) {
	
	var scriptName= &apos;remove_observations_non_detected_results_new&apos;;
	var debug= 0;
	var nonDetectedFiltered= new Array();
	var nonDetectedFilteredCount= 0;
	var detected= false;
	var i= 1;
	var j= 1;
	var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);
	
	for each(seg in msg..OBR) {	
	
		for each(obx in getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBX&apos;,false,&apos;OBR&apos;)) {
			
			// process each OBX
			var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
			var obx32= obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
			var obx51= obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
			
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; child[OBX.5][OBX.5.2]: &apos;+child[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase()+&apos; length: &apos;+child[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().length);
			
			// 2023-02-27 JER - Modified from OBX.5.1 to OBX.5.2
			if(child[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().length&lt;1) {
				var curObservationValue=child[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
			} else {
				var curObservationValue=obx51.toString().toUpperCase();
			} // end if 
			
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] curObservationValue: &apos;+curObservationValue);
			
			// if(debug&gt;0) 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] typeof: &apos;+typeof(obx31)+&apos; obx31: &apos;+obx31+&apos; obx32: &apos;+obx32+&apos; obx51: &apos;+obx51+&apos; curObservationValue: &apos;+curObservationValue);
			
			// evaluate if element value is numerical exponential
			if(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains an exponential 1.00E value: &apos;+(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1));
			} // end if 
				
			// evaluate if element value is number 
			if(parseInt(curObservationValue.toString() !== &apos;NaN&apos;)) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains IS a number: &apos;+parseInt(curObservationValue.toString()!== &apos;NaN&apos;));
			} // end if 

			// 2022-10-17 JER - Added evaluate if NaN - only 
			if((curObservationValue== &apos;DETECTED&apos;)||(curObservationValue== &apos;TRUE&apos;)||(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1)||parseInt(curObservationValue.toString()!== &apos;NaN&apos;)) {
				
				detected= true;
				//tmp.appendChild(child);
				// if(debug&gt;0) 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.1 value: &apos;+curObservationValue+&apos; DETECTED: &apos;+detected+&apos; KEEP SEGMENT: &apos;+obx);
				
			} else {
				
				nonDetectedFilteredCount++;
				var strNonDetectedFiltered= &apos;Non-Detected[&apos;+nonDetectedFilteredCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32;
				nonDetectedFiltered.push(strNonDetectedFiltered);
				
				delete msg.children()[obx.childIndex()];
					
				// if(debug&gt;0) 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.1 value: &apos;+curObservationValue+&apos; NON-DETECTED: &apos;+detected+&apos; REMOVE SEGMENT: &apos;+obx);
				
			} // end if 	
			j++;
			
		} // end for 
		
		if(getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBX&apos;,false,&apos;OBR&apos;).length == 0) {
			// if(debug&gt;0) 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] REMOVED related segments DELETE segment: &apos;+msg.children()[seg.childIndex()]);
			delete msg.children()[seg.childIndex()];
			
		} // end if 
		
		i++;
	} // end for each

	channelMap.put(&apos;specimenDetected&apos;,detected); // true, false, invalid
	channelMap.put(&apos;modified_msg&apos;,tmp);
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; specimenDetected: &apos;+$c(&apos;specimenDetected&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; tmp: &apos;+$c(&apos;modified_msg&apos;));
	} // end if 
	
	return tmp;

} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>7ba5e0e9-311b-494f-812f-7afa58f047fe</id>
        <name>Remove Observations Non-Detected Observation Values</name>
        <revision>1</revision>
        <lastModified>
          <time>1684206232224</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  Evaluate the OBX versus the observation (OBX) segments with removeNonDetected parameter from the message and set the pathogenDetected channelMap variable.
	
	fileName:		remove_observations_non_detected_observation_values.js
	name:		Remove Observations Non-Detected Observation Values
	authored:		Jeffrey Ritz
	created:		2023-05-10
	description:	Evaluate the OBX versus the observed result code (OBX-3.4) evaluated against Configuration Setting variable: TNRemoveObservations
	to determine whether to exclude the Observation Results (OBX) segments from the message. 
	history:
	2023-04-18 JER - Cloned the pre-existing remove_observations_from_observation_result_codes 
*/
function remove_observations_non_detected_observation_values(msg, removeNonDetected) {
	
	var scriptName= &apos;remove_observations_non_detected_observation_values&apos;;
	var debug= 0;
	var detected= false;
	var pathogenDetected= false;
	
	// allowedObservations
	var allowedObservationsCount= 0;
	var allowedObservations= new Array();
	
	// removedObservations
	var removedObservationsCount= 0;
	var removedObservations= new Array();
	if(typeof(removeNonDetected)== undefined) var removeNonDetected= 0;
	
	var i= 1;
	var j= 1;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; removeObservations: &apos;+removeObservations); 

	// var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);
	

	for each(seg in msg..OBR) {
	
		var perSegAllowedObservationSegments= 0;
		
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof: &apos;+typeof(seg)+&apos; seg[&apos;+j+&apos;]: &apos;+seg);
	
		var allowedObservationSegments= 0;
		for each(obx in getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBX&apos;,false,&apos;OBR&apos;)) {
			
			// process each OBX
			var obx21= obx[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString;
			var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
			var obx32= obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
			var obx34= obx[&apos;OBX.3&apos;][&apos;OBX.3.4&apos;].toString();
			var obx51= obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
			
			// 2023-02-27 JER - Modified from OBX.5.1 to OBX.5.2
			if(obx[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString()== &apos;CWE&apos;) {
				var observationCode= obx34;
				var curObservationValue=	obx[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
			} else {
				var observationCode= obx31;
				var curObservationValue=	obx51.toString().toUpperCase();
			} // end if
						
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+j+&apos;] observationCode: &apos;+observationCode+&apos; obx31: &apos;+obx31+&apos; obx32: &apos;+obx32+&apos; obx51: &apos;+obx51+&apos; curObservationValue: &apos;+curObservationValue);
			
			//if(debug&gt;0) { 
				// logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] curObservationValue: &apos;+curObservationValue);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] observationCode: &apos;+observationCode+&apos; removeObservations: &apos;+removeObservations+&apos; EVAL: &apos;+removeObservations.indexOf(observationCode));
			//}
			

			// 2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] FOUND Observation Code: &apos;+observationCode+&apos; value: &apos;+curObservationValue+&apos; from the list of codes: &apos;+removeObservations+&apos; evaluation: &apos;+removeObservations.indexOf(observationCode)+&apos; to ADD this observation OBX Segment.&apos;); 
			
			// 2023-04-26 JER - Evaluate if allowing either Detected or Non-Detected values
			if(removeNonDetected&gt;0) {
				
				if(curObservationValue.indexOf(&apos;NOT DETECTED&apos;)&gt;-1) {
					removedObservationsCount++;
					var strObservationCode= observationCode+&apos;:&apos;+curObservationValue;
					var strRemovedObservations= &apos;Filtered Observation[&apos;+removedObservationsCount+&apos;] Observation CODE: &apos;+observationCode+&apos; DESCRIPTION: &apos;+obx32+&apos; obx34: &apos;+obx34+&apos; curObservationValue: &apos;+curObservationValue+&apos;\t\r\n&apos;;
					removedObservations.push(strObservationCode);
						
					delete msg.children()[obx.childIndex()];
						
					// if(debug&gt;0) 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; REMOVE removable Non-Detected observation CODE: &apos;+observationCode+&apos; removeNonDetected: &apos;+removeNonDetected+&apos; removeObservations[&apos;+removedObservationsCount+&apos;] removedObservations:&apos; +strRemovedObservations);
				} else {
					pathogenDetected= true;
						
					perSegAllowedObservationSegments++;
					allowedObservationsCount++;
					var strObservationCode= observationCode+&apos;:&apos;+curObservationValue;
					var strAllowedObservations= &apos;Allowed Observations[&apos;+allowedObservationsCount+&apos;] Observation CODE: &apos;+observationCode+&apos; DESCRIPTION: &apos;+obx32+ &apos;obx34: &apos;+obx34;
					allowedObservations.push(strObservationCode);
					
					// if(debug&gt;0) 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; PERMITTED removable Detected observation CODE: &apos;+observationCode+&apos; removeNonDetected: &apos;+removeNonDetected+&apos; allowedObservations[&apos;+allowedObservationsCount+&apos;] allowObservations:&apos; +strAllowedObservations);
				} // end if 
			
			} // end if 
			j++;
			
		} // end for 
		i++;
		
		// 2024-04-26 JER - Modified to evaluate if any allowedObservations are found - if none then remove associated OBR and SPM segments
		if(perSegAllowedObservationSegments&lt;1) {

			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;SPM&apos;,true,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;TEST::&apos;+scriptName+&apos; SPM getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()+1]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()+1]; 

			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBR&apos;,false,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;TEST::&apos;+scriptName+&apos; OBR getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()]; 
			
		} // end if 
		
	} // end for each

	channelMap.put(&apos;allowedObservations&apos;,allowedObservations);
	channelMap.put(&apos;removedObservations&apos;,removedObservations);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; allowedObservations: &apos;+allowedObservations);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; removedObservations: &apos;+removedObservations);
	} // end if 
	
	channelMap.put(&apos;pathogenDetected&apos;,pathogenDetected); // true, false, invalid
	channelMap.put(&apos;modified_msg&apos;,msg);
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pathogenDetected: &apos;+$c(&apos;pathogenDetected&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg: &apos;+$c(&apos;modified_msg&apos;));
	} // end if 
	
	return msg;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>9b90804b-36fb-4199-9584-7cc94b798c26</id>
        <name>Remove Observations Non-Detected Results</name>
        <revision>14</revision>
        <lastModified>
          <time>1684206232088</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc: Remove observations with Non-Detected Results and mark Detected to be Allowed/Filtered  

	@fileName:	remove_observations_non_detected_results.js
	@name:		Remove Observations Non Detected Results
	@authored:	Jeffrey Ritz
	@created:		2023-02-27
	@description:	Remove observations with Non-Detected Results and mark Detected to be Allowed/Filtered

	history:
	2023-02-27 JER - Cloned the Remove Observations From Observation Result Codes
*/
function remove_observations_non_detected_results(msg) {
	
	var scriptName= &apos;remove_observations_non_detected_results&apos;;
	var debug= 0;
	var detected= false;
	var i= 1;
	var j= 1;
	var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);
	
	// for each segment - child per msg.children()
	for each(child in msg.children()) {
	
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof: &apos;+typeof(child)+&apos; localName: &apos;+child.localName()+&apos; child: &apos;+child);
	
		if(child.localName()== &apos;OBX&apos;) {
		
			// process each OBX
			var obx31= child[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
			
			if(debug&gt;0) {
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;] typeof: &apos;+typeof(obx31)+&apos; obx31: &apos;+obx31);
			}
			
			// 2023-02-27 JER - Modified from OBX.5.1 to OBX.5.2
			var curObservationValue=child[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
				
			// evaluate if element value is numerical exponential
			if(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; determined value contains an exponential 1.00E value: &apos;+(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1));
			}
				
			// evaluate if element value is number 
			if(parseInt(curObservationValue.toString() !== &apos;NaN&apos;)) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; determined value contains IS a number: &apos;+parseInt(curObservationValue.toString()!== &apos;NaN&apos;));
			}
	
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;].5.1 curObservationValue: &apos;+curObservationValue);
				
			// 2022-10-17 JER - Added evaluate if NaN - only 
			if((curObservationValue== &apos;DETECTED&apos;)||(curObservationValue== &apos;TRUE&apos;)||(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1)||parseInt(curObservationValue.toString()!== &apos;NaN&apos;)) {
				detected= true;
				// tmp appended child object from msg.children()
				// 2023-02-24 JER - Modified to use appendChild E4X denoted XML function
				// tmp+= child;
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] determined value CONTAINS: &apos;+curObservationValue+&apos; value - adding this segment.&apos;);
				tmp.appendChild(child);
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] ADD SEGMENT: &apos;+child.localName());
			} else {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] determined value CONTAINS: &apos;+curObservationValue+&apos; value is a Non-Detected or an Un-expected value - skipping this segment.&apos;);
			} // end if 	
			i++;
		} else {
			// 2023-02-24 JER - Modified to use appendChild E4X denoted XML function
			// tmp+= child;
			tmp.appendChild(child);
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] ADD SEGMENT: &apos;+child.localName());
		} // end for
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; tmp[&apos;+j+&apos;] contains: &apos;+tmp);
		j++;
	} // end for
	
	channelMap.put(&apos;specimenDetected&apos;,detected); // true, false, invalid
	channelMap.put(&apos;modified_msg&apos;,tmp);
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; specimenDetected: &apos;+$c(&apos;specimenDetected&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; tmp: &apos;+$c(&apos;modified_msg&apos;));
	} // end if 
	
	return tmp;
}
</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>cd97709d-5752-447a-b5c0-c49d7f0f9f06</id>
        <name>Remove Observations Using Observation Result Codes</name>
        <revision>3</revision>
        <lastModified>
          <time>1690570753987</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
Desc:  Evaluate the OBX versus the observed result code (OBX-3.1) evaluated against Configuration Setting variable: ADPHNotifiablePathogens to determine whether to exclude the Observation Results (OBX) segments from the message and set the pathogenDetected channelMap variable.
	
	fileName:		remove_observations_using_observation_result_codes.js
	name:			Remove Observations Using Observation Result Codes
	@authored:		Jeffrey Ritz
	@created:		2023-02-27
	@description:	Remove observations with Non-Detected Results and mark Detected to be Allowed/Filtered

	history:
	2023-07-27 JER - Modified to include isCovid boolean argument to determine how to set the observationCode and observationValue
	2023-04-26 JER - Modified to determine if should evaluate detectable or not
	2023-04-21 JER - Consider following https://github.com/nextgenhealthcare/connect/discussions/5244
	2023-02-27 JER - Cloned the Remove Observations From Observation Result Codes
*/
function remove_observations_using_observation_result_codes(msg, allowedObservationCodeList, isCovid) {
	
	var scriptName= &apos;remove_observations_using_observation_result_codes&apos;;
	var debug= 0;
	var detected= false;
	
	// Disallowed Observations Filtered List
	var disallowedObservationsCount= 0;
	var disallowedObservations= new Array();
	
	// Allowed Observations Filtered List
	var allowedObservationsCount= 0;
	var allowedObservations= new Array();
	
	var i= 1;
	var j= 1;
	var observationsFiltered = new Array();
	var observationsFilteredCount= 0;
	// var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; allowedObservationCodeList: &apos;+allowedObservationCodeList);
	
	for each(seg in msg..OBR) {	
	
		if(debug&gt;0) logger.error(&apos;TEST::&apos;+scriptName+&apos; seg[&apos;+j+&apos;]: &apos;+seg);
	
		var allowedObservationSegments= 0;
		for each(obx in getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBX&apos;,false,&apos;OBR&apos;)) {

			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; obx: &apos;+obx);

			var obx32= obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
			var obx51= obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();

			if(typeof(isCovid)!== undefined) {
				if(isCovid== true) {
					
					var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
					var observationCode=  obx31;
					var observationValue= obx[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
				
				} else {
					// process each OBX
					if(obx[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString()== &apos;CWE&apos;) {
						var obx34= obx[&apos;OBX.3&apos;][&apos;OBX.3.4&apos;].toString();
						var observationCode=  obx34;
						var observationValue= obx[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
					} else {
						var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
						var observationCode=  obx31;
						var observationValue= obx51.toString().toUpperCase();
					} // end if
				} // end if 

			} else {
				// process each OBX
				if(obx[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString()== &apos;CWE&apos;) {
					var obx34= obx[&apos;OBX.3&apos;][&apos;OBX.3.4&apos;].toString();
					var observationCode=  obx34;
					var observationValue= obx[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
				} else {
					var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
					var observationCode=  obx31;
					var observationValue= obx51.toString().toUpperCase();
				} // end if
			} // end if 
			
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+j+&apos;] observationCode: &apos;+observationCode+&apos; observationValue: &apos;+observationValue+&apos; Eval: &apos;+allowedObservationCodeList.indexOf(observationCode)+&apos; allowedObservationCodeList: &apos;+allowedObservationCodeList);
			
			// 2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
			if(allowedObservationCodeList.indexOf(observationCode)&gt;-1) {	

				allowedObservationsCount++;
				detected= true;
				var logText= &apos;observationCode: &apos;+observationCode+&apos; observationValue: &apos;+observationValue;
				var strAllowedObservation= &apos;Allowed[&apos;+allowedObservationsCount+&apos;] &apos;+logText;
				allowedObservations.push(strAllowedObservation);
				allowedObservationSegments++;

				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] ALLOWED logText: &apos;+logText+&apos; DETECTED: &apos;+detected+&apos; KEEP SEGMENT: &apos;+obx);
			
			} else {
				
				disallowedObservationsCount++;
				var logText= &apos;observationCode: &apos;+observationCode+&apos; observationValue: &apos;+observationValue;
				var strDisallowedObservation= &apos;Disallowed[&apos;+disallowedObservationsCount+&apos;] &apos;+logText;
				disallowedObservations.push(strDisallowedObservation);

				delete msg.children()[obx.childIndex()];
					
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] DISALLOWED logText: &apos;+logText+&apos; DETECTED: &apos;+detected+&apos; REMOVE SEGMENT: &apos;+obx);
				
			} // end if 
			j++;
			
		} // end for 
		i++;

		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; allowedObservationSegments: &apos;+allowedObservationSegments);
		
		// 2024-04-26 JER - Modified to evaluate if any allowedObservations are found - if none then remove associated OBR and SPM segments
		if(allowedObservationSegments&lt;1) {

			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;SPM&apos;,true,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;TEST::&apos;+scriptName+&apos; SPM getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()+1]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()+1]; 

			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBR&apos;,false,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;TEST::&apos;+scriptName+&apos; OBR getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()]; 
			
		} // end if 
		
	} // end for each

	channelMap.put(&apos;specimenDetected&apos;,detected); // true, false, invalid
	channelMap.put(&apos;modified_msg&apos;,msg);

	channelMap.put(&apos;obsvDisallowedObservations&apos;,disallowedObservations);
	channelMap.put(&apos;obsvAllowedObservations&apos;,allowedObservations);
	
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; specimenDetected: &apos;+$c(&apos;specimenDetected&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg: &apos;+$c(&apos;modified_msg&apos;));
	} // end if 
	
	return msg;

} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>a5f6198b-5582-4183-be32-759a1508f7b6</id>
        <name>write_msg_to_disk</name>
        <revision>18</revision>
        <lastModified>
          <time>1666983371379</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	This script is used to write a message to a local system destination folder

	@param {String} arg1 - arg1 description
	@return {String} return description
	e.g., write_msg_to_disk($(&apos;rawhl7&apos;),api_error_directory,$(&apos;ark_uuid&apos;));
	History:
	2022-10-28 JER - Modified to make destinationFile String() and then modify FileUtils.write using java.lang.String, boolean, java.lang.String corresponding to 
	public static void write(java.lang.String fileName,boolean append,java.lang.String data)
	https://javadocs.mirthcorp.com/connect/3.12.0/user-api/com/mirth/connect/server/userutil/FileUtil.html
*/
function write_msg_to_disk(msg, destinationFileDirectory, uuid) {

	var scriptName= &apos;write_msg_to_disk&apos;;
	var debug= 0;

	try {
		var destinationFilename= uuid+&apos;.err&apos;;
		var error_hl7_msg= msg;
		var destinationFile= destinationFileDirectory+&apos;\\&apos;+destinationFilename;

		if(debug&gt;0) {
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; destinationFileDirectory: &apos;+destinationFileDirectory);
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; destinationFilename: &apos;+destinationFilename);
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; error_hl7_msg: &apos;+error_hl7_msg);
		} // end if 
		
		// org.apache.commons.io.FileUtils.write(new java.io.File(destinationFileDirectory+&apos;\\&apos;+destinationFilename),false,error_hl7_msg);
		// org.apache.commons.io.FileUtils.write(String(destinationFile),boolean(false),String(error_hl7_msg));
		FileUtil.write(java.lang.String(destinationFile),false,java.lang.String(error_hl7_msg));
		
		return true;
	
	} catch (e) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; ERROR: &apos;+e);
		return false;
	} // end try
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>e9723fd9-6316-42f1-bc83-ad658b2abc7c</id>
        <name>write_msg_to_file</name>
        <revision>2</revision>
        <lastModified>
          <time>1670428915677</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	This script is used to write a message to a destination file providing both a destination folder and the fileName
	
	@param {String} args: 	msg - java.lang.String
							destinationFilename - java.lang.String
							destinationFileDirectory - java.lang.stringify
							append - java.lang.Boolean
							debug - java.lang.Boolean
	@return {boolean} - 	java.lang.boolean;  FileUtil.write success (return true|false)
	Desc:   If append parameter is not provided or has no value the default action is to overwrite the provided file.
	e.g., write_msg_to_file($(&apos;raw&apos;),destinationFilename, destinationFileDirectory);
	History:
	2022-12-06 JER - Modified to include the append and debug parameter arguments to designate whether to overwrite (append= false) or append (append= true) or required to leverage debug statements (debug= true|false)
	2022-10-28 JER - Modified to make destinationFile String() and then modify FileUtils.write using java.lang.String, boolean, java.lang.String corresponding to 
	public static void write(java.lang.String fileName,boolean append,java.lang.String data)
	http://javadocs.mirthcorp.com/connect/3.9.0/user-api/com/mirth/connect/server/userutil/FileUtil.html
*/
function write_msg_to_file(msg, destinationFilename, destinationFileDirectory, append, debug) {

	var scriptName= &apos;write_msg_to_file&apos;;
	if((typeof(debug)== &apos;undefined&apos;)||(debug.toString.length&lt;1)) {
		var debug= false;
	}
	if((typeof(append)== &apos;undefined&apos;)||(append.toString().length&lt;1)) {
		var append= false;  // default overwrite
	} // end if 
	
	try {
		// var destinationFilename= uuid+&apos;.err&apos;;
		var error_msg= msg;
		var destinationFile= destinationFileDirectory+&apos;\\&apos;+destinationFilename;

		if(debug&gt;0) {
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; destinationFileDirectory: &apos;+destinationFileDirectory);
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; destinationFilename: &apos;+destinationFilename);
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; error_msg: &apos;+error_msg);
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; append: &apos;+append);
		} // end if 
		
		// org.apache.commons.io.FileUtils.write(new java.io.File(destinationFileDirectory+&apos;\\&apos;+destinationFilename),false,error_msg);
		// org.apache.commons.io.FileUtils.write(String(destinationFile),boolean(false),String(error_msg));
		
		// 2022-12-07 JER - Modified to leverage the append parameterized variable
		// com.mirth.connect.server.userutil.FileUtil.write(java.lang.String(destinationFile),false,java.lang.String(error_msg));
		FileUtil.write(java.lang.String(destinationFile),append,java.lang.String(error_msg));
		return true;
	
	} catch (e) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; ERROR: &apos;+e);
		return false;
	} // end try
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>5184da51-fdb7-4279-bd02-48706e6f0791</id>
    <name>Molecular HL7 to Objects</name>
    <revision>6</revision>
    <lastModified>
      <time>1690573002113</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description></description>
    <includeNewChannels>false</includeNewChannels>
    <enabledChannelIds>
      <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
      <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
      <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
      <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
      <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
      <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>a0db967e-8750-4650-9f2f-7bd1dca73f95</id>
        <name>Convert HL7 to Extended Address XAD Object</name>
        <revision>2</revision>
        <lastModified>
          <time>1688753319806</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.
	@scriptName= convert_hl7_to_extended_address_object
	@description= Convert HL7 to Extended Address XAD Object
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function convert_hl7_to_extended_address_object(hl7_xad_xml) {

	var scriptName= &apos;convert_hl7_to_extended_address_object&apos;;
	var debug= 0;
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; hl7_xad_xml typeof: &apos;+typeof(hl7_xad_xml)+&apos; value: &apos;+hl7_xad_xml);
	
	var objExtendedAddress= new Object();
	var i= 0;
	
	for each(child in hl7_xad_xml.children()) {
	
		if(i== 0) {
			if(child.toString().length&gt;0) {
				objExtendedAddress.streetAddress=			child.toString();
			} else {
				objExtendedAddress.streetAddress=			&apos;&apos;;
			} // end if 
		} // end if 

		if(i== 1) {
			if(child.toString().length&gt;0) {
				objExtendedAddress.otherDesignation=  		child.toString();
			} else {
				objExtendedAddress.otherDesignation=		&apos;&apos;;
			} // end if 
		} // end if 

		if(i== 2) {
			if(child.toString().length&gt;0) {
				objExtendedAddress.city= 				child.toString();
			} else {
				objExtendedAddress.city=					&apos;&apos;;
			} // end if 
		} // end if 

		if(i== 3) {
			if(child.toString().length&gt;0) {
				objExtendedAddress.stateOrProvince= 		child.toString();
			} else {
				objExtendedAddress.stateOrProvince=		&apos;&apos;;
			} // end if 
		} // end if 

		if(i== 4) {
			if(child.toString().length&gt;0) {
				objExtendedAddress.postalCode= 			child.toString();
			} else {
				objExtendedAddress.postalCode=			&apos;&apos;;
			} // end if 
		} // end if 

		if(i== 5) {
			if(child.toString().length&gt;0) {
				objExtendedAddress.country= 			child.toString();
			} else {
				objExtendedAddress.country=			&apos;&apos;;
			} // end if 
		} // end if 

		if(i== 6) {
			if(child.toString().length&gt;0) {
				objExtendedAddress.addressType= 			child.toString();
			} else {
				objExtendedAddress.addressType=			&apos;&apos;;
			} // end if 
		} // end if 

		if(i== 7) {	
			if(child.toString().length&gt;0) {
				objExtendedAddress.otherGeographicDesignation= 		child.toString();
			} else {	
				objExtendedAddress.otherGeographicDesignation=		&apos;&apos;;
			} // end if 
		} // end if 

		if(i== 8) {
			if(child.toString().length&gt;0) {
				objExtendedAddress.county= 			child.toString();
			} else {
				objExtendedAddress.county=			&apos;&apos;;
			} // end if 
		} // end if 

		if(i== 9) {
			if(child.toString().length&gt;0) {
				objExtendedAddress.censusTract= 		child.toString();
			} else {
				objExtendedAddress.censusTract=		&apos;&apos;;
			} // end if 
		} // end if 

		if(i== 10) {
			if(child.toString().length&gt;0) {
				objExtendedAddress.addressRepresentationCode= 		child.toString();
			} else {
				objExtendedAddress.addressRepresentationCode=		&apos;&apos;;
			} // end if
		} // end if  

		if(i== 11) {
			if(child.toString().length&gt;0) {
				objExtendedAddress.addressValidityRange= 		child.toString();
			} else {
				objExtendedAddress.addressValidityRange=			&apos;&apos;;
			} // end if
		} // end if 

		if(i== 12) {
			if(child.toString().length&gt;0) {
				objExtendedAddress.effectiveDate= 		child.toString();
			} else {
				objExtendedAddress.effectiveDate=		&apos;&apos;;
			} // end if
		} // end if 

		if(i== 13) {
			if(child.toString().length&gt;0) {
				objExtendedAddress.expirationDate= 	child.toString();
			} else {
				objExtendedAddress.expirationDate=		&apos;&apos;;
			} // end if
		} // end if 
		
		i++;
	} // end for each 
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; objExtendedAddress typeof: &apos;+typeof(objExtendedAddress)+&apos; value: &apos;+JSON.stringify(objExtendedAddress));

	return objExtendedAddress;

} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>b0078ee2-6677-4176-8294-68f526a5bb21</id>
        <name>Convert HL7 to Extended Telecommunications TXN Object</name>
        <revision>6</revision>
        <lastModified>
          <time>1688753319867</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.
	@scriptName= convert_hl7_to_extended_telecommunication_number_object
	@description= Convert HL7 to Extended Telecommunications TXN Object
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function convert_hl7_to_extended_telecommunication_number_object(hl7_xtn_xml) {

	var scriptName= &apos;convert_hl7_to_extended_telecommunication_number_object&apos;;
	var debug= 0;
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; hl7_xtn_xml typeof: &apos;+typeof(hl7_xtn_xml)+&apos; value: &apos;+hl7_xtn_xml);
	
	var objExtendedTelecommunicationNumber= new Object();
	var i= 0;
	
	for each(child in hl7_xtn_xml.children()) {
	
		if(i== 0) {
			if(child.toString().length&gt;0) {
				objExtendedTelecommunicationNumber.telephoneNumber=		child.toString();
			} else {
				objExtendedTelecommunicationNumber.telephoneNumber=		&apos;&apos;;
			} // end if 
		} // end if 

		if(i== 1) {
			if(child.toString().length&gt;0) {
				objExtendedTelecommunicationNumber.telecomUseCode=  		child.toString();
			} else {
				objExtendedTelecommunicationNumber.telecomUseCode=		&apos;&apos;;
			} // end if 
		} // end if 

		if(i== 2) {
			if(child.toString().length&gt;0) {
				objExtendedTelecommunicationNumber.telecomEquipmentType= 	child.toString();
			} else {
				objExtendedTelecommunicationNumber.telecomEquipmentType=	&apos;&apos;;
			} // end if 
		} // end if 

		if(i== 3) {
			if(child.toString().length&gt;0) {
				objExtendedTelecommunicationNumber.emailAddress= 			child.toString();
			} else {
				objExtendedTelecommunicationNumber.emailAddress=			&apos;&apos;;
			} // end if 
		} // end if 

		if(i== 4) {
			if(child.toString().length&gt;0) {
				objExtendedTelecommunicationNumber.countryCode= 			child.toString();
			} else {
				objExtendedTelecommunicationNumber.countryCode=			&apos;&apos;;
			} // end if 
		} // end if 

		if(i== 5) {
			if(child.toString().length&gt;0) {
				objExtendedTelecommunicationNumber.areaCityCode= 			child.toString();
			} else {
				objExtendedTelecommunicationNumber.areaCityCode=			&apos;&apos;;
			} // end if 
		} // end if 

		if(i== 6) {
			if(child.toString().length&gt;0) {
				objExtendedTelecommunicationNumber.localNumber= 			child.toString();
			} else {
				objExtendedTelecommunicationNumber.localNumber=			&apos;&apos;;
			} // end if 
		} // end if 

		if(i== 7) {	
			if(child.toString().length&gt;0) {
				objExtendedTelecommunicationNumber.areaCityCode= 			child.toString();
			} else {	
				objExtendedTelecommunicationNumber.areaCityCode=			&apos;&apos;;
			} // end if 
		} // end if 

		if(i== 8) {
			if(child.toString().length&gt;0) {
				objExtendedTelecommunicationNumber.extension= 			child.toString();
			} else {
				objExtendedTelecommunicationNumber.extension=			&apos;&apos;;
			} // end if 
		} // end if 

		if(i== 9) {
			if(child.toString().length&gt;0) {
				objExtendedTelecommunicationNumber.anyText= 				child.toString();
			} else {
				objExtendedTelecommunicationNumber.anyText=				&apos;&apos;;
			} // end if 
		} // end if 

		if(i== 10) {
			if(child.toString().length&gt;0) {
				objExtendedTelecommunicationNumber.extensionPrefix= 		child.toString();
			} else {
				objExtendedTelecommunicationNumber.extensionPrefix=		&apos;&apos;;
			} // end if
		} // end if  

		if(i== 11) {
			if(child.toString().length&gt;0) {
				objExtendedTelecommunicationNumber.speedDialCode= 		child.toString();
			} else {
				objExtendedTelecommunicationNumber.speedDialCode=			&apos;&apos;;
			} // end if
		} // end if 

		if(i== 12) {
			if(child.toString().length&gt;0) {
				objExtendedTelecommunicationNumber.unformatTelephoneNumber= 	child.toString();
			} else {
				objExtendedTelecommunicationNumber.unformatTelephoneNumber=		&apos;&apos;;
			} // end if
		} // end if 
		
		i++;
	} // end for each 
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; objExtendedTelecommunicationNumber typeof: &apos;+typeof(objExtendedTelecommunicationNumber)+&apos; value: &apos;+JSON.stringify(objExtendedTelecommunicationNumber));

	return objExtendedTelecommunicationNumber;

} // end function</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>24dffab7-e968-49fb-9343-c0a44da733cd</id>
    <name>PRA_Forms</name>
    <revision>51</revision>
    <lastModified>
      <time>1687560641421</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description></description>
    <includeNewChannels>false</includeNewChannels>
    <enabledChannelIds>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>14b7de16-de3e-4994-b123-b4d0d3d712aa</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
      <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
      <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
      <string>076d39da-7152-40db-91a1-1746167239e9</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>aba0dfc1-85df-4c06-a201-f73b1a4d3afb</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5adcf0e4-782c-4e9d-a105-f67795fe6644</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>1415c8e7-299a-4adf-af14-a44aadc46f55</id>
        <name>get_4ps_plus_field_lookup</name>
        <revision>12</revision>
        <lastModified>
          <time>1663794457617</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: get_4ps_plus_field_lookup.js
	@param {String}  field - This field argument is a string (e.g. LBW_PRI)
	@return {String} jsonString - This returned value is a jsonString
	History:
	2022-09-21 JER - Modified to leverage pra_equivalent_field and pra_equivalent_value variables
	2022-09-19 JER - Modified from signal element variable (field) and array of values
	2022-09-04 JER - Copy from the javascript: get_pregnancy_risk_factors_field_lookup.js
*/
function get_4ps_plus_field_lookup(arrField) {
	
	var scriptName= &apos;get_4ps_plus_field_lookup&apos;;
	// complete list of Pregnancy Risk Factors fields configured from Global Channel Map - in Deploy script
	var in4psPlus= globalChannelMap.get(&apos;pra4psPlus&apos;);
	var debug= 0;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field: &apos;+arrField+&apos; typeof: &apos;+typeof(arrField)+&apos; length: &apos;+arrField.length); 
	}
	
	if(typeof(arrField) !== &apos;undefined&apos;) {
		// if(arrField.length()&gt;0) {
		if(arrField.length&gt;0) {
			// verify in4psPlus is defined and has a valid value for evaluation
			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument arrField typeof= &apos;+typeof(arrField)+&apos; arrField= &apos;+JSON.stringify(arrField)+&apos; length= &apos;+arrField.length());
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument in4psPlus typeof= &apos;+typeof(in4psPlus)+&apos; in4psPlus= &apos;+in4psPlus+&apos; toString()= &apos;+in4psPlus.toString()+&apos; length= &apos;+in4psPlus.toString().length);
			}
			if((typeof(in4psPlus) !== &apos;undefined&apos;)&amp;&amp;(in4psPlus.toString().length&gt;0)) {
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; EVAL in4psPlus.toString.indexOf(field.toString)= &apos;+in4psPlus.toString().indexOf(field.toString()));
				}
				// 2022-08-04 JER - Modified from in4psPlus to field in the jsonString return argument
				// 2022-09-21 JER - Check and verify the arrField array has the required element fields and values
				if((typeof(arrField) !== &apos;undefined&apos;)&amp;&amp;(arrField.length&gt;0)) {
					if(arrField[0]) { var pra_equivalent_json_section= arrField[0].toString(); } else { var pra_equivalent_json_section= &apos;&apos;; } 
					if(arrField[1]) { var pra_equivalent_field= arrField[1].toString(); } else { var pra_equivalent_field= &apos;&apos;; } 
					if(arrField[4]) { var pra_equivalent_value= arrField[4].toString(); } else { var pra_equivalent_value= &apos;&apos;; } 
				}
				// 2022-09-21 JER - Modified to leverage pra_equivalent_field and pra_equivalent_value variables
				if(in4psPlus.toString().indexOf(pra_equivalent_field)&gt;-1) {
					return &quot;&apos;&quot;+pra_equivalent_field+&quot;&apos;: &apos;&quot;+pra_equivalent_value+&quot;&apos;&quot;;
				} else {
					return &quot;&apos;&quot;+pra_equivalent_field+&quot;&apos;: &apos;&apos;&quot;;
				}// end if 
			} // end if
		} // end if
	} // end if 
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>3a633157-1070-4f5c-a0fb-da24580b1f8c</id>
        <name>get_4ps_plus_followup_questions_field_lookup</name>
        <revision>3</revision>
        <lastModified>
          <time>1661882914541</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: get_4ps_plus_followup_questions_field_lookup.js
	@param {String}  field - This field argument is a string (e.g. LBW_PRI)
	@return {String} jsonString - This returned value is a jsonString
	History:
	2022-08-03 JER - Modified from in4psPlusFollowupQuestions to field in the jsonString return argument

*/
function get_4ps_plus_followup_questions_field_lookup(field) {
	
	var scriptName= &apos;get_4ps_plus_followup_questions_field_lookup&apos;;
	// complete list of 4ps Plus Followup Questions fields configured from Global Channel Map - in Deploy script
	var in4psPlusFollowupQuestions= globalChannelMap.get(&apos;pra4psPlusFollowupQuestions&apos;);
	var debug= 0;
	
	//if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field: &apos;+field); 
	//}
	
	if(typeof(field) !== &apos;undefined&apos;) {
		if(field.toString().length&gt;0) {
			// verify in4psPlusFollowupQuestions is defined and has a valid value for evaluation
			//if(debug&lt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(field)+&apos; field= &apos;+field+&apos; length= &apos;+field.length);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument in4psPlusFollowupQuestions typeof= &apos;+typeof(in4psPlusFollowupQuestions)+&apos; in4psPlusFollowupQuestions= &apos;+in4psPlusFollowupQuestions+&apos; toString()= &apos;+in4psPlusFollowupQuestions.toString()+&apos; length= &apos;+in4psPlusFollowupQuestions.toString().length+&apos; EVAL in4psPlusFollowupQuestions.toString.indexOf(field.toString)= &apos;+in4psPlusFollowupQuestions.toString().indexOf(field.toString()));
			//}
			if((typeof(in4psPlusFollowupQuestions) !== &apos;undefined&apos;)&amp;&amp;(in4psPlusFollowupQuestions.toString().length&gt;0)) {
				// 2022-08-03 JER - Modified from in4psPlusFollowupQuestions to field in the jsonString return argument
				if(in4psPlusFollowupQuestions.toString().indexOf(field.toString())&gt;-1) {
					return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;Y&apos;&quot;;
				} else {
					return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;N&apos;&quot;;
				}// end if 
			} // end if
		} // end if
	} // end if 
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>4214293e-a947-436b-bda1-f4fa98329991</id>
        <name>get_bleeding_during_current_pregnancy_field_lookup</name>
        <revision>4</revision>
        <lastModified>
          <time>1663795605821</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: get_bleeding_during_current_pregnancy_field_lookup.js
	@param {String}  field - This field argument is a string (e.g. LBW_PRI)
	@return {String} jsonString - This returned value is a jsonString
	History:
	2022-09-21 JER - Modified default no answer from &apos;N&apos; to &apos;&apos;
	2022-08-03 JER - Modified from inBleedingDuringCurrentPregnancy to field in the jsonString return argument	
*/
function get_bleeding_during_current_pregnancy_field_lookup(field) {
	
	var scriptName= &apos;get_bleeding_during_current_pregnancy_field_lookup&apos;;
	// complete list of Bleeding During Current Pregnancy fields configured from Global Channel Map - in Deploy script
	var inBleedingDuringCurrentPregnancy= globalChannelMap.get(&apos;praBleedingDuringCurrentPregnancy&apos;);
	var debug= 0;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field: &apos;+field); 
	}
	
	if(typeof(field) !== &apos;undefined&apos;) {
		if(field.toString().length&gt;0) {
			// verify inBleedingDuringCurrentPregnancy is defined and has a valid value for evaluation
			if(debug&lt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(field)+&apos; field= &apos;+field+&apos; length= &apos;+field.length);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument inBleedingDuringCurrentPregnancy typeof= &apos;+typeof(inBleedingDuringCurrentPregnancy)+&apos; inBleedingDuringCurrentPregnancy= &apos;+inBleedingDuringCurrentPregnancy+&apos; toString()= &apos;+inBleedingDuringCurrentPregnancy.toString()+&apos; length= &apos;+inBleedingDuringCurrentPregnancy.toString().length+&apos; EVAL inBleedingDuringCurrentPregnancy.toString.indexOf(field.toString)= &apos;+inBleedingDuringCurrentPregnancy.toString().indexOf(field.toString()));
			}
			if((typeof(inBleedingDuringCurrentPregnancy) !== &apos;undefined&apos;)&amp;&amp;(inBleedingDuringCurrentPregnancy.toString().length&gt;0)) {
				// 2022-08-03 JER - Modified from inBleedingDuringCurrentPregnancy to field in the jsonString return argument	
				if(inBleedingDuringCurrentPregnancy.toString().indexOf(field.toString())&gt;-1) {
					return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;Y&apos;&quot;;
				} else {
					return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;&apos;&quot;;
				}// end if 
			} // end if
		} // end if
	} // end if 
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>1bd72dde-590e-4050-8f7b-fbe069879ce5</id>
        <name>get_current_medical_conditions_field_lookup</name>
        <revision>17</revision>
        <lastModified>
          <time>1663795605841</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: get_current_medical_conditions_field_lookup.js
	@param {String}  field - This field argument is a string (e.g. LBW_PRI)
	@return {String} jsonString - This returned value is a jsonString
	History:
	2022-09-21 JER - Modified default no answer from &apos;N&apos; to &apos;&apos;
	2022-08-01 15:38 JER - Modified from using inCurrentMedicalConditions array toString TO using field.toString()
	2022-08-01 15:30 JER - Included the evaluation of the Case Sensitivity enforcing toUpperCase function on all strings
	2022-08-01 15:03 JER - depreciated prior scriptName: get_current_medical_conditions_field_lookup-DEPRECIATED.js
*/
function get_current_medical_conditions_field_lookup(field) {
	
	var scriptName= &apos;get_current_medical_conditions_field_lookup&apos;;
	// complete list of Current Medical Conditions fields configured from Global Channel Map - in Deploy script
	var inCurrentMedicalConditions= globalChannelMap.get(&apos;praCurrentMedicalConditions&apos;);
	var debug= 0;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field: &apos;+field); 
	}
	
	if(typeof(field) !== &apos;undefined&apos;) {
		if(field.toString().length&gt;0) {
			// verify inCurrentMedicalConditions is defined and has a valid value for evaluation
			if(debug&lt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(field)+&apos; field= &apos;+field+&apos; length= &apos;+field.length);
				// 2022-08-01 15:30 JER - Included the evaluation of the Case Sensitivity enforcing toUpperCase function on all strings
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument inCurrentMedicalConditions typeof= &apos;+typeof(inCurrentMedicalConditions)+&apos; toString()= &apos;+inCurrentMedicalConditions.toString()+&apos; length= &apos;+inCurrentMedicalConditions.toString().length+&apos; field.toString()= &apos;+field.toString()+&apos; field.length= &apos;+field.toString().length+&apos; EVAL inCurrentMedicalConditions.toString().toUpperCase().indexOf(field.toString().toUpperCase())= &apos;+inCurrentMedicalConditions.toString().toUpperCase().indexOf(field.toString().toUpperCase()));
			}
			if((typeof(inCurrentMedicalConditions) !== &apos;undefined&apos;)&amp;&amp;(inCurrentMedicalConditions.toString().length&gt;0)) {
				// 2022-08-01 15:30 JER - Included the evaluation of the Case Sensitivity enforcing toUpperCase function on all strings
				if(inCurrentMedicalConditions.toString().toUpperCase().indexOf(field.toString().toUpperCase())&gt;-1) {
					// 2022-08-01 15:38 JER - Modified from using inCurrentMedicalConditions array toString TO using field.toString()
					return &quot;&apos;&quot;+field.toString()+&quot;&apos;: &apos;Y&apos;&quot;;
				} else {
					return &quot;&apos;&quot;+field.toString()+&quot;&apos;: &apos;&apos;&quot;;
				}// end if 
			} // end if
		} // end if
	} // end if 
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>39398c50-1800-4ce9-a093-34bf5dfe9e43</id>
        <name>get_entry_into_prenatal_care_field_lookup</name>
        <revision>3</revision>
        <lastModified>
          <time>1663795471012</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: get_entry_into_prenatal_care_field_lookup.js
	@param {String}  field - This field argument is a string (e.g. LBW_PRI)
	@return {String} jsonString - This returned value is a jsonString
	History:
	2022-09-21 JER - Modified default no answer from &apos;N&apos; to &apos;&apos;
	2022-08-03 JER - Modified from using inEntryIntoPrenatalCare array and field string variable
*/
function get_entry_into_prenatal_care_field_lookup(field) {
	
	var scriptName= &apos;get_entry_into_prenatal_care_field_lookup&apos;;
	// complete list of Entry Into Prenatal Care fields configured from Global Channel Map - in Deploy script
	var inEntryIntoPrenatalCare= globalChannelMap.get(&apos;praEntryIntoPrenatalCare&apos;);
	var debug= 0;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field: &apos;+field); 
	}
	
	if(typeof(field) !== &apos;undefined&apos;) {
		if(field.toString().length&gt;0) {
			// verify inEntryIntoPrenatalCare is defined and has a valid value for evaluation
			if(debug&lt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(field)+&apos; field= &apos;+field+&apos; length= &apos;+field.length);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument inEntryIntoPrenatalCare typeof= &apos;+typeof(inEntryIntoPrenatalCare)+&apos; inEntryIntoPrenatalCare= &apos;+inEntryIntoPrenatalCare+&apos; toString()= &apos;+inEntryIntoPrenatalCare.toString()+&apos; length= &apos;+inEntryIntoPrenatalCare.toString().length+&apos; EVAL inEntryIntoPrenatalCare.toString.indexOf(field.toString)= &apos;+inEntryIntoPrenatalCare.toString().indexOf(field.toString()));
			}
			if((typeof(inEntryIntoPrenatalCare) !== &apos;undefined&apos;)&amp;&amp;(inEntryIntoPrenatalCare.toString().length&gt;0)) {
				// 2022-08-03 JER - Modified from using inEntryIntoPrenatalCare array and field string variable
				if(inEntryIntoPrenatalCare.toString().indexOf(field.toString())&gt;-1) {
					return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;Y&apos;&quot;;
				} else {
					return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;&apos;&quot;;
				}// end if 
			} // end if
		} // end if
	} // end if 
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>db3a0ed4-c98a-4acc-b564-60506f3de265</id>
        <name>get_entry_prenatal_care_field_lookup</name>
        <revision>5</revision>
        <lastModified>
          <time>1663795480626</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: get_entry_prenatal_care_field_lookup.js
	@param {String}  field - This field argument is a string (e.g. LBW_PRI)
	@return {String} jsonString - This returned value is a jsonString
	History:
	2022-09-21 JER - Modified default no answer from &apos;N&apos; to &apos;&apos;
	2022-08-03 JER - Modified from using inEntryPrenatalCare array and field string variable
*/
function get_entry_prenatal_care_field_lookup(field) {
	
	var scriptName= &apos;get_entry_prenatal_care_field_lookup&apos;;
	// complete list of Pernatal Care fields configured from Global Channel Map - in Deploy script
	var inEntryPrenatalCare= globalChannelMap.get(&apos;praReasonForLateEntryToPrenatalCare&apos;);
	var debug= 0;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field: &apos;+field); 
	}
	
	if(typeof(field) !== &apos;undefined&apos;) {
		if(field.toString().length&gt;0) {
			// verify inEntryPrenatalCare is defined and has a valid value for evaluation
			// if(debug&lt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(field)+&apos; field= &apos;+field+&apos; length= &apos;+field.length);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument inEntryPrenatalCare typeof= &apos;+typeof(inEntryPrenatalCare)+&apos; inEntryPrenatalCare= &apos;+inEntryPrenatalCare+&apos; toString()= &apos;+inEntryPrenatalCare.toString()+&apos; length= &apos;+inEntryPrenatalCare.toString().length+&apos; EVAL inEntryPrenatalCare.toString.indexOf(field.toString)= &apos;+inEntryPrenatalCare.toString().indexOf(field.toString()));
			// }
			if((typeof(inEntryPrenatalCare) !== &apos;undefined&apos;)&amp;&amp;(inEntryPrenatalCare.toString().length&gt;0)) {
				// 2022-08-03 JER - Modified from using inEntryPrenatalCare array and field string variable
				if(inEntryPrenatalCare.toString().indexOf(field.toString())&gt;-1) {
					return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;Y&apos;&quot;;
				} else {
					return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;&apos;&quot;;
				}// end if 
			} // end if
		} // end if
	} // end if 
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>224c96c8-5fde-41c4-b51c-de49072a4df5</id>
        <name>get_ethnicity_field_lookup</name>
        <revision>15</revision>
        <lastModified>
          <time>1663791794098</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: get_4ps_plus_field_lookup.js
	@param {String}  field - This field argument is a string (e.g. LBW_PRI)
	@return {String} jsonString - This returned value is a jsonString
	History:
	2022-09-21 JER - Check and verify the arrField array has the required element fields and values
	2022-09-19 JER - Modified single field to an array (arrField)
	2022-09-04 JER - Copy from the javascript: get_pregnancy_risk_factors_field_lookup.js
*/
function get_ethnicity_field_lookup(strField) {
	
	var scriptName= &apos;get_ethnicity_field_lookup&apos;;
	// complete list of Ethnicity fields configured from Global Channel Map - in Deploy script
	var inEthnicity= globalChannelMap.get(&apos;praEthnicity&apos;);
	var inEthnicity= String(inEthnicity);
	var arrField=    strField.split(&apos;|&apos;);
	var debug= 0;
	
	if(debug&lt;0) { 
	 	// arrField: ethnicity|Hispanic|4|Not Hispanic or Latino|N typeof: string length: 45
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A argument arrField: &apos;+arrField+&apos; typeof: &apos;+typeof(arrField)+&apos; length: &apos;+arrField.length); 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A.1 (typeof(arrField)!== undefined): &apos;+(typeof(arrField)!== &apos;undefined&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A.2 (arrField.length&gt;0): &apos;+(arrField.length&gt;0));
	} // end if 
	
	if((typeof(arrField)!== &apos;undefined&apos;)&amp;&amp;(arrField.length&gt;0)) {
		// verify inEthnicity is defined and has a valid value for evaluation
		if(debug&lt;0) { 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B argument inEthnicity typeof= &apos;+typeof(inEthnicity)+&apos; inEthnicity= &apos;+inEthnicity+&apos; toString()= &apos;+inEthnicity.toString()+&apos; length= &apos;+inEthnicity.toString().length);
		} // end if 

		// 2022-09-20 JER - Check and verify the arrField array has the required element fields and values
		if(arrField[0]) { var pra_equivalent_json_section= arrField[0].toString(); } else { var pra_equivalent_json_section= &apos;&apos;; } 
		if(arrField[1]) { var pra_equivalent_field= arrField[1].toString(); } else { var pra_equivalent_field= &apos;&apos;; } 
		if(arrField[4]) { var pra_equivalent_value= arrField[4].toString(); } else { var pra_equivalent_value= &apos;&apos;; } 

		if(debug&lt;0) { 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C.1 pra_equivalent_json_section: &apos;+pra_equivalent_json_section);
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C.2 pra_equivalent_field: &apos;+pra_equivalent_field);
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C.3 pra_equivalent_value: &apos;+pra_equivalent_value);
		} // end if 
		
		if((typeof(inEthnicity) !== &apos;undefined&apos;)&amp;&amp;(inEthnicity.length&gt;0)) {
			if(debug&lt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D.1 EVAL inEthnicity= &apos;+inEthnicity);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D.2 EVAL pra_equivalent_field= &apos;+pra_equivalent_field);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D.3 EVAL &apos;+inEthnicity+&apos;.indexOf(&apos;+pra_equivalent_field+&apos;)= &apos;+inEthnicity.indexOf(pra_equivalent_field));
			} // end if 
			// 2022-08-04 JER - Modified from inEthnicity to field in the jsonString return argument
			if(inEthnicity.indexOf(pra_equivalent_field)&gt;-1) {
				return &quot;&apos;&quot;+pra_equivalent_field+&quot;&apos;: &apos;&quot;+pra_equivalent_value+&quot;&apos;&quot;;
			} else {
				return &quot;&apos;&quot;+pra_equivalent_field+&quot;&apos;: &apos;&apos;&quot;;
			} // end if 
		} // end if
	} // end if 
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>1d8d7f04-a064-4e68-9ce7-eae1c27e8d6d</id>
        <name>get_health_insurance_field_lookup</name>
        <revision>5</revision>
        <lastModified>
          <time>1663795628522</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: get_health_insurance_field_lookup.js
	@param {String}  field - This field argument is a string (e.g. LBW_PRI)
	@return {String} jsonString - This returned value is a jsonString
	History:
	2022-09-21 JER - Modified default no answer from &apos;N&apos; to &apos;&apos;
	2022-08-04 JER - Modified from inHealthInsurance to field in the jsonString return argument
*/
function get_health_insurance_field_lookup(field) {
	
	var scriptName= &apos;get_health_insurance_field_lookup&apos;;
	// complete list of Physical Assessment fields configured from Global Channel Map - in Deploy script
	var inHealthInsurance= globalChannelMap.get(&apos;praHealthInsurance&apos;);
	var debug= 0;
	
	//if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field: &apos;+field); 
	//}
	
	if(typeof(field) !== &apos;undefined&apos;) {
		if(field.toString().length&gt;0) {
			// verify inHealthInsurance is defined and has a valid value for evaluation
			//if(debug&lt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(field)+&apos; field= &apos;+field+&apos; length= &apos;+field.length);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument inHealthInsurance typeof= &apos;+typeof(inHealthInsurance)+&apos; inHealthInsurance= &apos;+inHealthInsurance+&apos; toString()= &apos;+inHealthInsurance.toString()+&apos; length= &apos;+inHealthInsurance.toString().length+&apos; EVAL inHealthInsurance.toString.indexOf(field.toString)= &apos;+inHealthInsurance.toString().indexOf(field.toString()));
			//}
			if((typeof(inHealthInsurance) !== &apos;undefined&apos;)&amp;&amp;(inHealthInsurance.toString().length&gt;0)) {
				// 2022-08-04 JER - Modified from inHealthInsurance to field in the jsonString return argument
				if(inHealthInsurance.toString().indexOf(field.toString())&gt;-1) {
					return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;Y&apos;&quot;;
				} else {
					return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;&apos;&quot;;
				}// end if 
			} // end if
		} // end if
	} // end if 
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>8e2b6c5b-70e9-4a65-a0a9-13af2b8bf1d5</id>
        <name>get_html_referenced_text</name>
        <revision>37</revision>
        <lastModified>
          <time>1663177616230</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return observation value string per requested HTML referenced in CCDA
	
	fileName:		get_html_referenced_value.js
	name:		Get HTML Referenced Text Value
	authored:		Jeffrey Ritz
	created:		2022-09-13
	description:	Evaluate HTML Table Referenced Text
	history: 
	2022-09-14 JER - Modified from evaluating the msg to the specified section to eliminate the multiple executions 
*/
function get_html_referenced_text(section, htmlReference) {

	var scriptName= &apos;get_html_referenced_text&apos;
	var debug= 0;
	var cntSection= 0;
	var cntTable= 0;
	var cntColumn= 0;
	
	var strHtmlReference= htmlReference.toString().replace(&apos;#&apos;,&apos;&apos;);
	var referencedValue= &apos;&apos;;
	
	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; htmlReference: &apos;+htmlReference+&apos; strHtmlReference: &apos;+strHtmlReference); 
	} // end if 

	if(typeof(section)!== &apos;undefined&apos;) {
	
		if(debug&gt;0) {
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; SECTION length= &apos;+section.children().length()+&apos; children= &apos;+section.children());
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; SECTION section= &apos;+section);
		} // end if 
	
		if(section.children().length()&gt;0) {
			for each(table in section..*[&apos;table&apos;]) {
				
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; section table[&apos;+cntTable+&apos;]: &apos;+table); 
				} // end if 
				
				for each(column in table..*[&apos;td&apos;]) {
					
					if(debug&gt;0) {
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; section table[&apos;+cntTable+&apos;] column[&apos;+cntColumn+&apos;].@ID: &apos;+column.@ID+&apos; column value: &apos;+column);
					} // end if 
					
					if(typeof(column.ID) !== &apos;undefined&apos;) {
						
						if(debug&gt;0) {
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; column.ID= &apos;+column.@ID);
						} // end if 
						var columnID= column.@ID.toString();

						if(columnID.toString().length&gt;0) {
							if(debug&gt;0) {
								logger.error(&apos;DEBUG::&apos;+scriptName+&apos; COLUMN columnID: &apos;+columnID+&apos; strHtmlReference: &apos;+strHtmlReference+&apos; (&apos;+columnID+&apos;== &apos;+strHtmlReference+&apos;):&apos; +(columnID== strHtmlReference));
							} // end if 
							// if(columnID.indexOf(strHtmlReference)&gt;-1) {
							if(columnID== strHtmlReference) {
								var referencedValue= column.toString();
								if(debug&gt;0) {
									logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBSERVATION SET referencedValue= &apos;+referencedValue);
								} //end if 
							} // end if
						} // end if 
						
					} // end if
					cntColumn++;
					
				} // end for each
				cntTable++;
			} // end for each
		} // end if 
	} // end if
	return referencedValue;
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>b4fadf7e-6bf2-4d12-9ac7-996accb17108</id>
        <name>get_medicaid_mco_field_lookup</name>
        <revision>3</revision>
        <lastModified>
          <time>1663795637602</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: get_medicaid_mco_field_lookup.js
	@param {String}  field - This field argument is a string (e.g. LBW_PRI)
	@return {String} jsonString - This returned value is a jsonString
	History:
	2022-09-21 JER - Modified default no answer from &apos;N&apos; to &apos;&apos;
	2022-08-04 JER - Modified from inMedicaidMCO to field in the jsonString return argument
*/
function get_medicaid_mco_field_lookup(field) {
	
	var scriptName= &apos;get_medicaid_mco_field_lookup&apos;;
	// complete list of Medicaid MCO fields configured from Global Channel Map - in Deploy script
	var inMedicaidMCO= globalChannelMap.get(&apos;praMedicaidMCO&apos;);
	var debug= 0;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field: &apos;+field); 
	}
	
	if(typeof(field) !== &apos;undefined&apos;) {
		if(field.toString().length&gt;0) {
			// verify inMedicaidMCO is defined and has a valid value for evaluation
			if(debug&lt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(field)+&apos; field= &apos;+field+&apos; length= &apos;+field.length);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument inMedicaidMCO typeof= &apos;+typeof(inMedicaidMCO)+&apos; inMedicaidMCO= &apos;+inMedicaidMCO+&apos; toString()= &apos;+inMedicaidMCO.toString()+&apos; length= &apos;+inMedicaidMCO.toString().length+&apos; EVAL inMedicaidMCO.toString.indexOf(field.toString)= &apos;+inMedicaidMCO.toString().indexOf(field.toString()));
			}
			if((typeof(inMedicaidMCO) !== &apos;undefined&apos;)&amp;&amp;(inMedicaidMCO.toString().length&gt;0)) {
				// 2022-08-03 JER - Modified from inMedicaidMCO to field in the jsonString return argument
				if(inMedicaidMCO.toString().indexOf(field.toString())&gt;-1) {
					return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;Y&apos;&quot;;
				} else {
					return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;&apos;&quot;;
				}// end if 
			} // end if
		} // end if
	} // end if 
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>99221436-5875-45c4-aae3-4822b92d40e3</id>
        <name>get_observation_value</name>
        <revision>60</revision>
        <lastModified>
          <time>1662597310803</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return observation value string per a field value provided as argument

	scriptName: 	get_observation_value.js
	description:	Get Observation Value
	created:		2022-08-17 JER
	@param {String}  praObservation - This field argument is a string (e.g. &apos;physicalAssessment,DiastolicBloodPressure,10,Diastolic Blood Pressure,&apos;)
	@return {String} strObservation - This returned string value (e.g.  106 mm[Hg])
	History:
	2022-09-07 JER - Modified to evaluate the observation[&apos;type&apos;] to determine (PQ, TS, etc.) if Timestamp or Observation Quantity 
	2022-08-29 JER - Modified to remove [] open/closed brackets from lstPraObservation[4] array element
	2022-08-19 JER - Modified to incorporate the evaluation of the observation/value and to reference concatenated value and unit 

	E.G. {
		&quot;id&quot;: 67,
		&quot;templateId&quot;: &quot;2.16.840.1.113883.10.20.22.4.27&quot;,
		&quot;extension&quot;: &quot;5722403880-sysBP-Z2918157&quot;,
		&quot;root&quot;: &quot;1.2.840.114350.1.13.225.2.7.1.2109.1&quot;,
		...
		&quot;text&quot;: &quot;#diaBP_5722403880&quot;,
		&quot;value&quot;: {
			&quot;value&quot;: &quot;58&quot;,
			&quot;unit&quot;: &quot;mm[Hg]&quot;,
			&quot;type&quot;: &quot;PQ&quot;
		}

*/
function get_observation_value(praObservation) {
	
	var scriptName= &apos;get_observation_value&apos;;
	// complete list of observation fields configured from Global Channel Map - in Deploy script
	var arrObservations= channelMap.get(&apos;arrObservations&apos;);
	var debug= 0;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; provided argument: &apos;+praObservation); 
	}
	
	// &quot;physicalAssessment,DiastolicBloodPressure,10,Diastolic Blood Pressure,&quot;
	var lstPraObservation= praObservation.toString().split(&apos;,&apos;);
	var pra_equivalent_section=		lstPraObservation[0];
	var pra_equivalent_field=		lstPraObservation[1];
	var pra_equivalent_section_num=	lstPraObservation[2];
	var code_display_name=			lstPraObservation[3];
	// 2022-08-29 JER - Modified to remove [] open/closed brackets from lstPraObservation[4] array element
	var code_value_description=		lstPraObservation[4].toString().replace(/\]/g,&apos;&apos;).replace(/\[/g,&apos;&apos;);;

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pra_equivalent_section: &apos;+pra_equivalent_section+&apos; pra_equivalent_field: &apos;+pra_equivalent_field+&apos; pra_equivalent_section_num: &apos;+pra_equivalent_section_num+&apos; code_display_name: &apos;+code_display_name+&apos; code_value_description: &apos;+code_value_description);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; arrObservations: &apos;+JSON.stringify(arrObservations));
	} // end if 

	var i= 0;
	for each(observation in arrObservations) {
		var strObservation= JSON.stringify(observation);
		if(debug&gt;0) {
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; observation[&apos;+i+&apos;] JSON.stringify: &apos; +strObservation);
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; observation[&apos;+i+&apos;]: code_value_description: &apos;+code_value_description+&apos; comparison strObservation.indexOf(code_value_description): &apos;+strObservation.indexOf(code_value_description));
		} // end if 
		if(strObservation.indexOf(code_value_description)&gt;-1) {
			if(debug&gt;0) {
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; observation[&apos;+i+&apos;] FOUND code_value_description: &apos;+code_value_description);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(observation[value]): &apos;+typeof(observation[&apos;value&apos;])+&apos; observation[value]: &apos;+JSON.stringify(observation[&apos;value&apos;]));
			} // end if
			// observation[value]: {&quot;value&quot;:&quot;106&quot;,&quot;unit&quot;:&quot;mm[Hg]&quot;,&quot;type&quot;:&quot;PQ&quot;}
			var jsonObservationCode= observation[&apos;code&apos;];
			strObservationCode= jsonObservationCode.code;
			// var jsonObservationText=  observation[&apos;text&apos;].toString().replace(/\#/,&apos;&apos;);
			var jsonObservationValue= observation[&apos;value&apos;];
			strObservationValue= jsonObservationValue.value;
			var jsonObservationType= observation[&apos;type&apos;];
			strObservationType=  jsonObservationValue.type;
			
			// 2022-09-07 JER - Need to evaluate the observation type (e.g PQ, TS, etc)
			if(strObservationType== &apos;PQ&apos;) {

				var strObservationUnit=  jsonObservationValue.unit;
				
				if(debug&gt;0) {
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; type=PQ jsonObservationValue: &apos;+JSON.stringify(jsonObservationValue));
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; type=PQ jsonObservationValue.value: &apos;+jsonObservationValue.value); // 1096
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; type=PQ jsonObservationValue.unit: &apos;+strObservationUnit);  // mm[Hg]
				}
				var strObservationValue= jsonObservationValue.value+&apos; &apos;+strObservationUnit;
			} else if(strObservationType== &apos;TS&apos;) {
				if(debug&gt;0) {
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; type=TS jsonObservationValue: &apos;+JSON.stringify(jsonObservationValue));
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; type=TS jsonObservationValue.value: &apos;+jsonObservationValue.value); // 1096
				} // end if 
				var strObservationValue= jsonObservationValue.value;
			} // end if 

			if(debug&gt;0) {
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(strObservationValue): &apos;+typeof(strObservationValue)+&apos; strObservationValue: &apos;+strObservationValue);
			} // end if 
			// channelMap.put(strObservationCode,strObservationValue);
			return strObservationValue;
		} // end if
		i++;
	}
	return;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>1f7f3707-9a87-421e-893f-98bd6c2b4b92</id>
        <name>get_perinatal_history_field_lookup</name>
        <revision>4</revision>
        <lastModified>
          <time>1663795650458</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: get_perinatal_history_field_lookup.js
	@param {String}  field - This field argument is a string (e.g. LBW_PRI)
	@return {String} jsonString - This returned value is a jsonString
	History:
	2022-09-21 JER - Modified default no answer from &apos;N&apos; to &apos;&apos;
	2022-08-04 JER - Modified from using inPerinatalHistory to field variables
*/
function get_perinatal_history_field_lookup(field) {
	
	var scriptName= &apos;get_perinatal_history_field_lookup&apos;;
	// complete list of Perinatal History fields configured from Global Channel Map - in Deploy script
	var inPerinatalHistory= globalChannelMap.get(&apos;praPerinatalHistory&apos;);
	var debug= 0;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field: &apos;+field); 
	}
	
	if(typeof(field) !== &apos;undefined&apos;) {
		if(field.toString().length&gt;0) {
			// verify inPerinatalHistory is defined and has a valid value for evaluation
			if(debug&lt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(field)+&apos; field= &apos;+field+&apos; length= &apos;+field.length);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument inPerinatalHistory typeof= &apos;+typeof(inPerinatalHistory)+&apos; inPerinatalHistory= &apos;+inPerinatalHistory+&apos; toString()= &apos;+inPerinatalHistory.toString()+&apos; length= &apos;+inPerinatalHistory.toString().length+&apos; EVAL inPerinatalHistory.toString.indexOf(field.toString)= &apos;+inPerinatalHistory.toString().indexOf(field.toString()));
			}
			if((typeof(inPerinatalHistory) !== &apos;undefined&apos;)&amp;&amp;(inPerinatalHistory.toString().length&gt;0)) {
				// 2022-08-04 JER - Modified from using inPerinatalHistory to field variables
				if(inPerinatalHistory.toString().indexOf(field.toString())&gt;-1) {
					return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;Y&apos;&quot;;
				} else {
					return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;&apos;&quot;;
				}// end if 
			} // end if
		} // end if
	} // end if 
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>2af76015-faff-469a-aef3-534a83765237</id>
        <name>get_physical_assessment_field_lookup</name>
        <revision>6</revision>
        <lastModified>
          <time>1663795563734</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: get_physical_assessment_field_lookup.js
	@param {String}  field - This field argument is a string (e.g. LBW_PRI)
	@return {String} jsonString - This returned value is a jsonString
	History:
	2022-09-21 JER - Modified default no answer from &apos;N&apos; to &apos;&apos;
	2022-08-03 JER - Modified from using inPhysicalAssessment array and field string variable
*/
function get_physical_assessment_field_lookup(field) {
	
	var scriptName= &apos;get_physical_assessment_field_lookup&apos;;
	// complete list of Physical Assessment fields configured from Global Channel Map - in Deploy script
	var inPhysicalAssessment= globalChannelMap.get(&apos;praPhysicalAssessment&apos;);
	var debug= 0;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field: &apos;+field); 
	}
	
	if(typeof(field) !== &apos;undefined&apos;) {
		if(field.toString().length&gt;0) {
			// verify inPhysicalAssessment is defined and has a valid value for evaluation
			if(debug&lt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(field)+&apos; field= &apos;+field+&apos; length= &apos;+field.length);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument inPhysicalAssessment typeof= &apos;+typeof(inPhysicalAssessment)+&apos; inPhysicalAssessment= &apos;+inPhysicalAssessment+&apos; toString()= &apos;+inPhysicalAssessment.toString()+&apos; length= &apos;+inPhysicalAssessment.toString().length+&apos; EVAL inPhysicalAssessment.toString.indexOf(field.toString)= &apos;+inPhysicalAssessment.toString().indexOf(field.toString()));
			}
			if((typeof(inPhysicalAssessment) !== &apos;undefined&apos;)&amp;&amp;(inPhysicalAssessment.toString().length&gt;0)) {
				// 2022-08-03 JER - Modified from using inPhysicalAssessment array and field string variable
				if(inPhysicalAssessment.toString().indexOf(field.toString())&gt;-1) {
					return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;Y&apos;&quot;;
				} else {
					return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;&apos;&quot;;
				}// end if 
			} // end if
		} // end if
	} // end if 
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>afcefbc8-3199-4585-b0ce-cda81a8c652e</id>
        <name>get_pregnancy_risk_factors_field_lookup</name>
        <revision>13</revision>
        <lastModified>
          <time>1663795662477</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: get_pregnancy_risk_factors_field_lookup.js
	@param {String}  field - This field argument is a string (e.g. LBW_PRI)
	@return {String} jsonString - This returned value is a jsonString
	History:
	2022-09-21 JER - Modified default no answer from &apos;N&apos; to &apos;&apos;
	2022-08-04 JER - Modified from inPregnancyRiskFactors to field in the jsonString return argument
	2022-08-01 JER - depreciated prior scriptName: get_pregnancy_risk_factors_field_lookup_DEPRECIATED.js
*/
function get_pregnancy_risk_factors_field_lookup(field) {
	
	var scriptName= &apos;get_pregnancy_risk_factors_field_lookup&apos;;
	// complete list of Pregnancy Risk Factors fields configured from Global Channel Map - in Deploy script
	var inPregnancyRiskFactors= globalChannelMap.get(&apos;praPregnancyRiskFactors&apos;);
	var debug= 0;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field: &apos;+field); 
	}
	
	if(typeof(field) !== &apos;undefined&apos;) {
		if(field.toString().length&gt;0) {
			// verify inPregnancyRiskFactors is defined and has a valid value for evaluation
			if(debug&lt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(field)+&apos; field= &apos;+field+&apos; length= &apos;+field.length);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument inPregnancyRiskFactors typeof= &apos;+typeof(inPregnancyRiskFactors)+&apos; inPregnancyRiskFactors= &apos;+inPregnancyRiskFactors+&apos; toString()= &apos;+inPregnancyRiskFactors.toString()+&apos; length= &apos;+inPregnancyRiskFactors.toString().length);
			}
			if((typeof(inPregnancyRiskFactors) !== &apos;undefined&apos;)&amp;&amp;(inPregnancyRiskFactors.toString().length&gt;0)) {
				if(debug&lt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; EVAL inPregnancyRiskFactors.toString.indexOf(field.toString)= &apos;+inPregnancyRiskFactors.toString().indexOf(field.toString()));
				}
				// 2022-08-04 JER - Modified from inPregnancyRiskFactors to field in the jsonString return argument
				if(inPregnancyRiskFactors.toString().indexOf(field.toString())&gt;-1) {
					return &quot;&apos;&quot;+field+&quot;&apos;: &apos;Y&apos;&quot;;
				} else {
					return &quot;&apos;&quot;+field+&quot;&apos;: &apos;&apos;&quot;;
				}// end if 
			} // end if
		} // end if
	} // end if 
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>567d34de-08df-4e28-8c2b-487b3e0bdc7d</id>
        <name>get_primary_language_field_lookup</name>
        <revision>3</revision>
        <lastModified>
          <time>1659591420734</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: get_primary_language_field_lookup.js
	@param {String}  field - This field argument is a string (e.g. LBW_PRI)
	@return {String} jsonString - This returned value is a jsonString
	History:
	2022-08-04 JER - Modified from inPrimaryLanguage to field in the jsonString return argument
*/
function get_primary_language_field_lookup(field) {
	
	var scriptName= &apos;get_primary_language_field_lookup&apos;;
	// complete list of Primary Language fields configured from Global Channel Map - in Deploy script
	var inPrimaryLanguage= globalChannelMap.get(&apos;praPrimaryLanguage&apos;);
	var debug= 0;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field: &apos;+field); 
	}
	
	if(typeof(field) !== &apos;undefined&apos;) {
		if(field.toString().length&gt;0) {
			// verify inPrimaryLanguage is defined and has a valid value for evaluation
			if(debug&lt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(field)+&apos; field= &apos;+field+&apos; length= &apos;+field.length);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument inPrimaryLanguage typeof= &apos;+typeof(inPrimaryLanguage)+&apos; inPrimaryLanguage= &apos;+inPrimaryLanguage+&apos; toString()= &apos;+inPrimaryLanguage.toString()+&apos; length= &apos;+inPrimaryLanguage.toString().length+&apos; EVAL inPrimaryLanguage.toString.indexOf(field.toString)= &apos;+inPrimaryLanguage.toString().indexOf(field.toString()));
			}
			if((typeof(inPrimaryLanguage) !== &apos;undefined&apos;)&amp;&amp;(inPrimaryLanguage.toString().length&gt;0)) {
				// 2022-08-04 JER - Modified from inPrimaryLanguage to field in the jsonString return argument
				if(inPrimaryLanguage.toString().indexOf(field.toString())&gt;-1) {
					return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;Y&apos;&quot;;
				} else {
					return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;N&apos;&quot;;
				}// end if 
			} // end if
		} // end if
	} // end if 
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>afd427e1-1f7d-4e16-a225-bde3668fb239</id>
        <name>get_psychosocial_risk_factors_field_lookup</name>
        <revision>3</revision>
        <lastModified>
          <time>1663795689191</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: get_psychosocial_risk_factors_field_lookup.js
	@param {String}  field - This field argument is a string (e.g. LBW_PRI)
	@return {String} jsonString - This returned value is a jsonString
	History:
	2022-09-21 JER - Modified default no answer from &apos;N&apos; to &apos;&apos;
	2022-08-04 JER - Modified from inPsychosocialRiskFactors to field in the jsonString return argument
*/
function get_psychosocial_risk_factors_field_lookup(field) {
	
	var scriptName= &apos;get_psychosocial_risk_factors_field_lookup&apos;;
	// complete list of Psychosocial Risk Factors fields configured from Global Channel Map - in Deploy script
	var inPsychosocialRiskFactors= globalChannelMap.get(&apos;praPsychosocialRiskFactors&apos;);
	var debug= 0;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field: &apos;+field); 
	}
	
	if(typeof(field) !== &apos;undefined&apos;) {
		if(field.toString().length&gt;0) {
			// verify inPsychosocialRiskFactors is defined and has a valid value for evaluation
			if(debug&lt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(field)+&apos; field= &apos;+field+&apos; length= &apos;+field.length);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument inPsychosocialRiskFactors typeof= &apos;+typeof(inPsychosocialRiskFactors)+&apos; inPsychosocialRiskFactors= &apos;+inPsychosocialRiskFactors+&apos; toString()= &apos;+inPsychosocialRiskFactors.toString()+&apos; length= &apos;+inPsychosocialRiskFactors.toString().length+&apos; EVAL inPsychosocialRiskFactors.toString.indexOf(field.toString)= &apos;+inPsychosocialRiskFactors.toString().indexOf(field.toString()));
			}
			if((typeof(inPsychosocialRiskFactors) !== &apos;undefined&apos;)&amp;&amp;(inPsychosocialRiskFactors.toString().length&gt;0)) {
				// 2022-08-04 JER - Modified from inPsychosocialRiskFactors to field in the jsonString return argument
				if(inPsychosocialRiskFactors.toString().indexOf(field.toString())&gt;-1) {
					return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;Y&apos;&quot;;
				} else {
					return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;&apos;&quot;;
				}// end if 
			} // end if
		} // end if
	} // end if 
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>62229560-9619-4391-811d-888164d0970c</id>
        <name>get_race_field_lookup</name>
        <revision>4</revision>
        <lastModified>
          <time>1660780183220</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: get_race_field_lookup.js
	@param {String}  field - This field argument is a string (e.g. LBW_PRI)
	@return {String} jsonString - This returned value is a jsonString
	History:
	2022-08-04 JER - Modified from inRace to field in the jsonString return argument
*/
function get_race_field_lookup(field) {
	
	var scriptName= &apos;get_race_field_lookup&apos;;
	// complete list of Race fields configured from Global Channel Map - in Deploy script
	var inRace= globalChannelMap.get(&apos;praRace&apos;);
	var debug= 0;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field: &apos;+field); 
	}
	
	if(typeof(field) !== &apos;undefined&apos;) {
		if(field.toString().length&gt;0) {
			// verify inRace is defined and has a valid value for evaluation
			if(debug&lt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(field)+&apos; field= &apos;+field+&apos; length= &apos;+field.length);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument inRace typeof= &apos;+typeof(inRace)+&apos; inRace= &apos;+inRace+&apos; toString()= &apos;+inRace.toString()+&apos; length= &apos;+inRace.toString().length+&apos; EVAL inRace.toString.indexOf(field.toString)= &apos;+inRace.toString().indexOf(field.toString()));
			}
			if((typeof(inRace) !== &apos;undefined&apos;)&amp;&amp;(inRace.toString().length&gt;0)) {
				// 2022-08-04 JER - Modified from inRace to field in the jsonString return argument
				if(inRace.toString().indexOf(field.toString())&gt;-1) {
					return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;Y&apos;&quot;;
				} else {
					return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;N&apos;&quot;;
				}// end if 
			} // end if
		} // end if
	} // end if 
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>0ee8afa8-f492-4352-a357-c071e29b8f8f</id>
        <name>get_smoking_tobacco_use_field_lookup</name>
        <revision>13</revision>
        <lastModified>
          <time>1663795525636</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: get_smoking_tobacco_use_field_lookup.js
	@param {String}  field - This field argument is a string (e.g. LBW_PRI)
	@return {String} jsonString - This returned value is a jsonString
	History:
	2022-09-21 JER - Modified default no answer from &apos;N&apos; to &apos;&apos;
	2022-09-14 JER - Modified the comma (,) to pipe (|)
	2022-08-30 JER - Modified input argument from field to observation object (e.g. [smokingTobaccoUse,cigarettes,17,N,Never smoked tobacco (finding)])
	2022-08-03 JER - Modified from inSmokingTobaccoUse to field in the jsonString return argument
*/
function get_smoking_tobacco_use_field_lookup(observation) {
	
	var scriptName= &apos;get_smoking_tobacco_use_field_lookup&apos;;
	// complete list of Smoking Tobacco Use fields configured from Global Channel Map - in Deploy script
	var inSmokingTobaccoUse= globalChannelMap.get(&apos;praSmokingTobaccoUse&apos;);
	var debug= 0;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field: &apos;+field); 
	}

	// 2022-09-14 JER - Modified the comma (,) to pipe (|)
	var lstObservation= observation.split(&apos;|&apos;);
	// 2022-08-30 JER - Get the PRA equivalent field from observation
	var field= lstObservation[1].toString();
	var value= lstObservation[3].toString();
	
	if(typeof(field) !== &apos;undefined&apos;) {
		if(field.toString().length&gt;0) {
			// verify inSmokingTobaccoUse is defined and has a valid value for evaluation
			// 2022-08-30 JER - Modify inSmokingTobaccoUse from array object to string
			var strInSmokingTobaccoUse= JSON.stringify(inSmokingTobaccoUse);
			if(debug&lt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(field)+&apos; field= &apos;+field+&apos; length= &apos;+field.length);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument strInSmokingTobaccoUse typeof= &apos;+typeof(strInSmokingTobaccoUse)+&apos; strInSmokingTobaccoUse= &apos;+strInSmokingTobaccoUse+&apos; length= &apos;+strInSmokingTobaccoUse.toString().length+&apos; EVAL &apos;+strInSmokingTobaccoUse+&apos;.indexOf(&apos;+field+&apos;)= &apos;+inSmokingTobaccoUse.toString().indexOf(field.toString()));
			} // end if 
			if((typeof(strInSmokingTobaccoUse) !== &apos;undefined&apos;)&amp;&amp;(strInSmokingTobaccoUse.length&gt;0)) {
				// 2022-08-30 JER - Modify the if-condition to evaluate if the PRA fields inSmokingTobaccoUse exists in field
				// if(inSmokingTobaccoUse.toString().indexOf(field.toString())&gt;-1) {
				if(strInSmokingTobaccoUse.indexOf(field)&gt;-1) {
				// 2022-08-03 JER - Modified from inSmokingTobaccoUse to field in the jsonString return argument
					if(value.toString().length&gt;0) {
						return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;&quot;+value+&quot;&apos;&quot;;
					} else {
						return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;&apos;&quot;;
					} // end if 
				/*
					} else {
						return jsonString= &quot;&apos;&quot;+field+&quot;&apos;: &apos;&apos;&quot;;
					}// end if
				*/
				} // end if 
			} // end if
		} // end if
	} // end if 
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>aaf91b69-bc5e-4210-a493-2904be02b2d0</id>
        <name>set_4ps_plus_field_lookup</name>
        <revision>19</revision>
        <lastModified>
          <time>1663768765034</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument
	scriptName: set_4ps_plus_field_lookup.js
	@param {object}  field - This field argument is an array object (e.g. {&apos;LBW_PRI&apos;: &apos;Y&apos;,&apos;Smoking&apos;: &apos;Y&apos;})
	@return {object} jsonString - This returns a resulting object using the arrJSONString
	History:
	2022-09-20 JER - Modified added to distinguish between str4psPlus element name and value
*/
function set_4ps_plus_field_lookup(arrObservations) {
	
	var scriptName= &apos;set_4ps_plus_field_lookup&apos;;
	var debug= 0;
	// complete list of Pregnancy Risk Factors configured from Global Channel Map - in Deploy script
	var in4psPlus= globalChannelMap.get(&apos;pra4psPlus&apos;);
	// output list of all Pregnancy Risk Factors for JSON
	var out4psPlus= {};

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; arrObservation typeof: &apos;+typeof(arrObservations)+&apos; arrObservations: &apos;+arrObservations);
	} // end if 
	
	if((typeof(in4psPlus) !== &apos;undefined&apos;)&amp;&amp;(in4psPlus.length)&gt;0) {
	
		if(debug&lt;0) { 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A argument arrObservation typeof= &apos;+typeof(arrObservations)+&apos; arrObservations= &apos;+arrObservations+&apos; length= &apos;+arrObservations.length); 
		}

		for(var i= 0;i&lt;in4psPlus.length;i++) {
		
			// set the in4psPlus element toString()
			var str4psPlus= in4psPlus[i].toString();
			
			// set the arrObservation array into toString() to be evaluated
			var strObservations= JSON.stringify(arrObservations);
			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B1 strObservations typeof= &apos;+typeof(strObservations)+&apos; length= &apos;+strObservations.length+&apos; strObservations= &apos;+strObservations);
			} // end if 
			
			// arrObservations object contains current list of found Pregnancy Risk Factors from CCDA
			if((typeof(strObservations) !== &apos;undefined&apos;)&amp;&amp;(strObservations.length&gt;0)) {

				// 2022-09-20 JER - Modified added to distinguish between str4psPlus element name and value
				var first4psPlusElement= strObservations.split(&apos;:&apos;)[0].replace(/[^a-z0-9]/gi, &apos;&apos;);
				var first4psPlusValue=   strObservations.split(&apos;:&apos;)[1].trim().replace(/[^a-z0-9]/gi, &apos;&apos;);
				if(debug&gt;0) { 
					// logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B.1 str4psPlus= &apos;+str4psPlus+&apos; length: &apos;+str4psPlus.length);
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B.1 first4psPlusElement= &apos;+first4psPlusElement);
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B.2 first4psPlusValue= &apos;+first4psPlusValue);
				}

				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C EVALUATE str4psPlus= &apos;+str4psPlus.toUpperCase()+&apos; VS strObservations= &apos;+strObservations.toUpperCase()+&apos; EVAL= &apos;+strObservations.toUpperCase().indexOf(str4psPlus.toUpperCase()));
				}

				// &quot;&apos;HAVEYOUEVERDRUNKALCOHOL&apos;: &apos;N&apos;&quot;
				if(strObservations.toUpperCase().indexOf(str4psPlus.toUpperCase())&gt;-1) {
					// 2022-07-27 JER - Modified to accommodate out4psPlus as Object()
					out4psPlus[first4psPlusElement]= first4psPlusValue;
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D1 SET out4psPlus[&apos;+str4psPlus+&apos;]= &apos;+out4psPlus[str4psPlus]);
					}
				} else {
					out4psPlus[first4psPlusElement]= &apos;&apos;;
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D2 SET out4psPlus[&apos;+str4psPlus+&apos;]= &apos;+out4psPlus[str4psPlus]);
					}
				} // end if
			} else {
				out4psPlus[first4psPlusElement]= &apos;&apos;;
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D3 SET out4psPlus[&apos;+str4psPlus+&apos;]= &apos;+out4psPlus[str4psPlus]);
				} // end if 	
			}
		} // end for
		channelMap.put(&apos;out4psPlus&apos;,out4psPlus);
	} else {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E in4psPlus has no value or is &quot;undefined&quot;.&apos;);
	}// end if
	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; F typeof(out4psPlus)= &apos;+typeof(out4psPlus)+&apos; toString= &apos;+JSON.stringify(out4psPlus)+&apos; length= &apos;+JSON.stringify(out4psPlus).length); 
	}
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>3de44bad-08fd-48ea-9f51-f8ee3add1c16</id>
        <name>set_4ps_plus_followup_questions_field_lookup</name>
        <revision>1</revision>
        <lastModified>
          <time>1659374538988</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: set_4ps_plus_followup_questions_field_lookup.js
	@param {object}  field - This field argument is an array object (e.g. {&apos;LBW_PRI&apos;: &apos;Y&apos;,&apos;Smoking&apos;: &apos;Y&apos;})
	@return {object} jsonString - This returns a resulting object using the arrJSONString
	History:
*/
function set_4ps_plus_followup_questions_field_lookup(arrObservations) {
	
	var scriptName= &apos;set_4ps_plus_followup_questions_field_lookup&apos;;
	var debug= 0;
	// complete list of4ps Plus Followup Questions configured from Global Channel Map - in Deploy script
	var in4psPlusFollowupQuestions= globalChannelMap.get(&apos;pra4psPlusFollowupQuestions&apos;);
	// output list of all4ps Plus Followup Questions for JSON
	var out4psPlusFollowupQuestions= {};
	var outString;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(arrObservations)+&apos; arrObservations= &apos;+arrObservations+&apos; length= &apos;+arrObservations.length); 
	}

	// arrObservations object contains current list of found4ps Plus Followup Questions from CCDA
	if(typeof(arrObservations) !== &apos;undefined&apos;) {
		if(arrObservations.toString().length&gt;0) {
			for(var j= 0;j&lt;arrObservations.length;j++) {
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof= &apos;+typeof(arrObservations[j])+&apos; observation= &apos;+arrObservations[j]+&apos; toString= &apos;+arrObservations[j].toString()+&apos; length= &apos;+arrObservations[j].toString().length); 
				}
				var strObservation= arrObservations[j].toString();
				if(strObservation.length&gt;0) {
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(in4psPlusFollowupQuestions)= &apos;+typeof(in4psPlusFollowupQuestions)+&apos; toString= &apos;+in4psPlusFollowupQuestions.toString()+&apos; length= &apos;+in4psPlusFollowupQuestions.toString().length); 
					}
					var lst4psPlusFollowupQuestionsElements= in4psPlusFollowupQuestions.toString().split(&apos;,&apos;);
					for(var i= 0;i&lt;lst4psPlusFollowupQuestionsElements.length;i++) {
						var in4psPlusFollowupQuestionsElement= lst4psPlusFollowupQuestionsElements[i].toString();
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(in4psPlusFollowupQuestionsElement[&apos;+i+&apos;])= &apos;+typeof(in4psPlusFollowupQuestionsElement)+&apos; in4psPlusFollowupQuestionsElement[&apos;+i+&apos;]= &apos;+in4psPlusFollowupQuestionsElement+&apos; length= &apos;+in4psPlusFollowupQuestionsElement.length+&apos; strObservation= &apos;+strObservation+&apos; length= &apos;+strObservation.legnth+&apos; EVAL: strObservation.indexOf(in4psPlusFollowupQuestionsElement)= &apos;+strObservation.indexOf(in4psPlusFollowupQuestionsElement));
						}
						if(strObservation.indexOf(in4psPlusFollowupQuestionsElement)&lt;0) {
							// 2022-07-27 JER - Modified to accommodate out4psPlusFollowupQuestions as Object()
							out4psPlusFollowupQuestions[in4psPlusFollowupQuestionsElement]= &apos;N&apos;;
							// outString= &quot;&apos;&quot;+in4psPlusFollowupQuestionsElement+&quot;&apos;: &apos;N&apos;&quot;;
							// out4psPlusFollowupQuestions.push(outString);
						} else {
							 out4psPlusFollowupQuestions[in4psPlusFollowupQuestionsElement]= &apos;Y&apos;;
						} // end if
					} // end for
				} else {
					// 2022-07-27 JER - Verify this modified code to handle if there is no current Medical Condition value has no length
					var lst4psPlusFollowupQuestionsElements= in4psPlusFollowupQuestions.toString().split(&apos;,&apos;);
					for(var i= 0;i&lt;lst4psPlusFollowupQuestionsElements.length;i++) {
						var in4psPlusFollowupQuestionsElement= lst4psPlusFollowupQuestionsElements[i].toString();
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Defined with value - typeof(in4psPlusFollowupQuestionsElement[&apos;+i+&apos;])= &apos;+typeof(in4psPlusFollowupQuestionsElement)+&apos; in4psPlusFollowupQuestionsElement[&apos;+i+&apos;]= &apos;+in4psPlusFollowupQuestionsElement+&apos; length= &apos;+in4psPlusFollowupQuestionsElement.length);
						}
						// 2022-07-27 JER - Modified to accommodate out4psPlusFollowupQuestions as Object()
						out4psPlusFollowupQuestions[in4psPlusFollowupQuestionsElement]= &apos;N&apos;;
					} // end for
				} // end if 
			} // end for
			channelMap.put(&apos;out4psPlusFollowupQuestions&apos;,out4psPlusFollowupQuestions);
		} else {
			// 2022-07-27 JER - Verify this modified code to handle if there is no current Medical Condition value has no length
			var lst4psPlusFollowupQuestionsElements= in4psPlusFollowupQuestions.toString().split(&apos;,&apos;);
			for(var i= 0;i&lt;lst4psPlusFollowupQuestionsElements.length;i++) {
				var in4psPlusFollowupQuestionsElement= lst4psPlusFollowupQuestionsElements[i].toString();
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Defined with no value - typeof(in4psPlusFollowupQuestionsElement[&apos;+i+&apos;])= &apos;+typeof(in4psPlusFollowupQuestionsElement)+&apos; in4psPlusFollowupQuestionsElement[&apos;+i+&apos;]= &apos;+in4psPlusFollowupQuestionsElement+&apos; length= &apos;+in4psPlusFollowupQuestionsElement.length);
				}
				// 2022-07-27 JER - Modified to accommodate out4psPlusFollowupQuestions as Object()
				out4psPlusFollowupQuestions[in4psPlusFollowupQuestionsElement]= &apos;N&apos;;
			} // end for
		}
		channelMap.put(&apos;out4psPlusFollowupQuestions&apos;,out4psPlusFollowupQuestions);
	} // end if
	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(out4psPlusFollowupQuestions)= &apos;+typeof(out4psPlusFollowupQuestions)+&apos; toString= &apos;+out4psPlusFollowupQuestions.toString()+&apos; length= &apos;+out4psPlusFollowupQuestions.toString().length); 
	}
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>3595327c-4a7d-40a1-8e12-d59f681d5cdb</id>
        <name>set_bleeding_during_current_pregnancy_field_lookup</name>
        <revision>9</revision>
        <lastModified>
          <time>1663185591766</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: set_bleeding_during_current_pregnancy_field_lookup.js
	@param {object}  field - This field argument is an array object (e.g. {&apos;LBW_PRI&apos;: &apos;Y&apos;,&apos;Smoking&apos;: &apos;Y&apos;})
	@return {object} jsonString - This returns a resulting object using the arrJSONString
	History:
	2022-09-14 JER - Modified the section to= inBleedingDuringCurrentPregnancy and incorporated additional debug statements
	2022-08-01 JER - Modified to if D defined with no value - inBleedingDuringCurrentPregnancyElement[5]== &quot;None&quot; set value to &apos;Y&apos;
*/
function set_bleeding_during_current_pregnancy_field_lookup(arrObservations) {
	
	var scriptName= &apos;set_bleeding_during_current_pregnancy_field_lookup&apos;;
	var debug= 0;
	// complete list of Bleeding During Current Pregnancy configured from Global Channel Map - in Deploy script
	var inBleedingDuringCurrentPregnancy= globalChannelMap.get(&apos;praBleedingDuringCurrentPregnancy&apos;);
	// output list of all Bleeding During Current Pregnancy for JSON
	var outBleedingDuringCurrentPregnancy= {};
	var outString;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(arrObservations)+&apos; arrObservations= &apos;+arrObservations+&apos; length= &apos;+arrObservations.length); 
	}

	// arrObservations object contains current list of found Bleeding During Current Pregnancy from CCDA
	if(typeof(arrObservations) !== &apos;undefined&apos;) {
		if(arrObservations.toString().length&gt;0) {
			for(var j= 0;j&lt;arrObservations.length;j++) {
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A typeof= &apos;+typeof(arrObservations[j])+&apos; observation= &apos;+arrObservations[j]+&apos; toString= &apos;+arrObservations[j].toString()+&apos; length= &apos;+arrObservations[j].toString().length); 
				}
				var strObservation= arrObservations[j].toString();
				if(strObservation.length&gt;0) {
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(inBleedingDuringCurrentPregnancy)= &apos;+typeof(inBleedingDuringCurrentPregnancy)+&apos; toString= &apos;+inBleedingDuringCurrentPregnancy.toString()+&apos; length= &apos;+inBleedingDuringCurrentPregnancy.toString().length); 
					}
					var lstBleedingDuringCurrentPregnancyElements= inBleedingDuringCurrentPregnancy.toString().split(&apos;,&apos;);
					for(var i= 0;i&lt;lstBleedingDuringCurrentPregnancyElements.length;i++) {
						var inBleedingDuringCurrentPregnancyElement= lstBleedingDuringCurrentPregnancyElements[i].toString();
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B typeof(inBleedingDuringCurrentPregnancyElement[&apos;+i+&apos;])= &apos;+typeof(inBleedingDuringCurrentPregnancyElement)+&apos; inBleedingDuringCurrentPregnancyElement[&apos;+i+&apos;]= &apos;+inBleedingDuringCurrentPregnancyElement+&apos; length= &apos;+inBleedingDuringCurrentPregnancyElement.length+&apos; strObservation= &apos;+strObservation+&apos; length= &apos;+strObservation.legnth+&apos; EVAL: strObservation.indexOf(inBleedingDuringCurrentPregnancyElement)= &apos;+strObservation.indexOf(inBleedingDuringCurrentPregnancyElement));
						}
						if(strObservation.indexOf(inBleedingDuringCurrentPregnancyElement)&lt;0) {
							// 2022-07-27 JER - Modified to accommodate outBleedingDuringCurrentPregnancy as Object()
							outBleedingDuringCurrentPregnancy[inBleedingDuringCurrentPregnancyElement]= &apos;N&apos;;
							// outString= &quot;&apos;&quot;+inBleedingDuringCurrentPregnancyElement+&quot;&apos;: &apos;N&apos;&quot;;
							// outBleedingDuringCurrentPregnancy.push(outString);
						} else {
							 outBleedingDuringCurrentPregnancy[inBleedingDuringCurrentPregnancyElement]= &apos;Y&apos;;
						} // end if
						if(debug&gt;0) {
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B1 inBleedingDuringCurrentPregnancyElement= &apos;+inBleedingDuringCurrentPregnancyElement+&apos; outBleedingDuringCurrentPregnancy= &apos;+JSON.stringify(outBleedingDuringCurrentPregnancy));
						} // end if 
					} // end for
				} else {
					// 2022-07-27 JER - Verify this modified code to handle if there is no current Medical Condition value has no length
					var lstBleedingDuringCurrentPregnancyElements= inBleedingDuringCurrentPregnancy.toString().split(&apos;,&apos;);
					for(var i= 0;i&lt;lstBleedingDuringCurrentPregnancyElements.length;i++) {
						var inBleedingDuringCurrentPregnancyElement= lstBleedingDuringCurrentPregnancyElements[i].toString();
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C Defined with value - typeof(inBleedingDuringCurrentPregnancyElement[&apos;+i+&apos;])= &apos;+typeof(inBleedingDuringCurrentPregnancyElement)+&apos; inBleedingDuringCurrentPregnancyElement[&apos;+i+&apos;]= &apos;+inBleedingDuringCurrentPregnancyElement+&apos; length= &apos;+inBleedingDuringCurrentPregnancyElement.length);
						}
						// 2022-07-27 JER - Modified to accommodate outBleedingDuringCurrentPregnancy as Object()
						outBleedingDuringCurrentPregnancy[inBleedingDuringCurrentPregnancyElement]= &apos;N&apos;;
						if(debug&gt;0) {
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C1 inBleedingDuringCurrentPregnancyElement= &apos;+inBleedingDuringCurrentPregnancyElement+&apos; outBleedingDuringCurrentPregnancy= &apos;+JSON.stringify(outBleedingDuringCurrentPregnancy));
						} // end if
					} // end for
				} // end if 
			} // end for
			channelMap.put(&apos;outBleedingDuringCurrentPregnancy&apos;,outBleedingDuringCurrentPregnancy);
		} else {
			// 2022-07-27 JER - Verify this modified code to handle if there is no current Medical Condition value has no length
			var lstBleedingDuringCurrentPregnancyElements= inBleedingDuringCurrentPregnancy.toString().split(&apos;,&apos;);
			for(var i= 0;i&lt;lstBleedingDuringCurrentPregnancyElements.length;i++) {
				var inBleedingDuringCurrentPregnancyElement= lstBleedingDuringCurrentPregnancyElements[i].toString();
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D Defined with no value - typeof(inBleedingDuringCurrentPregnancyElement[&apos;+i+&apos;])= &apos;+typeof(inBleedingDuringCurrentPregnancyElement)+&apos; inBleedingDuringCurrentPregnancyElement[&apos;+i+&apos;]= &apos;+inBleedingDuringCurrentPregnancyElement+&apos; length= &apos;+inBleedingDuringCurrentPregnancyElement.length);
				}
				// 2022-08-01 JER - Modified to if D defined with no value - inBleedingDuringCurrentPregnancyElement[5]== &quot;None&quot; set value to &apos;Y&apos;
				if(inBleedingDuringCurrentPregnancyElement == &apos;None&apos;) {
					outBleedingDuringCurrentPregnancy[inBleedingDuringCurrentPregnancyElement]= &apos;Y&apos;;
				} else {
					outBleedingDuringCurrentPregnancy[inBleedingDuringCurrentPregnancyElement]= &apos;N&apos;;
				} // end if 
				if(debug&gt;0) {
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D1 inBleedingDuringCurrentPregnancyElement= &apos;+inBleedingDuringCurrentPregnancyElement+&apos; outBleedingDuringCurrentPregnancy= &apos;+JSON.stringify(outBleedingDuringCurrentPregnancy));
				} // end if
			} // end for
		}
		channelMap.put(&apos;outBleedingDuringCurrentPregnancy&apos;,outBleedingDuringCurrentPregnancy);
	} // end if
	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E EXIT typeof(outBleedingDuringCurrentPregnancy)= &apos;+typeof(outBleedingDuringCurrentPregnancy)+&apos; stringify= &apos;+JSON.stringify(outBleedingDuringCurrentPregnancy)+&apos; length= &apos;+outBleedingDuringCurrentPregnancy.toString().length); 
	}
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>ee4c2eda-8cb2-40b0-b189-8109f9f7d6ee</id>
        <name>set_current_medical_conditions_field_lookup</name>
        <revision>62</revision>
        <lastModified>
          <time>1659589193523</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: set_current_medical_conditions_field_lookup.js
	@param {object}  field - This field argument is an array object (e.g. {&apos;LBW_PRI&apos;: &apos;Y&apos;,&apos;Smoking&apos;: &apos;Y&apos;})
	@return {object} jsonString - This returns a resulting object using the arrJSONString
	History:
	2022-08-02 18:29 JER - Modified with latest revision of the evaluation and insert into outCurrentMedicalConditions array
	2022-08-01 20:02 JER - Modified on the evaluation between observation and inCurrentMedicalConditions array to simply use indexOf function and not interate through all of the inCurrentMedicalConditions array elements
	2022-08-01 14:39 JER - Modified to use toUpperCase() to match case sensitivity when performing indexOf function
	2022-08-01 13:09 JER - Modified configuration bug from using inPregnancyRiskFactor to inCurrentMedicalCondition
*/
function set_current_medical_conditions_field_lookup(arrObservations) {
	
	var scriptName= &apos;set_current_medical_conditions_field_lookup&apos;;
	var debug= 0;
	// complete list of Current Medical Conditions configured from Global Channel Map - in Deploy script
	var inCurrentMedicalConditions= globalChannelMap.get(&apos;praCurrentMedicalConditions&apos;);
	// output list of all Current Medical Conditions for JSON
	var outCurrentMedicalConditions= {};
	
	if((typeof(inCurrentMedicalConditions) !== &apos;undefined&apos;)&amp;&amp;(inCurrentMedicalConditions.length)&gt;0) {
	
		if(debug&lt;0) { 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A argument arrObservation typeof= &apos;+typeof(arrObservations)+&apos; arrObservations= &apos;+arrObservations+&apos; length= &apos;+arrObservations.length); 
		}

		for(var i= 0;i&lt;inCurrentMedicalConditions.length;i++) {
		
			// set the currentMedicalCondition element toString()
			var strCurrentMedicalCondition= inCurrentMedicalConditions[i].toString();
			// set the arrObservation array into toString() to be evaluated
			var strObservations= JSON.stringify(arrObservations);
			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; strObservations typeof= &apos;+typeof(strObservations)+&apos; length= &apos;+strObservations.length+&apos; strObservations= &apos;+strObservations);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; strCurrentMedicalCondition typeof= &apos;+typeof(strCurrentMedicalCondition)+&apos; length= &apos;+strCurrentMedicalCondition.length+&apos; strCurrentMedicalCondition= &apos;+strCurrentMedicalCondition);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; strObservations CHECK typeof= &apos;+(typeof(strObservations) !== &apos;undefined&apos;)+&apos; length= &apos;+(strObservations.length&gt;0)+&apos; EVALUATION= &apos;+(typeof(strObservations) !== &apos;undefined&apos;)&amp;&amp;(strObservations.length&gt;0));
			}
			// arrObservations object contains current list of found Current Medical Conditions and Risks from CCDA
			if((typeof(strObservations) !== &apos;undefined&apos;)&amp;&amp;(strObservations.length&gt;0)) {

				// 2022-08-01 JER - Modified to use toUpperCase() to match case sensitivity when performing indexOf function
				// Convert string (e.g. &quot;HelloWorld&quot;: &quot;Y&quot;) to array and then string to first element of array
				// var strObservations= strObservations.toString().split(&quot;:&quot;)[0].replace(/[&apos;&quot;]+/g,&apos;&apos;);
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; EVALUATE strCurrentMedicalCondition= &apos;+strCurrentMedicalCondition.toUpperCase()+&apos; VS strObservations= &apos;+strObservations.toUpperCase()+&apos; EVAL= &apos;+strObservations.toUpperCase().indexOf(strCurrentMedicalCondition.toUpperCase()));
				}
				if(strObservations.toUpperCase().indexOf(strCurrentMedicalCondition.toUpperCase())&gt;-1) {
					// 2022-07-27 JER - Modified to accommodate outCurrentMedicalConditions as Object()
					outCurrentMedicalConditions[strCurrentMedicalCondition]= &apos;Y&apos;;
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; SET outCurrentMedicalConditions[&apos;+strCurrentMedicalCondition+&apos;]= &apos;+outCurrentMedicalConditions[strCurrentMedicalCondition]);
					}
				} else {
					// 2022-08-01 JER - Modified configuration bug from using inPregnancyRiskFactor to inCurrentMedicalCondition
					outCurrentMedicalConditions[strCurrentMedicalCondition]= &apos;N&apos;;
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; SET outCurrentMedicalConditions[&apos;+strCurrentMedicalCondition+&apos;]= &apos;+outCurrentMedicalConditions[strCurrentMedicalCondition]);
					}
				} // end if
			} else {
				// 2022-08-01 JER - Modified configuration bug from using inPregnancyRiskFactor to inCurrentMedicalCondition
				outCurrentMedicalConditions[strCurrentMedicalCondition]= &apos;N&apos;;
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; SET outCurrentMedicalConditions[&apos;+strCurrentMedicalCondition+&apos;]= &apos;+outCurrentMedicalConditions[strCurrentMedicalCondition]);
				} // end if 	
			}
		} // end for
		channelMap.put(&apos;outCurrentMedicalConditions&apos;,outCurrentMedicalConditions);
	} else {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; inCurrentMedicalConditions has no value or is &quot;undefined&quot;.&apos;);
	}// end if
	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(outCurrentMedicalConditions)= &apos;+typeof(outCurrentMedicalConditions)+&apos; toString= &apos;+JSON.stringify(outCurrentMedicalConditions)+&apos; length= &apos;+JSON.stringify(outCurrentMedicalConditions).length); 
	}
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>a51e6273-6957-4687-96e8-c753eb8cffac</id>
        <name>set_entry_into_prenatal_care_field_lookup</name>
        <revision>2</revision>
        <lastModified>
          <time>1662589659379</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: set_entry_into_prenatal_care_field_lookup.js
	@param {object}  field - This field argument is an array object (e.g. {&apos;LBW_PRI&apos;: &apos;Y&apos;,&apos;Smoking&apos;: &apos;Y&apos;})
	@return {object} jsonString - This returns a resulting object using the arrJSONString
	History:
*/
function set_entry_into_prenatal_care_field_lookup(arrObservations) {
	
	var scriptName= &apos;set_entry_into_prenatal_care_field_lookup&apos;;
	var debug= 0;
	// complete list of Primary Language configured from Global Channel Map - in Deploy script
	var inEntryIntoPrenatalCare= globalChannelMap.get(&apos;praEntryIntoPrenatalCare&apos;);
	// build list of key: value pair strings into array before JSON
	var arrEntryIntoPrenatalCare= [];
	// output list of all Entry Into Prenatal Care for JSON
	var outEntryIntoPrenatalCare= {};
	var outString;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(arrObservations)+&apos; arrObservations= &apos;+arrObservations+&apos; length= &apos;+arrObservations.length); 
	}

	// arrObservations object contains current list of found Entry Into Prenatal Care from CCDA
	// loop through the PRA EntryIntoPrenatalCare Form Elements
	var lstEntryIntoPrenatalCareElements= inEntryIntoPrenatalCare.toString().split(&apos;,&apos;);
	for(var i= 0;i&lt;lstEntryIntoPrenatalCareElements.length;i++) {
		var inEntryIntoPrenatalCareElement= lstEntryIntoPrenatalCareElements[i].toString();
		if(debug&gt;0) { 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(inEntryIntoPrenatalCareElement[&apos;+i+&apos;])= &apos;+typeof(inEntryIntoPrenatalCareElement)+&apos; inEntryIntoPrenatalCareElement[&apos;+i+&apos;]= &apos;+inEntryIntoPrenatalCareElement+&apos; length= &apos;+inEntryIntoPrenatalCareElement.length+&apos; arrObservations= &apos;+arrObservations+&apos; length= &apos;+arrObservations.length+&apos; EVAL: inEntryIntoPrenatalCareElement.indexOf(arrObservations)= &apos;+inEntryIntoPrenatalCareElement.indexof(arrObservations));
		}
		
		for each(observation in arrObservations) {
			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; observation= &apos;+observation+&apos; typeof= &apos;+typeof(observation)+&apos; toString= &apos;+observation.toString()+&apos; inEntryIntoPrenatalCareElement= &apos;+inEntryIntoPrenatalCareElement+&apos; typeof= &apos;+typeof(inEntryIntoPrenatalCareElement)+&apos; toString= &apos;+inEntryIntoPrenatalCareElement.toString());
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; observation.indexOf(inEntryIntoPrenatalCareElement) or &apos;+observation+&apos;.indexOf(&apos;+inEntryIntoPrenatalCareElement+&apos;)= &apos;+observation.toString().indexOf(inEntryIntoPrenatalCareElement));
			}
		
			var strObservation= observation.toString().replace(/\s/g,&apos;&apos;);
			if(strObservation.toString().indexOf(inEntryIntoPrenatalCareElement)&gt;-1) {
				// var indexElement= 	observation.indexOf(inEntryIntoPrenatalCareElement);

				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; BEFORE typeof(strObservation): &apos;+typeof(strObservation)+&apos; strObservation: &apos;+strObservation);
				}
				//var strObservation= JSON.stringify(strObservation).replace(/[&quot;\\]/gi,&apos;&apos;);
			
				/*
				if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER typeof(strObservation): &apos;+typeof(strObservation)+&apos; strObservation: &apos;+strObservation); 
				}
				*/
			
				var lstObservation= observation.split(&apos;:&apos;);
				if(lstObservation[1].toString().length&gt;0) {
					// 2022-08-19 JER - evaluate if the coded observation if &apos;Y&apos; value
					/*
					if(lstObservation[1].toString()== &apos;Y&apos;) {
						logger.error(&apos;D&apos;);
						outEntryIntoPrenatalCare[inEntryIntoPrenatalCareElement]= &apos;Y&apos;;
						// 2022-08-19 JER - evaluate if observation is a discrete value (e.g. 106 mm[Hg])
					} else {
					*/
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; discrete lstObservation[0]]= &apos;+lstObservation[0].replace(/&quot;/g,&apos;&apos;)+&apos; lstObservation[1]= &apos;+lstObservation[1].replace(/&quot;/g,&apos;&apos;)); 
						}
						outEntryIntoPrenatalCare[lstObservation[0].replace(/&quot;/g,&apos;&apos;)]= lstObservation[1].replace(/&quot;/g,&apos;&apos;).trim();
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; discrete outEntryIntoPrenatalCare= &apos;+outEntryIntoPrenatalCare); 
						}
					//}
				} // end if 
			} // end if
		} // end for 
	} // end for
	
	for each(jsonPraElement in lstEntryIntoPrenatalCareElements) {
		
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; JSON.stringify(outEntryIntoPrenatalCare)= &apos;+JSON.stringify(outEntryIntoPrenatalCare)+&apos; typeof= &apos;+typeof(JSON.stringify(outEntryIntoPrenatalCare)));
		var strOutEntryIntoPrenatalCare= JSON.stringify(outEntryIntoPrenatalCare);
		if(strOutEntryIntoPrenatalCare.indexOf(jsonPraElement)&lt;0) {
			outEntryIntoPrenatalCare[jsonPraElement]= &apos;&apos;;
		} // end if 
	} // end for each
	
	channelMap.put(&apos;outEntryIntoPrenatalCare&apos;,outEntryIntoPrenatalCare);
	
	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(outEntryIntoPrenatalCare)= &apos;+typeof(outEntryIntoPrenatalCare)+&apos; toString= &apos;+JSON.stringify(outEntryIntoPrenatalCare)+&apos; length= &apos;+JSON.stringify(outEntryIntoPrenatalCare).length); 
	}
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>37d37022-95b0-46fb-8e54-75c2c91f75ea</id>
        <name>set_entry_prenatal_care_field_lookup</name>
        <revision>2</revision>
        <lastModified>
          <time>1659365294574</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: set_entry_prenatal_care_field_lookup.js
	@param {object}  field - This field argument is an array object (e.g. {&apos;LBW_PRI&apos;: &apos;Y&apos;,&apos;Smoking&apos;: &apos;Y&apos;})
	@return {object} jsonString - This returns a resulting object using the arrJSONString
	History:
*/
function set_entry_prenatal_care_field_lookup(arrObservations) {
	
	var scriptName= &apos;set_entry_prenatal_care_field_lookup&apos;;
	var debug= 0;
	// complete list of Entry Prenatal Care configured from Global Channel Map - in Deploy script
	var inEntryPrenatalCare= globalChannelMap.get(&apos;praReasonForLateEntryToPrenatalCare&apos;);
	// output list of all Entry Prenatal Care for JSON
	var outEntryPrenatalCare= {};
	var outString;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(arrObservations)+&apos; arrObservations= &apos;+arrObservations+&apos; length= &apos;+arrObservations.length); 
	}

	// arrObservations object contains current list of found Entry Prenatal Care from CCDA
	if(typeof(arrObservations) !== &apos;undefined&apos;) {
		if(arrObservations.toString().length&gt;0) {
			for(var j= 0;j&lt;arrObservations.length;j++) {
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof= &apos;+typeof(arrObservations[j])+&apos; observation= &apos;+arrObservations[j]+&apos; toString= &apos;+arrObservations[j].toString()+&apos; length= &apos;+arrObservations[j].toString().length); 
				}
				var strObservation= arrObservations[j].toString();
				if(strObservation.length&gt;0) {
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(inEntryPrenatalCare)= &apos;+typeof(inEntryPrenatalCare)+&apos; toString= &apos;+inEntryPrenatalCare.toString()+&apos; length= &apos;+inEntryPrenatalCare.toString().length); 
					}
					var lstEntryPrenatalCareElements= inEntryPrenatalCare.toString().split(&apos;,&apos;);
					for(var i= 0;i&lt;lstEntryPrenatalCareElements.length;i++) {
						var inEntryPrenatalCareElement= lstEntryPrenatalCareElements[i].toString();
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(inEntryPrenatalCareElement[&apos;+i+&apos;])= &apos;+typeof(inEntryPrenatalCareElement)+&apos; inEntryPrenatalCareElement[&apos;+i+&apos;]= &apos;+inEntryPrenatalCareElement+&apos; length= &apos;+inEntryPrenatalCareElement.length+&apos; strObservation= &apos;+strObservation+&apos; length= &apos;+strObservation.legnth+&apos; EVAL: strObservation.indexOf(inEntryPrenatalCareElement)= &apos;+strObservation.indexOf(inEntryPrenatalCareElement));
						}
						if(strObservation.indexOf(inEntryPrenatalCareElement)&lt;0) {
							// 2022-07-27 JER - Modified to accommodate outEntryPrenatalCare as Object()
							outEntryPrenatalCare[inEntryPrenatalCareElement]= &apos;N&apos;;
							// outString= &quot;&apos;&quot;+inEntryPrenatalCareElement+&quot;&apos;: &apos;N&apos;&quot;;
							// outEntryPrenatalCare.push(outString);
						} else {
							 outEntryPrenatalCare[inEntryPrenatalCareElement]= &apos;Y&apos;;
						} // end if
					} // end for
				} else {
					// 2022-07-27 JER - Verify this modified code to handle if there is no current Medical Condition value has no length
					var lstEntryPrenatalCareElements= inEntryPrenatalCare.toString().split(&apos;,&apos;);
					for(var i= 0;i&lt;lstEntryPrenatalCareElements.length;i++) {
						var inEntryPrenatalCareElement= lstEntryPrenatalCareElements[i].toString();
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Defined with value - typeof(inEntryPrenatalCareElement[&apos;+i+&apos;])= &apos;+typeof(inEntryPrenatalCareElement)+&apos; inEntryPrenatalCareElement[&apos;+i+&apos;]= &apos;+inEntryPrenatalCareElement+&apos; length= &apos;+inEntryPrenatalCareElement.length);
						}
						// 2022-07-27 JER - Modified to accommodate outEntryPrenatalCare as Object()
						outEntryPrenatalCare[inEntryPrenatalCareElement]= &apos;N&apos;;
					} // end for
				} // end if 
			} // end for
			channelMap.put(&apos;outEntryPrenatalCare&apos;,outEntryPrenatalCare);
		} else {
			// 2022-07-27 JER - Verify this modified code to handle if there is no current Medical Condition value has no length
			var lstEntryPrenatalCareElements= inEntryPrenatalCare.toString().split(&apos;,&apos;);
			for(var i= 0;i&lt;lstEntryPrenatalCareElements.length;i++) {
				var inEntryPrenatalCareElement= lstEntryPrenatalCareElements[i].toString();
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Defined with no value - typeof(inEntryPrenatalCareElement[&apos;+i+&apos;])= &apos;+typeof(inEntryPrenatalCareElement)+&apos; inEntryPrenatalCareElement[&apos;+i+&apos;]= &apos;+inEntryPrenatalCareElement+&apos; length= &apos;+inEntryPrenatalCareElement.length);
				}
				// 2022-07-27 JER - Modified to accommodate outEntryPrenatalCare as Object()
				outEntryPrenatalCare[inEntryPrenatalCareElement]= &apos;N&apos;;
			} // end for
		}
		channelMap.put(&apos;outEntryPrenatalCare&apos;,outEntryPrenatalCare);
	} // end if
	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(outEntryPrenatalCare)= &apos;+typeof(outEntryPrenatalCare)+&apos; toString= &apos;+outEntryPrenatalCare.toString()+&apos; length= &apos;+outEntryPrenatalCare.toString().length); 
	}
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>51d132b1-872b-4617-84d1-1481fd1f13a4</id>
        <name>set_ethnicity_field_lookup</name>
        <revision>9</revision>
        <lastModified>
          <time>1663792087891</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument
	
	scriptName: set_ethnicity_field_lookup.js
	@param {object}  field - This field argument is an array object (e.g. {&apos;LBW_PRI&apos;: &apos;Y&apos;,&apos;Smoking&apos;: &apos;Y&apos;})
	@return {object} jsonString - This returns a resulting object using the arrJSONString
	History:
	2022-09-21 JER - Modified the script leveraging from the set_4ps_plus_field_lookup.js to set_ethnicity_field_lookup.js
	2022-09-20 JER - Modified added to distinguish between str4psPlus element name and value
*/
function set_ethnicity_field_lookup(arrObservations) {
	
	var scriptName= &apos;set_ethnicity_field_lookup&apos;;
	var debug= 0;
	// complete list of Ethnicity configured from Global Channel Map - in Deploy script
	var inEthnicity= globalChannelMap.get(&apos;praEthnicity&apos;);
	// output list of all Ethnicity for JSON
	var outEthnicity= {};
	// 2022-08-22 JER - Added arrEthnicity to store initial evaluation observation versus praRace array list of JSON properties
	var arrEthnicity= [];
	var outString;
	var foundEthnicity= false;

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A arrObservation typeof: &apos;+typeof(arrObservations)+&apos; arrObservations: &apos;+arrObservations);
	} // end if 
	
	if((typeof(inEthnicity) !== &apos;undefined&apos;)&amp;&amp;(inEthnicity.length)&gt;0) {
	
		if(debug&lt;0) { 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B argument arrObservation typeof= &apos;+typeof(arrObservations)+&apos; arrObservations= &apos;+arrObservations+&apos; length= &apos;+arrObservations.length); 
		} // end if 

		for(var i= 0;i&lt;inEthnicity.length;i++) {
		
			// set the inEthnicity element toString()
			var strInEthnicity= inEthnicity[i].toString();
			
			// set the arrObservation array into toString() to be evaluated
			var strObservations= JSON.stringify(arrObservations);
			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C strObservations typeof= &apos;+typeof(strObservations)+&apos; length= &apos;+strObservations.length+&apos; strObservations= &apos;+strObservations);
			} // end if 
			
			// arrObservations object contains current list of found Pregnancy Risk Factors from CCDA
			if((typeof(strObservations) !== &apos;undefined&apos;)&amp;&amp;(strObservations.length&gt;0)) {

				// 2022-09-20 JER - Modified added to distinguish between strInEthnicity element name and value
				var firstEthnicityElement= strObservations.split(&apos;:&apos;)[0].replace(/[^a-z0-9]/gi, &apos;&apos;);
				var firstEthnicityValue=   strObservations.split(&apos;:&apos;)[1].trim().replace(/[^a-z0-9]/gi, &apos;&apos;);
				if(debug&gt;0) { 
					// logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B.1 strObservation= &apos;+strObservation+&apos; length: &apos;+strObservation.length);
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D.1 firstEthnicityElement= &apos;+firstEthnicityElement);
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D.2 firstEthnicityValue= &apos;+firstEthnicityValue);
				} // end if 

				// &quot;&apos;Hispanic&apos;: &apos;N&apos;&quot;
				if(strObservations.toUpperCase().indexOf(strInEthnicity.toUpperCase())&gt;-1) {
					// 2022-07-27 JER - Modified to accommodate outEthnicity as Object()
					outEthnicity[firstEthnicityElement]= firstEthnicityValue;
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E1 SET outEthnicity[&apos;+firstEthnicityElement+&apos;]= &apos;+outEthnicity[firstEthnicityElement]);
					} // end if 
				} else {
					outEthnicity[firstEthnicityElement]= &apos;&apos;;
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E2 SET outEthnicity[&apos;+firstEthnicityElement+&apos;]= &apos;+outEthnicity[firstEthnicityElement]);
					} // end if
				} // end if
			} else {
				outEthnicity[firstEthnicityElement]= &apos;&apos;;
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E3 SET outEthnicity[&apos;+firstEthnicityElement+&apos;]= &apos;+outEthnicity[firstEthnicityElement]);
				} // end if 	
			} // end if
		} // end for
		channelMap.put(&apos;outEthnicity&apos;,outEthnicity);
	} else {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; F inEthnicity has no value or is &quot;undefined&quot;.&apos;);
	} // end if
	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; G typeof(outEthnicity)= &apos;+typeof(outEthnicity)+&apos; toString= &apos;+JSON.stringify(outEthnicity)+&apos; length= &apos;+JSON.stringify(outEthnicity).length); 
	} // end if
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>164f7b58-2861-41f5-95ec-0ca9a5f0ed7e</id>
        <name>set_health_insurance_field_lookup</name>
        <revision>2</revision>
        <lastModified>
          <time>1659371148115</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: set_health_insurance_field_lookup.js
	@param {object}  field - This field argument is an array object (e.g. {&apos;LBW_PRI&apos;: &apos;Y&apos;,&apos;Smoking&apos;: &apos;Y&apos;})
	@return {object} jsonString - This returns a resulting object using the arrJSONString
	History:
*/
function set_health_insurance_field_lookup(arrObservations) {
	
	var scriptName= &apos;set_health_insurance_field_lookup&apos;;
	var debug= 0;
	// complete list of Health Insurance configured from Global Channel Map - in Deploy script
	var inHealthInsurance= globalChannelMap.get(&apos;praHealthInsurance&apos;);
	// output list of all Perinatal History for JSON
	var outHealthInsurance= {};
	var outString;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(arrObservations)+&apos; arrObservations= &apos;+arrObservations+&apos; length= &apos;+arrObservations.length); 
	}

	// arrObservations object contains current list of found Health Insurance from CCDA
	if(typeof(arrObservations) !== &apos;undefined&apos;) {
		if(arrObservations.toString().length&gt;0) {
			for(var j= 0;j&lt;arrObservations.length;j++) {
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof= &apos;+typeof(arrObservations[j])+&apos; observation= &apos;+arrObservations[j]+&apos; toString= &apos;+arrObservations[j].toString()+&apos; length= &apos;+arrObservations[j].toString().length); 
				}
				var strObservation= arrObservations[j].toString();
				if(strObservation.length&gt;0) {
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(inHealthInsurance)= &apos;+typeof(inHealthInsurance)+&apos; toString= &apos;+inHealthInsurance.toString()+&apos; length= &apos;+inHealthInsurance.toString().length); 
					}
					var lstHealthInsuranceElements= inHealthInsurance.toString().split(&apos;,&apos;);
					for(var i= 0;i&lt;lstHealthInsuranceElements.length;i++) {
						var inHealthInsuranceElement= lstHealthInsuranceElements[i].toString();
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(inHealthInsuranceElement[&apos;+i+&apos;])= &apos;+typeof(inHealthInsuranceElement)+&apos; inHealthInsuranceElement[&apos;+i+&apos;]= &apos;+inHealthInsuranceElement+&apos; length= &apos;+inHealthInsuranceElement.length+&apos; strObservation= &apos;+strObservation+&apos; length= &apos;+strObservation.legnth+&apos; EVAL: strObservation.indexOf(inHealthInsuranceElement)= &apos;+strObservation.indexOf(inHealthInsuranceElement));
						}
						if(strObservation.indexOf(inHealthInsuranceElement)&lt;0) {
							// 2022-07-27 JER - Modified to accommodate outHealthInsurance as Object()
							outHealthInsurance[inHealthInsuranceElement]= &apos;N&apos;;
							// outString= &quot;&apos;&quot;+inHealthInsuranceElement+&quot;&apos;: &apos;N&apos;&quot;;
							// outHealthInsurance.push(outString);
						} else {
							 outHealthInsurance[inHealthInsuranceElement]= &apos;Y&apos;;
						} // end if
					} // end for
				} else {
					// 2022-07-27 JER - Verify this modified code to handle if there is no current Medical Condition value has no length
					var lstHealthInsuranceElements= inHealthInsurance.toString().split(&apos;,&apos;);
					for(var i= 0;i&lt;lstHealthInsuranceElements.length;i++) {
						var inHealthInsuranceElement= lstHealthInsuranceElements[i].toString();
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Defined with value - typeof(inHealthInsuranceElement[&apos;+i+&apos;])= &apos;+typeof(inHealthInsuranceElement)+&apos; inHealthInsuranceElement[&apos;+i+&apos;]= &apos;+inHealthInsuranceElement+&apos; length= &apos;+inHealthInsuranceElement.length);
						}
						// 2022-07-27 JER - Modified to accommodate outHealthInsurance as Object()
						outHealthInsurance[inHealthInsuranceElement]= &apos;N&apos;;
					} // end for
				} // end if 
			} // end for
			channelMap.put(&apos;outHealthInsurance&apos;,outHealthInsurance);
		} else {
			// 2022-07-27 JER - Verify this modified code to handle if there is no current Medical Condition value has no length
			var lstHealthInsuranceElements= inHealthInsurance.toString().split(&apos;,&apos;);
			for(var i= 0;i&lt;lstHealthInsuranceElements.length;i++) {
				var inHealthInsuranceElement= lstHealthInsuranceElements[i].toString();
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Defined with no value - typeof(inHealthInsuranceElement[&apos;+i+&apos;])= &apos;+typeof(inHealthInsuranceElement)+&apos; inHealthInsuranceElement[&apos;+i+&apos;]= &apos;+inHealthInsuranceElement+&apos; length= &apos;+inHealthInsuranceElement.length);
				}
				// 2022-07-27 JER - Modified to accommodate outHealthInsurance as Object()
				outHealthInsurance[inHealthInsuranceElement]= &apos;N&apos;;
			} // end for
		}
		channelMap.put(&apos;outHealthInsurance&apos;,outHealthInsurance);
	} // end if
	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(outHealthInsurance)= &apos;+typeof(outHealthInsurance)+&apos; toString= &apos;+outHealthInsurance.toString()+&apos; length= &apos;+outHealthInsurance.toString().length); 
	}
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>287349f1-4c8c-45d9-b8e2-bdbb0e5153d0</id>
        <name>set_medicaid_mco_field_lookup</name>
        <revision>4</revision>
        <lastModified>
          <time>1659372460856</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: set_medicaid_mco_field_lookup.js
	@param {object}  field - This field argument is an array object (e.g. {&apos;LBW_PRI&apos;: &apos;Y&apos;,&apos;Smoking&apos;: &apos;Y&apos;})
	@return {object} jsonString - This returns a resulting object using the arrJSONString
	History:
	2022-08-01 JER - Modified to if D defined with no value - inMedicaidMCOElement[5]== &quot;None&quot; set value to &apos;Y&apos;
*/
function set_medicaid_mco_field_lookup(arrObservations) {
	
	var scriptName= &apos;set_medicaid_mco_field_lookup&apos;;
	var debug= 0;
	// complete list of Medicaid MCO configured from Global Channel Map - in Deploy script
	var inMedicaidMCO= globalChannelMap.get(&apos;praMedicaidMCO&apos;);
	// output list of all Medicaid MCO for JSON
	var outMedicaidMCO= {};
	var outString;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(arrObservations)+&apos; arrObservations= &apos;+arrObservations+&apos; length= &apos;+arrObservations.length); 
	}

	// arrObservations object contains current list of found Medicaid MCO from CCDA
	if(typeof(arrObservations) !== &apos;undefined&apos;) {
		if(arrObservations.toString().length&gt;0) {
			for(var j= 0;j&lt;arrObservations.length;j++) {
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A typeof= &apos;+typeof(arrObservations[j])+&apos; observation= &apos;+arrObservations[j]+&apos; toString= &apos;+arrObservations[j].toString()+&apos; length= &apos;+arrObservations[j].toString().length); 
				}
				var strObservation= arrObservations[j].toString();
				if(strObservation.length&gt;0) {
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(inMedicaidMCO)= &apos;+typeof(inMedicaidMCO)+&apos; toString= &apos;+inMedicaidMCO.toString()+&apos; length= &apos;+inMedicaidMCO.toString().length); 
					}
					var lstMedicaidMCOElements= inMedicaidMCO.toString().split(&apos;,&apos;);
					for(var i= 0;i&lt;lstMedicaidMCOElements.length;i++) {
						var inMedicaidMCOElement= lstMedicaidMCOElements[i].toString();
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B typeof(inMedicaidMCOElement[&apos;+i+&apos;])= &apos;+typeof(inMedicaidMCOElement)+&apos; inMedicaidMCOElement[&apos;+i+&apos;]= &apos;+inMedicaidMCOElement+&apos; length= &apos;+inMedicaidMCOElement.length+&apos; strObservation= &apos;+strObservation+&apos; length= &apos;+strObservation.legnth+&apos; EVAL: strObservation.indexOf(inMedicaidMCOElement)= &apos;+strObservation.indexOf(inMedicaidMCOElement));
						}
						if(strObservation.indexOf(inMedicaidMCOElement)&lt;0) {
							// 2022-07-27 JER - Modified to accommodate outMedicaidMCO as Object()
							outMedicaidMCO[inMedicaidMCOElement]= &apos;N&apos;;
							// outString= &quot;&apos;&quot;+inMedicaidMCOElement+&quot;&apos;: &apos;N&apos;&quot;;
							// outMedicaidMCO.push(outString);
						} else {
							 outMedicaidMCO[inMedicaidMCOElement]= &apos;Y&apos;;
						} // end if
					} // end for
				} else {
					// 2022-07-27 JER - Verify this modified code to handle if there is no current Medical Condition value has no length
					var lstMedicaidMCOElements= inMedicaidMCO.toString().split(&apos;,&apos;);
					for(var i= 0;i&lt;lstMedicaidMCOElements.length;i++) {
						var inMedicaidMCOElement= lstMedicaidMCOElements[i].toString();
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C Defined with value - typeof(inMedicaidMCOElement[&apos;+i+&apos;])= &apos;+typeof(inMedicaidMCOElement)+&apos; inMedicaidMCOElement[&apos;+i+&apos;]= &apos;+inMedicaidMCOElement+&apos; length= &apos;+inMedicaidMCOElement.length);
						}
						// 2022-07-27 JER - Modified to accommodate outMedicaidMCO as Object()
						outMedicaidMCO[inMedicaidMCOElement]= &apos;N&apos;;
					} // end for
				} // end if 
			} // end for
			channelMap.put(&apos;outMedicaidMCO&apos;,outMedicaidMCO);
		} else {
			// 2022-07-27 JER - Verify this modified code to handle if there is no current Medical Condition value has no length
			var lstMedicaidMCOElements= inMedicaidMCO.toString().split(&apos;,&apos;);
			for(var i= 0;i&lt;lstMedicaidMCOElements.length;i++) {
				var inMedicaidMCOElement= lstMedicaidMCOElements[i].toString();
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D Defined with no value - typeof(inMedicaidMCOElement[&apos;+i+&apos;])= &apos;+typeof(inMedicaidMCOElement)+&apos; inMedicaidMCOElement[&apos;+i+&apos;]= &apos;+inMedicaidMCOElement+&apos; length= &apos;+inMedicaidMCOElement.length);
				}
				// 2022-08-01 JER - Modified to if D defined with no value - inMedicaidMCOElement[5]== &quot;None&quot; set value to &apos;Y&apos;
				if(inMedicaidMCOElement == &apos;None&apos;) {
					outMedicaidMCO[inMedicaidMCOElement]= &apos;Y&apos;;
				} else {
					outMedicaidMCO[inMedicaidMCOElement]= &apos;N&apos;;
				} // end if 
			} // end for
		}
		channelMap.put(&apos;outMedicaidMCO&apos;,outMedicaidMCO);
	} // end if
	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(outMedicaidMCO)= &apos;+typeof(outMedicaidMCO)+&apos; toString= &apos;+outMedicaidMCO.toString()+&apos; length= &apos;+outMedicaidMCO.toString().length); 
	}
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>9980536a-230b-4069-bc36-b561f490961a</id>
        <name>set_perinatal_history_field_lookup</name>
        <revision>3</revision>
        <lastModified>
          <time>1659371125229</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: set_perinatal_history_field_lookup.js
	@param {object}  field - This field argument is an array object (e.g. {&apos;LBW_PRI&apos;: &apos;Y&apos;,&apos;Smoking&apos;: &apos;Y&apos;})
	@return {object} jsonString - This returns a resulting object using the arrJSONString
	History:
*/
function set_perinatal_history_field_lookup(arrObservations) {
	
	var scriptName= &apos;set_perinatal_history_field_lookup&apos;;
	var debug= 0;
	// complete list of Perinatal History configured from Global Channel Map - in Deploy script
	var inPerinatalHistory= globalChannelMap.get(&apos;praPerinatalHistory&apos;);
	// output list of all Perinatal History for JSON
	var outPerinatalHistory= {};
	var outString;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(arrObservations)+&apos; arrObservations= &apos;+arrObservations+&apos; length= &apos;+arrObservations.length); 
	}

	// arrObservations object contains current list of found Physical Assessments from CCDA
	if(typeof(arrObservations) !== &apos;undefined&apos;) {
		if(arrObservations.toString().length&gt;0) {
			for(var j= 0;j&lt;arrObservations.length;j++) {
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof= &apos;+typeof(arrObservations[j])+&apos; observation= &apos;+arrObservations[j]+&apos; toString= &apos;+arrObservations[j].toString()+&apos; length= &apos;+arrObservations[j].toString().length); 
				}
				var strObservation= arrObservations[j].toString();
				if(strObservation.length&gt;0) {
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(inPerinatalHistory)= &apos;+typeof(inPerinatalHistory)+&apos; toString= &apos;+inPerinatalHistory.toString()+&apos; length= &apos;+inPerinatalHistory.toString().length); 
					}
					var lstPerinatalHistoryElements= inPerinatalHistory.toString().split(&apos;,&apos;);
					for(var i= 0;i&lt;lstPerinatalHistoryElements.length;i++) {
						var inPerinatalHistoryElement= lstPerinatalHistoryElements[i].toString();
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(inPerinatalHistoryElement[&apos;+i+&apos;])= &apos;+typeof(inPerinatalHistoryElement)+&apos; inPerinatalHistoryElement[&apos;+i+&apos;]= &apos;+inPerinatalHistoryElement+&apos; length= &apos;+inPerinatalHistoryElement.length+&apos; strObservation= &apos;+strObservation+&apos; length= &apos;+strObservation.legnth+&apos; EVAL: strObservation.indexOf(inPerinatalHistoryElement)= &apos;+strObservation.indexOf(inPerinatalHistoryElement));
						}
						if(strObservation.indexOf(inPerinatalHistoryElement)&lt;0) {
							// 2022-07-27 JER - Modified to accommodate outPerinatalHistory as Object()
							outPerinatalHistory[inPerinatalHistoryElement]= &apos;N&apos;;
							// outString= &quot;&apos;&quot;+inPerinatalHistoryElement+&quot;&apos;: &apos;N&apos;&quot;;
							// outPerinatalHistory.push(outString);
						} else {
							 outPerinatalHistory[inPerinatalHistoryElement]= &apos;Y&apos;;
						} // end if
					} // end for
				} else {
					// 2022-07-27 JER - Verify this modified code to handle if there is no current Medical Condition value has no length
					var lstPerinatalHistoryElements= inPerinatalHistory.toString().split(&apos;,&apos;);
					for(var i= 0;i&lt;lstPerinatalHistoryElements.length;i++) {
						var inPerinatalHistoryElement= lstPerinatalHistoryElements[i].toString();
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Defined with value - typeof(inPerinatalHistoryElement[&apos;+i+&apos;])= &apos;+typeof(inPerinatalHistoryElement)+&apos; inPerinatalHistoryElement[&apos;+i+&apos;]= &apos;+inPerinatalHistoryElement+&apos; length= &apos;+inPerinatalHistoryElement.length);
						}
						// 2022-07-27 JER - Modified to accommodate outPerinatalHistory as Object()
						outPerinatalHistory[inPerinatalHistoryElement]= &apos;N&apos;;
					} // end for
				} // end if 
			} // end for
			channelMap.put(&apos;outPerinatalHistory&apos;,outPerinatalHistory);
		} else {
			// 2022-07-27 JER - Verify this modified code to handle if there is no current Medical Condition value has no length
			var lstPerinatalHistoryElements= inPerinatalHistory.toString().split(&apos;,&apos;);
			for(var i= 0;i&lt;lstPerinatalHistoryElements.length;i++) {
				var inPerinatalHistoryElement= lstPerinatalHistoryElements[i].toString();
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Defined with no value - typeof(inPerinatalHistoryElement[&apos;+i+&apos;])= &apos;+typeof(inPerinatalHistoryElement)+&apos; inPerinatalHistoryElement[&apos;+i+&apos;]= &apos;+inPerinatalHistoryElement+&apos; length= &apos;+inPerinatalHistoryElement.length);
				}
				// 2022-07-27 JER - Modified to accommodate outPerinatalHistory as Object()
				outPerinatalHistory[inPerinatalHistoryElement]= &apos;N&apos;;
			} // end for
		}
		channelMap.put(&apos;outPerinatalHistory&apos;,outPerinatalHistory);
	} // end if
	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(outPerinatalHistory)= &apos;+typeof(outPerinatalHistory)+&apos; toString= &apos;+outPerinatalHistory.toString()+&apos; length= &apos;+outPerinatalHistory.toString().length); 
	}
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>f32cb2de-9375-4b14-8297-2a87bf54daa8</id>
        <name>set_physical_assessment_field_lookup</name>
        <revision>60</revision>
        <lastModified>
          <time>1661872166063</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: set_physical_assessment_field_lookup.js
	@param {object}  field - This field argument is an array object (e.g. {&apos;LBW_PRI&apos;: &apos;Y&apos;,&apos;Smoking&apos;: &apos;Y&apos;})
	@return {object} jsonString - This returns a resulting object using the arrJSONString
	History:
	2022-08-29 JER - Modifications to the handling of inserts into the outPhysicalAssessment object 
	2022-08-27 JER - Modifications post evaluation of string to outPhysicalAssessment JSON object
	2022-08-19 JER - evaluate if observation is a discrete value (e.g. 106 mm[Hg])
*/
function set_physical_assessment_field_lookup(arrObservations) {
	
	var scriptName= &apos;set_physical_assessment_field_lookup&apos;;
	var debug= 0;
	// complete list of Physical Assessment configured from Global Channel Map - in Deploy script
	var inPhysicalAssessment= globalChannelMap.get(&apos;praPhysicalAssessment&apos;);
	// build list of key: value pair strings into array before JSON
	var arrPhysicalAssessment= [];
	// output list of all Pregnancy Risk Factors for JSON
	var outPhysicalAssessment= {};
	var outString;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(arrObservations)+&apos; arrObservations= &apos;+arrObservations+&apos; length= &apos;+arrObservations.length); 
	}

	// arrObservations object contains current list of found Physical Assessments from CCDA
	// loop through the PRA PhysicalAssessment Form Elements
	var lstPhysicalAssessmentElements= inPhysicalAssessment.toString().split(&apos;,&apos;);
	for(var i= 0;i&lt;lstPhysicalAssessmentElements.length;i++) {
		var inPhysicalAssessmentElement= lstPhysicalAssessmentElements[i].toString();
		if(debug&gt;0) { 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(inPhysicalAssessmentElement[&apos;+i+&apos;])= &apos;+typeof(inPhysicalAssessmentElement)+&apos; inPhysicalAssessmentElement[&apos;+i+&apos;]= &apos;+inPhysicalAssessmentElement+&apos; length= &apos;+inPhysicalAssessmentElement.length+&apos; arrObservations= &apos;+arrObservations+&apos; length= &apos;+arrObservations.length+&apos; EVAL: inPhysicalAssessmentElement.indexOf(arrObservations)= &apos;+inPhysicalAssessmentElement.indexof(arrObservations));
		}
		
		for each(observation in arrObservations) {
			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; observation= &apos;+observation+&apos; typeof= &apos;+typeof(observation)+&apos; toString= &apos;+observation.toString()+&apos; inPhysicalAssessmentElement= &apos;+inPhysicalAssessmentElement+&apos; typeof= &apos;+typeof(inPhysicalAssessmentElement)+&apos; toString= &apos;+inPhysicalAssessmentElement.toString());
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; observation.indexOf(inPhysicalAssessmentElement) or &apos;+observation+&apos;.indexOf(&apos;+inPhysicalAssessmentElement+&apos;)= &apos;+observation.toString().indexOf(inPhysicalAssessmentElement));
			}
		
		/*
			if(observation.toString().indexOf(inPhysicalAssessmentElement)&lt;0) {
				logger.error(&apos;A&apos;);
				// 2022-07-27 JER - Modified to accommodate outPhysicalAssessment as Object()
				outPhysicalAssessment[inPhysicalAssessmentElement]= &apos;&apos;;
				// outString= &quot;&apos;&quot;+inPhysicalAssessmentElement+&quot;&apos;: &apos;N&apos;&quot;;
				// outPhysicalAssessment.push(outString);
			} else {
		*/
			var strObservation= observation.toString().replace(/\s/g,&apos;&apos;);
			if(strObservation.toString().indexOf(inPhysicalAssessmentElement)&gt;-1) {
				// var indexElement= 	observation.indexOf(inPhysicalAssessmentElement);

				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; BEFORE typeof(strObservation): &apos;+typeof(strObservation)+&apos; strObservation: &apos;+strObservation);
				}
				//var strObservation= JSON.stringify(strObservation).replace(/[&quot;\\]/gi,&apos;&apos;);
			
				/*
				if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER typeof(strObservation): &apos;+typeof(strObservation)+&apos; strObservation: &apos;+strObservation); 
				}
				*/
			
				var lstObservation= observation.split(&apos;:&apos;);
				if(lstObservation[1].toString().length&gt;0) {
					// 2022-08-19 JER - evaluate if the coded observation if &apos;Y&apos; value
					/*
					if(lstObservation[1].toString()== &apos;Y&apos;) {
						logger.error(&apos;D&apos;);
						outPhysicalAssessment[inPhysicalAssessmentElement]= &apos;Y&apos;;
						// 2022-08-19 JER - evaluate if observation is a discrete value (e.g. 106 mm[Hg])
					} else {
					*/
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; discrete lstObservation[0]]= &apos;+lstObservation[0].replace(/&quot;/g,&apos;&apos;)+&apos; lstObservation[1]= &apos;+lstObservation[1].replace(/&quot;/g,&apos;&apos;)); 
						}
						outPhysicalAssessment[lstObservation[0].replace(/&quot;/g,&apos;&apos;)]= lstObservation[1].replace(/&quot;/g,&apos;&apos;).trim();
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; discrete outPhysicalAssessment= &apos;+outPhysicalAssessment); 
						}
					//}
				} // end if 
			} // end if
		} // end for 
	} // end for
	
	for each(jsonPraElement in lstPhysicalAssessmentElements) {
		
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; JSON.stringify(outPhysicalAssessment)= &apos;+JSON.stringify(outPhysicalAssessment)+&apos; typeof= &apos;+typeof(JSON.stringify(outPhysicalAssessment)));
		var strOutPhysicalAssessment= JSON.stringify(outPhysicalAssessment);
		if(strOutPhysicalAssessment.indexOf(jsonPraElement)&lt;0) {
			outPhysicalAssessment[jsonPraElement]= &apos;&apos;;
		} // end if 
	} // end for each
	
	channelMap.put(&apos;outPhysicalAssessment&apos;,outPhysicalAssessment);
	
	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(outPhysicalAssessment)= &apos;+typeof(outPhysicalAssessment)+&apos; toString= &apos;+JSON.stringify(outPhysicalAssessment)+&apos; length= &apos;+JSON.stringify(outPhysicalAssessment).length); 
	}
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>e1128004-6682-4a43-917d-18d06d21cf54</id>
        <name>set_pregnancy_risk_factors_field_lookup</name>
        <revision>33</revision>
        <lastModified>
          <time>1659575436036</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument
	scriptName: set_pregnancy_risk_factors_field_lookup.js
	@param {object}  field - This field argument is an array object (e.g. {&apos;LBW_PRI&apos;: &apos;Y&apos;,&apos;Smoking&apos;: &apos;Y&apos;})
	@return {object} jsonString - This returns a resulting object using the arrJSONString
	History:
*/
function set_pregnancy_risk_factors_field_lookup(arrObservations) {
	
	var scriptName= &apos;set_pregnancy_risk_factors_field_lookup&apos;;
	var debug= 0;
	// complete list of Pregnancy Risk Factors configured from Global Channel Map - in Deploy script
	var inPregnancyRiskFactors= globalChannelMap.get(&apos;praPregnancyRiskFactors&apos;);
	// output list of all Pregnancy Risk Factors for JSON
	var outPregnancyRiskFactors= {};
	
	if((typeof(inPregnancyRiskFactors) !== &apos;undefined&apos;)&amp;&amp;(inPregnancyRiskFactors.length)&gt;0) {
	
		if(debug&lt;0) { 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A argument arrObservation typeof= &apos;+typeof(arrObservations)+&apos; arrObservations= &apos;+arrObservations+&apos; length= &apos;+arrObservations.length); 
		}

		for(var i= 0;i&lt;inPregnancyRiskFactors.length;i++) {
		
			// set the inPregnancyRiskFactors element toString()
			var strPregnancyRiskFactors= inPregnancyRiskFactors[i].toString();
			// set the arrObservation array into toString() to be evaluated
			var strObservations= JSON.stringify(arrObservations);
			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; strObservations typeof= &apos;+typeof(strObservations)+&apos; length= &apos;+strObservations.length+&apos; strObservations= &apos;+strObservations);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; strPregnancyRiskFactors typeof= &apos;+typeof(strPregnancyRiskFactors)+&apos; length= &apos;+strPregnancyRiskFactors.length+&apos; strPregnancyRiskFactors= &apos;+strPregnancyRiskFactors);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; strObservations CHECK typeof= &apos;+(typeof(strObservations) !== &apos;undefined&apos;)+&apos; length= &apos;+(strObservations.length&gt;0)+&apos; EVALUATION= &apos;+(typeof(strObservations) !== &apos;undefined&apos;)&amp;&amp;(strObservations.length&gt;0));
			}
			// arrObservations object contains current list of found Pregnancy Risk Factors from CCDA
			if((typeof(strObservations) !== &apos;undefined&apos;)&amp;&amp;(strObservations.length&gt;0)) {

				// 2022-08-01 JER - Modified to use toUpperCase() to match case sensitivity when performing indexOf function
				// Convert string (e.g. &quot;HelloWorld&quot;: &quot;Y&quot;) to array and then string to first element of array
				// var strObservations= strObservations.toString().split(&quot;:&quot;)[0].replace(/[&apos;&quot;]+/g,&apos;&apos;);
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; EVALUATE strPregnancyRiskFactors= &apos;+strPregnancyRiskFactors.toUpperCase()+&apos; VS strObservations= &apos;+strObservations.toUpperCase()+&apos; EVAL= &apos;+strObservations.toUpperCase().indexOf(strPregnancyRiskFactors.toUpperCase()));
				}
				if(strObservations.toUpperCase().indexOf(strPregnancyRiskFactors.toUpperCase())&gt;-1) {
					// 2022-07-27 JER - Modified to accommodate outPregnancyRiskFactors as Object()
					outPregnancyRiskFactors[strPregnancyRiskFactors]= &apos;Y&apos;;
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; SET outPregnancyRiskFactors[&apos;+strPregnancyRiskFactors+&apos;]= &apos;+outPregnancyRiskFactors[strPregnancyRiskFactors]);
					}
				} else {
					outPregnancyRiskFactors[strPregnancyRiskFactors]= &apos;N&apos;;
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; SET outPregnancyRiskFactors[&apos;+strPregnancyRiskFactors+&apos;]= &apos;+outPregnancyRiskFactors[strPregnancyRiskFactors]);
					}
				} // end if
			} else {
				outPregnancyRiskFactors[strPregnancyRiskFactors]= &apos;N&apos;;
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; SET outPregnancyRiskFactors[&apos;+strPregnancyRiskFactors+&apos;]= &apos;+outPregnancyRiskFactors[strPregnancyRiskFactors]);
				} // end if 	
			}
		} // end for
		channelMap.put(&apos;outPregnancyRiskFactors&apos;,outPregnancyRiskFactors);
	} else {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; inPregnancyRiskFactors has no value or is &quot;undefined&quot;.&apos;);
	}// end if
	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(outPregnancyRiskFactors)= &apos;+typeof(outPregnancyRiskFactors)+&apos; toString= &apos;+JSON.stringify(outPregnancyRiskFactors)+&apos; length= &apos;+JSON.stringify(outPregnancyRiskFactors).length); 
	}
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>90366405-9624-4b4a-a7dd-a79bad1cb852</id>
        <name>set_primary_language_field_lookup</name>
        <revision>1</revision>
        <lastModified>
          <time>1659366317870</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: set_primary_language_field_lookup.js
	@param {object}  field - This field argument is an array object (e.g. {&apos;LBW_PRI&apos;: &apos;Y&apos;,&apos;Smoking&apos;: &apos;Y&apos;})
	@return {object} jsonString - This returns a resulting object using the arrJSONString
	History:
*/
function set_primary_language_field_lookup(arrObservations) {
	
	var scriptName= &apos;set_primary_language_field_lookup&apos;;
	var debug= 0;
	// complete list of Primary Language configured from Global Channel Map - in Deploy script
	var inPrimaryLanguage= globalChannelMap.get(&apos;praPrimaryLanguage&apos;);
	// output list of all Primary Language for JSON
	var outPrimaryLanguage= {};
	var outString;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(arrObservations)+&apos; arrObservations= &apos;+arrObservations+&apos; length= &apos;+arrObservations.length); 
	}

	// arrObservations object contains current list of found Primary Language from CCDA
	if(typeof(arrObservations) !== &apos;undefined&apos;) {
		if(arrObservations.toString().length&gt;0) {
			for(var j= 0;j&lt;arrObservations.length;j++) {
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof= &apos;+typeof(arrObservations[j])+&apos; observation= &apos;+arrObservations[j]+&apos; toString= &apos;+arrObservations[j].toString()+&apos; length= &apos;+arrObservations[j].toString().length); 
				}
				var strObservation= arrObservations[j].toString();
				if(strObservation.length&gt;0) {
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(inPrimaryLanguage)= &apos;+typeof(inPrimaryLanguage)+&apos; toString= &apos;+inPrimaryLanguage.toString()+&apos; length= &apos;+inPrimaryLanguage.toString().length); 
					}
					var lstPrimaryLanguageElements= inPrimaryLanguage.toString().split(&apos;,&apos;);
					for(var i= 0;i&lt;lstPrimaryLanguageElements.length;i++) {
						var inPrimaryLanguageElement= lstPrimaryLanguageElements[i].toString();
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(inPrimaryLanguageElement[&apos;+i+&apos;])= &apos;+typeof(inPrimaryLanguageElement)+&apos; inPrimaryLanguageElement[&apos;+i+&apos;]= &apos;+inPrimaryLanguageElement+&apos; length= &apos;+inPrimaryLanguageElement.length+&apos; strObservation= &apos;+strObservation+&apos; length= &apos;+strObservation.legnth+&apos; EVAL: strObservation.indexOf(inPrimaryLanguageElement)= &apos;+strObservation.indexOf(inPrimaryLanguageElement));
						}
						if(strObservation.indexOf(inPrimaryLanguageElement)&lt;0) {
							// 2022-07-27 JER - Modified to accommodate outPrimaryLanguage as Object()
							outPrimaryLanguage[inPrimaryLanguageElement]= &apos;N&apos;;
							// outString= &quot;&apos;&quot;+inPrimaryLanguageElement+&quot;&apos;: &apos;N&apos;&quot;;
							// outPrimaryLanguage.push(outString);
						} else {
							 outPrimaryLanguage[inPrimaryLanguageElement]= &apos;Y&apos;;
						} // end if
					} // end for
				} else {
					// 2022-07-27 JER - Verify this modified code to handle if there is no current Medical Condition value has no length
					var lstPrimaryLanguageElements= inPrimaryLanguage.toString().split(&apos;,&apos;);
					for(var i= 0;i&lt;lstPrimaryLanguageElements.length;i++) {
						var inPrimaryLanguageElement= lstPrimaryLanguageElements[i].toString();
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Defined with value - typeof(inPrimaryLanguageElement[&apos;+i+&apos;])= &apos;+typeof(inPrimaryLanguageElement)+&apos; inPrimaryLanguageElement[&apos;+i+&apos;]= &apos;+inPrimaryLanguageElement+&apos; length= &apos;+inPrimaryLanguageElement.length);
						}
						// 2022-07-27 JER - Modified to accommodate outPrimaryLanguage as Object()
						outPrimaryLanguage[inPrimaryLanguageElement]= &apos;N&apos;;
					} // end for
				} // end if 
			} // end for
			channelMap.put(&apos;outPrimaryLanguage&apos;,outPrimaryLanguage);
		} else {
			// 2022-07-27 JER - Verify this modified code to handle if there is no current Medical Condition value has no length
			var lstPrimaryLanguageElements= inPrimaryLanguage.toString().split(&apos;,&apos;);
			for(var i= 0;i&lt;lstPrimaryLanguageElements.length;i++) {
				var inPrimaryLanguageElement= lstPrimaryLanguageElements[i].toString();
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Defined with no value - typeof(inPrimaryLanguageElement[&apos;+i+&apos;])= &apos;+typeof(inPrimaryLanguageElement)+&apos; inPrimaryLanguageElement[&apos;+i+&apos;]= &apos;+inPrimaryLanguageElement+&apos; length= &apos;+inPrimaryLanguageElement.length);
				}
				// 2022-07-27 JER - Modified to accommodate outPrimaryLanguage as Object()
				outPrimaryLanguage[inPrimaryLanguageElement]= &apos;N&apos;;
			} // end for
		}
		channelMap.put(&apos;outPrimaryLanguage&apos;,outPrimaryLanguage);
	} // end if
	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(outPrimaryLanguage)= &apos;+typeof(outPrimaryLanguage)+&apos; toString= &apos;+outPrimaryLanguage.toString()+&apos; length= &apos;+outPrimaryLanguage.toString().length); 
	}
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>d2786575-ea0e-4621-877c-5ce2447f4a14</id>
        <name>set_psychosocial_risk_field_lookup</name>
        <revision>1</revision>
        <lastModified>
          <time>1659369439488</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: set_psychosocial_risk_field_lookup.js
	@param {object}  field - This field argument is an array object (e.g. {&apos;LBW_PRI&apos;: &apos;Y&apos;,&apos;Smoking&apos;: &apos;Y&apos;})
	@return {object} jsonString - This returns a resulting object using the arrJSONString
	History:
*/
function set_psychosocial_risk_factors_field_lookup(arrObservations) {
	
	var scriptName= &apos;set_psychosocial_risk_factors_field_lookup&apos;;
	var debug= 0;
	// complete list of Psychosocial Risk Factors configured from Global Channel Map - in Deploy script
	var inPsychosocialRiskFactors= globalChannelMap.get(&apos;praPsychosocialRiskFactors&apos;);
	// output list of all Psychosocial Risk Factors for JSON
	var outPsychosocialRiskFactors= {};
	var outString;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(arrObservations)+&apos; arrObservations= &apos;+arrObservations+&apos; length= &apos;+arrObservations.length); 
	}

	// arrObservations object contains current list of found Psychosocial Risk Factors from CCDA
	if(typeof(arrObservations) !== &apos;undefined&apos;) {
		if(arrObservations.toString().length&gt;0) {
			for(var j= 0;j&lt;arrObservations.length;j++) {
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof= &apos;+typeof(arrObservations[j])+&apos; observation= &apos;+arrObservations[j]+&apos; toString= &apos;+arrObservations[j].toString()+&apos; length= &apos;+arrObservations[j].toString().length); 
				}
				var strObservation= arrObservations[j].toString();
				if(strObservation.length&gt;0) {
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(inPsychosocialRiskFactors)= &apos;+typeof(inPsychosocialRiskFactors)+&apos; toString= &apos;+inPsychosocialRiskFactors.toString()+&apos; length= &apos;+inPsychosocialRiskFactors.toString().length); 
					}
					var lstPsychosocialRiskFactorsElements= inPsychosocialRiskFactors.toString().split(&apos;,&apos;);
					for(var i= 0;i&lt;lstPsychosocialRiskFactorsElements.length;i++) {
						var inPsychosocialRiskFactorsElement= lstPsychosocialRiskFactorsElements[i].toString();
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(inPsychosocialRiskFactorsElement[&apos;+i+&apos;])= &apos;+typeof(inPsychosocialRiskFactorsElement)+&apos; inPsychosocialRiskFactorsElement[&apos;+i+&apos;]= &apos;+inPsychosocialRiskFactorsElement+&apos; length= &apos;+inPsychosocialRiskFactorsElement.length+&apos; strObservation= &apos;+strObservation+&apos; length= &apos;+strObservation.legnth+&apos; EVAL: strObservation.indexOf(inPsychosocialRiskFactorsElement)= &apos;+strObservation.indexOf(inPsychosocialRiskFactorsElement));
						}
						if(strObservation.indexOf(inPsychosocialRiskFactorsElement)&lt;0) {
							// 2022-07-27 JER - Modified to accommodate outPsychosocialRiskFactors as Object()
							outPsychosocialRiskFactors[inPsychosocialRiskFactorsElement]= &apos;N&apos;;
							// outString= &quot;&apos;&quot;+inPsychosocialRiskFactorsElement+&quot;&apos;: &apos;N&apos;&quot;;
							// outPsychosocialRiskFactors.push(outString);
						} else {
							 outPsychosocialRiskFactors[inPsychosocialRiskFactorsElement]= &apos;Y&apos;;
						} // end if
					} // end for
				} else {
					// 2022-07-27 JER - Verify this modified code to handle if there is no current Medical Condition value has no length
					var lstPsychosocialRiskFactorsElements= inPsychosocialRiskFactors.toString().split(&apos;,&apos;);
					for(var i= 0;i&lt;lstPsychosocialRiskFactorsElements.length;i++) {
						var inPsychosocialRiskFactorsElement= lstPsychosocialRiskFactorsElements[i].toString();
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Defined with value - typeof(inPsychosocialRiskFactorsElement[&apos;+i+&apos;])= &apos;+typeof(inPsychosocialRiskFactorsElement)+&apos; inPsychosocialRiskFactorsElement[&apos;+i+&apos;]= &apos;+inPsychosocialRiskFactorsElement+&apos; length= &apos;+inPsychosocialRiskFactorsElement.length);
						}
						// 2022-07-27 JER - Modified to accommodate outPsychosocialRiskFactors as Object()
						outPsychosocialRiskFactors[inPsychosocialRiskFactorsElement]= &apos;N&apos;;
					} // end for
				} // end if 
			} // end for
			channelMap.put(&apos;outPsychosocialRiskFactors&apos;,outPsychosocialRiskFactors);
		} else {
			// 2022-07-27 JER - Verify this modified code to handle if there is no current Medical Condition value has no length
			var lstPsychosocialRiskFactorsElements= inPsychosocialRiskFactors.toString().split(&apos;,&apos;);
			for(var i= 0;i&lt;lstPsychosocialRiskFactorsElements.length;i++) {
				var inPsychosocialRiskFactorsElement= lstPsychosocialRiskFactorsElements[i].toString();
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Defined with no value - typeof(inPsychosocialRiskFactorsElement[&apos;+i+&apos;])= &apos;+typeof(inPsychosocialRiskFactorsElement)+&apos; inPsychosocialRiskFactorsElement[&apos;+i+&apos;]= &apos;+inPsychosocialRiskFactorsElement+&apos; length= &apos;+inPsychosocialRiskFactorsElement.length);
				}
				// 2022-07-27 JER - Modified to accommodate outPsychosocialRiskFactors as Object()
				outPsychosocialRiskFactors[inPsychosocialRiskFactorsElement]= &apos;N&apos;;
			} // end for
		}
		channelMap.put(&apos;outPsychosocialRiskFactors&apos;,outPsychosocialRiskFactors);
	} // end if
	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(outPsychosocialRiskFactors)= &apos;+typeof(outPsychosocialRiskFactors)+&apos; toString= &apos;+outPsychosocialRiskFactors.toString()+&apos; length= &apos;+outPsychosocialRiskFactors.toString().length); 
	}
} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>14747f42-6198-4c9d-8f2b-2b8eb4d51997</id>
        <name>set_race_field_lookup</name>
        <revision>5</revision>
        <lastModified>
          <time>1661878815764</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: set_race_field_lookup.js
	@param {object}  field - This field argument is an array object (e.g. {&apos;LBW_PRI&apos;: &apos;Y&apos;,&apos;Smoking&apos;: &apos;Y&apos;})
	@return {object} jsonString - This returns a resulting object using the arrJSONString
	History:
	2022-08-22 JER - Initial observation versus praRace set to arrRace and then post evaluation insert array elements into outRace object
	2022-08-22 JER - If not found or not provided then leave Race blank
*/
function set_race_field_lookup(arrObservations) {
	
	var scriptName= &apos;set_race_field_lookup&apos;;
	var debug= 0;
	// complete list of Race configured from Global Channel Map - in Deploy script
	var inRace= globalChannelMap.get(&apos;praRace&apos;);
	// output list of all Race for JSON
	var outRace= {};
	// 2022-08-22 JER - Added arrRace to store initial evaluation observation versus praRace array list of JSON properties
	var arrRace= [];
	var outString;
	var foundRace= false;
	
	if(debug&lt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; argument field typeof= &apos;+typeof(arrObservations)+&apos; arrObservations= &apos;+arrObservations+&apos; length= &apos;+arrObservations.length); 
	}

	// arrObservations object contains current list of found Race from CCDA
	if(typeof(arrObservations) !== &apos;undefined&apos;) {
		if(arrObservations.toString().length&gt;0) {
			for(var j= 0;j&lt;arrObservations.length;j++) {
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof= &apos;+typeof(arrObservations[j])+&apos; observation= &apos;+arrObservations[j]+&apos; toString= &apos;+arrObservations[j].toString()+&apos; length= &apos;+arrObservations[j].toString().length); 
				}
				var strObservation= arrObservations[j].toString();
				if(strObservation.length&gt;0) {
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(inRace)= &apos;+typeof(inRace)+&apos; toString= &apos;+inRace.toString()+&apos; length= &apos;+inRace.toString().length); 
					}
					var lstRaceElements= inRace.toString().split(&apos;,&apos;);
					for(var i= 0;i&lt;lstRaceElements.length;i++) {
						var inRaceElement= lstRaceElements[i].toString();
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(inRaceElement[&apos;+i+&apos;])= &apos;+typeof(inRaceElement)+&apos; inRaceElement[&apos;+i+&apos;]= &apos;+inRaceElement+&apos; length= &apos;+inRaceElement.length+&apos; strObservation= &apos;+strObservation+&apos; length= &apos;+strObservation.legnth+&apos; EVAL: strObservation.indexOf(inRaceElement)= &apos;+strObservation.indexOf(inRaceElement));
						}
						if(strObservation.indexOf(inRaceElement)&lt;0) {
							// 2022-08-22 JER - If not found or not provided then leave Race blank
							// 2022-07-27 JER - Modified to accommodate outRace as Object()
							// outRace[inRaceElement]= &apos;&apos;;
							
							// 2022-08-22 JER - Added the values to an array to evaluate after the for arrObservations loop
							outString= inRaceElement+&apos;:N&apos;;
							arrRace.push(outString);
						} else {
							// 2022-08-22 JER - Added the values to an array to evaluate after the for arrObservations loop
							// outRace[inRaceElement]= &apos;Y&apos;;
							outString= inRaceElement+&apos;:Y&apos;;
							arrRace.push(outString);
							// 2022-08-22 JER - If any race observation is found then foundRace boolean is true
							foundRace= true;
						} // end if
					} // end for
					
				} else {
					// 2022-07-27 JER - Verify this modified code to handle if there is no current Medical Condition value has no length
					var lstRaceElements= inRace.toString().split(&apos;,&apos;);
					for(var i= 0;i&lt;lstRaceElements.length;i++) {
						var inRaceElement= lstRaceElements[i].toString();
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Defined with value - typeof(inRaceElement[&apos;+i+&apos;])= &apos;+typeof(inRaceElement)+&apos; inRaceElement[&apos;+i+&apos;]= &apos;+inRaceElement+&apos; length= &apos;+inRaceElement.length);
						}
						// 2022-07-27 JER - Modified to accommodate outRace as Object()
						// 2022-08-22 JER - If not found or not provided then leave Race blank
						// outRace[inRaceElement]= &apos;&apos;;
						outString= inRaceElement+&apos;:N&apos;;
						arrRace.push(outString);
					} // end for
				} // end if
				
				// 2022-08-22 JER - evaluate the foundRace if no value is true then set observations value= &apos;&apos; no value (i.e. unknown)
				if(foundRace== false) {
					for each(element in arrRace) {
						var lstElements= element.toString().split(&apos;:&apos;);
						var inRaceElement= lstElements[0];
						outRace[inRaceElement]= &apos;&apos;;
					} // end for each
				} else {
					for each(element in arrRace) {
						var lstElements= element.toString().split(&apos;:&apos;);
						var inRaceElement= lstElements[0];
						outRace[inRaceElement]= lstElements[1];
					} // end for each
				} // end if 				
			} // end for
			channelMap.put(&apos;outRace&apos;,outRace);
		} else {
			// 2022-07-27 JER - Verify this modified code to handle if there is no current Medical Condition value has no length
			var lstRaceElements= inRace.toString().split(&apos;,&apos;);
			for(var i= 0;i&lt;lstRaceElements.length;i++) {
				var inRaceElement= lstRaceElements[i].toString();
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Defined with no value - typeof(inRaceElement[&apos;+i+&apos;])= &apos;+typeof(inRaceElement)+&apos; inRaceElement[&apos;+i+&apos;]= &apos;+inRaceElement+&apos; length= &apos;+inRaceElement.length);
				}
				// 2022-08-22 JER - If not found or not provided then leave Race blank
				// 2022-07-27 JER - Modified to accommodate outRace as Object()
				outRace[inRaceElement]= &apos;&apos;;
			} // end for
		}
		channelMap.put(&apos;outRace&apos;,outRace);
	} // end if
	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(outRace)= &apos;+typeof(outRace)+&apos; toString= &apos;+outRace.toString()+&apos; length= &apos;+outRace.toString().length); 
	}
} // end function
</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>6692de0f-8e5c-4ae0-8645-359052eb97ab</id>
        <name>set_smoking_tobacco_use_field_lookup</name>
        <revision>8</revision>
        <lastModified>
          <time>1661882363479</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Desc:  this JS code template is to return JSON string per a field value provided as argument

	scriptName: set_smoking_tobacco_use_field_lookup.js
	@param {object}  field - This field argument is an array object (e.g. {&apos;LBW_PRI&apos;: &apos;Y&apos;,&apos;Smoking&apos;: &apos;Y&apos;})
	@return {object} jsonString - This returns a resulting object using the arrJSONString
	History:
	2022-08-27 JER - Modified default value to &apos;&apos; and not &apos;N&apos; is not provided
	2022-08-02 JER - Modified with logic from the set_current_medical_conditions_field_lookup.js script and function
*/
function set_smoking_tobacco_use_field_lookup(arrObservations) {
	
	var scriptName= &apos;set_smoking_tobacco_use_field_lookup&apos;;
	var debug= 0;
	// complete list of Smoking Tobacco Usage configured from Global Channel Map - in Deploy script
	var inSmokingTobaccoUse= globalChannelMap.get(&apos;praSmokingTobaccoUse&apos;);
	// output list of all Smoking Tobacco Usage for JSON
	var outSmokingTobaccoUse= {};

	if((typeof(inSmokingTobaccoUse) !== &apos;undefined&apos;)&amp;&amp;(inSmokingTobaccoUse.length)&gt;0) {
	
		if(debug&lt;0) { 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A argument arrObservation typeof= &apos;+typeof(arrObservations)+&apos; arrObservations= &apos;+arrObservations+&apos; length= &apos;+arrObservations.length); 
		}

		for(var i= 0;i&lt;inSmokingTobaccoUse.length;i++) {
		
			// set the currentMedicalCondition element toString()
			var strSmokingTobaccoUse= inSmokingTobaccoUse[i].toString();
			// set the arrObservation array into toString() to be evaluated
			var strObservations= JSON.stringify(arrObservations);
			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; strObservations typeof= &apos;+typeof(strObservations)+&apos; length= &apos;+strObservations.length+&apos; strObservations= &apos;+strObservations);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; strSmokingTobaccoUse typeof= &apos;+typeof(strSmokingTobaccoUse)+&apos; length= &apos;+strSmokingTobaccoUse.length+&apos; strSmokingTobaccoUse= &apos;+strSmokingTobaccoUse);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; strObservations CHECK typeof= &apos;+(typeof(strObservations) !== &apos;undefined&apos;)+&apos; length= &apos;+(strObservations.length&gt;0)+&apos; EVALUATION= &apos;+(typeof(strObservations) !== &apos;undefined&apos;)&amp;&amp;(strObservations.length&gt;0));
			}
			// arrObservations object contains current list of found Smoking Tobacco Use and Risks from CCDA
			if((typeof(strObservations) !== &apos;undefined&apos;)&amp;&amp;(strObservations.length&gt;0)) {

				// 2022-08-01 JER - Modified to use toUpperCase() to match case sensitivity when performing indexOf function
				// Convert string (e.g. &quot;HelloWorld&quot;: &quot;Y&quot;) to array and then string to first element of array
				// var strObservations= strObservations.toString().split(&quot;:&quot;)[0].replace(/[&apos;&quot;]+/g,&apos;&apos;);
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; EVALUATE strSmokingTobaccoUse= &apos;+strSmokingTobaccoUse.toUpperCase()+&apos; VS strObservations= &apos;+strObservations.toUpperCase()+&apos; EVAL= &apos;+strObservations.toUpperCase().indexOf(strSmokingTobaccoUse.toUpperCase()));
				}
				if(strObservations.toUpperCase().indexOf(strSmokingTobaccoUse.toUpperCase())&gt;-1) {
				// 2022-07-27 JER - Modified to accommodate outSmokingTobaccoUse as Object()
					outSmokingTobaccoUse[strSmokingTobaccoUse]= &apos;Y&apos;;
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; SET outSmokingTobaccoUse[&apos;+strSmokingTobaccoUse+&apos;]= &apos;+outSmokingTobaccoUse[strSmokingTobaccoUse]);
					}
				} else {
					// 2022-08-01 JER - Modified configuration bug from using inPregnancyRiskFactor to inCurrentMedicalCondition
					// 2022-08-27 JER - Modified default value to &apos;&apos; and not &apos;N&apos; is not provided
					outSmokingTobaccoUse[strSmokingTobaccoUse]= &apos;&apos;;
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; SET outSmokingTobaccoUse[&apos;+strSmokingTobaccoUse+&apos;]= &apos;+outSmokingTobaccoUse[strSmokingTobaccoUse]);
					}
				} // end if
			} else {
				// 2022-08-27 JER - Modified default value to &apos;&apos; and not &apos;N&apos; is not provided
				outSmokingTobaccoUse[strSmokingTobaccoUse]= &apos;&apos;;
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; SET outSmokingTobaccoUse[&apos;+strSmokingTobaccoUse+&apos;]= &apos;+outSmokingTobaccoUse[strSmokingTobaccoUse]);
				} // end if 	
			}
		} // end for
		channelMap.put(&apos;outSmokingTobaccoUse&apos;,outSmokingTobaccoUse);
	} else {
		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; inSmokingTobaccoUse has no value or is &quot;undefined&quot;.&apos;); }
	}// end if
	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(outSmokingTobaccoUse)= &apos;+typeof(outSmokingTobaccoUse)+&apos; toString= &apos;+JSON.stringify(outSmokingTobaccoUse)+&apos; length= &apos;+JSON.stringify(outSmokingTobaccoUse).length); 
	}
} // end function</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>46188992-808e-4348-9541-4a97a861c28c</id>
    <name>Utilities</name>
    <revision>20</revision>
    <lastModified>
      <time>1690987302612</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description>Conversion De-Identification HL7 Utilities</description>
    <includeNewChannels>false</includeNewChannels>
    <enabledChannelIds>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
      <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
      <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>adb80ef5-a512-462d-bcb0-af03ed498ed6</id>
        <name>anonymize_hl7_message_header</name>
        <revision>16</revision>
        <lastModified>
          <time>1670895747847</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** This script handles the transformation to update HL7 message header during anonymization

	@param {String} msg - provide the hl7 message to have the message header modified to reflect anonmymization
	@return {String} return description

	scriptName:	anonymize_hl7_message_header.js
	desc:		This script handles the modification message header modified to reflect anonmymization
	date:		2022-05-36 
	history:
	2022-08-12 19:50 JER - Modified to MSH-4 statically always set to QS1
	2022-07-18 19:07 JER - Modified to evaluate the segments length() to determine if children nodes
*/
function anonymize_hl7_message_header(msg) {

	var scriptName= &quot;anonymize_hl7_message_header&quot;;
	var debug= 0;
	var currentHeader= new Object();

	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg[MSH] length: &apos;+msg[&apos;MSH&apos;].length()); }

	if(msg[&apos;MSH&apos;].length()&gt;0) {
		
		// get MSH segment data
		var curSendingApplication= msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString();
		// 2022-08-12 JER - Modified to MSH-4 statically always set to QS1		
		// var curSendingFacility= &apos;QS1&apos;;
		var curSendingFacility= msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString();
		globalMap.put(&apos;gSendingFacility&apos;,curSendingFacility);
		var curReceivingApplication= msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString();
		var curReceivingFacility= msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;].toString();
		var messageDateTime= msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
		var curMessageType= msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString()+&apos;^&apos;+msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();
		var messageControlId= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
	
		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;: sendingApplication= &apos;+curSendingApplication+&apos; sendingFacility= &apos;+curSendingFacility+&apos; receivingApplication= &apos;+curReceivingApplication+&apos; receivingFacility= &apos;+curReceivingFacility+&apos; messageType= &apos;+curMessageType+&apos; messageDateTime= &apos;+messageDateTime+&apos; messageControlId= &apos;+messageControlId); }

		// collect the currentHeader Object Properties
		if(evaluate_defined_variable(curSendingApplication,&apos;msh-3&apos;)) 	{ currentHeader.sendingApplication= curSendingApplication; }
		if(evaluate_defined_variable(curSendingFacility,&apos;msh-4&apos;)) 		{ currentHeader.sendingFacility= curSendingFacility; }
		if(evaluate_defined_variable(curReceivingApplication,&apos;msh-5&apos;)) 	{ currentHeader.receivingApplication= curReceivingApplication; }
		if(evaluate_defined_variable(curReceivingFacility,&apos;msh-6&apos;)) 	{ currentHeader.receivingFacility= curReceivingFacility; }
		if(evaluate_defined_variable(curMessageType,&apos;msh-7&apos;)) 			{ currentHeader.messageType= curMessageType; }
		if(evaluate_defined_variable(messageDateTime,&apos;msh-9&apos;)) 		{ currentHeader.messageDateTime= messageDateTime; }
		if(evaluate_defined_variable(messageControlId,&apos;msh-10&apos;)) 		{ currentHeader.messageControlId= messageControlId; }
	
		channelMap.put(&apos;currentHeader&apos;,currentHeader);
		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; currentHeader: &apos;+JSON.stringify(currentHeader)); }
	} // end if 
	
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg[EVN] length: &apos;+msg[&apos;EVN&apos;].length()); }
	
	if(msg[&apos;EVN&apos;].length()&gt;0) {
		
		// get EVN segment data
		var curEventTypeCode= msg[&apos;EVN&apos;][&apos;EVN.1&apos;].toString();
		var eventDateTime= msg[&apos;EVN&apos;][&apos;EVN.2&apos;][&apos;EVN.2.1&apos;].toString();
	
		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;: eventTypeCode= &apos;+curEventTypeCode+&apos; eventDateTime= &apos;+eventDateTime); }

		// collect the currentHeader Object Properties
		if(evaluate_defined_variable(curEventTypeCode,&apos;evn-1&apos;))	{ currentHeader.eventTypeCode= curEventTypeCode; }
		if(evaluate_defined_variable(eventDateTime,&apos;evn-2&apos;)) 		{ currentHeader.eventDateTime= eventDateTime; }
		
		channelMap.put(&apos;currentHeader&apos;,currentHeader);
		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; currentHeader: &apos;+JSON.stringify(currentHeader)); }
	} // end if 
	
	// new Header
	var newHeader= new Object();
	
	// global channel Map configuration specific to this channel referenced across all messages
	// pull the global channel map variable: gcSendingApplication
	if(evaluate_defined_variable($gc(&apos;gcSendingApplication&apos;),&apos;gcSendingApplication&apos;)) { 
		var sendingApplication= $gc(&apos;gcSendingApplication&apos;);
	} else {
		var sendingApplication= curSendingApplication;
	}
	// pull the global channel map variable: gcSendingFacility
	if(evaluate_defined_variable($gc(&apos;gcSendingFacility&apos;),&apos;gcSendingFacility&apos;)) { 
		var sendingFacility= $gc(&apos;gcSendingFacility&apos;);
	} else {
		var sendingFacility= curSendingFacility;
	}
	// pull the global channel map variable: gcReceivingApplication
	if(evaluate_defined_variable($gc(&apos;gcReceivingApplication&apos;),&apos;gcReceivingApplication&apos;)) { 
		var receivingApplication= $gc(&apos;gcReceivingApplication&apos;);
	} else {
		var receivingApplication= curReceivingApplication;
	}
	// pull the global channel map variable: gcReceivingFacility
	if(evaluate_defined_variable($gc(&apos;gcReceivingFacility&apos;),&apos;gcReceivingFacility&apos;)) { 
		var receivingFacility= $gc(&apos;gcReceivingFacility&apos;);
	} else {
		var receivingFacility= curReceivingFacility;
	}
	// pull the global channel map variable: gcMessageType
	if(evaluate_defined_variable($gc(&apos;gcMessageType&apos;),&apos;gcMessageType&apos;)) { 
		var messageType= $gc(&apos;gcMessageType&apos;);
	} else {
		var messageType= curMessageType;
	}
	var messageDateTime=  current_date_get_hl7_formatted_datetime(&apos;datetime&apos;);
	var messageControlId= UUIDGenerator.getUUID();
	var eventMessageType= messageType.toString().split(&apos;^&apos;)[1];
	var eventDateTime=    messageDateTime;

	if(msg[&apos;MSH&apos;].length()&gt;0) {
		// set newPatient Object
		newHeader.sendingApplication= 	sendingApplication;
		newHeader.sendingFacility=    	sendingFacility;
		newHeader.receivingApplication= 	receivingApplication;
		newHeader.receivingFacility= 		receivingFacility;
		newHeader.messageType=    		messageType;
		newHeader.messageDateTime= 		messageDateTime;
		newHeader.messageControlId=		messageControlId;
	}
	
	if(msg[&apos;EVN&apos;].length()&gt;0) { 
		newHeader.eventMessageType=		eventMessageType;
		newHeader.eventDateTime=			eventDateTime;
	}
	
	channelMap.put(&apos;newHeader&apos;,newHeader);
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; newHeader: &apos;+JSON.stringify(newHeader)); }

	// Populate tmp outbound message
	var tmp= msg;

	if(msg[&apos;MSH&apos;].length()&gt;0) {
		// Modify MSH segment values 
		tmp[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;]=   sendingApplication;
		tmp[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;]=   sendingFacility;
		tmp[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;]=   receivingApplication;
		tmp[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;]=   receivingFacility;
		tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;]=   messageDateTime;
		tmp[&apos;MSH&apos;][&apos;MSH.9&apos;]=   messageType;
		tmp[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]= messageControlId;
	}
	
	if(msg[&apos;EVN&apos;].length()&gt;0) {
		// Modify EVN segment values 
		tmp[&apos;EVN&apos;][&apos;EVN.1&apos;]= eventMessageType;
		tmp[&apos;EVN&apos;][&apos;EVN.2&apos;][&apos;EVN.2.1&apos;]= eventDateTime;	
	}
	
	channelMap.put(&apos;anonymizedHeader&apos;,tmp);
	
	return tmp;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>18aafbe5-d45c-4a6c-a124-82883fa03475</id>
        <name>anonymize_hl7_patient_demographics</name>
        <revision>6</revision>
        <lastModified>
          <time>1672776775880</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** This script handles the transformation to anonymize HL7 message patient demographics

	@param {String} msg - provide the hl7 message to have the patient demographics anonmymized
	@return {String} return description

	scriptName:	anonymize_hl7_patient_demographics.js
	desc:		This script handles the transformation to anonymize HL7 message patient demographics
	date:		2022-05-36 
	history:
	2023-01-03 JER - Modified from patient.encounter to patient.account
	2022-08-12 JER - Added the Alternate Patient Id PID-4
	2022-07-13 JER - Modified this script as a code_template function
	2022-04-15 JER - created from the convert_RDS_HL7_to_JSON script
*/
function anonymize_hl7_patient_demographics(msg) {

	var scriptName= &quot;anonymize_hl7_patient_demographics&quot;;
	var debug= 0;
	var currentPatient= new Object();
	var newPatient= new Object();

	var patientId= msg[&apos;PID&apos;][&apos;PID.3&apos;][0][&apos;PID.3.1&apos;].toString();
	// 2022-08-12 JER - Added the Alternate Patient Id PID-4
	var altPatientId= msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString();
	var lastName= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString();
	var firstName= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString();
	var dateOfBirth= msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();
	var gender= msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString();
	var account= msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();

	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;: patientId= &apos;+patientId+&apos; lastName= &apos;+lastName+&apos; firstName= &apos;+firstName+&apos; dateOfBirth= &apos;+dateOfBirth+&apos; gender=&apos;+gender+&apos; account= &apos;+account); }

	// collect the currentPatient Object Properties
	currentPatient.patientId= patientId;
	// 2022-08-12 JER - Added the Alternate Patient Id PID-4
	currentPatient.altPatientId= altPatientId;
	currentPatient.lastName= lastName;
	currentPatient.firstName= firstName;
	currentPatient.dateOfBirth= dateOfBirth;
	currentPatient.gender= gender;
	currentPatient.account= account;
	channelMap.put(&apos;currentPatient&apos;,currentPatient);
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; currentPatient: &apos;+JSON.stringify(currentPatient)); }

	// global channel Map configuration specific to this channel referenced across all messages
	var patientLastName= 	channelMap.get(&apos;lPatientLastName&apos;).toString();
	var patientFirstName=	channelMap.get(&apos;lPatientFirstName&apos;).toString();
	var patientDateOfBirth=	channelMap.get(&apos;lPatientDateOfBirth&apos;).toString();

	var patientId= 		channelMap.get(&apos;lPatientIdPrefix&apos;).toString()+random_generator(4);
	// 2022-08-12 JER - Added the Alternate Patient Id PID-4
	var altPatientId= 		patientId;
	var patientAccount= 	channelMap.get(&apos;lPatientIdPrefix&apos;).toString()+random_generator(8);
	var patientLastName= 	patientLastName+&apos;&apos;+random_generator(4);
	var patientFirstName= 	patientFirstName+&apos;&apos;+random_generator(4);

	// determine FullYear, Month and Day
	var strFullYear=		patientDateOfBirth.substring(0,4);
	var strMonth=			patientDateOfBirth.substring(4,6);
	var strDay=			patientDateOfBirth.substring(6,8);
	// randomDateAfterDate(new Date(2021, 4, 5), -365)
	var patientDateOfBirth= random_date_after_date(new Date (strFullYear, strMonth, strDay), 3650, scriptName);

	var patientGender= Math.random();
	if(patientGender&lt;0.5) { patientGender= &apos;M&apos;; } else { patientGender= &apos;F&apos;; }

	// set newPatient Object
	newPatient.patientId= patientId;
	// 2022-08-12 JER - Added the Alternate Patient Id PID-4
	newPatient.altPatientId= altPatientId;
	newPatient.lastName=  patientLastName;
	newPatient.firstName= patientFirstName;
	newPatient.dateOfBirth= patientDateOfBirth;
	newPatient.gender=    patientGender;
	newPatient.account= patientAccount;
	channelMap.put(&apos;newPatient&apos;,newPatient);
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; newPatient: &apos;+JSON.stringify(newPatient)); }

	var tmp= msg;

	// Modify PID segment values - Patient Id (PID.3.1)
	tmp[&apos;PID&apos;][&apos;PID.3&apos;][0][&apos;PID.3.1&apos;]= patientId;
	// 2022-08-12 JER - Added the Alternate Patient Id PID-4
	tmp[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;]= altPatientId;
	tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;]= patientLastName;
	tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;]= patientFirstName;
	tmp[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;]= patientDateOfBirth;
	tmp[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;]= patientGender;
	tmp[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;]= patientAccount;
	tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.9&apos;][&apos;PID.5.9.2&apos;]=&apos;ANONYMIZED&apos;;
	
	channelMap.put(&apos;anonymizedMessage&apos;,tmp);
	
	return tmp;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>26b03c12-8952-4f83-90ec-0983da5de727</id>
        <name>anonymize_hl7_patient_encounter</name>
        <revision>9</revision>
        <lastModified>
          <time>1672776857338</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** This script handles the transformation to anonymize HL7 message patient encounter visit information
	@param {String} msg - provide the hl7 message to have the patient encounter anonmymized
	@return {String} return description

	scriptName:	anonymize_hl7_patient_encounter.js
	desc:		This script handles the transformation to anonymize HL7 message encounter visit information
	date:		2022-05-36 
	history:
	2023-01-03 JER - Modified to include the random_generator function for the encounter number
	2022-08-12 JER - Created from the anonmymize_hl7_patient_demographics function
*/
function anonymize_hl7_patient_encounter(msg) {

	var scriptName= &quot;anonymize_hl7_patient_encounter&quot;;
	var debug= 0;
	var currentEncounter= new Object();
	var newEncounter= new Object();
	
	for each(child in msg) {
		if(typeof(msg[&apos;encounter&apos;])!== &apos;undefined&apos;) {
			currentEncounter= msg[&apos;encounter&apos;];
		} // end if 
	} // end for each
	
	// get GlobalMap gLocationUnits (array)
	// gLocationUnits= [&apos;ABC&apos;,&apos;BCD&apos;,&apos;CDE&apos;,&apos;DEF&apos;,&apos;EFG&apos;,&apos;FGH&apos;,&apos;GHI&apos;,&apos;HIJ&apos;,&apos;IJK&apos;,&apos;JKL&apos;];
	var arrLocationUnits=  			$g(&apos;gLocationUnits&apos;);
	// if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; arrLocationUnits typeof:&apos;+typeof(arrLocationUnits)+&apos; length: &apos;+arrLocationUnits.length+&apos; valueOf: &apos;+arrLocationUnits.toString()+&apos; json: &apos;+JSON.stringify(arrLocationUnits)); 
	// } // end if 
 	var encounterCurrentUnit= 		arrLocationUnits[Math.floor(Math.random()*arrLocationUnits.length)];
	newEncounter.unit= encounterCurrentUnit;
	
	var encounterCurrentRoom= 		encounterCurrentUnit+&apos;&apos;+random_generator(4);
	newEncounter.room= 				encounterCurrentRoom;
	var encounterCurrentBed=   		random_generator(2);
	newEncounter.bed=  				encounterCurrentBed;
	var encounterCurrentFacility= 	$g(&apos;gSendingFacility&apos;);
	newEncounter.facility=			encounterCurrentFacility;
	
	if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;]) {
		if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.1&apos;]) { 
			var encounterPriorUnit= 		msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.1&apos;].toString(); 
			newEncounter.prior_unit=		encounterPriorUnit;
		}
		if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.2&apos;]) { 
			var encounterPriorRoom= 		msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.2&apos;].toString(); 
			newEncounter.prior_room=		encounterPriorRoom;
		}
		if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.3&apos;]) { 
			var encounterPriorBed= 			msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.3&apos;].toString();
			newEncounter.prior_bed=			encounterPriorBed;
		}
		if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.4&apos;]) { 
			var encounterPriorFacility= 	msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.4&apos;].toString(); 
			newEncounter.prior_facility=	encounterPriorFacility;
		}
	} // end if 

	// 2023-01-03 JER - Modified to include the random_generator function for the encounter number
	if(msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;]) { 
		var encounterVisitNumber= 		msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString().substring(0,5)+&apos;&apos;+random_generator(4); 
		newEncounter.encounter_identifier=	encounterVisitNumber;
	}

	if(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;]) { 
		var encounterAdmissionDate= 	msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString();
		// determine FullYear, Month and Day
		var strFullYear=				encounterAdmissionDate.substring(0,4);
		var strMonth=					encounterAdmissionDate.substring(4,6);
		var strDay=					encounterAdmissionDate.substring(6,8);
		// randomDateAfterDate(new Date(2021, 4, 5), -365)
		var encounterAdmissionDate= 		random_date_after_date(new Date (strFullYear, strMonth, strDay), 20, scriptName);
		newEncounter.admissionDate=		encounterAdmissionDate;
	} // end if
	
	channelMap.put(&apos;anonymizedVisit&apos;,newEncounter);
	
	var tmp= msg;

	// Modify PV1 segment values
	// Current Location PV1-3
	if(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;]= encounterCurrentUnit; }
	if(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;]= encounterCurrentRoom; }
	if(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.3&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.3&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.3&apos;]= encounterCurrentBed;  }
	if(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;]= encounterCurrentFacility; }
	
	// Prior Location PV1-6
	if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.1&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.1&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.1&apos;]= encounterPriorUnit; }
	if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.2&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.1&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.2&apos;]= encounterPriorRoom; }
	if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.3&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.3&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.3&apos;]= encounterPriorBed;  }
	if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.4&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.4&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.4&apos;]= encounterPriorFacility; }
	
	// Encounter/Visit Number  PV1-19
	if(msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;]= encounterVisitNumber; }

	// Admission Date  PV1-44
	if(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;]= encounterAdmissionDate; }
	
	channelMap.put(&apos;anonymizedEncounter&apos;,tmp);
	
	return tmp;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>89fd6e70-b6b2-4060-a02a-56d7b127ae0c</id>
        <name>anonymize_hl7_patient_orders</name>
        <revision>12</revision>
        <lastModified>
          <time>1660259288379</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** This script handles the transformation to anonymize HL7 message patient orders

	@param {String} msg - provide the hl7 message to have the patient RDE orders anonmymized
	@return {String} return description

	scriptName:	anonymize_hl7_patient_orders.js
	desc:		This script handles the transformation to anonymize HL7 message patient orders
	date:		2022-05-36 
	history:
	2022-07-13 JER - Modified this script as a code_template function
	2022-04-15 JER - created from the convert_RDS_HL7_to_JSON script
*/
function anonymize_hl7_patient_orders(msg) {

	var scriptName= &quot;anonymize_hl7_patient_orders&quot;;
	var debug= 0;
	var currentOrder= new Object();
	var newOrder= new Object();

	// get newPatient Object
	var objPatient= channelMap.get(&apos;newPatient&apos;);
	var patientId= objPatient.patientId.toString();
	var patientName= objPatient.firstName.toString()+&apos; &apos;+objPatient.lastName.toString();

	// ORC
	if(msg[&apos;ORC&apos;]) { 
		var orderFillerNumber= random_generator(9);
		// var orderFillerNumber= msg[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;ORC.3.1&apos;].toString();
		var orderTransactionDateTime= (new Date()).toISOString().replace(/[^0-9]/g,&apos;&apos;).slice(0,-3);
		var orderEffectiveDateTime= orderTransactionDateTime;
		//var orderTransactionDateTime= msg[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;].toString();
		//var orderEffectiveDateTime= msg[&apos;ORC&apos;][&apos;ORC.15&apos;][&apos;ORC.15.1&apos;].toString();
	}
	// RXO
	if(msg[&apos;RXO&apos;]) {
		var requestTreatmentOrderIdentifier= random_generator(11);
		// var requestTreatmentOrderIdentifier= msg[&apos;RXO&apos;][&apos;RXO.1&apos;][&apos;RXO.1.1&apos;].toString();
	}
	// RXE
	if(msg[&apos;RXE&apos;]) { 
		// var encodedTreatmentOrderIdentifier= msg[&apos;RXE&apos;][&apos;RXE.2&apos;][&apos;RXE.2.1&apos;].toString();
		var encodedTreatmentOrderIdentifier= requestTreatmentOrderIdentifier;
		// var encodedAlternateTreatmentOrderIdentifier= msg[&apos;RXE&apos;][&apos;RXE.2&apos;][&apos;RXE.2.4&apos;].toString();
		var encodedAlternateTreatmentOrderIdentifier= requestTreatmentOrderIdentifier;
		// ((new Date())+1).toISOString().replace(/[^0-9]/g,&apos;&apos;).slice(0,-3);
		// var doseDispensedDateTime= msg[&apos;RXE&apos;][&apos;RXE.18&apos;][&apos;RXE.18.1&apos;].toString();
		var doseDispensedDateTime= ((new Date())+1).toISOString().replace(/[^0-9]/g,&apos;&apos;).slice(0,-3);
		// var originalOrderedDateTime= msg[&apos;RXE&apos;][&apos;RXE.32&apos;][&apos;RXE.32.1&apos;].toString();
		var originalOrderedDateTime= orderTransactionDateTime
	}
	// TQ1
	if(msg[&apos;TQ1&apos;].length()&gt;1) {
		var arrTQ1Segment= new Array();
		for each(tq1 in msg[&apos;TQ1&apos;]) {
			arrTQ1Segment.push(tq1[&apos;TQ1.8&apos;][&apos;TQ1.8.1&apos;].toString());&#xd;
		}
		var orderTimingEndDate= arrTQ1Segment;
	} else if(msg[&apos;TQ1&apos;]) { 
		var orderTimingEndDate= msg[&apos;TQ1&apos;][&apos;TQ1.8&apos;][&apos;TQ1.8.1&apos;].toString()
	}

	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos;: patientName: &apos;+patientName+&apos; patientId: &apos;+patientId+&apos; orderFillerNumber= &apos;+orderFillerNumber+&apos; orderTransactionDateTime= &apos;+orderTransactionDateTime+&apos; requestTreatmentOrderIdentifier= &apos;+requestTreatmentOrderIdentifier); 
	}

	// collect the currentPatient Object Properties
	currentOrder.orderFillerNumber= orderFillerNumber;
	currentOrder.requestTreatmentOrderIdentifier= requestTreatmentOrderIdentifier;
	currentOrder.encodedTreatmentOrderIdentifier= encodedTreatmentOrderIdentifier;
	currentOrder.encodedAlternateTreatmentOrderIdentifier= encodedAlternateTreatmentOrderIdentifier;
	//
	currentOrder.orderTransactionDateTime= orderTransactionDateTime;
	currentOrder.orderEffectiveDateTime= orderEffectiveDateTime;
	currentOrder.doseDispensedDateTime= doseDispensedDateTime;
	currentOrder.originalOrderedDateTime= originalOrderedDateTime;
	currentOrder.orderTimingEndDate= orderTimingEndDate;

	channelMap.put(&apos;currentOrder&apos;,currentOrder);
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; currentOrder: &apos;+JSON.stringify(currentOrder)); }

	// var newDate= new Date(new Date() - Math.random()*(1e+12));
	// determine FullYear, Month and Day
	var newDate= 			new Date();
	var strFullYear=		newDate.getFullYear();
	var strMonth=			newDate.getMonth();
	var strDay=			newDate.getDate();
	// randomDateAfterDate(new Date(2021, 4, 5), -365)
	var newRandomDate= random_date_after_date(new Date (strFullYear, strMonth, strDay), 3650, scriptName);
	
	var newOrderFillerNumber= 					newRandomDate.substring(0,8).toString()+random_generator(5);
	var newRequestTreatmentOrderIdentifier= 		random_generator(5)+newRandomDate.substring(0,8).toString();
	var newEncodedTreatmentOrderIdentifier= 		newRequestTreatmentOrderIdentifier;
	var newEncodedAlternateTreatmentOrderIdentifier= 	newRequestTreatmentOrderIdentifier;

	var newOrderTransactionDateTime= newRandomDate;
	var newOrderEffectiveDateTime= newRandomDate;
	var newDoseDispensedDateTime= newRandomDate;
	var newOriginalOrderedDateTime= newRandomDate;
	var newOrderTimingEndDate= newRandomDate;

	// set newPatient Object
	// newOrder.orderFillerNumber= newOrderFillerNumber;
	newOrder.orderFillerNumber= orderFillerNumber;
	//newOrder.requestTreatmentOrderIdentifier=  newRequestTreatmentOrderIdentifier;
	//newOrder.encodedTreatmentOrderIdentifier= newEncodedTreatmentOrderIdentifier;
	//newOrder.encodedAlternateTreatmentOrderIdentifier= newEncodedAlternateTreatmentOrderIdentifier;
	newOrder.requestTreatmentOrderIdentifier=  requestTreatmentOrderIdentifier;
	newOrder.encodedTreatmentOrderIdentifier= encodedTreatmentOrderIdentifier;
	newOrder.encodedAlternateTreatmentOrderIdentifier= encodedAlternateTreatmentOrderIdentifier;
	
	newOrder.orderTransactionDateTime= newOrderTransactionDateTime;
	newOrder.orderEffectiveDateTime= newOrderEffectiveDateTime;
	newOrder.doseDispensedDateTime= newDoseDispensedDateTime;
	newOrder.originalOrderedDateTime= newOriginalOrderedDateTime;
	newOrder.orderTimingEndDate= newOrderTimingEndDate;
	
	channelMap.put(&apos;newOrder&apos;,newOrder);
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; newOrder: &apos;+JSON.stringify(newOrder)); }

	var tmp= msg;

	// Modify PID segment values - Patient Id (PID.3.1)
	tmp[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;ORC.3.1&apos;]= newOrderFillerNumber;
	tmp[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;]= newOrderTransactionDateTime;
	tmp[&apos;ORC&apos;][&apos;ORC.15&apos;][&apos;ORC.15.1&apos;]= newOrderEffectiveDateTime= 
	// RXO
	tmp[&apos;RXO&apos;][&apos;RXO.1&apos;][&apos;RXO.1.1&apos;]= newRequestTreatmentOrderIdentifier;
	// RXE
	tmp[&apos;RXE&apos;][&apos;RXE.2&apos;][&apos;RXE.2.1&apos;]= newEncodedTreatmentOrderIdentifier;
	tmp[&apos;RXE&apos;][&apos;RXE.2&apos;][&apos;RXE.2.4&apos;]= newEncodedAlternateTreatmentOrderIdentifier; 
	tmp[&apos;RXE&apos;][&apos;RXE.18&apos;][&apos;RXE.18.1&apos;]= newDoseDispensedDateTime;
	tmp[&apos;RXE&apos;][&apos;RXE.32&apos;][&apos;RXE.32.1&apos;]= newOriginalOrderedDateTime;
	// TQ1
	// 2022-07-19 JER - handling multiple TQ1 segments
	if(typeof(orderTimingEndDate)== object) {
		if(orderTimingEndDate.length()&gt;1) {
			for each(var i= 0;i&lt;orderTimingEndDate.length();i++) {
				tmp[&apos;TQ1&apos;][&apos;TQ1.8&apos;][&apos;TQ1.8.1&apos;]= newOrderTimingEndDate;
			}
		}
	}
	tmp[&apos;TQ1&apos;][&apos;TQ1.8&apos;][&apos;TQ1.8.1&apos;]= newOrderTimingEndDate;
	tmp[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;ORC.2.1&apos;]=&apos;ANONYMIZED&apos;;
	
	channelMap.put(&apos;anonymizedOrder&apos;,tmp);
	
	return tmp;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>72074d1d-7b19-4ac5-b9fb-e0b5df689f09</id>
        <name>current_date_get_hl7_formatted_datetime</name>
        <revision>1</revision>
        <lastModified>
          <time>1658181750434</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	This function when called with the desired datetime type of either: DATE (YYYYMMDD), TIME (HHMMSS) or 
	DATETIME (YYYYMMDDHHMMSS) from the current Date() function
	scriptName - current_date_get_hl7_formatted_datetime.js
	
	@param {type} string - provided the desired type 
	@return {string} - return the new Date() string per the provided argument type
*/
function current_date_get_hl7_formatted_datetime(type) {
	// TODO: Enter code here

	if(typeof(type) !== &apos;undefined&apos;) {
		if(type.toString().toUpperCase()== &apos;DATE&apos;) {
			return new Date().toISOString().split(&apos;T&apos;)[0].replace(/-/g,&quot;&quot;);
		} else if (type.toString().toUpperCase()== &apos;TIME&apos;) {
			return new Date().toISOString().split(&apos;T&apos;)[1].substring(0,8).replace(/:/g,&quot;&quot;);
		} else if (type.toString().toUpperCase()== &apos;DATETIME&apos;) {
			return new Date().toISOString().split(&apos;T&apos;)[0].replace(/-/g,&quot;&quot;)+&apos;&apos;+new Date().toISOString().split(&apos;T&apos;)[1].substring(0,8).replace(/:/g,&quot;&quot;);;
		} else {
			return new Date().toISOString().split(&apos;T&apos;)[0].replace(/-/g,&quot;&quot;)+&apos;&apos;+new Date().toISOString().split(&apos;T&apos;)[1].substring(0,8).replace(/:/g,&quot;&quot;);;
		}
	} else {
		return new Date().toISOString().split(&apos;T&apos;)[0].replace(/-/g,&quot;&quot;)+&apos;&apos;+new Date().toISOString().split(&apos;T&apos;)[1].substring(0,8).replace(/:/g,&quot;&quot;);;
	}
	
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>ee6d8602-9775-4858-8960-ddc7acbd4a18</id>
        <name>evaluate_defined_variable</name>
        <revision>16</revision>
        <lastModified>
          <time>1658190842389</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** This script handles the evaluate a variable to determine if defined or undefined for an Javascript object

	@param {String} msg - provide the hl7 message to have the patient demographics anonmymized
	@return {String} return description

	scriptName:	evaluate_defined_variable.js
	desc:		This script handles the evaluation of variables to determine the typeof and toString().length GT 0
	date:		2022-05-36 
	history:
	2022-07-13 JER - Modified this script as a code_template function
	2022-04-15 JER - created from the convert_RDS_HL7_to_JSON script
*/
function evaluate_defined_variable(element, elementName) {
	var scriptName= &apos;evaluate_defined_variable&apos;;
	var debug= 0;
	var definedResult= true;
	var debugStatement= &apos;DEBUG::&apos;+scriptName+&apos; evaluate of element &apos;+elementName+&apos; for typeof(element): &apos;+typeof(element); 
	if(debug&gt;0) { logger.info(&apos;DEBUG::&apos;+scriptName+&apos; evaluate element: &apos;+element); }
	
	
	if(typeof(element) !== &apos;undefined&apos;) {
		if(debug&gt;0) { logger.error(debugStatement); }
		if(typeof(element)== &apos;object&apos;) {
			
			if(debug&gt;0) { logger.error(debugStatement+&apos; A evaluate the current element value: &apos;+element+&apos; JSON: &apos;+JSON.stringify(element)+&apos; EQ null: &apos;+element=== null); }
			
			if(JSON.stringify(element).toString().length&lt;1) {
				if(debug&gt;0) { logger.error(debugStatement+&apos; B FAILS as JSON.stringify.length LT 1 &apos;+JSON.stringify(element).length); }
				definedResult= false;
			} else if(element=== null) {
				if(debug&gt;0) { logger.error(debugStatement+&apos; B1 FAILS as JSON.stringify EQ NULL &apos;+JSON.stringify(element).length); }
				definedResult= false;
			} else {
				if(debug&gt;0) { logger.error(debugStatement+&apos; C SUCCESS as JSON.stringify.length GT 0 &apos;+JSON.stringify(element).length); }
			}
		} else if(element.toString().length&lt;1) {
			if(debug&gt;0) { logger.error(debugStatement+&apos; D FAILS as toString.length LT 1 &apos;+element.toString().length); }
			definedResult= false;
		} else if(element=== null) {
			if(debug&gt;0) { logger.error(debugStatement+&apos; D1 FAILS as toString EQ NULL &apos;+element.toString()); }
			definedResult= false;
		} else {
			if(debug&gt;0) { logger.error(debugStatement+&apos; E SUCCESS as toString.length GT 0 &apos;+element.toString().length); }
		}
	} else {
		if(debug&gt;0) { logger.error(debugStatement+&apos; F FAILS with undefined value.&apos;); }
		definedResult= false;
	}
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; G definedResult for &apos;+elementName+&apos;= &apos;+definedResult); }
	
	return definedResult;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>3ccaaba3-264d-4b3d-88ec-897890c7a8b1</id>
        <name>random_date_after_date</name>
        <revision>7</revision>
        <lastModified>
          <time>1658191300791</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	This function will produce a random date based on a provided date and number of days argument.

	@param {String} start - enter the starting date (&apos;YYYY&apos;, &apos;MM&apos;, &apos;DD&apos;) (e.g. &apos;2021&apos;, &apos;09&apos;, &apos;13&apos;)
	@param {String} days -  number of days (positive or negative) (e.g. 365, 3000, -365)
	@return {String} return description
*/
function random_date_after_date(start, days, inScriptName) {
	
	// randomDateAfterDate(new Date(2021, 4, 5), -365) 
	var scriptName= &apos;random_date_after_date&apos;;
	var debug= 0;
	
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; originating from: &apos;+inScriptName+&apos; typeof(start)= &apos;+typeof(start)+&apos; start= &apos;+start+&apos; number of days= &apos;+days+ &apos; typeof(days)= &apos;+typeof(days)); }

	var startDate= new Date(start);
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(startDate)= &apos;+typeof(startDate)+&apos; startDate= &apos;+startDate); }
	
	var strRandom= Math.random()*days*24*60*60*1000;
	var newDate= new Date(start.getTime() + strRandom);
	// Fri Jun 26 2020 08:59:35 GMT-0600 (GMT-06:00)
	var strDate= newDate.getFullYear() + &quot;&quot; + addLeadingZeros(newDate.getMonth() + 1) + &quot;&quot; + addLeadingZeros(newDate.getDate());
	
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; random date generated: &apos;+strDate); }

	return strDate;
}

function addLeadingZeros(n) {
  
  if (n &lt;= 9) {
    return &quot;0&quot; + n;
  }
  
  return n;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>cb5f5610-99ca-4709-9666-46f7c681afaa</id>
        <name>random_generator</name>
        <revision>1</revision>
        <lastModified>
          <time>1657634910756</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	This function will produce a random number based on the number of characters provided into the numOfChars argument.

	@param {String} numOfChars - enter the number of random characters to be returned
	@return {String} return description
*/
function random_generator(numOfChars) {
	var scriptName= &apos;random_generator&apos;;
	var debug= 0;
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; evaluate number of characters: &apos;+numOfChars);
	}
	
	var strNumOfChars= &apos;&apos;+numOfChars+&apos;&apos;;
	var cntNumOfChars= strNumOfChars.padEnd(numOfChars,0);
	var strRandom= (Math.random()*cntNumOfChars).toFixed();
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; random number generated: &apos;+strRandom);
	}
	
	return strRandom;
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
    <name>WebPT-Common</name>
    <revision>2</revision>
    <lastModified>
      <time>1678715257049</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description></description>
    <includeNewChannels>true</includeNewChannels>
    <enabledChannelIds>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
    </enabledChannelIds>
    <disabledChannelIds/>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
        <name>Check if String contains</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122790</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>COMPILED_CODE</type>
          <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
        <name>Check if String contains HTTP code</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122593</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>COMPILED_CODE</type>
          <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>8515e088-5c50-47ee-9e2f-9fad1ecf48bd</id>
        <name>Check if String is JSON</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476123309</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Added by Kirby Knight
	12/21/2020
	Test for JSON

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>5f2f84ba-3e66-4be3-8260-8fbd8258bd92</id>
        <name>Check if the PDF is valid</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122055</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
//This function is used for checking the word &quot;PDF&quot; in inbound attachment.
function isValidBase64PDF(base64) {
	const ENCODED_PDF_SIGN = &quot;JVBERi&quot;; // %PDF sign
	const PDF_EOF = &quot;JSVFT0YNCg&quot;; // %EOF
	var pdfBase64Size = (base64.length() * (3 / 4)) - 1;
	
	return (base64.indexOf(ENCODED_PDF_SIGN) != -1 &amp;&amp; base64.indexOf(PDF_EOF) != -1 &amp;&amp; pdf_base64_size &gt; 36);
}
</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
        <name>Convert JSON date to HL7v2 date</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122137</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
        <name>Convert JSON datetime to HL7v2 datetime</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122430</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>bb21449a-df39-48c6-be52-24106c8df4c4</id>
        <name>Destination Formatting</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122703</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Kirby Knight 03/10/2021
	
	This function will remove all other ROOT.Meta.Destinations nodes that are not passed in the
	destination variable and removes the ROOT.Meta.Destinations[x].Destination node

	@param {Any} destination - 
	@return {String} return description
*/
function formatDestinations(destination) {
var arrDestinations = msg[&apos;Meta&apos;][&apos;Destinations&apos;];
	//  Start at the end of the array because of the posibility of deleted array items 
	for (var i = arrDestinations.length - 1; i &gt;= 0; i--) {
		if (arrDestinations[i][&apos;Destination&apos;] == destination){
			delete arrDestinations[i][&apos;Destination&apos;]
		}else if (arrDestinations[i][&apos;Destination&apos;] != destination){
			arrDestinations.splice(i, 1);
		}
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
        <name>Extract JSON node data</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476121748</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>7ed44f8a-fa40-4f3e-9426-3021604eabe0</id>
        <name>Get Feature Value by Name and Database</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476123262</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Returns a string containing the feature value (system property) for a specific client database.

	@param {String} featureName - name of the feature, ie: &quot;BetterPTBidirectionalScheduling&quot;
	@param {String} databaseIdentifier - database name or databaseID / TenantID
	@param {String} databaseIdentifierType - what value is provided in databaseIdentifier. current options include &quot;ID&quot; or &quot;NAME&quot;
	@return {String} returns feature value
*/
function getFeatureValueByNameDatabase(featureName, databaseIdentifier, databaseIdentifierType) {
	var paramList = new Packages.java.util.ArrayList();
	paramList.add(featureName);
	paramList.add(databaseIdentifier);
	paramList.add(databaseIdentifierType);
	
	var sSQL = &apos;EXEC [dbo].[pr_FeatureValueByNameDatabase] ?, ?, ?&apos;;
	
	try {
		var result = executeSharedDBStatementFhirCh(sSQL, true, paramList);
		var featureValue ;
		if(result.next()){			//Added
		 featureValue = result.getString(1);
		}
		return featureValue;
	} catch (e) {
		logger.error(e);
	}
}
</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>9842be2c-c633-42ac-87f1-f91aca9e370f</id>
        <name>JSON Patient IDs</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476121776</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	This function populates the MR and PI patient IDS to channelMap

	@return {String} return description
*/
function jsonPatientIds() {
	for each (patId in msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) {
	if (patId[&apos;IDType&apos;].toString() == &apos;MR&apos;){
		channelMap.put(&apos;extPatId&apos;, patId[&apos;ID&apos;].toString());
	}else if(patId[&apos;IDType&apos;].toString() == &apos;PI&apos;){
		channelMap.put(&apos;patId&apos;, patId[&apos;ID&apos;].toString());
	}
}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
        <name>Verify JSON node for existance</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122542</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>394664c0-d536-4310-970e-181dc03ee7da</id>
    <name>WebPT-Conversions</name>
    <revision>2</revision>
    <lastModified>
      <time>1690140133427</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description></description>
    <includeNewChannels>true</includeNewChannels>
    <enabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
      <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
      <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
      <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </enabledChannelIds>
    <disabledChannelIds/>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
        <name>Convert FHIR codes to HL7v2 codes</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122899</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>2fc8cbf3-0d92-4d1d-a3d6-136c09bd9f2a</id>
    <name>WebPT-Custom Database Functions</name>
    <revision>5</revision>
    <lastModified>
      <time>1703964939898</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description></description>
    <includeNewChannels>true</includeNewChannels>
    <enabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
      <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
      <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
      <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
      <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </enabledChannelIds>
    <disabledChannelIds/>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>23c0b510-63e4-40fa-a4e1-7b2b92ce9a96</id>
        <name>Execute Statement Shared DB Conn clientDb Ch</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122401</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
Executes a SQL statement using a shared database connection stored in the Global Map. If the
connection does not exist, creates it.

@param {String} statement - The SQL statement to execute
@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
@param {List} paramList - A Java List object containing the parameters for the statement (optional)
 */
function executeSharedDBStatementclientDbCh(statement, isQuery, paramList) {
    var result;

    try {
        var dbConnclientDbCh = globalChannelMap.get(&quot;dbConnclientDbCh&quot;);

        if (dbConnclientDbCh == null || dbConnclientDbCh.getConnection().isClosed()) {
            dbConnclientDbCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;), $(&apos;dbClient&apos;), $(&apos;dbUserFhir&apos;), $(&apos;dbPwFhir&apos;));
            globalChannelMap.put(&quot;dbConnclientDbCh&quot;, dbConnclientDbCh);
        }

        if (paramList == undefined) {
            paramList = new Packages.java.util.ArrayList();
        }

        if (isQuery) {
            result = dbConnclientDbCh.executeCachedQuery(statement, paramList);
        } else {
            result = dbConnclientDbCh.executeUpdate(statement, paramList);
        }
    } catch (e) {
        logger.error(e);
    }
    finally {
        return result;
    }
}
</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>4efb3110-a83f-48b5-93ad-79c847b51865</id>
        <name>Execute Statement Shared DB Conn clntAcl Ch</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476123455</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClntAclCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnClntAclCh = globalChannelMap.get(&quot;dbConnClntAclCh&quot;);

		if (dbConnClntAclCh == null || dbConnClntAclCh.getConnection().isClosed())
		{
			dbConnClntAclCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbClntAcl&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnClntAclCh&quot;, dbConnClntAclCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnClntAclCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnClntAclCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>d96d45dd-57f7-4aa9-9bf4-e464d31b94c6</id>
        <name>Execute Statement Shared DB Conn FHIR</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476121922</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhir(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhir.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhir.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>6014068e-c021-4a38-9fa6-6f38f6a2cdab</id>
        <name>Execute Statement Shared DB Conn FHIR Ch</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476123492</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhirCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhirCh = globalChannelMap.get(&quot;dbConnFhirCh&quot;);

		if (dbConnFhirCh == null || dbConnFhirCh.getConnection().isClosed())
		{
			dbConnFhirCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnFhirCh&quot;, dbConnFhirCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhirCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhirCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>fbd5c4a1-b816-4496-acdf-067005f1d376</id>
        <name>Execute Statement Shared DB Conn Translations Ch</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476123008</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementTranslationsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnTranslationsCh = globalChannelMap.get(&quot;dbConnTranslationsCh&quot;);

		if (dbConnTranslationsCh == null || dbConnTranslationsCh.getConnection().isClosed())
		{
			dbConnTranslationsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlTranslations&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnTranslationsCh&quot;, dbConnTranslationsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnTranslationsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnTranslationsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>5d1a5577-4ba4-4d1e-b6cd-e2d924164909</id>
        <name>Execute Statement with Shared DB Conn ODS Ch</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122280</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdsCh = globalChannelMap.get(&quot;dbConnOdsCh&quot;);

		if (dbConnOdsCh == null || dbConnOdsCh.getConnection().isClosed())
		{
			dbConnOdsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOds&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdsCh&quot;, dbConnOdsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>3991db14-0c0b-4123-952c-5164c1ded501</id>
        <name>Execute Statement with Shared DB Conn ODW Ch</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122960</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.  THis connects to the ODW db in Azure

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdwCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdwCh = globalChannelMap.get(&quot;dbConnOdwCh&quot;);

		if (dbConnOdwCh == null || dbConnOdwCh.getConnection().isClosed())
		{
			dbConnOdwCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOdw&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdwCh&quot;, dbConnOdwCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdwCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdwCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>fae08c88-7550-479a-b8ed-ffef47e8eed9</id>
        <name>executeSharedDBStatementClient</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476121956</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClient(statement, isQuery, paramList, dbname)
{
	var result;
 	var dburl= &apos;jdbc:sqlserver://AZW1DEV-SQL02.clinicient.com:1433;databaseName=&apos;+dbname+&apos;&apos;;
	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),dburl,$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			
			//globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		result = dbConnFhir.executeCachedQuery(statement);
	
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>ed20a457-5beb-4aea-9bb9-cf91112ccc56</id>
    <name>WebPT-Default Functions</name>
    <revision>10</revision>
    <lastModified>
      <time>1690140133487</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description></description>
    <includeNewChannels>true</includeNewChannels>
    <enabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
      <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
      <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
      <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </enabledChannelIds>
    <disabledChannelIds/>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>a8a9a0c8-9322-46dc-bef8-011eb3d70291</id>
        <name>Create Header for CSV</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476121678</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	This creates a header for csv files based on the contents of the header variable.  The header
	variable is populated in the channel from the outbound msg template

	@return {String} return description
*/
function createHeader() {
	//Destination transformer.  this creates the header for each new file

	var path = java.nio.file.Paths.get($(&apos;filePath&apos;)+$(&apos;fileName&apos;));
	var bytes = (new java.lang.String($(&apos;header&apos;))).getBytes(&quot;UTF-8&quot;);
	try {
	  java.nio.file.Files.write(path, bytes, java.nio.file.StandardOpenOption.CREATE_NEW);
	}
	catch (e) {
	  //logger.info(&quot; should throw IOException if file already exists&quot;);
	
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>5a886a1f-dab1-41b5-94c6-1a639907d7da</id>
        <name>Filter Message Evaluate Received Checksum</name>
        <revision>33</revision>
        <lastModified>
          <time>1678916806664</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**  This code works by calculating a checksum for each provided message.  We save off the most recent 100 unique checksum values in a global 
	array so if the current message has been recently received we are able to ignore it.
	
	@author:  	Jeffrey Ritz
	@scriptName: 	filterEvaluateReceivedChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {boolean} filter - return filter boolean (true= filter msg, false= do not filter msg)
		persist received_checksum global ChannelMap array
		persist filterMessage ChannelMap variable
	@history
*/
function filterEvaluateReceivedChecksum(msg) {	

	var scriptName= &apos;filterEvaluateReceivedChecksum&apos;
	var filter = false;
	var received_len_limit = 999;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B connectorMessage.getRawData() typeof: &apos;+typeof(connectorMessage.getRawData())+&apos; msg: &apos;+connectorMessage.getRawData());
	} // end if 
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	// var dataBytes = new java.lang.String(connectorMessage.getRawData()).getBytes(&apos;UTF-8&apos;);
	// message = new String(message.getBytes(&quot;utf-8&quot;), &quot;utf-8&quot;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	// var dataBytes = new java.lang.String(msg.getBytes(&apos;UTF-8&apos;));
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);

	// var messageObjectgetBytes= checksum.update(connectorMessage.getRawData().getBytes());
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 
	
	$c(&apos;checksum&apos;, checksum.getValue());
	
	//grab the global channel map variable holding the last X unique checksums that we&apos;ve received
	var received = $gc(&apos;received_checksums&apos;);
	
	if (received == undefined) {
		var received = new Array();
		received.push(checksum.getValue());
	} else {
		//check if we&apos;ve recently received this message, skip it if so
		if (received.indexOf(checksum.getValue()) &gt; -1) {
			filter = true;
		//we haven&apos;t seen it recently, so remember it and allow it through
		} else {
			var received_len = received.length;
			if (received_len &gt; received_len_limit) {
				//remove oldest/first entry, shift all entries forward, and add new entry to end
				received.shift();
				received[received_len_limit] = checksum.getValue();
			} else {
				//add new entry to end of array
				received[received_len] = checksum.getValue();
			} // end if 
		} // end if 
	} // end if 

	 //debug code
	/*for (x=0; x&lt;=received_len_limit; x++) {
		$c(&apos;received-&apos;+x, received[x]);
	} */

	$c(&apos;filterMessage&apos;,filter);
	$gc(&apos;received_checksums&apos;,received);

	return filter;

} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>fbd0484d-74a2-48e4-aedd-f97c2fcefa16</id>
        <name>Get Message Checksum</name>
        <revision>12</revision>
        <lastModified>
          <time>1678916806703</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**  This code works by calculating and reutrning a checksum for each provided message
	
	@author:  	Jeffrey Ritz
	@scriptName: 	getMessageChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {object} result - return checksum value
	@history
	2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() to remove the exponential representation of the number value
*/
function getMessageChecksum(msg) {	

	var scriptName= &apos;getMessageChecksum&apos;;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	} // end if 
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 

	var checksumValue= checksum.getValue();
	// 2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() 
	var arrChecksumValue= new Array(); 
	arrChecksumValue.push(checksumValue);
	$c(&apos;checksum&apos;, arrChecksumValue);

	return checksumValue;

} // end function</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>91db9bd1-ca92-4dcc-bba4-e1ece603fc87</id>
        <name>Remove Child Object From Parent Object Json</name>
        <revision>22</revision>
        <lastModified>
          <time>1678916845037</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**  This function will remove a JSON child object and it&apos;s descendents from a parent object JSON
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeChildObjectFromParentObjectJson.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
		{string} parentObject - place the name of the string to be designated as the parent object in the JSON
		{string} childObject  - place the name of the string to be designated as the child object to be deleted from the JSON
	@param {object} msg - return modified Json object msg excluding specified Json child object
	@history
*/
function removeChildObjectFromParentObjectJson(msg, parentObject, childObject) {
	
	var scriptName= &apos;removeChildObjectFromParentObjectJson&apos;;
	var debug= 0;

	//var strObjJson= JSON.parse(msg);
	var strObjJson= JSON.stringify(msg);
	
	//var objJson= JSON.parse(msg);
	var newParentObjects= new Object();
	var parentObjects= msg;
	var arrParentObjects= new Array();
	var arrTransactionObjects= new Array();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof parentObjects: &apos;+typeof(parentObjects));
	for (var key in parentObjects) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof key: &apos;+typeof(key)+&apos; key: &apos;+key);
		if(key== parentObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof objJson[key]: &apos;+typeof(parentObjects[key])+&apos; parentObjects[key]: &apos;+JSON.stringify(parentObjects[key]));
			
			var newChildObjects= new Object();
			var childObjects= parentObjects[key];
			var arrChildObjects= new Array();
			
			for(var key2 in childObjects) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key2: &apos;+typeof(key2)+&apos; key2: &apos;+key2+&apos; childObject: &apos;+childObject);
				for(var key3 in childObjects[key2]) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key3: &apos;+typeof(key3)+&apos; key3: &apos;+key3+&apos; childObject: &apos;+childObject);
					if(key3== childObject) {
						var transactionObject= new Object();
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; childObject typeof: &apos;+typeof(childObjects[key2][key3])+&apos; childObject: &apos;+JSON.stringify(childObjects[key2][key3]));
						transactionObject.key= key3;
						transactionObject.value= childObjects[key2][key3];
						delete childObjects[key2][key3];
						if(debug&gt;0) logger.info(&apos;DEBUG::&apos;+scriptName+&apos; DELETE childObject: &apos;+key3+&apos; of parentObject: &apos;+JSON.stringify(childObjects[key2]));
						arrTransactionObjects.push(transactionObject);
					} // end if
				} // end for 
				arrChildObjects.push(childObjects[key2]);
			} // end for
			newParentObjects[key]= arrChildObjects;
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add all child keys: &apos;+JSON.stringify(arrChildObjects)+&apos; into ParentObject[&apos;+key+&apos;]: &apos;+newParentObjects[key]);
		} else {
			newParentObjects[key]= parentObjects[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+parentObjects[key]+&apos; string: &apos;+JSON.stringify(parentObjects[key]));
		} // end if
		arrParentObjects.push(newParentObjects);
	} // end for 
	var newMsg= arrParentObjects;
	channelMap.put(&apos;removeChildObjectMsg&apos;,newMsg);
	channelMap.put(&apos;removedChildTransIds&apos;,arrTransactionObjects);
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));
	return newMsg;
	
} </code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>2ff28338-dfb6-445d-a04e-c74b5486a08c</id>
        <name>Remove Object From Json</name>
        <revision>26</revision>
        <lastModified>
          <time>1703964988318</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**  Desc: This function will remove a JSON object and it&apos;s descendents from the msg
	
	fileName: 	removeObjectFromJson.js
	name:		Remove Object From Json	
	Authored:  	Jeffrey Ritz
	Created: 		2023-03-09
	Details:
		@param IN {string} msg - provide parent JSON object (i.e. Inbound connectorMessage.getRawData() - msg)
		@param IN {string} removeObject - provide JSON object to evaluate and remove from parent JSON object (msg)
		OUT (object) newMsg - return JSON object from processing
	@history
	2023-03-15 JER - Modified to include removeObject function parameter to specify specific JSON object by referencing key to be removed
*/
function removeObjectFromJson(msg, removeObject) {
	
	var scriptName= &apos;removeObjectFromJson&apos;;
	var debug= 0;
	//var objJson= JSON.stringify(msg);
	var objJson= JSON.parse(msg);
	var newObjJson= new Object();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof objJson: &apos;+typeof(objJson)+&apos; objJSON: &apos;+JSON.stringify(objJson));
	for (var key in objJson) {
		if(key== removeObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; DELETE key: &apos;+key);
			// delete objJson[key];
		} else {
			newObjJson[key]= objJson[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+objJson[key]+&apos; string: &apos;+JSON.stringify(objJson[key]));
		} // end if 
	} // end for 
	var newMsg= newObjJson;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));

	// return JSON.stringify(newMsg);
	return newMsg;
} 
</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>993a6fd8-454a-4133-ba32-dbcfea71582b</id>
        <name>Update EDITransactionLog</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476123233</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	The purpose of this function is to update the status in Insight.
	Populate the channel map with the following variables functionalGroupControlNumber, status, eventDate

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateStatus () {

	//  Build the llst of paramters to pass to the database
	var paramList = new Packages.java.util.ArrayList();
	paramList.add($(&apos;functionalGroupControlNumber&apos;));
	paramList.add($(&apos;eventDate&apos;));  //dateTime in the acknoledged field in this format (&quot;2017-07-31 14:15:01.577&quot;)
	paramList.add(new java.lang.Integer(parseInt($(&apos;status&apos;), 10)));
	
//	logger.info(&quot;updateStatus &quot;+paramList);

	//  SQL Statement and paramters that will be sent to SQL
	var statement = &quot;EXEC dbo.pr_EDITransactionLog_Update ?, ?, ?&quot;;
	//  Code template used for establishiing connection and passing the sql statement and parameter list  
	var result = executeSharedDBStatementFhirCh(statement, false, paramList);
	return result;
	
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>42cb290e-5fb0-46b8-82db-576ea1e1ba0d</id>
        <name>Update EDITransactionLog from responseStatus in the response transformer </name>
        <revision>1</revision>
        <lastModified>
          <time>1678476123356</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Call this in the response transformer on the destination.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateReponseStatus() {
	var status = 0;
	if (responseStatus == SENT){
		var status = 1;
		channelMap.put(&apos;status&apos;,status);
	}

updateStatus()
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>2223579b-f914-4be7-a575-f1a2a2aa1ae2</id>
        <name>ValidateToString</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476123044</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} mapping - 
	@param {Any} defaultValue - 
	@param {Any} replacement - 
	@return {String} return description
*/
function validateToString(mapping, defaultValue, replacement) {
    if (mapping == null) {
        mapping = &apos;&apos;;
    }
    return validate(mapping, defaultValue, replacement).toString() + &apos;&apos;;
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>8c9a8268-4ef0-43e9-ae5b-bf8895f0b80c</id>
    <name>WebPT-FORMAT</name>
    <revision>4</revision>
    <lastModified>
      <time>1703964939902</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description>Include any functions or codes with 
-date &amp; time formating related
-data type formatting</description>
    <includeNewChannels>true</includeNewChannels>
    <enabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
      <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
      <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
      <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
      <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </enabledChannelIds>
    <disabledChannelIds/>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>920c9ead-70a6-4168-9d95-89261b73ae44</id>
        <name>12digitDateTime</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476123520</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
Take any 12 digit string yyyyMMddHHmm and change to MM/dd/yyyy HH:mm 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm
*/
function yyyyMMddHHmm(string) {
	return DateUtil.convertDate(&quot;yyyyMMddHHmm&quot;, &quot;MM/dd/yyyy HH:mm&quot;, string);
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>fe2689ec-1946-46d5-8dd6-8fbbf106e1e6</id>
        <name>14digitDateTime</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122871</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
    Take 14 digit string yyyyMMddHHmmss and change to MM/dd/yyyy HH:mm:ss 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm:ss
*/
function yyyyMMddHHmmss(string) {
	if (string.length == 14) {
		  return DateUtil.convertDate(&quot;yyyyMMddHHmmss&quot;, &quot;MM/dd/yyyy HH:mm:ss&quot;, string);
	}
	else {
		return &quot;unregcognized string&quot;;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>b9db35e2-d5bd-48a1-8cc6-3475c698d7b4</id>
        <name>currentDT_yyyy-MM-dd HH:mm:ss.SSS</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476123114</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Author: Kirby Knight
	Date Modified:  11/09/2020
	Retund the current date/time down to the millisecond

	@return {String} return description
*/
function currentDtToMilliseconds() {
	return DateUtil.getCurrentDate(&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;);
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>7e747999-4bec-43fc-978d-7049d3543cf0</id>
        <name>fixHL7NodeOrder</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476123155</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/

function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>dfedacf6-773b-413e-b78d-1bf16a92071d</id>
        <name>formatHL7Date</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476121643</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Take any eight digit HL7 message data string (yyyyMMdd) and formats it human-readable format (MM/dd/yyyy)
	such as 20090612 -&gt; 06/12/2009

	@param {String} arg1 - 8 digit HL7 message data string yyyyMMdd
	@return {String} return date format as MM/dd/yyyy
*/
function formatHL7Date(string) {
	return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;MM/dd/yyyy&quot;, string);
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>a8f54921-2cb6-4134-8806-3c4e10a757d9</id>
        <name>getCurrentLocalTime</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122014</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = getCurrentLocalTimestamp();

	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestamp() {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(&quot;EST&quot;)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>6c5f1bd8-ebbf-4c8e-b465-0be8ccaba0d0</id>
        <name>getCurrentLocalTimeToMs</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476123077</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**

	Gets the current local date/time to the milliseconds
	Converts to the timezone that is passed in Examples (America/New_York, America/Chicago, America/Phoenix )

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestampToMs(timeZone) {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timeZone)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>78d74c5b-c881-404a-ad96-4e909e1a19f3</id>
        <name>phoneToE164</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476121982</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Convert Insight phone number to E164 format 5554446666 to +15554446666

	@param {Any} phoneIn - 
	@return {String} return description
*/
function phoneToE164(phoneIn) {
	logger.info(&apos;L1 &apos;+phoneIn);
	if(phoneIn != null ){
	//phoneIn = &apos;+1&apos; + phoneIn.toString(); 
	logger.info(&apos;L2 &apos;+phoneIn);
	return &apos;+1&apos; + phoneIn.toString(); 
	} else{
		return null;
	}
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>6a32d94d-408c-4e10-9799-e45e150b5c1f</id>
    <name>WebPT-MISC</name>
    <revision>4</revision>
    <lastModified>
      <time>1703964939909</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description>miscellaneous javascript</description>
    <includeNewChannels>true</includeNewChannels>
    <enabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
      <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
      <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
      <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
      <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </enabledChannelIds>
    <disabledChannelIds/>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>84b4f1c7-f82d-4140-9fbd-98a95f68ff32</id>
        <name>getChannelState</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122648</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetChannelState(channel_id) {

    var channel_status = &quot;NA&quot;;

    var channel_count = parseInt(Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().size());

    for(var i=0;i&lt;channel_count;i++) {
        if (channel_id == Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getChannelId()) {
            channel_status = Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getState();
        }
    }

    return channel_status;

}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>715435a9-cb15-4e8f-bc5b-4249eaea6e17</id>
        <name>momentjs</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122487</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>COMPILED_CODE</type>
          <code>/**
	Testing MIRTH-3794 using external JavaScript library &quot;moment.js&quot;
*/
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=b():&quot;function&quot;==typeof define&amp;&amp;define.amd?define(b):a.moment=b()}(this,function(){&quot;use strict&quot;;function a(){return Hc.apply(null,arguments)}function b(a){Hc=a}function c(a){return&quot;[object Array]&quot;===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||&quot;[object Date]&quot;===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c&lt;a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&amp;&amp;(a[c]=b[c]);return f(b,&quot;toString&quot;)&amp;&amp;(a.toString=b.toString),f(b,&quot;valueOf&quot;)&amp;&amp;(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ca(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&amp;&amp;(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow&lt;0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&amp;&amp;(a._isValid=a._isValid&amp;&amp;0===b.charsLeftOver&amp;&amp;0===b.unusedTokens.length&amp;&amp;void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if(&quot;undefined&quot;!=typeof b._isAMomentObject&amp;&amp;(a._isAMomentObject=b._isAMomentObject),&quot;undefined&quot;!=typeof b._i&amp;&amp;(a._i=b._i),&quot;undefined&quot;!=typeof b._f&amp;&amp;(a._f=b._f),&quot;undefined&quot;!=typeof b._l&amp;&amp;(a._l=b._l),&quot;undefined&quot;!=typeof b._strict&amp;&amp;(a._strict=b._strict),&quot;undefined&quot;!=typeof b._tzm&amp;&amp;(a._tzm=b._tzm),&quot;undefined&quot;!=typeof b._isUTC&amp;&amp;(a._isUTC=b._isUTC),&quot;undefined&quot;!=typeof b._offset&amp;&amp;(a._offset=b._offset),&quot;undefined&quot;!=typeof b._pf&amp;&amp;(a._pf=j(b)),&quot;undefined&quot;!=typeof b._locale&amp;&amp;(a._locale=b._locale),Jc.length&gt;0)for(c in Jc)d=Jc[c],e=b[d],&quot;undefined&quot;!=typeof e&amp;&amp;(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),Kc===!1&amp;&amp;(Kc=!0,a.updateOffset(this),Kc=!1)}function o(a){return a instanceof n||null!=a&amp;&amp;null!=a._isAMomentObject}function p(a){return 0&gt;a?Math.ceil(a):Math.floor(a)}function q(a){var b=+a,c=0;return 0!==b&amp;&amp;isFinite(b)&amp;&amp;(c=p(b)),c}function r(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e&gt;d;d++)(c&amp;&amp;a[d]!==b[d]||!c&amp;&amp;q(a[d])!==q(b[d]))&amp;&amp;g++;return g+f}function s(){}function t(a){return a?a.toLowerCase().replace(&quot;_&quot;,&quot;-&quot;):a}function u(a){for(var b,c,d,e,f=0;f&lt;a.length;){for(e=t(a[f]).split(&quot;-&quot;),b=e.length,c=t(a[f+1]),c=c?c.split(&quot;-&quot;):null;b&gt;0;){if(d=v(e.slice(0,b).join(&quot;-&quot;)))return d;if(c&amp;&amp;c.length&gt;=b&amp;&amp;r(e,c,!0)&gt;=b-1)break;b--}f++}return null}function v(a){var b=null;if(!Lc[a]&amp;&amp;&quot;undefined&quot;!=typeof module&amp;&amp;module&amp;&amp;module.exports)try{b=Ic._abbr,require(&quot;./locale/&quot;+a),w(b)}catch(c){}return Lc[a]}function w(a,b){var c;return a&amp;&amp;(c=&quot;undefined&quot;==typeof b?y(a):x(a,b),c&amp;&amp;(Ic=c)),Ic._abbr}function x(a,b){return null!==b?(b.abbr=a,Lc[a]=Lc[a]||new s,Lc[a].set(b),w(a),Lc[a]):(delete Lc[a],null)}function y(a){var b;if(a&amp;&amp;a._locale&amp;&amp;a._locale._abbr&amp;&amp;(a=a._locale._abbr),!a)return Ic;if(!c(a)){if(b=v(a))return b;a=[a]}return u(a)}function z(a,b){var c=a.toLowerCase();Mc[c]=Mc[c+&quot;s&quot;]=Mc[b]=a}function A(a){return&quot;string&quot;==typeof a?Mc[a]||Mc[a.toLowerCase()]:void 0}function B(a){var b,c,d={};for(c in a)f(a,c)&amp;&amp;(b=A(c),b&amp;&amp;(d[b]=a[c]));return d}function C(b,c){return function(d){return null!=d?(E(this,b,d),a.updateOffset(this,c),this):D(this,b)}}function D(a,b){return a._d[&quot;get&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b]()}function E(a,b,c){return a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b](c)}function F(a,b){var c;if(&quot;object&quot;==typeof a)for(c in a)this.set(c,a[c]);else if(a=A(a),&quot;function&quot;==typeof this[a])return this[a](b);return this}function G(a,b,c){var d=&quot;&quot;+Math.abs(a),e=b-d.length,f=a&gt;=0;return(f?c?&quot;+&quot;:&quot;&quot;:&quot;-&quot;)+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function H(a,b,c,d){var e=d;&quot;string&quot;==typeof d&amp;&amp;(e=function(){return this[d]()}),a&amp;&amp;(Qc[a]=e),b&amp;&amp;(Qc[b[0]]=function(){return G(e.apply(this,arguments),b[1],b[2])}),c&amp;&amp;(Qc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function I(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,&quot;&quot;):a.replace(/\\/g,&quot;&quot;)}function J(a){var b,c,d=a.match(Nc);for(b=0,c=d.length;c&gt;b;b++)Qc[d[b]]?d[b]=Qc[d[b]]:d[b]=I(d[b]);return function(e){var f=&quot;&quot;;for(b=0;c&gt;b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function K(a,b){return a.isValid()?(b=L(b,a.localeData()),Pc[b]=Pc[b]||J(b),Pc[b](a)):a.localeData().invalidDate()}function L(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Oc.lastIndex=0;d&gt;=0&amp;&amp;Oc.test(a);)a=a.replace(Oc,c),Oc.lastIndex=0,d-=1;return a}function M(a){return&quot;function&quot;==typeof a&amp;&amp;&quot;[object Function]&quot;===Object.prototype.toString.call(a)}function N(a,b,c){dd[a]=M(b)?b:function(a){return a&amp;&amp;c?c:b}}function O(a,b){return f(dd,a)?dd[a](b._strict,b._locale):new RegExp(P(a))}function P(a){return a.replace(&quot;\\&quot;,&quot;&quot;).replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,&quot;\\$&amp;&quot;)}function Q(a,b){var c,d=b;for(&quot;string&quot;==typeof a&amp;&amp;(a=[a]),&quot;number&quot;==typeof b&amp;&amp;(d=function(a,c){c[b]=q(a)}),c=0;c&lt;a.length;c++)ed[a[c]]=d}function R(a,b){Q(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function S(a,b,c){null!=b&amp;&amp;f(ed,a)&amp;&amp;ed[a](b,c._a,c,a)}function T(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function U(a){return this._months[a.month()]}function V(a){return this._monthsShort[a.month()]}function W(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12&gt;d;d++){if(e=h([2e3,d]),c&amp;&amp;!this._longMonthsParse[d]&amp;&amp;(this._longMonthsParse[d]=new RegExp(&quot;^&quot;+this.months(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;),this._shortMonthsParse[d]=new RegExp(&quot;^&quot;+this.monthsShort(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;)),c||this._monthsParse[d]||(f=&quot;^&quot;+this.months(e,&quot;&quot;)+&quot;|^&quot;+this.monthsShort(e,&quot;&quot;),this._monthsParse[d]=new RegExp(f.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),c&amp;&amp;&quot;MMMM&quot;===b&amp;&amp;this._longMonthsParse[d].test(a))return d;if(c&amp;&amp;&quot;MMM&quot;===b&amp;&amp;this._shortMonthsParse[d].test(a))return d;if(!c&amp;&amp;this._monthsParse[d].test(a))return d}}function X(a,b){var c;return&quot;string&quot;==typeof b&amp;&amp;(b=a.localeData().monthsParse(b),&quot;number&quot;!=typeof b)?a:(c=Math.min(a.date(),T(a.year(),b)),a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+&quot;Month&quot;](b,c),a)}function Y(b){return null!=b?(X(this,b),a.updateOffset(this,!0),this):D(this,&quot;Month&quot;)}function Z(){return T(this.year(),this.month())}function $(a){var b,c=a._a;return c&amp;&amp;-2===j(a).overflow&amp;&amp;(b=c[gd]&lt;0||c[gd]&gt;11?gd:c[hd]&lt;1||c[hd]&gt;T(c[fd],c[gd])?hd:c[id]&lt;0||c[id]&gt;24||24===c[id]&amp;&amp;(0!==c[jd]||0!==c[kd]||0!==c[ld])?id:c[jd]&lt;0||c[jd]&gt;59?jd:c[kd]&lt;0||c[kd]&gt;59?kd:c[ld]&lt;0||c[ld]&gt;999?ld:-1,j(a)._overflowDayOfYear&amp;&amp;(fd&gt;b||b&gt;hd)&amp;&amp;(b=hd),j(a).overflow=b),a}function _(b){a.suppressDeprecationWarnings===!1&amp;&amp;&quot;undefined&quot;!=typeof console&amp;&amp;console.warn&amp;&amp;console.warn(&quot;Deprecation warning: &quot;+b)}function aa(a,b){var c=!0;return g(function(){return c&amp;&amp;(_(a+&quot;\n&quot;+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function ba(a,b){od[a]||(_(b),od[a]=!0)}function ca(a){var b,c,d=a._i,e=pd.exec(d);if(e){for(j(a).iso=!0,b=0,c=qd.length;c&gt;b;b++)if(qd[b][1].exec(d)){a._f=qd[b][0];break}for(b=0,c=rd.length;c&gt;b;b++)if(rd[b][1].exec(d)){a._f+=(e[6]||&quot; &quot;)+rd[b][0];break}d.match(ad)&amp;&amp;(a._f+=&quot;Z&quot;),va(a)}else a._isValid=!1}function da(b){var c=sd.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ca(b),void(b._isValid===!1&amp;&amp;(delete b._isValid,a.createFromInputFallback(b))))}function ea(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970&gt;a&amp;&amp;h.setFullYear(a),h}function fa(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970&gt;a&amp;&amp;b.setUTCFullYear(a),b}function ga(a){return ha(a)?366:365}function ha(a){return a%4===0&amp;&amp;a%100!==0||a%400===0}function ia(){return ha(this.year())}function ja(a,b,c){var d,e=c-b,f=c-a.day();return f&gt;e&amp;&amp;(f-=7),e-7&gt;f&amp;&amp;(f+=7),d=Da(a).add(f,&quot;d&quot;),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ka(a){return ja(a,this._week.dow,this._week.doy).week}function la(){return this._week.dow}function ma(){return this._week.doy}function na(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function oa(a){var b=ja(this,1,4).week;return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function pa(a,b,c,d,e){var f,g=6+e-d,h=fa(a,0,1+g),i=h.getUTCDay();return e&gt;i&amp;&amp;(i+=7),c=null!=c?1*c:e,f=1+g+7*(b-1)-i+c,{year:f&gt;0?a:a-1,dayOfYear:f&gt;0?f:ga(a-1)+f}}function qa(a){var b=Math.round((this.clone().startOf(&quot;day&quot;)-this.clone().startOf(&quot;year&quot;))/864e5)+1;return null==a?b:this.add(a-b,&quot;d&quot;)}function ra(a,b,c){return null!=a?a:null!=b?b:c}function sa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ta(a){var b,c,d,e,f=[];if(!a._d){for(d=sa(a),a._w&amp;&amp;null==a._a[hd]&amp;&amp;null==a._a[gd]&amp;&amp;ua(a),a._dayOfYear&amp;&amp;(e=ra(a._a[fd],d[fd]),a._dayOfYear&gt;ga(e)&amp;&amp;(j(a)._overflowDayOfYear=!0),c=fa(e,0,a._dayOfYear),a._a[gd]=c.getUTCMonth(),a._a[hd]=c.getUTCDate()),b=0;3&gt;b&amp;&amp;null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7&gt;b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[id]&amp;&amp;0===a._a[jd]&amp;&amp;0===a._a[kd]&amp;&amp;0===a._a[ld]&amp;&amp;(a._nextDay=!0,a._a[id]=0),a._d=(a._useUTC?fa:ea).apply(null,f),null!=a._tzm&amp;&amp;a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&amp;&amp;(a._a[id]=24)}}function ua(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=ra(b.GG,a._a[fd],ja(Da(),1,4).year),d=ra(b.W,1),e=ra(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=ra(b.gg,a._a[fd],ja(Da(),f,g).year),d=ra(b.w,1),null!=b.d?(e=b.d,f&gt;e&amp;&amp;++d):e=null!=b.e?b.e+f:f),h=pa(c,d,e,g,f),a._a[fd]=h.year,a._dayOfYear=h.dayOfYear}function va(b){if(b._f===a.ISO_8601)return void ca(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=&quot;&quot;+b._i,i=h.length,k=0;for(e=L(b._f,b._locale).match(Nc)||[],c=0;c&lt;e.length;c++)f=e[c],d=(h.match(O(f,b))||[])[0],d&amp;&amp;(g=h.substr(0,h.indexOf(d)),g.length&gt;0&amp;&amp;j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Qc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),S(f,d,b)):b._strict&amp;&amp;!d&amp;&amp;j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length&gt;0&amp;&amp;j(b).unusedInput.push(h),j(b).bigHour===!0&amp;&amp;b._a[id]&lt;=12&amp;&amp;b._a[id]&gt;0&amp;&amp;(j(b).bigHour=void 0),b._a[id]=wa(b._locale,b._a[id],b._meridiem),ta(b),$(b)}function wa(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&amp;&amp;12&gt;b&amp;&amp;(b+=12),d||12!==b||(b=0),b):b}function xa(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e&lt;a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&amp;&amp;(b._useUTC=a._useUTC),b._f=a._f[e],va(b),k(b)&amp;&amp;(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d&gt;f)&amp;&amp;(d=f,c=b));g(a,c||b)}function ya(a){if(!a._d){var b=B(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ta(a)}}function za(a){var b=new n($(Aa(a)));return b._nextDay&amp;&amp;(b.add(1,&quot;d&quot;),b._nextDay=void 0),b}function Aa(a){var b=a._i,e=a._f;return a._locale=a._locale||y(a._l),null===b||void 0===e&amp;&amp;&quot;&quot;===b?l({nullInput:!0}):(&quot;string&quot;==typeof b&amp;&amp;(a._i=b=a._locale.preparse(b)),o(b)?new n($(b)):(c(e)?xa(a):e?va(a):d(b)?a._d=b:Ba(a),a))}function Ba(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):&quot;string&quot;==typeof f?da(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ta(b)):&quot;object&quot;==typeof f?ya(b):&quot;number&quot;==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ca(a,b,c,d,e){var f={};return&quot;boolean&quot;==typeof c&amp;&amp;(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,za(f)}function Da(a,b,c,d){return Ca(a,b,c,d,!1)}function Ea(a,b){var d,e;if(1===b.length&amp;&amp;c(b[0])&amp;&amp;(b=b[0]),!b.length)return Da();for(d=b[0],e=1;e&lt;b.length;++e)(!b[e].isValid()||b[e][a](d))&amp;&amp;(d=b[e]);return d}function Fa(){var a=[].slice.call(arguments,0);return Ea(&quot;isBefore&quot;,a)}function Ga(){var a=[].slice.call(arguments,0);return Ea(&quot;isAfter&quot;,a)}function Ha(a){var b=B(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=y(),this._bubble()}function Ia(a){return a instanceof Ha}function Ja(a,b){H(a,0,0,function(){var a=this.utcOffset(),c=&quot;+&quot;;return 0&gt;a&amp;&amp;(a=-a,c=&quot;-&quot;),c+G(~~(a/60),2)+b+G(~~a%60,2)})}function Ka(a){var b=(a||&quot;&quot;).match(ad)||[],c=b[b.length-1]||[],d=(c+&quot;&quot;).match(xd)||[&quot;-&quot;,0,0],e=+(60*d[1])+q(d[2]);return&quot;+&quot;===d[0]?e:-e}function La(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Da(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Da(b).local()}function Ma(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Na(b,c){var d,e=this._offset||0;return null!=b?(&quot;string&quot;==typeof b&amp;&amp;(b=Ka(b)),Math.abs(b)&lt;16&amp;&amp;(b=60*b),!this._isUTC&amp;&amp;c&amp;&amp;(d=Ma(this)),this._offset=b,this._isUTC=!0,null!=d&amp;&amp;this.add(d,&quot;m&quot;),e!==b&amp;&amp;(!c||this._changeInProgress?bb(this,Ya(b-e,&quot;m&quot;),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ma(this)}function Oa(a,b){return null!=a?(&quot;string&quot;!=typeof a&amp;&amp;(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Pa(a){return this.utcOffset(0,a)}function Qa(a){return this._isUTC&amp;&amp;(this.utcOffset(0,a),this._isUTC=!1,a&amp;&amp;this.subtract(Ma(this),&quot;m&quot;)),this}function Ra(){return this._tzm?this.utcOffset(this._tzm):&quot;string&quot;==typeof this._i&amp;&amp;this.utcOffset(Ka(this._i)),this}function Sa(a){return a=a?Da(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Ta(){return this.utcOffset()&gt;this.clone().month(0).utcOffset()||this.utcOffset()&gt;this.clone().month(5).utcOffset()}function Ua(){if(&quot;undefined&quot;!=typeof this._isDSTShifted)return this._isDSTShifted;var a={};if(m(a,this),a=Aa(a),a._a){var b=a._isUTC?h(a._a):Da(a._a);this._isDSTShifted=this.isValid()&amp;&amp;r(a._a,b.toArray())&gt;0}else this._isDSTShifted=!1;return this._isDSTShifted}function Va(){return!this._isUTC}function Wa(){return this._isUTC}function Xa(){return this._isUTC&amp;&amp;0===this._offset}function Ya(a,b){var c,d,e,g=a,h=null;return Ia(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:&quot;number&quot;==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=yd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:0,d:q(h[hd])*c,h:q(h[id])*c,m:q(h[jd])*c,s:q(h[kd])*c,ms:q(h[ld])*c}):(h=zd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:Za(h[2],c),M:Za(h[3],c),d:Za(h[4],c),h:Za(h[5],c),m:Za(h[6],c),s:Za(h[7],c),w:Za(h[8],c)}):null==g?g={}:&quot;object&quot;==typeof g&amp;&amp;(&quot;from&quot;in g||&quot;to&quot;in g)&amp;&amp;(e=_a(Da(g.from),Da(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ha(g),Ia(a)&amp;&amp;f(a,&quot;_locale&quot;)&amp;&amp;(d._locale=a._locale),d}function Za(a,b){var c=a&amp;&amp;parseFloat(a.replace(&quot;,&quot;,&quot;.&quot;));return(isNaN(c)?0:c)*b}function $a(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,&quot;M&quot;).isAfter(b)&amp;&amp;--c.months,c.milliseconds=+b-+a.clone().add(c.months,&quot;M&quot;),c}function _a(a,b){var c;return b=La(b,a),a.isBefore(b)?c=$a(a,b):(c=$a(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function ab(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(ba(b,&quot;moment().&quot;+b+&quot;(period, number) is deprecated. Please use moment().&quot;+b+&quot;(number, period).&quot;),f=c,c=d,d=f),c=&quot;string&quot;==typeof c?+c:c,e=Ya(c,d),bb(this,e,a),this}}function bb(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&amp;&amp;b._d.setTime(+b._d+f*d),g&amp;&amp;E(b,&quot;Date&quot;,D(b,&quot;Date&quot;)+g*d),h&amp;&amp;X(b,D(b,&quot;Month&quot;)+h*d),e&amp;&amp;a.updateOffset(b,g||h)}function cb(a,b){var c=a||Da(),d=La(c,this).startOf(&quot;day&quot;),e=this.diff(d,&quot;days&quot;,!0),f=-6&gt;e?&quot;sameElse&quot;:-1&gt;e?&quot;lastWeek&quot;:0&gt;e?&quot;lastDay&quot;:1&gt;e?&quot;sameDay&quot;:2&gt;e?&quot;nextDay&quot;:7&gt;e?&quot;nextWeek&quot;:&quot;sameElse&quot;;return this.format(b&amp;&amp;b[f]||this.localeData().calendar(f,this,Da(c)))}function db(){return new n(this)}function eb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this&gt;+a):(c=o(a)?+a:+Da(a),c&lt;+this.clone().startOf(b))}function fb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+a&gt;+this):(c=o(a)?+a:+Da(a),+this.clone().endOf(b)&lt;c)}function gb(a,b,c){return this.isAfter(a,c)&amp;&amp;this.isBefore(b,c)}function hb(a,b){var c;return b=A(b||&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this===+a):(c=+Da(a),+this.clone().startOf(b)&lt;=c&amp;&amp;c&lt;=+this.clone().endOf(b))}function ib(a,b,c){var d,e,f=La(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=A(b),&quot;year&quot;===b||&quot;month&quot;===b||&quot;quarter&quot;===b?(e=jb(this,f),&quot;quarter&quot;===b?e/=3:&quot;year&quot;===b&amp;&amp;(e/=12)):(d=this-f,e=&quot;second&quot;===b?d/1e3:&quot;minute&quot;===b?d/6e4:&quot;hour&quot;===b?d/36e5:&quot;day&quot;===b?(d-g)/864e5:&quot;week&quot;===b?(d-g)/6048e5:d),c?e:p(e)}function jb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,&quot;months&quot;);return 0&gt;b-f?(c=a.clone().add(e-1,&quot;months&quot;),d=(b-f)/(f-c)):(c=a.clone().add(e+1,&quot;months&quot;),d=(b-f)/(c-f)),-(e+d)}function kb(){return this.clone().locale(&quot;en&quot;).format(&quot;ddd MMM DD YYYY HH:mm:ss [GMT]ZZ&quot;)}function lb(){var a=this.clone().utc();return 0&lt;a.year()&amp;&amp;a.year()&lt;=9999?&quot;function&quot;==typeof Date.prototype.toISOString?this.toDate().toISOString():K(a,&quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;):K(a,&quot;YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;)}function mb(b){var c=K(this,b||a.defaultFormat);return this.localeData().postformat(c)}function nb(a,b){return this.isValid()?Ya({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.from(Da(),a)}function pb(a,b){return this.isValid()?Ya({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function qb(a){return this.to(Da(),a)}function rb(a){var b;return void 0===a?this._locale._abbr:(b=y(a),null!=b&amp;&amp;(this._locale=b),this)}function sb(){return this._locale}function tb(a){switch(a=A(a)){case&quot;year&quot;:this.month(0);case&quot;quarter&quot;:case&quot;month&quot;:this.date(1);case&quot;week&quot;:case&quot;isoWeek&quot;:case&quot;day&quot;:this.hours(0);case&quot;hour&quot;:this.minutes(0);case&quot;minute&quot;:this.seconds(0);case&quot;second&quot;:this.milliseconds(0)}return&quot;week&quot;===a&amp;&amp;this.weekday(0),&quot;isoWeek&quot;===a&amp;&amp;this.isoWeekday(1),&quot;quarter&quot;===a&amp;&amp;this.month(3*Math.floor(this.month()/3)),this}function ub(a){return a=A(a),void 0===a||&quot;millisecond&quot;===a?this:this.startOf(a).add(1,&quot;isoWeek&quot;===a?&quot;week&quot;:a).subtract(1,&quot;ms&quot;)}function vb(){return+this._d-6e4*(this._offset||0)}function wb(){return Math.floor(+this/1e3)}function xb(){return this._offset?new Date(+this):this._d}function yb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function zb(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Ab(){return k(this)}function Bb(){return g({},j(this))}function Cb(){return j(this).overflow}function Db(a,b){H(0,[a,a.length],0,b)}function Eb(a,b,c){return ja(Da([a,11,31+b-c]),b,c).week}function Fb(a){var b=ja(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Gb(a){var b=ja(this,1,4).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Hb(){return Eb(this.year(),1,4)}function Ib(){var a=this.localeData()._week;return Eb(this.year(),a.dow,a.doy)}function Jb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Kb(a,b){return&quot;string&quot;!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),&quot;number&quot;==typeof a?a:null):parseInt(a,10)}function Lb(a){return this._weekdays[a.day()]}function Mb(a){return this._weekdaysShort[a.day()]}function Nb(a){return this._weekdaysMin[a.day()]}function Ob(a){var b,c,d;for(this._weekdaysParse=this._weekdaysParse||[],b=0;7&gt;b;b++)if(this._weekdaysParse[b]||(c=Da([2e3,1]).day(b),d=&quot;^&quot;+this.weekdays(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysShort(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysMin(c,&quot;&quot;),this._weekdaysParse[b]=new RegExp(d.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),this._weekdaysParse[b].test(a))return b}function Pb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Kb(a,this.localeData()),this.add(a-b,&quot;d&quot;)):b}function Qb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,&quot;d&quot;)}function Rb(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Sb(a,b){H(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Tb(a,b){return b._meridiemParse}function Ub(a){return&quot;p&quot;===(a+&quot;&quot;).toLowerCase().charAt(0)}function Vb(a,b,c){return a&gt;11?c?&quot;pm&quot;:&quot;PM&quot;:c?&quot;am&quot;:&quot;AM&quot;}function Wb(a,b){b[ld]=q(1e3*(&quot;0.&quot;+a))}function Xb(){return this._isUTC?&quot;UTC&quot;:&quot;&quot;}function Yb(){return this._isUTC?&quot;Coordinated Universal Time&quot;:&quot;&quot;}function Zb(a){return Da(1e3*a)}function $b(){return Da.apply(null,arguments).parseZone()}function _b(a,b,c){var d=this._calendar[a];return&quot;function&quot;==typeof d?d.call(b,c):d}function ac(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function bc(){return this._invalidDate}function cc(a){return this._ordinal.replace(&quot;%d&quot;,a)}function dc(a){return a}function ec(a,b,c,d){var e=this._relativeTime[c];return&quot;function&quot;==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function fc(a,b){var c=this._relativeTime[a&gt;0?&quot;future&quot;:&quot;past&quot;];return&quot;function&quot;==typeof c?c(b):c.replace(/%s/i,b)}function gc(a){var b,c;for(c in a)b=a[c],&quot;function&quot;==typeof b?this[c]=b:this[&quot;_&quot;+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+&quot;|&quot;+/\d{1,2}/.source)}function hc(a,b,c,d){var e=y(),f=h().set(d,b);return e[c](f,a)}function ic(a,b,c,d,e){if(&quot;number&quot;==typeof a&amp;&amp;(b=a,a=void 0),a=a||&quot;&quot;,null!=b)return hc(a,b,c,e);var f,g=[];for(f=0;d&gt;f;f++)g[f]=hc(a,f,c,e);return g}function jc(a,b){return ic(a,b,&quot;months&quot;,12,&quot;month&quot;)}function kc(a,b){return ic(a,b,&quot;monthsShort&quot;,12,&quot;month&quot;)}function lc(a,b){return ic(a,b,&quot;weekdays&quot;,7,&quot;day&quot;)}function mc(a,b){return ic(a,b,&quot;weekdaysShort&quot;,7,&quot;day&quot;)}function nc(a,b){return ic(a,b,&quot;weekdaysMin&quot;,7,&quot;day&quot;)}function oc(){var a=this._data;return this._milliseconds=Wd(this._milliseconds),this._days=Wd(this._days),this._months=Wd(this._months),a.milliseconds=Wd(a.milliseconds),a.seconds=Wd(a.seconds),a.minutes=Wd(a.minutes),a.hours=Wd(a.hours),a.months=Wd(a.months),a.years=Wd(a.years),this}function pc(a,b,c,d){var e=Ya(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function qc(a,b){return pc(this,a,b,1)}function rc(a,b){return pc(this,a,b,-1)}function sc(a){return 0&gt;a?Math.floor(a):Math.ceil(a)}function tc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f&gt;=0&amp;&amp;g&gt;=0&amp;&amp;h&gt;=0||0&gt;=f&amp;&amp;0&gt;=g&amp;&amp;0&gt;=h||(f+=864e5*sc(vc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=p(f/1e3),i.seconds=a%60,b=p(a/60),i.minutes=b%60,c=p(b/60),i.hours=c%24,g+=p(c/24),e=p(uc(g)),h+=e,g-=sc(vc(e)),d=p(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function uc(a){return 4800*a/146097}function vc(a){return 146097*a/4800}function wc(a){var b,c,d=this._milliseconds;if(a=A(a),&quot;month&quot;===a||&quot;year&quot;===a)return b=this._days+d/864e5,c=this._months+uc(b),&quot;month&quot;===a?c:c/12;switch(b=this._days+Math.round(vc(this._months)),a){case&quot;week&quot;:return b/7+d/6048e5;case&quot;day&quot;:return b+d/864e5;case&quot;hour&quot;:return 24*b+d/36e5;case&quot;minute&quot;:return 1440*b+d/6e4;case&quot;second&quot;:return 86400*b+d/1e3;case&quot;millisecond&quot;:return Math.floor(864e5*b)+d;default:throw new Error(&quot;Unknown unit &quot;+a)}}function xc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*q(this._months/12)}function yc(a){return function(){return this.as(a)}}function zc(a){return a=A(a),this[a+&quot;s&quot;]()}function Ac(a){return function(){return this._data[a]}}function Bc(){return p(this.days()/7)}function Cc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Dc(a,b,c){var d=Ya(a).abs(),e=ke(d.as(&quot;s&quot;)),f=ke(d.as(&quot;m&quot;)),g=ke(d.as(&quot;h&quot;)),h=ke(d.as(&quot;d&quot;)),i=ke(d.as(&quot;M&quot;)),j=ke(d.as(&quot;y&quot;)),k=e&lt;le.s&amp;&amp;[&quot;s&quot;,e]||1===f&amp;&amp;[&quot;m&quot;]||f&lt;le.m&amp;&amp;[&quot;mm&quot;,f]||1===g&amp;&amp;[&quot;h&quot;]||g&lt;le.h&amp;&amp;[&quot;hh&quot;,g]||1===h&amp;&amp;[&quot;d&quot;]||h&lt;le.d&amp;&amp;[&quot;dd&quot;,h]||1===i&amp;&amp;[&quot;M&quot;]||i&lt;le.M&amp;&amp;[&quot;MM&quot;,i]||1===j&amp;&amp;[&quot;y&quot;]||[&quot;yy&quot;,j];return k[2]=b,k[3]=+a&gt;0,k[4]=c,Cc.apply(null,k)}function Ec(a,b){return void 0===le[a]?!1:void 0===b?le[a]:(le[a]=b,!0)}function Fc(a){var b=this.localeData(),c=Dc(this,!a,b);return a&amp;&amp;(c=b.pastFuture(+this,c)),b.postformat(c)}function Gc(){var a,b,c,d=me(this._milliseconds)/1e3,e=me(this._days),f=me(this._months);a=p(d/60),b=p(a/60),d%=60,a%=60,c=p(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0&gt;m?&quot;-&quot;:&quot;&quot;)+&quot;P&quot;+(g?g+&quot;Y&quot;:&quot;&quot;)+(h?h+&quot;M&quot;:&quot;&quot;)+(i?i+&quot;D&quot;:&quot;&quot;)+(j||k||l?&quot;T&quot;:&quot;&quot;)+(j?j+&quot;H&quot;:&quot;&quot;)+(k?k+&quot;M&quot;:&quot;&quot;)+(l?l+&quot;S&quot;:&quot;&quot;):&quot;P0D&quot;}var Hc,Ic,Jc=a.momentProperties=[],Kc=!1,Lc={},Mc={},Nc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Pc={},Qc={},Rc=/\d/,Sc=/\d\d/,Tc=/\d{3}/,Uc=/\d{4}/,Vc=/[+-]?\d{6}/,Wc=/\d\d?/,Xc=/\d{1,3}/,Yc=/\d{1,4}/,Zc=/[+-]?\d{1,6}/,$c=/\d+/,_c=/[+-]?\d+/,ad=/Z|[+-]\d\d:?\d\d/gi,bd=/[+-]?\d+(\.\d{1,3})?/,cd=/[0-9]*[&apos;a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,dd={},ed={},fd=0,gd=1,hd=2,id=3,jd=4,kd=5,ld=6;H(&quot;M&quot;,[&quot;MM&quot;,2],&quot;Mo&quot;,function(){return this.month()+1}),H(&quot;MMM&quot;,0,0,function(a){return this.localeData().monthsShort(this,a)}),H(&quot;MMMM&quot;,0,0,function(a){return this.localeData().months(this,a)}),z(&quot;month&quot;,&quot;M&quot;),N(&quot;M&quot;,Wc),N(&quot;MM&quot;,Wc,Sc),N(&quot;MMM&quot;,cd),N(&quot;MMMM&quot;,cd),Q([&quot;M&quot;,&quot;MM&quot;],function(a,b){b[gd]=q(a)-1}),Q([&quot;MMM&quot;,&quot;MMMM&quot;],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[gd]=e:j(c).invalidMonth=a});var md=&quot;January_February_March_April_May_June_July_August_September_October_November_December&quot;.split(&quot;_&quot;),nd=&quot;Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec&quot;.split(&quot;_&quot;),od={};a.suppressDeprecationWarnings=!1;var pd=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,qd=[[&quot;YYYYYY-MM-DD&quot;,/[+-]\d{6}-\d{2}-\d{2}/],[&quot;YYYY-MM-DD&quot;,/\d{4}-\d{2}-\d{2}/],[&quot;GGGG-[W]WW-E&quot;,/\d{4}-W\d{2}-\d/],[&quot;GGGG-[W]WW&quot;,/\d{4}-W\d{2}/],[&quot;YYYY-DDD&quot;,/\d{4}-\d{3}/]],rd=[[&quot;HH:mm:ss.SSSS&quot;,/(T| )\d\d:\d\d:\d\d\.\d+/],[&quot;HH:mm:ss&quot;,/(T| )\d\d:\d\d:\d\d/],[&quot;HH:mm&quot;,/(T| )\d\d:\d\d/],[&quot;HH&quot;,/(T| )\d\d/]],sd=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=aa(&quot;moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.&quot;,function(a){a._d=new Date(a._i+(a._useUTC?&quot; UTC&quot;:&quot;&quot;))}),H(0,[&quot;YY&quot;,2],0,function(){return this.year()%100}),H(0,[&quot;YYYY&quot;,4],0,&quot;year&quot;),H(0,[&quot;YYYYY&quot;,5],0,&quot;year&quot;),H(0,[&quot;YYYYYY&quot;,6,!0],0,&quot;year&quot;),z(&quot;year&quot;,&quot;y&quot;),N(&quot;Y&quot;,_c),N(&quot;YY&quot;,Wc,Sc),N(&quot;YYYY&quot;,Yc,Uc),N(&quot;YYYYY&quot;,Zc,Vc),N(&quot;YYYYYY&quot;,Zc,Vc),Q([&quot;YYYYY&quot;,&quot;YYYYYY&quot;],fd),Q(&quot;YYYY&quot;,function(b,c){c[fd]=2===b.length?a.parseTwoDigitYear(b):q(b)}),Q(&quot;YY&quot;,function(b,c){c[fd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return q(a)+(q(a)&gt;68?1900:2e3)};var td=C(&quot;FullYear&quot;,!1);H(&quot;w&quot;,[&quot;ww&quot;,2],&quot;wo&quot;,&quot;week&quot;),H(&quot;W&quot;,[&quot;WW&quot;,2],&quot;Wo&quot;,&quot;isoWeek&quot;),z(&quot;week&quot;,&quot;w&quot;),z(&quot;isoWeek&quot;,&quot;W&quot;),N(&quot;w&quot;,Wc),N(&quot;ww&quot;,Wc,Sc),N(&quot;W&quot;,Wc),N(&quot;WW&quot;,Wc,Sc),R([&quot;w&quot;,&quot;ww&quot;,&quot;W&quot;,&quot;WW&quot;],function(a,b,c,d){b[d.substr(0,1)]=q(a)});var ud={dow:0,doy:6};H(&quot;DDD&quot;,[&quot;DDDD&quot;,3],&quot;DDDo&quot;,&quot;dayOfYear&quot;),z(&quot;dayOfYear&quot;,&quot;DDD&quot;),N(&quot;DDD&quot;,Xc),N(&quot;DDDD&quot;,Tc),Q([&quot;DDD&quot;,&quot;DDDD&quot;],function(a,b,c){c._dayOfYear=q(a)}),a.ISO_8601=function(){};var vd=aa(&quot;moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return this&gt;a?this:a}),wd=aa(&quot;moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return a&gt;this?this:a});Ja(&quot;Z&quot;,&quot;:&quot;),Ja(&quot;ZZ&quot;,&quot;&quot;),N(&quot;Z&quot;,ad),N(&quot;ZZ&quot;,ad),Q([&quot;Z&quot;,&quot;ZZ&quot;],function(a,b,c){c._useUTC=!0,c._tzm=Ka(a)});var xd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var yd=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,zd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Ya.fn=Ha.prototype;var Ad=ab(1,&quot;add&quot;),Bd=ab(-1,&quot;subtract&quot;);a.defaultFormat=&quot;YYYY-MM-DDTHH:mm:ssZ&quot;;var Cd=aa(&quot;moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.&quot;,function(a){return void 0===a?this.localeData():this.locale(a)});H(0,[&quot;gg&quot;,2],0,function(){return this.weekYear()%100}),H(0,[&quot;GG&quot;,2],0,function(){return this.isoWeekYear()%100}),Db(&quot;gggg&quot;,&quot;weekYear&quot;),Db(&quot;ggggg&quot;,&quot;weekYear&quot;),Db(&quot;GGGG&quot;,&quot;isoWeekYear&quot;),Db(&quot;GGGGG&quot;,&quot;isoWeekYear&quot;),z(&quot;weekYear&quot;,&quot;gg&quot;),z(&quot;isoWeekYear&quot;,&quot;GG&quot;),N(&quot;G&quot;,_c),N(&quot;g&quot;,_c),N(&quot;GG&quot;,Wc,Sc),N(&quot;gg&quot;,Wc,Sc),N(&quot;GGGG&quot;,Yc,Uc),N(&quot;gggg&quot;,Yc,Uc),N(&quot;GGGGG&quot;,Zc,Vc),N(&quot;ggggg&quot;,Zc,Vc),R([&quot;gggg&quot;,&quot;ggggg&quot;,&quot;GGGG&quot;,&quot;GGGGG&quot;],function(a,b,c,d){b[d.substr(0,2)]=q(a)}),R([&quot;gg&quot;,&quot;GG&quot;],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),H(&quot;Q&quot;,0,0,&quot;quarter&quot;),z(&quot;quarter&quot;,&quot;Q&quot;),N(&quot;Q&quot;,Rc),Q(&quot;Q&quot;,function(a,b){b[gd]=3*(q(a)-1)}),H(&quot;D&quot;,[&quot;DD&quot;,2],&quot;Do&quot;,&quot;date&quot;),z(&quot;date&quot;,&quot;D&quot;),N(&quot;D&quot;,Wc),N(&quot;DD&quot;,Wc,Sc),N(&quot;Do&quot;,function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),Q([&quot;D&quot;,&quot;DD&quot;],hd),Q(&quot;Do&quot;,function(a,b){b[hd]=q(a.match(Wc)[0],10)});var Dd=C(&quot;Date&quot;,!0);H(&quot;d&quot;,0,&quot;do&quot;,&quot;day&quot;),H(&quot;dd&quot;,0,0,function(a){return this.localeData().weekdaysMin(this,a)}),H(&quot;ddd&quot;,0,0,function(a){return this.localeData().weekdaysShort(this,a)}),H(&quot;dddd&quot;,0,0,function(a){return this.localeData().weekdays(this,a)}),H(&quot;e&quot;,0,0,&quot;weekday&quot;),H(&quot;E&quot;,0,0,&quot;isoWeekday&quot;),z(&quot;day&quot;,&quot;d&quot;),z(&quot;weekday&quot;,&quot;e&quot;),z(&quot;isoWeekday&quot;,&quot;E&quot;),N(&quot;d&quot;,Wc),N(&quot;e&quot;,Wc),N(&quot;E&quot;,Wc),N(&quot;dd&quot;,cd),N(&quot;ddd&quot;,cd),N(&quot;dddd&quot;,cd),R([&quot;dd&quot;,&quot;ddd&quot;,&quot;dddd&quot;],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),R([&quot;d&quot;,&quot;e&quot;,&quot;E&quot;],function(a,b,c,d){b[d]=q(a)});var Ed=&quot;Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday&quot;.split(&quot;_&quot;),Fd=&quot;Sun_Mon_Tue_Wed_Thu_Fri_Sat&quot;.split(&quot;_&quot;),Gd=&quot;Su_Mo_Tu_We_Th_Fr_Sa&quot;.split(&quot;_&quot;);H(&quot;H&quot;,[&quot;HH&quot;,2],0,&quot;hour&quot;),H(&quot;h&quot;,[&quot;hh&quot;,2],0,function(){return this.hours()%12||12}),Sb(&quot;a&quot;,!0),Sb(&quot;A&quot;,!1),z(&quot;hour&quot;,&quot;h&quot;),N(&quot;a&quot;,Tb),N(&quot;A&quot;,Tb),N(&quot;H&quot;,Wc),N(&quot;h&quot;,Wc),N(&quot;HH&quot;,Wc,Sc),N(&quot;hh&quot;,Wc,Sc),Q([&quot;H&quot;,&quot;HH&quot;],id),Q([&quot;a&quot;,&quot;A&quot;],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),Q([&quot;h&quot;,&quot;hh&quot;],function(a,b,c){b[id]=q(a),j(c).bigHour=!0});var Hd=/[ap]\.?m?\.?/i,Id=C(&quot;Hours&quot;,!0);H(&quot;m&quot;,[&quot;mm&quot;,2],0,&quot;minute&quot;),z(&quot;minute&quot;,&quot;m&quot;),N(&quot;m&quot;,Wc),N(&quot;mm&quot;,Wc,Sc),Q([&quot;m&quot;,&quot;mm&quot;],jd);var Jd=C(&quot;Minutes&quot;,!1);H(&quot;s&quot;,[&quot;ss&quot;,2],0,&quot;second&quot;),z(&quot;second&quot;,&quot;s&quot;),N(&quot;s&quot;,Wc),N(&quot;ss&quot;,Wc,Sc),Q([&quot;s&quot;,&quot;ss&quot;],kd);var Kd=C(&quot;Seconds&quot;,!1);H(&quot;S&quot;,0,0,function(){return~~(this.millisecond()/100)}),H(0,[&quot;SS&quot;,2],0,function(){return~~(this.millisecond()/10)}),H(0,[&quot;SSS&quot;,3],0,&quot;millisecond&quot;),H(0,[&quot;SSSS&quot;,4],0,function(){return 10*this.millisecond()}),H(0,[&quot;SSSSS&quot;,5],0,function(){return 100*this.millisecond()}),H(0,[&quot;SSSSSS&quot;,6],0,function(){return 1e3*this.millisecond()}),H(0,[&quot;SSSSSSS&quot;,7],0,function(){return 1e4*this.millisecond()}),H(0,[&quot;SSSSSSSS&quot;,8],0,function(){return 1e5*this.millisecond()}),H(0,[&quot;SSSSSSSSS&quot;,9],0,function(){return 1e6*this.millisecond()}),z(&quot;millisecond&quot;,&quot;ms&quot;),N(&quot;S&quot;,Xc,Rc),N(&quot;SS&quot;,Xc,Sc),N(&quot;SSS&quot;,Xc,Tc);var Ld;for(Ld=&quot;SSSS&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)N(Ld,$c);for(Ld=&quot;S&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)Q(Ld,Wb);var Md=C(&quot;Milliseconds&quot;,!1);H(&quot;z&quot;,0,0,&quot;zoneAbbr&quot;),H(&quot;zz&quot;,0,0,&quot;zoneName&quot;);var Nd=n.prototype;Nd.add=Ad,Nd.calendar=cb,Nd.clone=db,Nd.diff=ib,Nd.endOf=ub,Nd.format=mb,Nd.from=nb,Nd.fromNow=ob,Nd.to=pb,Nd.toNow=qb,Nd.get=F,Nd.invalidAt=Cb,Nd.isAfter=eb,Nd.isBefore=fb,Nd.isBetween=gb,Nd.isSame=hb,Nd.isValid=Ab,Nd.lang=Cd,Nd.locale=rb,Nd.localeData=sb,Nd.max=wd,Nd.min=vd,Nd.parsingFlags=Bb,Nd.set=F,Nd.startOf=tb,Nd.subtract=Bd,Nd.toArray=yb,Nd.toObject=zb,Nd.toDate=xb,Nd.toISOString=lb,Nd.toJSON=lb,Nd.toString=kb,Nd.unix=wb,Nd.valueOf=vb,Nd.year=td,Nd.isLeapYear=ia,Nd.weekYear=Fb,Nd.isoWeekYear=Gb,Nd.quarter=Nd.quarters=Jb,Nd.month=Y,Nd.daysInMonth=Z,Nd.week=Nd.weeks=na,Nd.isoWeek=Nd.isoWeeks=oa,Nd.weeksInYear=Ib,Nd.isoWeeksInYear=Hb,Nd.date=Dd,Nd.day=Nd.days=Pb,Nd.weekday=Qb,Nd.isoWeekday=Rb,Nd.dayOfYear=qa,Nd.hour=Nd.hours=Id,Nd.minute=Nd.minutes=Jd,Nd.second=Nd.seconds=Kd,
Nd.millisecond=Nd.milliseconds=Md,Nd.utcOffset=Na,Nd.utc=Pa,Nd.local=Qa,Nd.parseZone=Ra,Nd.hasAlignedHourOffset=Sa,Nd.isDST=Ta,Nd.isDSTShifted=Ua,Nd.isLocal=Va,Nd.isUtcOffset=Wa,Nd.isUtc=Xa,Nd.isUTC=Xa,Nd.zoneAbbr=Xb,Nd.zoneName=Yb,Nd.dates=aa(&quot;dates accessor is deprecated. Use date instead.&quot;,Dd),Nd.months=aa(&quot;months accessor is deprecated. Use month instead&quot;,Y),Nd.years=aa(&quot;years accessor is deprecated. Use year instead&quot;,td),Nd.zone=aa(&quot;moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779&quot;,Oa);var Od=Nd,Pd={sameDay:&quot;[Today at] LT&quot;,nextDay:&quot;[Tomorrow at] LT&quot;,nextWeek:&quot;dddd [at] LT&quot;,lastDay:&quot;[Yesterday at] LT&quot;,lastWeek:&quot;[Last] dddd [at] LT&quot;,sameElse:&quot;L&quot;},Qd={LTS:&quot;h:mm:ss A&quot;,LT:&quot;h:mm A&quot;,L:&quot;MM/DD/YYYY&quot;,LL:&quot;MMMM D, YYYY&quot;,LLL:&quot;MMMM D, YYYY h:mm A&quot;,LLLL:&quot;dddd, MMMM D, YYYY h:mm A&quot;},Rd=&quot;Invalid date&quot;,Sd=&quot;%d&quot;,Td=/\d{1,2}/,Ud={future:&quot;in %s&quot;,past:&quot;%s ago&quot;,s:&quot;a few seconds&quot;,m:&quot;a minute&quot;,mm:&quot;%d minutes&quot;,h:&quot;an hour&quot;,hh:&quot;%d hours&quot;,d:&quot;a day&quot;,dd:&quot;%d days&quot;,M:&quot;a month&quot;,MM:&quot;%d months&quot;,y:&quot;a year&quot;,yy:&quot;%d years&quot;},Vd=s.prototype;Vd._calendar=Pd,Vd.calendar=_b,Vd._longDateFormat=Qd,Vd.longDateFormat=ac,Vd._invalidDate=Rd,Vd.invalidDate=bc,Vd._ordinal=Sd,Vd.ordinal=cc,Vd._ordinalParse=Td,Vd.preparse=dc,Vd.postformat=dc,Vd._relativeTime=Ud,Vd.relativeTime=ec,Vd.pastFuture=fc,Vd.set=gc,Vd.months=U,Vd._months=md,Vd.monthsShort=V,Vd._monthsShort=nd,Vd.monthsParse=W,Vd.week=ka,Vd._week=ud,Vd.firstDayOfYear=ma,Vd.firstDayOfWeek=la,Vd.weekdays=Lb,Vd._weekdays=Ed,Vd.weekdaysMin=Nb,Vd._weekdaysMin=Gd,Vd.weekdaysShort=Mb,Vd._weekdaysShort=Fd,Vd.weekdaysParse=Ob,Vd.isPM=Ub,Vd._meridiemParse=Hd,Vd.meridiem=Vb,w(&quot;en&quot;,{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===q(a%100/10)?&quot;th&quot;:1===b?&quot;st&quot;:2===b?&quot;nd&quot;:3===b?&quot;rd&quot;:&quot;th&quot;;return a+c}}),a.lang=aa(&quot;moment.lang is deprecated. Use moment.locale instead.&quot;,w),a.langData=aa(&quot;moment.langData is deprecated. Use moment.localeData instead.&quot;,y);var Wd=Math.abs,Xd=yc(&quot;ms&quot;),Yd=yc(&quot;s&quot;),Zd=yc(&quot;m&quot;),$d=yc(&quot;h&quot;),_d=yc(&quot;d&quot;),ae=yc(&quot;w&quot;),be=yc(&quot;M&quot;),ce=yc(&quot;y&quot;),de=Ac(&quot;milliseconds&quot;),ee=Ac(&quot;seconds&quot;),fe=Ac(&quot;minutes&quot;),ge=Ac(&quot;hours&quot;),he=Ac(&quot;days&quot;),ie=Ac(&quot;months&quot;),je=Ac(&quot;years&quot;),ke=Math.round,le={s:45,m:45,h:22,d:26,M:11},me=Math.abs,ne=Ha.prototype;ne.abs=oc,ne.add=qc,ne.subtract=rc,ne.as=wc,ne.asMilliseconds=Xd,ne.asSeconds=Yd,ne.asMinutes=Zd,ne.asHours=$d,ne.asDays=_d,ne.asWeeks=ae,ne.asMonths=be,ne.asYears=ce,ne.valueOf=xc,ne._bubble=tc,ne.get=zc,ne.milliseconds=de,ne.seconds=ee,ne.minutes=fe,ne.hours=ge,ne.days=he,ne.weeks=Bc,ne.months=ie,ne.years=je,ne.humanize=Fc,ne.toISOString=Gc,ne.toString=Gc,ne.toJSON=Gc,ne.locale=rb,ne.localeData=sb,ne.toIsoString=aa(&quot;toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)&quot;,Gc),ne.lang=Cd,H(&quot;X&quot;,0,0,&quot;unix&quot;),H(&quot;x&quot;,0,0,&quot;valueOf&quot;),N(&quot;x&quot;,_c),N(&quot;X&quot;,bd),Q(&quot;X&quot;,function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),Q(&quot;x&quot;,function(a,b,c){c._d=new Date(q(a))}),a.version=&quot;2.10.6&quot;,b(Da),a.fn=Od,a.min=Fa,a.max=Ga,a.utc=h,a.unix=Zb,a.months=jc,a.isDate=d,a.locale=w,a.invalid=l,a.duration=Ya,a.isMoment=o,a.weekdays=lc,a.parseZone=$b,a.localeData=y,a.isDuration=Ia,a.monthsShort=kc,a.weekdaysMin=nc,a.defineLocale=x,a.weekdaysShort=mc,a.normalizeUnits=A,a.relativeTimeThreshold=Ec;var oe=a;return oe});</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>2c64669f-f07e-4365-bf64-c559ace83004</id>
        <name>stopOnErrorCount</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122375</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Function to Stop a channel if it reaches a particular error count. 
	Also sends an alert message via another channel (this sends a sms via our monitoring system).

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function stopOnErrorCount(cid, errorCount) {
	var channelStatisticsController = Packages.com.mirth.connect.server.controllers.ChannelStatisticsController.getInstance();
	var channelStatusController = Packages.com.mirth.connect.server.controllers.ChannelStatusController.getInstance();
	var stats = channelStatisticsController.getStatistics(cid);
	// var numOfQueued = stats.queued;
	var numOfErrors = stats.error;

	if(numOfErrors &gt; errorCount )
	{
		//Stop Me
		channelStatusController.stopChannel(cid);
		//Alert msg sent to _SVHALERT channel
		var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
		var channelName = channelController.getDeployedChannelById(cid).getName();
		var alertmsg = &apos;mirth01 mirth_channel_status codeTemplate_stopOnErrorCount 0 &apos; +
					   &apos;channel &apos; + channelName + &apos; stopped&apos;;
		router.routeMessage(&apos;_SVHALERT&apos;, alertmsg);
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>08044817-3504-4fc1-80ee-404870195151</id>
        <name>test</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122745</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>COMPILED_CODE</type>
          <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.
	searchword
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function testfunc(arg1) {
	return arg1;
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
    <name>WebPT-Mirth</name>
    <revision>1</revision>
    <lastModified>
      <time>1678476121602</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description></description>
    <includeNewChannels>true</includeNewChannels>
    <enabledChannelIds>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
    </enabledChannelIds>
    <disabledChannelIds/>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
        <name>Fix HL7v2 Node Order</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476121804</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>df1b6a7b-66b6-4459-9f0f-93f609c71409</id>
    <name>WebPT-Redox</name>
    <revision>4</revision>
    <lastModified>
      <time>1703964939916</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description></description>
    <includeNewChannels>false</includeNewChannels>
    <enabledChannelIds>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
      <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
      <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
      <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
      <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>5e20fc6a-c25b-4511-b963-256d75779f51</id>
        <name>Financial Destinations</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122318</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Sets destination ids for Redox financial transactions.  This controls the destinations that the messages will be delivered to in redox.

	case &apos;&lt;tenantId&gt;&apos;:
	destinations.push({&quot;ID&quot; : &quot;&lt;destinationId&gt;&quot;,&quot;Name&quot; : &quot;&lt;destinationName&gt;&quot;});
	break;

	@param {Any} tenantId - 
	@return {String} return description
*/
function toRdxFinancialDest(tenantId) {
	var destinations = [];
	switch (tenantId){

		//TRAINING-STAGING
		case &apos;2689&apos;:
		destinations.push({&quot;ID&quot; : &quot;d16c734e-d2e4-4557-9b4d-26f64958c5aa&quot;,&quot;Name&quot; : &quot;Ohio Valley Surgical Hospital Destination (s)&quot;});
		break;

		//PRODUCTION
		case &apos;2300&apos;:
		destinations.push({&quot;ID&quot; : &quot;1b38bfcf-01dc-479f-be64-217a839d7c88&quot;,&quot;Name&quot; : &quot;cyrpess&quot;});
		break;

		case &apos;2411&apos;:
		destinations.push({&quot;ID&quot; : &quot;b40ab184-ebb4-4425-8838-e2d0666f990f&quot;,&quot;Name&quot; : &quot;pt_group_florida&gt;&quot;});
		break;

		case &apos;2362&apos;:
		destinations.push({&quot;ID&quot; : &quot;bd637339-f84b-4a24-976b-603794cfd2cb&quot;,&quot;Name&quot; : &quot;clntOrthoConnect&quot;});
		break;

		case &apos;2299&apos;:
		destinations.push({&quot;ID&quot; : &quot;f3731f91-5711-4781-ad9c-6717f2ee0b21&quot;,&quot;Name&quot; : &quot;NEPT&quot;});
		break;

		case &apos;2446&apos;:
		destinations.push({&quot;ID&quot; : &quot;db0b44ee-ab05-4054-bd18-8bc3b2771759&quot;,&quot;Name&quot; : &quot;Kentucky&quot;});
		break;

		case &apos;2480&apos;:
		destinations.push({&quot;ID&quot; : &quot;024afd22-22b6-4b09-91cb-d7356c7a85b2&quot;,&quot;Name&quot; : &quot;Knox&quot;});
		break;

		case &apos;2439&apos;:
		destinations.push({&quot;ID&quot; : &quot;303f9e77-27bb-4cd7-a8e9-58643064bb86&quot;,&quot;Name&quot; : &quot;Georgia&quot;});
		break;

		case &apos;2514&apos;:
		destinations.push({&quot;ID&quot; : &quot;56d1b308-0928-41a0-89f1-427970285ed7&quot;,&quot;Name&quot; : &quot;ProHealth Care (NY) Destination (p)&quot;});
		break;

		case &apos;2298&apos;:
		destinations.push({&quot;ID&quot; : &quot;9522b63c-c968-4d8b-bb1e-a978c23f20aa&quot;,&quot;Name&quot; : &quot;RYE&quot;});
		break;

		case &apos;2615&apos;:
		destinations.push({&quot;ID&quot; : &quot;50a33952-331f-41f9-9776-328dfb8dc279&quot;,&quot;Name&quot; : &quot;Rushmore&quot;});
		break;

		case &apos;2404&apos;:
		destinations.push({&quot;ID&quot; : &quot;e6a3ff46-c6e0-47e9-826f-1d294b254ee4&quot;,&quot;Name&quot; : &quot;MBJ&quot;});
		break;
	}	
	tmp[&apos;Meta&apos;][&apos;Destinations&apos;] = destinations;
}

/*
&apos;2300&apos;: &apos;1b38bfcf-01dc-479f-be64-217a839d7c88&apos;,  // Cyress Creek (MotionPT) production
        &apos;2411&apos;: &apos;b40ab184-ebb4-4425-8838-e2d0666f990f&apos;,  // Stark pt_group_florida (MotionPT) production
        &apos;2362&apos;: &apos;bd637339-f84b-4a24-976b-603794cfd2cb&apos;,  // Stark clntOrthoConnect (MotionPT) production
        &apos;2299&apos;: &apos;f3731f91-5711-4781-ad9c-6717f2ee0b21&apos;,  // NE PT Plus (MotionPT) Production
        &apos;2446&apos;: &apos;db0b44ee-ab05-4054-bd18-8bc3b2771759&apos;, // MotionPT Kentucky production
        &apos;2480&apos;: &apos;024afd22-22b6-4b09-91cb-d7356c7a85b2&apos;, //MotionPT Group Knox High TN
        &apos;2439&apos;: &apos;303f9e77-27bb-4cd7-a8e9-58643064bb86&apos;, // MotionPT Georgia Production
        //&apos;2514&apos;: &apos;0df3db06-ad21-41ab-be09-a2b4c7f0a530&apos;, // lntMOTION_SM_ProHealth_LakeSuccess_NY  - this one will become prohealth 56d1b308-0928-41a0-89f1-427970285ed7
        &apos;2514&apos;: &apos;56d1b308-0928-41a0-89f1-427970285ed7&apos;, // ProHealth Care (NY) Destination (p)  - this replaced lntMOTION_SM_ProHealth_LakeSuccess_NY
        &apos;2298&apos;: &apos;9522b63c-c968-4d8b-bb1e-a978c23f20aa&apos;,  // Rye PT (MotionPT) production
        &apos;2615&apos;: &apos;50a33952-331f-41f9-9776-328dfb8dc279&apos;, // Rushmore Prod
        &apos;2404&apos;: &apos;e6a3ff46-c6e0-47e9-826f-1d294b254ee4&apos;   // Missoula production

        */</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>2cacaed5-ce50-410c-800b-002add8e56d0</id>
        <name>PatientAdmin Destinations</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122166</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Sets destination ids for Redox patientAdmin transactions.  This controls the destinations that the
	messages will be delivered to in redox.
	
	case &apos;&lt;tenantId&gt;&apos;: destinations.push({&quot;ID&quot; : &quot;&lt;destinationId&gt;&quot;,&quot;Name&quot; : &quot;&lt;destinationName&gt;&quot;});
	break;

	@param {Any} tenantId - 
	@return {String} return description
*/
function toRdxPatientAdminDest(tenantId) {
	var destinations = [];
	switch (tenantId){

		//TRAINING-STAGING
		case &apos;1567&apos;:
		destinations.push({&quot;ID&quot; : &quot;9f24fdcd-fbdb-453f-a9a9-5e650cb4384d&quot;,&quot;Name&quot; : &quot;Clinicient to Kure ADT Staging (s)&quot;});
		break;

		case &apos;2628&apos;:
		destinations.push({&quot;ID&quot; : &quot;b52c7ccc-e09a-4ba4-96f8-89c47325ffdc&quot;,&quot;Name&quot; : &quot;Clinicient to Referral MD Staging (s)&quot;});
		break;

		//PRODUCTION

		case &apos;1630&apos;:
		destinations.push({&quot;ID&quot; : &quot;2420e884-5cdb-4978-b52b-5096b7176e26&quot;,&quot;Name&quot; : &quot;Clinicient to Kure Prod (p)&quot;});
		break;

		case &apos;2514&apos;:
		destinations.push({&quot;ID&quot; : &quot;b801c1c9-abba-4cf9-b76a-02c68ae15980&quot;,&quot;Name&quot; : &quot;Referral MD (p)&quot;});
		break;
	
	}	
	msg[&apos;Meta&apos;][&apos;Destinations&apos;] = destinations;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>456ec6d4-292d-4921-af79-03ef6878cff1</id>
        <name>Rdx Meta Outbound</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476121712</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Author:  Kirby Knight
	Description:  Ensures all non-production Mirth environments send outbound messages to the Clinicient Generic HL7 Inbound Redox Stanging environment 
	and sets prod or test enviornment specific variables 

	@return {String} return description
*/
function rdxMetaOutbound() {
	// convert date/time to ISO 8601 Format &quot;2018-02-19T17:19:16.947Z&quot;,
var d = new Date();
var n = d.toISOString();
msg[&apos;Meta&apos;][&apos;EventDateTime&apos;] = n;

//  Get environment information
var configController = com.mirth.connect.server.controllers.ControllerFactory.getFactory().createConfigurationController();
var serverSettings = configController.getServerSettings();
var envName = serverSettings.getEnvironmentName();
var serverName = serverSettings.getServerName();

//  All non production Mirth environments send only to the Redox Generic HL7 Enpoint
	if (envName != &apos;PROD&apos;){
		msg[&apos;Meta&apos;][&apos;Test&apos;] = true;
		msg[&apos;Meta&apos;][&apos;Destinations&apos;] = [];
	     msg[&apos;Meta&apos;][&apos;Destinations&apos;][0] = {};
	     msg[&apos;Meta&apos;][&apos;Destinations&apos;][0][&apos;ID&apos;] = &apos;2834ab9f-bca2-4b66-b9ff-64d47fb66187&apos;;
	     msg[&apos;Meta&apos;][&apos;Destinations&apos;][0][&apos;Name&apos;] = &apos;Clinicient Generic HL7 Inbound(s)&apos;;
	     msg[&apos;Meta&apos;][&apos;Destinations&apos;][0][&apos;Destination&apos;] = &apos;Redox&apos;;
	}else {
		msg[&apos;Meta&apos;][&apos;Test&apos;] = false;
	}

msg[&apos;Meta&apos;][&apos;Message&apos;] = {};
msg[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;] = connectorMessage.getMessageId();
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>508a5968-422d-4da0-ae4b-a48a8bd74d40</id>
        <name>Rdx Response</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122248</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	This function requires no parameters.  Call this from the response step on the destination.
	It captures the respsone from Redox and puts a link to to the message in the Redox dashboard to the channelMap

	@return {String} return description
*/
function rdxResponse() {
	var myResponse = JSON.parse(response.getMessage());
	if (myResponse != null) {
		if ($co(&apos;responseStatusLine&apos;) == &apos;HTTP/1.1 200 OK&apos;){
		channelMap.put(&apos;rdxMsgId&apos;, myResponse.Meta.Message.ID.toString());
		channelMap.put(&apos;rdxMsgLink&apos;,&apos;https://dashboard.redoxengine.com/#/dashboard/organization/3260/message/message/&apos; + myResponse.Meta.Message.ID.toString());
	    }   
	}
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>a7ad6a73-e5a3-49f0-bc4f-2cd89f749082</id>
    <name>WebPT-StaffID</name>
    <revision>2</revision>
    <lastModified>
      <time>1678715257100</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description></description>
    <includeNewChannels>false</includeNewChannels>
    <enabledChannelIds>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>14b7de16-de3e-4994-b123-b4d0d3d712aa</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
      <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
      <string>076d39da-7152-40db-91a1-1746167239e9</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5adcf0e4-782c-4e9d-a105-f67795fe6644</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>dd68390d-cb82-4e64-9a54-3d70708ed573</id>
        <name>ClinicientIdForProvider</name>
        <revision>2</revision>
        <lastModified>
          <time>1688569845378</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>function ClinicientIdForProvider(tenantId, Providers) {

	// Loop through each provider
	for each(Prov in Providers) {

		var AllProvider = msg[&apos;Visit&apos;][&apos;&apos; + Prov + &apos;&apos;];
		var ID = AllProvider.ID;
		var IdType = AllProvider.IDType
		var Name = AllProvider.FirstName + &apos;&apos; + AllProvider.LastName;  // Concatinate first and last name of the providers
		var concatTenantId = &apos;g_staff_&apos; + tenantId;	// Concatinate TenetID with g_staff to find respective globalmap for the message

		// Checking for NULL value in ID field or First &amp; Last name field
		if ((ID != null &amp;&amp; ID != &apos;&apos;) || (Name != &apos;nullnull&apos; &amp;&amp; Name != &apos;&apos;)) {
			var myObject = FindLookupValueWithNPI_FirstLastName(concatTenantId, ID, Name, IdType);		
			
			// Checking if the NPI/External/FirstLastName values are exist and matches with globalmap values then replace ID with StaffID and IDType with CLNTID
			if (Object.keys(myObject).length &gt; 0) {
				AllProvider.ID = myObject.StaffID;
				AllProvider.IDType = &quot;CLNTID&quot;;
			}
		}
	}

	return msg;
}
</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>9b701353-4ed6-48ff-8143-d1b8e8315ff1</id>
        <name>FindLookupValueWithNPI_FirstLastName</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122106</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>function FindLookupValueWithNPI_FirstLastName ( LookupGlobalMapName, ID, NAME, IdType) {
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       IdType - Based on the IdType, it will decide to check NPI or Exteernal ID in look-up
       ID - The NPI/External value to look up in GlobalMap
       NAME - The first and last name will be concatinate and try to match if the NPI is not exists in look-up

    RETURNS:
       An object containing the replacement value and associated Codetype

    REMARKS: 
    ********************************/
	// Retrieve the array with lookup objects from the globalmap and search for the matching value
	var arr = globalMap.get(LookupGlobalMapName);
	var obj = new Object();

	if(IdType==&quot;NPI&quot; &amp;&amp; (ID != null &amp;&amp; ID != &apos;&apos;)) {
			for each ( item in arr ) {
				var pattern=new RegExp(&quot;^&quot; + item.NPI + &quot;$&quot;);
				if ( pattern.test(ID )) {
						obj = item;
						break;
					} 
			}
	}else if (IdType==&quot;EXTERNAL&quot; &amp;&amp; (ID != null &amp;&amp; ID != &apos;&apos;)) {
		for each ( item in arr ) {
			var pattern=new RegExp(&quot;^&quot; + item.EXTID + &quot;$&quot;);
			if ( pattern.test(ID )) {
				obj = item;
				break;
			}
		}
	}else{
		for each ( item in arr ) {
			  var pattern=new RegExp(&quot;^&quot; +  item.NAME  + &quot;$&quot;);
			  if( pattern.test(NAME )) {
			  	 obj = item;
			      break;
			  }
		}
	}
      // Return the object we found or created
	return obj;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>c8259ee9-bf4c-45b6-a9fc-489fd92a6865</id>
        <name>getId</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476123189</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
Choose the value based on Key coming from channel to choose idType
*/
function getId(key) {

		lookup = globalMap.get(&apos;g_idTypeWithTenant&apos;)
		return lookup.get(key);
		
		}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>819f6d32-54e0-414b-a99b-4f126ec16fb6</id>
        <name>idTypePopulateLookup</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476123393</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
This code template will query the database to and load the values in globalMap
To execute on database this code template will get sqlQuery from the deploy script of the channel: TO_Redox_CH
Once it get the result, it&apos;ll generate key-value lookup and stores on globalMap
 //IOP-1450, IOP-1595, IOP-1618
**/

function idTypePopulateLookup(sqlQuery, globalMapName) {
    logger.info(&apos;Loading lookup table values in the deploy script: &apos; + globalMapName);

    var rs = executeSharedDBStatementTranslationsCh(sqlQuery, true);
    var mp = new java.util.HashMap();
    while (rs.next()) {
        key = rs.getString(&apos;input_key&apos;);
        value = rs.getString(&apos;output_value&apos;);
        mp.put(key, value);

    }
    globalMap.put(globalMapName, mp);
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>c978eb4b-9481-4a7d-88d8-fa5f9a4433fb</id>
        <name>selectIdTypeNotesProvider</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476121845</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
This code template is only for Notes transaction where we have Provider under the Note node

@param {String} msg - outbound msg
@param {String} result - key(needs to be in db table)

@return {String} return msg
 */

function updateNotesJSON(msg, idType) {
	var objID = getStaffIDType(msg[&apos;Note&apos;][&apos;Provider&apos;][&apos;Identifiers&apos;], idType);
	
	if (objID) {
		msg[&apos;Note&apos;][&apos;Provider&apos;].ID = objID.ID;
		msg[&apos;Note&apos;][&apos;Provider&apos;].IDType = objID.IDType;
	}
	
	delete msg[&apos;Note&apos;][&apos;Provider&apos;][&apos;Identifiers&apos;];
	
	for each(notification in msg[&apos;Note&apos;][&apos;Notifications&apos;]) {
		objID = getStaffIDType(notification[&apos;Identifiers&apos;], idType);
		
		if (objID) {
			notification.ID = objID.ID;
			notification.IDType = objID.IDType;
		}
		
		delete notification[&apos;Identifiers&apos;];
	}
	
	return msg;
}

function selectIdTypeNotesProvider(msg, result) {
	return (!result || !isStaffIDTypeValid(result)) ? updateNotesJSON(msg, &quot;NPI&quot;) : updateNotesJSON(msg, result);
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>9d0043fe-c6a0-48e9-9e03-20cd12c0de59</id>
        <name>selectIdTypePerformersOrderingProviders</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476123422</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
This code template is only for financial transaction where we have Ordering Provider and Performence
There will not be an error, if we dont have either one node from ordering or performence provider in outbound msgs
This code will decide which IdType will send out based on key-value pair

@param {String} msg - outbound msg
@param {String} result - key(needs to be in db table)

@return {String} return msg
 */
function updateFinancialJSON(msg, idType) {
	var objID = null;
	for each(transaction in msg[&apos;Transactions&apos;]) {
		for each(performer in transaction[&apos;Performers&apos;]) {
			objID = getStaffIDType(performer[&apos;Identifiers&apos;], idType);
			
			if (objID) {
				performer.ID = objID.ID;
				performer.IDType = objID.IDType;
			}
			delete performer[&apos;Identifiers&apos;];	
		}
		
		for each(ordProvider in transaction[&apos;OrderingProviders&apos;]) {
			objID = getStaffIDType(ordProvider[&apos;Identifiers&apos;], idType);
			
			if (objID) {
				ordProvider.ID = objID.ID;
				ordProvider.IDType = objID.IDType;
			}
			
			delete ordProvider[&apos;Identifiers&apos;];
		}
	}
	return msg;
}

function selectIdTypePerformersOrderingProviders(msg, result) {
	return (!result || !isStaffIDTypeValid(result)) ? updateFinancialJSON(msg, &quot;NPI&quot;) : updateFinancialJSON(msg, result);
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>0c7dd983-6895-4bdc-9d57-218459a15f30</id>
        <name>selectIdTypeVisitProvider</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122928</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
This code template is for Notes, Scheduling, PatientAdmin and BetterPt transaction where we have Admitting, Attending, Consulting and Visit providers
There will not be an error, if we dont have or have any provider nodes from visit
This code will decide which IdType will send out based on key-value pair

@param {String} msg - outbound msg
@param {String} result - key(needs to be in db table)

@return {String} return msg

**/
// This code will remove the unwanted IDType nodes and pass required one

function updatePushSlotsJSON(msg, idType) {
	for each(slot in msg[&apos;Slots&apos;]) {
		var objID = getStaffIDType(slot[&apos;Provider&apos;][&apos;Identifiers&apos;], idType);
		
		if (objID) {
		  slot[&apos;Provider&apos;].ID = objID.ID;
            slot[&apos;Provider&apos;].IDType = objID.IDType
        	}
        	delete slot[&apos;Provider&apos;][&apos;Identifiers&apos;];
	}
	return msg;
}

function updateRealTimeFeeds(msg, idType) {
	if (msg[&apos;Visit&apos;]) {
		var arrProviders = [&apos;AdmittingProvider&apos;, &apos;AttendingProvider&apos;, &apos;ConsultingProvider&apos;, &apos;VisitProvider&apos;, &apos;ReferringProvider&apos;];
		
		for each(providerType in arrProviders) {
			if (msg[&apos;Visit&apos;][providerType]) {
				var objID = getStaffIDType(msg[&apos;Visit&apos;][providerType][&apos;Identifiers&apos;], idType);
				
				if (objID) {
					msg[&apos;Visit&apos;][providerType].ID = objID.ID;
					msg[&apos;Visit&apos;][providerType].IDType = objID.IDType;
				}
				delete msg[&apos;Visit&apos;][providerType][&apos;Identifiers&apos;];
        		}
        	}
    }
    return msg;
}

function selectIdTypeVisitProvider(msg, result) {
	if (msg[&apos;Meta&apos;][&apos;EventType&apos;] == &quot;PushSlots&quot;) {
		return (!result || !isStaffIDTypeValid(result)) ? updatePushSlotsJSON(msg, &quot;NPI&quot;) : updatePushSlotsJSON(msg, result);
    } else {
		return (!result || !isStaffIDTypeValid(result)) ? updateRealTimeFeeds(msg, &quot;NPI&quot;) : updateRealTimeFeeds(msg, result);
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>b47460fc-d167-45a6-9add-c216f8ba56c0</id>
        <name>Validate Staff ID Type</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476121883</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Metohds for Staff ID validation for Redox Outbound Interfaces
	
	@param {Array} arrIdentifiers - array with Staff Identifiers from Outbound JSON Message
	@param {String} idType - desired ID Type
	@return {Object} return boolean value if identifier type exists in array or not
*/
function getStaffIDType(arrIdentifiers, idType) {
	if (!arrIdentifiers)
		return null;

	for each(objID in arrIdentifiers) {
		if (objID.IDType == idType) {
			return objID;
		}
	}
	
	return null;
}

/**
	Check if provided ID Type is valid or not
	
	@param {String} idType - desired ID Type
	@return {Bool} return boolean value if provided ID Type is valid or not
*/

function isStaffIDTypeValid(idType) {
	for each(loopIDtype in [&apos;NPI&apos;, &apos;Other&apos;, &apos;CLNT&apos;]) {
		if (loopIDtype == idType)
			return true;
	}
	return false;
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>35f4c250-08b4-4e42-8e60-f85aa98dfe50</id>
    <name>WebPT-Translations</name>
    <revision>4</revision>
    <lastModified>
      <time>1703964939924</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description></description>
    <includeNewChannels>true</includeNewChannels>
    <enabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
      <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
      <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
      <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
      <string>3792b059-e098-436c-81fe-23502ef5042b</string>
      <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
      <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </enabledChannelIds>
    <disabledChannelIds/>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>be8f057b-2640-4613-b2e7-83326c59169c</id>
        <name>AddZeros</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122826</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>function addZeroes(num) {
   return num.toLocaleString(&quot;en&quot;, {useGrouping: false, minimumFractionDigits: 2})
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>51913864-7702-489a-b7c6-54992c12b19d</id>
        <name>FindLookupValueWithDefault</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122218</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>function FindLookupValueWithDefault ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        //obj.LeftValue = LeftValue;
        //obj.RightValue1 = DefaultValue1;
        //obj.RightValue2   = DefaultValue2; 
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);
            var result = pattern.test(LeftValue );

            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>c276be9f-c8f1-4dea-8df0-e000c6745271</id>
        <name>FindLookupValueWithInsuranceId</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122080</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>function FindLookupValueWithInsuranceId ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);             
            var result = pattern.test(LeftValue );
	
            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>7d746da2-58c6-44eb-ad5c-c5bfd0a0c537</id>
        <name>UseExternalProblemID</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122349</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalProblemID() {

if ([&apos;2804&apos;, &apos;2822&apos;].indexOf($(&apos;tenantId&apos;) + &apos;&apos;) &gt; -1) {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitexternalproblemid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitaccountnumber&apos;].toString();
}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="4.0.0">
        <id>07730e85-7f30-4ddf-90a4-78183c896ab5</id>
        <name>UseExternalVisitID</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476122192</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalVisitID() {
	
if ($(&apos;tenantId&apos;)  == &apos;9999&apos; ) {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitexternalvisitid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitvisitnumber&apos;].toString();
}
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="4.0.0">
    <id>81eb36d5-e0f8-4ec0-ad53-1875c50888b4</id>
    <name>XDS</name>
    <revision>5</revision>
    <lastModified>
      <time>1672160898860</time>
      <timezone>America/Chicago</timezone>
    </lastModified>
    <description>XDS Library</description>
    <includeNewChannels>false</includeNewChannels>
    <enabledChannelIds>
      <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
      <string>38e80069-5a80-4483-9a22-02c928973719</string>
      <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
      <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
    </enabledChannelIds>
    <disabledChannelIds>
      <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
      <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
      <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
      <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
      <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
      <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
      <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
      <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
      <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
      <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
      <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
      <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
      <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
      <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
      <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
      <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
      <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
      <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
      <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
      <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
      <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
      <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
      <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
      <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
      <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
      <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
      <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
      <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
      <string>72383579-097e-4205-b030-ce272c90b835</string>
      <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
      <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
      <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
      <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
      <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
      <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
      <string>a757905f-315a-43be-a624-38780a3d7574</string>
      <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
      <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
      <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
      <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
      <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
      <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
      <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
      <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
      <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
      <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
      <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
      <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
      <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
      <string>076d39da-7152-40db-91a1-1746167239e9</string>
      <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
      <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
      <string>c65024ed-4660-4423-9636-cb6309cae138</string>
      <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
      <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
      <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
      <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
      <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
      <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
      <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
      <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
      <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
      <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
      <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
      <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
      <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
      <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
      <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
      <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
      <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
      <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
      <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
      <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
      <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
      <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
    </disabledChannelIds>
    <codeTemplates>
      <codeTemplate version="4.0.0">
        <id>5a64c60b-b615-4297-8876-8d908e4f8826</id>
        <name>createXdsExtrinsicClassification</name>
        <revision>1</revision>
        <lastModified>
          <time>1650911325299</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/** createXdsExtrinsicClassification(msg)

  	- Desc: This function receives CCD msg and returns XdsExtrinsicClassification XML object
	- Modification:
	2018-10-30 jer - additional debug and namespace logic
	
   	@param {object} objObject 	- this contains a CCD object (i.e. author, performer, participant, etc.)
	@param {string} objType		- this contains a string to identify the type of Object (i.e. author, performer, participant, etc.)
	@return {string} strXML 		- contains the XML string to be inserted into an XML Soap Envelope
**/
function createXdsExtrinsicClassification(objObject, objType) {		
	
	var scriptName= &apos;createXdsExtrinsicClassification&apos;;
	
	// build Classification XML
	var tmp = new XML();
	// var tmp = new XML(&quot;&lt;classification&gt;&lt;/classification&gt;&quot;);
	
	default xml namespace= &apos;urn:ihe:iti:xds-b:2007&apos;;
	var rim= new Namespace(&apos;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&apos;);
	tmp.addNamespace(rim);
	
	logger.error(scriptName+&apos;::objObject: &apos;+JSON.stringify(objObject, null, 4)+&apos; typeof: &apos;+typeof(objObject));
	logger.error(scriptName+&apos;::objType: &apos;+objType+&apos; typeof: &apos;+typeof(objType)+&apos; length: &apos;+objType.length);
	
	if (objType== &apos;author&apos;) {
		var classificationScheme= &quot;urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d&quot;;
		var classifiedObject= $(&apos;extrinsicObjectUUID&apos;);
	} // end if

	/*
	var rootElement = new XML(&apos;&lt;&apos;+rootElementTag+&apos;&gt;&lt;/&apos;+rootElementTag+&apos;&gt;&apos;);
	rootElement.addNamespace(new Namespace(&apos;xsi&apos;, &apos;http://www.w3.org/2001/XMLSchema-instance&apos;));
	rootElement[&apos;@xsi:schemaLocation&apos;]=&apos;urn:hl7-org:v3 ../../schema/HL7V3/NE2008/multicacheschemas/PRPA_IN201305UV02.xsd&apos;;
	*/
		
	// tmp.addNamespace(new Namespace(&apos;rim&apos;, &apos;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&apos;));
	// &lt;rim:Classification id=&quot;cl01&quot; classificationScheme=&quot;urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d&quot; classifiedObject=&quot;775a43ca-adf2-445e-bd4b-936d08f033ab&quot;&gt;
	// createSegment(&apos;rim:Classification&apos;,tmp);
	logger.error(scriptName+&apos;::xml.toXMLString: &apos;+tmp.toXMLString()+&apos; typeof: &apos;+typeof(tmp));
	
	tmp.rim::[&apos;classification&apos;][&apos;@id&apos;]= UUIDGenerator.getUUID().toString();
	tmp.rim::[&apos;classification&apos;][&apos;@classificationScheme&apos;]= 	classificationScheme;
	tmp.rim::[&apos;classification&apos;][&apos;@classifiedObject&apos;]=		classifiedObject;
	logger.error(scriptName+&apos;::xml.toXMLString: &apos;+tmp.toXMLString()+&apos; typeof: &apos;+typeof(tmp));
	
	if (objType== &apos;Author&apos;) {
		for (var property in objObject) {
			if (objObject.hasOwnProperty(property)) {
				logger.error(property, objObject[property]);
			} // end if
		} // end for
	} // end if

/*
			createSegment(&apos;rim:Slot&apos;,msg);				
			msg[&apos;Classification&apos;][&apos;Slot&apos;][&apos;@name&apos;]
							&lt;rim:Slot name=&quot;authorPerson&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;1073533246^Kalish^Michael^^MD^^^^&amp;amp;2.16.840.1.113883.4.6&amp;amp;ISO&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorInstitution&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;Carolina Kidney Associates&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorRole&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;Medical Doctor&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;General Medicine&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                        &lt;/rim:Classification&gt;
	
*/
	var XMLmessage = SerializerFactory.getSerializer(&apos;XML&apos;).fromXML(tmp);
	return XMLmessage;
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
</list>