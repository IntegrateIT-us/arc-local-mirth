<channelGroup version="4.0.0">
  <id>1855abe7-7cd7-404f-9d18-47423c9615b2</id>
  <name>HL7 Misc</name>
  <revision>3</revision>
  <lastModified>
    <time>1658526176048</time>
    <timezone>GMT-06:00</timezone>
  </lastModified>
  <description>HL7 Misc Channels</description>
  <channels>
    <channel version="4.0.0">
      <id>754a8caa-2161-45d8-b261-e32d8b0fb044</id>
      <nextMetaDataId>7</nextMetaDataId>
      <name>_Test HL7 to HL7 Custom Format</name>
      <description></description>
      <revision>1</revision>
      <sourceConnector version="4.0.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.file.FileReceiverProperties" version="4.0.0">
          <pluginProperties>
            <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="3.7.0">
                                                                                          
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    <enabled>false</enabled>
              <clientAuthentication>DISABLED</clientAuthentication>
              <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
              <trustAllCertificates>false</trustAllCertificates>
              <trustedCertificates>
                                                                                                                                                                                    
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        <trustedCertificateAliases/>
                <trustCACerts>true</trustCACerts>
              </trustedCertificates>
              <localCertificateAlias/>
              <ocspEnabled>false</ocspEnabled>
              <ocspURI/>
              <ocspHardFail>false</ocspHardFail>
              <crlEnabled>false</crlEnabled>
              <crlURI/>
              <crlHardFail>false</crlHardFail>
              <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
              <trustedSubjectDNs class="linked-hash-map"/>
              <hideIssuerDNs>false</hideIssuerDNs>
              <allowExpiredCertificates>false</allowExpiredCertificates>
              <implicitFTPS>true</implicitFTPS>
              <useSTARTTLS>false</useSTARTTLS>
            </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
          </pluginProperties>
          <pollConnectorProperties version="4.0.0">
            <pollingType>INTERVAL</pollingType>
            <pollOnStart>false</pollOnStart>
            <pollingFrequency>5000</pollingFrequency>
            <pollingHour>0</pollingHour>
            <pollingMinute>0</pollingMinute>
            <cronJobs/>
            <pollConnectorPropertiesAdvanced>
              <weekly>true</weekly>
              <inactiveDays>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
              </inactiveDays>
              <dayOfMonth>1</dayOfMonth>
              <allDay>true</allDay>
              <startingHour>8</startingHour>
              <startingMinute>0</startingMinute>
              <endingHour>17</endingHour>
              <endingMinute>0</endingMinute>
            </pollConnectorPropertiesAdvanced>
          </pollConnectorProperties>
          <sourceConnectorProperties version="4.0.0">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <scheme>FILE</scheme>
          <host>C:/HL7/ORU/In</host>
          <fileFilter>*.hl7</fileFilter>
          <regex>false</regex>
          <directoryRecursion>false</directoryRecursion>
          <ignoreDot>true</ignoreDot>
          <anonymous>true</anonymous>
          <username>anonymous</username>
          <password>anonymous</password>
          <timeout>10000</timeout>
          <secure>true</secure>
          <passive>true</passive>
          <validateConnection>true</validateConnection>
          <afterProcessingAction>MOVE</afterProcessingAction>
          <moveToDirectory>../Processed</moveToDirectory>
          <moveToFileName>${originalFilename}</moveToFileName>
          <errorReadingAction>MOVE</errorReadingAction>
          <errorResponseAction>AFTER_PROCESSING</errorResponseAction>
          <errorMoveToDirectory>../Errored</errorMoveToDirectory>
          <errorMoveToFileName>${originalFilename}</errorMoveToFileName>
          <checkFileAge>true</checkFileAge>
          <fileAge>1000</fileAge>
          <fileSizeMinimum>0</fileSizeMinimum>
          <fileSizeMaximum></fileSizeMaximum>
          <ignoreFileSizeMaximum>true</ignoreFileSizeMaximum>
          <sortBy>date</sortBy>
          <binary>false</binary>
          <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        </properties>
        <transformer version="4.0.0">
          <elements>
            <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
              <name>channelId</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <variable>channelId</variable>
              <mapping></mapping>
              <defaultValue>connectorMessage.getChannelId()</defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
              <name>message</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <variable>message</variable>
              <mapping></mapping>
              <defaultValue>connectorMessage.getRawData()</defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
              <name>getMSH</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <script>// Javascript INSERT statement
// Modified 2014-09-03 22:21 CT JER

/*
	var tContent=connectorMessage.getRawData();
	var tChannel_name=ChannelUtil.getDeployedChannelName(channelId);
	var tChannel_connector=connectorMessage.getConnectorName();
*/
var scriptName= &apos;callGetPID&apos;;
var debug= 0;

var objMSH= getMSH(msg);
if(typeof(objMSH) !== &apos;undefined&apos;) { 
	if (debug&gt;0) {
		logger.error(&quot;objMSH type: &quot;+typeof(objMSH)+&quot; DETAILS: MessageType: &quot;+objMSH.messageType+&quot; EventType: &quot;+objMSH.eventType+&quot; SendingApp: &quot;+objMSH.sendingApplication+&quot; SendingFac: &quot;+objMSH.sendingFacility+ 
		&quot; MessageControlId: &quot;+objMSH.messageControlId+&quot; MessageDateTime: &quot;+objMSH.messageDateTime+&quot; HL7Version: &quot;+objMSH.hl7version); 
	}
	channelMap.put(&apos;objMSH&apos;,JSON.stringify(objMSH, null, 4));
	for each (objElement in objMSH) {
		if(typeof(objElement) == &apos;object&apos;) {
			for each (objSubElement in objElement) {
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; objMSH objElement sub-element: &apos;+objSubElement);	
				}
			}
		}
	}
	channelMap.put(&apos;MessageControlId&apos;,objMSH.messageControlID.toString());
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
              <name>setPID</name>
              <sequenceNumber>3</sequenceNumber>
              <enabled>true</enabled>
              <script>/** callGetPID(objPID)

  	- Desc: This transformation function evaluates the objPID Object

	Modified:

   	@param {object} objPID - input the objPID object instance
	@return {object} msg - return entire msg
**/

var scriptName= &apos;callGetPID&apos;;
var debug= new Boolean(false);

if (typeof(getPID(msg)) !== undefined) {

	var objPID= getPID(msg);
	if(debug== true) { 
		channelMap.put(&apos;objPID&apos;,JSON.stringify(objPID, null, 4)); 
	}
	// channelMap.put(&apos;patientId&apos;,objPID.internalId.id.toString());

for (var key in objPID) {
	// skip loop if the property is from prototype
	if(debug== true) { logger.error(scriptName+&apos;::DEBUG:key= &apos;+key); }

	if (!objPID.hasOwnProperty(key)) continue;
	var obj= objPID[key];
	if(debug== true) { logger.error(scriptName+&apos;::DEBUG:objPID[key]= &apos;+JSON.stringify(objPID[key])+&apos; key= &apos;+JSON.stringify(key)); }

    	for (var prop in obj) {

		if(debug== true) { 
			logger.error(scriptName+&apos;::DEBUG[1]:objProp= &apos;+obj[prop]+&apos; typeof= &apos;+typeof(obj[prop]));
			logger.error(scriptName+&apos;::DEBUG[2]:prop= &apos;+prop+&apos; typeof= &apos;+typeof(prop)); 
		}

		if(typeof(prop)== &apos;object&apos;) {
        		// skip loop if the property is from prototype
        		if(debug== true) { 
        			logger.error(scriptName+&apos;::DEBUG[3.1]:objProp: &apos;+JSON.stringify(prop)); 
        		}
        		if(!obj.hasOwnProperty(prop)) continue;
    		} else {
    			var objProp= prop;
    			if(debug== true) { 
    				logger.error(scriptName+&apos;::DEBUG[3.2.1]:objProp: &apos;+JSON.stringify(objProp)+&apos; value: &apos;+JSON.stringify(obj[prop]));
    				logger.error(scriptName+&apos;::DEBUG[3.2.2]:objProp.type: &apos;+typeof(objProp));
    				logger.error(scriptName+&apos;::DEBUG[3.2.3]:objProp.hasOwnProperty: &apos;+obj.hasOwnProperty(objProp));
    			}
    			// [2019-04-07 11:01:04,596]  ERROR  (transformer:?): callGetPID::DEBUG[3.2]:objProp: &quot;internalId&quot; value: [{&quot;id&quot;:&quot;3878477&quot;}]
			if(typeof(objProp) ==&apos;object&apos;) {
				if(!obj.hasOwnProperty(objProp)) continue;
				if(debug== true) { 
					logger.error(scriptName+&apos;DEBUG[3.3.1]::objProp: &apos;+JSON.stringify(objProp)); 
				}
    			} else if (typeof(objProp) ==&apos;string&apos; &amp;&amp; objProp.toString()== &apos;internalId&apos;) {
				if(debug== true) {
					logger.error(scriptName+&apos;DEBUG[3.3.2]::obj[prop] type: &apos;+typeof(obj[prop]));
    					logger.error(scriptName+&apos;DEBUG[3.3.3]::objProp length: &apos;+objProp.toString().length+&apos; string: &apos;+objProp.toString());
				}
    				if (typeof(obj[prop]) == &apos;object&apos;) {
					for (var subObjProp in obj[prop]) {
						if(debug== true) {
    							logger.error(scriptName+&apos;::DEBUG[3.3.3.1].typeof: &apos;+typeof(subObjProp)+&apos; value: &apos;+subObjProp); 
    						// +JSON.stringify(objProp)+&apos; value: &apos;+JSON.stringify(obj[prop]));
						}
					}
    				}
    			}
			for (var propKey in objProp) {
				if(typeof(propKey)== &apos;object&apos;) {		    				
					if(!objProp.hasOwnProperty(propKey)) continue;
					if(debug== true) { 
						logger.error(scriptName+&apos;::DEBUG[4]:&apos;+propKey + &quot;= &quot; + objProp[propKey]+&apos; typeof= &apos;+typeof(objProp[propKey])); 
					}
				} // end if
			} // end for
    		} // end if
    	} // end for
} // end for

} // end if</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64">Cg==</outboundTemplate>
          <inboundDataType>HL7V2</inboundDataType>
          <outboundDataType>HL7V2</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
              <handleRepetitions>true</handleRepetitions>
              <handleSubcomponents>true</handleSubcomponents>
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <stripNamespaces>true</stripNamespaces>
              <segmentDelimiter>\r</segmentDelimiter>
              <convertLineBreaks>true</convertLineBreaks>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <segmentDelimiter>\r</segmentDelimiter>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
              <splitType>MSH_Segment</splitType>
              <batchScript></batchScript>
            </batchProperties>
            <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
              <segmentDelimiter>\r</segmentDelimiter>
              <successfulACKCode>AA</successfulACKCode>
              <successfulACKMessage></successfulACKMessage>
              <errorACKCode>AE</errorACKCode>
              <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
              <rejectedACKCode>AR</rejectedACKCode>
              <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
              <msh15ACKAccept>false</msh15ACKAccept>
              <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
            </responseGenerationProperties>
            <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
              <successfulACKCode>AA,CA</successfulACKCode>
              <errorACKCode>AE,CE</errorACKCode>
              <rejectedACKCode>AR,CR</rejectedACKCode>
              <validateMessageControlId>true</validateMessageControlId>
              <originalMessageControlId>Destination_Encoded</originalMessageControlId>
              <originalIdMapVariable></originalIdMapVariable>
            </responseValidationProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
              <handleRepetitions>true</handleRepetitions>
              <handleSubcomponents>true</handleSubcomponents>
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <stripNamespaces>true</stripNamespaces>
              <segmentDelimiter>\r</segmentDelimiter>
              <convertLineBreaks>true</convertLineBreaks>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <segmentDelimiter>\r</segmentDelimiter>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
              <splitType>MSH_Segment</splitType>
              <batchScript></batchScript>
            </batchProperties>
            <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
              <segmentDelimiter>\r</segmentDelimiter>
              <successfulACKCode>AA</successfulACKCode>
              <successfulACKMessage></successfulACKMessage>
              <errorACKCode>AE</errorACKCode>
              <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
              <rejectedACKCode>AR</rejectedACKCode>
              <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
              <msh15ACKAccept>false</msh15ACKAccept>
              <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
            </responseGenerationProperties>
            <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
              <successfulACKCode>AA,CA</successfulACKCode>
              <errorACKCode>AE,CE</errorACKCode>
              <rejectedACKCode>AR,CR</rejectedACKCode>
              <validateMessageControlId>true</validateMessageControlId>
              <originalMessageControlId>Destination_Encoded</originalMessageControlId>
              <originalIdMapVariable></originalIdMapVariable>
            </responseValidationProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.0.0">
          <elements/>
        </filter>
        <transportName>File Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.0.0">
          <metaDataId>5</metaDataId>
          <name>Outbound HL7 Sender</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.0.0">
            <pluginProperties/>
            <destinationConnectorProperties version="4.0.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>setOBXRemoveHeaderFooter - Two Options</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>/** - Filename: setOBXRemoveHeaderFooter.js
  	- Desc: This transformation function evaluates the msg[&apos;OBX&apos;] XML Object
	- Author:  Jeffrey Ritz w/ IntegrateIT.us
	- Created: April 6th 2019
	- Development: Option# 1 - remove Header/Footer and re-number segment sequence OBX.1
	- Modified:
	2019-04-30 (v1.8) JER - Modified handling of Option# 2 usage of if typeof msg[&apos;OBX&apos;][i] == &apos;xml&apos; statement and usage of toLowerCase() for removeOBXOptions GlobalMap variable condition evaluation
	2019-04-30 (v1.7) JER - Troubleshooting debugging statements
	2019-04-24 (v1.6) JER - Modified to evaluate the removeOBXOptions GlobalMap variable for Option1 or Option2
	2019-04-17 (v1.5) JER - Modified to compare the arrOBXRemoveLines values to the OBX.1.1 sequence element value
	2019-04-14 (v1.4) JER - Improvements to the usage and reference to the globalMap remoteFooter
	2019-04-14 (v1.3) JER - Modified to compare globalMap to OBX.5 sequence element values to re-iterate to remove segments (see Requirements)
	2019-04-10 (v1.2) JER - Modified to use globalMap to remove the footer
	2019-04-08 (v1.1) JER - Modified to trim left space (/s) characters from OBX.5 sequence element to left-justify

	-Requirements:  
	1. Create Code template script content
	var removeFooter= new Array();
	removeFooter.push(&apos;_____________________________________________________________________________&apos;);
	removeFooter.push(&apos;RADIOLOGY REPORT&apos;);
	removeFoter.push(&apos;&gt;&gt;&gt;&gt;&apos;);
	removeFooter.push(&apos;These documents contain legally protected and confidential health information&apos;);
	removeFooter.push(&apos;intended only for the use of the individual or entity named above.  If you are&apos;);
	removeFooter.push(&apos;not the intended recipient, you are hereby notified that any disclosure&apos;);
	removeFooter.push(&apos;copying, distribution, or other use of these documents is strictly&apos;);
	removeFooter.push(&apos;prohibited.  If you have received this information in error, please notify&apos;);
	removeFooter.push(&apos;the sender immediately and arrange for the return or destruction of these&apos;);
	removeFooter.push(&apos;documents.&apos;);
	channelMap.put(&apos;removeFooter&apos;,removeFooter);
	return
	2. Create/import Source Inbound HL7v2 ORU message template
	3. Create/import Source Outbound HL7v2 ORU message template
	
   	@param {object} msg[&apos;OBX&apos;] - input the msg[&apos;OBX&apos;] XML representation 
	@return {object} tmp - return transformed message 
**/

// define variables
var scriptName= &apos;setOBXRemoveHeaderFooter&apos;;
var debug= false;
var arrOBXRemoveLines= new Array();
var arrOBXKeepLines= new Array();
var removeFooter= getRemoveFooter();
if(debug== true) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; getRemoveFooter function value: &apos;+removeFooter); }
var removeOBXOptions= globalMap.get(&apos;removeOBXFooterHeader&apos;).toString().toLowerCase();  // Option1 or Option2
var i= 1;

// build new ORU excluding OBX segments
for each(child in msg.children()) {
	if(child.name().toString()!= &apos;OBX&apos;) {
		if (typeof(child) !== undefined) {
			if (child.name().toString() == &apos;MSH&apos;) tmp.MSH = child.copy();
			if (child.name().toString() == &apos;PID&apos;) tmp.PID = child.copy();
			if (child.name().toString() == &apos;PV1&apos;) tmp.PV1 = child.copy();
			if (child.name().toString() == &apos;ORC&apos;) tmp.ORC = child.copy();
			if (child.name().toString() == &apos;OBR&apos;) tmp.OBR = child.copy();
			if(debug== true) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;.tmp add segment: &apos;+child.name().toString()+&apos; AFTER: &apos;+tmp.toXMLString()); }
		}
	}
}

var nonOBXmsg= SerializerFactory.getSerializer(&apos;HL7V2&apos;).fromXML(tmp);
// logger.error(&apos;Before addition of OBX Segments message: &apos;+nonOBXmsg);

// build arrOBXRemoveLines to remove OBX lines from ORU message
for(var i= 0;i&lt;msg[&apos;OBX&apos;].length();i++) {
	for each(element in removeFooter) {
		if(typeof(msg[&apos;OBX&apos;][i]) !== undefined) {
			if(debug== true) {
				logger.error(&apos;&apos;);
				logger.error(&apos;DEBUG::&apos;+scriptName+ &apos;msg[OBX][&apos;+i+&apos;]: &apos;+JSON.stringify(msg[&apos;OBX&apos;][i]));
				logger.error(&apos;DEBUG::&apos;+scriptName+ &apos;msg[OBX][&apos;+i+&apos;][OBX.5]: &apos;+JSON.stringify(msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;]));
				logger.error(&apos;&apos;);
			}
			if(typeof(msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;]) !== undefined) {
				if(debug== true) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+ &apos; element: &apos;+element.toString()+&apos; VS msg[OBX][&apos;+i+&apos;][OBX.5][OBX.5.1].toString().indexof(element): &apos;+msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString().indexOf(element)); 
				}
				if(msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString().indexOf(element)&gt;-1) {
					if(debug== true) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+ &apos; FOUND ADD TO array -&gt; element: &apos;+element.toString()+&apos; VS msg[OBX][&apos;+i+&apos;][OBX.5][OBX.5.1].toString().indexof(element): &apos;+msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString().indexOf(element)); 
					}
					var getOBX1= msg[&apos;OBX&apos;][i][&apos;OBX.1&apos;][&apos;OBX.1.1&apos;].toString();
					if(arrOBXRemoveLines.indexOf(getOBX1)&lt;0) {
						arrOBXRemoveLines.push(getOBX1);
					}
				} 
			}
		}
	}
}

if(debug== true) {
	logger.error(&apos;DEBUG::&apos;+scriptName+&apos; arrOBXRemoveLines: &apos;+JSON.stringify(arrOBXRemoveLines));
}
channelMap.put(&apos;arrOBXRemoveLines&apos;,JSON.stringify(arrOBXRemoveLines));

// Copy existing tmp as newTmp
// var newTmp = new XML(&apos;&lt;OBX&gt;&lt;/OBX&gt;&apos;);
var newOBX5= new Array();
var newTmp= tmp;

var j= 1;
for(var i= 0;i&lt;msg[&apos;OBX&apos;].length();i++) {

	// check - remove header
	if (i&lt;=(arrOBXRemoveLines[1] - 1) &amp;&amp; i&gt;=(arrOBXRemoveLines[0] - 2)) {
		if(debug== true) { 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos;.newTMP REMOVE HEADER segment: OBX[&apos;+i+&apos;][OBX.5][OBX.5.1] contains header: &apos;+msg[&apos;OBX&apos;][i]);
		}
	} else {
		if(removeOBXOptions== &apos;option1&apos;) {
			newTmp.OBX[j]= msg[&apos;OBX&apos;][i].copy();
		} else {
			for each(item in arrOBXRemoveLines) {
				var strOBX1= msg[&apos;OBX&apos;][i][&apos;OBX.1&apos;][&apos;OBX.1.1&apos;].toString();
				if(debug== true) {
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OPTION#2 msg[OBX][&apos;+i+&apos;][OBX.1][OBX.1.1]: &apos;+strOBX1+&apos; evaluate to remove line: &apos;+item+&apos; ==&gt; &apos;+(strOBX1== item)+&apos; element: &apos;+msg[&apos;OBX&apos;][i].toString());
				}
				if(strOBX1== item) {
					if(debug== true) {
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OPTION#2 msg[OBX][&apos;+i+&apos;][OBX.1][OBX.1.1]: &apos;+strOBX1+&apos; REMOVE segment: &apos;+msg[&apos;OBX&apos;][i].toString());
					}
					delete msg[&apos;OBX&apos;][i];
				} 
			}
			
			if(typeof(msg[&apos;OBX&apos;][i]) == &apos;xml&apos;) {
				if(msg[&apos;OBX&apos;][i].toString().length&gt;0) {
					if(debug== true) {
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg[OBX][&apos;+i+&apos;] segment: &apos;+msg[&apos;OBX&apos;][i].toString()+&apos; typeof: &apos;+typeof(msg[&apos;OBX&apos;][i]));			
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; BEFORE newOBX5: &apos;+newOBX5);
					}
					newOBX5.push(msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString().replace(/\s+/g,&apos; &apos;).trim());
				}
			}
		}
	}
	j++;
}

if(removeOBXOptions== &apos;option1&apos;) {
	// 2019-04-16 JER - Modified to compare the arrOBXRemoveLines values to the OBX.1.1 sequence element value
	for(var j= 0;j&lt;newTmp[&apos;OBX&apos;].length();j++) {
	
		if(debug== true ) {
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; newTmp[OBX][&apos;+j+&apos;] typeof: &apos;+typeof(newTmp[&apos;OBX&apos;][j])+&apos; newTmp: &apos;+newTmp[&apos;OBX&apos;][j]);
		}
		for(var k= 0;k&lt;arrOBXRemoveLines.length;k++) {
			
			var strObx1= newTmp[&apos;OBX&apos;][&apos;OBX.1&apos;][j][&apos;OBX.1.1&apos;].toString();
			if(debug== true) {
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; newTmp[OBX][&apos;+j+&apos;][OBX.1][OBX.1.1]: &apos;+strObx1+&apos; line[&apos;+k+&apos;]: &apos;+arrOBXRemoveLines[k]+&apos; ==&gt; &apos;+(strObx1== arrOBXRemoveLines[k]));
			}

			if(strObx1 == arrOBXRemoveLines[k]) {
				if(debug== true) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OPTION#1 REMOVED segment[&apos;+strObx1+&apos;] segment: &apos;+newTmp[&apos;OBX&apos;][j]);
				}
				delete newTmp[&apos;OBX&apos;][j];
			}
		}
	}
	channelMap.put(&apos;newTmp-Option1&apos;,newTmp);	
// 2019-05-08 JER - Option# 2
} else {
	
	var newOBXSegment= &apos;&apos;;
	newTmp[&apos;OBX&apos;][&apos;OBX.1&apos;][&apos;OBX.1.1&apos;]= 1;
	newTmp[&apos;OBX&apos;][&apos;OBX.2&apos;][&apos;OBX.2.1&apos;]= msg[&apos;OBX&apos;][0][&apos;OBX.2&apos;][&apos;OBX.2.1&apos;];
	newTmp[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.1&apos;]= msg[&apos;OBX&apos;][0][&apos;OBX.3&apos;][&apos;OBX.3.1&apos;];
	newTmp[&apos;OBX&apos;][&apos;OBX.4&apos;][&apos;OBX.4.1&apos;]= msg[&apos;OBX&apos;][0][&apos;OBX.4&apos;][&apos;OBX.4.1&apos;];
	for each(element in newOBX5) {
		var curOBXValue= element.toString().concat(&apos;/.br/&apos;);
		newOBXSegment += curOBXValue;
	}
	newTmp[&apos;OBX&apos;][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;]= newOBXSegment;
	newTmp[&apos;OBX&apos;][&apos;OBX.11&apos;][&apos;OBX.11.1&apos;]= msg[&apos;OBX&apos;][0][&apos;OBX.11&apos;][&apos;OBX.11.1&apos;];
	newTmp[&apos;OBX&apos;][&apos;OBX.14&apos;][&apos;OBX.14.1&apos;]= msg[&apos;OBX&apos;][0][&apos;OBX.14&apos;][&apos;OBX.14.1&apos;];
	channelMap.put(&apos;newTmp-Option2&apos;,newTmp);
}

// 2019-04-10 JER - Re-number the segment sequences in OBX.1
var j= 1;
for(var i= 0;i&lt;newTmp[&apos;OBX&apos;].length();i++) {
	newTmp[&apos;OBX&apos;][i][&apos;OBX.1&apos;][&apos;OBX.1.1&apos;]= j;
	// 2019-04-08 JER - left trim to left justify each OBX.5 sequence element value
	newTmp[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;]= newTmp[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString().replace(/^\s+/,&quot;&quot;);
	j++;
}

var outMessage= SerializerFactory.getSerializer(&apos;HL7V2&apos;).fromXML(newTmp);
// logger.error(&apos;AFTER remove arrOBXRemoveLines segments message: &apos;+outMessage);
channelMap.put(&apos;outMessage&apos;,outMessage);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">TVNIfF5+XCZ8UkFESUl8MTU1fEJFUldJQ0t8MTU1fDIwMTkwNDAyMTMwMDQ2fHxPUlVeUjAxfDg2MjU0NzF8UHwyLjN8fHx8DQpQSUR8fHwzODc4NDc3fHxGQUxCT15BTkdFTEFeXl5efHwxOTcxMTIyMXxGfHx8MTM2IE1BUlRaVklMTEUgUk9BRF5eQkVSV0lDS15QQV4xODYwMzAwMDBeXnx8KDU3MCkzODAtMzk3OHx8fHx8NjI3OTIzOHx8fHx8fA0KUFYxfDF8T3xSQURJT0xPR1leXl5eXl5eXlJBRElPTE9HWSB8fHx8MjY5MV5VU01BTl5BWUVTSEFeXl5efDI2OTFeVVNNQU5eQVlFU0hBXl5eXnx8UkFEfHx8fDF8fE58MjY5MV5VU01BTl5BWUVTSEFeXl5efEV8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fDIwMTkwNDAyMDkwMTAwfHx8fHwNCk9SQ3xSRXx8MDAwMDEwMHx8Q018fDIwMTkwNDAyMTEzMTQ3XjIwMTkwNDAyMTI0MTQxXjIwMTkwNDAyMTI1OTQ1fHx8fHx8DQpPQlJ8MXw2Mjc5MjM4MDAwMDEwMF5PUkRFTlR8MDAwMDEwMHxJTV5NUiBQRUxWSVMgV08vV15eSU18fHwyMDE5MDQwMjEyNTk0NXx8fHx8fHwyMDE5MDQwMjExMzE0N3x8MjY5MV5VU01BTl5BWUVTSEFeXl5efHwwMDAwMTAwfFJBRF5MT05HTkVDS0VSLFBISUxMSVBeXl4yNTY5fDIwMTkwNDAyMDkwNzAwfE1SIFBFTEJeTVIgUEVMVklTIFdPL1d8MjAxOTA0MDIxMjU5NDV8fE1SSXxGfHxeXl4yMDE5MDQwMjExMDgxNV4yMDE5MDQwMjExMDgxNV5TfDI1Njl8fHxhZGVub215b3Npc15eXl5efDI5MzF8fHxkY29vbmV5fHx8fHwNCk9CWHwxfFRYfE1SIFBFTEJeTVIgUEVMVklTIFdPL1d8fCAgICAgICAgICAgICAgICAgICAgICAgICAgQmVyd2ljayAgSG9zcGl0YWwgQ2VudGVyICAgICAgICAgICAgICAgICAgICAgICAgICAgfHx8fHx8Rnx8fDIwMTkwNDAyMTI1OTQ1fHx8fHx8DQo=</inboundTemplate>
            <outboundTemplate encoding="base64">TVNIfF5+XCZ8fHx8fHx8fHx8fHx8fA0K</outboundTemplate>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.0.0">
            <elements/>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.0.0">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
var debug= 1;
var scriptName= &quot;Preprocessor Script&quot;;

if (debug&gt; 0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Inbound msg: &apos;+message);
// UTF-8 replace ETX (End of Text) (Hex 0x03)
message= message.replace(/\03/g,&apos;&apos;);

// UTF-8 Vertical tab
// return message.replace(/\u0B/g,&apos;&apos;);

if (debug&gt; 0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Translated msg: &apos;+message);
return message;

</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.0.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>MESSAGECONTROLID</name>
            <type>STRING</type>
            <mappingName>MessageControlId</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>FILENAME</name>
            <type>STRING</type>
            <mappingName>originalFilename</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.0.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1587593757376</time>
            <timezone>America/Chicago</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="4.0.0">
            <id>d316c4bc-9e10-4162-b67c-e514afc59fa3</id>
            <name>Channel Helpers</name>
            <revision>1</revision>
            <lastModified>
              <time>1706120884823</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>1aca2a66-a83a-4703-9ec7-dfaa3a6ad5b2</string>
              <string>3e15b608-553f-45e7-a617-712d6b75ab4d</string>
              <string>f6d6aa80-d65f-4935-a267-d6bef39a7bdf</string>
              <string>edd93839-401c-4613-b696-6d4799ebc5af</string>
              <string>2f511815-92d1-4f0f-92e9-f4f8ae576b75</string>
              <string>b4a51816-0aad-444a-b1ce-f5c11f9961bc</string>
              <string>cb7f055d-45ae-43b7-ac7c-bb2b2db34ded</string>
              <string>139cdc6a-5f40-46bd-a246-2a9a1ef8ed10</string>
              <string>316c7826-a8ee-44b4-922c-8afe0daa2c72</string>
              <string>6ff8ca2b-c4e3-4e6f-897a-17f36ed63faa</string>
              <string>27aee1c0-8ed0-4062-89b5-1c7a69a946bc</string>
              <string>291b4847-a85d-41c6-bd4a-37f008b15ca8</string>
              <string>81c836fd-cbba-4247-b438-d4c9987ee75b</string>
              <string>4318de8e-4d7b-4885-9f11-8b2ac6f9c70a</string>
              <string>e983e439-461a-424f-8348-764b29e05ecb</string>
              <string>0763b542-8ed8-4a30-9c35-de3dbf030626</string>
              <string>75c150e0-fbc5-4eef-a856-bec6b3a39a24</string>
              <string>dd55a671-a099-4b29-bdbb-85c34050037a</string>
              <string>a08848df-6dcd-4c51-aa6d-d2f85edfdcf8</string>
              <string>ae504043-55f5-497e-ac87-33686e7569b2</string>
              <string>fef7c31a-61a4-43c8-bb15-79f51a36c882</string>
              <string>69f5ad2c-3bf4-4d55-8e4a-bd6faade202d</string>
              <string>39acd9f7-c975-4787-b31e-714f748a51a2</string>
              <string>a8bd6f50-894f-443f-b248-da3ebad3a748</string>
              <string>3c355935-e639-4517-b3b1-42c6564387f8</string>
              <string>1e45f5ac-6815-40a8-8fe9-15e98eb1d07b</string>
              <string>e695a1d8-2bde-4da3-a9a8-8cd6f81ca3c0</string>
              <string>3d95de17-a2ea-446c-be4c-36c32d8cda1c</string>
              <string>205385d0-06be-4baa-b072-9b431c315827</string>
              <string>a8ebde5a-16cb-407e-a8b4-fa8766d26c73</string>
              <string>fdcb1121-0d49-4ed8-b1a1-4f4482e1c20a</string>
              <string>b1842d23-059a-4e7e-b447-3b5f5ccf5c3a</string>
              <string>8c5d3887-bd22-4018-aeda-45e5c0f8d551</string>
              <string>a127fffb-1663-4206-b6d3-348aa228c999</string>
              <string>d70fc7fa-2005-4fc7-9222-dc8119346c6e</string>
              <string>2a2ad8a5-b961-4f4c-ac09-8abee2097972</string>
              <string>143b10e0-e01b-4942-9995-2d3b9a165d76</string>
              <string>a574bc8d-e82e-4ec6-9430-f3a37278e356</string>
              <string>f6e27b4e-dbbd-48c9-994f-55c3ac511fb9</string>
              <string>6060b76d-07c2-4f9f-bc71-d2e8c44d8271</string>
              <string>08536fee-6f99-4cc4-8958-f84daaee73d5</string>
              <string>dccd5a80-a385-482e-97e4-69340bce4522</string>
              <string>bfa0bc00-9ee1-4ba5-99de-9e46faffed6d</string>
              <string>183b6833-a563-42cb-8d4d-cdcb740aef30</string>
              <string>652e2cab-f748-41b4-ae8f-f0aae48e1fca</string>
              <string>bd81709b-2ef0-4760-aba9-f455fb338f37</string>
              <string>633e9341-a80b-4c11-a6a3-1d3942bb1782</string>
              <string>695c7ed6-252e-4229-83db-5571946a8b62</string>
              <string>df3f9b9f-e8e7-47a9-a33d-c9ec7d7820fd</string>
              <string>895ee0ef-745c-464d-a46c-e51331a01c3f</string>
              <string>50dcf6de-46b4-4de5-99c2-d341abb8a41a</string>
              <string>5e411c40-61f8-467e-b132-78e54e0b5f81</string>
              <string>ed4ef090-3f7e-442d-ad30-744e3a1313f2</string>
              <string>ed3e52dc-3023-4cc7-8cad-47e0d5df89c1</string>
              <string>ec29c308-0bc3-4eb0-a948-09c2c0747afa</string>
              <string>aeaba1c0-cef9-4ad8-82d7-76d66cc95562</string>
              <string>58f42d4f-22e1-4f7c-8acf-93a9fe92619c</string>
              <string>7a21d8ac-5afa-45b8-b136-5def45d811b4</string>
              <string>23ea2137-37b1-4b00-9fb0-c8889cd4bc97</string>
              <string>2a33ffd6-253d-402f-8fb6-93bd94f65dcd</string>
              <string>7445aaa5-ff13-4c08-a8b1-817cfed2692b</string>
              <string>3d290a27-5daf-4bb0-b3d8-90c9bb8afaeb</string>
              <string>e07b74b9-756e-4ca2-8be9-01bf7abfd817</string>
              <string>3ba1448a-d0b7-4478-bc57-f9cb8dab6de9</string>
              <string>dcaf136d-a3b8-47ed-aec7-d1619675ba2d</string>
              <string>285faf0d-523a-4c8e-92ec-4a0f3a89e048</string>
              <string>3263ad34-c86d-4481-b19f-4cd3d0d83d62</string>
              <string>e1af2369-c57e-4850-bc30-f79b6fe9fa66</string>
              <string>28ddc4f3-a96b-47db-b0e0-bcfcd825f48a</string>
              <string>90bc60ed-14c6-49db-b1e6-bb70d2b1d01d</string>
              <string>fd6b9376-0847-49d7-96c6-15c540a8e39a</string>
              <string>7ee4a47d-bdf3-473d-9da9-3a62c41037b1</string>
              <string>167ee803-661a-4e6e-ac6e-b84c057f7ca1</string>
              <string>a40e7657-c37a-4fb6-aa79-48a2ea16709c</string>
              <string>5d5e5835-8cd3-43af-ac82-ffe57439bfb5</string>
              <string>47f248b1-72d5-47dc-b0b3-6aa387e9e5d6</string>
              <string>d7c3e640-7850-4d70-bb1c-3289674bd609</string>
              <string>ae961745-fe19-46bd-b240-c82888091366</string>
              <string>68581957-7fba-421f-b063-941a804fcc46</string>
              <string>0056a8aa-7aa5-4047-a693-21bac64470aa</string>
              <string>2a637fa3-fb83-4666-abe0-c754924ff738</string>
              <string>8a08c578-68dd-4550-b178-eee13ade011e</string>
              <string>d448196a-4282-4d10-8c9a-7f1dfd19abea</string>
              <string>05759809-cfbd-4546-8b71-fd28c2499763</string>
              <string>1c01997f-00d1-4e40-9e63-da5706137cdd</string>
              <string>881db416-1776-4ab6-a3ce-5065ed11cdb5</string>
              <string>982b29a5-1743-4435-8842-9810e4e34926</string>
              <string>fe1bdd5e-cce0-4509-a09a-3545b69d3d7a</string>
              <string>1bff9775-2de8-4b51-bb6b-6aaa29c144bb</string>
              <string>5e97d36f-68fe-412d-a1df-3a25a07e5770</string>
              <string>9316c229-da47-49f8-a2c0-398ba155d370</string>
              <string>20524120-844c-4733-ac8a-b01f0e14a12f</string>
              <string>55ebb133-1e4d-4172-8718-301240e9518f</string>
              <string>b0dec3c0-01ca-45a6-b826-707b80644dff</string>
              <string>d1dd4342-0ad4-42cc-b708-f47e8c6621f8</string>
              <string>20d94501-cd46-41ce-9bf1-e34639074d16</string>
              <string>492a7c6c-4768-45e2-9f49-6c5488b0a2e5</string>
              <string>9f67f48f-ca64-4419-9101-05c39d7634fd</string>
              <string>14a2ad40-95bb-4ac9-a10e-d326537cc5a6</string>
              <string>6aa39894-bc9b-448c-aac6-b6967a0ce243</string>
              <string>4108a56a-b1a6-4d8c-9e8e-b065654860d0</string>
              <string>bdb4241f-2858-49da-8d4e-2f1579679620</string>
              <string>d56da279-9aa2-4b33-8913-bf0f37a046a0</string>
              <string>692365a7-9ec6-4c38-adee-672f4084adf3</string>
              <string>3f433a3e-e46d-440a-82c1-5490ada6b54e</string>
              <string>4d223d2f-d247-47da-b6e6-6d25e8a73775</string>
              <string>4b7abf79-011a-428e-96c9-040696a2869b</string>
              <string>72471096-425b-4750-81a4-123fca2e302c</string>
              <string>3558a098-5cbc-4e05-ae03-80b4aad20e53</string>
              <string>4a05dc00-9ad6-454a-b61b-ddd074bbb36c</string>
              <string>9d1c136c-3c94-43c3-b0f8-1c1551ac6987</string>
              <string>b2fdd8c2-f387-493b-ab35-e7e9e8ce056a</string>
              <string>930a4c9e-b458-4edf-92ff-3be07d68c28d</string>
              <string>8e046241-74a3-44e0-9bf9-f0b73a36717d</string>
              <string>0f0df6c9-1153-4e0b-800b-533492ba936c</string>
              <string>f016be9d-205d-4cdd-b4fb-e7139700dd22</string>
              <string>0801e501-57ac-4418-ac59-08e0edadabf3</string>
              <string>2607531a-4f9b-48ed-9ef4-b1b71b880864</string>
              <string>455c536f-d3fb-4832-941e-ef230b683590</string>
              <string>31b37e0b-cfbf-4787-b5d3-2082328fafd7</string>
              <string>21e47d6b-9863-4045-82af-8941087a4da1</string>
              <string>9ef7f26f-d3f7-420d-a30f-26f948be596d</string>
              <string>b3869a86-7d4f-4a10-b116-24b758a191b3</string>
              <string>a6825055-e697-487f-9add-560ad9567a60</string>
              <string>f7552865-32a0-4b5b-a5fd-9b0bddffddf9</string>
              <string>9f2bcd3c-8a74-49f1-b910-aa05c509c9cb</string>
              <string>bd270438-7262-47f8-8656-1baf51287078</string>
              <string>61b10ef9-baef-45e2-b747-a0987d851033</string>
              <string>aa5ba1e6-ab11-4a9a-a03c-e0fe58b49086</string>
              <string>ec653b8b-7362-4167-98ff-3845c7560d11</string>
              <string>1710d009-1bb2-4db6-a8d8-1493e6802c18</string>
              <string>25c5fbce-cb87-4ba9-a572-0be49242a0b2</string>
              <string>13738349-4cc4-43de-9365-a27ead17b524</string>
              <string>a43f7553-71de-41d3-aa16-93cc7a48bafc</string>
              <string>e7b4b295-2b47-4b4f-97b9-b9a9082bffb1</string>
              <string>854f78f8-4ebc-4c99-9a05-c26015671807</string>
              <string>e1900e14-c2a2-426e-86f0-971353d60cdd</string>
              <string>fd3b93dd-8b65-4b9f-a090-09bc7ec9aa12</string>
              <string>72c5d63d-a405-4ccf-b85e-dba740b14fdd</string>
              <string>f6efe381-7851-4bec-96c3-231b7baf666f</string>
              <string>2f3b524c-9d7b-43f7-b4ce-e84d27cc82ff</string>
              <string>99066deb-0d43-44f6-8823-b8cfe08e7185</string>
              <string>aa30f2b5-64cf-4396-b098-efeecb2224f2</string>
              <string>9fee4e0a-7a6d-4925-bc78-59df2c1f28af</string>
              <string>d23d6225-1145-484e-8164-f070fa1f2e8c</string>
              <string>57953b24-64cb-489d-9706-bf5dc1ef94ea</string>
              <string>08955a01-dda6-468b-a8cf-73586fe7d99f</string>
              <string>52d0a715-1be1-4fb2-8f3d-448c89c148f8</string>
              <string>4941f2fb-e641-4e0a-aba4-633ddf410760</string>
              <string>470c6c09-6850-4770-820c-bbfce54196bd</string>
              <string>21a820f0-205a-4046-8c4a-3788daca4d05</string>
              <string>5cee4e54-225f-43e4-830c-6dc3fb2826f2</string>
              <string>99643fbc-fa46-4c38-a7db-ac72833847f1</string>
              <string>9a44798a-871f-4402-9397-75241b18c6b0</string>
              <string>f1e2a84e-89e2-4ea0-8edd-4418f11b7eb7</string>
              <string>fe6275f5-4efa-4c86-90e2-8788c4f9c975</string>
              <string>081454ce-e155-45a1-bfc0-2297d6317259</string>
              <string>8b61cf50-9d95-43dd-b6ab-474e2a1d2d76</string>
              <string>5b245873-9491-4fa3-9bce-08c111cbe04f</string>
              <string>4041500f-7768-4011-b273-13fe61a2ebd6</string>
              <string>eaf28278-dd66-4bcc-b7e7-9a6c422db1ee</string>
              <string>0e0f63c0-5b51-4626-9a50-c0e2f5f94d37</string>
              <string>337347d0-d5f6-492c-9dc3-638a211132ff</string>
              <string>f836f593-4c61-49bd-be13-4cb3f9c6cffb</string>
              <string>0fec52ca-be59-47c9-85b1-700dc3b3dc2e</string>
              <string>a42ba030-2419-490c-8843-889e4197cf83</string>
              <string>4d75bdd7-6d1f-4db5-a7f8-4f63efa13197</string>
              <string>53d49d46-bd95-4ce5-8f98-7685217fedbf</string>
              <string>49a7b526-0577-4811-98c2-185bb6c22d91</string>
              <string>f8b35221-21af-4a86-9a4a-1b5657b5a029</string>
              <string>2f88fefe-6f80-46b6-a20a-04c29532073e</string>
              <string>8c637e01-95b0-4b11-a28f-4518b7f8d1ae</string>
              <string>7f5da166-70b8-48e0-9fa9-cf96fd867c30</string>
              <string>e3d85e42-6410-459f-95fc-2f98af8c0db9</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>bc768cd6-d735-40b1-9617-a3417481fe19</id>
                <name>Convert CSV to JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884963</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} csv - CSV string with column headers
	@return {String} return JSON object using column headers and field keys
*/
function convertCsvToJson(csv) {
	var textXML = SerializerFactory.getSerializer(&apos;DELIMITED&apos;).toXML(csv);
	var xml = new XML(textXML);
	var dataItems = [];
	for (var i = 1; i &lt;= xml[&apos;row&apos;].length() - 1; i++) {
		var jsonData = {};
		for (var j = 1; j &lt;= xml[&apos;row&apos;][0].children().length(); j++) {
			var column = &apos;column&apos; + j.toString();
			var header = xml[&apos;row&apos;][0][column].toString().replace(/\s/g, &apos;_&apos;).replace(/-/g, &apos;_&apos;).toLowerCase();
			var value = xml[&apos;row&apos;][i][column].toString();
			
			jsonData[header] = value;
			
		}
		dataItems.push(jsonData);
	}

	return JSON.stringify(dataItems);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>537d816c-81ff-4507-85c6-85e28b8c546c</id>
                <name>Convert JSON to CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885050</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts JSON to CSV.
**/
/*	@param {String} jsonData - JSON string with [0] index key as headers for csv
	@return {String} return csv
*/	

function convertJsonToCsv(data) {
	try{
		var json = JSON.parse(data);	
		var fields = Object.keys(json[0])
		var replacer = function(key, value) { return value === null ? &apos;&apos; : value } 
		var csv = json.map(function(row){
		  return fields.map(function(fieldName){
		    return JSON.stringify(row[fieldName], replacer)
		  }).join(&apos;,&apos;)
		})
		csv.unshift(fields.join(&apos;,&apos;)) // add header column
		csv = csv.join(&apos;\r\n&apos;);
		return csv;
	}catch(error){
		return error;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>ff3df0b8-cfa2-4ec9-82ac-37c9e4830e0c</id>
                <name>Generic - Send message to channel destination</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function sendMessageToChannelDestination(channelID, destinationID, map, data) {
	var msgMap;
	var outData = {};
	
	if (!map) {
		msgMap = Maps.map();
	} else {
		msgMap = Maps.map(map);
	}

	if (data == null || data == undefined) {
		data = &apos;&apos;;
	}

	if (msgMap.get(&apos;sourceChannelId&apos;) == null) {
		msgMap.add(&apos;sourceChannelId&apos;, channelId);
	}
	if (msgMap.get(&apos;sourceChannelName&apos;) == null) {
		msgMap.add(&apos;sourceChannelName&apos;, channelName);
	}

	// Dirty way to handle connector message not being defined. Handles cases where this function 
	// is used in a source js writer.
	try {
		if (msgMap.get(&apos;sourceMessageId&apos;) == null &amp;&amp; connectorMessage &amp;&amp; connectorMessage.getMessageId()) {
			msgMap.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString());
		}
	} catch(ex) {}

	var msgRequest = new RawMessage(data, [destinationID], msgMap);
	var msgResponse = router.routeMessageByChannelId(channelID, msgRequest);

	if (msgResponse == null) {
		// return;
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;; 
	}
	if (msgResponse.getStatus() == null) {
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;;
	}

	if (msgResponse.getStatus() == &apos;ERROR&apos;) {
		throw msgResponse.getMessage();
	}

	return msgResponse.getMessage();
	
	
	// var msgResponse;

	/*
	try {
		msgResponse = router.routeMessageByChannelId(channelID, msgRequest);
		outData.status = &apos;success&apos;;
		outData.status_message = &apos;message successfully sent to channel&apos;;
	} catch (ex) {
		outData.status = &apos;error&apos;;
		outData.status_message = ex.toString();
		return outData;
	}

	if (msgResponse.getStatus() == null) {
		outData.response_status = &apos;unknown&apos;;
		logger.error(&apos;Code Template &quot;Send message to channel by id&quot;: channel &quot;&apos; + ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;);
	}
	
	switch (String(msgResponse.getStatus())) {
		case &apos;ERROR&apos;:
			outData.response_status = &apos;error&apos;;
			break;
		case &apos;FILTERED&apos;:
			outData.response_status = &apos;filtered&apos;;
			break;
		case &apos;QUEUED&apos;:
			outData.response_status = &apos;queued&apos;;
			break;
		case &apos;RECEIVED&apos;:
			outData.response_status = &apos;received&apos;;
			break;
		case &apos;SENT&apos;:
			outData.response_status = &apos;sent&apos;;
			break;
	}

	outData.response_message = msgResponse.getMessage();

	return outData;
	*/
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>f4cd9e71-4f8d-4472-80a9-31b533f4d578</id>
                <name>Get bots DB connection to specified environment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884906</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get a new bots database connection. Be sure to wrap in try/finally block to close database connection.

	@param {String} environment - prod, staging, dev, local
	@return {String} return database connection
*/
function GetBotsDBConnection() {
	var username = configurationMap.get(&apos;bots-db-user&apos;);
	var password = configurationMap.get(&apos;bots-db-pass&apos;);
	var uri = configurationMap.get(&apos;bots-db-uri&apos;);	
	return DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, uri, username, password);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>554bd282-172b-43a0-8902-992baf63b04d</id>
                <name>Get DB connection to specified environment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885107</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get a new database connection. 

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetDBConnection(environment) {
	if (environment != &apos;prod&apos; &amp;&amp; environment != &apos;staging&apos; &amp;&amp; environment != &apos;dev&apos; &amp;&amp; environment != &apos;local&apos;) {
		return null;
	}
	
	var username = configurationMap.get(&apos;docsink-db-user-&apos; + environment);
	var password = configurationMap.get(&apos;docsink-db-pass-&apos; + environment);
	var uri = configurationMap.get(&apos;docsink-db-uri-&apos; + environment);

	return DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.cj.jdbc.Driver&apos;, uri, username, password);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>552a87ed-b5a0-4546-9e5c-0a768661a351</id>
                <name>Postprocessor - Generate channel response</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884842</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function generateChannelResponse() {
	// This script executes once after a message has been processed
	// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
	
	var destinations = sourceMap.get(&apos;destinationSet&apos;);
	var metadataIds = destinations.toArray();
	
	if (metadataIds.length == 0) {
		return ResponseFactory.getErrorResponse(&apos;invalid request&apos;);
	}
	
	var smsg = message.getConnectorMessages().get(0);
	if (smsg.getStatus() == &apos;ERROR&apos;) {
		if (smsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(smsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(smsg.getResponseData().getMessage());
	}
	
	var metadataID = metadataIds[0];
	var cmsg = message.getConnectorMessages().get(metadataID);

	if (cmsg.getStatus() == &apos;ERROR&apos;) {
		if (cmsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(cmsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;SENT&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;FILTERED&apos;) {
		return ResponseFactory.getFilteredResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;QUEUED&apos;) {
		return ResponseFactory.getQueuedResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;RECEIVED&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else {
		return cmsg;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
            <name>WebPT-Common</name>
            <revision>2</revision>
            <lastModified>
              <time>1678715257049</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
                <name>Check if String contains</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122790</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
                <name>Check if String contains HTTP code</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122593</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>8515e088-5c50-47ee-9e2f-9fad1ecf48bd</id>
                <name>Check if String is JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123309</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Added by Kirby Knight
	12/21/2020
	Test for JSON

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5f2f84ba-3e66-4be3-8260-8fbd8258bd92</id>
                <name>Check if the PDF is valid</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122055</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
//This function is used for checking the word &quot;PDF&quot; in inbound attachment.
function isValidBase64PDF(base64) {
	const ENCODED_PDF_SIGN = &quot;JVBERi&quot;; // %PDF sign
	const PDF_EOF = &quot;JSVFT0YNCg&quot;; // %EOF
	var pdfBase64Size = (base64.length() * (3 / 4)) - 1;
	
	return (base64.indexOf(ENCODED_PDF_SIGN) != -1 &amp;&amp; base64.indexOf(PDF_EOF) != -1 &amp;&amp; pdf_base64_size &gt; 36);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
                <name>Convert JSON date to HL7v2 date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122137</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
                <name>Convert JSON datetime to HL7v2 datetime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122430</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>bb21449a-df39-48c6-be52-24106c8df4c4</id>
                <name>Destination Formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Kirby Knight 03/10/2021
	
	This function will remove all other ROOT.Meta.Destinations nodes that are not passed in the
	destination variable and removes the ROOT.Meta.Destinations[x].Destination node

	@param {Any} destination - 
	@return {String} return description
*/
function formatDestinations(destination) {
var arrDestinations = msg[&apos;Meta&apos;][&apos;Destinations&apos;];
	//  Start at the end of the array because of the posibility of deleted array items 
	for (var i = arrDestinations.length - 1; i &gt;= 0; i--) {
		if (arrDestinations[i][&apos;Destination&apos;] == destination){
			delete arrDestinations[i][&apos;Destination&apos;]
		}else if (arrDestinations[i][&apos;Destination&apos;] != destination){
			arrDestinations.splice(i, 1);
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
                <name>Extract JSON node data</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121748</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7ed44f8a-fa40-4f3e-9426-3021604eabe0</id>
                <name>Get Feature Value by Name and Database</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123262</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns a string containing the feature value (system property) for a specific client database.

	@param {String} featureName - name of the feature, ie: &quot;BetterPTBidirectionalScheduling&quot;
	@param {String} databaseIdentifier - database name or databaseID / TenantID
	@param {String} databaseIdentifierType - what value is provided in databaseIdentifier. current options include &quot;ID&quot; or &quot;NAME&quot;
	@return {String} returns feature value
*/
function getFeatureValueByNameDatabase(featureName, databaseIdentifier, databaseIdentifierType) {
	var paramList = new Packages.java.util.ArrayList();
	paramList.add(featureName);
	paramList.add(databaseIdentifier);
	paramList.add(databaseIdentifierType);
	
	var sSQL = &apos;EXEC [dbo].[pr_FeatureValueByNameDatabase] ?, ?, ?&apos;;
	
	try {
		var result = executeSharedDBStatementFhirCh(sSQL, true, paramList);
		var featureValue ;
		if(result.next()){			//Added
		 featureValue = result.getString(1);
		}
		return featureValue;
	} catch (e) {
		logger.error(e);
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>9842be2c-c633-42ac-87f1-f91aca9e370f</id>
                <name>JSON Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121776</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function populates the MR and PI patient IDS to channelMap

	@return {String} return description
*/
function jsonPatientIds() {
	for each (patId in msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) {
	if (patId[&apos;IDType&apos;].toString() == &apos;MR&apos;){
		channelMap.put(&apos;extPatId&apos;, patId[&apos;ID&apos;].toString());
	}else if(patId[&apos;IDType&apos;].toString() == &apos;PI&apos;){
		channelMap.put(&apos;patId&apos;, patId[&apos;ID&apos;].toString());
	}
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
                <name>Verify JSON node for existance</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>394664c0-d536-4310-970e-181dc03ee7da</id>
            <name>WebPT-Conversions</name>
            <revision>2</revision>
            <lastModified>
              <time>1690140133427</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
                <name>Convert FHIR codes to HL7v2 codes</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122899</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>2fc8cbf3-0d92-4d1d-a3d6-136c09bd9f2a</id>
            <name>WebPT-Custom Database Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1703964939898</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>23c0b510-63e4-40fa-a4e1-7b2b92ce9a96</id>
                <name>Execute Statement Shared DB Conn clientDb Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122401</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Executes a SQL statement using a shared database connection stored in the Global Map. If the
connection does not exist, creates it.

@param {String} statement - The SQL statement to execute
@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
@param {List} paramList - A Java List object containing the parameters for the statement (optional)
 */
function executeSharedDBStatementclientDbCh(statement, isQuery, paramList) {
    var result;

    try {
        var dbConnclientDbCh = globalChannelMap.get(&quot;dbConnclientDbCh&quot;);

        if (dbConnclientDbCh == null || dbConnclientDbCh.getConnection().isClosed()) {
            dbConnclientDbCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;), $(&apos;dbClient&apos;), $(&apos;dbUserFhir&apos;), $(&apos;dbPwFhir&apos;));
            globalChannelMap.put(&quot;dbConnclientDbCh&quot;, dbConnclientDbCh);
        }

        if (paramList == undefined) {
            paramList = new Packages.java.util.ArrayList();
        }

        if (isQuery) {
            result = dbConnclientDbCh.executeCachedQuery(statement, paramList);
        } else {
            result = dbConnclientDbCh.executeUpdate(statement, paramList);
        }
    } catch (e) {
        logger.error(e);
    }
    finally {
        return result;
    }
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>4efb3110-a83f-48b5-93ad-79c847b51865</id>
                <name>Execute Statement Shared DB Conn clntAcl Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123455</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClntAclCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnClntAclCh = globalChannelMap.get(&quot;dbConnClntAclCh&quot;);

		if (dbConnClntAclCh == null || dbConnClntAclCh.getConnection().isClosed())
		{
			dbConnClntAclCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbClntAcl&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnClntAclCh&quot;, dbConnClntAclCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnClntAclCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnClntAclCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>d96d45dd-57f7-4aa9-9bf4-e464d31b94c6</id>
                <name>Execute Statement Shared DB Conn FHIR</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121922</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhir(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhir.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhir.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6014068e-c021-4a38-9fa6-6f38f6a2cdab</id>
                <name>Execute Statement Shared DB Conn FHIR Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123492</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhirCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhirCh = globalChannelMap.get(&quot;dbConnFhirCh&quot;);

		if (dbConnFhirCh == null || dbConnFhirCh.getConnection().isClosed())
		{
			dbConnFhirCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnFhirCh&quot;, dbConnFhirCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhirCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhirCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fbd5c4a1-b816-4496-acdf-067005f1d376</id>
                <name>Execute Statement Shared DB Conn Translations Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123008</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementTranslationsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnTranslationsCh = globalChannelMap.get(&quot;dbConnTranslationsCh&quot;);

		if (dbConnTranslationsCh == null || dbConnTranslationsCh.getConnection().isClosed())
		{
			dbConnTranslationsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlTranslations&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnTranslationsCh&quot;, dbConnTranslationsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnTranslationsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnTranslationsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5d1a5577-4ba4-4d1e-b6cd-e2d924164909</id>
                <name>Execute Statement with Shared DB Conn ODS Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122280</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdsCh = globalChannelMap.get(&quot;dbConnOdsCh&quot;);

		if (dbConnOdsCh == null || dbConnOdsCh.getConnection().isClosed())
		{
			dbConnOdsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOds&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdsCh&quot;, dbConnOdsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>3991db14-0c0b-4123-952c-5164c1ded501</id>
                <name>Execute Statement with Shared DB Conn ODW Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122960</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.  THis connects to the ODW db in Azure

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdwCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdwCh = globalChannelMap.get(&quot;dbConnOdwCh&quot;);

		if (dbConnOdwCh == null || dbConnOdwCh.getConnection().isClosed())
		{
			dbConnOdwCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOdw&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdwCh&quot;, dbConnOdwCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdwCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdwCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fae08c88-7550-479a-b8ed-ffef47e8eed9</id>
                <name>executeSharedDBStatementClient</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121956</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClient(statement, isQuery, paramList, dbname)
{
	var result;
 	var dburl= &apos;jdbc:sqlserver://AZW1DEV-SQL02.clinicient.com:1433;databaseName=&apos;+dbname+&apos;&apos;;
	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),dburl,$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			
			//globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		result = dbConnFhir.executeCachedQuery(statement);
	
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>ed20a457-5beb-4aea-9bb9-cf91112ccc56</id>
            <name>WebPT-Default Functions</name>
            <revision>10</revision>
            <lastModified>
              <time>1690140133487</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>a8a9a0c8-9322-46dc-bef8-011eb3d70291</id>
                <name>Create Header for CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121678</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This creates a header for csv files based on the contents of the header variable.  The header
	variable is populated in the channel from the outbound msg template

	@return {String} return description
*/
function createHeader() {
	//Destination transformer.  this creates the header for each new file

	var path = java.nio.file.Paths.get($(&apos;filePath&apos;)+$(&apos;fileName&apos;));
	var bytes = (new java.lang.String($(&apos;header&apos;))).getBytes(&quot;UTF-8&quot;);
	try {
	  java.nio.file.Files.write(path, bytes, java.nio.file.StandardOpenOption.CREATE_NEW);
	}
	catch (e) {
	  //logger.info(&quot; should throw IOException if file already exists&quot;);
	
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5a886a1f-dab1-41b5-94c6-1a639907d7da</id>
                <name>Filter Message Evaluate Received Checksum</name>
                <revision>33</revision>
                <lastModified>
                  <time>1678916806664</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating a checksum for each provided message.  We save off the most recent 100 unique checksum values in a global 
	array so if the current message has been recently received we are able to ignore it.
	
	@author:  	Jeffrey Ritz
	@scriptName: 	filterEvaluateReceivedChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {boolean} filter - return filter boolean (true= filter msg, false= do not filter msg)
		persist received_checksum global ChannelMap array
		persist filterMessage ChannelMap variable
	@history
*/
function filterEvaluateReceivedChecksum(msg) {	

	var scriptName= &apos;filterEvaluateReceivedChecksum&apos;
	var filter = false;
	var received_len_limit = 999;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B connectorMessage.getRawData() typeof: &apos;+typeof(connectorMessage.getRawData())+&apos; msg: &apos;+connectorMessage.getRawData());
	} // end if 
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	// var dataBytes = new java.lang.String(connectorMessage.getRawData()).getBytes(&apos;UTF-8&apos;);
	// message = new String(message.getBytes(&quot;utf-8&quot;), &quot;utf-8&quot;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	// var dataBytes = new java.lang.String(msg.getBytes(&apos;UTF-8&apos;));
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);

	// var messageObjectgetBytes= checksum.update(connectorMessage.getRawData().getBytes());
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 
	
	$c(&apos;checksum&apos;, checksum.getValue());
	
	//grab the global channel map variable holding the last X unique checksums that we&apos;ve received
	var received = $gc(&apos;received_checksums&apos;);
	
	if (received == undefined) {
		var received = new Array();
		received.push(checksum.getValue());
	} else {
		//check if we&apos;ve recently received this message, skip it if so
		if (received.indexOf(checksum.getValue()) &gt; -1) {
			filter = true;
		//we haven&apos;t seen it recently, so remember it and allow it through
		} else {
			var received_len = received.length;
			if (received_len &gt; received_len_limit) {
				//remove oldest/first entry, shift all entries forward, and add new entry to end
				received.shift();
				received[received_len_limit] = checksum.getValue();
			} else {
				//add new entry to end of array
				received[received_len] = checksum.getValue();
			} // end if 
		} // end if 
	} // end if 

	 //debug code
	/*for (x=0; x&lt;=received_len_limit; x++) {
		$c(&apos;received-&apos;+x, received[x]);
	} */

	$c(&apos;filterMessage&apos;,filter);
	$gc(&apos;received_checksums&apos;,received);

	return filter;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fbd0484d-74a2-48e4-aedd-f97c2fcefa16</id>
                <name>Get Message Checksum</name>
                <revision>12</revision>
                <lastModified>
                  <time>1678916806703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating and reutrning a checksum for each provided message
	
	@author:  	Jeffrey Ritz
	@scriptName: 	getMessageChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {object} result - return checksum value
	@history
	2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() to remove the exponential representation of the number value
*/
function getMessageChecksum(msg) {	

	var scriptName= &apos;getMessageChecksum&apos;;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	} // end if 
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 

	var checksumValue= checksum.getValue();
	// 2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() 
	var arrChecksumValue= new Array(); 
	arrChecksumValue.push(checksumValue);
	$c(&apos;checksum&apos;, arrChecksumValue);

	return checksumValue;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>91db9bd1-ca92-4dcc-bba4-e1ece603fc87</id>
                <name>Remove Child Object From Parent Object Json</name>
                <revision>22</revision>
                <lastModified>
                  <time>1678916845037</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON child object and it&apos;s descendents from a parent object JSON
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeChildObjectFromParentObjectJson.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
		{string} parentObject - place the name of the string to be designated as the parent object in the JSON
		{string} childObject  - place the name of the string to be designated as the child object to be deleted from the JSON
	@param {object} msg - return modified Json object msg excluding specified Json child object
	@history
*/
function removeChildObjectFromParentObjectJson(msg, parentObject, childObject) {
	
	var scriptName= &apos;removeChildObjectFromParentObjectJson&apos;;
	var debug= 0;

	//var strObjJson= JSON.parse(msg);
	var strObjJson= JSON.stringify(msg);
	
	//var objJson= JSON.parse(msg);
	var newParentObjects= new Object();
	var parentObjects= msg;
	var arrParentObjects= new Array();
	var arrTransactionObjects= new Array();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof parentObjects: &apos;+typeof(parentObjects));
	for (var key in parentObjects) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof key: &apos;+typeof(key)+&apos; key: &apos;+key);
		if(key== parentObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof objJson[key]: &apos;+typeof(parentObjects[key])+&apos; parentObjects[key]: &apos;+JSON.stringify(parentObjects[key]));
			
			var newChildObjects= new Object();
			var childObjects= parentObjects[key];
			var arrChildObjects= new Array();
			
			for(var key2 in childObjects) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key2: &apos;+typeof(key2)+&apos; key2: &apos;+key2+&apos; childObject: &apos;+childObject);
				for(var key3 in childObjects[key2]) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key3: &apos;+typeof(key3)+&apos; key3: &apos;+key3+&apos; childObject: &apos;+childObject);
					if(key3== childObject) {
						var transactionObject= new Object();
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; childObject typeof: &apos;+typeof(childObjects[key2][key3])+&apos; childObject: &apos;+JSON.stringify(childObjects[key2][key3]));
						transactionObject.key= key3;
						transactionObject.value= childObjects[key2][key3];
						delete childObjects[key2][key3];
						if(debug&gt;0) logger.info(&apos;DEBUG::&apos;+scriptName+&apos; DELETE childObject: &apos;+key3+&apos; of parentObject: &apos;+JSON.stringify(childObjects[key2]));
						arrTransactionObjects.push(transactionObject);
					} // end if
				} // end for 
				arrChildObjects.push(childObjects[key2]);
			} // end for
			newParentObjects[key]= arrChildObjects;
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add all child keys: &apos;+JSON.stringify(arrChildObjects)+&apos; into ParentObject[&apos;+key+&apos;]: &apos;+newParentObjects[key]);
		} else {
			newParentObjects[key]= parentObjects[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+parentObjects[key]+&apos; string: &apos;+JSON.stringify(parentObjects[key]));
		} // end if
		arrParentObjects.push(newParentObjects);
	} // end for 
	var newMsg= arrParentObjects;
	channelMap.put(&apos;removeChildObjectMsg&apos;,newMsg);
	channelMap.put(&apos;removedChildTransIds&apos;,arrTransactionObjects);
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));
	return newMsg;
	
} </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2ff28338-dfb6-445d-a04e-c74b5486a08c</id>
                <name>Remove Object From Json</name>
                <revision>26</revision>
                <lastModified>
                  <time>1703964988318</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  Desc: This function will remove a JSON object and it&apos;s descendents from the msg
	
	fileName: 	removeObjectFromJson.js
	name:		Remove Object From Json	
	Authored:  	Jeffrey Ritz
	Created: 		2023-03-09
	Details:
		@param IN {string} msg - provide parent JSON object (i.e. Inbound connectorMessage.getRawData() - msg)
		@param IN {string} removeObject - provide JSON object to evaluate and remove from parent JSON object (msg)
		OUT (object) newMsg - return JSON object from processing
	@history
	2023-03-15 JER - Modified to include removeObject function parameter to specify specific JSON object by referencing key to be removed
*/
function removeObjectFromJson(msg, removeObject) {
	
	var scriptName= &apos;removeObjectFromJson&apos;;
	var debug= 0;
	//var objJson= JSON.stringify(msg);
	var objJson= JSON.parse(msg);
	var newObjJson= new Object();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof objJson: &apos;+typeof(objJson)+&apos; objJSON: &apos;+JSON.stringify(objJson));
	for (var key in objJson) {
		if(key== removeObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; DELETE key: &apos;+key);
			// delete objJson[key];
		} else {
			newObjJson[key]= objJson[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+objJson[key]+&apos; string: &apos;+JSON.stringify(objJson[key]));
		} // end if 
	} // end for 
	var newMsg= newObjJson;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));

	// return JSON.stringify(newMsg);
	return newMsg;
} 
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>993a6fd8-454a-4133-ba32-dbcfea71582b</id>
                <name>Update EDITransactionLog</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123233</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	The purpose of this function is to update the status in Insight.
	Populate the channel map with the following variables functionalGroupControlNumber, status, eventDate

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateStatus () {

	//  Build the llst of paramters to pass to the database
	var paramList = new Packages.java.util.ArrayList();
	paramList.add($(&apos;functionalGroupControlNumber&apos;));
	paramList.add($(&apos;eventDate&apos;));  //dateTime in the acknoledged field in this format (&quot;2017-07-31 14:15:01.577&quot;)
	paramList.add(new java.lang.Integer(parseInt($(&apos;status&apos;), 10)));
	
//	logger.info(&quot;updateStatus &quot;+paramList);

	//  SQL Statement and paramters that will be sent to SQL
	var statement = &quot;EXEC dbo.pr_EDITransactionLog_Update ?, ?, ?&quot;;
	//  Code template used for establishiing connection and passing the sql statement and parameter list  
	var result = executeSharedDBStatementFhirCh(statement, false, paramList);
	return result;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>42cb290e-5fb0-46b8-82db-576ea1e1ba0d</id>
                <name>Update EDITransactionLog from responseStatus in the response transformer </name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123356</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Call this in the response transformer on the destination.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateReponseStatus() {
	var status = 0;
	if (responseStatus == SENT){
		var status = 1;
		channelMap.put(&apos;status&apos;,status);
	}

updateStatus()
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2223579b-f914-4be7-a575-f1a2a2aa1ae2</id>
                <name>ValidateToString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123044</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} mapping - 
	@param {Any} defaultValue - 
	@param {Any} replacement - 
	@return {String} return description
*/
function validateToString(mapping, defaultValue, replacement) {
    if (mapping == null) {
        mapping = &apos;&apos;;
    }
    return validate(mapping, defaultValue, replacement).toString() + &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>8c9a8268-4ef0-43e9-ae5b-bf8895f0b80c</id>
            <name>WebPT-FORMAT</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939902</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>Include any functions or codes with 
-date &amp; time formating related
-data type formatting</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>920c9ead-70a6-4168-9d95-89261b73ae44</id>
                <name>12digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123520</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Take any 12 digit string yyyyMMddHHmm and change to MM/dd/yyyy HH:mm 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm
*/
function yyyyMMddHHmm(string) {
	return DateUtil.convertDate(&quot;yyyyMMddHHmm&quot;, &quot;MM/dd/yyyy HH:mm&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fe2689ec-1946-46d5-8dd6-8fbbf106e1e6</id>
                <name>14digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122871</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Take 14 digit string yyyyMMddHHmmss and change to MM/dd/yyyy HH:mm:ss 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm:ss
*/
function yyyyMMddHHmmss(string) {
	if (string.length == 14) {
		  return DateUtil.convertDate(&quot;yyyyMMddHHmmss&quot;, &quot;MM/dd/yyyy HH:mm:ss&quot;, string);
	}
	else {
		return &quot;unregcognized string&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>b9db35e2-d5bd-48a1-8cc6-3475c698d7b4</id>
                <name>currentDT_yyyy-MM-dd HH:mm:ss.SSS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123114</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Kirby Knight
	Date Modified:  11/09/2020
	Retund the current date/time down to the millisecond

	@return {String} return description
*/
function currentDtToMilliseconds() {
	return DateUtil.getCurrentDate(&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7e747999-4bec-43fc-978d-7049d3543cf0</id>
                <name>fixHL7NodeOrder</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/

function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>dfedacf6-773b-413e-b78d-1bf16a92071d</id>
                <name>formatHL7Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121643</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Take any eight digit HL7 message data string (yyyyMMdd) and formats it human-readable format (MM/dd/yyyy)
	such as 20090612 -&gt; 06/12/2009

	@param {String} arg1 - 8 digit HL7 message data string yyyyMMdd
	@return {String} return date format as MM/dd/yyyy
*/
function formatHL7Date(string) {
	return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;MM/dd/yyyy&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>a8f54921-2cb6-4134-8806-3c4e10a757d9</id>
                <name>getCurrentLocalTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122014</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = getCurrentLocalTimestamp();

	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestamp() {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(&quot;EST&quot;)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6c5f1bd8-ebbf-4c8e-b465-0be8ccaba0d0</id>
                <name>getCurrentLocalTimeToMs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123077</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	Gets the current local date/time to the milliseconds
	Converts to the timezone that is passed in Examples (America/New_York, America/Chicago, America/Phoenix )

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestampToMs(timeZone) {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timeZone)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>78d74c5b-c881-404a-ad96-4e909e1a19f3</id>
                <name>phoneToE164</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121982</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Insight phone number to E164 format 5554446666 to +15554446666

	@param {Any} phoneIn - 
	@return {String} return description
*/
function phoneToE164(phoneIn) {
	logger.info(&apos;L1 &apos;+phoneIn);
	if(phoneIn != null ){
	//phoneIn = &apos;+1&apos; + phoneIn.toString(); 
	logger.info(&apos;L2 &apos;+phoneIn);
	return &apos;+1&apos; + phoneIn.toString(); 
	} else{
		return null;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>6a32d94d-408c-4e10-9799-e45e150b5c1f</id>
            <name>WebPT-MISC</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939909</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>miscellaneous javascript</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>84b4f1c7-f82d-4140-9fbd-98a95f68ff32</id>
                <name>getChannelState</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122648</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetChannelState(channel_id) {

    var channel_status = &quot;NA&quot;;

    var channel_count = parseInt(Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().size());

    for(var i=0;i&lt;channel_count;i++) {
        if (channel_id == Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getChannelId()) {
            channel_status = Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getState();
        }
    }

    return channel_status;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>715435a9-cb15-4e8f-bc5b-4249eaea6e17</id>
                <name>momentjs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122487</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Testing MIRTH-3794 using external JavaScript library &quot;moment.js&quot;
*/
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=b():&quot;function&quot;==typeof define&amp;&amp;define.amd?define(b):a.moment=b()}(this,function(){&quot;use strict&quot;;function a(){return Hc.apply(null,arguments)}function b(a){Hc=a}function c(a){return&quot;[object Array]&quot;===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||&quot;[object Date]&quot;===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c&lt;a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&amp;&amp;(a[c]=b[c]);return f(b,&quot;toString&quot;)&amp;&amp;(a.toString=b.toString),f(b,&quot;valueOf&quot;)&amp;&amp;(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ca(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&amp;&amp;(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow&lt;0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&amp;&amp;(a._isValid=a._isValid&amp;&amp;0===b.charsLeftOver&amp;&amp;0===b.unusedTokens.length&amp;&amp;void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if(&quot;undefined&quot;!=typeof b._isAMomentObject&amp;&amp;(a._isAMomentObject=b._isAMomentObject),&quot;undefined&quot;!=typeof b._i&amp;&amp;(a._i=b._i),&quot;undefined&quot;!=typeof b._f&amp;&amp;(a._f=b._f),&quot;undefined&quot;!=typeof b._l&amp;&amp;(a._l=b._l),&quot;undefined&quot;!=typeof b._strict&amp;&amp;(a._strict=b._strict),&quot;undefined&quot;!=typeof b._tzm&amp;&amp;(a._tzm=b._tzm),&quot;undefined&quot;!=typeof b._isUTC&amp;&amp;(a._isUTC=b._isUTC),&quot;undefined&quot;!=typeof b._offset&amp;&amp;(a._offset=b._offset),&quot;undefined&quot;!=typeof b._pf&amp;&amp;(a._pf=j(b)),&quot;undefined&quot;!=typeof b._locale&amp;&amp;(a._locale=b._locale),Jc.length&gt;0)for(c in Jc)d=Jc[c],e=b[d],&quot;undefined&quot;!=typeof e&amp;&amp;(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),Kc===!1&amp;&amp;(Kc=!0,a.updateOffset(this),Kc=!1)}function o(a){return a instanceof n||null!=a&amp;&amp;null!=a._isAMomentObject}function p(a){return 0&gt;a?Math.ceil(a):Math.floor(a)}function q(a){var b=+a,c=0;return 0!==b&amp;&amp;isFinite(b)&amp;&amp;(c=p(b)),c}function r(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e&gt;d;d++)(c&amp;&amp;a[d]!==b[d]||!c&amp;&amp;q(a[d])!==q(b[d]))&amp;&amp;g++;return g+f}function s(){}function t(a){return a?a.toLowerCase().replace(&quot;_&quot;,&quot;-&quot;):a}function u(a){for(var b,c,d,e,f=0;f&lt;a.length;){for(e=t(a[f]).split(&quot;-&quot;),b=e.length,c=t(a[f+1]),c=c?c.split(&quot;-&quot;):null;b&gt;0;){if(d=v(e.slice(0,b).join(&quot;-&quot;)))return d;if(c&amp;&amp;c.length&gt;=b&amp;&amp;r(e,c,!0)&gt;=b-1)break;b--}f++}return null}function v(a){var b=null;if(!Lc[a]&amp;&amp;&quot;undefined&quot;!=typeof module&amp;&amp;module&amp;&amp;module.exports)try{b=Ic._abbr,require(&quot;./locale/&quot;+a),w(b)}catch(c){}return Lc[a]}function w(a,b){var c;return a&amp;&amp;(c=&quot;undefined&quot;==typeof b?y(a):x(a,b),c&amp;&amp;(Ic=c)),Ic._abbr}function x(a,b){return null!==b?(b.abbr=a,Lc[a]=Lc[a]||new s,Lc[a].set(b),w(a),Lc[a]):(delete Lc[a],null)}function y(a){var b;if(a&amp;&amp;a._locale&amp;&amp;a._locale._abbr&amp;&amp;(a=a._locale._abbr),!a)return Ic;if(!c(a)){if(b=v(a))return b;a=[a]}return u(a)}function z(a,b){var c=a.toLowerCase();Mc[c]=Mc[c+&quot;s&quot;]=Mc[b]=a}function A(a){return&quot;string&quot;==typeof a?Mc[a]||Mc[a.toLowerCase()]:void 0}function B(a){var b,c,d={};for(c in a)f(a,c)&amp;&amp;(b=A(c),b&amp;&amp;(d[b]=a[c]));return d}function C(b,c){return function(d){return null!=d?(E(this,b,d),a.updateOffset(this,c),this):D(this,b)}}function D(a,b){return a._d[&quot;get&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b]()}function E(a,b,c){return a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b](c)}function F(a,b){var c;if(&quot;object&quot;==typeof a)for(c in a)this.set(c,a[c]);else if(a=A(a),&quot;function&quot;==typeof this[a])return this[a](b);return this}function G(a,b,c){var d=&quot;&quot;+Math.abs(a),e=b-d.length,f=a&gt;=0;return(f?c?&quot;+&quot;:&quot;&quot;:&quot;-&quot;)+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function H(a,b,c,d){var e=d;&quot;string&quot;==typeof d&amp;&amp;(e=function(){return this[d]()}),a&amp;&amp;(Qc[a]=e),b&amp;&amp;(Qc[b[0]]=function(){return G(e.apply(this,arguments),b[1],b[2])}),c&amp;&amp;(Qc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function I(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,&quot;&quot;):a.replace(/\\/g,&quot;&quot;)}function J(a){var b,c,d=a.match(Nc);for(b=0,c=d.length;c&gt;b;b++)Qc[d[b]]?d[b]=Qc[d[b]]:d[b]=I(d[b]);return function(e){var f=&quot;&quot;;for(b=0;c&gt;b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function K(a,b){return a.isValid()?(b=L(b,a.localeData()),Pc[b]=Pc[b]||J(b),Pc[b](a)):a.localeData().invalidDate()}function L(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Oc.lastIndex=0;d&gt;=0&amp;&amp;Oc.test(a);)a=a.replace(Oc,c),Oc.lastIndex=0,d-=1;return a}function M(a){return&quot;function&quot;==typeof a&amp;&amp;&quot;[object Function]&quot;===Object.prototype.toString.call(a)}function N(a,b,c){dd[a]=M(b)?b:function(a){return a&amp;&amp;c?c:b}}function O(a,b){return f(dd,a)?dd[a](b._strict,b._locale):new RegExp(P(a))}function P(a){return a.replace(&quot;\\&quot;,&quot;&quot;).replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,&quot;\\$&amp;&quot;)}function Q(a,b){var c,d=b;for(&quot;string&quot;==typeof a&amp;&amp;(a=[a]),&quot;number&quot;==typeof b&amp;&amp;(d=function(a,c){c[b]=q(a)}),c=0;c&lt;a.length;c++)ed[a[c]]=d}function R(a,b){Q(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function S(a,b,c){null!=b&amp;&amp;f(ed,a)&amp;&amp;ed[a](b,c._a,c,a)}function T(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function U(a){return this._months[a.month()]}function V(a){return this._monthsShort[a.month()]}function W(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12&gt;d;d++){if(e=h([2e3,d]),c&amp;&amp;!this._longMonthsParse[d]&amp;&amp;(this._longMonthsParse[d]=new RegExp(&quot;^&quot;+this.months(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;),this._shortMonthsParse[d]=new RegExp(&quot;^&quot;+this.monthsShort(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;)),c||this._monthsParse[d]||(f=&quot;^&quot;+this.months(e,&quot;&quot;)+&quot;|^&quot;+this.monthsShort(e,&quot;&quot;),this._monthsParse[d]=new RegExp(f.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),c&amp;&amp;&quot;MMMM&quot;===b&amp;&amp;this._longMonthsParse[d].test(a))return d;if(c&amp;&amp;&quot;MMM&quot;===b&amp;&amp;this._shortMonthsParse[d].test(a))return d;if(!c&amp;&amp;this._monthsParse[d].test(a))return d}}function X(a,b){var c;return&quot;string&quot;==typeof b&amp;&amp;(b=a.localeData().monthsParse(b),&quot;number&quot;!=typeof b)?a:(c=Math.min(a.date(),T(a.year(),b)),a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+&quot;Month&quot;](b,c),a)}function Y(b){return null!=b?(X(this,b),a.updateOffset(this,!0),this):D(this,&quot;Month&quot;)}function Z(){return T(this.year(),this.month())}function $(a){var b,c=a._a;return c&amp;&amp;-2===j(a).overflow&amp;&amp;(b=c[gd]&lt;0||c[gd]&gt;11?gd:c[hd]&lt;1||c[hd]&gt;T(c[fd],c[gd])?hd:c[id]&lt;0||c[id]&gt;24||24===c[id]&amp;&amp;(0!==c[jd]||0!==c[kd]||0!==c[ld])?id:c[jd]&lt;0||c[jd]&gt;59?jd:c[kd]&lt;0||c[kd]&gt;59?kd:c[ld]&lt;0||c[ld]&gt;999?ld:-1,j(a)._overflowDayOfYear&amp;&amp;(fd&gt;b||b&gt;hd)&amp;&amp;(b=hd),j(a).overflow=b),a}function _(b){a.suppressDeprecationWarnings===!1&amp;&amp;&quot;undefined&quot;!=typeof console&amp;&amp;console.warn&amp;&amp;console.warn(&quot;Deprecation warning: &quot;+b)}function aa(a,b){var c=!0;return g(function(){return c&amp;&amp;(_(a+&quot;\n&quot;+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function ba(a,b){od[a]||(_(b),od[a]=!0)}function ca(a){var b,c,d=a._i,e=pd.exec(d);if(e){for(j(a).iso=!0,b=0,c=qd.length;c&gt;b;b++)if(qd[b][1].exec(d)){a._f=qd[b][0];break}for(b=0,c=rd.length;c&gt;b;b++)if(rd[b][1].exec(d)){a._f+=(e[6]||&quot; &quot;)+rd[b][0];break}d.match(ad)&amp;&amp;(a._f+=&quot;Z&quot;),va(a)}else a._isValid=!1}function da(b){var c=sd.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ca(b),void(b._isValid===!1&amp;&amp;(delete b._isValid,a.createFromInputFallback(b))))}function ea(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970&gt;a&amp;&amp;h.setFullYear(a),h}function fa(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970&gt;a&amp;&amp;b.setUTCFullYear(a),b}function ga(a){return ha(a)?366:365}function ha(a){return a%4===0&amp;&amp;a%100!==0||a%400===0}function ia(){return ha(this.year())}function ja(a,b,c){var d,e=c-b,f=c-a.day();return f&gt;e&amp;&amp;(f-=7),e-7&gt;f&amp;&amp;(f+=7),d=Da(a).add(f,&quot;d&quot;),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ka(a){return ja(a,this._week.dow,this._week.doy).week}function la(){return this._week.dow}function ma(){return this._week.doy}function na(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function oa(a){var b=ja(this,1,4).week;return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function pa(a,b,c,d,e){var f,g=6+e-d,h=fa(a,0,1+g),i=h.getUTCDay();return e&gt;i&amp;&amp;(i+=7),c=null!=c?1*c:e,f=1+g+7*(b-1)-i+c,{year:f&gt;0?a:a-1,dayOfYear:f&gt;0?f:ga(a-1)+f}}function qa(a){var b=Math.round((this.clone().startOf(&quot;day&quot;)-this.clone().startOf(&quot;year&quot;))/864e5)+1;return null==a?b:this.add(a-b,&quot;d&quot;)}function ra(a,b,c){return null!=a?a:null!=b?b:c}function sa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ta(a){var b,c,d,e,f=[];if(!a._d){for(d=sa(a),a._w&amp;&amp;null==a._a[hd]&amp;&amp;null==a._a[gd]&amp;&amp;ua(a),a._dayOfYear&amp;&amp;(e=ra(a._a[fd],d[fd]),a._dayOfYear&gt;ga(e)&amp;&amp;(j(a)._overflowDayOfYear=!0),c=fa(e,0,a._dayOfYear),a._a[gd]=c.getUTCMonth(),a._a[hd]=c.getUTCDate()),b=0;3&gt;b&amp;&amp;null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7&gt;b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[id]&amp;&amp;0===a._a[jd]&amp;&amp;0===a._a[kd]&amp;&amp;0===a._a[ld]&amp;&amp;(a._nextDay=!0,a._a[id]=0),a._d=(a._useUTC?fa:ea).apply(null,f),null!=a._tzm&amp;&amp;a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&amp;&amp;(a._a[id]=24)}}function ua(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=ra(b.GG,a._a[fd],ja(Da(),1,4).year),d=ra(b.W,1),e=ra(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=ra(b.gg,a._a[fd],ja(Da(),f,g).year),d=ra(b.w,1),null!=b.d?(e=b.d,f&gt;e&amp;&amp;++d):e=null!=b.e?b.e+f:f),h=pa(c,d,e,g,f),a._a[fd]=h.year,a._dayOfYear=h.dayOfYear}function va(b){if(b._f===a.ISO_8601)return void ca(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=&quot;&quot;+b._i,i=h.length,k=0;for(e=L(b._f,b._locale).match(Nc)||[],c=0;c&lt;e.length;c++)f=e[c],d=(h.match(O(f,b))||[])[0],d&amp;&amp;(g=h.substr(0,h.indexOf(d)),g.length&gt;0&amp;&amp;j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Qc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),S(f,d,b)):b._strict&amp;&amp;!d&amp;&amp;j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length&gt;0&amp;&amp;j(b).unusedInput.push(h),j(b).bigHour===!0&amp;&amp;b._a[id]&lt;=12&amp;&amp;b._a[id]&gt;0&amp;&amp;(j(b).bigHour=void 0),b._a[id]=wa(b._locale,b._a[id],b._meridiem),ta(b),$(b)}function wa(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&amp;&amp;12&gt;b&amp;&amp;(b+=12),d||12!==b||(b=0),b):b}function xa(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e&lt;a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&amp;&amp;(b._useUTC=a._useUTC),b._f=a._f[e],va(b),k(b)&amp;&amp;(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d&gt;f)&amp;&amp;(d=f,c=b));g(a,c||b)}function ya(a){if(!a._d){var b=B(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ta(a)}}function za(a){var b=new n($(Aa(a)));return b._nextDay&amp;&amp;(b.add(1,&quot;d&quot;),b._nextDay=void 0),b}function Aa(a){var b=a._i,e=a._f;return a._locale=a._locale||y(a._l),null===b||void 0===e&amp;&amp;&quot;&quot;===b?l({nullInput:!0}):(&quot;string&quot;==typeof b&amp;&amp;(a._i=b=a._locale.preparse(b)),o(b)?new n($(b)):(c(e)?xa(a):e?va(a):d(b)?a._d=b:Ba(a),a))}function Ba(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):&quot;string&quot;==typeof f?da(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ta(b)):&quot;object&quot;==typeof f?ya(b):&quot;number&quot;==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ca(a,b,c,d,e){var f={};return&quot;boolean&quot;==typeof c&amp;&amp;(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,za(f)}function Da(a,b,c,d){return Ca(a,b,c,d,!1)}function Ea(a,b){var d,e;if(1===b.length&amp;&amp;c(b[0])&amp;&amp;(b=b[0]),!b.length)return Da();for(d=b[0],e=1;e&lt;b.length;++e)(!b[e].isValid()||b[e][a](d))&amp;&amp;(d=b[e]);return d}function Fa(){var a=[].slice.call(arguments,0);return Ea(&quot;isBefore&quot;,a)}function Ga(){var a=[].slice.call(arguments,0);return Ea(&quot;isAfter&quot;,a)}function Ha(a){var b=B(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=y(),this._bubble()}function Ia(a){return a instanceof Ha}function Ja(a,b){H(a,0,0,function(){var a=this.utcOffset(),c=&quot;+&quot;;return 0&gt;a&amp;&amp;(a=-a,c=&quot;-&quot;),c+G(~~(a/60),2)+b+G(~~a%60,2)})}function Ka(a){var b=(a||&quot;&quot;).match(ad)||[],c=b[b.length-1]||[],d=(c+&quot;&quot;).match(xd)||[&quot;-&quot;,0,0],e=+(60*d[1])+q(d[2]);return&quot;+&quot;===d[0]?e:-e}function La(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Da(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Da(b).local()}function Ma(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Na(b,c){var d,e=this._offset||0;return null!=b?(&quot;string&quot;==typeof b&amp;&amp;(b=Ka(b)),Math.abs(b)&lt;16&amp;&amp;(b=60*b),!this._isUTC&amp;&amp;c&amp;&amp;(d=Ma(this)),this._offset=b,this._isUTC=!0,null!=d&amp;&amp;this.add(d,&quot;m&quot;),e!==b&amp;&amp;(!c||this._changeInProgress?bb(this,Ya(b-e,&quot;m&quot;),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ma(this)}function Oa(a,b){return null!=a?(&quot;string&quot;!=typeof a&amp;&amp;(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Pa(a){return this.utcOffset(0,a)}function Qa(a){return this._isUTC&amp;&amp;(this.utcOffset(0,a),this._isUTC=!1,a&amp;&amp;this.subtract(Ma(this),&quot;m&quot;)),this}function Ra(){return this._tzm?this.utcOffset(this._tzm):&quot;string&quot;==typeof this._i&amp;&amp;this.utcOffset(Ka(this._i)),this}function Sa(a){return a=a?Da(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Ta(){return this.utcOffset()&gt;this.clone().month(0).utcOffset()||this.utcOffset()&gt;this.clone().month(5).utcOffset()}function Ua(){if(&quot;undefined&quot;!=typeof this._isDSTShifted)return this._isDSTShifted;var a={};if(m(a,this),a=Aa(a),a._a){var b=a._isUTC?h(a._a):Da(a._a);this._isDSTShifted=this.isValid()&amp;&amp;r(a._a,b.toArray())&gt;0}else this._isDSTShifted=!1;return this._isDSTShifted}function Va(){return!this._isUTC}function Wa(){return this._isUTC}function Xa(){return this._isUTC&amp;&amp;0===this._offset}function Ya(a,b){var c,d,e,g=a,h=null;return Ia(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:&quot;number&quot;==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=yd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:0,d:q(h[hd])*c,h:q(h[id])*c,m:q(h[jd])*c,s:q(h[kd])*c,ms:q(h[ld])*c}):(h=zd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:Za(h[2],c),M:Za(h[3],c),d:Za(h[4],c),h:Za(h[5],c),m:Za(h[6],c),s:Za(h[7],c),w:Za(h[8],c)}):null==g?g={}:&quot;object&quot;==typeof g&amp;&amp;(&quot;from&quot;in g||&quot;to&quot;in g)&amp;&amp;(e=_a(Da(g.from),Da(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ha(g),Ia(a)&amp;&amp;f(a,&quot;_locale&quot;)&amp;&amp;(d._locale=a._locale),d}function Za(a,b){var c=a&amp;&amp;parseFloat(a.replace(&quot;,&quot;,&quot;.&quot;));return(isNaN(c)?0:c)*b}function $a(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,&quot;M&quot;).isAfter(b)&amp;&amp;--c.months,c.milliseconds=+b-+a.clone().add(c.months,&quot;M&quot;),c}function _a(a,b){var c;return b=La(b,a),a.isBefore(b)?c=$a(a,b):(c=$a(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function ab(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(ba(b,&quot;moment().&quot;+b+&quot;(period, number) is deprecated. Please use moment().&quot;+b+&quot;(number, period).&quot;),f=c,c=d,d=f),c=&quot;string&quot;==typeof c?+c:c,e=Ya(c,d),bb(this,e,a),this}}function bb(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&amp;&amp;b._d.setTime(+b._d+f*d),g&amp;&amp;E(b,&quot;Date&quot;,D(b,&quot;Date&quot;)+g*d),h&amp;&amp;X(b,D(b,&quot;Month&quot;)+h*d),e&amp;&amp;a.updateOffset(b,g||h)}function cb(a,b){var c=a||Da(),d=La(c,this).startOf(&quot;day&quot;),e=this.diff(d,&quot;days&quot;,!0),f=-6&gt;e?&quot;sameElse&quot;:-1&gt;e?&quot;lastWeek&quot;:0&gt;e?&quot;lastDay&quot;:1&gt;e?&quot;sameDay&quot;:2&gt;e?&quot;nextDay&quot;:7&gt;e?&quot;nextWeek&quot;:&quot;sameElse&quot;;return this.format(b&amp;&amp;b[f]||this.localeData().calendar(f,this,Da(c)))}function db(){return new n(this)}function eb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this&gt;+a):(c=o(a)?+a:+Da(a),c&lt;+this.clone().startOf(b))}function fb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+a&gt;+this):(c=o(a)?+a:+Da(a),+this.clone().endOf(b)&lt;c)}function gb(a,b,c){return this.isAfter(a,c)&amp;&amp;this.isBefore(b,c)}function hb(a,b){var c;return b=A(b||&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this===+a):(c=+Da(a),+this.clone().startOf(b)&lt;=c&amp;&amp;c&lt;=+this.clone().endOf(b))}function ib(a,b,c){var d,e,f=La(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=A(b),&quot;year&quot;===b||&quot;month&quot;===b||&quot;quarter&quot;===b?(e=jb(this,f),&quot;quarter&quot;===b?e/=3:&quot;year&quot;===b&amp;&amp;(e/=12)):(d=this-f,e=&quot;second&quot;===b?d/1e3:&quot;minute&quot;===b?d/6e4:&quot;hour&quot;===b?d/36e5:&quot;day&quot;===b?(d-g)/864e5:&quot;week&quot;===b?(d-g)/6048e5:d),c?e:p(e)}function jb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,&quot;months&quot;);return 0&gt;b-f?(c=a.clone().add(e-1,&quot;months&quot;),d=(b-f)/(f-c)):(c=a.clone().add(e+1,&quot;months&quot;),d=(b-f)/(c-f)),-(e+d)}function kb(){return this.clone().locale(&quot;en&quot;).format(&quot;ddd MMM DD YYYY HH:mm:ss [GMT]ZZ&quot;)}function lb(){var a=this.clone().utc();return 0&lt;a.year()&amp;&amp;a.year()&lt;=9999?&quot;function&quot;==typeof Date.prototype.toISOString?this.toDate().toISOString():K(a,&quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;):K(a,&quot;YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;)}function mb(b){var c=K(this,b||a.defaultFormat);return this.localeData().postformat(c)}function nb(a,b){return this.isValid()?Ya({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.from(Da(),a)}function pb(a,b){return this.isValid()?Ya({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function qb(a){return this.to(Da(),a)}function rb(a){var b;return void 0===a?this._locale._abbr:(b=y(a),null!=b&amp;&amp;(this._locale=b),this)}function sb(){return this._locale}function tb(a){switch(a=A(a)){case&quot;year&quot;:this.month(0);case&quot;quarter&quot;:case&quot;month&quot;:this.date(1);case&quot;week&quot;:case&quot;isoWeek&quot;:case&quot;day&quot;:this.hours(0);case&quot;hour&quot;:this.minutes(0);case&quot;minute&quot;:this.seconds(0);case&quot;second&quot;:this.milliseconds(0)}return&quot;week&quot;===a&amp;&amp;this.weekday(0),&quot;isoWeek&quot;===a&amp;&amp;this.isoWeekday(1),&quot;quarter&quot;===a&amp;&amp;this.month(3*Math.floor(this.month()/3)),this}function ub(a){return a=A(a),void 0===a||&quot;millisecond&quot;===a?this:this.startOf(a).add(1,&quot;isoWeek&quot;===a?&quot;week&quot;:a).subtract(1,&quot;ms&quot;)}function vb(){return+this._d-6e4*(this._offset||0)}function wb(){return Math.floor(+this/1e3)}function xb(){return this._offset?new Date(+this):this._d}function yb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function zb(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Ab(){return k(this)}function Bb(){return g({},j(this))}function Cb(){return j(this).overflow}function Db(a,b){H(0,[a,a.length],0,b)}function Eb(a,b,c){return ja(Da([a,11,31+b-c]),b,c).week}function Fb(a){var b=ja(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Gb(a){var b=ja(this,1,4).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Hb(){return Eb(this.year(),1,4)}function Ib(){var a=this.localeData()._week;return Eb(this.year(),a.dow,a.doy)}function Jb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Kb(a,b){return&quot;string&quot;!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),&quot;number&quot;==typeof a?a:null):parseInt(a,10)}function Lb(a){return this._weekdays[a.day()]}function Mb(a){return this._weekdaysShort[a.day()]}function Nb(a){return this._weekdaysMin[a.day()]}function Ob(a){var b,c,d;for(this._weekdaysParse=this._weekdaysParse||[],b=0;7&gt;b;b++)if(this._weekdaysParse[b]||(c=Da([2e3,1]).day(b),d=&quot;^&quot;+this.weekdays(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysShort(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysMin(c,&quot;&quot;),this._weekdaysParse[b]=new RegExp(d.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),this._weekdaysParse[b].test(a))return b}function Pb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Kb(a,this.localeData()),this.add(a-b,&quot;d&quot;)):b}function Qb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,&quot;d&quot;)}function Rb(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Sb(a,b){H(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Tb(a,b){return b._meridiemParse}function Ub(a){return&quot;p&quot;===(a+&quot;&quot;).toLowerCase().charAt(0)}function Vb(a,b,c){return a&gt;11?c?&quot;pm&quot;:&quot;PM&quot;:c?&quot;am&quot;:&quot;AM&quot;}function Wb(a,b){b[ld]=q(1e3*(&quot;0.&quot;+a))}function Xb(){return this._isUTC?&quot;UTC&quot;:&quot;&quot;}function Yb(){return this._isUTC?&quot;Coordinated Universal Time&quot;:&quot;&quot;}function Zb(a){return Da(1e3*a)}function $b(){return Da.apply(null,arguments).parseZone()}function _b(a,b,c){var d=this._calendar[a];return&quot;function&quot;==typeof d?d.call(b,c):d}function ac(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function bc(){return this._invalidDate}function cc(a){return this._ordinal.replace(&quot;%d&quot;,a)}function dc(a){return a}function ec(a,b,c,d){var e=this._relativeTime[c];return&quot;function&quot;==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function fc(a,b){var c=this._relativeTime[a&gt;0?&quot;future&quot;:&quot;past&quot;];return&quot;function&quot;==typeof c?c(b):c.replace(/%s/i,b)}function gc(a){var b,c;for(c in a)b=a[c],&quot;function&quot;==typeof b?this[c]=b:this[&quot;_&quot;+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+&quot;|&quot;+/\d{1,2}/.source)}function hc(a,b,c,d){var e=y(),f=h().set(d,b);return e[c](f,a)}function ic(a,b,c,d,e){if(&quot;number&quot;==typeof a&amp;&amp;(b=a,a=void 0),a=a||&quot;&quot;,null!=b)return hc(a,b,c,e);var f,g=[];for(f=0;d&gt;f;f++)g[f]=hc(a,f,c,e);return g}function jc(a,b){return ic(a,b,&quot;months&quot;,12,&quot;month&quot;)}function kc(a,b){return ic(a,b,&quot;monthsShort&quot;,12,&quot;month&quot;)}function lc(a,b){return ic(a,b,&quot;weekdays&quot;,7,&quot;day&quot;)}function mc(a,b){return ic(a,b,&quot;weekdaysShort&quot;,7,&quot;day&quot;)}function nc(a,b){return ic(a,b,&quot;weekdaysMin&quot;,7,&quot;day&quot;)}function oc(){var a=this._data;return this._milliseconds=Wd(this._milliseconds),this._days=Wd(this._days),this._months=Wd(this._months),a.milliseconds=Wd(a.milliseconds),a.seconds=Wd(a.seconds),a.minutes=Wd(a.minutes),a.hours=Wd(a.hours),a.months=Wd(a.months),a.years=Wd(a.years),this}function pc(a,b,c,d){var e=Ya(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function qc(a,b){return pc(this,a,b,1)}function rc(a,b){return pc(this,a,b,-1)}function sc(a){return 0&gt;a?Math.floor(a):Math.ceil(a)}function tc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f&gt;=0&amp;&amp;g&gt;=0&amp;&amp;h&gt;=0||0&gt;=f&amp;&amp;0&gt;=g&amp;&amp;0&gt;=h||(f+=864e5*sc(vc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=p(f/1e3),i.seconds=a%60,b=p(a/60),i.minutes=b%60,c=p(b/60),i.hours=c%24,g+=p(c/24),e=p(uc(g)),h+=e,g-=sc(vc(e)),d=p(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function uc(a){return 4800*a/146097}function vc(a){return 146097*a/4800}function wc(a){var b,c,d=this._milliseconds;if(a=A(a),&quot;month&quot;===a||&quot;year&quot;===a)return b=this._days+d/864e5,c=this._months+uc(b),&quot;month&quot;===a?c:c/12;switch(b=this._days+Math.round(vc(this._months)),a){case&quot;week&quot;:return b/7+d/6048e5;case&quot;day&quot;:return b+d/864e5;case&quot;hour&quot;:return 24*b+d/36e5;case&quot;minute&quot;:return 1440*b+d/6e4;case&quot;second&quot;:return 86400*b+d/1e3;case&quot;millisecond&quot;:return Math.floor(864e5*b)+d;default:throw new Error(&quot;Unknown unit &quot;+a)}}function xc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*q(this._months/12)}function yc(a){return function(){return this.as(a)}}function zc(a){return a=A(a),this[a+&quot;s&quot;]()}function Ac(a){return function(){return this._data[a]}}function Bc(){return p(this.days()/7)}function Cc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Dc(a,b,c){var d=Ya(a).abs(),e=ke(d.as(&quot;s&quot;)),f=ke(d.as(&quot;m&quot;)),g=ke(d.as(&quot;h&quot;)),h=ke(d.as(&quot;d&quot;)),i=ke(d.as(&quot;M&quot;)),j=ke(d.as(&quot;y&quot;)),k=e&lt;le.s&amp;&amp;[&quot;s&quot;,e]||1===f&amp;&amp;[&quot;m&quot;]||f&lt;le.m&amp;&amp;[&quot;mm&quot;,f]||1===g&amp;&amp;[&quot;h&quot;]||g&lt;le.h&amp;&amp;[&quot;hh&quot;,g]||1===h&amp;&amp;[&quot;d&quot;]||h&lt;le.d&amp;&amp;[&quot;dd&quot;,h]||1===i&amp;&amp;[&quot;M&quot;]||i&lt;le.M&amp;&amp;[&quot;MM&quot;,i]||1===j&amp;&amp;[&quot;y&quot;]||[&quot;yy&quot;,j];return k[2]=b,k[3]=+a&gt;0,k[4]=c,Cc.apply(null,k)}function Ec(a,b){return void 0===le[a]?!1:void 0===b?le[a]:(le[a]=b,!0)}function Fc(a){var b=this.localeData(),c=Dc(this,!a,b);return a&amp;&amp;(c=b.pastFuture(+this,c)),b.postformat(c)}function Gc(){var a,b,c,d=me(this._milliseconds)/1e3,e=me(this._days),f=me(this._months);a=p(d/60),b=p(a/60),d%=60,a%=60,c=p(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0&gt;m?&quot;-&quot;:&quot;&quot;)+&quot;P&quot;+(g?g+&quot;Y&quot;:&quot;&quot;)+(h?h+&quot;M&quot;:&quot;&quot;)+(i?i+&quot;D&quot;:&quot;&quot;)+(j||k||l?&quot;T&quot;:&quot;&quot;)+(j?j+&quot;H&quot;:&quot;&quot;)+(k?k+&quot;M&quot;:&quot;&quot;)+(l?l+&quot;S&quot;:&quot;&quot;):&quot;P0D&quot;}var Hc,Ic,Jc=a.momentProperties=[],Kc=!1,Lc={},Mc={},Nc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Pc={},Qc={},Rc=/\d/,Sc=/\d\d/,Tc=/\d{3}/,Uc=/\d{4}/,Vc=/[+-]?\d{6}/,Wc=/\d\d?/,Xc=/\d{1,3}/,Yc=/\d{1,4}/,Zc=/[+-]?\d{1,6}/,$c=/\d+/,_c=/[+-]?\d+/,ad=/Z|[+-]\d\d:?\d\d/gi,bd=/[+-]?\d+(\.\d{1,3})?/,cd=/[0-9]*[&apos;a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,dd={},ed={},fd=0,gd=1,hd=2,id=3,jd=4,kd=5,ld=6;H(&quot;M&quot;,[&quot;MM&quot;,2],&quot;Mo&quot;,function(){return this.month()+1}),H(&quot;MMM&quot;,0,0,function(a){return this.localeData().monthsShort(this,a)}),H(&quot;MMMM&quot;,0,0,function(a){return this.localeData().months(this,a)}),z(&quot;month&quot;,&quot;M&quot;),N(&quot;M&quot;,Wc),N(&quot;MM&quot;,Wc,Sc),N(&quot;MMM&quot;,cd),N(&quot;MMMM&quot;,cd),Q([&quot;M&quot;,&quot;MM&quot;],function(a,b){b[gd]=q(a)-1}),Q([&quot;MMM&quot;,&quot;MMMM&quot;],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[gd]=e:j(c).invalidMonth=a});var md=&quot;January_February_March_April_May_June_July_August_September_October_November_December&quot;.split(&quot;_&quot;),nd=&quot;Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec&quot;.split(&quot;_&quot;),od={};a.suppressDeprecationWarnings=!1;var pd=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,qd=[[&quot;YYYYYY-MM-DD&quot;,/[+-]\d{6}-\d{2}-\d{2}/],[&quot;YYYY-MM-DD&quot;,/\d{4}-\d{2}-\d{2}/],[&quot;GGGG-[W]WW-E&quot;,/\d{4}-W\d{2}-\d/],[&quot;GGGG-[W]WW&quot;,/\d{4}-W\d{2}/],[&quot;YYYY-DDD&quot;,/\d{4}-\d{3}/]],rd=[[&quot;HH:mm:ss.SSSS&quot;,/(T| )\d\d:\d\d:\d\d\.\d+/],[&quot;HH:mm:ss&quot;,/(T| )\d\d:\d\d:\d\d/],[&quot;HH:mm&quot;,/(T| )\d\d:\d\d/],[&quot;HH&quot;,/(T| )\d\d/]],sd=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=aa(&quot;moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.&quot;,function(a){a._d=new Date(a._i+(a._useUTC?&quot; UTC&quot;:&quot;&quot;))}),H(0,[&quot;YY&quot;,2],0,function(){return this.year()%100}),H(0,[&quot;YYYY&quot;,4],0,&quot;year&quot;),H(0,[&quot;YYYYY&quot;,5],0,&quot;year&quot;),H(0,[&quot;YYYYYY&quot;,6,!0],0,&quot;year&quot;),z(&quot;year&quot;,&quot;y&quot;),N(&quot;Y&quot;,_c),N(&quot;YY&quot;,Wc,Sc),N(&quot;YYYY&quot;,Yc,Uc),N(&quot;YYYYY&quot;,Zc,Vc),N(&quot;YYYYYY&quot;,Zc,Vc),Q([&quot;YYYYY&quot;,&quot;YYYYYY&quot;],fd),Q(&quot;YYYY&quot;,function(b,c){c[fd]=2===b.length?a.parseTwoDigitYear(b):q(b)}),Q(&quot;YY&quot;,function(b,c){c[fd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return q(a)+(q(a)&gt;68?1900:2e3)};var td=C(&quot;FullYear&quot;,!1);H(&quot;w&quot;,[&quot;ww&quot;,2],&quot;wo&quot;,&quot;week&quot;),H(&quot;W&quot;,[&quot;WW&quot;,2],&quot;Wo&quot;,&quot;isoWeek&quot;),z(&quot;week&quot;,&quot;w&quot;),z(&quot;isoWeek&quot;,&quot;W&quot;),N(&quot;w&quot;,Wc),N(&quot;ww&quot;,Wc,Sc),N(&quot;W&quot;,Wc),N(&quot;WW&quot;,Wc,Sc),R([&quot;w&quot;,&quot;ww&quot;,&quot;W&quot;,&quot;WW&quot;],function(a,b,c,d){b[d.substr(0,1)]=q(a)});var ud={dow:0,doy:6};H(&quot;DDD&quot;,[&quot;DDDD&quot;,3],&quot;DDDo&quot;,&quot;dayOfYear&quot;),z(&quot;dayOfYear&quot;,&quot;DDD&quot;),N(&quot;DDD&quot;,Xc),N(&quot;DDDD&quot;,Tc),Q([&quot;DDD&quot;,&quot;DDDD&quot;],function(a,b,c){c._dayOfYear=q(a)}),a.ISO_8601=function(){};var vd=aa(&quot;moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return this&gt;a?this:a}),wd=aa(&quot;moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return a&gt;this?this:a});Ja(&quot;Z&quot;,&quot;:&quot;),Ja(&quot;ZZ&quot;,&quot;&quot;),N(&quot;Z&quot;,ad),N(&quot;ZZ&quot;,ad),Q([&quot;Z&quot;,&quot;ZZ&quot;],function(a,b,c){c._useUTC=!0,c._tzm=Ka(a)});var xd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var yd=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,zd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Ya.fn=Ha.prototype;var Ad=ab(1,&quot;add&quot;),Bd=ab(-1,&quot;subtract&quot;);a.defaultFormat=&quot;YYYY-MM-DDTHH:mm:ssZ&quot;;var Cd=aa(&quot;moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.&quot;,function(a){return void 0===a?this.localeData():this.locale(a)});H(0,[&quot;gg&quot;,2],0,function(){return this.weekYear()%100}),H(0,[&quot;GG&quot;,2],0,function(){return this.isoWeekYear()%100}),Db(&quot;gggg&quot;,&quot;weekYear&quot;),Db(&quot;ggggg&quot;,&quot;weekYear&quot;),Db(&quot;GGGG&quot;,&quot;isoWeekYear&quot;),Db(&quot;GGGGG&quot;,&quot;isoWeekYear&quot;),z(&quot;weekYear&quot;,&quot;gg&quot;),z(&quot;isoWeekYear&quot;,&quot;GG&quot;),N(&quot;G&quot;,_c),N(&quot;g&quot;,_c),N(&quot;GG&quot;,Wc,Sc),N(&quot;gg&quot;,Wc,Sc),N(&quot;GGGG&quot;,Yc,Uc),N(&quot;gggg&quot;,Yc,Uc),N(&quot;GGGGG&quot;,Zc,Vc),N(&quot;ggggg&quot;,Zc,Vc),R([&quot;gggg&quot;,&quot;ggggg&quot;,&quot;GGGG&quot;,&quot;GGGGG&quot;],function(a,b,c,d){b[d.substr(0,2)]=q(a)}),R([&quot;gg&quot;,&quot;GG&quot;],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),H(&quot;Q&quot;,0,0,&quot;quarter&quot;),z(&quot;quarter&quot;,&quot;Q&quot;),N(&quot;Q&quot;,Rc),Q(&quot;Q&quot;,function(a,b){b[gd]=3*(q(a)-1)}),H(&quot;D&quot;,[&quot;DD&quot;,2],&quot;Do&quot;,&quot;date&quot;),z(&quot;date&quot;,&quot;D&quot;),N(&quot;D&quot;,Wc),N(&quot;DD&quot;,Wc,Sc),N(&quot;Do&quot;,function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),Q([&quot;D&quot;,&quot;DD&quot;],hd),Q(&quot;Do&quot;,function(a,b){b[hd]=q(a.match(Wc)[0],10)});var Dd=C(&quot;Date&quot;,!0);H(&quot;d&quot;,0,&quot;do&quot;,&quot;day&quot;),H(&quot;dd&quot;,0,0,function(a){return this.localeData().weekdaysMin(this,a)}),H(&quot;ddd&quot;,0,0,function(a){return this.localeData().weekdaysShort(this,a)}),H(&quot;dddd&quot;,0,0,function(a){return this.localeData().weekdays(this,a)}),H(&quot;e&quot;,0,0,&quot;weekday&quot;),H(&quot;E&quot;,0,0,&quot;isoWeekday&quot;),z(&quot;day&quot;,&quot;d&quot;),z(&quot;weekday&quot;,&quot;e&quot;),z(&quot;isoWeekday&quot;,&quot;E&quot;),N(&quot;d&quot;,Wc),N(&quot;e&quot;,Wc),N(&quot;E&quot;,Wc),N(&quot;dd&quot;,cd),N(&quot;ddd&quot;,cd),N(&quot;dddd&quot;,cd),R([&quot;dd&quot;,&quot;ddd&quot;,&quot;dddd&quot;],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),R([&quot;d&quot;,&quot;e&quot;,&quot;E&quot;],function(a,b,c,d){b[d]=q(a)});var Ed=&quot;Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday&quot;.split(&quot;_&quot;),Fd=&quot;Sun_Mon_Tue_Wed_Thu_Fri_Sat&quot;.split(&quot;_&quot;),Gd=&quot;Su_Mo_Tu_We_Th_Fr_Sa&quot;.split(&quot;_&quot;);H(&quot;H&quot;,[&quot;HH&quot;,2],0,&quot;hour&quot;),H(&quot;h&quot;,[&quot;hh&quot;,2],0,function(){return this.hours()%12||12}),Sb(&quot;a&quot;,!0),Sb(&quot;A&quot;,!1),z(&quot;hour&quot;,&quot;h&quot;),N(&quot;a&quot;,Tb),N(&quot;A&quot;,Tb),N(&quot;H&quot;,Wc),N(&quot;h&quot;,Wc),N(&quot;HH&quot;,Wc,Sc),N(&quot;hh&quot;,Wc,Sc),Q([&quot;H&quot;,&quot;HH&quot;],id),Q([&quot;a&quot;,&quot;A&quot;],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),Q([&quot;h&quot;,&quot;hh&quot;],function(a,b,c){b[id]=q(a),j(c).bigHour=!0});var Hd=/[ap]\.?m?\.?/i,Id=C(&quot;Hours&quot;,!0);H(&quot;m&quot;,[&quot;mm&quot;,2],0,&quot;minute&quot;),z(&quot;minute&quot;,&quot;m&quot;),N(&quot;m&quot;,Wc),N(&quot;mm&quot;,Wc,Sc),Q([&quot;m&quot;,&quot;mm&quot;],jd);var Jd=C(&quot;Minutes&quot;,!1);H(&quot;s&quot;,[&quot;ss&quot;,2],0,&quot;second&quot;),z(&quot;second&quot;,&quot;s&quot;),N(&quot;s&quot;,Wc),N(&quot;ss&quot;,Wc,Sc),Q([&quot;s&quot;,&quot;ss&quot;],kd);var Kd=C(&quot;Seconds&quot;,!1);H(&quot;S&quot;,0,0,function(){return~~(this.millisecond()/100)}),H(0,[&quot;SS&quot;,2],0,function(){return~~(this.millisecond()/10)}),H(0,[&quot;SSS&quot;,3],0,&quot;millisecond&quot;),H(0,[&quot;SSSS&quot;,4],0,function(){return 10*this.millisecond()}),H(0,[&quot;SSSSS&quot;,5],0,function(){return 100*this.millisecond()}),H(0,[&quot;SSSSSS&quot;,6],0,function(){return 1e3*this.millisecond()}),H(0,[&quot;SSSSSSS&quot;,7],0,function(){return 1e4*this.millisecond()}),H(0,[&quot;SSSSSSSS&quot;,8],0,function(){return 1e5*this.millisecond()}),H(0,[&quot;SSSSSSSSS&quot;,9],0,function(){return 1e6*this.millisecond()}),z(&quot;millisecond&quot;,&quot;ms&quot;),N(&quot;S&quot;,Xc,Rc),N(&quot;SS&quot;,Xc,Sc),N(&quot;SSS&quot;,Xc,Tc);var Ld;for(Ld=&quot;SSSS&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)N(Ld,$c);for(Ld=&quot;S&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)Q(Ld,Wb);var Md=C(&quot;Milliseconds&quot;,!1);H(&quot;z&quot;,0,0,&quot;zoneAbbr&quot;),H(&quot;zz&quot;,0,0,&quot;zoneName&quot;);var Nd=n.prototype;Nd.add=Ad,Nd.calendar=cb,Nd.clone=db,Nd.diff=ib,Nd.endOf=ub,Nd.format=mb,Nd.from=nb,Nd.fromNow=ob,Nd.to=pb,Nd.toNow=qb,Nd.get=F,Nd.invalidAt=Cb,Nd.isAfter=eb,Nd.isBefore=fb,Nd.isBetween=gb,Nd.isSame=hb,Nd.isValid=Ab,Nd.lang=Cd,Nd.locale=rb,Nd.localeData=sb,Nd.max=wd,Nd.min=vd,Nd.parsingFlags=Bb,Nd.set=F,Nd.startOf=tb,Nd.subtract=Bd,Nd.toArray=yb,Nd.toObject=zb,Nd.toDate=xb,Nd.toISOString=lb,Nd.toJSON=lb,Nd.toString=kb,Nd.unix=wb,Nd.valueOf=vb,Nd.year=td,Nd.isLeapYear=ia,Nd.weekYear=Fb,Nd.isoWeekYear=Gb,Nd.quarter=Nd.quarters=Jb,Nd.month=Y,Nd.daysInMonth=Z,Nd.week=Nd.weeks=na,Nd.isoWeek=Nd.isoWeeks=oa,Nd.weeksInYear=Ib,Nd.isoWeeksInYear=Hb,Nd.date=Dd,Nd.day=Nd.days=Pb,Nd.weekday=Qb,Nd.isoWeekday=Rb,Nd.dayOfYear=qa,Nd.hour=Nd.hours=Id,Nd.minute=Nd.minutes=Jd,Nd.second=Nd.seconds=Kd,
Nd.millisecond=Nd.milliseconds=Md,Nd.utcOffset=Na,Nd.utc=Pa,Nd.local=Qa,Nd.parseZone=Ra,Nd.hasAlignedHourOffset=Sa,Nd.isDST=Ta,Nd.isDSTShifted=Ua,Nd.isLocal=Va,Nd.isUtcOffset=Wa,Nd.isUtc=Xa,Nd.isUTC=Xa,Nd.zoneAbbr=Xb,Nd.zoneName=Yb,Nd.dates=aa(&quot;dates accessor is deprecated. Use date instead.&quot;,Dd),Nd.months=aa(&quot;months accessor is deprecated. Use month instead&quot;,Y),Nd.years=aa(&quot;years accessor is deprecated. Use year instead&quot;,td),Nd.zone=aa(&quot;moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779&quot;,Oa);var Od=Nd,Pd={sameDay:&quot;[Today at] LT&quot;,nextDay:&quot;[Tomorrow at] LT&quot;,nextWeek:&quot;dddd [at] LT&quot;,lastDay:&quot;[Yesterday at] LT&quot;,lastWeek:&quot;[Last] dddd [at] LT&quot;,sameElse:&quot;L&quot;},Qd={LTS:&quot;h:mm:ss A&quot;,LT:&quot;h:mm A&quot;,L:&quot;MM/DD/YYYY&quot;,LL:&quot;MMMM D, YYYY&quot;,LLL:&quot;MMMM D, YYYY h:mm A&quot;,LLLL:&quot;dddd, MMMM D, YYYY h:mm A&quot;},Rd=&quot;Invalid date&quot;,Sd=&quot;%d&quot;,Td=/\d{1,2}/,Ud={future:&quot;in %s&quot;,past:&quot;%s ago&quot;,s:&quot;a few seconds&quot;,m:&quot;a minute&quot;,mm:&quot;%d minutes&quot;,h:&quot;an hour&quot;,hh:&quot;%d hours&quot;,d:&quot;a day&quot;,dd:&quot;%d days&quot;,M:&quot;a month&quot;,MM:&quot;%d months&quot;,y:&quot;a year&quot;,yy:&quot;%d years&quot;},Vd=s.prototype;Vd._calendar=Pd,Vd.calendar=_b,Vd._longDateFormat=Qd,Vd.longDateFormat=ac,Vd._invalidDate=Rd,Vd.invalidDate=bc,Vd._ordinal=Sd,Vd.ordinal=cc,Vd._ordinalParse=Td,Vd.preparse=dc,Vd.postformat=dc,Vd._relativeTime=Ud,Vd.relativeTime=ec,Vd.pastFuture=fc,Vd.set=gc,Vd.months=U,Vd._months=md,Vd.monthsShort=V,Vd._monthsShort=nd,Vd.monthsParse=W,Vd.week=ka,Vd._week=ud,Vd.firstDayOfYear=ma,Vd.firstDayOfWeek=la,Vd.weekdays=Lb,Vd._weekdays=Ed,Vd.weekdaysMin=Nb,Vd._weekdaysMin=Gd,Vd.weekdaysShort=Mb,Vd._weekdaysShort=Fd,Vd.weekdaysParse=Ob,Vd.isPM=Ub,Vd._meridiemParse=Hd,Vd.meridiem=Vb,w(&quot;en&quot;,{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===q(a%100/10)?&quot;th&quot;:1===b?&quot;st&quot;:2===b?&quot;nd&quot;:3===b?&quot;rd&quot;:&quot;th&quot;;return a+c}}),a.lang=aa(&quot;moment.lang is deprecated. Use moment.locale instead.&quot;,w),a.langData=aa(&quot;moment.langData is deprecated. Use moment.localeData instead.&quot;,y);var Wd=Math.abs,Xd=yc(&quot;ms&quot;),Yd=yc(&quot;s&quot;),Zd=yc(&quot;m&quot;),$d=yc(&quot;h&quot;),_d=yc(&quot;d&quot;),ae=yc(&quot;w&quot;),be=yc(&quot;M&quot;),ce=yc(&quot;y&quot;),de=Ac(&quot;milliseconds&quot;),ee=Ac(&quot;seconds&quot;),fe=Ac(&quot;minutes&quot;),ge=Ac(&quot;hours&quot;),he=Ac(&quot;days&quot;),ie=Ac(&quot;months&quot;),je=Ac(&quot;years&quot;),ke=Math.round,le={s:45,m:45,h:22,d:26,M:11},me=Math.abs,ne=Ha.prototype;ne.abs=oc,ne.add=qc,ne.subtract=rc,ne.as=wc,ne.asMilliseconds=Xd,ne.asSeconds=Yd,ne.asMinutes=Zd,ne.asHours=$d,ne.asDays=_d,ne.asWeeks=ae,ne.asMonths=be,ne.asYears=ce,ne.valueOf=xc,ne._bubble=tc,ne.get=zc,ne.milliseconds=de,ne.seconds=ee,ne.minutes=fe,ne.hours=ge,ne.days=he,ne.weeks=Bc,ne.months=ie,ne.years=je,ne.humanize=Fc,ne.toISOString=Gc,ne.toString=Gc,ne.toJSON=Gc,ne.locale=rb,ne.localeData=sb,ne.toIsoString=aa(&quot;toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)&quot;,Gc),ne.lang=Cd,H(&quot;X&quot;,0,0,&quot;unix&quot;),H(&quot;x&quot;,0,0,&quot;valueOf&quot;),N(&quot;x&quot;,_c),N(&quot;X&quot;,bd),Q(&quot;X&quot;,function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),Q(&quot;x&quot;,function(a,b,c){c._d=new Date(q(a))}),a.version=&quot;2.10.6&quot;,b(Da),a.fn=Od,a.min=Fa,a.max=Ga,a.utc=h,a.unix=Zb,a.months=jc,a.isDate=d,a.locale=w,a.invalid=l,a.duration=Ya,a.isMoment=o,a.weekdays=lc,a.parseZone=$b,a.localeData=y,a.isDuration=Ia,a.monthsShort=kc,a.weekdaysMin=nc,a.defineLocale=x,a.weekdaysShort=mc,a.normalizeUnits=A,a.relativeTimeThreshold=Ec;var oe=a;return oe});</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2c64669f-f07e-4365-bf64-c559ace83004</id>
                <name>stopOnErrorCount</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122375</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to Stop a channel if it reaches a particular error count. 
	Also sends an alert message via another channel (this sends a sms via our monitoring system).

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function stopOnErrorCount(cid, errorCount) {
	var channelStatisticsController = Packages.com.mirth.connect.server.controllers.ChannelStatisticsController.getInstance();
	var channelStatusController = Packages.com.mirth.connect.server.controllers.ChannelStatusController.getInstance();
	var stats = channelStatisticsController.getStatistics(cid);
	// var numOfQueued = stats.queued;
	var numOfErrors = stats.error;

	if(numOfErrors &gt; errorCount )
	{
		//Stop Me
		channelStatusController.stopChannel(cid);
		//Alert msg sent to _SVHALERT channel
		var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
		var channelName = channelController.getDeployedChannelById(cid).getName();
		var alertmsg = &apos;mirth01 mirth_channel_status codeTemplate_stopOnErrorCount 0 &apos; +
					   &apos;channel &apos; + channelName + &apos; stopped&apos;;
		router.routeMessage(&apos;_SVHALERT&apos;, alertmsg);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>08044817-3504-4fc1-80ee-404870195151</id>
                <name>test</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122745</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.
	searchword
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function testfunc(arg1) {
	return arg1;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
            <name>WebPT-Mirth</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121602</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
                <name>Fix HL7v2 Node Order</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121804</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>35f4c250-08b4-4e42-8e60-f85aa98dfe50</id>
            <name>WebPT-Translations</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939924</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>be8f057b-2640-4613-b2e7-83326c59169c</id>
                <name>AddZeros</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122826</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function addZeroes(num) {
   return num.toLocaleString(&quot;en&quot;, {useGrouping: false, minimumFractionDigits: 2})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>51913864-7702-489a-b7c6-54992c12b19d</id>
                <name>FindLookupValueWithDefault</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122218</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithDefault ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        //obj.LeftValue = LeftValue;
        //obj.RightValue1 = DefaultValue1;
        //obj.RightValue2   = DefaultValue2; 
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);
            var result = pattern.test(LeftValue );

            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>c276be9f-c8f1-4dea-8df0-e000c6745271</id>
                <name>FindLookupValueWithInsuranceId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122080</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithInsuranceId ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);             
            var result = pattern.test(LeftValue );
	
            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7d746da2-58c6-44eb-ad5c-c5bfd0a0c537</id>
                <name>UseExternalProblemID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122349</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalProblemID() {

if ([&apos;2804&apos;, &apos;2822&apos;].indexOf($(&apos;tenantId&apos;) + &apos;&apos;) &gt; -1) {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitexternalproblemid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitaccountnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>07730e85-7f30-4ddf-90a4-78183c896ab5</id>
                <name>UseExternalVisitID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122192</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalVisitID() {
	
if ($(&apos;tenantId&apos;)  == &apos;9999&apos; ) {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitexternalvisitid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitvisitnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="4.0.0">
      <id>0972a85f-5ad7-4a93-88e1-5f991b7f7879</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>CCRtoHL7_GHealth</name>
      <description></description>
      <revision>1</revision>
      <sourceConnector version="4.0.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.js.JavaScriptReceiverProperties" version="4.0.0">
          <pluginProperties/>
          <pollConnectorProperties version="4.0.0">
            <pollingType>INTERVAL</pollingType>
            <pollOnStart>true</pollOnStart>
            <pollingFrequency>10000</pollingFrequency>
            <pollingHour>0</pollingHour>
            <pollingMinute>0</pollingMinute>
            <cronJobs/>
            <pollConnectorPropertiesAdvanced>
              <weekly>true</weekly>
              <inactiveDays>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
              </inactiveDays>
              <dayOfMonth>1</dayOfMonth>
              <allDay>true</allDay>
              <startingHour>8</startingHour>
              <startingMinute>0</startingMinute>
              <endingHour>17</endingHour>
              <endingMinute>0</endingMinute>
            </pollConnectorPropertiesAdvanced>
          </pollConnectorProperties>
          <sourceConnectorProperties version="4.0.0">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>0</queueBufferSize>
          </sourceConnectorProperties>
          <script>var gHealth = new Packages.edu.swin.GHealth.GHealth(&quot;jofrytest&quot;, &quot;swin2010&quot;);
gHealth.setConnectionProperties();
gHealth.authenticate();

var ccrString = gHealth.getCompleteCCRProfile(&quot;jsm.GH6hKYo&quot;);

logger.error(gHealth.sayHello());
logger.error(&quot;CCR String: &quot; + ccrString);

globalMap.put(&apos;ccrString&apos;,ccrString)

gHealth.writeLog();

return ccrString;</script>
        </properties>
        <transformer version="4.0.0">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
              <name>map</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>// Import java library to start the conversion
logger.error(&quot;here&quot;);

//var rawData = messageObject.getRawData().toString();

//var stringBuffer = new java.lang.StringBuffer(rawData);
//var translator = new Packages.edu.swin.HealthInteroperability.CCRtoHL7();

var ccrString = $(&apos;ccrString&apos;);
logger.error(ccrString);

var hMapper = new Packages.edu.swin.HealthInteroperability.HMapper(ccrString, true);

hMapper.run();

logger.error(hMapper.sayHello());

logger.error(hMapper.getMappedResult());
logger.error(&quot;Time taken for last map: &quot; + hMapper.getTimeElapsed() + &quot; ms&quot;);

channelMap.put(&quot;hl7Result&quot;,hMapper.getMappedResult());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>XML</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
              <stripNamespaces>true</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
              <stripNamespaces>true</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.0.0">
          <elements/>
        </filter>
        <transportName>JavaScript Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.0.0">
          <metaDataId>1</metaDataId>
          <name>HL7 message</name>
          <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="4.0.0">
            <pluginProperties/>
            <destinationConnectorProperties version="4.0.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>0</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <scheme>FILE</scheme>
            <host>D:/MirthOutput/</host>
            <outputPattern>${UUID}.hl7</outputPattern>
            <anonymous>true</anonymous>
            <username>anonymous</username>
            <password>anonymous</password>
            <timeout>10000</timeout>
            <keepConnectionOpen>true</keepConnectionOpen>
            <maxIdleTime>0</maxIdleTime>
            <secure>true</secure>
            <passive>true</passive>
            <validateConnection>true</validateConnection>
            <outputAppend>true</outputAppend>
            <errorOnExists>false</errorOnExists>
            <temporary>false</temporary>
            <binary>false</binary>
            <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
            <template>${hl7Result}</template>
          </properties>
          <transformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>CCR to HL7 Translation</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>// Import java library to start the conversion
/*
logger.error(&quot;here&quot;);

//var rawData = messageObject.getRawData().toString();

//var stringBuffer = new java.lang.StringBuffer(rawData);
//var translator = new Packages.edu.swin.HealthInteroperability.CCRtoHL7();

var ccrString = $(&apos;ccr_record&apos;);
logger.error(ccrString);

var hMapper = new Packages.edu.swin.HealthInteroperability.HMapper(ccrString);

hMapper.run();

logger.error(hMapper.sayHello());

logger.error(hMapper.getMappedResult());
logger.error(&quot;Time taken for last map: &quot; + hMapper.getTimeElapsed() + &quot; ms&quot;);

channelMap.put(&quot;hl7Result&quot;,hMapper.getMappedResult());
*/
//logger.error(hMapper.CURRENT_DIR);

/*
ccrXML = msg.toString();
ccrXML = ccrXML.replace(/\&quot;/g, &quot;\\\&quot;&quot;);
*/
//logger.error(&quot;String buffer: &quot; + stringBuffer.toString());

//logger.error(translator.sayHello());

//var result = translator.convert(stringBuffer.toString());

//logger.error(hMapper.getMappedResult());</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.0.0">
            <elements/>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.0.0">
            <elements/>
          </filter>
          <transportName>File Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
return;</postprocessingScript>
      <deployScript>// This script executes once when the mule engine is started
// You only have access to the globalMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the mule engine is stopped
// You only have access to the globalMap here to persist data
return;</undeployScript>
      <properties version="4.0.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.0.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1425497675564</time>
            <timezone>America/Chicago</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="4.0.0">
            <id>d316c4bc-9e10-4162-b67c-e514afc59fa3</id>
            <name>Channel Helpers</name>
            <revision>1</revision>
            <lastModified>
              <time>1706120884823</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>1aca2a66-a83a-4703-9ec7-dfaa3a6ad5b2</string>
              <string>3e15b608-553f-45e7-a617-712d6b75ab4d</string>
              <string>f6d6aa80-d65f-4935-a267-d6bef39a7bdf</string>
              <string>edd93839-401c-4613-b696-6d4799ebc5af</string>
              <string>2f511815-92d1-4f0f-92e9-f4f8ae576b75</string>
              <string>b4a51816-0aad-444a-b1ce-f5c11f9961bc</string>
              <string>cb7f055d-45ae-43b7-ac7c-bb2b2db34ded</string>
              <string>139cdc6a-5f40-46bd-a246-2a9a1ef8ed10</string>
              <string>316c7826-a8ee-44b4-922c-8afe0daa2c72</string>
              <string>6ff8ca2b-c4e3-4e6f-897a-17f36ed63faa</string>
              <string>27aee1c0-8ed0-4062-89b5-1c7a69a946bc</string>
              <string>291b4847-a85d-41c6-bd4a-37f008b15ca8</string>
              <string>81c836fd-cbba-4247-b438-d4c9987ee75b</string>
              <string>4318de8e-4d7b-4885-9f11-8b2ac6f9c70a</string>
              <string>e983e439-461a-424f-8348-764b29e05ecb</string>
              <string>0763b542-8ed8-4a30-9c35-de3dbf030626</string>
              <string>75c150e0-fbc5-4eef-a856-bec6b3a39a24</string>
              <string>dd55a671-a099-4b29-bdbb-85c34050037a</string>
              <string>a08848df-6dcd-4c51-aa6d-d2f85edfdcf8</string>
              <string>ae504043-55f5-497e-ac87-33686e7569b2</string>
              <string>fef7c31a-61a4-43c8-bb15-79f51a36c882</string>
              <string>69f5ad2c-3bf4-4d55-8e4a-bd6faade202d</string>
              <string>39acd9f7-c975-4787-b31e-714f748a51a2</string>
              <string>a8bd6f50-894f-443f-b248-da3ebad3a748</string>
              <string>3c355935-e639-4517-b3b1-42c6564387f8</string>
              <string>1e45f5ac-6815-40a8-8fe9-15e98eb1d07b</string>
              <string>e695a1d8-2bde-4da3-a9a8-8cd6f81ca3c0</string>
              <string>3d95de17-a2ea-446c-be4c-36c32d8cda1c</string>
              <string>205385d0-06be-4baa-b072-9b431c315827</string>
              <string>a8ebde5a-16cb-407e-a8b4-fa8766d26c73</string>
              <string>fdcb1121-0d49-4ed8-b1a1-4f4482e1c20a</string>
              <string>b1842d23-059a-4e7e-b447-3b5f5ccf5c3a</string>
              <string>8c5d3887-bd22-4018-aeda-45e5c0f8d551</string>
              <string>a127fffb-1663-4206-b6d3-348aa228c999</string>
              <string>d70fc7fa-2005-4fc7-9222-dc8119346c6e</string>
              <string>2a2ad8a5-b961-4f4c-ac09-8abee2097972</string>
              <string>143b10e0-e01b-4942-9995-2d3b9a165d76</string>
              <string>a574bc8d-e82e-4ec6-9430-f3a37278e356</string>
              <string>f6e27b4e-dbbd-48c9-994f-55c3ac511fb9</string>
              <string>6060b76d-07c2-4f9f-bc71-d2e8c44d8271</string>
              <string>08536fee-6f99-4cc4-8958-f84daaee73d5</string>
              <string>dccd5a80-a385-482e-97e4-69340bce4522</string>
              <string>bfa0bc00-9ee1-4ba5-99de-9e46faffed6d</string>
              <string>183b6833-a563-42cb-8d4d-cdcb740aef30</string>
              <string>652e2cab-f748-41b4-ae8f-f0aae48e1fca</string>
              <string>bd81709b-2ef0-4760-aba9-f455fb338f37</string>
              <string>633e9341-a80b-4c11-a6a3-1d3942bb1782</string>
              <string>695c7ed6-252e-4229-83db-5571946a8b62</string>
              <string>df3f9b9f-e8e7-47a9-a33d-c9ec7d7820fd</string>
              <string>895ee0ef-745c-464d-a46c-e51331a01c3f</string>
              <string>50dcf6de-46b4-4de5-99c2-d341abb8a41a</string>
              <string>5e411c40-61f8-467e-b132-78e54e0b5f81</string>
              <string>ed4ef090-3f7e-442d-ad30-744e3a1313f2</string>
              <string>ed3e52dc-3023-4cc7-8cad-47e0d5df89c1</string>
              <string>ec29c308-0bc3-4eb0-a948-09c2c0747afa</string>
              <string>aeaba1c0-cef9-4ad8-82d7-76d66cc95562</string>
              <string>58f42d4f-22e1-4f7c-8acf-93a9fe92619c</string>
              <string>7a21d8ac-5afa-45b8-b136-5def45d811b4</string>
              <string>23ea2137-37b1-4b00-9fb0-c8889cd4bc97</string>
              <string>2a33ffd6-253d-402f-8fb6-93bd94f65dcd</string>
              <string>7445aaa5-ff13-4c08-a8b1-817cfed2692b</string>
              <string>3d290a27-5daf-4bb0-b3d8-90c9bb8afaeb</string>
              <string>e07b74b9-756e-4ca2-8be9-01bf7abfd817</string>
              <string>3ba1448a-d0b7-4478-bc57-f9cb8dab6de9</string>
              <string>dcaf136d-a3b8-47ed-aec7-d1619675ba2d</string>
              <string>285faf0d-523a-4c8e-92ec-4a0f3a89e048</string>
              <string>3263ad34-c86d-4481-b19f-4cd3d0d83d62</string>
              <string>e1af2369-c57e-4850-bc30-f79b6fe9fa66</string>
              <string>28ddc4f3-a96b-47db-b0e0-bcfcd825f48a</string>
              <string>90bc60ed-14c6-49db-b1e6-bb70d2b1d01d</string>
              <string>fd6b9376-0847-49d7-96c6-15c540a8e39a</string>
              <string>7ee4a47d-bdf3-473d-9da9-3a62c41037b1</string>
              <string>167ee803-661a-4e6e-ac6e-b84c057f7ca1</string>
              <string>a40e7657-c37a-4fb6-aa79-48a2ea16709c</string>
              <string>5d5e5835-8cd3-43af-ac82-ffe57439bfb5</string>
              <string>47f248b1-72d5-47dc-b0b3-6aa387e9e5d6</string>
              <string>d7c3e640-7850-4d70-bb1c-3289674bd609</string>
              <string>ae961745-fe19-46bd-b240-c82888091366</string>
              <string>68581957-7fba-421f-b063-941a804fcc46</string>
              <string>0056a8aa-7aa5-4047-a693-21bac64470aa</string>
              <string>2a637fa3-fb83-4666-abe0-c754924ff738</string>
              <string>8a08c578-68dd-4550-b178-eee13ade011e</string>
              <string>d448196a-4282-4d10-8c9a-7f1dfd19abea</string>
              <string>05759809-cfbd-4546-8b71-fd28c2499763</string>
              <string>1c01997f-00d1-4e40-9e63-da5706137cdd</string>
              <string>881db416-1776-4ab6-a3ce-5065ed11cdb5</string>
              <string>982b29a5-1743-4435-8842-9810e4e34926</string>
              <string>fe1bdd5e-cce0-4509-a09a-3545b69d3d7a</string>
              <string>1bff9775-2de8-4b51-bb6b-6aaa29c144bb</string>
              <string>5e97d36f-68fe-412d-a1df-3a25a07e5770</string>
              <string>9316c229-da47-49f8-a2c0-398ba155d370</string>
              <string>20524120-844c-4733-ac8a-b01f0e14a12f</string>
              <string>55ebb133-1e4d-4172-8718-301240e9518f</string>
              <string>b0dec3c0-01ca-45a6-b826-707b80644dff</string>
              <string>d1dd4342-0ad4-42cc-b708-f47e8c6621f8</string>
              <string>20d94501-cd46-41ce-9bf1-e34639074d16</string>
              <string>492a7c6c-4768-45e2-9f49-6c5488b0a2e5</string>
              <string>9f67f48f-ca64-4419-9101-05c39d7634fd</string>
              <string>14a2ad40-95bb-4ac9-a10e-d326537cc5a6</string>
              <string>6aa39894-bc9b-448c-aac6-b6967a0ce243</string>
              <string>4108a56a-b1a6-4d8c-9e8e-b065654860d0</string>
              <string>bdb4241f-2858-49da-8d4e-2f1579679620</string>
              <string>d56da279-9aa2-4b33-8913-bf0f37a046a0</string>
              <string>692365a7-9ec6-4c38-adee-672f4084adf3</string>
              <string>3f433a3e-e46d-440a-82c1-5490ada6b54e</string>
              <string>4d223d2f-d247-47da-b6e6-6d25e8a73775</string>
              <string>4b7abf79-011a-428e-96c9-040696a2869b</string>
              <string>72471096-425b-4750-81a4-123fca2e302c</string>
              <string>3558a098-5cbc-4e05-ae03-80b4aad20e53</string>
              <string>4a05dc00-9ad6-454a-b61b-ddd074bbb36c</string>
              <string>9d1c136c-3c94-43c3-b0f8-1c1551ac6987</string>
              <string>b2fdd8c2-f387-493b-ab35-e7e9e8ce056a</string>
              <string>930a4c9e-b458-4edf-92ff-3be07d68c28d</string>
              <string>8e046241-74a3-44e0-9bf9-f0b73a36717d</string>
              <string>0f0df6c9-1153-4e0b-800b-533492ba936c</string>
              <string>f016be9d-205d-4cdd-b4fb-e7139700dd22</string>
              <string>0801e501-57ac-4418-ac59-08e0edadabf3</string>
              <string>2607531a-4f9b-48ed-9ef4-b1b71b880864</string>
              <string>455c536f-d3fb-4832-941e-ef230b683590</string>
              <string>31b37e0b-cfbf-4787-b5d3-2082328fafd7</string>
              <string>21e47d6b-9863-4045-82af-8941087a4da1</string>
              <string>9ef7f26f-d3f7-420d-a30f-26f948be596d</string>
              <string>b3869a86-7d4f-4a10-b116-24b758a191b3</string>
              <string>a6825055-e697-487f-9add-560ad9567a60</string>
              <string>f7552865-32a0-4b5b-a5fd-9b0bddffddf9</string>
              <string>9f2bcd3c-8a74-49f1-b910-aa05c509c9cb</string>
              <string>bd270438-7262-47f8-8656-1baf51287078</string>
              <string>61b10ef9-baef-45e2-b747-a0987d851033</string>
              <string>aa5ba1e6-ab11-4a9a-a03c-e0fe58b49086</string>
              <string>ec653b8b-7362-4167-98ff-3845c7560d11</string>
              <string>1710d009-1bb2-4db6-a8d8-1493e6802c18</string>
              <string>25c5fbce-cb87-4ba9-a572-0be49242a0b2</string>
              <string>13738349-4cc4-43de-9365-a27ead17b524</string>
              <string>a43f7553-71de-41d3-aa16-93cc7a48bafc</string>
              <string>e7b4b295-2b47-4b4f-97b9-b9a9082bffb1</string>
              <string>854f78f8-4ebc-4c99-9a05-c26015671807</string>
              <string>e1900e14-c2a2-426e-86f0-971353d60cdd</string>
              <string>fd3b93dd-8b65-4b9f-a090-09bc7ec9aa12</string>
              <string>72c5d63d-a405-4ccf-b85e-dba740b14fdd</string>
              <string>f6efe381-7851-4bec-96c3-231b7baf666f</string>
              <string>2f3b524c-9d7b-43f7-b4ce-e84d27cc82ff</string>
              <string>99066deb-0d43-44f6-8823-b8cfe08e7185</string>
              <string>aa30f2b5-64cf-4396-b098-efeecb2224f2</string>
              <string>9fee4e0a-7a6d-4925-bc78-59df2c1f28af</string>
              <string>d23d6225-1145-484e-8164-f070fa1f2e8c</string>
              <string>57953b24-64cb-489d-9706-bf5dc1ef94ea</string>
              <string>08955a01-dda6-468b-a8cf-73586fe7d99f</string>
              <string>52d0a715-1be1-4fb2-8f3d-448c89c148f8</string>
              <string>4941f2fb-e641-4e0a-aba4-633ddf410760</string>
              <string>470c6c09-6850-4770-820c-bbfce54196bd</string>
              <string>21a820f0-205a-4046-8c4a-3788daca4d05</string>
              <string>5cee4e54-225f-43e4-830c-6dc3fb2826f2</string>
              <string>99643fbc-fa46-4c38-a7db-ac72833847f1</string>
              <string>9a44798a-871f-4402-9397-75241b18c6b0</string>
              <string>f1e2a84e-89e2-4ea0-8edd-4418f11b7eb7</string>
              <string>fe6275f5-4efa-4c86-90e2-8788c4f9c975</string>
              <string>081454ce-e155-45a1-bfc0-2297d6317259</string>
              <string>8b61cf50-9d95-43dd-b6ab-474e2a1d2d76</string>
              <string>5b245873-9491-4fa3-9bce-08c111cbe04f</string>
              <string>4041500f-7768-4011-b273-13fe61a2ebd6</string>
              <string>eaf28278-dd66-4bcc-b7e7-9a6c422db1ee</string>
              <string>0e0f63c0-5b51-4626-9a50-c0e2f5f94d37</string>
              <string>337347d0-d5f6-492c-9dc3-638a211132ff</string>
              <string>f836f593-4c61-49bd-be13-4cb3f9c6cffb</string>
              <string>0fec52ca-be59-47c9-85b1-700dc3b3dc2e</string>
              <string>a42ba030-2419-490c-8843-889e4197cf83</string>
              <string>4d75bdd7-6d1f-4db5-a7f8-4f63efa13197</string>
              <string>53d49d46-bd95-4ce5-8f98-7685217fedbf</string>
              <string>49a7b526-0577-4811-98c2-185bb6c22d91</string>
              <string>f8b35221-21af-4a86-9a4a-1b5657b5a029</string>
              <string>2f88fefe-6f80-46b6-a20a-04c29532073e</string>
              <string>8c637e01-95b0-4b11-a28f-4518b7f8d1ae</string>
              <string>7f5da166-70b8-48e0-9fa9-cf96fd867c30</string>
              <string>e3d85e42-6410-459f-95fc-2f98af8c0db9</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>bc768cd6-d735-40b1-9617-a3417481fe19</id>
                <name>Convert CSV to JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884963</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} csv - CSV string with column headers
	@return {String} return JSON object using column headers and field keys
*/
function convertCsvToJson(csv) {
	var textXML = SerializerFactory.getSerializer(&apos;DELIMITED&apos;).toXML(csv);
	var xml = new XML(textXML);
	var dataItems = [];
	for (var i = 1; i &lt;= xml[&apos;row&apos;].length() - 1; i++) {
		var jsonData = {};
		for (var j = 1; j &lt;= xml[&apos;row&apos;][0].children().length(); j++) {
			var column = &apos;column&apos; + j.toString();
			var header = xml[&apos;row&apos;][0][column].toString().replace(/\s/g, &apos;_&apos;).replace(/-/g, &apos;_&apos;).toLowerCase();
			var value = xml[&apos;row&apos;][i][column].toString();
			
			jsonData[header] = value;
			
		}
		dataItems.push(jsonData);
	}

	return JSON.stringify(dataItems);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>537d816c-81ff-4507-85c6-85e28b8c546c</id>
                <name>Convert JSON to CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885050</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts JSON to CSV.
**/
/*	@param {String} jsonData - JSON string with [0] index key as headers for csv
	@return {String} return csv
*/	

function convertJsonToCsv(data) {
	try{
		var json = JSON.parse(data);	
		var fields = Object.keys(json[0])
		var replacer = function(key, value) { return value === null ? &apos;&apos; : value } 
		var csv = json.map(function(row){
		  return fields.map(function(fieldName){
		    return JSON.stringify(row[fieldName], replacer)
		  }).join(&apos;,&apos;)
		})
		csv.unshift(fields.join(&apos;,&apos;)) // add header column
		csv = csv.join(&apos;\r\n&apos;);
		return csv;
	}catch(error){
		return error;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>ff3df0b8-cfa2-4ec9-82ac-37c9e4830e0c</id>
                <name>Generic - Send message to channel destination</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function sendMessageToChannelDestination(channelID, destinationID, map, data) {
	var msgMap;
	var outData = {};
	
	if (!map) {
		msgMap = Maps.map();
	} else {
		msgMap = Maps.map(map);
	}

	if (data == null || data == undefined) {
		data = &apos;&apos;;
	}

	if (msgMap.get(&apos;sourceChannelId&apos;) == null) {
		msgMap.add(&apos;sourceChannelId&apos;, channelId);
	}
	if (msgMap.get(&apos;sourceChannelName&apos;) == null) {
		msgMap.add(&apos;sourceChannelName&apos;, channelName);
	}

	// Dirty way to handle connector message not being defined. Handles cases where this function 
	// is used in a source js writer.
	try {
		if (msgMap.get(&apos;sourceMessageId&apos;) == null &amp;&amp; connectorMessage &amp;&amp; connectorMessage.getMessageId()) {
			msgMap.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString());
		}
	} catch(ex) {}

	var msgRequest = new RawMessage(data, [destinationID], msgMap);
	var msgResponse = router.routeMessageByChannelId(channelID, msgRequest);

	if (msgResponse == null) {
		// return;
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;; 
	}
	if (msgResponse.getStatus() == null) {
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;;
	}

	if (msgResponse.getStatus() == &apos;ERROR&apos;) {
		throw msgResponse.getMessage();
	}

	return msgResponse.getMessage();
	
	
	// var msgResponse;

	/*
	try {
		msgResponse = router.routeMessageByChannelId(channelID, msgRequest);
		outData.status = &apos;success&apos;;
		outData.status_message = &apos;message successfully sent to channel&apos;;
	} catch (ex) {
		outData.status = &apos;error&apos;;
		outData.status_message = ex.toString();
		return outData;
	}

	if (msgResponse.getStatus() == null) {
		outData.response_status = &apos;unknown&apos;;
		logger.error(&apos;Code Template &quot;Send message to channel by id&quot;: channel &quot;&apos; + ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;);
	}
	
	switch (String(msgResponse.getStatus())) {
		case &apos;ERROR&apos;:
			outData.response_status = &apos;error&apos;;
			break;
		case &apos;FILTERED&apos;:
			outData.response_status = &apos;filtered&apos;;
			break;
		case &apos;QUEUED&apos;:
			outData.response_status = &apos;queued&apos;;
			break;
		case &apos;RECEIVED&apos;:
			outData.response_status = &apos;received&apos;;
			break;
		case &apos;SENT&apos;:
			outData.response_status = &apos;sent&apos;;
			break;
	}

	outData.response_message = msgResponse.getMessage();

	return outData;
	*/
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>f4cd9e71-4f8d-4472-80a9-31b533f4d578</id>
                <name>Get bots DB connection to specified environment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884906</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get a new bots database connection. Be sure to wrap in try/finally block to close database connection.

	@param {String} environment - prod, staging, dev, local
	@return {String} return database connection
*/
function GetBotsDBConnection() {
	var username = configurationMap.get(&apos;bots-db-user&apos;);
	var password = configurationMap.get(&apos;bots-db-pass&apos;);
	var uri = configurationMap.get(&apos;bots-db-uri&apos;);	
	return DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, uri, username, password);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>554bd282-172b-43a0-8902-992baf63b04d</id>
                <name>Get DB connection to specified environment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885107</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get a new database connection. 

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetDBConnection(environment) {
	if (environment != &apos;prod&apos; &amp;&amp; environment != &apos;staging&apos; &amp;&amp; environment != &apos;dev&apos; &amp;&amp; environment != &apos;local&apos;) {
		return null;
	}
	
	var username = configurationMap.get(&apos;docsink-db-user-&apos; + environment);
	var password = configurationMap.get(&apos;docsink-db-pass-&apos; + environment);
	var uri = configurationMap.get(&apos;docsink-db-uri-&apos; + environment);

	return DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.cj.jdbc.Driver&apos;, uri, username, password);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>552a87ed-b5a0-4546-9e5c-0a768661a351</id>
                <name>Postprocessor - Generate channel response</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884842</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function generateChannelResponse() {
	// This script executes once after a message has been processed
	// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
	
	var destinations = sourceMap.get(&apos;destinationSet&apos;);
	var metadataIds = destinations.toArray();
	
	if (metadataIds.length == 0) {
		return ResponseFactory.getErrorResponse(&apos;invalid request&apos;);
	}
	
	var smsg = message.getConnectorMessages().get(0);
	if (smsg.getStatus() == &apos;ERROR&apos;) {
		if (smsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(smsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(smsg.getResponseData().getMessage());
	}
	
	var metadataID = metadataIds[0];
	var cmsg = message.getConnectorMessages().get(metadataID);

	if (cmsg.getStatus() == &apos;ERROR&apos;) {
		if (cmsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(cmsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;SENT&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;FILTERED&apos;) {
		return ResponseFactory.getFilteredResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;QUEUED&apos;) {
		return ResponseFactory.getQueuedResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;RECEIVED&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else {
		return cmsg;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
            <name>WebPT-Common</name>
            <revision>2</revision>
            <lastModified>
              <time>1678715257049</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
                <name>Check if String contains</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122790</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
                <name>Check if String contains HTTP code</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122593</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>8515e088-5c50-47ee-9e2f-9fad1ecf48bd</id>
                <name>Check if String is JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123309</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Added by Kirby Knight
	12/21/2020
	Test for JSON

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5f2f84ba-3e66-4be3-8260-8fbd8258bd92</id>
                <name>Check if the PDF is valid</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122055</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
//This function is used for checking the word &quot;PDF&quot; in inbound attachment.
function isValidBase64PDF(base64) {
	const ENCODED_PDF_SIGN = &quot;JVBERi&quot;; // %PDF sign
	const PDF_EOF = &quot;JSVFT0YNCg&quot;; // %EOF
	var pdfBase64Size = (base64.length() * (3 / 4)) - 1;
	
	return (base64.indexOf(ENCODED_PDF_SIGN) != -1 &amp;&amp; base64.indexOf(PDF_EOF) != -1 &amp;&amp; pdf_base64_size &gt; 36);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
                <name>Convert JSON date to HL7v2 date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122137</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
                <name>Convert JSON datetime to HL7v2 datetime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122430</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>bb21449a-df39-48c6-be52-24106c8df4c4</id>
                <name>Destination Formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Kirby Knight 03/10/2021
	
	This function will remove all other ROOT.Meta.Destinations nodes that are not passed in the
	destination variable and removes the ROOT.Meta.Destinations[x].Destination node

	@param {Any} destination - 
	@return {String} return description
*/
function formatDestinations(destination) {
var arrDestinations = msg[&apos;Meta&apos;][&apos;Destinations&apos;];
	//  Start at the end of the array because of the posibility of deleted array items 
	for (var i = arrDestinations.length - 1; i &gt;= 0; i--) {
		if (arrDestinations[i][&apos;Destination&apos;] == destination){
			delete arrDestinations[i][&apos;Destination&apos;]
		}else if (arrDestinations[i][&apos;Destination&apos;] != destination){
			arrDestinations.splice(i, 1);
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
                <name>Extract JSON node data</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121748</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7ed44f8a-fa40-4f3e-9426-3021604eabe0</id>
                <name>Get Feature Value by Name and Database</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123262</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns a string containing the feature value (system property) for a specific client database.

	@param {String} featureName - name of the feature, ie: &quot;BetterPTBidirectionalScheduling&quot;
	@param {String} databaseIdentifier - database name or databaseID / TenantID
	@param {String} databaseIdentifierType - what value is provided in databaseIdentifier. current options include &quot;ID&quot; or &quot;NAME&quot;
	@return {String} returns feature value
*/
function getFeatureValueByNameDatabase(featureName, databaseIdentifier, databaseIdentifierType) {
	var paramList = new Packages.java.util.ArrayList();
	paramList.add(featureName);
	paramList.add(databaseIdentifier);
	paramList.add(databaseIdentifierType);
	
	var sSQL = &apos;EXEC [dbo].[pr_FeatureValueByNameDatabase] ?, ?, ?&apos;;
	
	try {
		var result = executeSharedDBStatementFhirCh(sSQL, true, paramList);
		var featureValue ;
		if(result.next()){			//Added
		 featureValue = result.getString(1);
		}
		return featureValue;
	} catch (e) {
		logger.error(e);
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>9842be2c-c633-42ac-87f1-f91aca9e370f</id>
                <name>JSON Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121776</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function populates the MR and PI patient IDS to channelMap

	@return {String} return description
*/
function jsonPatientIds() {
	for each (patId in msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) {
	if (patId[&apos;IDType&apos;].toString() == &apos;MR&apos;){
		channelMap.put(&apos;extPatId&apos;, patId[&apos;ID&apos;].toString());
	}else if(patId[&apos;IDType&apos;].toString() == &apos;PI&apos;){
		channelMap.put(&apos;patId&apos;, patId[&apos;ID&apos;].toString());
	}
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
                <name>Verify JSON node for existance</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>394664c0-d536-4310-970e-181dc03ee7da</id>
            <name>WebPT-Conversions</name>
            <revision>2</revision>
            <lastModified>
              <time>1690140133427</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
                <name>Convert FHIR codes to HL7v2 codes</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122899</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>2fc8cbf3-0d92-4d1d-a3d6-136c09bd9f2a</id>
            <name>WebPT-Custom Database Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1703964939898</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>23c0b510-63e4-40fa-a4e1-7b2b92ce9a96</id>
                <name>Execute Statement Shared DB Conn clientDb Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122401</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Executes a SQL statement using a shared database connection stored in the Global Map. If the
connection does not exist, creates it.

@param {String} statement - The SQL statement to execute
@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
@param {List} paramList - A Java List object containing the parameters for the statement (optional)
 */
function executeSharedDBStatementclientDbCh(statement, isQuery, paramList) {
    var result;

    try {
        var dbConnclientDbCh = globalChannelMap.get(&quot;dbConnclientDbCh&quot;);

        if (dbConnclientDbCh == null || dbConnclientDbCh.getConnection().isClosed()) {
            dbConnclientDbCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;), $(&apos;dbClient&apos;), $(&apos;dbUserFhir&apos;), $(&apos;dbPwFhir&apos;));
            globalChannelMap.put(&quot;dbConnclientDbCh&quot;, dbConnclientDbCh);
        }

        if (paramList == undefined) {
            paramList = new Packages.java.util.ArrayList();
        }

        if (isQuery) {
            result = dbConnclientDbCh.executeCachedQuery(statement, paramList);
        } else {
            result = dbConnclientDbCh.executeUpdate(statement, paramList);
        }
    } catch (e) {
        logger.error(e);
    }
    finally {
        return result;
    }
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>4efb3110-a83f-48b5-93ad-79c847b51865</id>
                <name>Execute Statement Shared DB Conn clntAcl Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123455</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClntAclCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnClntAclCh = globalChannelMap.get(&quot;dbConnClntAclCh&quot;);

		if (dbConnClntAclCh == null || dbConnClntAclCh.getConnection().isClosed())
		{
			dbConnClntAclCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbClntAcl&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnClntAclCh&quot;, dbConnClntAclCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnClntAclCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnClntAclCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>d96d45dd-57f7-4aa9-9bf4-e464d31b94c6</id>
                <name>Execute Statement Shared DB Conn FHIR</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121922</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhir(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhir.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhir.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6014068e-c021-4a38-9fa6-6f38f6a2cdab</id>
                <name>Execute Statement Shared DB Conn FHIR Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123492</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhirCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhirCh = globalChannelMap.get(&quot;dbConnFhirCh&quot;);

		if (dbConnFhirCh == null || dbConnFhirCh.getConnection().isClosed())
		{
			dbConnFhirCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnFhirCh&quot;, dbConnFhirCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhirCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhirCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fbd5c4a1-b816-4496-acdf-067005f1d376</id>
                <name>Execute Statement Shared DB Conn Translations Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123008</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementTranslationsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnTranslationsCh = globalChannelMap.get(&quot;dbConnTranslationsCh&quot;);

		if (dbConnTranslationsCh == null || dbConnTranslationsCh.getConnection().isClosed())
		{
			dbConnTranslationsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlTranslations&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnTranslationsCh&quot;, dbConnTranslationsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnTranslationsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnTranslationsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5d1a5577-4ba4-4d1e-b6cd-e2d924164909</id>
                <name>Execute Statement with Shared DB Conn ODS Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122280</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdsCh = globalChannelMap.get(&quot;dbConnOdsCh&quot;);

		if (dbConnOdsCh == null || dbConnOdsCh.getConnection().isClosed())
		{
			dbConnOdsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOds&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdsCh&quot;, dbConnOdsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>3991db14-0c0b-4123-952c-5164c1ded501</id>
                <name>Execute Statement with Shared DB Conn ODW Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122960</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.  THis connects to the ODW db in Azure

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdwCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdwCh = globalChannelMap.get(&quot;dbConnOdwCh&quot;);

		if (dbConnOdwCh == null || dbConnOdwCh.getConnection().isClosed())
		{
			dbConnOdwCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOdw&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdwCh&quot;, dbConnOdwCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdwCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdwCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fae08c88-7550-479a-b8ed-ffef47e8eed9</id>
                <name>executeSharedDBStatementClient</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121956</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClient(statement, isQuery, paramList, dbname)
{
	var result;
 	var dburl= &apos;jdbc:sqlserver://AZW1DEV-SQL02.clinicient.com:1433;databaseName=&apos;+dbname+&apos;&apos;;
	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),dburl,$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			
			//globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		result = dbConnFhir.executeCachedQuery(statement);
	
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>ed20a457-5beb-4aea-9bb9-cf91112ccc56</id>
            <name>WebPT-Default Functions</name>
            <revision>10</revision>
            <lastModified>
              <time>1690140133487</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>a8a9a0c8-9322-46dc-bef8-011eb3d70291</id>
                <name>Create Header for CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121678</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This creates a header for csv files based on the contents of the header variable.  The header
	variable is populated in the channel from the outbound msg template

	@return {String} return description
*/
function createHeader() {
	//Destination transformer.  this creates the header for each new file

	var path = java.nio.file.Paths.get($(&apos;filePath&apos;)+$(&apos;fileName&apos;));
	var bytes = (new java.lang.String($(&apos;header&apos;))).getBytes(&quot;UTF-8&quot;);
	try {
	  java.nio.file.Files.write(path, bytes, java.nio.file.StandardOpenOption.CREATE_NEW);
	}
	catch (e) {
	  //logger.info(&quot; should throw IOException if file already exists&quot;);
	
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5a886a1f-dab1-41b5-94c6-1a639907d7da</id>
                <name>Filter Message Evaluate Received Checksum</name>
                <revision>33</revision>
                <lastModified>
                  <time>1678916806664</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating a checksum for each provided message.  We save off the most recent 100 unique checksum values in a global 
	array so if the current message has been recently received we are able to ignore it.
	
	@author:  	Jeffrey Ritz
	@scriptName: 	filterEvaluateReceivedChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {boolean} filter - return filter boolean (true= filter msg, false= do not filter msg)
		persist received_checksum global ChannelMap array
		persist filterMessage ChannelMap variable
	@history
*/
function filterEvaluateReceivedChecksum(msg) {	

	var scriptName= &apos;filterEvaluateReceivedChecksum&apos;
	var filter = false;
	var received_len_limit = 999;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B connectorMessage.getRawData() typeof: &apos;+typeof(connectorMessage.getRawData())+&apos; msg: &apos;+connectorMessage.getRawData());
	} // end if 
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	// var dataBytes = new java.lang.String(connectorMessage.getRawData()).getBytes(&apos;UTF-8&apos;);
	// message = new String(message.getBytes(&quot;utf-8&quot;), &quot;utf-8&quot;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	// var dataBytes = new java.lang.String(msg.getBytes(&apos;UTF-8&apos;));
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);

	// var messageObjectgetBytes= checksum.update(connectorMessage.getRawData().getBytes());
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 
	
	$c(&apos;checksum&apos;, checksum.getValue());
	
	//grab the global channel map variable holding the last X unique checksums that we&apos;ve received
	var received = $gc(&apos;received_checksums&apos;);
	
	if (received == undefined) {
		var received = new Array();
		received.push(checksum.getValue());
	} else {
		//check if we&apos;ve recently received this message, skip it if so
		if (received.indexOf(checksum.getValue()) &gt; -1) {
			filter = true;
		//we haven&apos;t seen it recently, so remember it and allow it through
		} else {
			var received_len = received.length;
			if (received_len &gt; received_len_limit) {
				//remove oldest/first entry, shift all entries forward, and add new entry to end
				received.shift();
				received[received_len_limit] = checksum.getValue();
			} else {
				//add new entry to end of array
				received[received_len] = checksum.getValue();
			} // end if 
		} // end if 
	} // end if 

	 //debug code
	/*for (x=0; x&lt;=received_len_limit; x++) {
		$c(&apos;received-&apos;+x, received[x]);
	} */

	$c(&apos;filterMessage&apos;,filter);
	$gc(&apos;received_checksums&apos;,received);

	return filter;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fbd0484d-74a2-48e4-aedd-f97c2fcefa16</id>
                <name>Get Message Checksum</name>
                <revision>12</revision>
                <lastModified>
                  <time>1678916806703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating and reutrning a checksum for each provided message
	
	@author:  	Jeffrey Ritz
	@scriptName: 	getMessageChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {object} result - return checksum value
	@history
	2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() to remove the exponential representation of the number value
*/
function getMessageChecksum(msg) {	

	var scriptName= &apos;getMessageChecksum&apos;;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	} // end if 
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 

	var checksumValue= checksum.getValue();
	// 2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() 
	var arrChecksumValue= new Array(); 
	arrChecksumValue.push(checksumValue);
	$c(&apos;checksum&apos;, arrChecksumValue);

	return checksumValue;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>91db9bd1-ca92-4dcc-bba4-e1ece603fc87</id>
                <name>Remove Child Object From Parent Object Json</name>
                <revision>22</revision>
                <lastModified>
                  <time>1678916845037</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON child object and it&apos;s descendents from a parent object JSON
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeChildObjectFromParentObjectJson.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
		{string} parentObject - place the name of the string to be designated as the parent object in the JSON
		{string} childObject  - place the name of the string to be designated as the child object to be deleted from the JSON
	@param {object} msg - return modified Json object msg excluding specified Json child object
	@history
*/
function removeChildObjectFromParentObjectJson(msg, parentObject, childObject) {
	
	var scriptName= &apos;removeChildObjectFromParentObjectJson&apos;;
	var debug= 0;

	//var strObjJson= JSON.parse(msg);
	var strObjJson= JSON.stringify(msg);
	
	//var objJson= JSON.parse(msg);
	var newParentObjects= new Object();
	var parentObjects= msg;
	var arrParentObjects= new Array();
	var arrTransactionObjects= new Array();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof parentObjects: &apos;+typeof(parentObjects));
	for (var key in parentObjects) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof key: &apos;+typeof(key)+&apos; key: &apos;+key);
		if(key== parentObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof objJson[key]: &apos;+typeof(parentObjects[key])+&apos; parentObjects[key]: &apos;+JSON.stringify(parentObjects[key]));
			
			var newChildObjects= new Object();
			var childObjects= parentObjects[key];
			var arrChildObjects= new Array();
			
			for(var key2 in childObjects) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key2: &apos;+typeof(key2)+&apos; key2: &apos;+key2+&apos; childObject: &apos;+childObject);
				for(var key3 in childObjects[key2]) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key3: &apos;+typeof(key3)+&apos; key3: &apos;+key3+&apos; childObject: &apos;+childObject);
					if(key3== childObject) {
						var transactionObject= new Object();
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; childObject typeof: &apos;+typeof(childObjects[key2][key3])+&apos; childObject: &apos;+JSON.stringify(childObjects[key2][key3]));
						transactionObject.key= key3;
						transactionObject.value= childObjects[key2][key3];
						delete childObjects[key2][key3];
						if(debug&gt;0) logger.info(&apos;DEBUG::&apos;+scriptName+&apos; DELETE childObject: &apos;+key3+&apos; of parentObject: &apos;+JSON.stringify(childObjects[key2]));
						arrTransactionObjects.push(transactionObject);
					} // end if
				} // end for 
				arrChildObjects.push(childObjects[key2]);
			} // end for
			newParentObjects[key]= arrChildObjects;
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add all child keys: &apos;+JSON.stringify(arrChildObjects)+&apos; into ParentObject[&apos;+key+&apos;]: &apos;+newParentObjects[key]);
		} else {
			newParentObjects[key]= parentObjects[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+parentObjects[key]+&apos; string: &apos;+JSON.stringify(parentObjects[key]));
		} // end if
		arrParentObjects.push(newParentObjects);
	} // end for 
	var newMsg= arrParentObjects;
	channelMap.put(&apos;removeChildObjectMsg&apos;,newMsg);
	channelMap.put(&apos;removedChildTransIds&apos;,arrTransactionObjects);
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));
	return newMsg;
	
} </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2ff28338-dfb6-445d-a04e-c74b5486a08c</id>
                <name>Remove Object From Json</name>
                <revision>26</revision>
                <lastModified>
                  <time>1703964988318</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  Desc: This function will remove a JSON object and it&apos;s descendents from the msg
	
	fileName: 	removeObjectFromJson.js
	name:		Remove Object From Json	
	Authored:  	Jeffrey Ritz
	Created: 		2023-03-09
	Details:
		@param IN {string} msg - provide parent JSON object (i.e. Inbound connectorMessage.getRawData() - msg)
		@param IN {string} removeObject - provide JSON object to evaluate and remove from parent JSON object (msg)
		OUT (object) newMsg - return JSON object from processing
	@history
	2023-03-15 JER - Modified to include removeObject function parameter to specify specific JSON object by referencing key to be removed
*/
function removeObjectFromJson(msg, removeObject) {
	
	var scriptName= &apos;removeObjectFromJson&apos;;
	var debug= 0;
	//var objJson= JSON.stringify(msg);
	var objJson= JSON.parse(msg);
	var newObjJson= new Object();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof objJson: &apos;+typeof(objJson)+&apos; objJSON: &apos;+JSON.stringify(objJson));
	for (var key in objJson) {
		if(key== removeObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; DELETE key: &apos;+key);
			// delete objJson[key];
		} else {
			newObjJson[key]= objJson[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+objJson[key]+&apos; string: &apos;+JSON.stringify(objJson[key]));
		} // end if 
	} // end for 
	var newMsg= newObjJson;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));

	// return JSON.stringify(newMsg);
	return newMsg;
} 
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>993a6fd8-454a-4133-ba32-dbcfea71582b</id>
                <name>Update EDITransactionLog</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123233</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	The purpose of this function is to update the status in Insight.
	Populate the channel map with the following variables functionalGroupControlNumber, status, eventDate

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateStatus () {

	//  Build the llst of paramters to pass to the database
	var paramList = new Packages.java.util.ArrayList();
	paramList.add($(&apos;functionalGroupControlNumber&apos;));
	paramList.add($(&apos;eventDate&apos;));  //dateTime in the acknoledged field in this format (&quot;2017-07-31 14:15:01.577&quot;)
	paramList.add(new java.lang.Integer(parseInt($(&apos;status&apos;), 10)));
	
//	logger.info(&quot;updateStatus &quot;+paramList);

	//  SQL Statement and paramters that will be sent to SQL
	var statement = &quot;EXEC dbo.pr_EDITransactionLog_Update ?, ?, ?&quot;;
	//  Code template used for establishiing connection and passing the sql statement and parameter list  
	var result = executeSharedDBStatementFhirCh(statement, false, paramList);
	return result;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>42cb290e-5fb0-46b8-82db-576ea1e1ba0d</id>
                <name>Update EDITransactionLog from responseStatus in the response transformer </name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123356</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Call this in the response transformer on the destination.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateReponseStatus() {
	var status = 0;
	if (responseStatus == SENT){
		var status = 1;
		channelMap.put(&apos;status&apos;,status);
	}

updateStatus()
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2223579b-f914-4be7-a575-f1a2a2aa1ae2</id>
                <name>ValidateToString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123044</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} mapping - 
	@param {Any} defaultValue - 
	@param {Any} replacement - 
	@return {String} return description
*/
function validateToString(mapping, defaultValue, replacement) {
    if (mapping == null) {
        mapping = &apos;&apos;;
    }
    return validate(mapping, defaultValue, replacement).toString() + &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>8c9a8268-4ef0-43e9-ae5b-bf8895f0b80c</id>
            <name>WebPT-FORMAT</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939902</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>Include any functions or codes with 
-date &amp; time formating related
-data type formatting</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>920c9ead-70a6-4168-9d95-89261b73ae44</id>
                <name>12digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123520</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Take any 12 digit string yyyyMMddHHmm and change to MM/dd/yyyy HH:mm 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm
*/
function yyyyMMddHHmm(string) {
	return DateUtil.convertDate(&quot;yyyyMMddHHmm&quot;, &quot;MM/dd/yyyy HH:mm&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fe2689ec-1946-46d5-8dd6-8fbbf106e1e6</id>
                <name>14digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122871</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Take 14 digit string yyyyMMddHHmmss and change to MM/dd/yyyy HH:mm:ss 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm:ss
*/
function yyyyMMddHHmmss(string) {
	if (string.length == 14) {
		  return DateUtil.convertDate(&quot;yyyyMMddHHmmss&quot;, &quot;MM/dd/yyyy HH:mm:ss&quot;, string);
	}
	else {
		return &quot;unregcognized string&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>b9db35e2-d5bd-48a1-8cc6-3475c698d7b4</id>
                <name>currentDT_yyyy-MM-dd HH:mm:ss.SSS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123114</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Kirby Knight
	Date Modified:  11/09/2020
	Retund the current date/time down to the millisecond

	@return {String} return description
*/
function currentDtToMilliseconds() {
	return DateUtil.getCurrentDate(&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7e747999-4bec-43fc-978d-7049d3543cf0</id>
                <name>fixHL7NodeOrder</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/

function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>dfedacf6-773b-413e-b78d-1bf16a92071d</id>
                <name>formatHL7Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121643</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Take any eight digit HL7 message data string (yyyyMMdd) and formats it human-readable format (MM/dd/yyyy)
	such as 20090612 -&gt; 06/12/2009

	@param {String} arg1 - 8 digit HL7 message data string yyyyMMdd
	@return {String} return date format as MM/dd/yyyy
*/
function formatHL7Date(string) {
	return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;MM/dd/yyyy&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>a8f54921-2cb6-4134-8806-3c4e10a757d9</id>
                <name>getCurrentLocalTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122014</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = getCurrentLocalTimestamp();

	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestamp() {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(&quot;EST&quot;)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6c5f1bd8-ebbf-4c8e-b465-0be8ccaba0d0</id>
                <name>getCurrentLocalTimeToMs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123077</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	Gets the current local date/time to the milliseconds
	Converts to the timezone that is passed in Examples (America/New_York, America/Chicago, America/Phoenix )

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestampToMs(timeZone) {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timeZone)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>78d74c5b-c881-404a-ad96-4e909e1a19f3</id>
                <name>phoneToE164</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121982</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Insight phone number to E164 format 5554446666 to +15554446666

	@param {Any} phoneIn - 
	@return {String} return description
*/
function phoneToE164(phoneIn) {
	logger.info(&apos;L1 &apos;+phoneIn);
	if(phoneIn != null ){
	//phoneIn = &apos;+1&apos; + phoneIn.toString(); 
	logger.info(&apos;L2 &apos;+phoneIn);
	return &apos;+1&apos; + phoneIn.toString(); 
	} else{
		return null;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>6a32d94d-408c-4e10-9799-e45e150b5c1f</id>
            <name>WebPT-MISC</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939909</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>miscellaneous javascript</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>84b4f1c7-f82d-4140-9fbd-98a95f68ff32</id>
                <name>getChannelState</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122648</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetChannelState(channel_id) {

    var channel_status = &quot;NA&quot;;

    var channel_count = parseInt(Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().size());

    for(var i=0;i&lt;channel_count;i++) {
        if (channel_id == Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getChannelId()) {
            channel_status = Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getState();
        }
    }

    return channel_status;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>715435a9-cb15-4e8f-bc5b-4249eaea6e17</id>
                <name>momentjs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122487</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Testing MIRTH-3794 using external JavaScript library &quot;moment.js&quot;
*/
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=b():&quot;function&quot;==typeof define&amp;&amp;define.amd?define(b):a.moment=b()}(this,function(){&quot;use strict&quot;;function a(){return Hc.apply(null,arguments)}function b(a){Hc=a}function c(a){return&quot;[object Array]&quot;===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||&quot;[object Date]&quot;===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c&lt;a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&amp;&amp;(a[c]=b[c]);return f(b,&quot;toString&quot;)&amp;&amp;(a.toString=b.toString),f(b,&quot;valueOf&quot;)&amp;&amp;(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ca(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&amp;&amp;(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow&lt;0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&amp;&amp;(a._isValid=a._isValid&amp;&amp;0===b.charsLeftOver&amp;&amp;0===b.unusedTokens.length&amp;&amp;void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if(&quot;undefined&quot;!=typeof b._isAMomentObject&amp;&amp;(a._isAMomentObject=b._isAMomentObject),&quot;undefined&quot;!=typeof b._i&amp;&amp;(a._i=b._i),&quot;undefined&quot;!=typeof b._f&amp;&amp;(a._f=b._f),&quot;undefined&quot;!=typeof b._l&amp;&amp;(a._l=b._l),&quot;undefined&quot;!=typeof b._strict&amp;&amp;(a._strict=b._strict),&quot;undefined&quot;!=typeof b._tzm&amp;&amp;(a._tzm=b._tzm),&quot;undefined&quot;!=typeof b._isUTC&amp;&amp;(a._isUTC=b._isUTC),&quot;undefined&quot;!=typeof b._offset&amp;&amp;(a._offset=b._offset),&quot;undefined&quot;!=typeof b._pf&amp;&amp;(a._pf=j(b)),&quot;undefined&quot;!=typeof b._locale&amp;&amp;(a._locale=b._locale),Jc.length&gt;0)for(c in Jc)d=Jc[c],e=b[d],&quot;undefined&quot;!=typeof e&amp;&amp;(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),Kc===!1&amp;&amp;(Kc=!0,a.updateOffset(this),Kc=!1)}function o(a){return a instanceof n||null!=a&amp;&amp;null!=a._isAMomentObject}function p(a){return 0&gt;a?Math.ceil(a):Math.floor(a)}function q(a){var b=+a,c=0;return 0!==b&amp;&amp;isFinite(b)&amp;&amp;(c=p(b)),c}function r(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e&gt;d;d++)(c&amp;&amp;a[d]!==b[d]||!c&amp;&amp;q(a[d])!==q(b[d]))&amp;&amp;g++;return g+f}function s(){}function t(a){return a?a.toLowerCase().replace(&quot;_&quot;,&quot;-&quot;):a}function u(a){for(var b,c,d,e,f=0;f&lt;a.length;){for(e=t(a[f]).split(&quot;-&quot;),b=e.length,c=t(a[f+1]),c=c?c.split(&quot;-&quot;):null;b&gt;0;){if(d=v(e.slice(0,b).join(&quot;-&quot;)))return d;if(c&amp;&amp;c.length&gt;=b&amp;&amp;r(e,c,!0)&gt;=b-1)break;b--}f++}return null}function v(a){var b=null;if(!Lc[a]&amp;&amp;&quot;undefined&quot;!=typeof module&amp;&amp;module&amp;&amp;module.exports)try{b=Ic._abbr,require(&quot;./locale/&quot;+a),w(b)}catch(c){}return Lc[a]}function w(a,b){var c;return a&amp;&amp;(c=&quot;undefined&quot;==typeof b?y(a):x(a,b),c&amp;&amp;(Ic=c)),Ic._abbr}function x(a,b){return null!==b?(b.abbr=a,Lc[a]=Lc[a]||new s,Lc[a].set(b),w(a),Lc[a]):(delete Lc[a],null)}function y(a){var b;if(a&amp;&amp;a._locale&amp;&amp;a._locale._abbr&amp;&amp;(a=a._locale._abbr),!a)return Ic;if(!c(a)){if(b=v(a))return b;a=[a]}return u(a)}function z(a,b){var c=a.toLowerCase();Mc[c]=Mc[c+&quot;s&quot;]=Mc[b]=a}function A(a){return&quot;string&quot;==typeof a?Mc[a]||Mc[a.toLowerCase()]:void 0}function B(a){var b,c,d={};for(c in a)f(a,c)&amp;&amp;(b=A(c),b&amp;&amp;(d[b]=a[c]));return d}function C(b,c){return function(d){return null!=d?(E(this,b,d),a.updateOffset(this,c),this):D(this,b)}}function D(a,b){return a._d[&quot;get&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b]()}function E(a,b,c){return a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b](c)}function F(a,b){var c;if(&quot;object&quot;==typeof a)for(c in a)this.set(c,a[c]);else if(a=A(a),&quot;function&quot;==typeof this[a])return this[a](b);return this}function G(a,b,c){var d=&quot;&quot;+Math.abs(a),e=b-d.length,f=a&gt;=0;return(f?c?&quot;+&quot;:&quot;&quot;:&quot;-&quot;)+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function H(a,b,c,d){var e=d;&quot;string&quot;==typeof d&amp;&amp;(e=function(){return this[d]()}),a&amp;&amp;(Qc[a]=e),b&amp;&amp;(Qc[b[0]]=function(){return G(e.apply(this,arguments),b[1],b[2])}),c&amp;&amp;(Qc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function I(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,&quot;&quot;):a.replace(/\\/g,&quot;&quot;)}function J(a){var b,c,d=a.match(Nc);for(b=0,c=d.length;c&gt;b;b++)Qc[d[b]]?d[b]=Qc[d[b]]:d[b]=I(d[b]);return function(e){var f=&quot;&quot;;for(b=0;c&gt;b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function K(a,b){return a.isValid()?(b=L(b,a.localeData()),Pc[b]=Pc[b]||J(b),Pc[b](a)):a.localeData().invalidDate()}function L(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Oc.lastIndex=0;d&gt;=0&amp;&amp;Oc.test(a);)a=a.replace(Oc,c),Oc.lastIndex=0,d-=1;return a}function M(a){return&quot;function&quot;==typeof a&amp;&amp;&quot;[object Function]&quot;===Object.prototype.toString.call(a)}function N(a,b,c){dd[a]=M(b)?b:function(a){return a&amp;&amp;c?c:b}}function O(a,b){return f(dd,a)?dd[a](b._strict,b._locale):new RegExp(P(a))}function P(a){return a.replace(&quot;\\&quot;,&quot;&quot;).replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,&quot;\\$&amp;&quot;)}function Q(a,b){var c,d=b;for(&quot;string&quot;==typeof a&amp;&amp;(a=[a]),&quot;number&quot;==typeof b&amp;&amp;(d=function(a,c){c[b]=q(a)}),c=0;c&lt;a.length;c++)ed[a[c]]=d}function R(a,b){Q(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function S(a,b,c){null!=b&amp;&amp;f(ed,a)&amp;&amp;ed[a](b,c._a,c,a)}function T(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function U(a){return this._months[a.month()]}function V(a){return this._monthsShort[a.month()]}function W(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12&gt;d;d++){if(e=h([2e3,d]),c&amp;&amp;!this._longMonthsParse[d]&amp;&amp;(this._longMonthsParse[d]=new RegExp(&quot;^&quot;+this.months(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;),this._shortMonthsParse[d]=new RegExp(&quot;^&quot;+this.monthsShort(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;)),c||this._monthsParse[d]||(f=&quot;^&quot;+this.months(e,&quot;&quot;)+&quot;|^&quot;+this.monthsShort(e,&quot;&quot;),this._monthsParse[d]=new RegExp(f.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),c&amp;&amp;&quot;MMMM&quot;===b&amp;&amp;this._longMonthsParse[d].test(a))return d;if(c&amp;&amp;&quot;MMM&quot;===b&amp;&amp;this._shortMonthsParse[d].test(a))return d;if(!c&amp;&amp;this._monthsParse[d].test(a))return d}}function X(a,b){var c;return&quot;string&quot;==typeof b&amp;&amp;(b=a.localeData().monthsParse(b),&quot;number&quot;!=typeof b)?a:(c=Math.min(a.date(),T(a.year(),b)),a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+&quot;Month&quot;](b,c),a)}function Y(b){return null!=b?(X(this,b),a.updateOffset(this,!0),this):D(this,&quot;Month&quot;)}function Z(){return T(this.year(),this.month())}function $(a){var b,c=a._a;return c&amp;&amp;-2===j(a).overflow&amp;&amp;(b=c[gd]&lt;0||c[gd]&gt;11?gd:c[hd]&lt;1||c[hd]&gt;T(c[fd],c[gd])?hd:c[id]&lt;0||c[id]&gt;24||24===c[id]&amp;&amp;(0!==c[jd]||0!==c[kd]||0!==c[ld])?id:c[jd]&lt;0||c[jd]&gt;59?jd:c[kd]&lt;0||c[kd]&gt;59?kd:c[ld]&lt;0||c[ld]&gt;999?ld:-1,j(a)._overflowDayOfYear&amp;&amp;(fd&gt;b||b&gt;hd)&amp;&amp;(b=hd),j(a).overflow=b),a}function _(b){a.suppressDeprecationWarnings===!1&amp;&amp;&quot;undefined&quot;!=typeof console&amp;&amp;console.warn&amp;&amp;console.warn(&quot;Deprecation warning: &quot;+b)}function aa(a,b){var c=!0;return g(function(){return c&amp;&amp;(_(a+&quot;\n&quot;+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function ba(a,b){od[a]||(_(b),od[a]=!0)}function ca(a){var b,c,d=a._i,e=pd.exec(d);if(e){for(j(a).iso=!0,b=0,c=qd.length;c&gt;b;b++)if(qd[b][1].exec(d)){a._f=qd[b][0];break}for(b=0,c=rd.length;c&gt;b;b++)if(rd[b][1].exec(d)){a._f+=(e[6]||&quot; &quot;)+rd[b][0];break}d.match(ad)&amp;&amp;(a._f+=&quot;Z&quot;),va(a)}else a._isValid=!1}function da(b){var c=sd.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ca(b),void(b._isValid===!1&amp;&amp;(delete b._isValid,a.createFromInputFallback(b))))}function ea(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970&gt;a&amp;&amp;h.setFullYear(a),h}function fa(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970&gt;a&amp;&amp;b.setUTCFullYear(a),b}function ga(a){return ha(a)?366:365}function ha(a){return a%4===0&amp;&amp;a%100!==0||a%400===0}function ia(){return ha(this.year())}function ja(a,b,c){var d,e=c-b,f=c-a.day();return f&gt;e&amp;&amp;(f-=7),e-7&gt;f&amp;&amp;(f+=7),d=Da(a).add(f,&quot;d&quot;),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ka(a){return ja(a,this._week.dow,this._week.doy).week}function la(){return this._week.dow}function ma(){return this._week.doy}function na(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function oa(a){var b=ja(this,1,4).week;return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function pa(a,b,c,d,e){var f,g=6+e-d,h=fa(a,0,1+g),i=h.getUTCDay();return e&gt;i&amp;&amp;(i+=7),c=null!=c?1*c:e,f=1+g+7*(b-1)-i+c,{year:f&gt;0?a:a-1,dayOfYear:f&gt;0?f:ga(a-1)+f}}function qa(a){var b=Math.round((this.clone().startOf(&quot;day&quot;)-this.clone().startOf(&quot;year&quot;))/864e5)+1;return null==a?b:this.add(a-b,&quot;d&quot;)}function ra(a,b,c){return null!=a?a:null!=b?b:c}function sa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ta(a){var b,c,d,e,f=[];if(!a._d){for(d=sa(a),a._w&amp;&amp;null==a._a[hd]&amp;&amp;null==a._a[gd]&amp;&amp;ua(a),a._dayOfYear&amp;&amp;(e=ra(a._a[fd],d[fd]),a._dayOfYear&gt;ga(e)&amp;&amp;(j(a)._overflowDayOfYear=!0),c=fa(e,0,a._dayOfYear),a._a[gd]=c.getUTCMonth(),a._a[hd]=c.getUTCDate()),b=0;3&gt;b&amp;&amp;null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7&gt;b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[id]&amp;&amp;0===a._a[jd]&amp;&amp;0===a._a[kd]&amp;&amp;0===a._a[ld]&amp;&amp;(a._nextDay=!0,a._a[id]=0),a._d=(a._useUTC?fa:ea).apply(null,f),null!=a._tzm&amp;&amp;a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&amp;&amp;(a._a[id]=24)}}function ua(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=ra(b.GG,a._a[fd],ja(Da(),1,4).year),d=ra(b.W,1),e=ra(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=ra(b.gg,a._a[fd],ja(Da(),f,g).year),d=ra(b.w,1),null!=b.d?(e=b.d,f&gt;e&amp;&amp;++d):e=null!=b.e?b.e+f:f),h=pa(c,d,e,g,f),a._a[fd]=h.year,a._dayOfYear=h.dayOfYear}function va(b){if(b._f===a.ISO_8601)return void ca(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=&quot;&quot;+b._i,i=h.length,k=0;for(e=L(b._f,b._locale).match(Nc)||[],c=0;c&lt;e.length;c++)f=e[c],d=(h.match(O(f,b))||[])[0],d&amp;&amp;(g=h.substr(0,h.indexOf(d)),g.length&gt;0&amp;&amp;j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Qc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),S(f,d,b)):b._strict&amp;&amp;!d&amp;&amp;j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length&gt;0&amp;&amp;j(b).unusedInput.push(h),j(b).bigHour===!0&amp;&amp;b._a[id]&lt;=12&amp;&amp;b._a[id]&gt;0&amp;&amp;(j(b).bigHour=void 0),b._a[id]=wa(b._locale,b._a[id],b._meridiem),ta(b),$(b)}function wa(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&amp;&amp;12&gt;b&amp;&amp;(b+=12),d||12!==b||(b=0),b):b}function xa(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e&lt;a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&amp;&amp;(b._useUTC=a._useUTC),b._f=a._f[e],va(b),k(b)&amp;&amp;(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d&gt;f)&amp;&amp;(d=f,c=b));g(a,c||b)}function ya(a){if(!a._d){var b=B(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ta(a)}}function za(a){var b=new n($(Aa(a)));return b._nextDay&amp;&amp;(b.add(1,&quot;d&quot;),b._nextDay=void 0),b}function Aa(a){var b=a._i,e=a._f;return a._locale=a._locale||y(a._l),null===b||void 0===e&amp;&amp;&quot;&quot;===b?l({nullInput:!0}):(&quot;string&quot;==typeof b&amp;&amp;(a._i=b=a._locale.preparse(b)),o(b)?new n($(b)):(c(e)?xa(a):e?va(a):d(b)?a._d=b:Ba(a),a))}function Ba(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):&quot;string&quot;==typeof f?da(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ta(b)):&quot;object&quot;==typeof f?ya(b):&quot;number&quot;==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ca(a,b,c,d,e){var f={};return&quot;boolean&quot;==typeof c&amp;&amp;(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,za(f)}function Da(a,b,c,d){return Ca(a,b,c,d,!1)}function Ea(a,b){var d,e;if(1===b.length&amp;&amp;c(b[0])&amp;&amp;(b=b[0]),!b.length)return Da();for(d=b[0],e=1;e&lt;b.length;++e)(!b[e].isValid()||b[e][a](d))&amp;&amp;(d=b[e]);return d}function Fa(){var a=[].slice.call(arguments,0);return Ea(&quot;isBefore&quot;,a)}function Ga(){var a=[].slice.call(arguments,0);return Ea(&quot;isAfter&quot;,a)}function Ha(a){var b=B(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=y(),this._bubble()}function Ia(a){return a instanceof Ha}function Ja(a,b){H(a,0,0,function(){var a=this.utcOffset(),c=&quot;+&quot;;return 0&gt;a&amp;&amp;(a=-a,c=&quot;-&quot;),c+G(~~(a/60),2)+b+G(~~a%60,2)})}function Ka(a){var b=(a||&quot;&quot;).match(ad)||[],c=b[b.length-1]||[],d=(c+&quot;&quot;).match(xd)||[&quot;-&quot;,0,0],e=+(60*d[1])+q(d[2]);return&quot;+&quot;===d[0]?e:-e}function La(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Da(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Da(b).local()}function Ma(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Na(b,c){var d,e=this._offset||0;return null!=b?(&quot;string&quot;==typeof b&amp;&amp;(b=Ka(b)),Math.abs(b)&lt;16&amp;&amp;(b=60*b),!this._isUTC&amp;&amp;c&amp;&amp;(d=Ma(this)),this._offset=b,this._isUTC=!0,null!=d&amp;&amp;this.add(d,&quot;m&quot;),e!==b&amp;&amp;(!c||this._changeInProgress?bb(this,Ya(b-e,&quot;m&quot;),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ma(this)}function Oa(a,b){return null!=a?(&quot;string&quot;!=typeof a&amp;&amp;(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Pa(a){return this.utcOffset(0,a)}function Qa(a){return this._isUTC&amp;&amp;(this.utcOffset(0,a),this._isUTC=!1,a&amp;&amp;this.subtract(Ma(this),&quot;m&quot;)),this}function Ra(){return this._tzm?this.utcOffset(this._tzm):&quot;string&quot;==typeof this._i&amp;&amp;this.utcOffset(Ka(this._i)),this}function Sa(a){return a=a?Da(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Ta(){return this.utcOffset()&gt;this.clone().month(0).utcOffset()||this.utcOffset()&gt;this.clone().month(5).utcOffset()}function Ua(){if(&quot;undefined&quot;!=typeof this._isDSTShifted)return this._isDSTShifted;var a={};if(m(a,this),a=Aa(a),a._a){var b=a._isUTC?h(a._a):Da(a._a);this._isDSTShifted=this.isValid()&amp;&amp;r(a._a,b.toArray())&gt;0}else this._isDSTShifted=!1;return this._isDSTShifted}function Va(){return!this._isUTC}function Wa(){return this._isUTC}function Xa(){return this._isUTC&amp;&amp;0===this._offset}function Ya(a,b){var c,d,e,g=a,h=null;return Ia(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:&quot;number&quot;==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=yd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:0,d:q(h[hd])*c,h:q(h[id])*c,m:q(h[jd])*c,s:q(h[kd])*c,ms:q(h[ld])*c}):(h=zd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:Za(h[2],c),M:Za(h[3],c),d:Za(h[4],c),h:Za(h[5],c),m:Za(h[6],c),s:Za(h[7],c),w:Za(h[8],c)}):null==g?g={}:&quot;object&quot;==typeof g&amp;&amp;(&quot;from&quot;in g||&quot;to&quot;in g)&amp;&amp;(e=_a(Da(g.from),Da(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ha(g),Ia(a)&amp;&amp;f(a,&quot;_locale&quot;)&amp;&amp;(d._locale=a._locale),d}function Za(a,b){var c=a&amp;&amp;parseFloat(a.replace(&quot;,&quot;,&quot;.&quot;));return(isNaN(c)?0:c)*b}function $a(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,&quot;M&quot;).isAfter(b)&amp;&amp;--c.months,c.milliseconds=+b-+a.clone().add(c.months,&quot;M&quot;),c}function _a(a,b){var c;return b=La(b,a),a.isBefore(b)?c=$a(a,b):(c=$a(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function ab(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(ba(b,&quot;moment().&quot;+b+&quot;(period, number) is deprecated. Please use moment().&quot;+b+&quot;(number, period).&quot;),f=c,c=d,d=f),c=&quot;string&quot;==typeof c?+c:c,e=Ya(c,d),bb(this,e,a),this}}function bb(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&amp;&amp;b._d.setTime(+b._d+f*d),g&amp;&amp;E(b,&quot;Date&quot;,D(b,&quot;Date&quot;)+g*d),h&amp;&amp;X(b,D(b,&quot;Month&quot;)+h*d),e&amp;&amp;a.updateOffset(b,g||h)}function cb(a,b){var c=a||Da(),d=La(c,this).startOf(&quot;day&quot;),e=this.diff(d,&quot;days&quot;,!0),f=-6&gt;e?&quot;sameElse&quot;:-1&gt;e?&quot;lastWeek&quot;:0&gt;e?&quot;lastDay&quot;:1&gt;e?&quot;sameDay&quot;:2&gt;e?&quot;nextDay&quot;:7&gt;e?&quot;nextWeek&quot;:&quot;sameElse&quot;;return this.format(b&amp;&amp;b[f]||this.localeData().calendar(f,this,Da(c)))}function db(){return new n(this)}function eb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this&gt;+a):(c=o(a)?+a:+Da(a),c&lt;+this.clone().startOf(b))}function fb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+a&gt;+this):(c=o(a)?+a:+Da(a),+this.clone().endOf(b)&lt;c)}function gb(a,b,c){return this.isAfter(a,c)&amp;&amp;this.isBefore(b,c)}function hb(a,b){var c;return b=A(b||&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this===+a):(c=+Da(a),+this.clone().startOf(b)&lt;=c&amp;&amp;c&lt;=+this.clone().endOf(b))}function ib(a,b,c){var d,e,f=La(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=A(b),&quot;year&quot;===b||&quot;month&quot;===b||&quot;quarter&quot;===b?(e=jb(this,f),&quot;quarter&quot;===b?e/=3:&quot;year&quot;===b&amp;&amp;(e/=12)):(d=this-f,e=&quot;second&quot;===b?d/1e3:&quot;minute&quot;===b?d/6e4:&quot;hour&quot;===b?d/36e5:&quot;day&quot;===b?(d-g)/864e5:&quot;week&quot;===b?(d-g)/6048e5:d),c?e:p(e)}function jb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,&quot;months&quot;);return 0&gt;b-f?(c=a.clone().add(e-1,&quot;months&quot;),d=(b-f)/(f-c)):(c=a.clone().add(e+1,&quot;months&quot;),d=(b-f)/(c-f)),-(e+d)}function kb(){return this.clone().locale(&quot;en&quot;).format(&quot;ddd MMM DD YYYY HH:mm:ss [GMT]ZZ&quot;)}function lb(){var a=this.clone().utc();return 0&lt;a.year()&amp;&amp;a.year()&lt;=9999?&quot;function&quot;==typeof Date.prototype.toISOString?this.toDate().toISOString():K(a,&quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;):K(a,&quot;YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;)}function mb(b){var c=K(this,b||a.defaultFormat);return this.localeData().postformat(c)}function nb(a,b){return this.isValid()?Ya({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.from(Da(),a)}function pb(a,b){return this.isValid()?Ya({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function qb(a){return this.to(Da(),a)}function rb(a){var b;return void 0===a?this._locale._abbr:(b=y(a),null!=b&amp;&amp;(this._locale=b),this)}function sb(){return this._locale}function tb(a){switch(a=A(a)){case&quot;year&quot;:this.month(0);case&quot;quarter&quot;:case&quot;month&quot;:this.date(1);case&quot;week&quot;:case&quot;isoWeek&quot;:case&quot;day&quot;:this.hours(0);case&quot;hour&quot;:this.minutes(0);case&quot;minute&quot;:this.seconds(0);case&quot;second&quot;:this.milliseconds(0)}return&quot;week&quot;===a&amp;&amp;this.weekday(0),&quot;isoWeek&quot;===a&amp;&amp;this.isoWeekday(1),&quot;quarter&quot;===a&amp;&amp;this.month(3*Math.floor(this.month()/3)),this}function ub(a){return a=A(a),void 0===a||&quot;millisecond&quot;===a?this:this.startOf(a).add(1,&quot;isoWeek&quot;===a?&quot;week&quot;:a).subtract(1,&quot;ms&quot;)}function vb(){return+this._d-6e4*(this._offset||0)}function wb(){return Math.floor(+this/1e3)}function xb(){return this._offset?new Date(+this):this._d}function yb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function zb(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Ab(){return k(this)}function Bb(){return g({},j(this))}function Cb(){return j(this).overflow}function Db(a,b){H(0,[a,a.length],0,b)}function Eb(a,b,c){return ja(Da([a,11,31+b-c]),b,c).week}function Fb(a){var b=ja(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Gb(a){var b=ja(this,1,4).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Hb(){return Eb(this.year(),1,4)}function Ib(){var a=this.localeData()._week;return Eb(this.year(),a.dow,a.doy)}function Jb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Kb(a,b){return&quot;string&quot;!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),&quot;number&quot;==typeof a?a:null):parseInt(a,10)}function Lb(a){return this._weekdays[a.day()]}function Mb(a){return this._weekdaysShort[a.day()]}function Nb(a){return this._weekdaysMin[a.day()]}function Ob(a){var b,c,d;for(this._weekdaysParse=this._weekdaysParse||[],b=0;7&gt;b;b++)if(this._weekdaysParse[b]||(c=Da([2e3,1]).day(b),d=&quot;^&quot;+this.weekdays(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysShort(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysMin(c,&quot;&quot;),this._weekdaysParse[b]=new RegExp(d.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),this._weekdaysParse[b].test(a))return b}function Pb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Kb(a,this.localeData()),this.add(a-b,&quot;d&quot;)):b}function Qb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,&quot;d&quot;)}function Rb(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Sb(a,b){H(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Tb(a,b){return b._meridiemParse}function Ub(a){return&quot;p&quot;===(a+&quot;&quot;).toLowerCase().charAt(0)}function Vb(a,b,c){return a&gt;11?c?&quot;pm&quot;:&quot;PM&quot;:c?&quot;am&quot;:&quot;AM&quot;}function Wb(a,b){b[ld]=q(1e3*(&quot;0.&quot;+a))}function Xb(){return this._isUTC?&quot;UTC&quot;:&quot;&quot;}function Yb(){return this._isUTC?&quot;Coordinated Universal Time&quot;:&quot;&quot;}function Zb(a){return Da(1e3*a)}function $b(){return Da.apply(null,arguments).parseZone()}function _b(a,b,c){var d=this._calendar[a];return&quot;function&quot;==typeof d?d.call(b,c):d}function ac(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function bc(){return this._invalidDate}function cc(a){return this._ordinal.replace(&quot;%d&quot;,a)}function dc(a){return a}function ec(a,b,c,d){var e=this._relativeTime[c];return&quot;function&quot;==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function fc(a,b){var c=this._relativeTime[a&gt;0?&quot;future&quot;:&quot;past&quot;];return&quot;function&quot;==typeof c?c(b):c.replace(/%s/i,b)}function gc(a){var b,c;for(c in a)b=a[c],&quot;function&quot;==typeof b?this[c]=b:this[&quot;_&quot;+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+&quot;|&quot;+/\d{1,2}/.source)}function hc(a,b,c,d){var e=y(),f=h().set(d,b);return e[c](f,a)}function ic(a,b,c,d,e){if(&quot;number&quot;==typeof a&amp;&amp;(b=a,a=void 0),a=a||&quot;&quot;,null!=b)return hc(a,b,c,e);var f,g=[];for(f=0;d&gt;f;f++)g[f]=hc(a,f,c,e);return g}function jc(a,b){return ic(a,b,&quot;months&quot;,12,&quot;month&quot;)}function kc(a,b){return ic(a,b,&quot;monthsShort&quot;,12,&quot;month&quot;)}function lc(a,b){return ic(a,b,&quot;weekdays&quot;,7,&quot;day&quot;)}function mc(a,b){return ic(a,b,&quot;weekdaysShort&quot;,7,&quot;day&quot;)}function nc(a,b){return ic(a,b,&quot;weekdaysMin&quot;,7,&quot;day&quot;)}function oc(){var a=this._data;return this._milliseconds=Wd(this._milliseconds),this._days=Wd(this._days),this._months=Wd(this._months),a.milliseconds=Wd(a.milliseconds),a.seconds=Wd(a.seconds),a.minutes=Wd(a.minutes),a.hours=Wd(a.hours),a.months=Wd(a.months),a.years=Wd(a.years),this}function pc(a,b,c,d){var e=Ya(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function qc(a,b){return pc(this,a,b,1)}function rc(a,b){return pc(this,a,b,-1)}function sc(a){return 0&gt;a?Math.floor(a):Math.ceil(a)}function tc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f&gt;=0&amp;&amp;g&gt;=0&amp;&amp;h&gt;=0||0&gt;=f&amp;&amp;0&gt;=g&amp;&amp;0&gt;=h||(f+=864e5*sc(vc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=p(f/1e3),i.seconds=a%60,b=p(a/60),i.minutes=b%60,c=p(b/60),i.hours=c%24,g+=p(c/24),e=p(uc(g)),h+=e,g-=sc(vc(e)),d=p(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function uc(a){return 4800*a/146097}function vc(a){return 146097*a/4800}function wc(a){var b,c,d=this._milliseconds;if(a=A(a),&quot;month&quot;===a||&quot;year&quot;===a)return b=this._days+d/864e5,c=this._months+uc(b),&quot;month&quot;===a?c:c/12;switch(b=this._days+Math.round(vc(this._months)),a){case&quot;week&quot;:return b/7+d/6048e5;case&quot;day&quot;:return b+d/864e5;case&quot;hour&quot;:return 24*b+d/36e5;case&quot;minute&quot;:return 1440*b+d/6e4;case&quot;second&quot;:return 86400*b+d/1e3;case&quot;millisecond&quot;:return Math.floor(864e5*b)+d;default:throw new Error(&quot;Unknown unit &quot;+a)}}function xc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*q(this._months/12)}function yc(a){return function(){return this.as(a)}}function zc(a){return a=A(a),this[a+&quot;s&quot;]()}function Ac(a){return function(){return this._data[a]}}function Bc(){return p(this.days()/7)}function Cc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Dc(a,b,c){var d=Ya(a).abs(),e=ke(d.as(&quot;s&quot;)),f=ke(d.as(&quot;m&quot;)),g=ke(d.as(&quot;h&quot;)),h=ke(d.as(&quot;d&quot;)),i=ke(d.as(&quot;M&quot;)),j=ke(d.as(&quot;y&quot;)),k=e&lt;le.s&amp;&amp;[&quot;s&quot;,e]||1===f&amp;&amp;[&quot;m&quot;]||f&lt;le.m&amp;&amp;[&quot;mm&quot;,f]||1===g&amp;&amp;[&quot;h&quot;]||g&lt;le.h&amp;&amp;[&quot;hh&quot;,g]||1===h&amp;&amp;[&quot;d&quot;]||h&lt;le.d&amp;&amp;[&quot;dd&quot;,h]||1===i&amp;&amp;[&quot;M&quot;]||i&lt;le.M&amp;&amp;[&quot;MM&quot;,i]||1===j&amp;&amp;[&quot;y&quot;]||[&quot;yy&quot;,j];return k[2]=b,k[3]=+a&gt;0,k[4]=c,Cc.apply(null,k)}function Ec(a,b){return void 0===le[a]?!1:void 0===b?le[a]:(le[a]=b,!0)}function Fc(a){var b=this.localeData(),c=Dc(this,!a,b);return a&amp;&amp;(c=b.pastFuture(+this,c)),b.postformat(c)}function Gc(){var a,b,c,d=me(this._milliseconds)/1e3,e=me(this._days),f=me(this._months);a=p(d/60),b=p(a/60),d%=60,a%=60,c=p(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0&gt;m?&quot;-&quot;:&quot;&quot;)+&quot;P&quot;+(g?g+&quot;Y&quot;:&quot;&quot;)+(h?h+&quot;M&quot;:&quot;&quot;)+(i?i+&quot;D&quot;:&quot;&quot;)+(j||k||l?&quot;T&quot;:&quot;&quot;)+(j?j+&quot;H&quot;:&quot;&quot;)+(k?k+&quot;M&quot;:&quot;&quot;)+(l?l+&quot;S&quot;:&quot;&quot;):&quot;P0D&quot;}var Hc,Ic,Jc=a.momentProperties=[],Kc=!1,Lc={},Mc={},Nc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Pc={},Qc={},Rc=/\d/,Sc=/\d\d/,Tc=/\d{3}/,Uc=/\d{4}/,Vc=/[+-]?\d{6}/,Wc=/\d\d?/,Xc=/\d{1,3}/,Yc=/\d{1,4}/,Zc=/[+-]?\d{1,6}/,$c=/\d+/,_c=/[+-]?\d+/,ad=/Z|[+-]\d\d:?\d\d/gi,bd=/[+-]?\d+(\.\d{1,3})?/,cd=/[0-9]*[&apos;a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,dd={},ed={},fd=0,gd=1,hd=2,id=3,jd=4,kd=5,ld=6;H(&quot;M&quot;,[&quot;MM&quot;,2],&quot;Mo&quot;,function(){return this.month()+1}),H(&quot;MMM&quot;,0,0,function(a){return this.localeData().monthsShort(this,a)}),H(&quot;MMMM&quot;,0,0,function(a){return this.localeData().months(this,a)}),z(&quot;month&quot;,&quot;M&quot;),N(&quot;M&quot;,Wc),N(&quot;MM&quot;,Wc,Sc),N(&quot;MMM&quot;,cd),N(&quot;MMMM&quot;,cd),Q([&quot;M&quot;,&quot;MM&quot;],function(a,b){b[gd]=q(a)-1}),Q([&quot;MMM&quot;,&quot;MMMM&quot;],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[gd]=e:j(c).invalidMonth=a});var md=&quot;January_February_March_April_May_June_July_August_September_October_November_December&quot;.split(&quot;_&quot;),nd=&quot;Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec&quot;.split(&quot;_&quot;),od={};a.suppressDeprecationWarnings=!1;var pd=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,qd=[[&quot;YYYYYY-MM-DD&quot;,/[+-]\d{6}-\d{2}-\d{2}/],[&quot;YYYY-MM-DD&quot;,/\d{4}-\d{2}-\d{2}/],[&quot;GGGG-[W]WW-E&quot;,/\d{4}-W\d{2}-\d/],[&quot;GGGG-[W]WW&quot;,/\d{4}-W\d{2}/],[&quot;YYYY-DDD&quot;,/\d{4}-\d{3}/]],rd=[[&quot;HH:mm:ss.SSSS&quot;,/(T| )\d\d:\d\d:\d\d\.\d+/],[&quot;HH:mm:ss&quot;,/(T| )\d\d:\d\d:\d\d/],[&quot;HH:mm&quot;,/(T| )\d\d:\d\d/],[&quot;HH&quot;,/(T| )\d\d/]],sd=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=aa(&quot;moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.&quot;,function(a){a._d=new Date(a._i+(a._useUTC?&quot; UTC&quot;:&quot;&quot;))}),H(0,[&quot;YY&quot;,2],0,function(){return this.year()%100}),H(0,[&quot;YYYY&quot;,4],0,&quot;year&quot;),H(0,[&quot;YYYYY&quot;,5],0,&quot;year&quot;),H(0,[&quot;YYYYYY&quot;,6,!0],0,&quot;year&quot;),z(&quot;year&quot;,&quot;y&quot;),N(&quot;Y&quot;,_c),N(&quot;YY&quot;,Wc,Sc),N(&quot;YYYY&quot;,Yc,Uc),N(&quot;YYYYY&quot;,Zc,Vc),N(&quot;YYYYYY&quot;,Zc,Vc),Q([&quot;YYYYY&quot;,&quot;YYYYYY&quot;],fd),Q(&quot;YYYY&quot;,function(b,c){c[fd]=2===b.length?a.parseTwoDigitYear(b):q(b)}),Q(&quot;YY&quot;,function(b,c){c[fd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return q(a)+(q(a)&gt;68?1900:2e3)};var td=C(&quot;FullYear&quot;,!1);H(&quot;w&quot;,[&quot;ww&quot;,2],&quot;wo&quot;,&quot;week&quot;),H(&quot;W&quot;,[&quot;WW&quot;,2],&quot;Wo&quot;,&quot;isoWeek&quot;),z(&quot;week&quot;,&quot;w&quot;),z(&quot;isoWeek&quot;,&quot;W&quot;),N(&quot;w&quot;,Wc),N(&quot;ww&quot;,Wc,Sc),N(&quot;W&quot;,Wc),N(&quot;WW&quot;,Wc,Sc),R([&quot;w&quot;,&quot;ww&quot;,&quot;W&quot;,&quot;WW&quot;],function(a,b,c,d){b[d.substr(0,1)]=q(a)});var ud={dow:0,doy:6};H(&quot;DDD&quot;,[&quot;DDDD&quot;,3],&quot;DDDo&quot;,&quot;dayOfYear&quot;),z(&quot;dayOfYear&quot;,&quot;DDD&quot;),N(&quot;DDD&quot;,Xc),N(&quot;DDDD&quot;,Tc),Q([&quot;DDD&quot;,&quot;DDDD&quot;],function(a,b,c){c._dayOfYear=q(a)}),a.ISO_8601=function(){};var vd=aa(&quot;moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return this&gt;a?this:a}),wd=aa(&quot;moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return a&gt;this?this:a});Ja(&quot;Z&quot;,&quot;:&quot;),Ja(&quot;ZZ&quot;,&quot;&quot;),N(&quot;Z&quot;,ad),N(&quot;ZZ&quot;,ad),Q([&quot;Z&quot;,&quot;ZZ&quot;],function(a,b,c){c._useUTC=!0,c._tzm=Ka(a)});var xd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var yd=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,zd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Ya.fn=Ha.prototype;var Ad=ab(1,&quot;add&quot;),Bd=ab(-1,&quot;subtract&quot;);a.defaultFormat=&quot;YYYY-MM-DDTHH:mm:ssZ&quot;;var Cd=aa(&quot;moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.&quot;,function(a){return void 0===a?this.localeData():this.locale(a)});H(0,[&quot;gg&quot;,2],0,function(){return this.weekYear()%100}),H(0,[&quot;GG&quot;,2],0,function(){return this.isoWeekYear()%100}),Db(&quot;gggg&quot;,&quot;weekYear&quot;),Db(&quot;ggggg&quot;,&quot;weekYear&quot;),Db(&quot;GGGG&quot;,&quot;isoWeekYear&quot;),Db(&quot;GGGGG&quot;,&quot;isoWeekYear&quot;),z(&quot;weekYear&quot;,&quot;gg&quot;),z(&quot;isoWeekYear&quot;,&quot;GG&quot;),N(&quot;G&quot;,_c),N(&quot;g&quot;,_c),N(&quot;GG&quot;,Wc,Sc),N(&quot;gg&quot;,Wc,Sc),N(&quot;GGGG&quot;,Yc,Uc),N(&quot;gggg&quot;,Yc,Uc),N(&quot;GGGGG&quot;,Zc,Vc),N(&quot;ggggg&quot;,Zc,Vc),R([&quot;gggg&quot;,&quot;ggggg&quot;,&quot;GGGG&quot;,&quot;GGGGG&quot;],function(a,b,c,d){b[d.substr(0,2)]=q(a)}),R([&quot;gg&quot;,&quot;GG&quot;],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),H(&quot;Q&quot;,0,0,&quot;quarter&quot;),z(&quot;quarter&quot;,&quot;Q&quot;),N(&quot;Q&quot;,Rc),Q(&quot;Q&quot;,function(a,b){b[gd]=3*(q(a)-1)}),H(&quot;D&quot;,[&quot;DD&quot;,2],&quot;Do&quot;,&quot;date&quot;),z(&quot;date&quot;,&quot;D&quot;),N(&quot;D&quot;,Wc),N(&quot;DD&quot;,Wc,Sc),N(&quot;Do&quot;,function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),Q([&quot;D&quot;,&quot;DD&quot;],hd),Q(&quot;Do&quot;,function(a,b){b[hd]=q(a.match(Wc)[0],10)});var Dd=C(&quot;Date&quot;,!0);H(&quot;d&quot;,0,&quot;do&quot;,&quot;day&quot;),H(&quot;dd&quot;,0,0,function(a){return this.localeData().weekdaysMin(this,a)}),H(&quot;ddd&quot;,0,0,function(a){return this.localeData().weekdaysShort(this,a)}),H(&quot;dddd&quot;,0,0,function(a){return this.localeData().weekdays(this,a)}),H(&quot;e&quot;,0,0,&quot;weekday&quot;),H(&quot;E&quot;,0,0,&quot;isoWeekday&quot;),z(&quot;day&quot;,&quot;d&quot;),z(&quot;weekday&quot;,&quot;e&quot;),z(&quot;isoWeekday&quot;,&quot;E&quot;),N(&quot;d&quot;,Wc),N(&quot;e&quot;,Wc),N(&quot;E&quot;,Wc),N(&quot;dd&quot;,cd),N(&quot;ddd&quot;,cd),N(&quot;dddd&quot;,cd),R([&quot;dd&quot;,&quot;ddd&quot;,&quot;dddd&quot;],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),R([&quot;d&quot;,&quot;e&quot;,&quot;E&quot;],function(a,b,c,d){b[d]=q(a)});var Ed=&quot;Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday&quot;.split(&quot;_&quot;),Fd=&quot;Sun_Mon_Tue_Wed_Thu_Fri_Sat&quot;.split(&quot;_&quot;),Gd=&quot;Su_Mo_Tu_We_Th_Fr_Sa&quot;.split(&quot;_&quot;);H(&quot;H&quot;,[&quot;HH&quot;,2],0,&quot;hour&quot;),H(&quot;h&quot;,[&quot;hh&quot;,2],0,function(){return this.hours()%12||12}),Sb(&quot;a&quot;,!0),Sb(&quot;A&quot;,!1),z(&quot;hour&quot;,&quot;h&quot;),N(&quot;a&quot;,Tb),N(&quot;A&quot;,Tb),N(&quot;H&quot;,Wc),N(&quot;h&quot;,Wc),N(&quot;HH&quot;,Wc,Sc),N(&quot;hh&quot;,Wc,Sc),Q([&quot;H&quot;,&quot;HH&quot;],id),Q([&quot;a&quot;,&quot;A&quot;],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),Q([&quot;h&quot;,&quot;hh&quot;],function(a,b,c){b[id]=q(a),j(c).bigHour=!0});var Hd=/[ap]\.?m?\.?/i,Id=C(&quot;Hours&quot;,!0);H(&quot;m&quot;,[&quot;mm&quot;,2],0,&quot;minute&quot;),z(&quot;minute&quot;,&quot;m&quot;),N(&quot;m&quot;,Wc),N(&quot;mm&quot;,Wc,Sc),Q([&quot;m&quot;,&quot;mm&quot;],jd);var Jd=C(&quot;Minutes&quot;,!1);H(&quot;s&quot;,[&quot;ss&quot;,2],0,&quot;second&quot;),z(&quot;second&quot;,&quot;s&quot;),N(&quot;s&quot;,Wc),N(&quot;ss&quot;,Wc,Sc),Q([&quot;s&quot;,&quot;ss&quot;],kd);var Kd=C(&quot;Seconds&quot;,!1);H(&quot;S&quot;,0,0,function(){return~~(this.millisecond()/100)}),H(0,[&quot;SS&quot;,2],0,function(){return~~(this.millisecond()/10)}),H(0,[&quot;SSS&quot;,3],0,&quot;millisecond&quot;),H(0,[&quot;SSSS&quot;,4],0,function(){return 10*this.millisecond()}),H(0,[&quot;SSSSS&quot;,5],0,function(){return 100*this.millisecond()}),H(0,[&quot;SSSSSS&quot;,6],0,function(){return 1e3*this.millisecond()}),H(0,[&quot;SSSSSSS&quot;,7],0,function(){return 1e4*this.millisecond()}),H(0,[&quot;SSSSSSSS&quot;,8],0,function(){return 1e5*this.millisecond()}),H(0,[&quot;SSSSSSSSS&quot;,9],0,function(){return 1e6*this.millisecond()}),z(&quot;millisecond&quot;,&quot;ms&quot;),N(&quot;S&quot;,Xc,Rc),N(&quot;SS&quot;,Xc,Sc),N(&quot;SSS&quot;,Xc,Tc);var Ld;for(Ld=&quot;SSSS&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)N(Ld,$c);for(Ld=&quot;S&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)Q(Ld,Wb);var Md=C(&quot;Milliseconds&quot;,!1);H(&quot;z&quot;,0,0,&quot;zoneAbbr&quot;),H(&quot;zz&quot;,0,0,&quot;zoneName&quot;);var Nd=n.prototype;Nd.add=Ad,Nd.calendar=cb,Nd.clone=db,Nd.diff=ib,Nd.endOf=ub,Nd.format=mb,Nd.from=nb,Nd.fromNow=ob,Nd.to=pb,Nd.toNow=qb,Nd.get=F,Nd.invalidAt=Cb,Nd.isAfter=eb,Nd.isBefore=fb,Nd.isBetween=gb,Nd.isSame=hb,Nd.isValid=Ab,Nd.lang=Cd,Nd.locale=rb,Nd.localeData=sb,Nd.max=wd,Nd.min=vd,Nd.parsingFlags=Bb,Nd.set=F,Nd.startOf=tb,Nd.subtract=Bd,Nd.toArray=yb,Nd.toObject=zb,Nd.toDate=xb,Nd.toISOString=lb,Nd.toJSON=lb,Nd.toString=kb,Nd.unix=wb,Nd.valueOf=vb,Nd.year=td,Nd.isLeapYear=ia,Nd.weekYear=Fb,Nd.isoWeekYear=Gb,Nd.quarter=Nd.quarters=Jb,Nd.month=Y,Nd.daysInMonth=Z,Nd.week=Nd.weeks=na,Nd.isoWeek=Nd.isoWeeks=oa,Nd.weeksInYear=Ib,Nd.isoWeeksInYear=Hb,Nd.date=Dd,Nd.day=Nd.days=Pb,Nd.weekday=Qb,Nd.isoWeekday=Rb,Nd.dayOfYear=qa,Nd.hour=Nd.hours=Id,Nd.minute=Nd.minutes=Jd,Nd.second=Nd.seconds=Kd,
Nd.millisecond=Nd.milliseconds=Md,Nd.utcOffset=Na,Nd.utc=Pa,Nd.local=Qa,Nd.parseZone=Ra,Nd.hasAlignedHourOffset=Sa,Nd.isDST=Ta,Nd.isDSTShifted=Ua,Nd.isLocal=Va,Nd.isUtcOffset=Wa,Nd.isUtc=Xa,Nd.isUTC=Xa,Nd.zoneAbbr=Xb,Nd.zoneName=Yb,Nd.dates=aa(&quot;dates accessor is deprecated. Use date instead.&quot;,Dd),Nd.months=aa(&quot;months accessor is deprecated. Use month instead&quot;,Y),Nd.years=aa(&quot;years accessor is deprecated. Use year instead&quot;,td),Nd.zone=aa(&quot;moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779&quot;,Oa);var Od=Nd,Pd={sameDay:&quot;[Today at] LT&quot;,nextDay:&quot;[Tomorrow at] LT&quot;,nextWeek:&quot;dddd [at] LT&quot;,lastDay:&quot;[Yesterday at] LT&quot;,lastWeek:&quot;[Last] dddd [at] LT&quot;,sameElse:&quot;L&quot;},Qd={LTS:&quot;h:mm:ss A&quot;,LT:&quot;h:mm A&quot;,L:&quot;MM/DD/YYYY&quot;,LL:&quot;MMMM D, YYYY&quot;,LLL:&quot;MMMM D, YYYY h:mm A&quot;,LLLL:&quot;dddd, MMMM D, YYYY h:mm A&quot;},Rd=&quot;Invalid date&quot;,Sd=&quot;%d&quot;,Td=/\d{1,2}/,Ud={future:&quot;in %s&quot;,past:&quot;%s ago&quot;,s:&quot;a few seconds&quot;,m:&quot;a minute&quot;,mm:&quot;%d minutes&quot;,h:&quot;an hour&quot;,hh:&quot;%d hours&quot;,d:&quot;a day&quot;,dd:&quot;%d days&quot;,M:&quot;a month&quot;,MM:&quot;%d months&quot;,y:&quot;a year&quot;,yy:&quot;%d years&quot;},Vd=s.prototype;Vd._calendar=Pd,Vd.calendar=_b,Vd._longDateFormat=Qd,Vd.longDateFormat=ac,Vd._invalidDate=Rd,Vd.invalidDate=bc,Vd._ordinal=Sd,Vd.ordinal=cc,Vd._ordinalParse=Td,Vd.preparse=dc,Vd.postformat=dc,Vd._relativeTime=Ud,Vd.relativeTime=ec,Vd.pastFuture=fc,Vd.set=gc,Vd.months=U,Vd._months=md,Vd.monthsShort=V,Vd._monthsShort=nd,Vd.monthsParse=W,Vd.week=ka,Vd._week=ud,Vd.firstDayOfYear=ma,Vd.firstDayOfWeek=la,Vd.weekdays=Lb,Vd._weekdays=Ed,Vd.weekdaysMin=Nb,Vd._weekdaysMin=Gd,Vd.weekdaysShort=Mb,Vd._weekdaysShort=Fd,Vd.weekdaysParse=Ob,Vd.isPM=Ub,Vd._meridiemParse=Hd,Vd.meridiem=Vb,w(&quot;en&quot;,{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===q(a%100/10)?&quot;th&quot;:1===b?&quot;st&quot;:2===b?&quot;nd&quot;:3===b?&quot;rd&quot;:&quot;th&quot;;return a+c}}),a.lang=aa(&quot;moment.lang is deprecated. Use moment.locale instead.&quot;,w),a.langData=aa(&quot;moment.langData is deprecated. Use moment.localeData instead.&quot;,y);var Wd=Math.abs,Xd=yc(&quot;ms&quot;),Yd=yc(&quot;s&quot;),Zd=yc(&quot;m&quot;),$d=yc(&quot;h&quot;),_d=yc(&quot;d&quot;),ae=yc(&quot;w&quot;),be=yc(&quot;M&quot;),ce=yc(&quot;y&quot;),de=Ac(&quot;milliseconds&quot;),ee=Ac(&quot;seconds&quot;),fe=Ac(&quot;minutes&quot;),ge=Ac(&quot;hours&quot;),he=Ac(&quot;days&quot;),ie=Ac(&quot;months&quot;),je=Ac(&quot;years&quot;),ke=Math.round,le={s:45,m:45,h:22,d:26,M:11},me=Math.abs,ne=Ha.prototype;ne.abs=oc,ne.add=qc,ne.subtract=rc,ne.as=wc,ne.asMilliseconds=Xd,ne.asSeconds=Yd,ne.asMinutes=Zd,ne.asHours=$d,ne.asDays=_d,ne.asWeeks=ae,ne.asMonths=be,ne.asYears=ce,ne.valueOf=xc,ne._bubble=tc,ne.get=zc,ne.milliseconds=de,ne.seconds=ee,ne.minutes=fe,ne.hours=ge,ne.days=he,ne.weeks=Bc,ne.months=ie,ne.years=je,ne.humanize=Fc,ne.toISOString=Gc,ne.toString=Gc,ne.toJSON=Gc,ne.locale=rb,ne.localeData=sb,ne.toIsoString=aa(&quot;toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)&quot;,Gc),ne.lang=Cd,H(&quot;X&quot;,0,0,&quot;unix&quot;),H(&quot;x&quot;,0,0,&quot;valueOf&quot;),N(&quot;x&quot;,_c),N(&quot;X&quot;,bd),Q(&quot;X&quot;,function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),Q(&quot;x&quot;,function(a,b,c){c._d=new Date(q(a))}),a.version=&quot;2.10.6&quot;,b(Da),a.fn=Od,a.min=Fa,a.max=Ga,a.utc=h,a.unix=Zb,a.months=jc,a.isDate=d,a.locale=w,a.invalid=l,a.duration=Ya,a.isMoment=o,a.weekdays=lc,a.parseZone=$b,a.localeData=y,a.isDuration=Ia,a.monthsShort=kc,a.weekdaysMin=nc,a.defineLocale=x,a.weekdaysShort=mc,a.normalizeUnits=A,a.relativeTimeThreshold=Ec;var oe=a;return oe});</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2c64669f-f07e-4365-bf64-c559ace83004</id>
                <name>stopOnErrorCount</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122375</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to Stop a channel if it reaches a particular error count. 
	Also sends an alert message via another channel (this sends a sms via our monitoring system).

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function stopOnErrorCount(cid, errorCount) {
	var channelStatisticsController = Packages.com.mirth.connect.server.controllers.ChannelStatisticsController.getInstance();
	var channelStatusController = Packages.com.mirth.connect.server.controllers.ChannelStatusController.getInstance();
	var stats = channelStatisticsController.getStatistics(cid);
	// var numOfQueued = stats.queued;
	var numOfErrors = stats.error;

	if(numOfErrors &gt; errorCount )
	{
		//Stop Me
		channelStatusController.stopChannel(cid);
		//Alert msg sent to _SVHALERT channel
		var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
		var channelName = channelController.getDeployedChannelById(cid).getName();
		var alertmsg = &apos;mirth01 mirth_channel_status codeTemplate_stopOnErrorCount 0 &apos; +
					   &apos;channel &apos; + channelName + &apos; stopped&apos;;
		router.routeMessage(&apos;_SVHALERT&apos;, alertmsg);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>08044817-3504-4fc1-80ee-404870195151</id>
                <name>test</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122745</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.
	searchword
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function testfunc(arg1) {
	return arg1;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
            <name>WebPT-Mirth</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121602</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
                <name>Fix HL7v2 Node Order</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121804</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>35f4c250-08b4-4e42-8e60-f85aa98dfe50</id>
            <name>WebPT-Translations</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939924</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>be8f057b-2640-4613-b2e7-83326c59169c</id>
                <name>AddZeros</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122826</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function addZeroes(num) {
   return num.toLocaleString(&quot;en&quot;, {useGrouping: false, minimumFractionDigits: 2})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>51913864-7702-489a-b7c6-54992c12b19d</id>
                <name>FindLookupValueWithDefault</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122218</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithDefault ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        //obj.LeftValue = LeftValue;
        //obj.RightValue1 = DefaultValue1;
        //obj.RightValue2   = DefaultValue2; 
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);
            var result = pattern.test(LeftValue );

            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>c276be9f-c8f1-4dea-8df0-e000c6745271</id>
                <name>FindLookupValueWithInsuranceId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122080</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithInsuranceId ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);             
            var result = pattern.test(LeftValue );
	
            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7d746da2-58c6-44eb-ad5c-c5bfd0a0c537</id>
                <name>UseExternalProblemID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122349</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalProblemID() {

if ([&apos;2804&apos;, &apos;2822&apos;].indexOf($(&apos;tenantId&apos;) + &apos;&apos;) &gt; -1) {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitexternalproblemid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitaccountnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>07730e85-7f30-4ddf-90a4-78183c896ab5</id>
                <name>UseExternalVisitID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122192</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalVisitID() {
	
if ($(&apos;tenantId&apos;)  == &apos;9999&apos; ) {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitexternalvisitid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitvisitnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="4.0.0">
      <id>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>Example - Use HL7v2 Descriptions in XML</name>
      <description></description>
      <revision>1</revision>
      <sourceConnector version="4.0.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.0.0">
          <pluginProperties/>
          <sourceConnectorProperties version="4.0.0">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>0</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.0.0">
          <elements/>
          <inboundDataType>HL7V2</inboundDataType>
          <outboundDataType>HL7V2</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
              <handleRepetitions>true</handleRepetitions>
              <handleSubcomponents>true</handleSubcomponents>
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <stripNamespaces>true</stripNamespaces>
              <segmentDelimiter>\r</segmentDelimiter>
              <convertLineBreaks>true</convertLineBreaks>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <segmentDelimiter>\r</segmentDelimiter>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
              <splitType>MSH_Segment</splitType>
              <batchScript></batchScript>
            </batchProperties>
            <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
              <segmentDelimiter>\r</segmentDelimiter>
              <successfulACKCode>AA</successfulACKCode>
              <successfulACKMessage></successfulACKMessage>
              <errorACKCode>AE</errorACKCode>
              <errorACKMessage>An Error Occured Processing Message.</errorACKMessage>
              <rejectedACKCode>AR</rejectedACKCode>
              <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
              <msh15ACKAccept>false</msh15ACKAccept>
              <dateFormat>yyyyMMddHHmmss</dateFormat>
            </responseGenerationProperties>
            <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
              <successfulACKCode>AA</successfulACKCode>
              <errorACKCode>AE</errorACKCode>
              <rejectedACKCode>AR</rejectedACKCode>
              <validateMessageControlId>false</validateMessageControlId>
              <originalMessageControlId>Destination_Encoded</originalMessageControlId>
              <originalIdMapVariable></originalIdMapVariable>
            </responseValidationProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
              <handleRepetitions>true</handleRepetitions>
              <handleSubcomponents>true</handleSubcomponents>
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <stripNamespaces>true</stripNamespaces>
              <segmentDelimiter>\r</segmentDelimiter>
              <convertLineBreaks>true</convertLineBreaks>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <segmentDelimiter>\r</segmentDelimiter>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
              <splitType>MSH_Segment</splitType>
              <batchScript></batchScript>
            </batchProperties>
            <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
              <segmentDelimiter>\r</segmentDelimiter>
              <successfulACKCode>AA</successfulACKCode>
              <successfulACKMessage></successfulACKMessage>
              <errorACKCode>AE</errorACKCode>
              <errorACKMessage>An Error Occured Processing Message.</errorACKMessage>
              <rejectedACKCode>AR</rejectedACKCode>
              <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
              <msh15ACKAccept>false</msh15ACKAccept>
              <dateFormat>yyyyMMddHHmmss</dateFormat>
            </responseGenerationProperties>
            <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
              <successfulACKCode>AA</successfulACKCode>
              <errorACKCode>AE</errorACKCode>
              <rejectedACKCode>AR</rejectedACKCode>
              <validateMessageControlId>false</validateMessageControlId>
              <originalMessageControlId>Destination_Encoded</originalMessageControlId>
              <originalIdMapVariable></originalIdMapVariable>
            </responseValidationProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.0.0">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.0.0">
          <metaDataId>1</metaDataId>
          <name>Destination 1</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.0.0">
            <pluginProperties/>
            <destinationConnectorProperties version="4.0.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>0</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>Replace HL7 v2.x XML tag names with their semantic descriptions</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>importPackage(com.mirth.connect.model.hl7v2);
String.prototype.escape = function() {return (this+&apos;&apos;).replace(/[\s\/&lt;&gt;&apos;,]/g,&apos;&apos;)};

for each (seg in msg.children()) {
	for each (field in seg.children()) {
		if (field.name()) {
			field.setName(Component.getSegmentorCompositeFieldDescription(field.name().toString(),false).escape() || field.name());
		}

		for each (component in field.children()) {
			if (component.name()) {
				component.setName(Component.getCompositeFieldDescriptionWithSegment(component.name().toString(),false).escape() || &apos;Value&apos;);
			}
		}
	}
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occured Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA</successfulACKCode>
                <errorACKCode>AE</errorACKCode>
                <rejectedACKCode>AR</rejectedACKCode>
                <validateMessageControlId>false</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.0.0">
            <elements/>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.0.0">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.0.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.0.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1431119874921</time>
            <timezone>America/Chicago</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="4.0.0">
            <id>d316c4bc-9e10-4162-b67c-e514afc59fa3</id>
            <name>Channel Helpers</name>
            <revision>1</revision>
            <lastModified>
              <time>1706120884823</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>1aca2a66-a83a-4703-9ec7-dfaa3a6ad5b2</string>
              <string>3e15b608-553f-45e7-a617-712d6b75ab4d</string>
              <string>f6d6aa80-d65f-4935-a267-d6bef39a7bdf</string>
              <string>edd93839-401c-4613-b696-6d4799ebc5af</string>
              <string>2f511815-92d1-4f0f-92e9-f4f8ae576b75</string>
              <string>b4a51816-0aad-444a-b1ce-f5c11f9961bc</string>
              <string>cb7f055d-45ae-43b7-ac7c-bb2b2db34ded</string>
              <string>139cdc6a-5f40-46bd-a246-2a9a1ef8ed10</string>
              <string>316c7826-a8ee-44b4-922c-8afe0daa2c72</string>
              <string>6ff8ca2b-c4e3-4e6f-897a-17f36ed63faa</string>
              <string>27aee1c0-8ed0-4062-89b5-1c7a69a946bc</string>
              <string>291b4847-a85d-41c6-bd4a-37f008b15ca8</string>
              <string>81c836fd-cbba-4247-b438-d4c9987ee75b</string>
              <string>4318de8e-4d7b-4885-9f11-8b2ac6f9c70a</string>
              <string>e983e439-461a-424f-8348-764b29e05ecb</string>
              <string>0763b542-8ed8-4a30-9c35-de3dbf030626</string>
              <string>75c150e0-fbc5-4eef-a856-bec6b3a39a24</string>
              <string>dd55a671-a099-4b29-bdbb-85c34050037a</string>
              <string>a08848df-6dcd-4c51-aa6d-d2f85edfdcf8</string>
              <string>ae504043-55f5-497e-ac87-33686e7569b2</string>
              <string>fef7c31a-61a4-43c8-bb15-79f51a36c882</string>
              <string>69f5ad2c-3bf4-4d55-8e4a-bd6faade202d</string>
              <string>39acd9f7-c975-4787-b31e-714f748a51a2</string>
              <string>a8bd6f50-894f-443f-b248-da3ebad3a748</string>
              <string>3c355935-e639-4517-b3b1-42c6564387f8</string>
              <string>1e45f5ac-6815-40a8-8fe9-15e98eb1d07b</string>
              <string>e695a1d8-2bde-4da3-a9a8-8cd6f81ca3c0</string>
              <string>3d95de17-a2ea-446c-be4c-36c32d8cda1c</string>
              <string>205385d0-06be-4baa-b072-9b431c315827</string>
              <string>a8ebde5a-16cb-407e-a8b4-fa8766d26c73</string>
              <string>fdcb1121-0d49-4ed8-b1a1-4f4482e1c20a</string>
              <string>b1842d23-059a-4e7e-b447-3b5f5ccf5c3a</string>
              <string>8c5d3887-bd22-4018-aeda-45e5c0f8d551</string>
              <string>a127fffb-1663-4206-b6d3-348aa228c999</string>
              <string>d70fc7fa-2005-4fc7-9222-dc8119346c6e</string>
              <string>2a2ad8a5-b961-4f4c-ac09-8abee2097972</string>
              <string>143b10e0-e01b-4942-9995-2d3b9a165d76</string>
              <string>a574bc8d-e82e-4ec6-9430-f3a37278e356</string>
              <string>f6e27b4e-dbbd-48c9-994f-55c3ac511fb9</string>
              <string>6060b76d-07c2-4f9f-bc71-d2e8c44d8271</string>
              <string>08536fee-6f99-4cc4-8958-f84daaee73d5</string>
              <string>dccd5a80-a385-482e-97e4-69340bce4522</string>
              <string>bfa0bc00-9ee1-4ba5-99de-9e46faffed6d</string>
              <string>183b6833-a563-42cb-8d4d-cdcb740aef30</string>
              <string>652e2cab-f748-41b4-ae8f-f0aae48e1fca</string>
              <string>bd81709b-2ef0-4760-aba9-f455fb338f37</string>
              <string>633e9341-a80b-4c11-a6a3-1d3942bb1782</string>
              <string>695c7ed6-252e-4229-83db-5571946a8b62</string>
              <string>df3f9b9f-e8e7-47a9-a33d-c9ec7d7820fd</string>
              <string>895ee0ef-745c-464d-a46c-e51331a01c3f</string>
              <string>50dcf6de-46b4-4de5-99c2-d341abb8a41a</string>
              <string>5e411c40-61f8-467e-b132-78e54e0b5f81</string>
              <string>ed4ef090-3f7e-442d-ad30-744e3a1313f2</string>
              <string>ed3e52dc-3023-4cc7-8cad-47e0d5df89c1</string>
              <string>ec29c308-0bc3-4eb0-a948-09c2c0747afa</string>
              <string>aeaba1c0-cef9-4ad8-82d7-76d66cc95562</string>
              <string>58f42d4f-22e1-4f7c-8acf-93a9fe92619c</string>
              <string>7a21d8ac-5afa-45b8-b136-5def45d811b4</string>
              <string>23ea2137-37b1-4b00-9fb0-c8889cd4bc97</string>
              <string>2a33ffd6-253d-402f-8fb6-93bd94f65dcd</string>
              <string>7445aaa5-ff13-4c08-a8b1-817cfed2692b</string>
              <string>3d290a27-5daf-4bb0-b3d8-90c9bb8afaeb</string>
              <string>e07b74b9-756e-4ca2-8be9-01bf7abfd817</string>
              <string>3ba1448a-d0b7-4478-bc57-f9cb8dab6de9</string>
              <string>dcaf136d-a3b8-47ed-aec7-d1619675ba2d</string>
              <string>285faf0d-523a-4c8e-92ec-4a0f3a89e048</string>
              <string>3263ad34-c86d-4481-b19f-4cd3d0d83d62</string>
              <string>e1af2369-c57e-4850-bc30-f79b6fe9fa66</string>
              <string>28ddc4f3-a96b-47db-b0e0-bcfcd825f48a</string>
              <string>90bc60ed-14c6-49db-b1e6-bb70d2b1d01d</string>
              <string>fd6b9376-0847-49d7-96c6-15c540a8e39a</string>
              <string>7ee4a47d-bdf3-473d-9da9-3a62c41037b1</string>
              <string>167ee803-661a-4e6e-ac6e-b84c057f7ca1</string>
              <string>a40e7657-c37a-4fb6-aa79-48a2ea16709c</string>
              <string>5d5e5835-8cd3-43af-ac82-ffe57439bfb5</string>
              <string>47f248b1-72d5-47dc-b0b3-6aa387e9e5d6</string>
              <string>d7c3e640-7850-4d70-bb1c-3289674bd609</string>
              <string>ae961745-fe19-46bd-b240-c82888091366</string>
              <string>68581957-7fba-421f-b063-941a804fcc46</string>
              <string>0056a8aa-7aa5-4047-a693-21bac64470aa</string>
              <string>2a637fa3-fb83-4666-abe0-c754924ff738</string>
              <string>8a08c578-68dd-4550-b178-eee13ade011e</string>
              <string>d448196a-4282-4d10-8c9a-7f1dfd19abea</string>
              <string>05759809-cfbd-4546-8b71-fd28c2499763</string>
              <string>1c01997f-00d1-4e40-9e63-da5706137cdd</string>
              <string>881db416-1776-4ab6-a3ce-5065ed11cdb5</string>
              <string>982b29a5-1743-4435-8842-9810e4e34926</string>
              <string>fe1bdd5e-cce0-4509-a09a-3545b69d3d7a</string>
              <string>1bff9775-2de8-4b51-bb6b-6aaa29c144bb</string>
              <string>5e97d36f-68fe-412d-a1df-3a25a07e5770</string>
              <string>9316c229-da47-49f8-a2c0-398ba155d370</string>
              <string>20524120-844c-4733-ac8a-b01f0e14a12f</string>
              <string>55ebb133-1e4d-4172-8718-301240e9518f</string>
              <string>b0dec3c0-01ca-45a6-b826-707b80644dff</string>
              <string>d1dd4342-0ad4-42cc-b708-f47e8c6621f8</string>
              <string>20d94501-cd46-41ce-9bf1-e34639074d16</string>
              <string>492a7c6c-4768-45e2-9f49-6c5488b0a2e5</string>
              <string>9f67f48f-ca64-4419-9101-05c39d7634fd</string>
              <string>14a2ad40-95bb-4ac9-a10e-d326537cc5a6</string>
              <string>6aa39894-bc9b-448c-aac6-b6967a0ce243</string>
              <string>4108a56a-b1a6-4d8c-9e8e-b065654860d0</string>
              <string>bdb4241f-2858-49da-8d4e-2f1579679620</string>
              <string>d56da279-9aa2-4b33-8913-bf0f37a046a0</string>
              <string>692365a7-9ec6-4c38-adee-672f4084adf3</string>
              <string>3f433a3e-e46d-440a-82c1-5490ada6b54e</string>
              <string>4d223d2f-d247-47da-b6e6-6d25e8a73775</string>
              <string>4b7abf79-011a-428e-96c9-040696a2869b</string>
              <string>72471096-425b-4750-81a4-123fca2e302c</string>
              <string>3558a098-5cbc-4e05-ae03-80b4aad20e53</string>
              <string>4a05dc00-9ad6-454a-b61b-ddd074bbb36c</string>
              <string>9d1c136c-3c94-43c3-b0f8-1c1551ac6987</string>
              <string>b2fdd8c2-f387-493b-ab35-e7e9e8ce056a</string>
              <string>930a4c9e-b458-4edf-92ff-3be07d68c28d</string>
              <string>8e046241-74a3-44e0-9bf9-f0b73a36717d</string>
              <string>0f0df6c9-1153-4e0b-800b-533492ba936c</string>
              <string>f016be9d-205d-4cdd-b4fb-e7139700dd22</string>
              <string>0801e501-57ac-4418-ac59-08e0edadabf3</string>
              <string>2607531a-4f9b-48ed-9ef4-b1b71b880864</string>
              <string>455c536f-d3fb-4832-941e-ef230b683590</string>
              <string>31b37e0b-cfbf-4787-b5d3-2082328fafd7</string>
              <string>21e47d6b-9863-4045-82af-8941087a4da1</string>
              <string>9ef7f26f-d3f7-420d-a30f-26f948be596d</string>
              <string>b3869a86-7d4f-4a10-b116-24b758a191b3</string>
              <string>a6825055-e697-487f-9add-560ad9567a60</string>
              <string>f7552865-32a0-4b5b-a5fd-9b0bddffddf9</string>
              <string>9f2bcd3c-8a74-49f1-b910-aa05c509c9cb</string>
              <string>bd270438-7262-47f8-8656-1baf51287078</string>
              <string>61b10ef9-baef-45e2-b747-a0987d851033</string>
              <string>aa5ba1e6-ab11-4a9a-a03c-e0fe58b49086</string>
              <string>ec653b8b-7362-4167-98ff-3845c7560d11</string>
              <string>1710d009-1bb2-4db6-a8d8-1493e6802c18</string>
              <string>25c5fbce-cb87-4ba9-a572-0be49242a0b2</string>
              <string>13738349-4cc4-43de-9365-a27ead17b524</string>
              <string>a43f7553-71de-41d3-aa16-93cc7a48bafc</string>
              <string>e7b4b295-2b47-4b4f-97b9-b9a9082bffb1</string>
              <string>854f78f8-4ebc-4c99-9a05-c26015671807</string>
              <string>e1900e14-c2a2-426e-86f0-971353d60cdd</string>
              <string>fd3b93dd-8b65-4b9f-a090-09bc7ec9aa12</string>
              <string>72c5d63d-a405-4ccf-b85e-dba740b14fdd</string>
              <string>f6efe381-7851-4bec-96c3-231b7baf666f</string>
              <string>2f3b524c-9d7b-43f7-b4ce-e84d27cc82ff</string>
              <string>99066deb-0d43-44f6-8823-b8cfe08e7185</string>
              <string>aa30f2b5-64cf-4396-b098-efeecb2224f2</string>
              <string>9fee4e0a-7a6d-4925-bc78-59df2c1f28af</string>
              <string>d23d6225-1145-484e-8164-f070fa1f2e8c</string>
              <string>57953b24-64cb-489d-9706-bf5dc1ef94ea</string>
              <string>08955a01-dda6-468b-a8cf-73586fe7d99f</string>
              <string>52d0a715-1be1-4fb2-8f3d-448c89c148f8</string>
              <string>4941f2fb-e641-4e0a-aba4-633ddf410760</string>
              <string>470c6c09-6850-4770-820c-bbfce54196bd</string>
              <string>21a820f0-205a-4046-8c4a-3788daca4d05</string>
              <string>5cee4e54-225f-43e4-830c-6dc3fb2826f2</string>
              <string>99643fbc-fa46-4c38-a7db-ac72833847f1</string>
              <string>9a44798a-871f-4402-9397-75241b18c6b0</string>
              <string>f1e2a84e-89e2-4ea0-8edd-4418f11b7eb7</string>
              <string>fe6275f5-4efa-4c86-90e2-8788c4f9c975</string>
              <string>081454ce-e155-45a1-bfc0-2297d6317259</string>
              <string>8b61cf50-9d95-43dd-b6ab-474e2a1d2d76</string>
              <string>5b245873-9491-4fa3-9bce-08c111cbe04f</string>
              <string>4041500f-7768-4011-b273-13fe61a2ebd6</string>
              <string>eaf28278-dd66-4bcc-b7e7-9a6c422db1ee</string>
              <string>0e0f63c0-5b51-4626-9a50-c0e2f5f94d37</string>
              <string>337347d0-d5f6-492c-9dc3-638a211132ff</string>
              <string>f836f593-4c61-49bd-be13-4cb3f9c6cffb</string>
              <string>0fec52ca-be59-47c9-85b1-700dc3b3dc2e</string>
              <string>a42ba030-2419-490c-8843-889e4197cf83</string>
              <string>4d75bdd7-6d1f-4db5-a7f8-4f63efa13197</string>
              <string>53d49d46-bd95-4ce5-8f98-7685217fedbf</string>
              <string>49a7b526-0577-4811-98c2-185bb6c22d91</string>
              <string>f8b35221-21af-4a86-9a4a-1b5657b5a029</string>
              <string>2f88fefe-6f80-46b6-a20a-04c29532073e</string>
              <string>8c637e01-95b0-4b11-a28f-4518b7f8d1ae</string>
              <string>7f5da166-70b8-48e0-9fa9-cf96fd867c30</string>
              <string>e3d85e42-6410-459f-95fc-2f98af8c0db9</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>bc768cd6-d735-40b1-9617-a3417481fe19</id>
                <name>Convert CSV to JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884963</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} csv - CSV string with column headers
	@return {String} return JSON object using column headers and field keys
*/
function convertCsvToJson(csv) {
	var textXML = SerializerFactory.getSerializer(&apos;DELIMITED&apos;).toXML(csv);
	var xml = new XML(textXML);
	var dataItems = [];
	for (var i = 1; i &lt;= xml[&apos;row&apos;].length() - 1; i++) {
		var jsonData = {};
		for (var j = 1; j &lt;= xml[&apos;row&apos;][0].children().length(); j++) {
			var column = &apos;column&apos; + j.toString();
			var header = xml[&apos;row&apos;][0][column].toString().replace(/\s/g, &apos;_&apos;).replace(/-/g, &apos;_&apos;).toLowerCase();
			var value = xml[&apos;row&apos;][i][column].toString();
			
			jsonData[header] = value;
			
		}
		dataItems.push(jsonData);
	}

	return JSON.stringify(dataItems);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>537d816c-81ff-4507-85c6-85e28b8c546c</id>
                <name>Convert JSON to CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885050</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts JSON to CSV.
**/
/*	@param {String} jsonData - JSON string with [0] index key as headers for csv
	@return {String} return csv
*/	

function convertJsonToCsv(data) {
	try{
		var json = JSON.parse(data);	
		var fields = Object.keys(json[0])
		var replacer = function(key, value) { return value === null ? &apos;&apos; : value } 
		var csv = json.map(function(row){
		  return fields.map(function(fieldName){
		    return JSON.stringify(row[fieldName], replacer)
		  }).join(&apos;,&apos;)
		})
		csv.unshift(fields.join(&apos;,&apos;)) // add header column
		csv = csv.join(&apos;\r\n&apos;);
		return csv;
	}catch(error){
		return error;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>ff3df0b8-cfa2-4ec9-82ac-37c9e4830e0c</id>
                <name>Generic - Send message to channel destination</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function sendMessageToChannelDestination(channelID, destinationID, map, data) {
	var msgMap;
	var outData = {};
	
	if (!map) {
		msgMap = Maps.map();
	} else {
		msgMap = Maps.map(map);
	}

	if (data == null || data == undefined) {
		data = &apos;&apos;;
	}

	if (msgMap.get(&apos;sourceChannelId&apos;) == null) {
		msgMap.add(&apos;sourceChannelId&apos;, channelId);
	}
	if (msgMap.get(&apos;sourceChannelName&apos;) == null) {
		msgMap.add(&apos;sourceChannelName&apos;, channelName);
	}

	// Dirty way to handle connector message not being defined. Handles cases where this function 
	// is used in a source js writer.
	try {
		if (msgMap.get(&apos;sourceMessageId&apos;) == null &amp;&amp; connectorMessage &amp;&amp; connectorMessage.getMessageId()) {
			msgMap.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString());
		}
	} catch(ex) {}

	var msgRequest = new RawMessage(data, [destinationID], msgMap);
	var msgResponse = router.routeMessageByChannelId(channelID, msgRequest);

	if (msgResponse == null) {
		// return;
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;; 
	}
	if (msgResponse.getStatus() == null) {
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;;
	}

	if (msgResponse.getStatus() == &apos;ERROR&apos;) {
		throw msgResponse.getMessage();
	}

	return msgResponse.getMessage();
	
	
	// var msgResponse;

	/*
	try {
		msgResponse = router.routeMessageByChannelId(channelID, msgRequest);
		outData.status = &apos;success&apos;;
		outData.status_message = &apos;message successfully sent to channel&apos;;
	} catch (ex) {
		outData.status = &apos;error&apos;;
		outData.status_message = ex.toString();
		return outData;
	}

	if (msgResponse.getStatus() == null) {
		outData.response_status = &apos;unknown&apos;;
		logger.error(&apos;Code Template &quot;Send message to channel by id&quot;: channel &quot;&apos; + ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;);
	}
	
	switch (String(msgResponse.getStatus())) {
		case &apos;ERROR&apos;:
			outData.response_status = &apos;error&apos;;
			break;
		case &apos;FILTERED&apos;:
			outData.response_status = &apos;filtered&apos;;
			break;
		case &apos;QUEUED&apos;:
			outData.response_status = &apos;queued&apos;;
			break;
		case &apos;RECEIVED&apos;:
			outData.response_status = &apos;received&apos;;
			break;
		case &apos;SENT&apos;:
			outData.response_status = &apos;sent&apos;;
			break;
	}

	outData.response_message = msgResponse.getMessage();

	return outData;
	*/
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>f4cd9e71-4f8d-4472-80a9-31b533f4d578</id>
                <name>Get bots DB connection to specified environment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884906</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get a new bots database connection. Be sure to wrap in try/finally block to close database connection.

	@param {String} environment - prod, staging, dev, local
	@return {String} return database connection
*/
function GetBotsDBConnection() {
	var username = configurationMap.get(&apos;bots-db-user&apos;);
	var password = configurationMap.get(&apos;bots-db-pass&apos;);
	var uri = configurationMap.get(&apos;bots-db-uri&apos;);	
	return DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, uri, username, password);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>554bd282-172b-43a0-8902-992baf63b04d</id>
                <name>Get DB connection to specified environment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885107</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get a new database connection. 

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetDBConnection(environment) {
	if (environment != &apos;prod&apos; &amp;&amp; environment != &apos;staging&apos; &amp;&amp; environment != &apos;dev&apos; &amp;&amp; environment != &apos;local&apos;) {
		return null;
	}
	
	var username = configurationMap.get(&apos;docsink-db-user-&apos; + environment);
	var password = configurationMap.get(&apos;docsink-db-pass-&apos; + environment);
	var uri = configurationMap.get(&apos;docsink-db-uri-&apos; + environment);

	return DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.cj.jdbc.Driver&apos;, uri, username, password);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>552a87ed-b5a0-4546-9e5c-0a768661a351</id>
                <name>Postprocessor - Generate channel response</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884842</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function generateChannelResponse() {
	// This script executes once after a message has been processed
	// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
	
	var destinations = sourceMap.get(&apos;destinationSet&apos;);
	var metadataIds = destinations.toArray();
	
	if (metadataIds.length == 0) {
		return ResponseFactory.getErrorResponse(&apos;invalid request&apos;);
	}
	
	var smsg = message.getConnectorMessages().get(0);
	if (smsg.getStatus() == &apos;ERROR&apos;) {
		if (smsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(smsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(smsg.getResponseData().getMessage());
	}
	
	var metadataID = metadataIds[0];
	var cmsg = message.getConnectorMessages().get(metadataID);

	if (cmsg.getStatus() == &apos;ERROR&apos;) {
		if (cmsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(cmsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;SENT&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;FILTERED&apos;) {
		return ResponseFactory.getFilteredResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;QUEUED&apos;) {
		return ResponseFactory.getQueuedResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;RECEIVED&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else {
		return cmsg;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
            <name>WebPT-Common</name>
            <revision>2</revision>
            <lastModified>
              <time>1678715257049</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
                <name>Check if String contains</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122790</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
                <name>Check if String contains HTTP code</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122593</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>8515e088-5c50-47ee-9e2f-9fad1ecf48bd</id>
                <name>Check if String is JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123309</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Added by Kirby Knight
	12/21/2020
	Test for JSON

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5f2f84ba-3e66-4be3-8260-8fbd8258bd92</id>
                <name>Check if the PDF is valid</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122055</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
//This function is used for checking the word &quot;PDF&quot; in inbound attachment.
function isValidBase64PDF(base64) {
	const ENCODED_PDF_SIGN = &quot;JVBERi&quot;; // %PDF sign
	const PDF_EOF = &quot;JSVFT0YNCg&quot;; // %EOF
	var pdfBase64Size = (base64.length() * (3 / 4)) - 1;
	
	return (base64.indexOf(ENCODED_PDF_SIGN) != -1 &amp;&amp; base64.indexOf(PDF_EOF) != -1 &amp;&amp; pdf_base64_size &gt; 36);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
                <name>Convert JSON date to HL7v2 date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122137</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
                <name>Convert JSON datetime to HL7v2 datetime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122430</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>bb21449a-df39-48c6-be52-24106c8df4c4</id>
                <name>Destination Formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Kirby Knight 03/10/2021
	
	This function will remove all other ROOT.Meta.Destinations nodes that are not passed in the
	destination variable and removes the ROOT.Meta.Destinations[x].Destination node

	@param {Any} destination - 
	@return {String} return description
*/
function formatDestinations(destination) {
var arrDestinations = msg[&apos;Meta&apos;][&apos;Destinations&apos;];
	//  Start at the end of the array because of the posibility of deleted array items 
	for (var i = arrDestinations.length - 1; i &gt;= 0; i--) {
		if (arrDestinations[i][&apos;Destination&apos;] == destination){
			delete arrDestinations[i][&apos;Destination&apos;]
		}else if (arrDestinations[i][&apos;Destination&apos;] != destination){
			arrDestinations.splice(i, 1);
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
                <name>Extract JSON node data</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121748</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7ed44f8a-fa40-4f3e-9426-3021604eabe0</id>
                <name>Get Feature Value by Name and Database</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123262</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns a string containing the feature value (system property) for a specific client database.

	@param {String} featureName - name of the feature, ie: &quot;BetterPTBidirectionalScheduling&quot;
	@param {String} databaseIdentifier - database name or databaseID / TenantID
	@param {String} databaseIdentifierType - what value is provided in databaseIdentifier. current options include &quot;ID&quot; or &quot;NAME&quot;
	@return {String} returns feature value
*/
function getFeatureValueByNameDatabase(featureName, databaseIdentifier, databaseIdentifierType) {
	var paramList = new Packages.java.util.ArrayList();
	paramList.add(featureName);
	paramList.add(databaseIdentifier);
	paramList.add(databaseIdentifierType);
	
	var sSQL = &apos;EXEC [dbo].[pr_FeatureValueByNameDatabase] ?, ?, ?&apos;;
	
	try {
		var result = executeSharedDBStatementFhirCh(sSQL, true, paramList);
		var featureValue ;
		if(result.next()){			//Added
		 featureValue = result.getString(1);
		}
		return featureValue;
	} catch (e) {
		logger.error(e);
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>9842be2c-c633-42ac-87f1-f91aca9e370f</id>
                <name>JSON Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121776</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function populates the MR and PI patient IDS to channelMap

	@return {String} return description
*/
function jsonPatientIds() {
	for each (patId in msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) {
	if (patId[&apos;IDType&apos;].toString() == &apos;MR&apos;){
		channelMap.put(&apos;extPatId&apos;, patId[&apos;ID&apos;].toString());
	}else if(patId[&apos;IDType&apos;].toString() == &apos;PI&apos;){
		channelMap.put(&apos;patId&apos;, patId[&apos;ID&apos;].toString());
	}
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
                <name>Verify JSON node for existance</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>394664c0-d536-4310-970e-181dc03ee7da</id>
            <name>WebPT-Conversions</name>
            <revision>2</revision>
            <lastModified>
              <time>1690140133427</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
                <name>Convert FHIR codes to HL7v2 codes</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122899</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>2fc8cbf3-0d92-4d1d-a3d6-136c09bd9f2a</id>
            <name>WebPT-Custom Database Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1703964939898</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>23c0b510-63e4-40fa-a4e1-7b2b92ce9a96</id>
                <name>Execute Statement Shared DB Conn clientDb Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122401</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Executes a SQL statement using a shared database connection stored in the Global Map. If the
connection does not exist, creates it.

@param {String} statement - The SQL statement to execute
@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
@param {List} paramList - A Java List object containing the parameters for the statement (optional)
 */
function executeSharedDBStatementclientDbCh(statement, isQuery, paramList) {
    var result;

    try {
        var dbConnclientDbCh = globalChannelMap.get(&quot;dbConnclientDbCh&quot;);

        if (dbConnclientDbCh == null || dbConnclientDbCh.getConnection().isClosed()) {
            dbConnclientDbCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;), $(&apos;dbClient&apos;), $(&apos;dbUserFhir&apos;), $(&apos;dbPwFhir&apos;));
            globalChannelMap.put(&quot;dbConnclientDbCh&quot;, dbConnclientDbCh);
        }

        if (paramList == undefined) {
            paramList = new Packages.java.util.ArrayList();
        }

        if (isQuery) {
            result = dbConnclientDbCh.executeCachedQuery(statement, paramList);
        } else {
            result = dbConnclientDbCh.executeUpdate(statement, paramList);
        }
    } catch (e) {
        logger.error(e);
    }
    finally {
        return result;
    }
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>4efb3110-a83f-48b5-93ad-79c847b51865</id>
                <name>Execute Statement Shared DB Conn clntAcl Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123455</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClntAclCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnClntAclCh = globalChannelMap.get(&quot;dbConnClntAclCh&quot;);

		if (dbConnClntAclCh == null || dbConnClntAclCh.getConnection().isClosed())
		{
			dbConnClntAclCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbClntAcl&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnClntAclCh&quot;, dbConnClntAclCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnClntAclCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnClntAclCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>d96d45dd-57f7-4aa9-9bf4-e464d31b94c6</id>
                <name>Execute Statement Shared DB Conn FHIR</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121922</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhir(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhir.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhir.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6014068e-c021-4a38-9fa6-6f38f6a2cdab</id>
                <name>Execute Statement Shared DB Conn FHIR Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123492</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhirCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhirCh = globalChannelMap.get(&quot;dbConnFhirCh&quot;);

		if (dbConnFhirCh == null || dbConnFhirCh.getConnection().isClosed())
		{
			dbConnFhirCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnFhirCh&quot;, dbConnFhirCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhirCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhirCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fbd5c4a1-b816-4496-acdf-067005f1d376</id>
                <name>Execute Statement Shared DB Conn Translations Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123008</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementTranslationsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnTranslationsCh = globalChannelMap.get(&quot;dbConnTranslationsCh&quot;);

		if (dbConnTranslationsCh == null || dbConnTranslationsCh.getConnection().isClosed())
		{
			dbConnTranslationsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlTranslations&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnTranslationsCh&quot;, dbConnTranslationsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnTranslationsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnTranslationsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5d1a5577-4ba4-4d1e-b6cd-e2d924164909</id>
                <name>Execute Statement with Shared DB Conn ODS Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122280</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdsCh = globalChannelMap.get(&quot;dbConnOdsCh&quot;);

		if (dbConnOdsCh == null || dbConnOdsCh.getConnection().isClosed())
		{
			dbConnOdsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOds&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdsCh&quot;, dbConnOdsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>3991db14-0c0b-4123-952c-5164c1ded501</id>
                <name>Execute Statement with Shared DB Conn ODW Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122960</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.  THis connects to the ODW db in Azure

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdwCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdwCh = globalChannelMap.get(&quot;dbConnOdwCh&quot;);

		if (dbConnOdwCh == null || dbConnOdwCh.getConnection().isClosed())
		{
			dbConnOdwCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOdw&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdwCh&quot;, dbConnOdwCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdwCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdwCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fae08c88-7550-479a-b8ed-ffef47e8eed9</id>
                <name>executeSharedDBStatementClient</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121956</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClient(statement, isQuery, paramList, dbname)
{
	var result;
 	var dburl= &apos;jdbc:sqlserver://AZW1DEV-SQL02.clinicient.com:1433;databaseName=&apos;+dbname+&apos;&apos;;
	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),dburl,$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			
			//globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		result = dbConnFhir.executeCachedQuery(statement);
	
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>ed20a457-5beb-4aea-9bb9-cf91112ccc56</id>
            <name>WebPT-Default Functions</name>
            <revision>10</revision>
            <lastModified>
              <time>1690140133487</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>a8a9a0c8-9322-46dc-bef8-011eb3d70291</id>
                <name>Create Header for CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121678</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This creates a header for csv files based on the contents of the header variable.  The header
	variable is populated in the channel from the outbound msg template

	@return {String} return description
*/
function createHeader() {
	//Destination transformer.  this creates the header for each new file

	var path = java.nio.file.Paths.get($(&apos;filePath&apos;)+$(&apos;fileName&apos;));
	var bytes = (new java.lang.String($(&apos;header&apos;))).getBytes(&quot;UTF-8&quot;);
	try {
	  java.nio.file.Files.write(path, bytes, java.nio.file.StandardOpenOption.CREATE_NEW);
	}
	catch (e) {
	  //logger.info(&quot; should throw IOException if file already exists&quot;);
	
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5a886a1f-dab1-41b5-94c6-1a639907d7da</id>
                <name>Filter Message Evaluate Received Checksum</name>
                <revision>33</revision>
                <lastModified>
                  <time>1678916806664</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating a checksum for each provided message.  We save off the most recent 100 unique checksum values in a global 
	array so if the current message has been recently received we are able to ignore it.
	
	@author:  	Jeffrey Ritz
	@scriptName: 	filterEvaluateReceivedChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {boolean} filter - return filter boolean (true= filter msg, false= do not filter msg)
		persist received_checksum global ChannelMap array
		persist filterMessage ChannelMap variable
	@history
*/
function filterEvaluateReceivedChecksum(msg) {	

	var scriptName= &apos;filterEvaluateReceivedChecksum&apos;
	var filter = false;
	var received_len_limit = 999;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B connectorMessage.getRawData() typeof: &apos;+typeof(connectorMessage.getRawData())+&apos; msg: &apos;+connectorMessage.getRawData());
	} // end if 
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	// var dataBytes = new java.lang.String(connectorMessage.getRawData()).getBytes(&apos;UTF-8&apos;);
	// message = new String(message.getBytes(&quot;utf-8&quot;), &quot;utf-8&quot;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	// var dataBytes = new java.lang.String(msg.getBytes(&apos;UTF-8&apos;));
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);

	// var messageObjectgetBytes= checksum.update(connectorMessage.getRawData().getBytes());
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 
	
	$c(&apos;checksum&apos;, checksum.getValue());
	
	//grab the global channel map variable holding the last X unique checksums that we&apos;ve received
	var received = $gc(&apos;received_checksums&apos;);
	
	if (received == undefined) {
		var received = new Array();
		received.push(checksum.getValue());
	} else {
		//check if we&apos;ve recently received this message, skip it if so
		if (received.indexOf(checksum.getValue()) &gt; -1) {
			filter = true;
		//we haven&apos;t seen it recently, so remember it and allow it through
		} else {
			var received_len = received.length;
			if (received_len &gt; received_len_limit) {
				//remove oldest/first entry, shift all entries forward, and add new entry to end
				received.shift();
				received[received_len_limit] = checksum.getValue();
			} else {
				//add new entry to end of array
				received[received_len] = checksum.getValue();
			} // end if 
		} // end if 
	} // end if 

	 //debug code
	/*for (x=0; x&lt;=received_len_limit; x++) {
		$c(&apos;received-&apos;+x, received[x]);
	} */

	$c(&apos;filterMessage&apos;,filter);
	$gc(&apos;received_checksums&apos;,received);

	return filter;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fbd0484d-74a2-48e4-aedd-f97c2fcefa16</id>
                <name>Get Message Checksum</name>
                <revision>12</revision>
                <lastModified>
                  <time>1678916806703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating and reutrning a checksum for each provided message
	
	@author:  	Jeffrey Ritz
	@scriptName: 	getMessageChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {object} result - return checksum value
	@history
	2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() to remove the exponential representation of the number value
*/
function getMessageChecksum(msg) {	

	var scriptName= &apos;getMessageChecksum&apos;;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	} // end if 
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 

	var checksumValue= checksum.getValue();
	// 2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() 
	var arrChecksumValue= new Array(); 
	arrChecksumValue.push(checksumValue);
	$c(&apos;checksum&apos;, arrChecksumValue);

	return checksumValue;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>91db9bd1-ca92-4dcc-bba4-e1ece603fc87</id>
                <name>Remove Child Object From Parent Object Json</name>
                <revision>22</revision>
                <lastModified>
                  <time>1678916845037</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON child object and it&apos;s descendents from a parent object JSON
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeChildObjectFromParentObjectJson.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
		{string} parentObject - place the name of the string to be designated as the parent object in the JSON
		{string} childObject  - place the name of the string to be designated as the child object to be deleted from the JSON
	@param {object} msg - return modified Json object msg excluding specified Json child object
	@history
*/
function removeChildObjectFromParentObjectJson(msg, parentObject, childObject) {
	
	var scriptName= &apos;removeChildObjectFromParentObjectJson&apos;;
	var debug= 0;

	//var strObjJson= JSON.parse(msg);
	var strObjJson= JSON.stringify(msg);
	
	//var objJson= JSON.parse(msg);
	var newParentObjects= new Object();
	var parentObjects= msg;
	var arrParentObjects= new Array();
	var arrTransactionObjects= new Array();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof parentObjects: &apos;+typeof(parentObjects));
	for (var key in parentObjects) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof key: &apos;+typeof(key)+&apos; key: &apos;+key);
		if(key== parentObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof objJson[key]: &apos;+typeof(parentObjects[key])+&apos; parentObjects[key]: &apos;+JSON.stringify(parentObjects[key]));
			
			var newChildObjects= new Object();
			var childObjects= parentObjects[key];
			var arrChildObjects= new Array();
			
			for(var key2 in childObjects) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key2: &apos;+typeof(key2)+&apos; key2: &apos;+key2+&apos; childObject: &apos;+childObject);
				for(var key3 in childObjects[key2]) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key3: &apos;+typeof(key3)+&apos; key3: &apos;+key3+&apos; childObject: &apos;+childObject);
					if(key3== childObject) {
						var transactionObject= new Object();
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; childObject typeof: &apos;+typeof(childObjects[key2][key3])+&apos; childObject: &apos;+JSON.stringify(childObjects[key2][key3]));
						transactionObject.key= key3;
						transactionObject.value= childObjects[key2][key3];
						delete childObjects[key2][key3];
						if(debug&gt;0) logger.info(&apos;DEBUG::&apos;+scriptName+&apos; DELETE childObject: &apos;+key3+&apos; of parentObject: &apos;+JSON.stringify(childObjects[key2]));
						arrTransactionObjects.push(transactionObject);
					} // end if
				} // end for 
				arrChildObjects.push(childObjects[key2]);
			} // end for
			newParentObjects[key]= arrChildObjects;
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add all child keys: &apos;+JSON.stringify(arrChildObjects)+&apos; into ParentObject[&apos;+key+&apos;]: &apos;+newParentObjects[key]);
		} else {
			newParentObjects[key]= parentObjects[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+parentObjects[key]+&apos; string: &apos;+JSON.stringify(parentObjects[key]));
		} // end if
		arrParentObjects.push(newParentObjects);
	} // end for 
	var newMsg= arrParentObjects;
	channelMap.put(&apos;removeChildObjectMsg&apos;,newMsg);
	channelMap.put(&apos;removedChildTransIds&apos;,arrTransactionObjects);
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));
	return newMsg;
	
} </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2ff28338-dfb6-445d-a04e-c74b5486a08c</id>
                <name>Remove Object From Json</name>
                <revision>26</revision>
                <lastModified>
                  <time>1703964988318</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  Desc: This function will remove a JSON object and it&apos;s descendents from the msg
	
	fileName: 	removeObjectFromJson.js
	name:		Remove Object From Json	
	Authored:  	Jeffrey Ritz
	Created: 		2023-03-09
	Details:
		@param IN {string} msg - provide parent JSON object (i.e. Inbound connectorMessage.getRawData() - msg)
		@param IN {string} removeObject - provide JSON object to evaluate and remove from parent JSON object (msg)
		OUT (object) newMsg - return JSON object from processing
	@history
	2023-03-15 JER - Modified to include removeObject function parameter to specify specific JSON object by referencing key to be removed
*/
function removeObjectFromJson(msg, removeObject) {
	
	var scriptName= &apos;removeObjectFromJson&apos;;
	var debug= 0;
	//var objJson= JSON.stringify(msg);
	var objJson= JSON.parse(msg);
	var newObjJson= new Object();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof objJson: &apos;+typeof(objJson)+&apos; objJSON: &apos;+JSON.stringify(objJson));
	for (var key in objJson) {
		if(key== removeObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; DELETE key: &apos;+key);
			// delete objJson[key];
		} else {
			newObjJson[key]= objJson[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+objJson[key]+&apos; string: &apos;+JSON.stringify(objJson[key]));
		} // end if 
	} // end for 
	var newMsg= newObjJson;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));

	// return JSON.stringify(newMsg);
	return newMsg;
} 
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>993a6fd8-454a-4133-ba32-dbcfea71582b</id>
                <name>Update EDITransactionLog</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123233</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	The purpose of this function is to update the status in Insight.
	Populate the channel map with the following variables functionalGroupControlNumber, status, eventDate

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateStatus () {

	//  Build the llst of paramters to pass to the database
	var paramList = new Packages.java.util.ArrayList();
	paramList.add($(&apos;functionalGroupControlNumber&apos;));
	paramList.add($(&apos;eventDate&apos;));  //dateTime in the acknoledged field in this format (&quot;2017-07-31 14:15:01.577&quot;)
	paramList.add(new java.lang.Integer(parseInt($(&apos;status&apos;), 10)));
	
//	logger.info(&quot;updateStatus &quot;+paramList);

	//  SQL Statement and paramters that will be sent to SQL
	var statement = &quot;EXEC dbo.pr_EDITransactionLog_Update ?, ?, ?&quot;;
	//  Code template used for establishiing connection and passing the sql statement and parameter list  
	var result = executeSharedDBStatementFhirCh(statement, false, paramList);
	return result;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>42cb290e-5fb0-46b8-82db-576ea1e1ba0d</id>
                <name>Update EDITransactionLog from responseStatus in the response transformer </name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123356</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Call this in the response transformer on the destination.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateReponseStatus() {
	var status = 0;
	if (responseStatus == SENT){
		var status = 1;
		channelMap.put(&apos;status&apos;,status);
	}

updateStatus()
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2223579b-f914-4be7-a575-f1a2a2aa1ae2</id>
                <name>ValidateToString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123044</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} mapping - 
	@param {Any} defaultValue - 
	@param {Any} replacement - 
	@return {String} return description
*/
function validateToString(mapping, defaultValue, replacement) {
    if (mapping == null) {
        mapping = &apos;&apos;;
    }
    return validate(mapping, defaultValue, replacement).toString() + &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>8c9a8268-4ef0-43e9-ae5b-bf8895f0b80c</id>
            <name>WebPT-FORMAT</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939902</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>Include any functions or codes with 
-date &amp; time formating related
-data type formatting</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>920c9ead-70a6-4168-9d95-89261b73ae44</id>
                <name>12digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123520</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Take any 12 digit string yyyyMMddHHmm and change to MM/dd/yyyy HH:mm 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm
*/
function yyyyMMddHHmm(string) {
	return DateUtil.convertDate(&quot;yyyyMMddHHmm&quot;, &quot;MM/dd/yyyy HH:mm&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fe2689ec-1946-46d5-8dd6-8fbbf106e1e6</id>
                <name>14digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122871</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Take 14 digit string yyyyMMddHHmmss and change to MM/dd/yyyy HH:mm:ss 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm:ss
*/
function yyyyMMddHHmmss(string) {
	if (string.length == 14) {
		  return DateUtil.convertDate(&quot;yyyyMMddHHmmss&quot;, &quot;MM/dd/yyyy HH:mm:ss&quot;, string);
	}
	else {
		return &quot;unregcognized string&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>b9db35e2-d5bd-48a1-8cc6-3475c698d7b4</id>
                <name>currentDT_yyyy-MM-dd HH:mm:ss.SSS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123114</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Kirby Knight
	Date Modified:  11/09/2020
	Retund the current date/time down to the millisecond

	@return {String} return description
*/
function currentDtToMilliseconds() {
	return DateUtil.getCurrentDate(&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7e747999-4bec-43fc-978d-7049d3543cf0</id>
                <name>fixHL7NodeOrder</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/

function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>dfedacf6-773b-413e-b78d-1bf16a92071d</id>
                <name>formatHL7Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121643</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Take any eight digit HL7 message data string (yyyyMMdd) and formats it human-readable format (MM/dd/yyyy)
	such as 20090612 -&gt; 06/12/2009

	@param {String} arg1 - 8 digit HL7 message data string yyyyMMdd
	@return {String} return date format as MM/dd/yyyy
*/
function formatHL7Date(string) {
	return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;MM/dd/yyyy&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>a8f54921-2cb6-4134-8806-3c4e10a757d9</id>
                <name>getCurrentLocalTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122014</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = getCurrentLocalTimestamp();

	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestamp() {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(&quot;EST&quot;)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6c5f1bd8-ebbf-4c8e-b465-0be8ccaba0d0</id>
                <name>getCurrentLocalTimeToMs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123077</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	Gets the current local date/time to the milliseconds
	Converts to the timezone that is passed in Examples (America/New_York, America/Chicago, America/Phoenix )

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestampToMs(timeZone) {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timeZone)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>78d74c5b-c881-404a-ad96-4e909e1a19f3</id>
                <name>phoneToE164</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121982</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Insight phone number to E164 format 5554446666 to +15554446666

	@param {Any} phoneIn - 
	@return {String} return description
*/
function phoneToE164(phoneIn) {
	logger.info(&apos;L1 &apos;+phoneIn);
	if(phoneIn != null ){
	//phoneIn = &apos;+1&apos; + phoneIn.toString(); 
	logger.info(&apos;L2 &apos;+phoneIn);
	return &apos;+1&apos; + phoneIn.toString(); 
	} else{
		return null;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>6a32d94d-408c-4e10-9799-e45e150b5c1f</id>
            <name>WebPT-MISC</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939909</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>miscellaneous javascript</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>84b4f1c7-f82d-4140-9fbd-98a95f68ff32</id>
                <name>getChannelState</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122648</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetChannelState(channel_id) {

    var channel_status = &quot;NA&quot;;

    var channel_count = parseInt(Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().size());

    for(var i=0;i&lt;channel_count;i++) {
        if (channel_id == Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getChannelId()) {
            channel_status = Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getState();
        }
    }

    return channel_status;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>715435a9-cb15-4e8f-bc5b-4249eaea6e17</id>
                <name>momentjs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122487</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Testing MIRTH-3794 using external JavaScript library &quot;moment.js&quot;
*/
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=b():&quot;function&quot;==typeof define&amp;&amp;define.amd?define(b):a.moment=b()}(this,function(){&quot;use strict&quot;;function a(){return Hc.apply(null,arguments)}function b(a){Hc=a}function c(a){return&quot;[object Array]&quot;===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||&quot;[object Date]&quot;===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c&lt;a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&amp;&amp;(a[c]=b[c]);return f(b,&quot;toString&quot;)&amp;&amp;(a.toString=b.toString),f(b,&quot;valueOf&quot;)&amp;&amp;(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ca(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&amp;&amp;(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow&lt;0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&amp;&amp;(a._isValid=a._isValid&amp;&amp;0===b.charsLeftOver&amp;&amp;0===b.unusedTokens.length&amp;&amp;void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if(&quot;undefined&quot;!=typeof b._isAMomentObject&amp;&amp;(a._isAMomentObject=b._isAMomentObject),&quot;undefined&quot;!=typeof b._i&amp;&amp;(a._i=b._i),&quot;undefined&quot;!=typeof b._f&amp;&amp;(a._f=b._f),&quot;undefined&quot;!=typeof b._l&amp;&amp;(a._l=b._l),&quot;undefined&quot;!=typeof b._strict&amp;&amp;(a._strict=b._strict),&quot;undefined&quot;!=typeof b._tzm&amp;&amp;(a._tzm=b._tzm),&quot;undefined&quot;!=typeof b._isUTC&amp;&amp;(a._isUTC=b._isUTC),&quot;undefined&quot;!=typeof b._offset&amp;&amp;(a._offset=b._offset),&quot;undefined&quot;!=typeof b._pf&amp;&amp;(a._pf=j(b)),&quot;undefined&quot;!=typeof b._locale&amp;&amp;(a._locale=b._locale),Jc.length&gt;0)for(c in Jc)d=Jc[c],e=b[d],&quot;undefined&quot;!=typeof e&amp;&amp;(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),Kc===!1&amp;&amp;(Kc=!0,a.updateOffset(this),Kc=!1)}function o(a){return a instanceof n||null!=a&amp;&amp;null!=a._isAMomentObject}function p(a){return 0&gt;a?Math.ceil(a):Math.floor(a)}function q(a){var b=+a,c=0;return 0!==b&amp;&amp;isFinite(b)&amp;&amp;(c=p(b)),c}function r(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e&gt;d;d++)(c&amp;&amp;a[d]!==b[d]||!c&amp;&amp;q(a[d])!==q(b[d]))&amp;&amp;g++;return g+f}function s(){}function t(a){return a?a.toLowerCase().replace(&quot;_&quot;,&quot;-&quot;):a}function u(a){for(var b,c,d,e,f=0;f&lt;a.length;){for(e=t(a[f]).split(&quot;-&quot;),b=e.length,c=t(a[f+1]),c=c?c.split(&quot;-&quot;):null;b&gt;0;){if(d=v(e.slice(0,b).join(&quot;-&quot;)))return d;if(c&amp;&amp;c.length&gt;=b&amp;&amp;r(e,c,!0)&gt;=b-1)break;b--}f++}return null}function v(a){var b=null;if(!Lc[a]&amp;&amp;&quot;undefined&quot;!=typeof module&amp;&amp;module&amp;&amp;module.exports)try{b=Ic._abbr,require(&quot;./locale/&quot;+a),w(b)}catch(c){}return Lc[a]}function w(a,b){var c;return a&amp;&amp;(c=&quot;undefined&quot;==typeof b?y(a):x(a,b),c&amp;&amp;(Ic=c)),Ic._abbr}function x(a,b){return null!==b?(b.abbr=a,Lc[a]=Lc[a]||new s,Lc[a].set(b),w(a),Lc[a]):(delete Lc[a],null)}function y(a){var b;if(a&amp;&amp;a._locale&amp;&amp;a._locale._abbr&amp;&amp;(a=a._locale._abbr),!a)return Ic;if(!c(a)){if(b=v(a))return b;a=[a]}return u(a)}function z(a,b){var c=a.toLowerCase();Mc[c]=Mc[c+&quot;s&quot;]=Mc[b]=a}function A(a){return&quot;string&quot;==typeof a?Mc[a]||Mc[a.toLowerCase()]:void 0}function B(a){var b,c,d={};for(c in a)f(a,c)&amp;&amp;(b=A(c),b&amp;&amp;(d[b]=a[c]));return d}function C(b,c){return function(d){return null!=d?(E(this,b,d),a.updateOffset(this,c),this):D(this,b)}}function D(a,b){return a._d[&quot;get&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b]()}function E(a,b,c){return a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b](c)}function F(a,b){var c;if(&quot;object&quot;==typeof a)for(c in a)this.set(c,a[c]);else if(a=A(a),&quot;function&quot;==typeof this[a])return this[a](b);return this}function G(a,b,c){var d=&quot;&quot;+Math.abs(a),e=b-d.length,f=a&gt;=0;return(f?c?&quot;+&quot;:&quot;&quot;:&quot;-&quot;)+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function H(a,b,c,d){var e=d;&quot;string&quot;==typeof d&amp;&amp;(e=function(){return this[d]()}),a&amp;&amp;(Qc[a]=e),b&amp;&amp;(Qc[b[0]]=function(){return G(e.apply(this,arguments),b[1],b[2])}),c&amp;&amp;(Qc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function I(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,&quot;&quot;):a.replace(/\\/g,&quot;&quot;)}function J(a){var b,c,d=a.match(Nc);for(b=0,c=d.length;c&gt;b;b++)Qc[d[b]]?d[b]=Qc[d[b]]:d[b]=I(d[b]);return function(e){var f=&quot;&quot;;for(b=0;c&gt;b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function K(a,b){return a.isValid()?(b=L(b,a.localeData()),Pc[b]=Pc[b]||J(b),Pc[b](a)):a.localeData().invalidDate()}function L(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Oc.lastIndex=0;d&gt;=0&amp;&amp;Oc.test(a);)a=a.replace(Oc,c),Oc.lastIndex=0,d-=1;return a}function M(a){return&quot;function&quot;==typeof a&amp;&amp;&quot;[object Function]&quot;===Object.prototype.toString.call(a)}function N(a,b,c){dd[a]=M(b)?b:function(a){return a&amp;&amp;c?c:b}}function O(a,b){return f(dd,a)?dd[a](b._strict,b._locale):new RegExp(P(a))}function P(a){return a.replace(&quot;\\&quot;,&quot;&quot;).replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,&quot;\\$&amp;&quot;)}function Q(a,b){var c,d=b;for(&quot;string&quot;==typeof a&amp;&amp;(a=[a]),&quot;number&quot;==typeof b&amp;&amp;(d=function(a,c){c[b]=q(a)}),c=0;c&lt;a.length;c++)ed[a[c]]=d}function R(a,b){Q(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function S(a,b,c){null!=b&amp;&amp;f(ed,a)&amp;&amp;ed[a](b,c._a,c,a)}function T(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function U(a){return this._months[a.month()]}function V(a){return this._monthsShort[a.month()]}function W(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12&gt;d;d++){if(e=h([2e3,d]),c&amp;&amp;!this._longMonthsParse[d]&amp;&amp;(this._longMonthsParse[d]=new RegExp(&quot;^&quot;+this.months(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;),this._shortMonthsParse[d]=new RegExp(&quot;^&quot;+this.monthsShort(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;)),c||this._monthsParse[d]||(f=&quot;^&quot;+this.months(e,&quot;&quot;)+&quot;|^&quot;+this.monthsShort(e,&quot;&quot;),this._monthsParse[d]=new RegExp(f.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),c&amp;&amp;&quot;MMMM&quot;===b&amp;&amp;this._longMonthsParse[d].test(a))return d;if(c&amp;&amp;&quot;MMM&quot;===b&amp;&amp;this._shortMonthsParse[d].test(a))return d;if(!c&amp;&amp;this._monthsParse[d].test(a))return d}}function X(a,b){var c;return&quot;string&quot;==typeof b&amp;&amp;(b=a.localeData().monthsParse(b),&quot;number&quot;!=typeof b)?a:(c=Math.min(a.date(),T(a.year(),b)),a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+&quot;Month&quot;](b,c),a)}function Y(b){return null!=b?(X(this,b),a.updateOffset(this,!0),this):D(this,&quot;Month&quot;)}function Z(){return T(this.year(),this.month())}function $(a){var b,c=a._a;return c&amp;&amp;-2===j(a).overflow&amp;&amp;(b=c[gd]&lt;0||c[gd]&gt;11?gd:c[hd]&lt;1||c[hd]&gt;T(c[fd],c[gd])?hd:c[id]&lt;0||c[id]&gt;24||24===c[id]&amp;&amp;(0!==c[jd]||0!==c[kd]||0!==c[ld])?id:c[jd]&lt;0||c[jd]&gt;59?jd:c[kd]&lt;0||c[kd]&gt;59?kd:c[ld]&lt;0||c[ld]&gt;999?ld:-1,j(a)._overflowDayOfYear&amp;&amp;(fd&gt;b||b&gt;hd)&amp;&amp;(b=hd),j(a).overflow=b),a}function _(b){a.suppressDeprecationWarnings===!1&amp;&amp;&quot;undefined&quot;!=typeof console&amp;&amp;console.warn&amp;&amp;console.warn(&quot;Deprecation warning: &quot;+b)}function aa(a,b){var c=!0;return g(function(){return c&amp;&amp;(_(a+&quot;\n&quot;+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function ba(a,b){od[a]||(_(b),od[a]=!0)}function ca(a){var b,c,d=a._i,e=pd.exec(d);if(e){for(j(a).iso=!0,b=0,c=qd.length;c&gt;b;b++)if(qd[b][1].exec(d)){a._f=qd[b][0];break}for(b=0,c=rd.length;c&gt;b;b++)if(rd[b][1].exec(d)){a._f+=(e[6]||&quot; &quot;)+rd[b][0];break}d.match(ad)&amp;&amp;(a._f+=&quot;Z&quot;),va(a)}else a._isValid=!1}function da(b){var c=sd.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ca(b),void(b._isValid===!1&amp;&amp;(delete b._isValid,a.createFromInputFallback(b))))}function ea(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970&gt;a&amp;&amp;h.setFullYear(a),h}function fa(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970&gt;a&amp;&amp;b.setUTCFullYear(a),b}function ga(a){return ha(a)?366:365}function ha(a){return a%4===0&amp;&amp;a%100!==0||a%400===0}function ia(){return ha(this.year())}function ja(a,b,c){var d,e=c-b,f=c-a.day();return f&gt;e&amp;&amp;(f-=7),e-7&gt;f&amp;&amp;(f+=7),d=Da(a).add(f,&quot;d&quot;),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ka(a){return ja(a,this._week.dow,this._week.doy).week}function la(){return this._week.dow}function ma(){return this._week.doy}function na(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function oa(a){var b=ja(this,1,4).week;return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function pa(a,b,c,d,e){var f,g=6+e-d,h=fa(a,0,1+g),i=h.getUTCDay();return e&gt;i&amp;&amp;(i+=7),c=null!=c?1*c:e,f=1+g+7*(b-1)-i+c,{year:f&gt;0?a:a-1,dayOfYear:f&gt;0?f:ga(a-1)+f}}function qa(a){var b=Math.round((this.clone().startOf(&quot;day&quot;)-this.clone().startOf(&quot;year&quot;))/864e5)+1;return null==a?b:this.add(a-b,&quot;d&quot;)}function ra(a,b,c){return null!=a?a:null!=b?b:c}function sa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ta(a){var b,c,d,e,f=[];if(!a._d){for(d=sa(a),a._w&amp;&amp;null==a._a[hd]&amp;&amp;null==a._a[gd]&amp;&amp;ua(a),a._dayOfYear&amp;&amp;(e=ra(a._a[fd],d[fd]),a._dayOfYear&gt;ga(e)&amp;&amp;(j(a)._overflowDayOfYear=!0),c=fa(e,0,a._dayOfYear),a._a[gd]=c.getUTCMonth(),a._a[hd]=c.getUTCDate()),b=0;3&gt;b&amp;&amp;null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7&gt;b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[id]&amp;&amp;0===a._a[jd]&amp;&amp;0===a._a[kd]&amp;&amp;0===a._a[ld]&amp;&amp;(a._nextDay=!0,a._a[id]=0),a._d=(a._useUTC?fa:ea).apply(null,f),null!=a._tzm&amp;&amp;a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&amp;&amp;(a._a[id]=24)}}function ua(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=ra(b.GG,a._a[fd],ja(Da(),1,4).year),d=ra(b.W,1),e=ra(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=ra(b.gg,a._a[fd],ja(Da(),f,g).year),d=ra(b.w,1),null!=b.d?(e=b.d,f&gt;e&amp;&amp;++d):e=null!=b.e?b.e+f:f),h=pa(c,d,e,g,f),a._a[fd]=h.year,a._dayOfYear=h.dayOfYear}function va(b){if(b._f===a.ISO_8601)return void ca(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=&quot;&quot;+b._i,i=h.length,k=0;for(e=L(b._f,b._locale).match(Nc)||[],c=0;c&lt;e.length;c++)f=e[c],d=(h.match(O(f,b))||[])[0],d&amp;&amp;(g=h.substr(0,h.indexOf(d)),g.length&gt;0&amp;&amp;j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Qc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),S(f,d,b)):b._strict&amp;&amp;!d&amp;&amp;j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length&gt;0&amp;&amp;j(b).unusedInput.push(h),j(b).bigHour===!0&amp;&amp;b._a[id]&lt;=12&amp;&amp;b._a[id]&gt;0&amp;&amp;(j(b).bigHour=void 0),b._a[id]=wa(b._locale,b._a[id],b._meridiem),ta(b),$(b)}function wa(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&amp;&amp;12&gt;b&amp;&amp;(b+=12),d||12!==b||(b=0),b):b}function xa(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e&lt;a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&amp;&amp;(b._useUTC=a._useUTC),b._f=a._f[e],va(b),k(b)&amp;&amp;(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d&gt;f)&amp;&amp;(d=f,c=b));g(a,c||b)}function ya(a){if(!a._d){var b=B(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ta(a)}}function za(a){var b=new n($(Aa(a)));return b._nextDay&amp;&amp;(b.add(1,&quot;d&quot;),b._nextDay=void 0),b}function Aa(a){var b=a._i,e=a._f;return a._locale=a._locale||y(a._l),null===b||void 0===e&amp;&amp;&quot;&quot;===b?l({nullInput:!0}):(&quot;string&quot;==typeof b&amp;&amp;(a._i=b=a._locale.preparse(b)),o(b)?new n($(b)):(c(e)?xa(a):e?va(a):d(b)?a._d=b:Ba(a),a))}function Ba(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):&quot;string&quot;==typeof f?da(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ta(b)):&quot;object&quot;==typeof f?ya(b):&quot;number&quot;==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ca(a,b,c,d,e){var f={};return&quot;boolean&quot;==typeof c&amp;&amp;(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,za(f)}function Da(a,b,c,d){return Ca(a,b,c,d,!1)}function Ea(a,b){var d,e;if(1===b.length&amp;&amp;c(b[0])&amp;&amp;(b=b[0]),!b.length)return Da();for(d=b[0],e=1;e&lt;b.length;++e)(!b[e].isValid()||b[e][a](d))&amp;&amp;(d=b[e]);return d}function Fa(){var a=[].slice.call(arguments,0);return Ea(&quot;isBefore&quot;,a)}function Ga(){var a=[].slice.call(arguments,0);return Ea(&quot;isAfter&quot;,a)}function Ha(a){var b=B(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=y(),this._bubble()}function Ia(a){return a instanceof Ha}function Ja(a,b){H(a,0,0,function(){var a=this.utcOffset(),c=&quot;+&quot;;return 0&gt;a&amp;&amp;(a=-a,c=&quot;-&quot;),c+G(~~(a/60),2)+b+G(~~a%60,2)})}function Ka(a){var b=(a||&quot;&quot;).match(ad)||[],c=b[b.length-1]||[],d=(c+&quot;&quot;).match(xd)||[&quot;-&quot;,0,0],e=+(60*d[1])+q(d[2]);return&quot;+&quot;===d[0]?e:-e}function La(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Da(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Da(b).local()}function Ma(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Na(b,c){var d,e=this._offset||0;return null!=b?(&quot;string&quot;==typeof b&amp;&amp;(b=Ka(b)),Math.abs(b)&lt;16&amp;&amp;(b=60*b),!this._isUTC&amp;&amp;c&amp;&amp;(d=Ma(this)),this._offset=b,this._isUTC=!0,null!=d&amp;&amp;this.add(d,&quot;m&quot;),e!==b&amp;&amp;(!c||this._changeInProgress?bb(this,Ya(b-e,&quot;m&quot;),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ma(this)}function Oa(a,b){return null!=a?(&quot;string&quot;!=typeof a&amp;&amp;(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Pa(a){return this.utcOffset(0,a)}function Qa(a){return this._isUTC&amp;&amp;(this.utcOffset(0,a),this._isUTC=!1,a&amp;&amp;this.subtract(Ma(this),&quot;m&quot;)),this}function Ra(){return this._tzm?this.utcOffset(this._tzm):&quot;string&quot;==typeof this._i&amp;&amp;this.utcOffset(Ka(this._i)),this}function Sa(a){return a=a?Da(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Ta(){return this.utcOffset()&gt;this.clone().month(0).utcOffset()||this.utcOffset()&gt;this.clone().month(5).utcOffset()}function Ua(){if(&quot;undefined&quot;!=typeof this._isDSTShifted)return this._isDSTShifted;var a={};if(m(a,this),a=Aa(a),a._a){var b=a._isUTC?h(a._a):Da(a._a);this._isDSTShifted=this.isValid()&amp;&amp;r(a._a,b.toArray())&gt;0}else this._isDSTShifted=!1;return this._isDSTShifted}function Va(){return!this._isUTC}function Wa(){return this._isUTC}function Xa(){return this._isUTC&amp;&amp;0===this._offset}function Ya(a,b){var c,d,e,g=a,h=null;return Ia(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:&quot;number&quot;==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=yd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:0,d:q(h[hd])*c,h:q(h[id])*c,m:q(h[jd])*c,s:q(h[kd])*c,ms:q(h[ld])*c}):(h=zd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:Za(h[2],c),M:Za(h[3],c),d:Za(h[4],c),h:Za(h[5],c),m:Za(h[6],c),s:Za(h[7],c),w:Za(h[8],c)}):null==g?g={}:&quot;object&quot;==typeof g&amp;&amp;(&quot;from&quot;in g||&quot;to&quot;in g)&amp;&amp;(e=_a(Da(g.from),Da(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ha(g),Ia(a)&amp;&amp;f(a,&quot;_locale&quot;)&amp;&amp;(d._locale=a._locale),d}function Za(a,b){var c=a&amp;&amp;parseFloat(a.replace(&quot;,&quot;,&quot;.&quot;));return(isNaN(c)?0:c)*b}function $a(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,&quot;M&quot;).isAfter(b)&amp;&amp;--c.months,c.milliseconds=+b-+a.clone().add(c.months,&quot;M&quot;),c}function _a(a,b){var c;return b=La(b,a),a.isBefore(b)?c=$a(a,b):(c=$a(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function ab(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(ba(b,&quot;moment().&quot;+b+&quot;(period, number) is deprecated. Please use moment().&quot;+b+&quot;(number, period).&quot;),f=c,c=d,d=f),c=&quot;string&quot;==typeof c?+c:c,e=Ya(c,d),bb(this,e,a),this}}function bb(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&amp;&amp;b._d.setTime(+b._d+f*d),g&amp;&amp;E(b,&quot;Date&quot;,D(b,&quot;Date&quot;)+g*d),h&amp;&amp;X(b,D(b,&quot;Month&quot;)+h*d),e&amp;&amp;a.updateOffset(b,g||h)}function cb(a,b){var c=a||Da(),d=La(c,this).startOf(&quot;day&quot;),e=this.diff(d,&quot;days&quot;,!0),f=-6&gt;e?&quot;sameElse&quot;:-1&gt;e?&quot;lastWeek&quot;:0&gt;e?&quot;lastDay&quot;:1&gt;e?&quot;sameDay&quot;:2&gt;e?&quot;nextDay&quot;:7&gt;e?&quot;nextWeek&quot;:&quot;sameElse&quot;;return this.format(b&amp;&amp;b[f]||this.localeData().calendar(f,this,Da(c)))}function db(){return new n(this)}function eb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this&gt;+a):(c=o(a)?+a:+Da(a),c&lt;+this.clone().startOf(b))}function fb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+a&gt;+this):(c=o(a)?+a:+Da(a),+this.clone().endOf(b)&lt;c)}function gb(a,b,c){return this.isAfter(a,c)&amp;&amp;this.isBefore(b,c)}function hb(a,b){var c;return b=A(b||&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this===+a):(c=+Da(a),+this.clone().startOf(b)&lt;=c&amp;&amp;c&lt;=+this.clone().endOf(b))}function ib(a,b,c){var d,e,f=La(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=A(b),&quot;year&quot;===b||&quot;month&quot;===b||&quot;quarter&quot;===b?(e=jb(this,f),&quot;quarter&quot;===b?e/=3:&quot;year&quot;===b&amp;&amp;(e/=12)):(d=this-f,e=&quot;second&quot;===b?d/1e3:&quot;minute&quot;===b?d/6e4:&quot;hour&quot;===b?d/36e5:&quot;day&quot;===b?(d-g)/864e5:&quot;week&quot;===b?(d-g)/6048e5:d),c?e:p(e)}function jb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,&quot;months&quot;);return 0&gt;b-f?(c=a.clone().add(e-1,&quot;months&quot;),d=(b-f)/(f-c)):(c=a.clone().add(e+1,&quot;months&quot;),d=(b-f)/(c-f)),-(e+d)}function kb(){return this.clone().locale(&quot;en&quot;).format(&quot;ddd MMM DD YYYY HH:mm:ss [GMT]ZZ&quot;)}function lb(){var a=this.clone().utc();return 0&lt;a.year()&amp;&amp;a.year()&lt;=9999?&quot;function&quot;==typeof Date.prototype.toISOString?this.toDate().toISOString():K(a,&quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;):K(a,&quot;YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;)}function mb(b){var c=K(this,b||a.defaultFormat);return this.localeData().postformat(c)}function nb(a,b){return this.isValid()?Ya({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.from(Da(),a)}function pb(a,b){return this.isValid()?Ya({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function qb(a){return this.to(Da(),a)}function rb(a){var b;return void 0===a?this._locale._abbr:(b=y(a),null!=b&amp;&amp;(this._locale=b),this)}function sb(){return this._locale}function tb(a){switch(a=A(a)){case&quot;year&quot;:this.month(0);case&quot;quarter&quot;:case&quot;month&quot;:this.date(1);case&quot;week&quot;:case&quot;isoWeek&quot;:case&quot;day&quot;:this.hours(0);case&quot;hour&quot;:this.minutes(0);case&quot;minute&quot;:this.seconds(0);case&quot;second&quot;:this.milliseconds(0)}return&quot;week&quot;===a&amp;&amp;this.weekday(0),&quot;isoWeek&quot;===a&amp;&amp;this.isoWeekday(1),&quot;quarter&quot;===a&amp;&amp;this.month(3*Math.floor(this.month()/3)),this}function ub(a){return a=A(a),void 0===a||&quot;millisecond&quot;===a?this:this.startOf(a).add(1,&quot;isoWeek&quot;===a?&quot;week&quot;:a).subtract(1,&quot;ms&quot;)}function vb(){return+this._d-6e4*(this._offset||0)}function wb(){return Math.floor(+this/1e3)}function xb(){return this._offset?new Date(+this):this._d}function yb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function zb(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Ab(){return k(this)}function Bb(){return g({},j(this))}function Cb(){return j(this).overflow}function Db(a,b){H(0,[a,a.length],0,b)}function Eb(a,b,c){return ja(Da([a,11,31+b-c]),b,c).week}function Fb(a){var b=ja(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Gb(a){var b=ja(this,1,4).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Hb(){return Eb(this.year(),1,4)}function Ib(){var a=this.localeData()._week;return Eb(this.year(),a.dow,a.doy)}function Jb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Kb(a,b){return&quot;string&quot;!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),&quot;number&quot;==typeof a?a:null):parseInt(a,10)}function Lb(a){return this._weekdays[a.day()]}function Mb(a){return this._weekdaysShort[a.day()]}function Nb(a){return this._weekdaysMin[a.day()]}function Ob(a){var b,c,d;for(this._weekdaysParse=this._weekdaysParse||[],b=0;7&gt;b;b++)if(this._weekdaysParse[b]||(c=Da([2e3,1]).day(b),d=&quot;^&quot;+this.weekdays(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysShort(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysMin(c,&quot;&quot;),this._weekdaysParse[b]=new RegExp(d.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),this._weekdaysParse[b].test(a))return b}function Pb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Kb(a,this.localeData()),this.add(a-b,&quot;d&quot;)):b}function Qb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,&quot;d&quot;)}function Rb(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Sb(a,b){H(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Tb(a,b){return b._meridiemParse}function Ub(a){return&quot;p&quot;===(a+&quot;&quot;).toLowerCase().charAt(0)}function Vb(a,b,c){return a&gt;11?c?&quot;pm&quot;:&quot;PM&quot;:c?&quot;am&quot;:&quot;AM&quot;}function Wb(a,b){b[ld]=q(1e3*(&quot;0.&quot;+a))}function Xb(){return this._isUTC?&quot;UTC&quot;:&quot;&quot;}function Yb(){return this._isUTC?&quot;Coordinated Universal Time&quot;:&quot;&quot;}function Zb(a){return Da(1e3*a)}function $b(){return Da.apply(null,arguments).parseZone()}function _b(a,b,c){var d=this._calendar[a];return&quot;function&quot;==typeof d?d.call(b,c):d}function ac(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function bc(){return this._invalidDate}function cc(a){return this._ordinal.replace(&quot;%d&quot;,a)}function dc(a){return a}function ec(a,b,c,d){var e=this._relativeTime[c];return&quot;function&quot;==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function fc(a,b){var c=this._relativeTime[a&gt;0?&quot;future&quot;:&quot;past&quot;];return&quot;function&quot;==typeof c?c(b):c.replace(/%s/i,b)}function gc(a){var b,c;for(c in a)b=a[c],&quot;function&quot;==typeof b?this[c]=b:this[&quot;_&quot;+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+&quot;|&quot;+/\d{1,2}/.source)}function hc(a,b,c,d){var e=y(),f=h().set(d,b);return e[c](f,a)}function ic(a,b,c,d,e){if(&quot;number&quot;==typeof a&amp;&amp;(b=a,a=void 0),a=a||&quot;&quot;,null!=b)return hc(a,b,c,e);var f,g=[];for(f=0;d&gt;f;f++)g[f]=hc(a,f,c,e);return g}function jc(a,b){return ic(a,b,&quot;months&quot;,12,&quot;month&quot;)}function kc(a,b){return ic(a,b,&quot;monthsShort&quot;,12,&quot;month&quot;)}function lc(a,b){return ic(a,b,&quot;weekdays&quot;,7,&quot;day&quot;)}function mc(a,b){return ic(a,b,&quot;weekdaysShort&quot;,7,&quot;day&quot;)}function nc(a,b){return ic(a,b,&quot;weekdaysMin&quot;,7,&quot;day&quot;)}function oc(){var a=this._data;return this._milliseconds=Wd(this._milliseconds),this._days=Wd(this._days),this._months=Wd(this._months),a.milliseconds=Wd(a.milliseconds),a.seconds=Wd(a.seconds),a.minutes=Wd(a.minutes),a.hours=Wd(a.hours),a.months=Wd(a.months),a.years=Wd(a.years),this}function pc(a,b,c,d){var e=Ya(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function qc(a,b){return pc(this,a,b,1)}function rc(a,b){return pc(this,a,b,-1)}function sc(a){return 0&gt;a?Math.floor(a):Math.ceil(a)}function tc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f&gt;=0&amp;&amp;g&gt;=0&amp;&amp;h&gt;=0||0&gt;=f&amp;&amp;0&gt;=g&amp;&amp;0&gt;=h||(f+=864e5*sc(vc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=p(f/1e3),i.seconds=a%60,b=p(a/60),i.minutes=b%60,c=p(b/60),i.hours=c%24,g+=p(c/24),e=p(uc(g)),h+=e,g-=sc(vc(e)),d=p(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function uc(a){return 4800*a/146097}function vc(a){return 146097*a/4800}function wc(a){var b,c,d=this._milliseconds;if(a=A(a),&quot;month&quot;===a||&quot;year&quot;===a)return b=this._days+d/864e5,c=this._months+uc(b),&quot;month&quot;===a?c:c/12;switch(b=this._days+Math.round(vc(this._months)),a){case&quot;week&quot;:return b/7+d/6048e5;case&quot;day&quot;:return b+d/864e5;case&quot;hour&quot;:return 24*b+d/36e5;case&quot;minute&quot;:return 1440*b+d/6e4;case&quot;second&quot;:return 86400*b+d/1e3;case&quot;millisecond&quot;:return Math.floor(864e5*b)+d;default:throw new Error(&quot;Unknown unit &quot;+a)}}function xc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*q(this._months/12)}function yc(a){return function(){return this.as(a)}}function zc(a){return a=A(a),this[a+&quot;s&quot;]()}function Ac(a){return function(){return this._data[a]}}function Bc(){return p(this.days()/7)}function Cc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Dc(a,b,c){var d=Ya(a).abs(),e=ke(d.as(&quot;s&quot;)),f=ke(d.as(&quot;m&quot;)),g=ke(d.as(&quot;h&quot;)),h=ke(d.as(&quot;d&quot;)),i=ke(d.as(&quot;M&quot;)),j=ke(d.as(&quot;y&quot;)),k=e&lt;le.s&amp;&amp;[&quot;s&quot;,e]||1===f&amp;&amp;[&quot;m&quot;]||f&lt;le.m&amp;&amp;[&quot;mm&quot;,f]||1===g&amp;&amp;[&quot;h&quot;]||g&lt;le.h&amp;&amp;[&quot;hh&quot;,g]||1===h&amp;&amp;[&quot;d&quot;]||h&lt;le.d&amp;&amp;[&quot;dd&quot;,h]||1===i&amp;&amp;[&quot;M&quot;]||i&lt;le.M&amp;&amp;[&quot;MM&quot;,i]||1===j&amp;&amp;[&quot;y&quot;]||[&quot;yy&quot;,j];return k[2]=b,k[3]=+a&gt;0,k[4]=c,Cc.apply(null,k)}function Ec(a,b){return void 0===le[a]?!1:void 0===b?le[a]:(le[a]=b,!0)}function Fc(a){var b=this.localeData(),c=Dc(this,!a,b);return a&amp;&amp;(c=b.pastFuture(+this,c)),b.postformat(c)}function Gc(){var a,b,c,d=me(this._milliseconds)/1e3,e=me(this._days),f=me(this._months);a=p(d/60),b=p(a/60),d%=60,a%=60,c=p(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0&gt;m?&quot;-&quot;:&quot;&quot;)+&quot;P&quot;+(g?g+&quot;Y&quot;:&quot;&quot;)+(h?h+&quot;M&quot;:&quot;&quot;)+(i?i+&quot;D&quot;:&quot;&quot;)+(j||k||l?&quot;T&quot;:&quot;&quot;)+(j?j+&quot;H&quot;:&quot;&quot;)+(k?k+&quot;M&quot;:&quot;&quot;)+(l?l+&quot;S&quot;:&quot;&quot;):&quot;P0D&quot;}var Hc,Ic,Jc=a.momentProperties=[],Kc=!1,Lc={},Mc={},Nc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Pc={},Qc={},Rc=/\d/,Sc=/\d\d/,Tc=/\d{3}/,Uc=/\d{4}/,Vc=/[+-]?\d{6}/,Wc=/\d\d?/,Xc=/\d{1,3}/,Yc=/\d{1,4}/,Zc=/[+-]?\d{1,6}/,$c=/\d+/,_c=/[+-]?\d+/,ad=/Z|[+-]\d\d:?\d\d/gi,bd=/[+-]?\d+(\.\d{1,3})?/,cd=/[0-9]*[&apos;a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,dd={},ed={},fd=0,gd=1,hd=2,id=3,jd=4,kd=5,ld=6;H(&quot;M&quot;,[&quot;MM&quot;,2],&quot;Mo&quot;,function(){return this.month()+1}),H(&quot;MMM&quot;,0,0,function(a){return this.localeData().monthsShort(this,a)}),H(&quot;MMMM&quot;,0,0,function(a){return this.localeData().months(this,a)}),z(&quot;month&quot;,&quot;M&quot;),N(&quot;M&quot;,Wc),N(&quot;MM&quot;,Wc,Sc),N(&quot;MMM&quot;,cd),N(&quot;MMMM&quot;,cd),Q([&quot;M&quot;,&quot;MM&quot;],function(a,b){b[gd]=q(a)-1}),Q([&quot;MMM&quot;,&quot;MMMM&quot;],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[gd]=e:j(c).invalidMonth=a});var md=&quot;January_February_March_April_May_June_July_August_September_October_November_December&quot;.split(&quot;_&quot;),nd=&quot;Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec&quot;.split(&quot;_&quot;),od={};a.suppressDeprecationWarnings=!1;var pd=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,qd=[[&quot;YYYYYY-MM-DD&quot;,/[+-]\d{6}-\d{2}-\d{2}/],[&quot;YYYY-MM-DD&quot;,/\d{4}-\d{2}-\d{2}/],[&quot;GGGG-[W]WW-E&quot;,/\d{4}-W\d{2}-\d/],[&quot;GGGG-[W]WW&quot;,/\d{4}-W\d{2}/],[&quot;YYYY-DDD&quot;,/\d{4}-\d{3}/]],rd=[[&quot;HH:mm:ss.SSSS&quot;,/(T| )\d\d:\d\d:\d\d\.\d+/],[&quot;HH:mm:ss&quot;,/(T| )\d\d:\d\d:\d\d/],[&quot;HH:mm&quot;,/(T| )\d\d:\d\d/],[&quot;HH&quot;,/(T| )\d\d/]],sd=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=aa(&quot;moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.&quot;,function(a){a._d=new Date(a._i+(a._useUTC?&quot; UTC&quot;:&quot;&quot;))}),H(0,[&quot;YY&quot;,2],0,function(){return this.year()%100}),H(0,[&quot;YYYY&quot;,4],0,&quot;year&quot;),H(0,[&quot;YYYYY&quot;,5],0,&quot;year&quot;),H(0,[&quot;YYYYYY&quot;,6,!0],0,&quot;year&quot;),z(&quot;year&quot;,&quot;y&quot;),N(&quot;Y&quot;,_c),N(&quot;YY&quot;,Wc,Sc),N(&quot;YYYY&quot;,Yc,Uc),N(&quot;YYYYY&quot;,Zc,Vc),N(&quot;YYYYYY&quot;,Zc,Vc),Q([&quot;YYYYY&quot;,&quot;YYYYYY&quot;],fd),Q(&quot;YYYY&quot;,function(b,c){c[fd]=2===b.length?a.parseTwoDigitYear(b):q(b)}),Q(&quot;YY&quot;,function(b,c){c[fd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return q(a)+(q(a)&gt;68?1900:2e3)};var td=C(&quot;FullYear&quot;,!1);H(&quot;w&quot;,[&quot;ww&quot;,2],&quot;wo&quot;,&quot;week&quot;),H(&quot;W&quot;,[&quot;WW&quot;,2],&quot;Wo&quot;,&quot;isoWeek&quot;),z(&quot;week&quot;,&quot;w&quot;),z(&quot;isoWeek&quot;,&quot;W&quot;),N(&quot;w&quot;,Wc),N(&quot;ww&quot;,Wc,Sc),N(&quot;W&quot;,Wc),N(&quot;WW&quot;,Wc,Sc),R([&quot;w&quot;,&quot;ww&quot;,&quot;W&quot;,&quot;WW&quot;],function(a,b,c,d){b[d.substr(0,1)]=q(a)});var ud={dow:0,doy:6};H(&quot;DDD&quot;,[&quot;DDDD&quot;,3],&quot;DDDo&quot;,&quot;dayOfYear&quot;),z(&quot;dayOfYear&quot;,&quot;DDD&quot;),N(&quot;DDD&quot;,Xc),N(&quot;DDDD&quot;,Tc),Q([&quot;DDD&quot;,&quot;DDDD&quot;],function(a,b,c){c._dayOfYear=q(a)}),a.ISO_8601=function(){};var vd=aa(&quot;moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return this&gt;a?this:a}),wd=aa(&quot;moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return a&gt;this?this:a});Ja(&quot;Z&quot;,&quot;:&quot;),Ja(&quot;ZZ&quot;,&quot;&quot;),N(&quot;Z&quot;,ad),N(&quot;ZZ&quot;,ad),Q([&quot;Z&quot;,&quot;ZZ&quot;],function(a,b,c){c._useUTC=!0,c._tzm=Ka(a)});var xd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var yd=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,zd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Ya.fn=Ha.prototype;var Ad=ab(1,&quot;add&quot;),Bd=ab(-1,&quot;subtract&quot;);a.defaultFormat=&quot;YYYY-MM-DDTHH:mm:ssZ&quot;;var Cd=aa(&quot;moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.&quot;,function(a){return void 0===a?this.localeData():this.locale(a)});H(0,[&quot;gg&quot;,2],0,function(){return this.weekYear()%100}),H(0,[&quot;GG&quot;,2],0,function(){return this.isoWeekYear()%100}),Db(&quot;gggg&quot;,&quot;weekYear&quot;),Db(&quot;ggggg&quot;,&quot;weekYear&quot;),Db(&quot;GGGG&quot;,&quot;isoWeekYear&quot;),Db(&quot;GGGGG&quot;,&quot;isoWeekYear&quot;),z(&quot;weekYear&quot;,&quot;gg&quot;),z(&quot;isoWeekYear&quot;,&quot;GG&quot;),N(&quot;G&quot;,_c),N(&quot;g&quot;,_c),N(&quot;GG&quot;,Wc,Sc),N(&quot;gg&quot;,Wc,Sc),N(&quot;GGGG&quot;,Yc,Uc),N(&quot;gggg&quot;,Yc,Uc),N(&quot;GGGGG&quot;,Zc,Vc),N(&quot;ggggg&quot;,Zc,Vc),R([&quot;gggg&quot;,&quot;ggggg&quot;,&quot;GGGG&quot;,&quot;GGGGG&quot;],function(a,b,c,d){b[d.substr(0,2)]=q(a)}),R([&quot;gg&quot;,&quot;GG&quot;],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),H(&quot;Q&quot;,0,0,&quot;quarter&quot;),z(&quot;quarter&quot;,&quot;Q&quot;),N(&quot;Q&quot;,Rc),Q(&quot;Q&quot;,function(a,b){b[gd]=3*(q(a)-1)}),H(&quot;D&quot;,[&quot;DD&quot;,2],&quot;Do&quot;,&quot;date&quot;),z(&quot;date&quot;,&quot;D&quot;),N(&quot;D&quot;,Wc),N(&quot;DD&quot;,Wc,Sc),N(&quot;Do&quot;,function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),Q([&quot;D&quot;,&quot;DD&quot;],hd),Q(&quot;Do&quot;,function(a,b){b[hd]=q(a.match(Wc)[0],10)});var Dd=C(&quot;Date&quot;,!0);H(&quot;d&quot;,0,&quot;do&quot;,&quot;day&quot;),H(&quot;dd&quot;,0,0,function(a){return this.localeData().weekdaysMin(this,a)}),H(&quot;ddd&quot;,0,0,function(a){return this.localeData().weekdaysShort(this,a)}),H(&quot;dddd&quot;,0,0,function(a){return this.localeData().weekdays(this,a)}),H(&quot;e&quot;,0,0,&quot;weekday&quot;),H(&quot;E&quot;,0,0,&quot;isoWeekday&quot;),z(&quot;day&quot;,&quot;d&quot;),z(&quot;weekday&quot;,&quot;e&quot;),z(&quot;isoWeekday&quot;,&quot;E&quot;),N(&quot;d&quot;,Wc),N(&quot;e&quot;,Wc),N(&quot;E&quot;,Wc),N(&quot;dd&quot;,cd),N(&quot;ddd&quot;,cd),N(&quot;dddd&quot;,cd),R([&quot;dd&quot;,&quot;ddd&quot;,&quot;dddd&quot;],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),R([&quot;d&quot;,&quot;e&quot;,&quot;E&quot;],function(a,b,c,d){b[d]=q(a)});var Ed=&quot;Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday&quot;.split(&quot;_&quot;),Fd=&quot;Sun_Mon_Tue_Wed_Thu_Fri_Sat&quot;.split(&quot;_&quot;),Gd=&quot;Su_Mo_Tu_We_Th_Fr_Sa&quot;.split(&quot;_&quot;);H(&quot;H&quot;,[&quot;HH&quot;,2],0,&quot;hour&quot;),H(&quot;h&quot;,[&quot;hh&quot;,2],0,function(){return this.hours()%12||12}),Sb(&quot;a&quot;,!0),Sb(&quot;A&quot;,!1),z(&quot;hour&quot;,&quot;h&quot;),N(&quot;a&quot;,Tb),N(&quot;A&quot;,Tb),N(&quot;H&quot;,Wc),N(&quot;h&quot;,Wc),N(&quot;HH&quot;,Wc,Sc),N(&quot;hh&quot;,Wc,Sc),Q([&quot;H&quot;,&quot;HH&quot;],id),Q([&quot;a&quot;,&quot;A&quot;],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),Q([&quot;h&quot;,&quot;hh&quot;],function(a,b,c){b[id]=q(a),j(c).bigHour=!0});var Hd=/[ap]\.?m?\.?/i,Id=C(&quot;Hours&quot;,!0);H(&quot;m&quot;,[&quot;mm&quot;,2],0,&quot;minute&quot;),z(&quot;minute&quot;,&quot;m&quot;),N(&quot;m&quot;,Wc),N(&quot;mm&quot;,Wc,Sc),Q([&quot;m&quot;,&quot;mm&quot;],jd);var Jd=C(&quot;Minutes&quot;,!1);H(&quot;s&quot;,[&quot;ss&quot;,2],0,&quot;second&quot;),z(&quot;second&quot;,&quot;s&quot;),N(&quot;s&quot;,Wc),N(&quot;ss&quot;,Wc,Sc),Q([&quot;s&quot;,&quot;ss&quot;],kd);var Kd=C(&quot;Seconds&quot;,!1);H(&quot;S&quot;,0,0,function(){return~~(this.millisecond()/100)}),H(0,[&quot;SS&quot;,2],0,function(){return~~(this.millisecond()/10)}),H(0,[&quot;SSS&quot;,3],0,&quot;millisecond&quot;),H(0,[&quot;SSSS&quot;,4],0,function(){return 10*this.millisecond()}),H(0,[&quot;SSSSS&quot;,5],0,function(){return 100*this.millisecond()}),H(0,[&quot;SSSSSS&quot;,6],0,function(){return 1e3*this.millisecond()}),H(0,[&quot;SSSSSSS&quot;,7],0,function(){return 1e4*this.millisecond()}),H(0,[&quot;SSSSSSSS&quot;,8],0,function(){return 1e5*this.millisecond()}),H(0,[&quot;SSSSSSSSS&quot;,9],0,function(){return 1e6*this.millisecond()}),z(&quot;millisecond&quot;,&quot;ms&quot;),N(&quot;S&quot;,Xc,Rc),N(&quot;SS&quot;,Xc,Sc),N(&quot;SSS&quot;,Xc,Tc);var Ld;for(Ld=&quot;SSSS&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)N(Ld,$c);for(Ld=&quot;S&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)Q(Ld,Wb);var Md=C(&quot;Milliseconds&quot;,!1);H(&quot;z&quot;,0,0,&quot;zoneAbbr&quot;),H(&quot;zz&quot;,0,0,&quot;zoneName&quot;);var Nd=n.prototype;Nd.add=Ad,Nd.calendar=cb,Nd.clone=db,Nd.diff=ib,Nd.endOf=ub,Nd.format=mb,Nd.from=nb,Nd.fromNow=ob,Nd.to=pb,Nd.toNow=qb,Nd.get=F,Nd.invalidAt=Cb,Nd.isAfter=eb,Nd.isBefore=fb,Nd.isBetween=gb,Nd.isSame=hb,Nd.isValid=Ab,Nd.lang=Cd,Nd.locale=rb,Nd.localeData=sb,Nd.max=wd,Nd.min=vd,Nd.parsingFlags=Bb,Nd.set=F,Nd.startOf=tb,Nd.subtract=Bd,Nd.toArray=yb,Nd.toObject=zb,Nd.toDate=xb,Nd.toISOString=lb,Nd.toJSON=lb,Nd.toString=kb,Nd.unix=wb,Nd.valueOf=vb,Nd.year=td,Nd.isLeapYear=ia,Nd.weekYear=Fb,Nd.isoWeekYear=Gb,Nd.quarter=Nd.quarters=Jb,Nd.month=Y,Nd.daysInMonth=Z,Nd.week=Nd.weeks=na,Nd.isoWeek=Nd.isoWeeks=oa,Nd.weeksInYear=Ib,Nd.isoWeeksInYear=Hb,Nd.date=Dd,Nd.day=Nd.days=Pb,Nd.weekday=Qb,Nd.isoWeekday=Rb,Nd.dayOfYear=qa,Nd.hour=Nd.hours=Id,Nd.minute=Nd.minutes=Jd,Nd.second=Nd.seconds=Kd,
Nd.millisecond=Nd.milliseconds=Md,Nd.utcOffset=Na,Nd.utc=Pa,Nd.local=Qa,Nd.parseZone=Ra,Nd.hasAlignedHourOffset=Sa,Nd.isDST=Ta,Nd.isDSTShifted=Ua,Nd.isLocal=Va,Nd.isUtcOffset=Wa,Nd.isUtc=Xa,Nd.isUTC=Xa,Nd.zoneAbbr=Xb,Nd.zoneName=Yb,Nd.dates=aa(&quot;dates accessor is deprecated. Use date instead.&quot;,Dd),Nd.months=aa(&quot;months accessor is deprecated. Use month instead&quot;,Y),Nd.years=aa(&quot;years accessor is deprecated. Use year instead&quot;,td),Nd.zone=aa(&quot;moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779&quot;,Oa);var Od=Nd,Pd={sameDay:&quot;[Today at] LT&quot;,nextDay:&quot;[Tomorrow at] LT&quot;,nextWeek:&quot;dddd [at] LT&quot;,lastDay:&quot;[Yesterday at] LT&quot;,lastWeek:&quot;[Last] dddd [at] LT&quot;,sameElse:&quot;L&quot;},Qd={LTS:&quot;h:mm:ss A&quot;,LT:&quot;h:mm A&quot;,L:&quot;MM/DD/YYYY&quot;,LL:&quot;MMMM D, YYYY&quot;,LLL:&quot;MMMM D, YYYY h:mm A&quot;,LLLL:&quot;dddd, MMMM D, YYYY h:mm A&quot;},Rd=&quot;Invalid date&quot;,Sd=&quot;%d&quot;,Td=/\d{1,2}/,Ud={future:&quot;in %s&quot;,past:&quot;%s ago&quot;,s:&quot;a few seconds&quot;,m:&quot;a minute&quot;,mm:&quot;%d minutes&quot;,h:&quot;an hour&quot;,hh:&quot;%d hours&quot;,d:&quot;a day&quot;,dd:&quot;%d days&quot;,M:&quot;a month&quot;,MM:&quot;%d months&quot;,y:&quot;a year&quot;,yy:&quot;%d years&quot;},Vd=s.prototype;Vd._calendar=Pd,Vd.calendar=_b,Vd._longDateFormat=Qd,Vd.longDateFormat=ac,Vd._invalidDate=Rd,Vd.invalidDate=bc,Vd._ordinal=Sd,Vd.ordinal=cc,Vd._ordinalParse=Td,Vd.preparse=dc,Vd.postformat=dc,Vd._relativeTime=Ud,Vd.relativeTime=ec,Vd.pastFuture=fc,Vd.set=gc,Vd.months=U,Vd._months=md,Vd.monthsShort=V,Vd._monthsShort=nd,Vd.monthsParse=W,Vd.week=ka,Vd._week=ud,Vd.firstDayOfYear=ma,Vd.firstDayOfWeek=la,Vd.weekdays=Lb,Vd._weekdays=Ed,Vd.weekdaysMin=Nb,Vd._weekdaysMin=Gd,Vd.weekdaysShort=Mb,Vd._weekdaysShort=Fd,Vd.weekdaysParse=Ob,Vd.isPM=Ub,Vd._meridiemParse=Hd,Vd.meridiem=Vb,w(&quot;en&quot;,{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===q(a%100/10)?&quot;th&quot;:1===b?&quot;st&quot;:2===b?&quot;nd&quot;:3===b?&quot;rd&quot;:&quot;th&quot;;return a+c}}),a.lang=aa(&quot;moment.lang is deprecated. Use moment.locale instead.&quot;,w),a.langData=aa(&quot;moment.langData is deprecated. Use moment.localeData instead.&quot;,y);var Wd=Math.abs,Xd=yc(&quot;ms&quot;),Yd=yc(&quot;s&quot;),Zd=yc(&quot;m&quot;),$d=yc(&quot;h&quot;),_d=yc(&quot;d&quot;),ae=yc(&quot;w&quot;),be=yc(&quot;M&quot;),ce=yc(&quot;y&quot;),de=Ac(&quot;milliseconds&quot;),ee=Ac(&quot;seconds&quot;),fe=Ac(&quot;minutes&quot;),ge=Ac(&quot;hours&quot;),he=Ac(&quot;days&quot;),ie=Ac(&quot;months&quot;),je=Ac(&quot;years&quot;),ke=Math.round,le={s:45,m:45,h:22,d:26,M:11},me=Math.abs,ne=Ha.prototype;ne.abs=oc,ne.add=qc,ne.subtract=rc,ne.as=wc,ne.asMilliseconds=Xd,ne.asSeconds=Yd,ne.asMinutes=Zd,ne.asHours=$d,ne.asDays=_d,ne.asWeeks=ae,ne.asMonths=be,ne.asYears=ce,ne.valueOf=xc,ne._bubble=tc,ne.get=zc,ne.milliseconds=de,ne.seconds=ee,ne.minutes=fe,ne.hours=ge,ne.days=he,ne.weeks=Bc,ne.months=ie,ne.years=je,ne.humanize=Fc,ne.toISOString=Gc,ne.toString=Gc,ne.toJSON=Gc,ne.locale=rb,ne.localeData=sb,ne.toIsoString=aa(&quot;toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)&quot;,Gc),ne.lang=Cd,H(&quot;X&quot;,0,0,&quot;unix&quot;),H(&quot;x&quot;,0,0,&quot;valueOf&quot;),N(&quot;x&quot;,_c),N(&quot;X&quot;,bd),Q(&quot;X&quot;,function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),Q(&quot;x&quot;,function(a,b,c){c._d=new Date(q(a))}),a.version=&quot;2.10.6&quot;,b(Da),a.fn=Od,a.min=Fa,a.max=Ga,a.utc=h,a.unix=Zb,a.months=jc,a.isDate=d,a.locale=w,a.invalid=l,a.duration=Ya,a.isMoment=o,a.weekdays=lc,a.parseZone=$b,a.localeData=y,a.isDuration=Ia,a.monthsShort=kc,a.weekdaysMin=nc,a.defineLocale=x,a.weekdaysShort=mc,a.normalizeUnits=A,a.relativeTimeThreshold=Ec;var oe=a;return oe});</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2c64669f-f07e-4365-bf64-c559ace83004</id>
                <name>stopOnErrorCount</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122375</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to Stop a channel if it reaches a particular error count. 
	Also sends an alert message via another channel (this sends a sms via our monitoring system).

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function stopOnErrorCount(cid, errorCount) {
	var channelStatisticsController = Packages.com.mirth.connect.server.controllers.ChannelStatisticsController.getInstance();
	var channelStatusController = Packages.com.mirth.connect.server.controllers.ChannelStatusController.getInstance();
	var stats = channelStatisticsController.getStatistics(cid);
	// var numOfQueued = stats.queued;
	var numOfErrors = stats.error;

	if(numOfErrors &gt; errorCount )
	{
		//Stop Me
		channelStatusController.stopChannel(cid);
		//Alert msg sent to _SVHALERT channel
		var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
		var channelName = channelController.getDeployedChannelById(cid).getName();
		var alertmsg = &apos;mirth01 mirth_channel_status codeTemplate_stopOnErrorCount 0 &apos; +
					   &apos;channel &apos; + channelName + &apos; stopped&apos;;
		router.routeMessage(&apos;_SVHALERT&apos;, alertmsg);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>08044817-3504-4fc1-80ee-404870195151</id>
                <name>test</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122745</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.
	searchword
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function testfunc(arg1) {
	return arg1;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
            <name>WebPT-Mirth</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121602</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
                <name>Fix HL7v2 Node Order</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121804</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>35f4c250-08b4-4e42-8e60-f85aa98dfe50</id>
            <name>WebPT-Translations</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939924</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>be8f057b-2640-4613-b2e7-83326c59169c</id>
                <name>AddZeros</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122826</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function addZeroes(num) {
   return num.toLocaleString(&quot;en&quot;, {useGrouping: false, minimumFractionDigits: 2})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>51913864-7702-489a-b7c6-54992c12b19d</id>
                <name>FindLookupValueWithDefault</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122218</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithDefault ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        //obj.LeftValue = LeftValue;
        //obj.RightValue1 = DefaultValue1;
        //obj.RightValue2   = DefaultValue2; 
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);
            var result = pattern.test(LeftValue );

            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>c276be9f-c8f1-4dea-8df0-e000c6745271</id>
                <name>FindLookupValueWithInsuranceId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122080</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithInsuranceId ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);             
            var result = pattern.test(LeftValue );
	
            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7d746da2-58c6-44eb-ad5c-c5bfd0a0c537</id>
                <name>UseExternalProblemID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122349</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalProblemID() {

if ([&apos;2804&apos;, &apos;2822&apos;].indexOf($(&apos;tenantId&apos;) + &apos;&apos;) &gt; -1) {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitexternalproblemid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitaccountnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>07730e85-7f30-4ddf-90a4-78183c896ab5</id>
                <name>UseExternalVisitID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122192</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalVisitID() {
	
if ($(&apos;tenantId&apos;)  == &apos;9999&apos; ) {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitexternalvisitid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitvisitnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="4.0.0">
      <id>dff92eca-e23d-4802-8e3c-023f3af3e640</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>HL7 to CCDA - MDHT</name>
      <description></description>
      <revision>1</revision>
      <sourceConnector version="4.0.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.file.FileReceiverProperties" version="4.0.0">
          <pluginProperties>
            <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="3.7.0">
                                                                                          
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    <enabled>false</enabled>
              <clientAuthentication>DISABLED</clientAuthentication>
              <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
              <trustAllCertificates>false</trustAllCertificates>
              <trustedCertificates>
                                                                                                                                                                                    
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        <trustedCertificateAliases/>
                <trustCACerts>true</trustCACerts>
              </trustedCertificates>
              <localCertificateAlias/>
              <ocspEnabled>false</ocspEnabled>
              <ocspURI/>
              <ocspHardFail>false</ocspHardFail>
              <crlEnabled>false</crlEnabled>
              <crlURI/>
              <crlHardFail>false</crlHardFail>
              <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
              <trustedSubjectDNs class="linked-hash-map"/>
              <hideIssuerDNs>false</hideIssuerDNs>
              <allowExpiredCertificates>false</allowExpiredCertificates>
              <implicitFTPS>true</implicitFTPS>
              <useSTARTTLS>false</useSTARTTLS>
            </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
          </pluginProperties>
          <pollConnectorProperties version="4.0.0">
            <pollingType>INTERVAL</pollingType>
            <pollOnStart>false</pollOnStart>
            <pollingFrequency>5000</pollingFrequency>
            <pollingHour>0</pollingHour>
            <pollingMinute>0</pollingMinute>
            <cronJobs/>
            <pollConnectorPropertiesAdvanced>
              <weekly>true</weekly>
              <inactiveDays>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
              </inactiveDays>
              <dayOfMonth>1</dayOfMonth>
              <allDay>true</allDay>
              <startingHour>8</startingHour>
              <startingMinute>0</startingMinute>
              <endingHour>17</endingHour>
              <endingMinute>0</endingMinute>
            </pollConnectorPropertiesAdvanced>
          </pollConnectorProperties>
          <sourceConnectorProperties version="4.0.0">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <scheme>FILE</scheme>
          <host>C:/temp/file/in</host>
          <fileFilter>*</fileFilter>
          <regex>false</regex>
          <directoryRecursion>false</directoryRecursion>
          <ignoreDot>true</ignoreDot>
          <anonymous>true</anonymous>
          <username>anonymous</username>
          <password>anonymous</password>
          <timeout>10000</timeout>
          <secure>true</secure>
          <passive>true</passive>
          <validateConnection>true</validateConnection>
          <afterProcessingAction>DELETE</afterProcessingAction>
          <moveToDirectory></moveToDirectory>
          <moveToFileName></moveToFileName>
          <errorReadingAction>NONE</errorReadingAction>
          <errorResponseAction>AFTER_PROCESSING</errorResponseAction>
          <errorMoveToDirectory></errorMoveToDirectory>
          <errorMoveToFileName></errorMoveToFileName>
          <checkFileAge>true</checkFileAge>
          <fileAge>1000</fileAge>
          <fileSizeMinimum>0</fileSizeMinimum>
          <fileSizeMaximum></fileSizeMaximum>
          <ignoreFileSizeMaximum>true</ignoreFileSizeMaximum>
          <sortBy>date</sortBy>
          <binary>false</binary>
          <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        </properties>
        <transformer version="4.0.0">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
              <name>getMSH</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var scriptName= &apos;getMSH&apos;;

var objMSH= getMSH(msg);
logger.error(&apos;DEBUG::&apos;+scriptName+&apos;object: &apos;+JSON.stringify(objMSH));</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
              <name>getPID</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>var scriptName= &apos;getPID&apos;;

var objPID= getPID(msg);
logger.error(&apos;DEBUG::&apos;+scriptName+&apos;object: &apos;+JSON.stringify(objPID));</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
              <name>set patientRole</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <script>importPackage( java.util );
importPackage( java.io );
importPackage( java.math );
importPackage( org.openhealthtools.mdht.uml.cda.consol );
importPackage( org.openhealthtools.mdht.uml.cda );
importPackage( org.openhealthtools.mdht.uml.cda.ccd );
importPackage( org.openhealthtools.mdht.uml.cda.util );
importPackage( org.openhealthtools.mdht.uml.hl7.datatypes );
importPackage( org.openhealthtools.mdht.uml.hl7.vocab );

// create and initialize an instance of the ContinuityOfCareDocument class
var ccdDocument  = CCDFactory.eINSTANCE.createContinuityOfCareDocument().init();
// instantiate StringWriter 
var outputString = new java.io.StringWriter();
// instantiate 
var CDAUtil = Packages.org.openhealthtools.mdht.uml.cda.util.CDAUtil;

// create a patient role object and add it to the document
var patientRole = CDAFactory.eINSTANCE.createPatientRole();
ccdDocument.addPatientRole(patientRole);
var id = DatatypesFactory.eINSTANCE.createII();
patientRole.getIds().add(id);
id.setRoot(&apos;996-756-495&apos;);
id.setExtension(&apos;2.16.840.1.113883.19.5&apos;);

// create an address object and add it to patient role
var addr = DatatypesFactory.eINSTANCE.createAD();
patientRole.getAddrs().add(addr);
addr.getUses().add(PostalAddressUse.H);
addr.addStreetAddressLine(&apos;1313 Mockingbird Lane&apos;);
addr.addCity(&apos;Janesville&apos;);
addr.addState(&apos;WI&apos;);
addr.addPostalCode(&apos;53545&apos;);

// create a patient object and add it to patient role
var patient = CDAFactory.eINSTANCE.createPatient();
patientRole.setPatient(patient);
var name = DatatypesFactory.eINSTANCE.createPN();
patient.getNames().add(name);
name.addGiven(&apos;Henry&apos;);
name.addFamily(&apos;Levin&apos;);

var administrativeGenderCode = DatatypesFactory.eINSTANCE.createCE();

patient.setAdministrativeGenderCode(administrativeGenderCode);
administrativeGenderCode.setCode(&apos;M&apos;);
administrativeGenderCode.setCodeSystem(&apos;2.16.840.1.113883.5.1&apos;);

var birthTime = DatatypesFactory.eINSTANCE.createTS();
patient.setBirthTime(birthTime);
birthTime.setValue(&apos;19320924&apos;);

CDAUtil.save(ccdDocument, outputString);
channelMap.put(&apos;CCDAObject&apos;, outputString);
msg= outputString;</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64">TVNIfF5+XCZ8UkVHQURUfEdPT0QgSEVBTFRIIEhPU1BJVEFMfEdISCBMQUJ8R09PRCBIRUFMVEggTEFCfDIwMDcwMTA2MTAwMDU5fHxPUlVeUjAxXk9SVV9SMDF8TVNHMDAwMDAxfFB8Mi42DQpQSUR8MXx8UEFUSUQxMjM0Xl5eR09PRCBIRUFMVEggSE9TUElUQUxeTVJeR09PRCBIRUFMVEggSE9TUElUQUx+MTIzNDU2Nzg5Xl5eVVNTU0FeU1N8fEVWRVJZTUFOXkFEQU1eQXx8MTk1NjAxMjl8TQ0KTksxfDF8TlVDTEVBUl5ORUxEQX5FVkVSWU1BTl5ORUxEQXxTUE9eU1BPVVNFfDIyMjIgSE9NRSBTVFJFRVReXklTSFBFTUlOR15NSV40OTg0OV5VU0FeSF5eV0F8KDU1NSkgMjMyLTY1MjN8KDU1NSkgMzMzLTg5NTZ8Q3x8fHx8fHxNfEZ8MTk2MDA0MTV8fHx8ZW58fHx8fHx8fHx8fHx8fHx8fHx8fF5QUlNeUEheXl41NTVeMjMyNjUyM35eV1BOXlBIXl5eNTU1XjMzMzg5NTZeMQ0KTksxfDJ8R1VMSVpJT15OQVRIQU5JRUxeU0FNTUlFfEdSRF5HdWFyZGlhbl5ITDcwMDYzfHwoNzI4KTIyNC02NTA4fHxDfHx8fHx8fHx8fHx8fGVufHx8fHx8fHx8fHx8fHx8fHx8fHxeV1BOXlBIXl5eNzI4XjIyNDY1MDh+XlBSTl5JbnRlcm5ldF5uYXRoYW5pZWwuZ3VsaXppb0Bzb21ld2hlcmUuY29tDQpPQlh8MXxDRXwyODU2Mi03Xl5MTnwyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4xLjh8MTAxNjAtMF5IaXN0b3J5IG9mIG1lZGljYXRpb24gdXNlXkxOfHx8fHx8Rg0KT0JYfDJ8Q1dFfDE5ODQ0MF5BY2V0YW1pbm9waGVuXlJ4Tm9ybXwxLjI0fDUwMH5DMzgyODheT3JhbF5OQ0l+QzQyOTk4XlRhYmxldF5OQ0l8bWd8MXxxOGh8fHxGDQpPQlh8M3xDV0V8ODAzMjkzXkZsdW94ZXRpbmVeUnhOb3JtfDEuMjR8MTV+QzM4Mjg4Xk9yYWxeTkNJfkM0Mjk5OF5UYWJsZXReTkNJfG1nfDF8b25jZXx8fEYNClBWMXx8T3xPdXRwYXRpZW50IENsaW5pY15eXkdPT0QgSEVBTFRIIEhPU1BJVEFMXl5DXk5PUlRIV0VTVF4zXkNvbXBsZXggTGFic15eR09PRCBIRUFMVEggSE9TUElUQUx8fHx8RFJJRDU2Nzg5MF5CSUxMXkJFQUtFUl5eXkRSXk1EXl5HT09EIEhFQUxUSCBIT1NQSVRBTHxEUklEMTIzNDU2XlBBVFJJQ0lBXlBSSU1BUlleXl5EUl5NRF5eR09PRCBIRUFMVEggSE9TUElUQUx8fE1FRHx8fHx8fHxEUklENTY3ODkwXkJJTExeQkVBS0VSXl5eRFJeTUReXkdPT0QgSEVBTFRIIEhPU1BJVEFMfFN8MTQwMHxBfHx8fHx8fHx8fHx8fHx8fHx8fEdPT0QgSEVBTFRIIEhPU1BJVEFMfHx8fHwyMDA3MDEwNjEwMDB8MjAwNzAxMDYxNDAwDQpPUkN8UkV8fHx8Q018fHx8MjAwNzAxMDYxMjAwfERSSUQ1Njc4OTBeQklMTF5CRUFLRVJeXl5EUg0KT0JSfDF8MzQxODU2NjQ5XkhOQU1fT1JERVJJRHwwMDAwMDIwMDYzMjYwMDIzNjJ8MjQzMzEtMV5MaXBpZCAxOTk2IHBhbmVsIGluIFNlcnVtIG9yIFBsYXNtYV5MTnx8fDIwMDcwMTA1MTYzMDAwfHx8fHx8fHx8RFJJRDU2Nzg5MF5CSUxMXkJFQUtFUl5eXkRSfHx8fHx8MjAwNzAxMDUxNjMwMDB8fHxGfHx8fHx8fHx8fHwyMDA3MDEwNjEwMDANCk9CWHw0fENFfDI4NTYyLTdeXkxOfDIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjEuMTF8MTE0NTAtNF5Qcm9ibGVtIExpc3ReTE58fHx8fHxGDQpPQlh8NXxDV0V8NDA0Njg0MDAzXkNsaW5pY2FsIGZpbmRpbmdeU05PTUVEIENUfDEuMjh8MTcxNzMwMDdeRXhjZXNzaXZlIHRoaXJzdF5TTk9NRUQgQ1R8fHx8fHxGfHx8MjAwNzAxMDUxMjMwMDANCk9CWHw2fENXRXw0MDQ2ODQwMDNeQ2xpbmljYWwgZmluZGluZ15TTk9NRUQgQ1R8MS4yOHw4NDIyOTAwMV5GYXRpZ3VlXlNOT01FRCBDVHx8fHx8fEZ8fHwyMDA3MDEwNTEyMzAwMA0KT0JYfDd8Q1dFfDQwNDY4NDAwM15DbGluaWNhbCBmaW5kaW5nXlNOT01FRCBDVHwxLjI4fDQyMjg2ODAwOV5VbmV4cGxhaW5lZCB3ZWlnaHQgbG9zc15TTk9NRUQgQ1R8fHx8fHxGfHx8MjAwNzAxMDUxMjMwMDANCk9CWHw4fENXRXw0MDY1MjMwMDReUmVmZXJyYWwgZGlhZ25vc2lzXlNOT01FRCBDVHwxLjI4fDczMjExMDA5XkRpYWJldGVzIG1lbGxpdHVzXlNOT01FRCBDVHx8fHx8fEZ8fHwyMDA3MDEwNTEyMzAwMA0KT0JSfDJ8MzQxODU2NjQ5XkhOQU1fT1JERVJJRHwwMDAwMDIwMDYzMjYwMDIzNjJ8MjQzMzEtMV5MaXBpZCAxOTk2IHBhbmVsIGluIFNlcnVtIG9yIFBsYXNtYV5MTnx8fDIwMDcwMTA1MTYzMDAwfHx8MS4zMnx8fHx8fERSSUQ1Njc4OTBeQklMTF5CRUFLRVJeXl5EUnx8fHx8fDIwMDcwMTA1MTYzMDAwfHx8Rnx8fHx8fHx8fHx8MjAwNzAxMDYxMDAwDQpPQlh8OXxOTXwyMDkzLTNeQ2hvbGVzdCBTZXJQbC1tQ25jXkxOfDEuMzF8MTc2fG1nL2RMfFI6MC0xOTksTToyMDAtMjM5LEg6MjQwK3xOXk5vcm1hbF5PYnNlcnZhdGlvbkludGVycHJldGF0aW9ufHx8Rnx8fDIwMDcwMTA1MTYzMDAwDQpPQlh8MTB8Tk18MjU3MS04XlRyaWdsIFNlclBsLW1DbmNeTE58MS4zMXwxMDB8bWcvZEx8NDAtMTYwfE5eTm9ybWFsXk9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb258fHxGfHx8MjAwNzAxMDUxNjMwMDANCk5URXwxfEx8Q2hvbGVzdGVyb2wgLSAxNzYgbWcvZEwgKG5vcm1hbCkNCk5URXwyfEx8UmVjb21tZW5kZWQ6IDAtMTk5OyBNb2RlcmF0ZSBSaXNrOiAyMDAtMjM5OyBIaWdoIFJpc2s6IDI0MCsNCk5URXwzfEx8VHJpZ2x5Y2VyaWRlIC0gMTAwIG1nL2RMIChub3JtYWwpDQpOVEV8NHxMfFJhbmdlOiA0MCB0byAxNjANCk9CUnwyfDM0MTg1NjY0OV5ITkFNX09SREVSSUR8MDAwMDAyMDA2MzI2MDAyMzYyfDYwNDc5LTNeTERMYyBzY3JlZW5pbmcgKENNQy1EKV5MTnx8fDIwMDcwMTA1MTYzMDAwfHx8MS4zMnx8fHx8fERSSUQ1Njc4OTBeQklMTF5CRUFLRVJeXl5EUnx8fHx8fDIwMDcwMTA1MTYzMDAwfHx8Rnx8fHx8fHx8fHx8MjAwNzAxMDYxMDAwDQpPQlh8MTB8Tk18NDkxMzItNF5MRExjIFNlclBsIEVscGgtbUNuY15MTnwxLjMxfDExNnxtZy9kTHxSOjAtMTI5LE06MTMwLTE1OSxIOjE2MCt8Tl5Ob3JtYWxeT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvbnx8fEZ8fHwyMDA3MDEwNTE2MzAwMA0KTlRFfDV8THxMREwgLSAxMTYgbWcvZEwgKG5vcm1hbCkNCk5URXw2fEx8UmVjb21tZW5kZWQ6IDAtMTI5OyBNb2RlcmF0ZSBSaXNrOiAxMzAtMTU5OyBIaWdoIFJpc2s6IDE2MCsNCg0KDQojDQojICBPUlVfUjAxIC0gIG1pbmltdW0gc2VnbWVudHMgc2V0IHRoYXQgY29tcGx5IHdpdGggdGhlIEhMNyBWMi42IChkYXRhIHR5cGVzIGFyZSBmcm9tIDIuNykNCiMNCk1TSHxeflwmfFJFR0FEVHxHT09EIEhFQUxUSCBIT1NQSVRBTHxHSEggTEFCfEdPT0QgSEVBTFRIIExBQnwyMDA3MDEwNjEwMDA1OXx8T1JVXlIwMV5PUlVfUjAxfE1TRzAwMDAwMXxQfDIuNg0KUElEfDF8fFBBVElEMTIzNF5eXkdPT0QgSEVBTFRIIEhPU1BJVEFMXk1SXkdPT0QgSEVBTFRIIEhPU1BJVEFMfjEyMzQ1Njc4OV5eXlVTU1NBXlNTfHxFVkVSWU1BTl5BREFNXkF8fDE5NTYwMTI5fE0NClBWMXx8T3xPdXRwYXRpZW50IENsaW5pY15eXkdPT0QgSEVBTFRIIEhPU1BJVEFMXl5DXk5PUlRIV0VTVF4zXkNvbXBsZXggTGFic15eR09PRCBIRUFMVEggSE9TUElUQUx8fHx8RFJJRDU2Nzg5MF5CSUxMXkJFQUtFUl5eXkRSXk1EXl5HT09EIEhFQUxUSCBIT1NQSVRBTHxEUklEMTIzNDU2XlBBVFJJQ0lBXlBSSU1BUlleXl5EUl5NRF5eR09PRCBIRUFMVEggSE9TUElUQUx8fE1FRHx8fHx8fHxEUklENTY3ODkwXkJJTExeQkVBS0VSXl5eRFJeTUReXkdPT0QgSEVBTFRIIEhPU1BJVEFMfFN8MTQwMHxBfHx8fHx8fHx8fHx8fHx8fHx8fEdPT0QgSEVBTFRIIEhPU1BJVEFMfHx8fHwyMDA3MDEwNjEwMDB8MjAwNzAxMDYxNDAwDQpPUkN8UkV8fHx8Q018fHx8MjAwNzAxMDYxMjAwfERSSUQ1Njc4OTBeQklMTF5CRUFLRVJeXl5EUg0KT0JSfDF8MzQxODU2NjQ5XkhOQU1fT1JERVJJRHwwMDAwMDIwMDYzMjYwMDIzNjJ8MjQzMzEtMV5MaXBpZCAxOTk2IHBhbmVsIGluIFNlcnVtIG9yIFBsYXNtYV5MTnx8fDIwMDcwMTA1MTYzMDAwfHx8fHx8fHx8RFJJRDU2Nzg5MF5CSUxMXkJFQUtFUl5eXkRSfHx8fHx8MjAwNzAxMDUxNjMwMDB8fHxGfHx8fHx8fHx8fHwyMDA3MDEwNjEwMDANCg0K</inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>HL7V2</inboundDataType>
          <outboundDataType>HL7V3</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
              <handleRepetitions>true</handleRepetitions>
              <handleSubcomponents>true</handleSubcomponents>
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <stripNamespaces>true</stripNamespaces>
              <segmentDelimiter>\r</segmentDelimiter>
              <convertLineBreaks>true</convertLineBreaks>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <segmentDelimiter>\r</segmentDelimiter>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
              <splitType>MSH_Segment</splitType>
              <batchScript></batchScript>
            </batchProperties>
            <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
              <segmentDelimiter>\r</segmentDelimiter>
              <successfulACKCode>AA</successfulACKCode>
              <successfulACKMessage></successfulACKMessage>
              <errorACKCode>AE</errorACKCode>
              <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
              <rejectedACKCode>AR</rejectedACKCode>
              <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
              <msh15ACKAccept>false</msh15ACKAccept>
              <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
            </responseGenerationProperties>
            <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
              <successfulACKCode>AA,CA</successfulACKCode>
              <errorACKCode>AE,CE</errorACKCode>
              <rejectedACKCode>AR,CR</rejectedACKCode>
              <validateMessageControlId>true</validateMessageControlId>
              <originalMessageControlId>Destination_Encoded</originalMessageControlId>
              <originalIdMapVariable></originalIdMapVariable>
            </responseValidationProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="4.0.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="4.0.0">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="4.0.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.0.0">
          <elements/>
        </filter>
        <transportName>File Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.0.0">
          <metaDataId>1</metaDataId>
          <name>File Writer - C:\temp\file\out</name>
          <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="4.0.0">
            <pluginProperties>
              <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="3.7.0">
                                                                                          
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    <enabled>false</enabled>
                <clientAuthentication>DISABLED</clientAuthentication>
                <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
                <trustAllCertificates>false</trustAllCertificates>
                <trustedCertificates>
                                                                                                                                                                                    
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        <trustedCertificateAliases/>
                  <trustCACerts>true</trustCACerts>
                </trustedCertificates>
                <localCertificateAlias/>
                <ocspEnabled>false</ocspEnabled>
                <ocspURI/>
                <ocspHardFail>false</ocspHardFail>
                <crlEnabled>false</crlEnabled>
                <crlURI/>
                <crlHardFail>false</crlHardFail>
                <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
                <trustedSubjectDNs class="linked-hash-map"/>
                <hideIssuerDNs>false</hideIssuerDNs>
                <allowExpiredCertificates>false</allowExpiredCertificates>
                <implicitFTPS>true</implicitFTPS>
                <useSTARTTLS>false</useSTARTTLS>
              </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
            </pluginProperties>
            <destinationConnectorProperties version="4.0.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <scheme>FILE</scheme>
            <host>C:/temp/file/out</host>
            <outputPattern>${SYSTIME}.xml</outputPattern>
            <anonymous>true</anonymous>
            <username>anonymous</username>
            <password>anonymous</password>
            <timeout>10000</timeout>
            <keepConnectionOpen>true</keepConnectionOpen>
            <maxIdleTime>0</maxIdleTime>
            <secure>true</secure>
            <passive>true</passive>
            <validateConnection>true</validateConnection>
            <outputAppend>true</outputAppend>
            <errorOnExists>false</errorOnExists>
            <temporary>false</temporary>
            <binary>false</binary>
            <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
            <template>${message.encodedData}</template>
          </properties>
          <transformer version="4.0.0">
            <elements/>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="4.0.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="4.0.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.0.0">
            <elements/>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="4.0.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="4.0.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.0.0">
            <elements/>
          </filter>
          <transportName>File Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

// Initialize MDHT Clinical Document Package
org.openhealthtools.mdht.uml.cda.ccd.CCDPackage.eINSTANCE.eClass();

return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.0.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.0.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1551503036259</time>
            <timezone>America/Chicago</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="4.0.0">
            <id>d316c4bc-9e10-4162-b67c-e514afc59fa3</id>
            <name>Channel Helpers</name>
            <revision>1</revision>
            <lastModified>
              <time>1706120884823</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>1aca2a66-a83a-4703-9ec7-dfaa3a6ad5b2</string>
              <string>3e15b608-553f-45e7-a617-712d6b75ab4d</string>
              <string>f6d6aa80-d65f-4935-a267-d6bef39a7bdf</string>
              <string>edd93839-401c-4613-b696-6d4799ebc5af</string>
              <string>2f511815-92d1-4f0f-92e9-f4f8ae576b75</string>
              <string>b4a51816-0aad-444a-b1ce-f5c11f9961bc</string>
              <string>cb7f055d-45ae-43b7-ac7c-bb2b2db34ded</string>
              <string>139cdc6a-5f40-46bd-a246-2a9a1ef8ed10</string>
              <string>316c7826-a8ee-44b4-922c-8afe0daa2c72</string>
              <string>6ff8ca2b-c4e3-4e6f-897a-17f36ed63faa</string>
              <string>27aee1c0-8ed0-4062-89b5-1c7a69a946bc</string>
              <string>291b4847-a85d-41c6-bd4a-37f008b15ca8</string>
              <string>81c836fd-cbba-4247-b438-d4c9987ee75b</string>
              <string>4318de8e-4d7b-4885-9f11-8b2ac6f9c70a</string>
              <string>e983e439-461a-424f-8348-764b29e05ecb</string>
              <string>0763b542-8ed8-4a30-9c35-de3dbf030626</string>
              <string>75c150e0-fbc5-4eef-a856-bec6b3a39a24</string>
              <string>dd55a671-a099-4b29-bdbb-85c34050037a</string>
              <string>a08848df-6dcd-4c51-aa6d-d2f85edfdcf8</string>
              <string>ae504043-55f5-497e-ac87-33686e7569b2</string>
              <string>fef7c31a-61a4-43c8-bb15-79f51a36c882</string>
              <string>69f5ad2c-3bf4-4d55-8e4a-bd6faade202d</string>
              <string>39acd9f7-c975-4787-b31e-714f748a51a2</string>
              <string>a8bd6f50-894f-443f-b248-da3ebad3a748</string>
              <string>3c355935-e639-4517-b3b1-42c6564387f8</string>
              <string>1e45f5ac-6815-40a8-8fe9-15e98eb1d07b</string>
              <string>e695a1d8-2bde-4da3-a9a8-8cd6f81ca3c0</string>
              <string>3d95de17-a2ea-446c-be4c-36c32d8cda1c</string>
              <string>205385d0-06be-4baa-b072-9b431c315827</string>
              <string>a8ebde5a-16cb-407e-a8b4-fa8766d26c73</string>
              <string>fdcb1121-0d49-4ed8-b1a1-4f4482e1c20a</string>
              <string>b1842d23-059a-4e7e-b447-3b5f5ccf5c3a</string>
              <string>8c5d3887-bd22-4018-aeda-45e5c0f8d551</string>
              <string>a127fffb-1663-4206-b6d3-348aa228c999</string>
              <string>d70fc7fa-2005-4fc7-9222-dc8119346c6e</string>
              <string>2a2ad8a5-b961-4f4c-ac09-8abee2097972</string>
              <string>143b10e0-e01b-4942-9995-2d3b9a165d76</string>
              <string>a574bc8d-e82e-4ec6-9430-f3a37278e356</string>
              <string>f6e27b4e-dbbd-48c9-994f-55c3ac511fb9</string>
              <string>6060b76d-07c2-4f9f-bc71-d2e8c44d8271</string>
              <string>08536fee-6f99-4cc4-8958-f84daaee73d5</string>
              <string>dccd5a80-a385-482e-97e4-69340bce4522</string>
              <string>bfa0bc00-9ee1-4ba5-99de-9e46faffed6d</string>
              <string>183b6833-a563-42cb-8d4d-cdcb740aef30</string>
              <string>652e2cab-f748-41b4-ae8f-f0aae48e1fca</string>
              <string>bd81709b-2ef0-4760-aba9-f455fb338f37</string>
              <string>633e9341-a80b-4c11-a6a3-1d3942bb1782</string>
              <string>695c7ed6-252e-4229-83db-5571946a8b62</string>
              <string>df3f9b9f-e8e7-47a9-a33d-c9ec7d7820fd</string>
              <string>895ee0ef-745c-464d-a46c-e51331a01c3f</string>
              <string>50dcf6de-46b4-4de5-99c2-d341abb8a41a</string>
              <string>5e411c40-61f8-467e-b132-78e54e0b5f81</string>
              <string>ed4ef090-3f7e-442d-ad30-744e3a1313f2</string>
              <string>ed3e52dc-3023-4cc7-8cad-47e0d5df89c1</string>
              <string>ec29c308-0bc3-4eb0-a948-09c2c0747afa</string>
              <string>aeaba1c0-cef9-4ad8-82d7-76d66cc95562</string>
              <string>58f42d4f-22e1-4f7c-8acf-93a9fe92619c</string>
              <string>7a21d8ac-5afa-45b8-b136-5def45d811b4</string>
              <string>23ea2137-37b1-4b00-9fb0-c8889cd4bc97</string>
              <string>2a33ffd6-253d-402f-8fb6-93bd94f65dcd</string>
              <string>7445aaa5-ff13-4c08-a8b1-817cfed2692b</string>
              <string>3d290a27-5daf-4bb0-b3d8-90c9bb8afaeb</string>
              <string>e07b74b9-756e-4ca2-8be9-01bf7abfd817</string>
              <string>3ba1448a-d0b7-4478-bc57-f9cb8dab6de9</string>
              <string>dcaf136d-a3b8-47ed-aec7-d1619675ba2d</string>
              <string>285faf0d-523a-4c8e-92ec-4a0f3a89e048</string>
              <string>3263ad34-c86d-4481-b19f-4cd3d0d83d62</string>
              <string>e1af2369-c57e-4850-bc30-f79b6fe9fa66</string>
              <string>28ddc4f3-a96b-47db-b0e0-bcfcd825f48a</string>
              <string>90bc60ed-14c6-49db-b1e6-bb70d2b1d01d</string>
              <string>fd6b9376-0847-49d7-96c6-15c540a8e39a</string>
              <string>7ee4a47d-bdf3-473d-9da9-3a62c41037b1</string>
              <string>167ee803-661a-4e6e-ac6e-b84c057f7ca1</string>
              <string>a40e7657-c37a-4fb6-aa79-48a2ea16709c</string>
              <string>5d5e5835-8cd3-43af-ac82-ffe57439bfb5</string>
              <string>47f248b1-72d5-47dc-b0b3-6aa387e9e5d6</string>
              <string>d7c3e640-7850-4d70-bb1c-3289674bd609</string>
              <string>ae961745-fe19-46bd-b240-c82888091366</string>
              <string>68581957-7fba-421f-b063-941a804fcc46</string>
              <string>0056a8aa-7aa5-4047-a693-21bac64470aa</string>
              <string>2a637fa3-fb83-4666-abe0-c754924ff738</string>
              <string>8a08c578-68dd-4550-b178-eee13ade011e</string>
              <string>d448196a-4282-4d10-8c9a-7f1dfd19abea</string>
              <string>05759809-cfbd-4546-8b71-fd28c2499763</string>
              <string>1c01997f-00d1-4e40-9e63-da5706137cdd</string>
              <string>881db416-1776-4ab6-a3ce-5065ed11cdb5</string>
              <string>982b29a5-1743-4435-8842-9810e4e34926</string>
              <string>fe1bdd5e-cce0-4509-a09a-3545b69d3d7a</string>
              <string>1bff9775-2de8-4b51-bb6b-6aaa29c144bb</string>
              <string>5e97d36f-68fe-412d-a1df-3a25a07e5770</string>
              <string>9316c229-da47-49f8-a2c0-398ba155d370</string>
              <string>20524120-844c-4733-ac8a-b01f0e14a12f</string>
              <string>55ebb133-1e4d-4172-8718-301240e9518f</string>
              <string>b0dec3c0-01ca-45a6-b826-707b80644dff</string>
              <string>d1dd4342-0ad4-42cc-b708-f47e8c6621f8</string>
              <string>20d94501-cd46-41ce-9bf1-e34639074d16</string>
              <string>492a7c6c-4768-45e2-9f49-6c5488b0a2e5</string>
              <string>9f67f48f-ca64-4419-9101-05c39d7634fd</string>
              <string>14a2ad40-95bb-4ac9-a10e-d326537cc5a6</string>
              <string>6aa39894-bc9b-448c-aac6-b6967a0ce243</string>
              <string>4108a56a-b1a6-4d8c-9e8e-b065654860d0</string>
              <string>bdb4241f-2858-49da-8d4e-2f1579679620</string>
              <string>d56da279-9aa2-4b33-8913-bf0f37a046a0</string>
              <string>692365a7-9ec6-4c38-adee-672f4084adf3</string>
              <string>3f433a3e-e46d-440a-82c1-5490ada6b54e</string>
              <string>4d223d2f-d247-47da-b6e6-6d25e8a73775</string>
              <string>4b7abf79-011a-428e-96c9-040696a2869b</string>
              <string>72471096-425b-4750-81a4-123fca2e302c</string>
              <string>3558a098-5cbc-4e05-ae03-80b4aad20e53</string>
              <string>4a05dc00-9ad6-454a-b61b-ddd074bbb36c</string>
              <string>9d1c136c-3c94-43c3-b0f8-1c1551ac6987</string>
              <string>b2fdd8c2-f387-493b-ab35-e7e9e8ce056a</string>
              <string>930a4c9e-b458-4edf-92ff-3be07d68c28d</string>
              <string>8e046241-74a3-44e0-9bf9-f0b73a36717d</string>
              <string>0f0df6c9-1153-4e0b-800b-533492ba936c</string>
              <string>f016be9d-205d-4cdd-b4fb-e7139700dd22</string>
              <string>0801e501-57ac-4418-ac59-08e0edadabf3</string>
              <string>2607531a-4f9b-48ed-9ef4-b1b71b880864</string>
              <string>455c536f-d3fb-4832-941e-ef230b683590</string>
              <string>31b37e0b-cfbf-4787-b5d3-2082328fafd7</string>
              <string>21e47d6b-9863-4045-82af-8941087a4da1</string>
              <string>9ef7f26f-d3f7-420d-a30f-26f948be596d</string>
              <string>b3869a86-7d4f-4a10-b116-24b758a191b3</string>
              <string>a6825055-e697-487f-9add-560ad9567a60</string>
              <string>f7552865-32a0-4b5b-a5fd-9b0bddffddf9</string>
              <string>9f2bcd3c-8a74-49f1-b910-aa05c509c9cb</string>
              <string>bd270438-7262-47f8-8656-1baf51287078</string>
              <string>61b10ef9-baef-45e2-b747-a0987d851033</string>
              <string>aa5ba1e6-ab11-4a9a-a03c-e0fe58b49086</string>
              <string>ec653b8b-7362-4167-98ff-3845c7560d11</string>
              <string>1710d009-1bb2-4db6-a8d8-1493e6802c18</string>
              <string>25c5fbce-cb87-4ba9-a572-0be49242a0b2</string>
              <string>13738349-4cc4-43de-9365-a27ead17b524</string>
              <string>a43f7553-71de-41d3-aa16-93cc7a48bafc</string>
              <string>e7b4b295-2b47-4b4f-97b9-b9a9082bffb1</string>
              <string>854f78f8-4ebc-4c99-9a05-c26015671807</string>
              <string>e1900e14-c2a2-426e-86f0-971353d60cdd</string>
              <string>fd3b93dd-8b65-4b9f-a090-09bc7ec9aa12</string>
              <string>72c5d63d-a405-4ccf-b85e-dba740b14fdd</string>
              <string>f6efe381-7851-4bec-96c3-231b7baf666f</string>
              <string>2f3b524c-9d7b-43f7-b4ce-e84d27cc82ff</string>
              <string>99066deb-0d43-44f6-8823-b8cfe08e7185</string>
              <string>aa30f2b5-64cf-4396-b098-efeecb2224f2</string>
              <string>9fee4e0a-7a6d-4925-bc78-59df2c1f28af</string>
              <string>d23d6225-1145-484e-8164-f070fa1f2e8c</string>
              <string>57953b24-64cb-489d-9706-bf5dc1ef94ea</string>
              <string>08955a01-dda6-468b-a8cf-73586fe7d99f</string>
              <string>52d0a715-1be1-4fb2-8f3d-448c89c148f8</string>
              <string>4941f2fb-e641-4e0a-aba4-633ddf410760</string>
              <string>470c6c09-6850-4770-820c-bbfce54196bd</string>
              <string>21a820f0-205a-4046-8c4a-3788daca4d05</string>
              <string>5cee4e54-225f-43e4-830c-6dc3fb2826f2</string>
              <string>99643fbc-fa46-4c38-a7db-ac72833847f1</string>
              <string>9a44798a-871f-4402-9397-75241b18c6b0</string>
              <string>f1e2a84e-89e2-4ea0-8edd-4418f11b7eb7</string>
              <string>fe6275f5-4efa-4c86-90e2-8788c4f9c975</string>
              <string>081454ce-e155-45a1-bfc0-2297d6317259</string>
              <string>8b61cf50-9d95-43dd-b6ab-474e2a1d2d76</string>
              <string>5b245873-9491-4fa3-9bce-08c111cbe04f</string>
              <string>4041500f-7768-4011-b273-13fe61a2ebd6</string>
              <string>eaf28278-dd66-4bcc-b7e7-9a6c422db1ee</string>
              <string>0e0f63c0-5b51-4626-9a50-c0e2f5f94d37</string>
              <string>337347d0-d5f6-492c-9dc3-638a211132ff</string>
              <string>f836f593-4c61-49bd-be13-4cb3f9c6cffb</string>
              <string>0fec52ca-be59-47c9-85b1-700dc3b3dc2e</string>
              <string>a42ba030-2419-490c-8843-889e4197cf83</string>
              <string>4d75bdd7-6d1f-4db5-a7f8-4f63efa13197</string>
              <string>53d49d46-bd95-4ce5-8f98-7685217fedbf</string>
              <string>49a7b526-0577-4811-98c2-185bb6c22d91</string>
              <string>f8b35221-21af-4a86-9a4a-1b5657b5a029</string>
              <string>2f88fefe-6f80-46b6-a20a-04c29532073e</string>
              <string>8c637e01-95b0-4b11-a28f-4518b7f8d1ae</string>
              <string>7f5da166-70b8-48e0-9fa9-cf96fd867c30</string>
              <string>e3d85e42-6410-459f-95fc-2f98af8c0db9</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>bc768cd6-d735-40b1-9617-a3417481fe19</id>
                <name>Convert CSV to JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884963</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} csv - CSV string with column headers
	@return {String} return JSON object using column headers and field keys
*/
function convertCsvToJson(csv) {
	var textXML = SerializerFactory.getSerializer(&apos;DELIMITED&apos;).toXML(csv);
	var xml = new XML(textXML);
	var dataItems = [];
	for (var i = 1; i &lt;= xml[&apos;row&apos;].length() - 1; i++) {
		var jsonData = {};
		for (var j = 1; j &lt;= xml[&apos;row&apos;][0].children().length(); j++) {
			var column = &apos;column&apos; + j.toString();
			var header = xml[&apos;row&apos;][0][column].toString().replace(/\s/g, &apos;_&apos;).replace(/-/g, &apos;_&apos;).toLowerCase();
			var value = xml[&apos;row&apos;][i][column].toString();
			
			jsonData[header] = value;
			
		}
		dataItems.push(jsonData);
	}

	return JSON.stringify(dataItems);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>537d816c-81ff-4507-85c6-85e28b8c546c</id>
                <name>Convert JSON to CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885050</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts JSON to CSV.
**/
/*	@param {String} jsonData - JSON string with [0] index key as headers for csv
	@return {String} return csv
*/	

function convertJsonToCsv(data) {
	try{
		var json = JSON.parse(data);	
		var fields = Object.keys(json[0])
		var replacer = function(key, value) { return value === null ? &apos;&apos; : value } 
		var csv = json.map(function(row){
		  return fields.map(function(fieldName){
		    return JSON.stringify(row[fieldName], replacer)
		  }).join(&apos;,&apos;)
		})
		csv.unshift(fields.join(&apos;,&apos;)) // add header column
		csv = csv.join(&apos;\r\n&apos;);
		return csv;
	}catch(error){
		return error;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>ff3df0b8-cfa2-4ec9-82ac-37c9e4830e0c</id>
                <name>Generic - Send message to channel destination</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function sendMessageToChannelDestination(channelID, destinationID, map, data) {
	var msgMap;
	var outData = {};
	
	if (!map) {
		msgMap = Maps.map();
	} else {
		msgMap = Maps.map(map);
	}

	if (data == null || data == undefined) {
		data = &apos;&apos;;
	}

	if (msgMap.get(&apos;sourceChannelId&apos;) == null) {
		msgMap.add(&apos;sourceChannelId&apos;, channelId);
	}
	if (msgMap.get(&apos;sourceChannelName&apos;) == null) {
		msgMap.add(&apos;sourceChannelName&apos;, channelName);
	}

	// Dirty way to handle connector message not being defined. Handles cases where this function 
	// is used in a source js writer.
	try {
		if (msgMap.get(&apos;sourceMessageId&apos;) == null &amp;&amp; connectorMessage &amp;&amp; connectorMessage.getMessageId()) {
			msgMap.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString());
		}
	} catch(ex) {}

	var msgRequest = new RawMessage(data, [destinationID], msgMap);
	var msgResponse = router.routeMessageByChannelId(channelID, msgRequest);

	if (msgResponse == null) {
		// return;
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;; 
	}
	if (msgResponse.getStatus() == null) {
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;;
	}

	if (msgResponse.getStatus() == &apos;ERROR&apos;) {
		throw msgResponse.getMessage();
	}

	return msgResponse.getMessage();
	
	
	// var msgResponse;

	/*
	try {
		msgResponse = router.routeMessageByChannelId(channelID, msgRequest);
		outData.status = &apos;success&apos;;
		outData.status_message = &apos;message successfully sent to channel&apos;;
	} catch (ex) {
		outData.status = &apos;error&apos;;
		outData.status_message = ex.toString();
		return outData;
	}

	if (msgResponse.getStatus() == null) {
		outData.response_status = &apos;unknown&apos;;
		logger.error(&apos;Code Template &quot;Send message to channel by id&quot;: channel &quot;&apos; + ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;);
	}
	
	switch (String(msgResponse.getStatus())) {
		case &apos;ERROR&apos;:
			outData.response_status = &apos;error&apos;;
			break;
		case &apos;FILTERED&apos;:
			outData.response_status = &apos;filtered&apos;;
			break;
		case &apos;QUEUED&apos;:
			outData.response_status = &apos;queued&apos;;
			break;
		case &apos;RECEIVED&apos;:
			outData.response_status = &apos;received&apos;;
			break;
		case &apos;SENT&apos;:
			outData.response_status = &apos;sent&apos;;
			break;
	}

	outData.response_message = msgResponse.getMessage();

	return outData;
	*/
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>f4cd9e71-4f8d-4472-80a9-31b533f4d578</id>
                <name>Get bots DB connection to specified environment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884906</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get a new bots database connection. Be sure to wrap in try/finally block to close database connection.

	@param {String} environment - prod, staging, dev, local
	@return {String} return database connection
*/
function GetBotsDBConnection() {
	var username = configurationMap.get(&apos;bots-db-user&apos;);
	var password = configurationMap.get(&apos;bots-db-pass&apos;);
	var uri = configurationMap.get(&apos;bots-db-uri&apos;);	
	return DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, uri, username, password);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>554bd282-172b-43a0-8902-992baf63b04d</id>
                <name>Get DB connection to specified environment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885107</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get a new database connection. 

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetDBConnection(environment) {
	if (environment != &apos;prod&apos; &amp;&amp; environment != &apos;staging&apos; &amp;&amp; environment != &apos;dev&apos; &amp;&amp; environment != &apos;local&apos;) {
		return null;
	}
	
	var username = configurationMap.get(&apos;docsink-db-user-&apos; + environment);
	var password = configurationMap.get(&apos;docsink-db-pass-&apos; + environment);
	var uri = configurationMap.get(&apos;docsink-db-uri-&apos; + environment);

	return DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.cj.jdbc.Driver&apos;, uri, username, password);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>552a87ed-b5a0-4546-9e5c-0a768661a351</id>
                <name>Postprocessor - Generate channel response</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884842</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function generateChannelResponse() {
	// This script executes once after a message has been processed
	// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
	
	var destinations = sourceMap.get(&apos;destinationSet&apos;);
	var metadataIds = destinations.toArray();
	
	if (metadataIds.length == 0) {
		return ResponseFactory.getErrorResponse(&apos;invalid request&apos;);
	}
	
	var smsg = message.getConnectorMessages().get(0);
	if (smsg.getStatus() == &apos;ERROR&apos;) {
		if (smsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(smsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(smsg.getResponseData().getMessage());
	}
	
	var metadataID = metadataIds[0];
	var cmsg = message.getConnectorMessages().get(metadataID);

	if (cmsg.getStatus() == &apos;ERROR&apos;) {
		if (cmsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(cmsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;SENT&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;FILTERED&apos;) {
		return ResponseFactory.getFilteredResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;QUEUED&apos;) {
		return ResponseFactory.getQueuedResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;RECEIVED&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else {
		return cmsg;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
            <name>WebPT-Common</name>
            <revision>2</revision>
            <lastModified>
              <time>1678715257049</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
                <name>Check if String contains</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122790</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
                <name>Check if String contains HTTP code</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122593</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>8515e088-5c50-47ee-9e2f-9fad1ecf48bd</id>
                <name>Check if String is JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123309</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Added by Kirby Knight
	12/21/2020
	Test for JSON

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5f2f84ba-3e66-4be3-8260-8fbd8258bd92</id>
                <name>Check if the PDF is valid</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122055</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
//This function is used for checking the word &quot;PDF&quot; in inbound attachment.
function isValidBase64PDF(base64) {
	const ENCODED_PDF_SIGN = &quot;JVBERi&quot;; // %PDF sign
	const PDF_EOF = &quot;JSVFT0YNCg&quot;; // %EOF
	var pdfBase64Size = (base64.length() * (3 / 4)) - 1;
	
	return (base64.indexOf(ENCODED_PDF_SIGN) != -1 &amp;&amp; base64.indexOf(PDF_EOF) != -1 &amp;&amp; pdf_base64_size &gt; 36);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
                <name>Convert JSON date to HL7v2 date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122137</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
                <name>Convert JSON datetime to HL7v2 datetime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122430</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>bb21449a-df39-48c6-be52-24106c8df4c4</id>
                <name>Destination Formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Kirby Knight 03/10/2021
	
	This function will remove all other ROOT.Meta.Destinations nodes that are not passed in the
	destination variable and removes the ROOT.Meta.Destinations[x].Destination node

	@param {Any} destination - 
	@return {String} return description
*/
function formatDestinations(destination) {
var arrDestinations = msg[&apos;Meta&apos;][&apos;Destinations&apos;];
	//  Start at the end of the array because of the posibility of deleted array items 
	for (var i = arrDestinations.length - 1; i &gt;= 0; i--) {
		if (arrDestinations[i][&apos;Destination&apos;] == destination){
			delete arrDestinations[i][&apos;Destination&apos;]
		}else if (arrDestinations[i][&apos;Destination&apos;] != destination){
			arrDestinations.splice(i, 1);
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
                <name>Extract JSON node data</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121748</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7ed44f8a-fa40-4f3e-9426-3021604eabe0</id>
                <name>Get Feature Value by Name and Database</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123262</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns a string containing the feature value (system property) for a specific client database.

	@param {String} featureName - name of the feature, ie: &quot;BetterPTBidirectionalScheduling&quot;
	@param {String} databaseIdentifier - database name or databaseID / TenantID
	@param {String} databaseIdentifierType - what value is provided in databaseIdentifier. current options include &quot;ID&quot; or &quot;NAME&quot;
	@return {String} returns feature value
*/
function getFeatureValueByNameDatabase(featureName, databaseIdentifier, databaseIdentifierType) {
	var paramList = new Packages.java.util.ArrayList();
	paramList.add(featureName);
	paramList.add(databaseIdentifier);
	paramList.add(databaseIdentifierType);
	
	var sSQL = &apos;EXEC [dbo].[pr_FeatureValueByNameDatabase] ?, ?, ?&apos;;
	
	try {
		var result = executeSharedDBStatementFhirCh(sSQL, true, paramList);
		var featureValue ;
		if(result.next()){			//Added
		 featureValue = result.getString(1);
		}
		return featureValue;
	} catch (e) {
		logger.error(e);
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>9842be2c-c633-42ac-87f1-f91aca9e370f</id>
                <name>JSON Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121776</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function populates the MR and PI patient IDS to channelMap

	@return {String} return description
*/
function jsonPatientIds() {
	for each (patId in msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) {
	if (patId[&apos;IDType&apos;].toString() == &apos;MR&apos;){
		channelMap.put(&apos;extPatId&apos;, patId[&apos;ID&apos;].toString());
	}else if(patId[&apos;IDType&apos;].toString() == &apos;PI&apos;){
		channelMap.put(&apos;patId&apos;, patId[&apos;ID&apos;].toString());
	}
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
                <name>Verify JSON node for existance</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>394664c0-d536-4310-970e-181dc03ee7da</id>
            <name>WebPT-Conversions</name>
            <revision>2</revision>
            <lastModified>
              <time>1690140133427</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
                <name>Convert FHIR codes to HL7v2 codes</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122899</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>2fc8cbf3-0d92-4d1d-a3d6-136c09bd9f2a</id>
            <name>WebPT-Custom Database Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1703964939898</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>23c0b510-63e4-40fa-a4e1-7b2b92ce9a96</id>
                <name>Execute Statement Shared DB Conn clientDb Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122401</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Executes a SQL statement using a shared database connection stored in the Global Map. If the
connection does not exist, creates it.

@param {String} statement - The SQL statement to execute
@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
@param {List} paramList - A Java List object containing the parameters for the statement (optional)
 */
function executeSharedDBStatementclientDbCh(statement, isQuery, paramList) {
    var result;

    try {
        var dbConnclientDbCh = globalChannelMap.get(&quot;dbConnclientDbCh&quot;);

        if (dbConnclientDbCh == null || dbConnclientDbCh.getConnection().isClosed()) {
            dbConnclientDbCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;), $(&apos;dbClient&apos;), $(&apos;dbUserFhir&apos;), $(&apos;dbPwFhir&apos;));
            globalChannelMap.put(&quot;dbConnclientDbCh&quot;, dbConnclientDbCh);
        }

        if (paramList == undefined) {
            paramList = new Packages.java.util.ArrayList();
        }

        if (isQuery) {
            result = dbConnclientDbCh.executeCachedQuery(statement, paramList);
        } else {
            result = dbConnclientDbCh.executeUpdate(statement, paramList);
        }
    } catch (e) {
        logger.error(e);
    }
    finally {
        return result;
    }
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>4efb3110-a83f-48b5-93ad-79c847b51865</id>
                <name>Execute Statement Shared DB Conn clntAcl Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123455</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClntAclCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnClntAclCh = globalChannelMap.get(&quot;dbConnClntAclCh&quot;);

		if (dbConnClntAclCh == null || dbConnClntAclCh.getConnection().isClosed())
		{
			dbConnClntAclCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbClntAcl&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnClntAclCh&quot;, dbConnClntAclCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnClntAclCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnClntAclCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>d96d45dd-57f7-4aa9-9bf4-e464d31b94c6</id>
                <name>Execute Statement Shared DB Conn FHIR</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121922</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhir(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhir.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhir.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6014068e-c021-4a38-9fa6-6f38f6a2cdab</id>
                <name>Execute Statement Shared DB Conn FHIR Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123492</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhirCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhirCh = globalChannelMap.get(&quot;dbConnFhirCh&quot;);

		if (dbConnFhirCh == null || dbConnFhirCh.getConnection().isClosed())
		{
			dbConnFhirCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnFhirCh&quot;, dbConnFhirCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhirCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhirCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fbd5c4a1-b816-4496-acdf-067005f1d376</id>
                <name>Execute Statement Shared DB Conn Translations Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123008</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementTranslationsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnTranslationsCh = globalChannelMap.get(&quot;dbConnTranslationsCh&quot;);

		if (dbConnTranslationsCh == null || dbConnTranslationsCh.getConnection().isClosed())
		{
			dbConnTranslationsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlTranslations&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnTranslationsCh&quot;, dbConnTranslationsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnTranslationsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnTranslationsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5d1a5577-4ba4-4d1e-b6cd-e2d924164909</id>
                <name>Execute Statement with Shared DB Conn ODS Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122280</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdsCh = globalChannelMap.get(&quot;dbConnOdsCh&quot;);

		if (dbConnOdsCh == null || dbConnOdsCh.getConnection().isClosed())
		{
			dbConnOdsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOds&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdsCh&quot;, dbConnOdsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>3991db14-0c0b-4123-952c-5164c1ded501</id>
                <name>Execute Statement with Shared DB Conn ODW Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122960</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.  THis connects to the ODW db in Azure

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdwCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdwCh = globalChannelMap.get(&quot;dbConnOdwCh&quot;);

		if (dbConnOdwCh == null || dbConnOdwCh.getConnection().isClosed())
		{
			dbConnOdwCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOdw&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdwCh&quot;, dbConnOdwCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdwCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdwCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fae08c88-7550-479a-b8ed-ffef47e8eed9</id>
                <name>executeSharedDBStatementClient</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121956</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClient(statement, isQuery, paramList, dbname)
{
	var result;
 	var dburl= &apos;jdbc:sqlserver://AZW1DEV-SQL02.clinicient.com:1433;databaseName=&apos;+dbname+&apos;&apos;;
	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),dburl,$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			
			//globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		result = dbConnFhir.executeCachedQuery(statement);
	
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>ed20a457-5beb-4aea-9bb9-cf91112ccc56</id>
            <name>WebPT-Default Functions</name>
            <revision>10</revision>
            <lastModified>
              <time>1690140133487</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>a8a9a0c8-9322-46dc-bef8-011eb3d70291</id>
                <name>Create Header for CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121678</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This creates a header for csv files based on the contents of the header variable.  The header
	variable is populated in the channel from the outbound msg template

	@return {String} return description
*/
function createHeader() {
	//Destination transformer.  this creates the header for each new file

	var path = java.nio.file.Paths.get($(&apos;filePath&apos;)+$(&apos;fileName&apos;));
	var bytes = (new java.lang.String($(&apos;header&apos;))).getBytes(&quot;UTF-8&quot;);
	try {
	  java.nio.file.Files.write(path, bytes, java.nio.file.StandardOpenOption.CREATE_NEW);
	}
	catch (e) {
	  //logger.info(&quot; should throw IOException if file already exists&quot;);
	
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5a886a1f-dab1-41b5-94c6-1a639907d7da</id>
                <name>Filter Message Evaluate Received Checksum</name>
                <revision>33</revision>
                <lastModified>
                  <time>1678916806664</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating a checksum for each provided message.  We save off the most recent 100 unique checksum values in a global 
	array so if the current message has been recently received we are able to ignore it.
	
	@author:  	Jeffrey Ritz
	@scriptName: 	filterEvaluateReceivedChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {boolean} filter - return filter boolean (true= filter msg, false= do not filter msg)
		persist received_checksum global ChannelMap array
		persist filterMessage ChannelMap variable
	@history
*/
function filterEvaluateReceivedChecksum(msg) {	

	var scriptName= &apos;filterEvaluateReceivedChecksum&apos;
	var filter = false;
	var received_len_limit = 999;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B connectorMessage.getRawData() typeof: &apos;+typeof(connectorMessage.getRawData())+&apos; msg: &apos;+connectorMessage.getRawData());
	} // end if 
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	// var dataBytes = new java.lang.String(connectorMessage.getRawData()).getBytes(&apos;UTF-8&apos;);
	// message = new String(message.getBytes(&quot;utf-8&quot;), &quot;utf-8&quot;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	// var dataBytes = new java.lang.String(msg.getBytes(&apos;UTF-8&apos;));
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);

	// var messageObjectgetBytes= checksum.update(connectorMessage.getRawData().getBytes());
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 
	
	$c(&apos;checksum&apos;, checksum.getValue());
	
	//grab the global channel map variable holding the last X unique checksums that we&apos;ve received
	var received = $gc(&apos;received_checksums&apos;);
	
	if (received == undefined) {
		var received = new Array();
		received.push(checksum.getValue());
	} else {
		//check if we&apos;ve recently received this message, skip it if so
		if (received.indexOf(checksum.getValue()) &gt; -1) {
			filter = true;
		//we haven&apos;t seen it recently, so remember it and allow it through
		} else {
			var received_len = received.length;
			if (received_len &gt; received_len_limit) {
				//remove oldest/first entry, shift all entries forward, and add new entry to end
				received.shift();
				received[received_len_limit] = checksum.getValue();
			} else {
				//add new entry to end of array
				received[received_len] = checksum.getValue();
			} // end if 
		} // end if 
	} // end if 

	 //debug code
	/*for (x=0; x&lt;=received_len_limit; x++) {
		$c(&apos;received-&apos;+x, received[x]);
	} */

	$c(&apos;filterMessage&apos;,filter);
	$gc(&apos;received_checksums&apos;,received);

	return filter;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fbd0484d-74a2-48e4-aedd-f97c2fcefa16</id>
                <name>Get Message Checksum</name>
                <revision>12</revision>
                <lastModified>
                  <time>1678916806703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating and reutrning a checksum for each provided message
	
	@author:  	Jeffrey Ritz
	@scriptName: 	getMessageChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {object} result - return checksum value
	@history
	2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() to remove the exponential representation of the number value
*/
function getMessageChecksum(msg) {	

	var scriptName= &apos;getMessageChecksum&apos;;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	} // end if 
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 

	var checksumValue= checksum.getValue();
	// 2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() 
	var arrChecksumValue= new Array(); 
	arrChecksumValue.push(checksumValue);
	$c(&apos;checksum&apos;, arrChecksumValue);

	return checksumValue;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>91db9bd1-ca92-4dcc-bba4-e1ece603fc87</id>
                <name>Remove Child Object From Parent Object Json</name>
                <revision>22</revision>
                <lastModified>
                  <time>1678916845037</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON child object and it&apos;s descendents from a parent object JSON
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeChildObjectFromParentObjectJson.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
		{string} parentObject - place the name of the string to be designated as the parent object in the JSON
		{string} childObject  - place the name of the string to be designated as the child object to be deleted from the JSON
	@param {object} msg - return modified Json object msg excluding specified Json child object
	@history
*/
function removeChildObjectFromParentObjectJson(msg, parentObject, childObject) {
	
	var scriptName= &apos;removeChildObjectFromParentObjectJson&apos;;
	var debug= 0;

	//var strObjJson= JSON.parse(msg);
	var strObjJson= JSON.stringify(msg);
	
	//var objJson= JSON.parse(msg);
	var newParentObjects= new Object();
	var parentObjects= msg;
	var arrParentObjects= new Array();
	var arrTransactionObjects= new Array();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof parentObjects: &apos;+typeof(parentObjects));
	for (var key in parentObjects) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof key: &apos;+typeof(key)+&apos; key: &apos;+key);
		if(key== parentObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof objJson[key]: &apos;+typeof(parentObjects[key])+&apos; parentObjects[key]: &apos;+JSON.stringify(parentObjects[key]));
			
			var newChildObjects= new Object();
			var childObjects= parentObjects[key];
			var arrChildObjects= new Array();
			
			for(var key2 in childObjects) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key2: &apos;+typeof(key2)+&apos; key2: &apos;+key2+&apos; childObject: &apos;+childObject);
				for(var key3 in childObjects[key2]) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key3: &apos;+typeof(key3)+&apos; key3: &apos;+key3+&apos; childObject: &apos;+childObject);
					if(key3== childObject) {
						var transactionObject= new Object();
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; childObject typeof: &apos;+typeof(childObjects[key2][key3])+&apos; childObject: &apos;+JSON.stringify(childObjects[key2][key3]));
						transactionObject.key= key3;
						transactionObject.value= childObjects[key2][key3];
						delete childObjects[key2][key3];
						if(debug&gt;0) logger.info(&apos;DEBUG::&apos;+scriptName+&apos; DELETE childObject: &apos;+key3+&apos; of parentObject: &apos;+JSON.stringify(childObjects[key2]));
						arrTransactionObjects.push(transactionObject);
					} // end if
				} // end for 
				arrChildObjects.push(childObjects[key2]);
			} // end for
			newParentObjects[key]= arrChildObjects;
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add all child keys: &apos;+JSON.stringify(arrChildObjects)+&apos; into ParentObject[&apos;+key+&apos;]: &apos;+newParentObjects[key]);
		} else {
			newParentObjects[key]= parentObjects[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+parentObjects[key]+&apos; string: &apos;+JSON.stringify(parentObjects[key]));
		} // end if
		arrParentObjects.push(newParentObjects);
	} // end for 
	var newMsg= arrParentObjects;
	channelMap.put(&apos;removeChildObjectMsg&apos;,newMsg);
	channelMap.put(&apos;removedChildTransIds&apos;,arrTransactionObjects);
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));
	return newMsg;
	
} </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2ff28338-dfb6-445d-a04e-c74b5486a08c</id>
                <name>Remove Object From Json</name>
                <revision>26</revision>
                <lastModified>
                  <time>1703964988318</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  Desc: This function will remove a JSON object and it&apos;s descendents from the msg
	
	fileName: 	removeObjectFromJson.js
	name:		Remove Object From Json	
	Authored:  	Jeffrey Ritz
	Created: 		2023-03-09
	Details:
		@param IN {string} msg - provide parent JSON object (i.e. Inbound connectorMessage.getRawData() - msg)
		@param IN {string} removeObject - provide JSON object to evaluate and remove from parent JSON object (msg)
		OUT (object) newMsg - return JSON object from processing
	@history
	2023-03-15 JER - Modified to include removeObject function parameter to specify specific JSON object by referencing key to be removed
*/
function removeObjectFromJson(msg, removeObject) {
	
	var scriptName= &apos;removeObjectFromJson&apos;;
	var debug= 0;
	//var objJson= JSON.stringify(msg);
	var objJson= JSON.parse(msg);
	var newObjJson= new Object();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof objJson: &apos;+typeof(objJson)+&apos; objJSON: &apos;+JSON.stringify(objJson));
	for (var key in objJson) {
		if(key== removeObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; DELETE key: &apos;+key);
			// delete objJson[key];
		} else {
			newObjJson[key]= objJson[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+objJson[key]+&apos; string: &apos;+JSON.stringify(objJson[key]));
		} // end if 
	} // end for 
	var newMsg= newObjJson;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));

	// return JSON.stringify(newMsg);
	return newMsg;
} 
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>993a6fd8-454a-4133-ba32-dbcfea71582b</id>
                <name>Update EDITransactionLog</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123233</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	The purpose of this function is to update the status in Insight.
	Populate the channel map with the following variables functionalGroupControlNumber, status, eventDate

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateStatus () {

	//  Build the llst of paramters to pass to the database
	var paramList = new Packages.java.util.ArrayList();
	paramList.add($(&apos;functionalGroupControlNumber&apos;));
	paramList.add($(&apos;eventDate&apos;));  //dateTime in the acknoledged field in this format (&quot;2017-07-31 14:15:01.577&quot;)
	paramList.add(new java.lang.Integer(parseInt($(&apos;status&apos;), 10)));
	
//	logger.info(&quot;updateStatus &quot;+paramList);

	//  SQL Statement and paramters that will be sent to SQL
	var statement = &quot;EXEC dbo.pr_EDITransactionLog_Update ?, ?, ?&quot;;
	//  Code template used for establishiing connection and passing the sql statement and parameter list  
	var result = executeSharedDBStatementFhirCh(statement, false, paramList);
	return result;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>42cb290e-5fb0-46b8-82db-576ea1e1ba0d</id>
                <name>Update EDITransactionLog from responseStatus in the response transformer </name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123356</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Call this in the response transformer on the destination.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateReponseStatus() {
	var status = 0;
	if (responseStatus == SENT){
		var status = 1;
		channelMap.put(&apos;status&apos;,status);
	}

updateStatus()
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2223579b-f914-4be7-a575-f1a2a2aa1ae2</id>
                <name>ValidateToString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123044</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} mapping - 
	@param {Any} defaultValue - 
	@param {Any} replacement - 
	@return {String} return description
*/
function validateToString(mapping, defaultValue, replacement) {
    if (mapping == null) {
        mapping = &apos;&apos;;
    }
    return validate(mapping, defaultValue, replacement).toString() + &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>8c9a8268-4ef0-43e9-ae5b-bf8895f0b80c</id>
            <name>WebPT-FORMAT</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939902</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>Include any functions or codes with 
-date &amp; time formating related
-data type formatting</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>920c9ead-70a6-4168-9d95-89261b73ae44</id>
                <name>12digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123520</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Take any 12 digit string yyyyMMddHHmm and change to MM/dd/yyyy HH:mm 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm
*/
function yyyyMMddHHmm(string) {
	return DateUtil.convertDate(&quot;yyyyMMddHHmm&quot;, &quot;MM/dd/yyyy HH:mm&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fe2689ec-1946-46d5-8dd6-8fbbf106e1e6</id>
                <name>14digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122871</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Take 14 digit string yyyyMMddHHmmss and change to MM/dd/yyyy HH:mm:ss 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm:ss
*/
function yyyyMMddHHmmss(string) {
	if (string.length == 14) {
		  return DateUtil.convertDate(&quot;yyyyMMddHHmmss&quot;, &quot;MM/dd/yyyy HH:mm:ss&quot;, string);
	}
	else {
		return &quot;unregcognized string&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>b9db35e2-d5bd-48a1-8cc6-3475c698d7b4</id>
                <name>currentDT_yyyy-MM-dd HH:mm:ss.SSS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123114</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Kirby Knight
	Date Modified:  11/09/2020
	Retund the current date/time down to the millisecond

	@return {String} return description
*/
function currentDtToMilliseconds() {
	return DateUtil.getCurrentDate(&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7e747999-4bec-43fc-978d-7049d3543cf0</id>
                <name>fixHL7NodeOrder</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/

function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>dfedacf6-773b-413e-b78d-1bf16a92071d</id>
                <name>formatHL7Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121643</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Take any eight digit HL7 message data string (yyyyMMdd) and formats it human-readable format (MM/dd/yyyy)
	such as 20090612 -&gt; 06/12/2009

	@param {String} arg1 - 8 digit HL7 message data string yyyyMMdd
	@return {String} return date format as MM/dd/yyyy
*/
function formatHL7Date(string) {
	return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;MM/dd/yyyy&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>a8f54921-2cb6-4134-8806-3c4e10a757d9</id>
                <name>getCurrentLocalTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122014</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = getCurrentLocalTimestamp();

	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestamp() {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(&quot;EST&quot;)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6c5f1bd8-ebbf-4c8e-b465-0be8ccaba0d0</id>
                <name>getCurrentLocalTimeToMs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123077</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	Gets the current local date/time to the milliseconds
	Converts to the timezone that is passed in Examples (America/New_York, America/Chicago, America/Phoenix )

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestampToMs(timeZone) {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timeZone)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>78d74c5b-c881-404a-ad96-4e909e1a19f3</id>
                <name>phoneToE164</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121982</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Insight phone number to E164 format 5554446666 to +15554446666

	@param {Any} phoneIn - 
	@return {String} return description
*/
function phoneToE164(phoneIn) {
	logger.info(&apos;L1 &apos;+phoneIn);
	if(phoneIn != null ){
	//phoneIn = &apos;+1&apos; + phoneIn.toString(); 
	logger.info(&apos;L2 &apos;+phoneIn);
	return &apos;+1&apos; + phoneIn.toString(); 
	} else{
		return null;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>6a32d94d-408c-4e10-9799-e45e150b5c1f</id>
            <name>WebPT-MISC</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939909</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>miscellaneous javascript</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>84b4f1c7-f82d-4140-9fbd-98a95f68ff32</id>
                <name>getChannelState</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122648</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetChannelState(channel_id) {

    var channel_status = &quot;NA&quot;;

    var channel_count = parseInt(Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().size());

    for(var i=0;i&lt;channel_count;i++) {
        if (channel_id == Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getChannelId()) {
            channel_status = Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getState();
        }
    }

    return channel_status;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>715435a9-cb15-4e8f-bc5b-4249eaea6e17</id>
                <name>momentjs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122487</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Testing MIRTH-3794 using external JavaScript library &quot;moment.js&quot;
*/
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=b():&quot;function&quot;==typeof define&amp;&amp;define.amd?define(b):a.moment=b()}(this,function(){&quot;use strict&quot;;function a(){return Hc.apply(null,arguments)}function b(a){Hc=a}function c(a){return&quot;[object Array]&quot;===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||&quot;[object Date]&quot;===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c&lt;a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&amp;&amp;(a[c]=b[c]);return f(b,&quot;toString&quot;)&amp;&amp;(a.toString=b.toString),f(b,&quot;valueOf&quot;)&amp;&amp;(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ca(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&amp;&amp;(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow&lt;0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&amp;&amp;(a._isValid=a._isValid&amp;&amp;0===b.charsLeftOver&amp;&amp;0===b.unusedTokens.length&amp;&amp;void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if(&quot;undefined&quot;!=typeof b._isAMomentObject&amp;&amp;(a._isAMomentObject=b._isAMomentObject),&quot;undefined&quot;!=typeof b._i&amp;&amp;(a._i=b._i),&quot;undefined&quot;!=typeof b._f&amp;&amp;(a._f=b._f),&quot;undefined&quot;!=typeof b._l&amp;&amp;(a._l=b._l),&quot;undefined&quot;!=typeof b._strict&amp;&amp;(a._strict=b._strict),&quot;undefined&quot;!=typeof b._tzm&amp;&amp;(a._tzm=b._tzm),&quot;undefined&quot;!=typeof b._isUTC&amp;&amp;(a._isUTC=b._isUTC),&quot;undefined&quot;!=typeof b._offset&amp;&amp;(a._offset=b._offset),&quot;undefined&quot;!=typeof b._pf&amp;&amp;(a._pf=j(b)),&quot;undefined&quot;!=typeof b._locale&amp;&amp;(a._locale=b._locale),Jc.length&gt;0)for(c in Jc)d=Jc[c],e=b[d],&quot;undefined&quot;!=typeof e&amp;&amp;(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),Kc===!1&amp;&amp;(Kc=!0,a.updateOffset(this),Kc=!1)}function o(a){return a instanceof n||null!=a&amp;&amp;null!=a._isAMomentObject}function p(a){return 0&gt;a?Math.ceil(a):Math.floor(a)}function q(a){var b=+a,c=0;return 0!==b&amp;&amp;isFinite(b)&amp;&amp;(c=p(b)),c}function r(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e&gt;d;d++)(c&amp;&amp;a[d]!==b[d]||!c&amp;&amp;q(a[d])!==q(b[d]))&amp;&amp;g++;return g+f}function s(){}function t(a){return a?a.toLowerCase().replace(&quot;_&quot;,&quot;-&quot;):a}function u(a){for(var b,c,d,e,f=0;f&lt;a.length;){for(e=t(a[f]).split(&quot;-&quot;),b=e.length,c=t(a[f+1]),c=c?c.split(&quot;-&quot;):null;b&gt;0;){if(d=v(e.slice(0,b).join(&quot;-&quot;)))return d;if(c&amp;&amp;c.length&gt;=b&amp;&amp;r(e,c,!0)&gt;=b-1)break;b--}f++}return null}function v(a){var b=null;if(!Lc[a]&amp;&amp;&quot;undefined&quot;!=typeof module&amp;&amp;module&amp;&amp;module.exports)try{b=Ic._abbr,require(&quot;./locale/&quot;+a),w(b)}catch(c){}return Lc[a]}function w(a,b){var c;return a&amp;&amp;(c=&quot;undefined&quot;==typeof b?y(a):x(a,b),c&amp;&amp;(Ic=c)),Ic._abbr}function x(a,b){return null!==b?(b.abbr=a,Lc[a]=Lc[a]||new s,Lc[a].set(b),w(a),Lc[a]):(delete Lc[a],null)}function y(a){var b;if(a&amp;&amp;a._locale&amp;&amp;a._locale._abbr&amp;&amp;(a=a._locale._abbr),!a)return Ic;if(!c(a)){if(b=v(a))return b;a=[a]}return u(a)}function z(a,b){var c=a.toLowerCase();Mc[c]=Mc[c+&quot;s&quot;]=Mc[b]=a}function A(a){return&quot;string&quot;==typeof a?Mc[a]||Mc[a.toLowerCase()]:void 0}function B(a){var b,c,d={};for(c in a)f(a,c)&amp;&amp;(b=A(c),b&amp;&amp;(d[b]=a[c]));return d}function C(b,c){return function(d){return null!=d?(E(this,b,d),a.updateOffset(this,c),this):D(this,b)}}function D(a,b){return a._d[&quot;get&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b]()}function E(a,b,c){return a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b](c)}function F(a,b){var c;if(&quot;object&quot;==typeof a)for(c in a)this.set(c,a[c]);else if(a=A(a),&quot;function&quot;==typeof this[a])return this[a](b);return this}function G(a,b,c){var d=&quot;&quot;+Math.abs(a),e=b-d.length,f=a&gt;=0;return(f?c?&quot;+&quot;:&quot;&quot;:&quot;-&quot;)+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function H(a,b,c,d){var e=d;&quot;string&quot;==typeof d&amp;&amp;(e=function(){return this[d]()}),a&amp;&amp;(Qc[a]=e),b&amp;&amp;(Qc[b[0]]=function(){return G(e.apply(this,arguments),b[1],b[2])}),c&amp;&amp;(Qc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function I(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,&quot;&quot;):a.replace(/\\/g,&quot;&quot;)}function J(a){var b,c,d=a.match(Nc);for(b=0,c=d.length;c&gt;b;b++)Qc[d[b]]?d[b]=Qc[d[b]]:d[b]=I(d[b]);return function(e){var f=&quot;&quot;;for(b=0;c&gt;b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function K(a,b){return a.isValid()?(b=L(b,a.localeData()),Pc[b]=Pc[b]||J(b),Pc[b](a)):a.localeData().invalidDate()}function L(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Oc.lastIndex=0;d&gt;=0&amp;&amp;Oc.test(a);)a=a.replace(Oc,c),Oc.lastIndex=0,d-=1;return a}function M(a){return&quot;function&quot;==typeof a&amp;&amp;&quot;[object Function]&quot;===Object.prototype.toString.call(a)}function N(a,b,c){dd[a]=M(b)?b:function(a){return a&amp;&amp;c?c:b}}function O(a,b){return f(dd,a)?dd[a](b._strict,b._locale):new RegExp(P(a))}function P(a){return a.replace(&quot;\\&quot;,&quot;&quot;).replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,&quot;\\$&amp;&quot;)}function Q(a,b){var c,d=b;for(&quot;string&quot;==typeof a&amp;&amp;(a=[a]),&quot;number&quot;==typeof b&amp;&amp;(d=function(a,c){c[b]=q(a)}),c=0;c&lt;a.length;c++)ed[a[c]]=d}function R(a,b){Q(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function S(a,b,c){null!=b&amp;&amp;f(ed,a)&amp;&amp;ed[a](b,c._a,c,a)}function T(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function U(a){return this._months[a.month()]}function V(a){return this._monthsShort[a.month()]}function W(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12&gt;d;d++){if(e=h([2e3,d]),c&amp;&amp;!this._longMonthsParse[d]&amp;&amp;(this._longMonthsParse[d]=new RegExp(&quot;^&quot;+this.months(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;),this._shortMonthsParse[d]=new RegExp(&quot;^&quot;+this.monthsShort(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;)),c||this._monthsParse[d]||(f=&quot;^&quot;+this.months(e,&quot;&quot;)+&quot;|^&quot;+this.monthsShort(e,&quot;&quot;),this._monthsParse[d]=new RegExp(f.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),c&amp;&amp;&quot;MMMM&quot;===b&amp;&amp;this._longMonthsParse[d].test(a))return d;if(c&amp;&amp;&quot;MMM&quot;===b&amp;&amp;this._shortMonthsParse[d].test(a))return d;if(!c&amp;&amp;this._monthsParse[d].test(a))return d}}function X(a,b){var c;return&quot;string&quot;==typeof b&amp;&amp;(b=a.localeData().monthsParse(b),&quot;number&quot;!=typeof b)?a:(c=Math.min(a.date(),T(a.year(),b)),a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+&quot;Month&quot;](b,c),a)}function Y(b){return null!=b?(X(this,b),a.updateOffset(this,!0),this):D(this,&quot;Month&quot;)}function Z(){return T(this.year(),this.month())}function $(a){var b,c=a._a;return c&amp;&amp;-2===j(a).overflow&amp;&amp;(b=c[gd]&lt;0||c[gd]&gt;11?gd:c[hd]&lt;1||c[hd]&gt;T(c[fd],c[gd])?hd:c[id]&lt;0||c[id]&gt;24||24===c[id]&amp;&amp;(0!==c[jd]||0!==c[kd]||0!==c[ld])?id:c[jd]&lt;0||c[jd]&gt;59?jd:c[kd]&lt;0||c[kd]&gt;59?kd:c[ld]&lt;0||c[ld]&gt;999?ld:-1,j(a)._overflowDayOfYear&amp;&amp;(fd&gt;b||b&gt;hd)&amp;&amp;(b=hd),j(a).overflow=b),a}function _(b){a.suppressDeprecationWarnings===!1&amp;&amp;&quot;undefined&quot;!=typeof console&amp;&amp;console.warn&amp;&amp;console.warn(&quot;Deprecation warning: &quot;+b)}function aa(a,b){var c=!0;return g(function(){return c&amp;&amp;(_(a+&quot;\n&quot;+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function ba(a,b){od[a]||(_(b),od[a]=!0)}function ca(a){var b,c,d=a._i,e=pd.exec(d);if(e){for(j(a).iso=!0,b=0,c=qd.length;c&gt;b;b++)if(qd[b][1].exec(d)){a._f=qd[b][0];break}for(b=0,c=rd.length;c&gt;b;b++)if(rd[b][1].exec(d)){a._f+=(e[6]||&quot; &quot;)+rd[b][0];break}d.match(ad)&amp;&amp;(a._f+=&quot;Z&quot;),va(a)}else a._isValid=!1}function da(b){var c=sd.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ca(b),void(b._isValid===!1&amp;&amp;(delete b._isValid,a.createFromInputFallback(b))))}function ea(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970&gt;a&amp;&amp;h.setFullYear(a),h}function fa(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970&gt;a&amp;&amp;b.setUTCFullYear(a),b}function ga(a){return ha(a)?366:365}function ha(a){return a%4===0&amp;&amp;a%100!==0||a%400===0}function ia(){return ha(this.year())}function ja(a,b,c){var d,e=c-b,f=c-a.day();return f&gt;e&amp;&amp;(f-=7),e-7&gt;f&amp;&amp;(f+=7),d=Da(a).add(f,&quot;d&quot;),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ka(a){return ja(a,this._week.dow,this._week.doy).week}function la(){return this._week.dow}function ma(){return this._week.doy}function na(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function oa(a){var b=ja(this,1,4).week;return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function pa(a,b,c,d,e){var f,g=6+e-d,h=fa(a,0,1+g),i=h.getUTCDay();return e&gt;i&amp;&amp;(i+=7),c=null!=c?1*c:e,f=1+g+7*(b-1)-i+c,{year:f&gt;0?a:a-1,dayOfYear:f&gt;0?f:ga(a-1)+f}}function qa(a){var b=Math.round((this.clone().startOf(&quot;day&quot;)-this.clone().startOf(&quot;year&quot;))/864e5)+1;return null==a?b:this.add(a-b,&quot;d&quot;)}function ra(a,b,c){return null!=a?a:null!=b?b:c}function sa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ta(a){var b,c,d,e,f=[];if(!a._d){for(d=sa(a),a._w&amp;&amp;null==a._a[hd]&amp;&amp;null==a._a[gd]&amp;&amp;ua(a),a._dayOfYear&amp;&amp;(e=ra(a._a[fd],d[fd]),a._dayOfYear&gt;ga(e)&amp;&amp;(j(a)._overflowDayOfYear=!0),c=fa(e,0,a._dayOfYear),a._a[gd]=c.getUTCMonth(),a._a[hd]=c.getUTCDate()),b=0;3&gt;b&amp;&amp;null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7&gt;b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[id]&amp;&amp;0===a._a[jd]&amp;&amp;0===a._a[kd]&amp;&amp;0===a._a[ld]&amp;&amp;(a._nextDay=!0,a._a[id]=0),a._d=(a._useUTC?fa:ea).apply(null,f),null!=a._tzm&amp;&amp;a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&amp;&amp;(a._a[id]=24)}}function ua(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=ra(b.GG,a._a[fd],ja(Da(),1,4).year),d=ra(b.W,1),e=ra(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=ra(b.gg,a._a[fd],ja(Da(),f,g).year),d=ra(b.w,1),null!=b.d?(e=b.d,f&gt;e&amp;&amp;++d):e=null!=b.e?b.e+f:f),h=pa(c,d,e,g,f),a._a[fd]=h.year,a._dayOfYear=h.dayOfYear}function va(b){if(b._f===a.ISO_8601)return void ca(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=&quot;&quot;+b._i,i=h.length,k=0;for(e=L(b._f,b._locale).match(Nc)||[],c=0;c&lt;e.length;c++)f=e[c],d=(h.match(O(f,b))||[])[0],d&amp;&amp;(g=h.substr(0,h.indexOf(d)),g.length&gt;0&amp;&amp;j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Qc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),S(f,d,b)):b._strict&amp;&amp;!d&amp;&amp;j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length&gt;0&amp;&amp;j(b).unusedInput.push(h),j(b).bigHour===!0&amp;&amp;b._a[id]&lt;=12&amp;&amp;b._a[id]&gt;0&amp;&amp;(j(b).bigHour=void 0),b._a[id]=wa(b._locale,b._a[id],b._meridiem),ta(b),$(b)}function wa(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&amp;&amp;12&gt;b&amp;&amp;(b+=12),d||12!==b||(b=0),b):b}function xa(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e&lt;a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&amp;&amp;(b._useUTC=a._useUTC),b._f=a._f[e],va(b),k(b)&amp;&amp;(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d&gt;f)&amp;&amp;(d=f,c=b));g(a,c||b)}function ya(a){if(!a._d){var b=B(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ta(a)}}function za(a){var b=new n($(Aa(a)));return b._nextDay&amp;&amp;(b.add(1,&quot;d&quot;),b._nextDay=void 0),b}function Aa(a){var b=a._i,e=a._f;return a._locale=a._locale||y(a._l),null===b||void 0===e&amp;&amp;&quot;&quot;===b?l({nullInput:!0}):(&quot;string&quot;==typeof b&amp;&amp;(a._i=b=a._locale.preparse(b)),o(b)?new n($(b)):(c(e)?xa(a):e?va(a):d(b)?a._d=b:Ba(a),a))}function Ba(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):&quot;string&quot;==typeof f?da(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ta(b)):&quot;object&quot;==typeof f?ya(b):&quot;number&quot;==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ca(a,b,c,d,e){var f={};return&quot;boolean&quot;==typeof c&amp;&amp;(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,za(f)}function Da(a,b,c,d){return Ca(a,b,c,d,!1)}function Ea(a,b){var d,e;if(1===b.length&amp;&amp;c(b[0])&amp;&amp;(b=b[0]),!b.length)return Da();for(d=b[0],e=1;e&lt;b.length;++e)(!b[e].isValid()||b[e][a](d))&amp;&amp;(d=b[e]);return d}function Fa(){var a=[].slice.call(arguments,0);return Ea(&quot;isBefore&quot;,a)}function Ga(){var a=[].slice.call(arguments,0);return Ea(&quot;isAfter&quot;,a)}function Ha(a){var b=B(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=y(),this._bubble()}function Ia(a){return a instanceof Ha}function Ja(a,b){H(a,0,0,function(){var a=this.utcOffset(),c=&quot;+&quot;;return 0&gt;a&amp;&amp;(a=-a,c=&quot;-&quot;),c+G(~~(a/60),2)+b+G(~~a%60,2)})}function Ka(a){var b=(a||&quot;&quot;).match(ad)||[],c=b[b.length-1]||[],d=(c+&quot;&quot;).match(xd)||[&quot;-&quot;,0,0],e=+(60*d[1])+q(d[2]);return&quot;+&quot;===d[0]?e:-e}function La(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Da(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Da(b).local()}function Ma(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Na(b,c){var d,e=this._offset||0;return null!=b?(&quot;string&quot;==typeof b&amp;&amp;(b=Ka(b)),Math.abs(b)&lt;16&amp;&amp;(b=60*b),!this._isUTC&amp;&amp;c&amp;&amp;(d=Ma(this)),this._offset=b,this._isUTC=!0,null!=d&amp;&amp;this.add(d,&quot;m&quot;),e!==b&amp;&amp;(!c||this._changeInProgress?bb(this,Ya(b-e,&quot;m&quot;),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ma(this)}function Oa(a,b){return null!=a?(&quot;string&quot;!=typeof a&amp;&amp;(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Pa(a){return this.utcOffset(0,a)}function Qa(a){return this._isUTC&amp;&amp;(this.utcOffset(0,a),this._isUTC=!1,a&amp;&amp;this.subtract(Ma(this),&quot;m&quot;)),this}function Ra(){return this._tzm?this.utcOffset(this._tzm):&quot;string&quot;==typeof this._i&amp;&amp;this.utcOffset(Ka(this._i)),this}function Sa(a){return a=a?Da(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Ta(){return this.utcOffset()&gt;this.clone().month(0).utcOffset()||this.utcOffset()&gt;this.clone().month(5).utcOffset()}function Ua(){if(&quot;undefined&quot;!=typeof this._isDSTShifted)return this._isDSTShifted;var a={};if(m(a,this),a=Aa(a),a._a){var b=a._isUTC?h(a._a):Da(a._a);this._isDSTShifted=this.isValid()&amp;&amp;r(a._a,b.toArray())&gt;0}else this._isDSTShifted=!1;return this._isDSTShifted}function Va(){return!this._isUTC}function Wa(){return this._isUTC}function Xa(){return this._isUTC&amp;&amp;0===this._offset}function Ya(a,b){var c,d,e,g=a,h=null;return Ia(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:&quot;number&quot;==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=yd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:0,d:q(h[hd])*c,h:q(h[id])*c,m:q(h[jd])*c,s:q(h[kd])*c,ms:q(h[ld])*c}):(h=zd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:Za(h[2],c),M:Za(h[3],c),d:Za(h[4],c),h:Za(h[5],c),m:Za(h[6],c),s:Za(h[7],c),w:Za(h[8],c)}):null==g?g={}:&quot;object&quot;==typeof g&amp;&amp;(&quot;from&quot;in g||&quot;to&quot;in g)&amp;&amp;(e=_a(Da(g.from),Da(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ha(g),Ia(a)&amp;&amp;f(a,&quot;_locale&quot;)&amp;&amp;(d._locale=a._locale),d}function Za(a,b){var c=a&amp;&amp;parseFloat(a.replace(&quot;,&quot;,&quot;.&quot;));return(isNaN(c)?0:c)*b}function $a(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,&quot;M&quot;).isAfter(b)&amp;&amp;--c.months,c.milliseconds=+b-+a.clone().add(c.months,&quot;M&quot;),c}function _a(a,b){var c;return b=La(b,a),a.isBefore(b)?c=$a(a,b):(c=$a(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function ab(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(ba(b,&quot;moment().&quot;+b+&quot;(period, number) is deprecated. Please use moment().&quot;+b+&quot;(number, period).&quot;),f=c,c=d,d=f),c=&quot;string&quot;==typeof c?+c:c,e=Ya(c,d),bb(this,e,a),this}}function bb(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&amp;&amp;b._d.setTime(+b._d+f*d),g&amp;&amp;E(b,&quot;Date&quot;,D(b,&quot;Date&quot;)+g*d),h&amp;&amp;X(b,D(b,&quot;Month&quot;)+h*d),e&amp;&amp;a.updateOffset(b,g||h)}function cb(a,b){var c=a||Da(),d=La(c,this).startOf(&quot;day&quot;),e=this.diff(d,&quot;days&quot;,!0),f=-6&gt;e?&quot;sameElse&quot;:-1&gt;e?&quot;lastWeek&quot;:0&gt;e?&quot;lastDay&quot;:1&gt;e?&quot;sameDay&quot;:2&gt;e?&quot;nextDay&quot;:7&gt;e?&quot;nextWeek&quot;:&quot;sameElse&quot;;return this.format(b&amp;&amp;b[f]||this.localeData().calendar(f,this,Da(c)))}function db(){return new n(this)}function eb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this&gt;+a):(c=o(a)?+a:+Da(a),c&lt;+this.clone().startOf(b))}function fb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+a&gt;+this):(c=o(a)?+a:+Da(a),+this.clone().endOf(b)&lt;c)}function gb(a,b,c){return this.isAfter(a,c)&amp;&amp;this.isBefore(b,c)}function hb(a,b){var c;return b=A(b||&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this===+a):(c=+Da(a),+this.clone().startOf(b)&lt;=c&amp;&amp;c&lt;=+this.clone().endOf(b))}function ib(a,b,c){var d,e,f=La(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=A(b),&quot;year&quot;===b||&quot;month&quot;===b||&quot;quarter&quot;===b?(e=jb(this,f),&quot;quarter&quot;===b?e/=3:&quot;year&quot;===b&amp;&amp;(e/=12)):(d=this-f,e=&quot;second&quot;===b?d/1e3:&quot;minute&quot;===b?d/6e4:&quot;hour&quot;===b?d/36e5:&quot;day&quot;===b?(d-g)/864e5:&quot;week&quot;===b?(d-g)/6048e5:d),c?e:p(e)}function jb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,&quot;months&quot;);return 0&gt;b-f?(c=a.clone().add(e-1,&quot;months&quot;),d=(b-f)/(f-c)):(c=a.clone().add(e+1,&quot;months&quot;),d=(b-f)/(c-f)),-(e+d)}function kb(){return this.clone().locale(&quot;en&quot;).format(&quot;ddd MMM DD YYYY HH:mm:ss [GMT]ZZ&quot;)}function lb(){var a=this.clone().utc();return 0&lt;a.year()&amp;&amp;a.year()&lt;=9999?&quot;function&quot;==typeof Date.prototype.toISOString?this.toDate().toISOString():K(a,&quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;):K(a,&quot;YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;)}function mb(b){var c=K(this,b||a.defaultFormat);return this.localeData().postformat(c)}function nb(a,b){return this.isValid()?Ya({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.from(Da(),a)}function pb(a,b){return this.isValid()?Ya({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function qb(a){return this.to(Da(),a)}function rb(a){var b;return void 0===a?this._locale._abbr:(b=y(a),null!=b&amp;&amp;(this._locale=b),this)}function sb(){return this._locale}function tb(a){switch(a=A(a)){case&quot;year&quot;:this.month(0);case&quot;quarter&quot;:case&quot;month&quot;:this.date(1);case&quot;week&quot;:case&quot;isoWeek&quot;:case&quot;day&quot;:this.hours(0);case&quot;hour&quot;:this.minutes(0);case&quot;minute&quot;:this.seconds(0);case&quot;second&quot;:this.milliseconds(0)}return&quot;week&quot;===a&amp;&amp;this.weekday(0),&quot;isoWeek&quot;===a&amp;&amp;this.isoWeekday(1),&quot;quarter&quot;===a&amp;&amp;this.month(3*Math.floor(this.month()/3)),this}function ub(a){return a=A(a),void 0===a||&quot;millisecond&quot;===a?this:this.startOf(a).add(1,&quot;isoWeek&quot;===a?&quot;week&quot;:a).subtract(1,&quot;ms&quot;)}function vb(){return+this._d-6e4*(this._offset||0)}function wb(){return Math.floor(+this/1e3)}function xb(){return this._offset?new Date(+this):this._d}function yb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function zb(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Ab(){return k(this)}function Bb(){return g({},j(this))}function Cb(){return j(this).overflow}function Db(a,b){H(0,[a,a.length],0,b)}function Eb(a,b,c){return ja(Da([a,11,31+b-c]),b,c).week}function Fb(a){var b=ja(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Gb(a){var b=ja(this,1,4).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Hb(){return Eb(this.year(),1,4)}function Ib(){var a=this.localeData()._week;return Eb(this.year(),a.dow,a.doy)}function Jb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Kb(a,b){return&quot;string&quot;!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),&quot;number&quot;==typeof a?a:null):parseInt(a,10)}function Lb(a){return this._weekdays[a.day()]}function Mb(a){return this._weekdaysShort[a.day()]}function Nb(a){return this._weekdaysMin[a.day()]}function Ob(a){var b,c,d;for(this._weekdaysParse=this._weekdaysParse||[],b=0;7&gt;b;b++)if(this._weekdaysParse[b]||(c=Da([2e3,1]).day(b),d=&quot;^&quot;+this.weekdays(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysShort(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysMin(c,&quot;&quot;),this._weekdaysParse[b]=new RegExp(d.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),this._weekdaysParse[b].test(a))return b}function Pb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Kb(a,this.localeData()),this.add(a-b,&quot;d&quot;)):b}function Qb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,&quot;d&quot;)}function Rb(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Sb(a,b){H(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Tb(a,b){return b._meridiemParse}function Ub(a){return&quot;p&quot;===(a+&quot;&quot;).toLowerCase().charAt(0)}function Vb(a,b,c){return a&gt;11?c?&quot;pm&quot;:&quot;PM&quot;:c?&quot;am&quot;:&quot;AM&quot;}function Wb(a,b){b[ld]=q(1e3*(&quot;0.&quot;+a))}function Xb(){return this._isUTC?&quot;UTC&quot;:&quot;&quot;}function Yb(){return this._isUTC?&quot;Coordinated Universal Time&quot;:&quot;&quot;}function Zb(a){return Da(1e3*a)}function $b(){return Da.apply(null,arguments).parseZone()}function _b(a,b,c){var d=this._calendar[a];return&quot;function&quot;==typeof d?d.call(b,c):d}function ac(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function bc(){return this._invalidDate}function cc(a){return this._ordinal.replace(&quot;%d&quot;,a)}function dc(a){return a}function ec(a,b,c,d){var e=this._relativeTime[c];return&quot;function&quot;==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function fc(a,b){var c=this._relativeTime[a&gt;0?&quot;future&quot;:&quot;past&quot;];return&quot;function&quot;==typeof c?c(b):c.replace(/%s/i,b)}function gc(a){var b,c;for(c in a)b=a[c],&quot;function&quot;==typeof b?this[c]=b:this[&quot;_&quot;+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+&quot;|&quot;+/\d{1,2}/.source)}function hc(a,b,c,d){var e=y(),f=h().set(d,b);return e[c](f,a)}function ic(a,b,c,d,e){if(&quot;number&quot;==typeof a&amp;&amp;(b=a,a=void 0),a=a||&quot;&quot;,null!=b)return hc(a,b,c,e);var f,g=[];for(f=0;d&gt;f;f++)g[f]=hc(a,f,c,e);return g}function jc(a,b){return ic(a,b,&quot;months&quot;,12,&quot;month&quot;)}function kc(a,b){return ic(a,b,&quot;monthsShort&quot;,12,&quot;month&quot;)}function lc(a,b){return ic(a,b,&quot;weekdays&quot;,7,&quot;day&quot;)}function mc(a,b){return ic(a,b,&quot;weekdaysShort&quot;,7,&quot;day&quot;)}function nc(a,b){return ic(a,b,&quot;weekdaysMin&quot;,7,&quot;day&quot;)}function oc(){var a=this._data;return this._milliseconds=Wd(this._milliseconds),this._days=Wd(this._days),this._months=Wd(this._months),a.milliseconds=Wd(a.milliseconds),a.seconds=Wd(a.seconds),a.minutes=Wd(a.minutes),a.hours=Wd(a.hours),a.months=Wd(a.months),a.years=Wd(a.years),this}function pc(a,b,c,d){var e=Ya(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function qc(a,b){return pc(this,a,b,1)}function rc(a,b){return pc(this,a,b,-1)}function sc(a){return 0&gt;a?Math.floor(a):Math.ceil(a)}function tc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f&gt;=0&amp;&amp;g&gt;=0&amp;&amp;h&gt;=0||0&gt;=f&amp;&amp;0&gt;=g&amp;&amp;0&gt;=h||(f+=864e5*sc(vc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=p(f/1e3),i.seconds=a%60,b=p(a/60),i.minutes=b%60,c=p(b/60),i.hours=c%24,g+=p(c/24),e=p(uc(g)),h+=e,g-=sc(vc(e)),d=p(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function uc(a){return 4800*a/146097}function vc(a){return 146097*a/4800}function wc(a){var b,c,d=this._milliseconds;if(a=A(a),&quot;month&quot;===a||&quot;year&quot;===a)return b=this._days+d/864e5,c=this._months+uc(b),&quot;month&quot;===a?c:c/12;switch(b=this._days+Math.round(vc(this._months)),a){case&quot;week&quot;:return b/7+d/6048e5;case&quot;day&quot;:return b+d/864e5;case&quot;hour&quot;:return 24*b+d/36e5;case&quot;minute&quot;:return 1440*b+d/6e4;case&quot;second&quot;:return 86400*b+d/1e3;case&quot;millisecond&quot;:return Math.floor(864e5*b)+d;default:throw new Error(&quot;Unknown unit &quot;+a)}}function xc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*q(this._months/12)}function yc(a){return function(){return this.as(a)}}function zc(a){return a=A(a),this[a+&quot;s&quot;]()}function Ac(a){return function(){return this._data[a]}}function Bc(){return p(this.days()/7)}function Cc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Dc(a,b,c){var d=Ya(a).abs(),e=ke(d.as(&quot;s&quot;)),f=ke(d.as(&quot;m&quot;)),g=ke(d.as(&quot;h&quot;)),h=ke(d.as(&quot;d&quot;)),i=ke(d.as(&quot;M&quot;)),j=ke(d.as(&quot;y&quot;)),k=e&lt;le.s&amp;&amp;[&quot;s&quot;,e]||1===f&amp;&amp;[&quot;m&quot;]||f&lt;le.m&amp;&amp;[&quot;mm&quot;,f]||1===g&amp;&amp;[&quot;h&quot;]||g&lt;le.h&amp;&amp;[&quot;hh&quot;,g]||1===h&amp;&amp;[&quot;d&quot;]||h&lt;le.d&amp;&amp;[&quot;dd&quot;,h]||1===i&amp;&amp;[&quot;M&quot;]||i&lt;le.M&amp;&amp;[&quot;MM&quot;,i]||1===j&amp;&amp;[&quot;y&quot;]||[&quot;yy&quot;,j];return k[2]=b,k[3]=+a&gt;0,k[4]=c,Cc.apply(null,k)}function Ec(a,b){return void 0===le[a]?!1:void 0===b?le[a]:(le[a]=b,!0)}function Fc(a){var b=this.localeData(),c=Dc(this,!a,b);return a&amp;&amp;(c=b.pastFuture(+this,c)),b.postformat(c)}function Gc(){var a,b,c,d=me(this._milliseconds)/1e3,e=me(this._days),f=me(this._months);a=p(d/60),b=p(a/60),d%=60,a%=60,c=p(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0&gt;m?&quot;-&quot;:&quot;&quot;)+&quot;P&quot;+(g?g+&quot;Y&quot;:&quot;&quot;)+(h?h+&quot;M&quot;:&quot;&quot;)+(i?i+&quot;D&quot;:&quot;&quot;)+(j||k||l?&quot;T&quot;:&quot;&quot;)+(j?j+&quot;H&quot;:&quot;&quot;)+(k?k+&quot;M&quot;:&quot;&quot;)+(l?l+&quot;S&quot;:&quot;&quot;):&quot;P0D&quot;}var Hc,Ic,Jc=a.momentProperties=[],Kc=!1,Lc={},Mc={},Nc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Pc={},Qc={},Rc=/\d/,Sc=/\d\d/,Tc=/\d{3}/,Uc=/\d{4}/,Vc=/[+-]?\d{6}/,Wc=/\d\d?/,Xc=/\d{1,3}/,Yc=/\d{1,4}/,Zc=/[+-]?\d{1,6}/,$c=/\d+/,_c=/[+-]?\d+/,ad=/Z|[+-]\d\d:?\d\d/gi,bd=/[+-]?\d+(\.\d{1,3})?/,cd=/[0-9]*[&apos;a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,dd={},ed={},fd=0,gd=1,hd=2,id=3,jd=4,kd=5,ld=6;H(&quot;M&quot;,[&quot;MM&quot;,2],&quot;Mo&quot;,function(){return this.month()+1}),H(&quot;MMM&quot;,0,0,function(a){return this.localeData().monthsShort(this,a)}),H(&quot;MMMM&quot;,0,0,function(a){return this.localeData().months(this,a)}),z(&quot;month&quot;,&quot;M&quot;),N(&quot;M&quot;,Wc),N(&quot;MM&quot;,Wc,Sc),N(&quot;MMM&quot;,cd),N(&quot;MMMM&quot;,cd),Q([&quot;M&quot;,&quot;MM&quot;],function(a,b){b[gd]=q(a)-1}),Q([&quot;MMM&quot;,&quot;MMMM&quot;],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[gd]=e:j(c).invalidMonth=a});var md=&quot;January_February_March_April_May_June_July_August_September_October_November_December&quot;.split(&quot;_&quot;),nd=&quot;Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec&quot;.split(&quot;_&quot;),od={};a.suppressDeprecationWarnings=!1;var pd=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,qd=[[&quot;YYYYYY-MM-DD&quot;,/[+-]\d{6}-\d{2}-\d{2}/],[&quot;YYYY-MM-DD&quot;,/\d{4}-\d{2}-\d{2}/],[&quot;GGGG-[W]WW-E&quot;,/\d{4}-W\d{2}-\d/],[&quot;GGGG-[W]WW&quot;,/\d{4}-W\d{2}/],[&quot;YYYY-DDD&quot;,/\d{4}-\d{3}/]],rd=[[&quot;HH:mm:ss.SSSS&quot;,/(T| )\d\d:\d\d:\d\d\.\d+/],[&quot;HH:mm:ss&quot;,/(T| )\d\d:\d\d:\d\d/],[&quot;HH:mm&quot;,/(T| )\d\d:\d\d/],[&quot;HH&quot;,/(T| )\d\d/]],sd=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=aa(&quot;moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.&quot;,function(a){a._d=new Date(a._i+(a._useUTC?&quot; UTC&quot;:&quot;&quot;))}),H(0,[&quot;YY&quot;,2],0,function(){return this.year()%100}),H(0,[&quot;YYYY&quot;,4],0,&quot;year&quot;),H(0,[&quot;YYYYY&quot;,5],0,&quot;year&quot;),H(0,[&quot;YYYYYY&quot;,6,!0],0,&quot;year&quot;),z(&quot;year&quot;,&quot;y&quot;),N(&quot;Y&quot;,_c),N(&quot;YY&quot;,Wc,Sc),N(&quot;YYYY&quot;,Yc,Uc),N(&quot;YYYYY&quot;,Zc,Vc),N(&quot;YYYYYY&quot;,Zc,Vc),Q([&quot;YYYYY&quot;,&quot;YYYYYY&quot;],fd),Q(&quot;YYYY&quot;,function(b,c){c[fd]=2===b.length?a.parseTwoDigitYear(b):q(b)}),Q(&quot;YY&quot;,function(b,c){c[fd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return q(a)+(q(a)&gt;68?1900:2e3)};var td=C(&quot;FullYear&quot;,!1);H(&quot;w&quot;,[&quot;ww&quot;,2],&quot;wo&quot;,&quot;week&quot;),H(&quot;W&quot;,[&quot;WW&quot;,2],&quot;Wo&quot;,&quot;isoWeek&quot;),z(&quot;week&quot;,&quot;w&quot;),z(&quot;isoWeek&quot;,&quot;W&quot;),N(&quot;w&quot;,Wc),N(&quot;ww&quot;,Wc,Sc),N(&quot;W&quot;,Wc),N(&quot;WW&quot;,Wc,Sc),R([&quot;w&quot;,&quot;ww&quot;,&quot;W&quot;,&quot;WW&quot;],function(a,b,c,d){b[d.substr(0,1)]=q(a)});var ud={dow:0,doy:6};H(&quot;DDD&quot;,[&quot;DDDD&quot;,3],&quot;DDDo&quot;,&quot;dayOfYear&quot;),z(&quot;dayOfYear&quot;,&quot;DDD&quot;),N(&quot;DDD&quot;,Xc),N(&quot;DDDD&quot;,Tc),Q([&quot;DDD&quot;,&quot;DDDD&quot;],function(a,b,c){c._dayOfYear=q(a)}),a.ISO_8601=function(){};var vd=aa(&quot;moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return this&gt;a?this:a}),wd=aa(&quot;moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return a&gt;this?this:a});Ja(&quot;Z&quot;,&quot;:&quot;),Ja(&quot;ZZ&quot;,&quot;&quot;),N(&quot;Z&quot;,ad),N(&quot;ZZ&quot;,ad),Q([&quot;Z&quot;,&quot;ZZ&quot;],function(a,b,c){c._useUTC=!0,c._tzm=Ka(a)});var xd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var yd=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,zd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Ya.fn=Ha.prototype;var Ad=ab(1,&quot;add&quot;),Bd=ab(-1,&quot;subtract&quot;);a.defaultFormat=&quot;YYYY-MM-DDTHH:mm:ssZ&quot;;var Cd=aa(&quot;moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.&quot;,function(a){return void 0===a?this.localeData():this.locale(a)});H(0,[&quot;gg&quot;,2],0,function(){return this.weekYear()%100}),H(0,[&quot;GG&quot;,2],0,function(){return this.isoWeekYear()%100}),Db(&quot;gggg&quot;,&quot;weekYear&quot;),Db(&quot;ggggg&quot;,&quot;weekYear&quot;),Db(&quot;GGGG&quot;,&quot;isoWeekYear&quot;),Db(&quot;GGGGG&quot;,&quot;isoWeekYear&quot;),z(&quot;weekYear&quot;,&quot;gg&quot;),z(&quot;isoWeekYear&quot;,&quot;GG&quot;),N(&quot;G&quot;,_c),N(&quot;g&quot;,_c),N(&quot;GG&quot;,Wc,Sc),N(&quot;gg&quot;,Wc,Sc),N(&quot;GGGG&quot;,Yc,Uc),N(&quot;gggg&quot;,Yc,Uc),N(&quot;GGGGG&quot;,Zc,Vc),N(&quot;ggggg&quot;,Zc,Vc),R([&quot;gggg&quot;,&quot;ggggg&quot;,&quot;GGGG&quot;,&quot;GGGGG&quot;],function(a,b,c,d){b[d.substr(0,2)]=q(a)}),R([&quot;gg&quot;,&quot;GG&quot;],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),H(&quot;Q&quot;,0,0,&quot;quarter&quot;),z(&quot;quarter&quot;,&quot;Q&quot;),N(&quot;Q&quot;,Rc),Q(&quot;Q&quot;,function(a,b){b[gd]=3*(q(a)-1)}),H(&quot;D&quot;,[&quot;DD&quot;,2],&quot;Do&quot;,&quot;date&quot;),z(&quot;date&quot;,&quot;D&quot;),N(&quot;D&quot;,Wc),N(&quot;DD&quot;,Wc,Sc),N(&quot;Do&quot;,function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),Q([&quot;D&quot;,&quot;DD&quot;],hd),Q(&quot;Do&quot;,function(a,b){b[hd]=q(a.match(Wc)[0],10)});var Dd=C(&quot;Date&quot;,!0);H(&quot;d&quot;,0,&quot;do&quot;,&quot;day&quot;),H(&quot;dd&quot;,0,0,function(a){return this.localeData().weekdaysMin(this,a)}),H(&quot;ddd&quot;,0,0,function(a){return this.localeData().weekdaysShort(this,a)}),H(&quot;dddd&quot;,0,0,function(a){return this.localeData().weekdays(this,a)}),H(&quot;e&quot;,0,0,&quot;weekday&quot;),H(&quot;E&quot;,0,0,&quot;isoWeekday&quot;),z(&quot;day&quot;,&quot;d&quot;),z(&quot;weekday&quot;,&quot;e&quot;),z(&quot;isoWeekday&quot;,&quot;E&quot;),N(&quot;d&quot;,Wc),N(&quot;e&quot;,Wc),N(&quot;E&quot;,Wc),N(&quot;dd&quot;,cd),N(&quot;ddd&quot;,cd),N(&quot;dddd&quot;,cd),R([&quot;dd&quot;,&quot;ddd&quot;,&quot;dddd&quot;],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),R([&quot;d&quot;,&quot;e&quot;,&quot;E&quot;],function(a,b,c,d){b[d]=q(a)});var Ed=&quot;Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday&quot;.split(&quot;_&quot;),Fd=&quot;Sun_Mon_Tue_Wed_Thu_Fri_Sat&quot;.split(&quot;_&quot;),Gd=&quot;Su_Mo_Tu_We_Th_Fr_Sa&quot;.split(&quot;_&quot;);H(&quot;H&quot;,[&quot;HH&quot;,2],0,&quot;hour&quot;),H(&quot;h&quot;,[&quot;hh&quot;,2],0,function(){return this.hours()%12||12}),Sb(&quot;a&quot;,!0),Sb(&quot;A&quot;,!1),z(&quot;hour&quot;,&quot;h&quot;),N(&quot;a&quot;,Tb),N(&quot;A&quot;,Tb),N(&quot;H&quot;,Wc),N(&quot;h&quot;,Wc),N(&quot;HH&quot;,Wc,Sc),N(&quot;hh&quot;,Wc,Sc),Q([&quot;H&quot;,&quot;HH&quot;],id),Q([&quot;a&quot;,&quot;A&quot;],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),Q([&quot;h&quot;,&quot;hh&quot;],function(a,b,c){b[id]=q(a),j(c).bigHour=!0});var Hd=/[ap]\.?m?\.?/i,Id=C(&quot;Hours&quot;,!0);H(&quot;m&quot;,[&quot;mm&quot;,2],0,&quot;minute&quot;),z(&quot;minute&quot;,&quot;m&quot;),N(&quot;m&quot;,Wc),N(&quot;mm&quot;,Wc,Sc),Q([&quot;m&quot;,&quot;mm&quot;],jd);var Jd=C(&quot;Minutes&quot;,!1);H(&quot;s&quot;,[&quot;ss&quot;,2],0,&quot;second&quot;),z(&quot;second&quot;,&quot;s&quot;),N(&quot;s&quot;,Wc),N(&quot;ss&quot;,Wc,Sc),Q([&quot;s&quot;,&quot;ss&quot;],kd);var Kd=C(&quot;Seconds&quot;,!1);H(&quot;S&quot;,0,0,function(){return~~(this.millisecond()/100)}),H(0,[&quot;SS&quot;,2],0,function(){return~~(this.millisecond()/10)}),H(0,[&quot;SSS&quot;,3],0,&quot;millisecond&quot;),H(0,[&quot;SSSS&quot;,4],0,function(){return 10*this.millisecond()}),H(0,[&quot;SSSSS&quot;,5],0,function(){return 100*this.millisecond()}),H(0,[&quot;SSSSSS&quot;,6],0,function(){return 1e3*this.millisecond()}),H(0,[&quot;SSSSSSS&quot;,7],0,function(){return 1e4*this.millisecond()}),H(0,[&quot;SSSSSSSS&quot;,8],0,function(){return 1e5*this.millisecond()}),H(0,[&quot;SSSSSSSSS&quot;,9],0,function(){return 1e6*this.millisecond()}),z(&quot;millisecond&quot;,&quot;ms&quot;),N(&quot;S&quot;,Xc,Rc),N(&quot;SS&quot;,Xc,Sc),N(&quot;SSS&quot;,Xc,Tc);var Ld;for(Ld=&quot;SSSS&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)N(Ld,$c);for(Ld=&quot;S&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)Q(Ld,Wb);var Md=C(&quot;Milliseconds&quot;,!1);H(&quot;z&quot;,0,0,&quot;zoneAbbr&quot;),H(&quot;zz&quot;,0,0,&quot;zoneName&quot;);var Nd=n.prototype;Nd.add=Ad,Nd.calendar=cb,Nd.clone=db,Nd.diff=ib,Nd.endOf=ub,Nd.format=mb,Nd.from=nb,Nd.fromNow=ob,Nd.to=pb,Nd.toNow=qb,Nd.get=F,Nd.invalidAt=Cb,Nd.isAfter=eb,Nd.isBefore=fb,Nd.isBetween=gb,Nd.isSame=hb,Nd.isValid=Ab,Nd.lang=Cd,Nd.locale=rb,Nd.localeData=sb,Nd.max=wd,Nd.min=vd,Nd.parsingFlags=Bb,Nd.set=F,Nd.startOf=tb,Nd.subtract=Bd,Nd.toArray=yb,Nd.toObject=zb,Nd.toDate=xb,Nd.toISOString=lb,Nd.toJSON=lb,Nd.toString=kb,Nd.unix=wb,Nd.valueOf=vb,Nd.year=td,Nd.isLeapYear=ia,Nd.weekYear=Fb,Nd.isoWeekYear=Gb,Nd.quarter=Nd.quarters=Jb,Nd.month=Y,Nd.daysInMonth=Z,Nd.week=Nd.weeks=na,Nd.isoWeek=Nd.isoWeeks=oa,Nd.weeksInYear=Ib,Nd.isoWeeksInYear=Hb,Nd.date=Dd,Nd.day=Nd.days=Pb,Nd.weekday=Qb,Nd.isoWeekday=Rb,Nd.dayOfYear=qa,Nd.hour=Nd.hours=Id,Nd.minute=Nd.minutes=Jd,Nd.second=Nd.seconds=Kd,
Nd.millisecond=Nd.milliseconds=Md,Nd.utcOffset=Na,Nd.utc=Pa,Nd.local=Qa,Nd.parseZone=Ra,Nd.hasAlignedHourOffset=Sa,Nd.isDST=Ta,Nd.isDSTShifted=Ua,Nd.isLocal=Va,Nd.isUtcOffset=Wa,Nd.isUtc=Xa,Nd.isUTC=Xa,Nd.zoneAbbr=Xb,Nd.zoneName=Yb,Nd.dates=aa(&quot;dates accessor is deprecated. Use date instead.&quot;,Dd),Nd.months=aa(&quot;months accessor is deprecated. Use month instead&quot;,Y),Nd.years=aa(&quot;years accessor is deprecated. Use year instead&quot;,td),Nd.zone=aa(&quot;moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779&quot;,Oa);var Od=Nd,Pd={sameDay:&quot;[Today at] LT&quot;,nextDay:&quot;[Tomorrow at] LT&quot;,nextWeek:&quot;dddd [at] LT&quot;,lastDay:&quot;[Yesterday at] LT&quot;,lastWeek:&quot;[Last] dddd [at] LT&quot;,sameElse:&quot;L&quot;},Qd={LTS:&quot;h:mm:ss A&quot;,LT:&quot;h:mm A&quot;,L:&quot;MM/DD/YYYY&quot;,LL:&quot;MMMM D, YYYY&quot;,LLL:&quot;MMMM D, YYYY h:mm A&quot;,LLLL:&quot;dddd, MMMM D, YYYY h:mm A&quot;},Rd=&quot;Invalid date&quot;,Sd=&quot;%d&quot;,Td=/\d{1,2}/,Ud={future:&quot;in %s&quot;,past:&quot;%s ago&quot;,s:&quot;a few seconds&quot;,m:&quot;a minute&quot;,mm:&quot;%d minutes&quot;,h:&quot;an hour&quot;,hh:&quot;%d hours&quot;,d:&quot;a day&quot;,dd:&quot;%d days&quot;,M:&quot;a month&quot;,MM:&quot;%d months&quot;,y:&quot;a year&quot;,yy:&quot;%d years&quot;},Vd=s.prototype;Vd._calendar=Pd,Vd.calendar=_b,Vd._longDateFormat=Qd,Vd.longDateFormat=ac,Vd._invalidDate=Rd,Vd.invalidDate=bc,Vd._ordinal=Sd,Vd.ordinal=cc,Vd._ordinalParse=Td,Vd.preparse=dc,Vd.postformat=dc,Vd._relativeTime=Ud,Vd.relativeTime=ec,Vd.pastFuture=fc,Vd.set=gc,Vd.months=U,Vd._months=md,Vd.monthsShort=V,Vd._monthsShort=nd,Vd.monthsParse=W,Vd.week=ka,Vd._week=ud,Vd.firstDayOfYear=ma,Vd.firstDayOfWeek=la,Vd.weekdays=Lb,Vd._weekdays=Ed,Vd.weekdaysMin=Nb,Vd._weekdaysMin=Gd,Vd.weekdaysShort=Mb,Vd._weekdaysShort=Fd,Vd.weekdaysParse=Ob,Vd.isPM=Ub,Vd._meridiemParse=Hd,Vd.meridiem=Vb,w(&quot;en&quot;,{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===q(a%100/10)?&quot;th&quot;:1===b?&quot;st&quot;:2===b?&quot;nd&quot;:3===b?&quot;rd&quot;:&quot;th&quot;;return a+c}}),a.lang=aa(&quot;moment.lang is deprecated. Use moment.locale instead.&quot;,w),a.langData=aa(&quot;moment.langData is deprecated. Use moment.localeData instead.&quot;,y);var Wd=Math.abs,Xd=yc(&quot;ms&quot;),Yd=yc(&quot;s&quot;),Zd=yc(&quot;m&quot;),$d=yc(&quot;h&quot;),_d=yc(&quot;d&quot;),ae=yc(&quot;w&quot;),be=yc(&quot;M&quot;),ce=yc(&quot;y&quot;),de=Ac(&quot;milliseconds&quot;),ee=Ac(&quot;seconds&quot;),fe=Ac(&quot;minutes&quot;),ge=Ac(&quot;hours&quot;),he=Ac(&quot;days&quot;),ie=Ac(&quot;months&quot;),je=Ac(&quot;years&quot;),ke=Math.round,le={s:45,m:45,h:22,d:26,M:11},me=Math.abs,ne=Ha.prototype;ne.abs=oc,ne.add=qc,ne.subtract=rc,ne.as=wc,ne.asMilliseconds=Xd,ne.asSeconds=Yd,ne.asMinutes=Zd,ne.asHours=$d,ne.asDays=_d,ne.asWeeks=ae,ne.asMonths=be,ne.asYears=ce,ne.valueOf=xc,ne._bubble=tc,ne.get=zc,ne.milliseconds=de,ne.seconds=ee,ne.minutes=fe,ne.hours=ge,ne.days=he,ne.weeks=Bc,ne.months=ie,ne.years=je,ne.humanize=Fc,ne.toISOString=Gc,ne.toString=Gc,ne.toJSON=Gc,ne.locale=rb,ne.localeData=sb,ne.toIsoString=aa(&quot;toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)&quot;,Gc),ne.lang=Cd,H(&quot;X&quot;,0,0,&quot;unix&quot;),H(&quot;x&quot;,0,0,&quot;valueOf&quot;),N(&quot;x&quot;,_c),N(&quot;X&quot;,bd),Q(&quot;X&quot;,function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),Q(&quot;x&quot;,function(a,b,c){c._d=new Date(q(a))}),a.version=&quot;2.10.6&quot;,b(Da),a.fn=Od,a.min=Fa,a.max=Ga,a.utc=h,a.unix=Zb,a.months=jc,a.isDate=d,a.locale=w,a.invalid=l,a.duration=Ya,a.isMoment=o,a.weekdays=lc,a.parseZone=$b,a.localeData=y,a.isDuration=Ia,a.monthsShort=kc,a.weekdaysMin=nc,a.defineLocale=x,a.weekdaysShort=mc,a.normalizeUnits=A,a.relativeTimeThreshold=Ec;var oe=a;return oe});</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2c64669f-f07e-4365-bf64-c559ace83004</id>
                <name>stopOnErrorCount</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122375</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to Stop a channel if it reaches a particular error count. 
	Also sends an alert message via another channel (this sends a sms via our monitoring system).

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function stopOnErrorCount(cid, errorCount) {
	var channelStatisticsController = Packages.com.mirth.connect.server.controllers.ChannelStatisticsController.getInstance();
	var channelStatusController = Packages.com.mirth.connect.server.controllers.ChannelStatusController.getInstance();
	var stats = channelStatisticsController.getStatistics(cid);
	// var numOfQueued = stats.queued;
	var numOfErrors = stats.error;

	if(numOfErrors &gt; errorCount )
	{
		//Stop Me
		channelStatusController.stopChannel(cid);
		//Alert msg sent to _SVHALERT channel
		var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
		var channelName = channelController.getDeployedChannelById(cid).getName();
		var alertmsg = &apos;mirth01 mirth_channel_status codeTemplate_stopOnErrorCount 0 &apos; +
					   &apos;channel &apos; + channelName + &apos; stopped&apos;;
		router.routeMessage(&apos;_SVHALERT&apos;, alertmsg);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>08044817-3504-4fc1-80ee-404870195151</id>
                <name>test</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122745</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.
	searchword
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function testfunc(arg1) {
	return arg1;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
            <name>WebPT-Mirth</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121602</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
                <name>Fix HL7v2 Node Order</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121804</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>35f4c250-08b4-4e42-8e60-f85aa98dfe50</id>
            <name>WebPT-Translations</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939924</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>be8f057b-2640-4613-b2e7-83326c59169c</id>
                <name>AddZeros</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122826</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function addZeroes(num) {
   return num.toLocaleString(&quot;en&quot;, {useGrouping: false, minimumFractionDigits: 2})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>51913864-7702-489a-b7c6-54992c12b19d</id>
                <name>FindLookupValueWithDefault</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122218</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithDefault ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        //obj.LeftValue = LeftValue;
        //obj.RightValue1 = DefaultValue1;
        //obj.RightValue2   = DefaultValue2; 
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);
            var result = pattern.test(LeftValue );

            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>c276be9f-c8f1-4dea-8df0-e000c6745271</id>
                <name>FindLookupValueWithInsuranceId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122080</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithInsuranceId ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);             
            var result = pattern.test(LeftValue );
	
            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7d746da2-58c6-44eb-ad5c-c5bfd0a0c537</id>
                <name>UseExternalProblemID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122349</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalProblemID() {

if ([&apos;2804&apos;, &apos;2822&apos;].indexOf($(&apos;tenantId&apos;) + &apos;&apos;) &gt; -1) {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitexternalproblemid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitaccountnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>07730e85-7f30-4ddf-90a4-78183c896ab5</id>
                <name>UseExternalVisitID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122192</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalVisitID() {
	
if ($(&apos;tenantId&apos;)  == &apos;9999&apos; ) {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitexternalvisitid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitvisitnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
        <channelTags>
          <channelTag>
            <id>a93f3fdd-2d93-4042-9986-4aedde58e025</id>
            <name>CCDA</name>
            <channelIds>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>28cdc2db-4028-4249-b1b8-c2ba3961a137</id>
            <name>HL7</name>
            <channelIds>
              <string>6a2a6c33-33da-4783-b823-bd95bf387981</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>5beae4c2-e7f8-4ae3-9fca-703dea9233a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>272250ac-d998-41dc-b01d-7721808b3ec6</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>1ae4e7ac-e62f-468c-aa2a-99cbd6139838</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>0638775c-6c87-4a71-b4b3-7ae52be05c1b</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
            </channelIds>
            <backgroundColor>
              <red>128</red>
              <green>128</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>7ce0cfcd-1a2e-407f-9b7a-5b742c542234</id>
            <name>MDHT</name>
            <channelIds>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>ce7c2eec-c71c-4d86-a375-98e965e52126</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
        </channelTags>
      </exportData>
    </channel>
    <channel version="4.0.0">
      <id>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>Example - Convert HL7v2 to XML</name>
      <description></description>
      <revision>1</revision>
      <sourceConnector version="4.0.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.0.0">
          <pluginProperties/>
          <sourceConnectorProperties version="4.0.0">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>0</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.0.0">
          <elements/>
          <inboundDataType>HL7V2</inboundDataType>
          <outboundDataType>XML</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
              <handleRepetitions>true</handleRepetitions>
              <handleSubcomponents>true</handleSubcomponents>
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <stripNamespaces>true</stripNamespaces>
              <segmentDelimiter>\r</segmentDelimiter>
              <convertLineBreaks>true</convertLineBreaks>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <segmentDelimiter>\r</segmentDelimiter>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
              <splitType>MSH_Segment</splitType>
              <batchScript></batchScript>
            </batchProperties>
            <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
              <segmentDelimiter>\r</segmentDelimiter>
              <successfulACKCode>AA</successfulACKCode>
              <successfulACKMessage></successfulACKMessage>
              <errorACKCode>AE</errorACKCode>
              <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
              <rejectedACKCode>AR</rejectedACKCode>
              <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
              <msh15ACKAccept>false</msh15ACKAccept>
              <dateFormat>yyyyMMddHHmmss</dateFormat>
            </responseGenerationProperties>
            <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
              <successfulACKCode>AA,CA</successfulACKCode>
              <errorACKCode>AE,CE</errorACKCode>
              <rejectedACKCode>AR,CR</rejectedACKCode>
              <validateMessageControlId>false</validateMessageControlId>
              <originalMessageControlId>Destination_Encoded</originalMessageControlId>
              <originalIdMapVariable></originalIdMapVariable>
            </responseValidationProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
              <stripNamespaces>true</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.0.0">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.0.0">
          <metaDataId>1</metaDataId>
          <name>Destination 1</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.0.0">
            <pluginProperties/>
            <destinationConnectorProperties version="4.0.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>0</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.0.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.0.0">
            <elements/>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.0.0">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.0.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STOPPED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.0.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1425701630563</time>
            <timezone>America/Chicago</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="4.0.0">
            <id>d316c4bc-9e10-4162-b67c-e514afc59fa3</id>
            <name>Channel Helpers</name>
            <revision>1</revision>
            <lastModified>
              <time>1706120884823</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>1aca2a66-a83a-4703-9ec7-dfaa3a6ad5b2</string>
              <string>3e15b608-553f-45e7-a617-712d6b75ab4d</string>
              <string>f6d6aa80-d65f-4935-a267-d6bef39a7bdf</string>
              <string>edd93839-401c-4613-b696-6d4799ebc5af</string>
              <string>2f511815-92d1-4f0f-92e9-f4f8ae576b75</string>
              <string>b4a51816-0aad-444a-b1ce-f5c11f9961bc</string>
              <string>cb7f055d-45ae-43b7-ac7c-bb2b2db34ded</string>
              <string>139cdc6a-5f40-46bd-a246-2a9a1ef8ed10</string>
              <string>316c7826-a8ee-44b4-922c-8afe0daa2c72</string>
              <string>6ff8ca2b-c4e3-4e6f-897a-17f36ed63faa</string>
              <string>27aee1c0-8ed0-4062-89b5-1c7a69a946bc</string>
              <string>291b4847-a85d-41c6-bd4a-37f008b15ca8</string>
              <string>81c836fd-cbba-4247-b438-d4c9987ee75b</string>
              <string>4318de8e-4d7b-4885-9f11-8b2ac6f9c70a</string>
              <string>e983e439-461a-424f-8348-764b29e05ecb</string>
              <string>0763b542-8ed8-4a30-9c35-de3dbf030626</string>
              <string>75c150e0-fbc5-4eef-a856-bec6b3a39a24</string>
              <string>dd55a671-a099-4b29-bdbb-85c34050037a</string>
              <string>a08848df-6dcd-4c51-aa6d-d2f85edfdcf8</string>
              <string>ae504043-55f5-497e-ac87-33686e7569b2</string>
              <string>fef7c31a-61a4-43c8-bb15-79f51a36c882</string>
              <string>69f5ad2c-3bf4-4d55-8e4a-bd6faade202d</string>
              <string>39acd9f7-c975-4787-b31e-714f748a51a2</string>
              <string>a8bd6f50-894f-443f-b248-da3ebad3a748</string>
              <string>3c355935-e639-4517-b3b1-42c6564387f8</string>
              <string>1e45f5ac-6815-40a8-8fe9-15e98eb1d07b</string>
              <string>e695a1d8-2bde-4da3-a9a8-8cd6f81ca3c0</string>
              <string>3d95de17-a2ea-446c-be4c-36c32d8cda1c</string>
              <string>205385d0-06be-4baa-b072-9b431c315827</string>
              <string>a8ebde5a-16cb-407e-a8b4-fa8766d26c73</string>
              <string>fdcb1121-0d49-4ed8-b1a1-4f4482e1c20a</string>
              <string>b1842d23-059a-4e7e-b447-3b5f5ccf5c3a</string>
              <string>8c5d3887-bd22-4018-aeda-45e5c0f8d551</string>
              <string>a127fffb-1663-4206-b6d3-348aa228c999</string>
              <string>d70fc7fa-2005-4fc7-9222-dc8119346c6e</string>
              <string>2a2ad8a5-b961-4f4c-ac09-8abee2097972</string>
              <string>143b10e0-e01b-4942-9995-2d3b9a165d76</string>
              <string>a574bc8d-e82e-4ec6-9430-f3a37278e356</string>
              <string>f6e27b4e-dbbd-48c9-994f-55c3ac511fb9</string>
              <string>6060b76d-07c2-4f9f-bc71-d2e8c44d8271</string>
              <string>08536fee-6f99-4cc4-8958-f84daaee73d5</string>
              <string>dccd5a80-a385-482e-97e4-69340bce4522</string>
              <string>bfa0bc00-9ee1-4ba5-99de-9e46faffed6d</string>
              <string>183b6833-a563-42cb-8d4d-cdcb740aef30</string>
              <string>652e2cab-f748-41b4-ae8f-f0aae48e1fca</string>
              <string>bd81709b-2ef0-4760-aba9-f455fb338f37</string>
              <string>633e9341-a80b-4c11-a6a3-1d3942bb1782</string>
              <string>695c7ed6-252e-4229-83db-5571946a8b62</string>
              <string>df3f9b9f-e8e7-47a9-a33d-c9ec7d7820fd</string>
              <string>895ee0ef-745c-464d-a46c-e51331a01c3f</string>
              <string>50dcf6de-46b4-4de5-99c2-d341abb8a41a</string>
              <string>5e411c40-61f8-467e-b132-78e54e0b5f81</string>
              <string>ed4ef090-3f7e-442d-ad30-744e3a1313f2</string>
              <string>ed3e52dc-3023-4cc7-8cad-47e0d5df89c1</string>
              <string>ec29c308-0bc3-4eb0-a948-09c2c0747afa</string>
              <string>aeaba1c0-cef9-4ad8-82d7-76d66cc95562</string>
              <string>58f42d4f-22e1-4f7c-8acf-93a9fe92619c</string>
              <string>7a21d8ac-5afa-45b8-b136-5def45d811b4</string>
              <string>23ea2137-37b1-4b00-9fb0-c8889cd4bc97</string>
              <string>2a33ffd6-253d-402f-8fb6-93bd94f65dcd</string>
              <string>7445aaa5-ff13-4c08-a8b1-817cfed2692b</string>
              <string>3d290a27-5daf-4bb0-b3d8-90c9bb8afaeb</string>
              <string>e07b74b9-756e-4ca2-8be9-01bf7abfd817</string>
              <string>3ba1448a-d0b7-4478-bc57-f9cb8dab6de9</string>
              <string>dcaf136d-a3b8-47ed-aec7-d1619675ba2d</string>
              <string>285faf0d-523a-4c8e-92ec-4a0f3a89e048</string>
              <string>3263ad34-c86d-4481-b19f-4cd3d0d83d62</string>
              <string>e1af2369-c57e-4850-bc30-f79b6fe9fa66</string>
              <string>28ddc4f3-a96b-47db-b0e0-bcfcd825f48a</string>
              <string>90bc60ed-14c6-49db-b1e6-bb70d2b1d01d</string>
              <string>fd6b9376-0847-49d7-96c6-15c540a8e39a</string>
              <string>7ee4a47d-bdf3-473d-9da9-3a62c41037b1</string>
              <string>167ee803-661a-4e6e-ac6e-b84c057f7ca1</string>
              <string>a40e7657-c37a-4fb6-aa79-48a2ea16709c</string>
              <string>5d5e5835-8cd3-43af-ac82-ffe57439bfb5</string>
              <string>47f248b1-72d5-47dc-b0b3-6aa387e9e5d6</string>
              <string>d7c3e640-7850-4d70-bb1c-3289674bd609</string>
              <string>ae961745-fe19-46bd-b240-c82888091366</string>
              <string>68581957-7fba-421f-b063-941a804fcc46</string>
              <string>0056a8aa-7aa5-4047-a693-21bac64470aa</string>
              <string>2a637fa3-fb83-4666-abe0-c754924ff738</string>
              <string>8a08c578-68dd-4550-b178-eee13ade011e</string>
              <string>d448196a-4282-4d10-8c9a-7f1dfd19abea</string>
              <string>05759809-cfbd-4546-8b71-fd28c2499763</string>
              <string>1c01997f-00d1-4e40-9e63-da5706137cdd</string>
              <string>881db416-1776-4ab6-a3ce-5065ed11cdb5</string>
              <string>982b29a5-1743-4435-8842-9810e4e34926</string>
              <string>fe1bdd5e-cce0-4509-a09a-3545b69d3d7a</string>
              <string>1bff9775-2de8-4b51-bb6b-6aaa29c144bb</string>
              <string>5e97d36f-68fe-412d-a1df-3a25a07e5770</string>
              <string>9316c229-da47-49f8-a2c0-398ba155d370</string>
              <string>20524120-844c-4733-ac8a-b01f0e14a12f</string>
              <string>55ebb133-1e4d-4172-8718-301240e9518f</string>
              <string>b0dec3c0-01ca-45a6-b826-707b80644dff</string>
              <string>d1dd4342-0ad4-42cc-b708-f47e8c6621f8</string>
              <string>20d94501-cd46-41ce-9bf1-e34639074d16</string>
              <string>492a7c6c-4768-45e2-9f49-6c5488b0a2e5</string>
              <string>9f67f48f-ca64-4419-9101-05c39d7634fd</string>
              <string>14a2ad40-95bb-4ac9-a10e-d326537cc5a6</string>
              <string>6aa39894-bc9b-448c-aac6-b6967a0ce243</string>
              <string>4108a56a-b1a6-4d8c-9e8e-b065654860d0</string>
              <string>bdb4241f-2858-49da-8d4e-2f1579679620</string>
              <string>d56da279-9aa2-4b33-8913-bf0f37a046a0</string>
              <string>692365a7-9ec6-4c38-adee-672f4084adf3</string>
              <string>3f433a3e-e46d-440a-82c1-5490ada6b54e</string>
              <string>4d223d2f-d247-47da-b6e6-6d25e8a73775</string>
              <string>4b7abf79-011a-428e-96c9-040696a2869b</string>
              <string>72471096-425b-4750-81a4-123fca2e302c</string>
              <string>3558a098-5cbc-4e05-ae03-80b4aad20e53</string>
              <string>4a05dc00-9ad6-454a-b61b-ddd074bbb36c</string>
              <string>9d1c136c-3c94-43c3-b0f8-1c1551ac6987</string>
              <string>b2fdd8c2-f387-493b-ab35-e7e9e8ce056a</string>
              <string>930a4c9e-b458-4edf-92ff-3be07d68c28d</string>
              <string>8e046241-74a3-44e0-9bf9-f0b73a36717d</string>
              <string>0f0df6c9-1153-4e0b-800b-533492ba936c</string>
              <string>f016be9d-205d-4cdd-b4fb-e7139700dd22</string>
              <string>0801e501-57ac-4418-ac59-08e0edadabf3</string>
              <string>2607531a-4f9b-48ed-9ef4-b1b71b880864</string>
              <string>455c536f-d3fb-4832-941e-ef230b683590</string>
              <string>31b37e0b-cfbf-4787-b5d3-2082328fafd7</string>
              <string>21e47d6b-9863-4045-82af-8941087a4da1</string>
              <string>9ef7f26f-d3f7-420d-a30f-26f948be596d</string>
              <string>b3869a86-7d4f-4a10-b116-24b758a191b3</string>
              <string>a6825055-e697-487f-9add-560ad9567a60</string>
              <string>f7552865-32a0-4b5b-a5fd-9b0bddffddf9</string>
              <string>9f2bcd3c-8a74-49f1-b910-aa05c509c9cb</string>
              <string>bd270438-7262-47f8-8656-1baf51287078</string>
              <string>61b10ef9-baef-45e2-b747-a0987d851033</string>
              <string>aa5ba1e6-ab11-4a9a-a03c-e0fe58b49086</string>
              <string>ec653b8b-7362-4167-98ff-3845c7560d11</string>
              <string>1710d009-1bb2-4db6-a8d8-1493e6802c18</string>
              <string>25c5fbce-cb87-4ba9-a572-0be49242a0b2</string>
              <string>13738349-4cc4-43de-9365-a27ead17b524</string>
              <string>a43f7553-71de-41d3-aa16-93cc7a48bafc</string>
              <string>e7b4b295-2b47-4b4f-97b9-b9a9082bffb1</string>
              <string>854f78f8-4ebc-4c99-9a05-c26015671807</string>
              <string>e1900e14-c2a2-426e-86f0-971353d60cdd</string>
              <string>fd3b93dd-8b65-4b9f-a090-09bc7ec9aa12</string>
              <string>72c5d63d-a405-4ccf-b85e-dba740b14fdd</string>
              <string>f6efe381-7851-4bec-96c3-231b7baf666f</string>
              <string>2f3b524c-9d7b-43f7-b4ce-e84d27cc82ff</string>
              <string>99066deb-0d43-44f6-8823-b8cfe08e7185</string>
              <string>aa30f2b5-64cf-4396-b098-efeecb2224f2</string>
              <string>9fee4e0a-7a6d-4925-bc78-59df2c1f28af</string>
              <string>d23d6225-1145-484e-8164-f070fa1f2e8c</string>
              <string>57953b24-64cb-489d-9706-bf5dc1ef94ea</string>
              <string>08955a01-dda6-468b-a8cf-73586fe7d99f</string>
              <string>52d0a715-1be1-4fb2-8f3d-448c89c148f8</string>
              <string>4941f2fb-e641-4e0a-aba4-633ddf410760</string>
              <string>470c6c09-6850-4770-820c-bbfce54196bd</string>
              <string>21a820f0-205a-4046-8c4a-3788daca4d05</string>
              <string>5cee4e54-225f-43e4-830c-6dc3fb2826f2</string>
              <string>99643fbc-fa46-4c38-a7db-ac72833847f1</string>
              <string>9a44798a-871f-4402-9397-75241b18c6b0</string>
              <string>f1e2a84e-89e2-4ea0-8edd-4418f11b7eb7</string>
              <string>fe6275f5-4efa-4c86-90e2-8788c4f9c975</string>
              <string>081454ce-e155-45a1-bfc0-2297d6317259</string>
              <string>8b61cf50-9d95-43dd-b6ab-474e2a1d2d76</string>
              <string>5b245873-9491-4fa3-9bce-08c111cbe04f</string>
              <string>4041500f-7768-4011-b273-13fe61a2ebd6</string>
              <string>eaf28278-dd66-4bcc-b7e7-9a6c422db1ee</string>
              <string>0e0f63c0-5b51-4626-9a50-c0e2f5f94d37</string>
              <string>337347d0-d5f6-492c-9dc3-638a211132ff</string>
              <string>f836f593-4c61-49bd-be13-4cb3f9c6cffb</string>
              <string>0fec52ca-be59-47c9-85b1-700dc3b3dc2e</string>
              <string>a42ba030-2419-490c-8843-889e4197cf83</string>
              <string>4d75bdd7-6d1f-4db5-a7f8-4f63efa13197</string>
              <string>53d49d46-bd95-4ce5-8f98-7685217fedbf</string>
              <string>49a7b526-0577-4811-98c2-185bb6c22d91</string>
              <string>f8b35221-21af-4a86-9a4a-1b5657b5a029</string>
              <string>2f88fefe-6f80-46b6-a20a-04c29532073e</string>
              <string>8c637e01-95b0-4b11-a28f-4518b7f8d1ae</string>
              <string>7f5da166-70b8-48e0-9fa9-cf96fd867c30</string>
              <string>e3d85e42-6410-459f-95fc-2f98af8c0db9</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>bc768cd6-d735-40b1-9617-a3417481fe19</id>
                <name>Convert CSV to JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884963</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} csv - CSV string with column headers
	@return {String} return JSON object using column headers and field keys
*/
function convertCsvToJson(csv) {
	var textXML = SerializerFactory.getSerializer(&apos;DELIMITED&apos;).toXML(csv);
	var xml = new XML(textXML);
	var dataItems = [];
	for (var i = 1; i &lt;= xml[&apos;row&apos;].length() - 1; i++) {
		var jsonData = {};
		for (var j = 1; j &lt;= xml[&apos;row&apos;][0].children().length(); j++) {
			var column = &apos;column&apos; + j.toString();
			var header = xml[&apos;row&apos;][0][column].toString().replace(/\s/g, &apos;_&apos;).replace(/-/g, &apos;_&apos;).toLowerCase();
			var value = xml[&apos;row&apos;][i][column].toString();
			
			jsonData[header] = value;
			
		}
		dataItems.push(jsonData);
	}

	return JSON.stringify(dataItems);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>537d816c-81ff-4507-85c6-85e28b8c546c</id>
                <name>Convert JSON to CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885050</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts JSON to CSV.
**/
/*	@param {String} jsonData - JSON string with [0] index key as headers for csv
	@return {String} return csv
*/	

function convertJsonToCsv(data) {
	try{
		var json = JSON.parse(data);	
		var fields = Object.keys(json[0])
		var replacer = function(key, value) { return value === null ? &apos;&apos; : value } 
		var csv = json.map(function(row){
		  return fields.map(function(fieldName){
		    return JSON.stringify(row[fieldName], replacer)
		  }).join(&apos;,&apos;)
		})
		csv.unshift(fields.join(&apos;,&apos;)) // add header column
		csv = csv.join(&apos;\r\n&apos;);
		return csv;
	}catch(error){
		return error;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>ff3df0b8-cfa2-4ec9-82ac-37c9e4830e0c</id>
                <name>Generic - Send message to channel destination</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function sendMessageToChannelDestination(channelID, destinationID, map, data) {
	var msgMap;
	var outData = {};
	
	if (!map) {
		msgMap = Maps.map();
	} else {
		msgMap = Maps.map(map);
	}

	if (data == null || data == undefined) {
		data = &apos;&apos;;
	}

	if (msgMap.get(&apos;sourceChannelId&apos;) == null) {
		msgMap.add(&apos;sourceChannelId&apos;, channelId);
	}
	if (msgMap.get(&apos;sourceChannelName&apos;) == null) {
		msgMap.add(&apos;sourceChannelName&apos;, channelName);
	}

	// Dirty way to handle connector message not being defined. Handles cases where this function 
	// is used in a source js writer.
	try {
		if (msgMap.get(&apos;sourceMessageId&apos;) == null &amp;&amp; connectorMessage &amp;&amp; connectorMessage.getMessageId()) {
			msgMap.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString());
		}
	} catch(ex) {}

	var msgRequest = new RawMessage(data, [destinationID], msgMap);
	var msgResponse = router.routeMessageByChannelId(channelID, msgRequest);

	if (msgResponse == null) {
		// return;
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;; 
	}
	if (msgResponse.getStatus() == null) {
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;;
	}

	if (msgResponse.getStatus() == &apos;ERROR&apos;) {
		throw msgResponse.getMessage();
	}

	return msgResponse.getMessage();
	
	
	// var msgResponse;

	/*
	try {
		msgResponse = router.routeMessageByChannelId(channelID, msgRequest);
		outData.status = &apos;success&apos;;
		outData.status_message = &apos;message successfully sent to channel&apos;;
	} catch (ex) {
		outData.status = &apos;error&apos;;
		outData.status_message = ex.toString();
		return outData;
	}

	if (msgResponse.getStatus() == null) {
		outData.response_status = &apos;unknown&apos;;
		logger.error(&apos;Code Template &quot;Send message to channel by id&quot;: channel &quot;&apos; + ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;);
	}
	
	switch (String(msgResponse.getStatus())) {
		case &apos;ERROR&apos;:
			outData.response_status = &apos;error&apos;;
			break;
		case &apos;FILTERED&apos;:
			outData.response_status = &apos;filtered&apos;;
			break;
		case &apos;QUEUED&apos;:
			outData.response_status = &apos;queued&apos;;
			break;
		case &apos;RECEIVED&apos;:
			outData.response_status = &apos;received&apos;;
			break;
		case &apos;SENT&apos;:
			outData.response_status = &apos;sent&apos;;
			break;
	}

	outData.response_message = msgResponse.getMessage();

	return outData;
	*/
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>f4cd9e71-4f8d-4472-80a9-31b533f4d578</id>
                <name>Get bots DB connection to specified environment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884906</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get a new bots database connection. Be sure to wrap in try/finally block to close database connection.

	@param {String} environment - prod, staging, dev, local
	@return {String} return database connection
*/
function GetBotsDBConnection() {
	var username = configurationMap.get(&apos;bots-db-user&apos;);
	var password = configurationMap.get(&apos;bots-db-pass&apos;);
	var uri = configurationMap.get(&apos;bots-db-uri&apos;);	
	return DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, uri, username, password);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>554bd282-172b-43a0-8902-992baf63b04d</id>
                <name>Get DB connection to specified environment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885107</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get a new database connection. 

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetDBConnection(environment) {
	if (environment != &apos;prod&apos; &amp;&amp; environment != &apos;staging&apos; &amp;&amp; environment != &apos;dev&apos; &amp;&amp; environment != &apos;local&apos;) {
		return null;
	}
	
	var username = configurationMap.get(&apos;docsink-db-user-&apos; + environment);
	var password = configurationMap.get(&apos;docsink-db-pass-&apos; + environment);
	var uri = configurationMap.get(&apos;docsink-db-uri-&apos; + environment);

	return DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.cj.jdbc.Driver&apos;, uri, username, password);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>552a87ed-b5a0-4546-9e5c-0a768661a351</id>
                <name>Postprocessor - Generate channel response</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884842</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function generateChannelResponse() {
	// This script executes once after a message has been processed
	// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
	
	var destinations = sourceMap.get(&apos;destinationSet&apos;);
	var metadataIds = destinations.toArray();
	
	if (metadataIds.length == 0) {
		return ResponseFactory.getErrorResponse(&apos;invalid request&apos;);
	}
	
	var smsg = message.getConnectorMessages().get(0);
	if (smsg.getStatus() == &apos;ERROR&apos;) {
		if (smsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(smsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(smsg.getResponseData().getMessage());
	}
	
	var metadataID = metadataIds[0];
	var cmsg = message.getConnectorMessages().get(metadataID);

	if (cmsg.getStatus() == &apos;ERROR&apos;) {
		if (cmsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(cmsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;SENT&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;FILTERED&apos;) {
		return ResponseFactory.getFilteredResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;QUEUED&apos;) {
		return ResponseFactory.getQueuedResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;RECEIVED&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else {
		return cmsg;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
            <name>WebPT-Common</name>
            <revision>2</revision>
            <lastModified>
              <time>1678715257049</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
                <name>Check if String contains</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122790</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
                <name>Check if String contains HTTP code</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122593</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>8515e088-5c50-47ee-9e2f-9fad1ecf48bd</id>
                <name>Check if String is JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123309</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Added by Kirby Knight
	12/21/2020
	Test for JSON

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5f2f84ba-3e66-4be3-8260-8fbd8258bd92</id>
                <name>Check if the PDF is valid</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122055</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
//This function is used for checking the word &quot;PDF&quot; in inbound attachment.
function isValidBase64PDF(base64) {
	const ENCODED_PDF_SIGN = &quot;JVBERi&quot;; // %PDF sign
	const PDF_EOF = &quot;JSVFT0YNCg&quot;; // %EOF
	var pdfBase64Size = (base64.length() * (3 / 4)) - 1;
	
	return (base64.indexOf(ENCODED_PDF_SIGN) != -1 &amp;&amp; base64.indexOf(PDF_EOF) != -1 &amp;&amp; pdf_base64_size &gt; 36);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
                <name>Convert JSON date to HL7v2 date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122137</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
                <name>Convert JSON datetime to HL7v2 datetime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122430</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>bb21449a-df39-48c6-be52-24106c8df4c4</id>
                <name>Destination Formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Kirby Knight 03/10/2021
	
	This function will remove all other ROOT.Meta.Destinations nodes that are not passed in the
	destination variable and removes the ROOT.Meta.Destinations[x].Destination node

	@param {Any} destination - 
	@return {String} return description
*/
function formatDestinations(destination) {
var arrDestinations = msg[&apos;Meta&apos;][&apos;Destinations&apos;];
	//  Start at the end of the array because of the posibility of deleted array items 
	for (var i = arrDestinations.length - 1; i &gt;= 0; i--) {
		if (arrDestinations[i][&apos;Destination&apos;] == destination){
			delete arrDestinations[i][&apos;Destination&apos;]
		}else if (arrDestinations[i][&apos;Destination&apos;] != destination){
			arrDestinations.splice(i, 1);
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
                <name>Extract JSON node data</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121748</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7ed44f8a-fa40-4f3e-9426-3021604eabe0</id>
                <name>Get Feature Value by Name and Database</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123262</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns a string containing the feature value (system property) for a specific client database.

	@param {String} featureName - name of the feature, ie: &quot;BetterPTBidirectionalScheduling&quot;
	@param {String} databaseIdentifier - database name or databaseID / TenantID
	@param {String} databaseIdentifierType - what value is provided in databaseIdentifier. current options include &quot;ID&quot; or &quot;NAME&quot;
	@return {String} returns feature value
*/
function getFeatureValueByNameDatabase(featureName, databaseIdentifier, databaseIdentifierType) {
	var paramList = new Packages.java.util.ArrayList();
	paramList.add(featureName);
	paramList.add(databaseIdentifier);
	paramList.add(databaseIdentifierType);
	
	var sSQL = &apos;EXEC [dbo].[pr_FeatureValueByNameDatabase] ?, ?, ?&apos;;
	
	try {
		var result = executeSharedDBStatementFhirCh(sSQL, true, paramList);
		var featureValue ;
		if(result.next()){			//Added
		 featureValue = result.getString(1);
		}
		return featureValue;
	} catch (e) {
		logger.error(e);
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>9842be2c-c633-42ac-87f1-f91aca9e370f</id>
                <name>JSON Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121776</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function populates the MR and PI patient IDS to channelMap

	@return {String} return description
*/
function jsonPatientIds() {
	for each (patId in msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) {
	if (patId[&apos;IDType&apos;].toString() == &apos;MR&apos;){
		channelMap.put(&apos;extPatId&apos;, patId[&apos;ID&apos;].toString());
	}else if(patId[&apos;IDType&apos;].toString() == &apos;PI&apos;){
		channelMap.put(&apos;patId&apos;, patId[&apos;ID&apos;].toString());
	}
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
                <name>Verify JSON node for existance</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>394664c0-d536-4310-970e-181dc03ee7da</id>
            <name>WebPT-Conversions</name>
            <revision>2</revision>
            <lastModified>
              <time>1690140133427</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
                <name>Convert FHIR codes to HL7v2 codes</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122899</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>2fc8cbf3-0d92-4d1d-a3d6-136c09bd9f2a</id>
            <name>WebPT-Custom Database Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1703964939898</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>23c0b510-63e4-40fa-a4e1-7b2b92ce9a96</id>
                <name>Execute Statement Shared DB Conn clientDb Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122401</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Executes a SQL statement using a shared database connection stored in the Global Map. If the
connection does not exist, creates it.

@param {String} statement - The SQL statement to execute
@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
@param {List} paramList - A Java List object containing the parameters for the statement (optional)
 */
function executeSharedDBStatementclientDbCh(statement, isQuery, paramList) {
    var result;

    try {
        var dbConnclientDbCh = globalChannelMap.get(&quot;dbConnclientDbCh&quot;);

        if (dbConnclientDbCh == null || dbConnclientDbCh.getConnection().isClosed()) {
            dbConnclientDbCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;), $(&apos;dbClient&apos;), $(&apos;dbUserFhir&apos;), $(&apos;dbPwFhir&apos;));
            globalChannelMap.put(&quot;dbConnclientDbCh&quot;, dbConnclientDbCh);
        }

        if (paramList == undefined) {
            paramList = new Packages.java.util.ArrayList();
        }

        if (isQuery) {
            result = dbConnclientDbCh.executeCachedQuery(statement, paramList);
        } else {
            result = dbConnclientDbCh.executeUpdate(statement, paramList);
        }
    } catch (e) {
        logger.error(e);
    }
    finally {
        return result;
    }
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>4efb3110-a83f-48b5-93ad-79c847b51865</id>
                <name>Execute Statement Shared DB Conn clntAcl Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123455</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClntAclCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnClntAclCh = globalChannelMap.get(&quot;dbConnClntAclCh&quot;);

		if (dbConnClntAclCh == null || dbConnClntAclCh.getConnection().isClosed())
		{
			dbConnClntAclCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbClntAcl&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnClntAclCh&quot;, dbConnClntAclCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnClntAclCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnClntAclCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>d96d45dd-57f7-4aa9-9bf4-e464d31b94c6</id>
                <name>Execute Statement Shared DB Conn FHIR</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121922</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhir(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhir.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhir.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6014068e-c021-4a38-9fa6-6f38f6a2cdab</id>
                <name>Execute Statement Shared DB Conn FHIR Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123492</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhirCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhirCh = globalChannelMap.get(&quot;dbConnFhirCh&quot;);

		if (dbConnFhirCh == null || dbConnFhirCh.getConnection().isClosed())
		{
			dbConnFhirCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnFhirCh&quot;, dbConnFhirCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhirCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhirCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fbd5c4a1-b816-4496-acdf-067005f1d376</id>
                <name>Execute Statement Shared DB Conn Translations Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123008</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementTranslationsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnTranslationsCh = globalChannelMap.get(&quot;dbConnTranslationsCh&quot;);

		if (dbConnTranslationsCh == null || dbConnTranslationsCh.getConnection().isClosed())
		{
			dbConnTranslationsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlTranslations&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnTranslationsCh&quot;, dbConnTranslationsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnTranslationsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnTranslationsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5d1a5577-4ba4-4d1e-b6cd-e2d924164909</id>
                <name>Execute Statement with Shared DB Conn ODS Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122280</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdsCh = globalChannelMap.get(&quot;dbConnOdsCh&quot;);

		if (dbConnOdsCh == null || dbConnOdsCh.getConnection().isClosed())
		{
			dbConnOdsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOds&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdsCh&quot;, dbConnOdsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>3991db14-0c0b-4123-952c-5164c1ded501</id>
                <name>Execute Statement with Shared DB Conn ODW Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122960</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.  THis connects to the ODW db in Azure

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdwCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdwCh = globalChannelMap.get(&quot;dbConnOdwCh&quot;);

		if (dbConnOdwCh == null || dbConnOdwCh.getConnection().isClosed())
		{
			dbConnOdwCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOdw&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdwCh&quot;, dbConnOdwCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdwCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdwCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fae08c88-7550-479a-b8ed-ffef47e8eed9</id>
                <name>executeSharedDBStatementClient</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121956</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClient(statement, isQuery, paramList, dbname)
{
	var result;
 	var dburl= &apos;jdbc:sqlserver://AZW1DEV-SQL02.clinicient.com:1433;databaseName=&apos;+dbname+&apos;&apos;;
	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),dburl,$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			
			//globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		result = dbConnFhir.executeCachedQuery(statement);
	
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>ed20a457-5beb-4aea-9bb9-cf91112ccc56</id>
            <name>WebPT-Default Functions</name>
            <revision>10</revision>
            <lastModified>
              <time>1690140133487</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>a8a9a0c8-9322-46dc-bef8-011eb3d70291</id>
                <name>Create Header for CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121678</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This creates a header for csv files based on the contents of the header variable.  The header
	variable is populated in the channel from the outbound msg template

	@return {String} return description
*/
function createHeader() {
	//Destination transformer.  this creates the header for each new file

	var path = java.nio.file.Paths.get($(&apos;filePath&apos;)+$(&apos;fileName&apos;));
	var bytes = (new java.lang.String($(&apos;header&apos;))).getBytes(&quot;UTF-8&quot;);
	try {
	  java.nio.file.Files.write(path, bytes, java.nio.file.StandardOpenOption.CREATE_NEW);
	}
	catch (e) {
	  //logger.info(&quot; should throw IOException if file already exists&quot;);
	
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5a886a1f-dab1-41b5-94c6-1a639907d7da</id>
                <name>Filter Message Evaluate Received Checksum</name>
                <revision>33</revision>
                <lastModified>
                  <time>1678916806664</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating a checksum for each provided message.  We save off the most recent 100 unique checksum values in a global 
	array so if the current message has been recently received we are able to ignore it.
	
	@author:  	Jeffrey Ritz
	@scriptName: 	filterEvaluateReceivedChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {boolean} filter - return filter boolean (true= filter msg, false= do not filter msg)
		persist received_checksum global ChannelMap array
		persist filterMessage ChannelMap variable
	@history
*/
function filterEvaluateReceivedChecksum(msg) {	

	var scriptName= &apos;filterEvaluateReceivedChecksum&apos;
	var filter = false;
	var received_len_limit = 999;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B connectorMessage.getRawData() typeof: &apos;+typeof(connectorMessage.getRawData())+&apos; msg: &apos;+connectorMessage.getRawData());
	} // end if 
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	// var dataBytes = new java.lang.String(connectorMessage.getRawData()).getBytes(&apos;UTF-8&apos;);
	// message = new String(message.getBytes(&quot;utf-8&quot;), &quot;utf-8&quot;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	// var dataBytes = new java.lang.String(msg.getBytes(&apos;UTF-8&apos;));
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);

	// var messageObjectgetBytes= checksum.update(connectorMessage.getRawData().getBytes());
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 
	
	$c(&apos;checksum&apos;, checksum.getValue());
	
	//grab the global channel map variable holding the last X unique checksums that we&apos;ve received
	var received = $gc(&apos;received_checksums&apos;);
	
	if (received == undefined) {
		var received = new Array();
		received.push(checksum.getValue());
	} else {
		//check if we&apos;ve recently received this message, skip it if so
		if (received.indexOf(checksum.getValue()) &gt; -1) {
			filter = true;
		//we haven&apos;t seen it recently, so remember it and allow it through
		} else {
			var received_len = received.length;
			if (received_len &gt; received_len_limit) {
				//remove oldest/first entry, shift all entries forward, and add new entry to end
				received.shift();
				received[received_len_limit] = checksum.getValue();
			} else {
				//add new entry to end of array
				received[received_len] = checksum.getValue();
			} // end if 
		} // end if 
	} // end if 

	 //debug code
	/*for (x=0; x&lt;=received_len_limit; x++) {
		$c(&apos;received-&apos;+x, received[x]);
	} */

	$c(&apos;filterMessage&apos;,filter);
	$gc(&apos;received_checksums&apos;,received);

	return filter;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fbd0484d-74a2-48e4-aedd-f97c2fcefa16</id>
                <name>Get Message Checksum</name>
                <revision>12</revision>
                <lastModified>
                  <time>1678916806703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating and reutrning a checksum for each provided message
	
	@author:  	Jeffrey Ritz
	@scriptName: 	getMessageChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {object} result - return checksum value
	@history
	2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() to remove the exponential representation of the number value
*/
function getMessageChecksum(msg) {	

	var scriptName= &apos;getMessageChecksum&apos;;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	} // end if 
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 

	var checksumValue= checksum.getValue();
	// 2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() 
	var arrChecksumValue= new Array(); 
	arrChecksumValue.push(checksumValue);
	$c(&apos;checksum&apos;, arrChecksumValue);

	return checksumValue;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>91db9bd1-ca92-4dcc-bba4-e1ece603fc87</id>
                <name>Remove Child Object From Parent Object Json</name>
                <revision>22</revision>
                <lastModified>
                  <time>1678916845037</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON child object and it&apos;s descendents from a parent object JSON
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeChildObjectFromParentObjectJson.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
		{string} parentObject - place the name of the string to be designated as the parent object in the JSON
		{string} childObject  - place the name of the string to be designated as the child object to be deleted from the JSON
	@param {object} msg - return modified Json object msg excluding specified Json child object
	@history
*/
function removeChildObjectFromParentObjectJson(msg, parentObject, childObject) {
	
	var scriptName= &apos;removeChildObjectFromParentObjectJson&apos;;
	var debug= 0;

	//var strObjJson= JSON.parse(msg);
	var strObjJson= JSON.stringify(msg);
	
	//var objJson= JSON.parse(msg);
	var newParentObjects= new Object();
	var parentObjects= msg;
	var arrParentObjects= new Array();
	var arrTransactionObjects= new Array();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof parentObjects: &apos;+typeof(parentObjects));
	for (var key in parentObjects) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof key: &apos;+typeof(key)+&apos; key: &apos;+key);
		if(key== parentObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof objJson[key]: &apos;+typeof(parentObjects[key])+&apos; parentObjects[key]: &apos;+JSON.stringify(parentObjects[key]));
			
			var newChildObjects= new Object();
			var childObjects= parentObjects[key];
			var arrChildObjects= new Array();
			
			for(var key2 in childObjects) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key2: &apos;+typeof(key2)+&apos; key2: &apos;+key2+&apos; childObject: &apos;+childObject);
				for(var key3 in childObjects[key2]) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key3: &apos;+typeof(key3)+&apos; key3: &apos;+key3+&apos; childObject: &apos;+childObject);
					if(key3== childObject) {
						var transactionObject= new Object();
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; childObject typeof: &apos;+typeof(childObjects[key2][key3])+&apos; childObject: &apos;+JSON.stringify(childObjects[key2][key3]));
						transactionObject.key= key3;
						transactionObject.value= childObjects[key2][key3];
						delete childObjects[key2][key3];
						if(debug&gt;0) logger.info(&apos;DEBUG::&apos;+scriptName+&apos; DELETE childObject: &apos;+key3+&apos; of parentObject: &apos;+JSON.stringify(childObjects[key2]));
						arrTransactionObjects.push(transactionObject);
					} // end if
				} // end for 
				arrChildObjects.push(childObjects[key2]);
			} // end for
			newParentObjects[key]= arrChildObjects;
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add all child keys: &apos;+JSON.stringify(arrChildObjects)+&apos; into ParentObject[&apos;+key+&apos;]: &apos;+newParentObjects[key]);
		} else {
			newParentObjects[key]= parentObjects[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+parentObjects[key]+&apos; string: &apos;+JSON.stringify(parentObjects[key]));
		} // end if
		arrParentObjects.push(newParentObjects);
	} // end for 
	var newMsg= arrParentObjects;
	channelMap.put(&apos;removeChildObjectMsg&apos;,newMsg);
	channelMap.put(&apos;removedChildTransIds&apos;,arrTransactionObjects);
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));
	return newMsg;
	
} </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2ff28338-dfb6-445d-a04e-c74b5486a08c</id>
                <name>Remove Object From Json</name>
                <revision>26</revision>
                <lastModified>
                  <time>1703964988318</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  Desc: This function will remove a JSON object and it&apos;s descendents from the msg
	
	fileName: 	removeObjectFromJson.js
	name:		Remove Object From Json	
	Authored:  	Jeffrey Ritz
	Created: 		2023-03-09
	Details:
		@param IN {string} msg - provide parent JSON object (i.e. Inbound connectorMessage.getRawData() - msg)
		@param IN {string} removeObject - provide JSON object to evaluate and remove from parent JSON object (msg)
		OUT (object) newMsg - return JSON object from processing
	@history
	2023-03-15 JER - Modified to include removeObject function parameter to specify specific JSON object by referencing key to be removed
*/
function removeObjectFromJson(msg, removeObject) {
	
	var scriptName= &apos;removeObjectFromJson&apos;;
	var debug= 0;
	//var objJson= JSON.stringify(msg);
	var objJson= JSON.parse(msg);
	var newObjJson= new Object();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof objJson: &apos;+typeof(objJson)+&apos; objJSON: &apos;+JSON.stringify(objJson));
	for (var key in objJson) {
		if(key== removeObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; DELETE key: &apos;+key);
			// delete objJson[key];
		} else {
			newObjJson[key]= objJson[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+objJson[key]+&apos; string: &apos;+JSON.stringify(objJson[key]));
		} // end if 
	} // end for 
	var newMsg= newObjJson;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));

	// return JSON.stringify(newMsg);
	return newMsg;
} 
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>993a6fd8-454a-4133-ba32-dbcfea71582b</id>
                <name>Update EDITransactionLog</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123233</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	The purpose of this function is to update the status in Insight.
	Populate the channel map with the following variables functionalGroupControlNumber, status, eventDate

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateStatus () {

	//  Build the llst of paramters to pass to the database
	var paramList = new Packages.java.util.ArrayList();
	paramList.add($(&apos;functionalGroupControlNumber&apos;));
	paramList.add($(&apos;eventDate&apos;));  //dateTime in the acknoledged field in this format (&quot;2017-07-31 14:15:01.577&quot;)
	paramList.add(new java.lang.Integer(parseInt($(&apos;status&apos;), 10)));
	
//	logger.info(&quot;updateStatus &quot;+paramList);

	//  SQL Statement and paramters that will be sent to SQL
	var statement = &quot;EXEC dbo.pr_EDITransactionLog_Update ?, ?, ?&quot;;
	//  Code template used for establishiing connection and passing the sql statement and parameter list  
	var result = executeSharedDBStatementFhirCh(statement, false, paramList);
	return result;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>42cb290e-5fb0-46b8-82db-576ea1e1ba0d</id>
                <name>Update EDITransactionLog from responseStatus in the response transformer </name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123356</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Call this in the response transformer on the destination.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateReponseStatus() {
	var status = 0;
	if (responseStatus == SENT){
		var status = 1;
		channelMap.put(&apos;status&apos;,status);
	}

updateStatus()
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2223579b-f914-4be7-a575-f1a2a2aa1ae2</id>
                <name>ValidateToString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123044</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} mapping - 
	@param {Any} defaultValue - 
	@param {Any} replacement - 
	@return {String} return description
*/
function validateToString(mapping, defaultValue, replacement) {
    if (mapping == null) {
        mapping = &apos;&apos;;
    }
    return validate(mapping, defaultValue, replacement).toString() + &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>8c9a8268-4ef0-43e9-ae5b-bf8895f0b80c</id>
            <name>WebPT-FORMAT</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939902</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>Include any functions or codes with 
-date &amp; time formating related
-data type formatting</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>920c9ead-70a6-4168-9d95-89261b73ae44</id>
                <name>12digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123520</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Take any 12 digit string yyyyMMddHHmm and change to MM/dd/yyyy HH:mm 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm
*/
function yyyyMMddHHmm(string) {
	return DateUtil.convertDate(&quot;yyyyMMddHHmm&quot;, &quot;MM/dd/yyyy HH:mm&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fe2689ec-1946-46d5-8dd6-8fbbf106e1e6</id>
                <name>14digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122871</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Take 14 digit string yyyyMMddHHmmss and change to MM/dd/yyyy HH:mm:ss 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm:ss
*/
function yyyyMMddHHmmss(string) {
	if (string.length == 14) {
		  return DateUtil.convertDate(&quot;yyyyMMddHHmmss&quot;, &quot;MM/dd/yyyy HH:mm:ss&quot;, string);
	}
	else {
		return &quot;unregcognized string&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>b9db35e2-d5bd-48a1-8cc6-3475c698d7b4</id>
                <name>currentDT_yyyy-MM-dd HH:mm:ss.SSS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123114</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Kirby Knight
	Date Modified:  11/09/2020
	Retund the current date/time down to the millisecond

	@return {String} return description
*/
function currentDtToMilliseconds() {
	return DateUtil.getCurrentDate(&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7e747999-4bec-43fc-978d-7049d3543cf0</id>
                <name>fixHL7NodeOrder</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/

function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>dfedacf6-773b-413e-b78d-1bf16a92071d</id>
                <name>formatHL7Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121643</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Take any eight digit HL7 message data string (yyyyMMdd) and formats it human-readable format (MM/dd/yyyy)
	such as 20090612 -&gt; 06/12/2009

	@param {String} arg1 - 8 digit HL7 message data string yyyyMMdd
	@return {String} return date format as MM/dd/yyyy
*/
function formatHL7Date(string) {
	return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;MM/dd/yyyy&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>a8f54921-2cb6-4134-8806-3c4e10a757d9</id>
                <name>getCurrentLocalTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122014</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = getCurrentLocalTimestamp();

	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestamp() {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(&quot;EST&quot;)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6c5f1bd8-ebbf-4c8e-b465-0be8ccaba0d0</id>
                <name>getCurrentLocalTimeToMs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123077</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	Gets the current local date/time to the milliseconds
	Converts to the timezone that is passed in Examples (America/New_York, America/Chicago, America/Phoenix )

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestampToMs(timeZone) {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timeZone)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>78d74c5b-c881-404a-ad96-4e909e1a19f3</id>
                <name>phoneToE164</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121982</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Insight phone number to E164 format 5554446666 to +15554446666

	@param {Any} phoneIn - 
	@return {String} return description
*/
function phoneToE164(phoneIn) {
	logger.info(&apos;L1 &apos;+phoneIn);
	if(phoneIn != null ){
	//phoneIn = &apos;+1&apos; + phoneIn.toString(); 
	logger.info(&apos;L2 &apos;+phoneIn);
	return &apos;+1&apos; + phoneIn.toString(); 
	} else{
		return null;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>6a32d94d-408c-4e10-9799-e45e150b5c1f</id>
            <name>WebPT-MISC</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939909</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>miscellaneous javascript</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>84b4f1c7-f82d-4140-9fbd-98a95f68ff32</id>
                <name>getChannelState</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122648</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetChannelState(channel_id) {

    var channel_status = &quot;NA&quot;;

    var channel_count = parseInt(Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().size());

    for(var i=0;i&lt;channel_count;i++) {
        if (channel_id == Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getChannelId()) {
            channel_status = Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getState();
        }
    }

    return channel_status;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>715435a9-cb15-4e8f-bc5b-4249eaea6e17</id>
                <name>momentjs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122487</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Testing MIRTH-3794 using external JavaScript library &quot;moment.js&quot;
*/
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=b():&quot;function&quot;==typeof define&amp;&amp;define.amd?define(b):a.moment=b()}(this,function(){&quot;use strict&quot;;function a(){return Hc.apply(null,arguments)}function b(a){Hc=a}function c(a){return&quot;[object Array]&quot;===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||&quot;[object Date]&quot;===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c&lt;a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&amp;&amp;(a[c]=b[c]);return f(b,&quot;toString&quot;)&amp;&amp;(a.toString=b.toString),f(b,&quot;valueOf&quot;)&amp;&amp;(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ca(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&amp;&amp;(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow&lt;0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&amp;&amp;(a._isValid=a._isValid&amp;&amp;0===b.charsLeftOver&amp;&amp;0===b.unusedTokens.length&amp;&amp;void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if(&quot;undefined&quot;!=typeof b._isAMomentObject&amp;&amp;(a._isAMomentObject=b._isAMomentObject),&quot;undefined&quot;!=typeof b._i&amp;&amp;(a._i=b._i),&quot;undefined&quot;!=typeof b._f&amp;&amp;(a._f=b._f),&quot;undefined&quot;!=typeof b._l&amp;&amp;(a._l=b._l),&quot;undefined&quot;!=typeof b._strict&amp;&amp;(a._strict=b._strict),&quot;undefined&quot;!=typeof b._tzm&amp;&amp;(a._tzm=b._tzm),&quot;undefined&quot;!=typeof b._isUTC&amp;&amp;(a._isUTC=b._isUTC),&quot;undefined&quot;!=typeof b._offset&amp;&amp;(a._offset=b._offset),&quot;undefined&quot;!=typeof b._pf&amp;&amp;(a._pf=j(b)),&quot;undefined&quot;!=typeof b._locale&amp;&amp;(a._locale=b._locale),Jc.length&gt;0)for(c in Jc)d=Jc[c],e=b[d],&quot;undefined&quot;!=typeof e&amp;&amp;(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),Kc===!1&amp;&amp;(Kc=!0,a.updateOffset(this),Kc=!1)}function o(a){return a instanceof n||null!=a&amp;&amp;null!=a._isAMomentObject}function p(a){return 0&gt;a?Math.ceil(a):Math.floor(a)}function q(a){var b=+a,c=0;return 0!==b&amp;&amp;isFinite(b)&amp;&amp;(c=p(b)),c}function r(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e&gt;d;d++)(c&amp;&amp;a[d]!==b[d]||!c&amp;&amp;q(a[d])!==q(b[d]))&amp;&amp;g++;return g+f}function s(){}function t(a){return a?a.toLowerCase().replace(&quot;_&quot;,&quot;-&quot;):a}function u(a){for(var b,c,d,e,f=0;f&lt;a.length;){for(e=t(a[f]).split(&quot;-&quot;),b=e.length,c=t(a[f+1]),c=c?c.split(&quot;-&quot;):null;b&gt;0;){if(d=v(e.slice(0,b).join(&quot;-&quot;)))return d;if(c&amp;&amp;c.length&gt;=b&amp;&amp;r(e,c,!0)&gt;=b-1)break;b--}f++}return null}function v(a){var b=null;if(!Lc[a]&amp;&amp;&quot;undefined&quot;!=typeof module&amp;&amp;module&amp;&amp;module.exports)try{b=Ic._abbr,require(&quot;./locale/&quot;+a),w(b)}catch(c){}return Lc[a]}function w(a,b){var c;return a&amp;&amp;(c=&quot;undefined&quot;==typeof b?y(a):x(a,b),c&amp;&amp;(Ic=c)),Ic._abbr}function x(a,b){return null!==b?(b.abbr=a,Lc[a]=Lc[a]||new s,Lc[a].set(b),w(a),Lc[a]):(delete Lc[a],null)}function y(a){var b;if(a&amp;&amp;a._locale&amp;&amp;a._locale._abbr&amp;&amp;(a=a._locale._abbr),!a)return Ic;if(!c(a)){if(b=v(a))return b;a=[a]}return u(a)}function z(a,b){var c=a.toLowerCase();Mc[c]=Mc[c+&quot;s&quot;]=Mc[b]=a}function A(a){return&quot;string&quot;==typeof a?Mc[a]||Mc[a.toLowerCase()]:void 0}function B(a){var b,c,d={};for(c in a)f(a,c)&amp;&amp;(b=A(c),b&amp;&amp;(d[b]=a[c]));return d}function C(b,c){return function(d){return null!=d?(E(this,b,d),a.updateOffset(this,c),this):D(this,b)}}function D(a,b){return a._d[&quot;get&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b]()}function E(a,b,c){return a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b](c)}function F(a,b){var c;if(&quot;object&quot;==typeof a)for(c in a)this.set(c,a[c]);else if(a=A(a),&quot;function&quot;==typeof this[a])return this[a](b);return this}function G(a,b,c){var d=&quot;&quot;+Math.abs(a),e=b-d.length,f=a&gt;=0;return(f?c?&quot;+&quot;:&quot;&quot;:&quot;-&quot;)+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function H(a,b,c,d){var e=d;&quot;string&quot;==typeof d&amp;&amp;(e=function(){return this[d]()}),a&amp;&amp;(Qc[a]=e),b&amp;&amp;(Qc[b[0]]=function(){return G(e.apply(this,arguments),b[1],b[2])}),c&amp;&amp;(Qc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function I(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,&quot;&quot;):a.replace(/\\/g,&quot;&quot;)}function J(a){var b,c,d=a.match(Nc);for(b=0,c=d.length;c&gt;b;b++)Qc[d[b]]?d[b]=Qc[d[b]]:d[b]=I(d[b]);return function(e){var f=&quot;&quot;;for(b=0;c&gt;b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function K(a,b){return a.isValid()?(b=L(b,a.localeData()),Pc[b]=Pc[b]||J(b),Pc[b](a)):a.localeData().invalidDate()}function L(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Oc.lastIndex=0;d&gt;=0&amp;&amp;Oc.test(a);)a=a.replace(Oc,c),Oc.lastIndex=0,d-=1;return a}function M(a){return&quot;function&quot;==typeof a&amp;&amp;&quot;[object Function]&quot;===Object.prototype.toString.call(a)}function N(a,b,c){dd[a]=M(b)?b:function(a){return a&amp;&amp;c?c:b}}function O(a,b){return f(dd,a)?dd[a](b._strict,b._locale):new RegExp(P(a))}function P(a){return a.replace(&quot;\\&quot;,&quot;&quot;).replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,&quot;\\$&amp;&quot;)}function Q(a,b){var c,d=b;for(&quot;string&quot;==typeof a&amp;&amp;(a=[a]),&quot;number&quot;==typeof b&amp;&amp;(d=function(a,c){c[b]=q(a)}),c=0;c&lt;a.length;c++)ed[a[c]]=d}function R(a,b){Q(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function S(a,b,c){null!=b&amp;&amp;f(ed,a)&amp;&amp;ed[a](b,c._a,c,a)}function T(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function U(a){return this._months[a.month()]}function V(a){return this._monthsShort[a.month()]}function W(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12&gt;d;d++){if(e=h([2e3,d]),c&amp;&amp;!this._longMonthsParse[d]&amp;&amp;(this._longMonthsParse[d]=new RegExp(&quot;^&quot;+this.months(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;),this._shortMonthsParse[d]=new RegExp(&quot;^&quot;+this.monthsShort(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;)),c||this._monthsParse[d]||(f=&quot;^&quot;+this.months(e,&quot;&quot;)+&quot;|^&quot;+this.monthsShort(e,&quot;&quot;),this._monthsParse[d]=new RegExp(f.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),c&amp;&amp;&quot;MMMM&quot;===b&amp;&amp;this._longMonthsParse[d].test(a))return d;if(c&amp;&amp;&quot;MMM&quot;===b&amp;&amp;this._shortMonthsParse[d].test(a))return d;if(!c&amp;&amp;this._monthsParse[d].test(a))return d}}function X(a,b){var c;return&quot;string&quot;==typeof b&amp;&amp;(b=a.localeData().monthsParse(b),&quot;number&quot;!=typeof b)?a:(c=Math.min(a.date(),T(a.year(),b)),a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+&quot;Month&quot;](b,c),a)}function Y(b){return null!=b?(X(this,b),a.updateOffset(this,!0),this):D(this,&quot;Month&quot;)}function Z(){return T(this.year(),this.month())}function $(a){var b,c=a._a;return c&amp;&amp;-2===j(a).overflow&amp;&amp;(b=c[gd]&lt;0||c[gd]&gt;11?gd:c[hd]&lt;1||c[hd]&gt;T(c[fd],c[gd])?hd:c[id]&lt;0||c[id]&gt;24||24===c[id]&amp;&amp;(0!==c[jd]||0!==c[kd]||0!==c[ld])?id:c[jd]&lt;0||c[jd]&gt;59?jd:c[kd]&lt;0||c[kd]&gt;59?kd:c[ld]&lt;0||c[ld]&gt;999?ld:-1,j(a)._overflowDayOfYear&amp;&amp;(fd&gt;b||b&gt;hd)&amp;&amp;(b=hd),j(a).overflow=b),a}function _(b){a.suppressDeprecationWarnings===!1&amp;&amp;&quot;undefined&quot;!=typeof console&amp;&amp;console.warn&amp;&amp;console.warn(&quot;Deprecation warning: &quot;+b)}function aa(a,b){var c=!0;return g(function(){return c&amp;&amp;(_(a+&quot;\n&quot;+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function ba(a,b){od[a]||(_(b),od[a]=!0)}function ca(a){var b,c,d=a._i,e=pd.exec(d);if(e){for(j(a).iso=!0,b=0,c=qd.length;c&gt;b;b++)if(qd[b][1].exec(d)){a._f=qd[b][0];break}for(b=0,c=rd.length;c&gt;b;b++)if(rd[b][1].exec(d)){a._f+=(e[6]||&quot; &quot;)+rd[b][0];break}d.match(ad)&amp;&amp;(a._f+=&quot;Z&quot;),va(a)}else a._isValid=!1}function da(b){var c=sd.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ca(b),void(b._isValid===!1&amp;&amp;(delete b._isValid,a.createFromInputFallback(b))))}function ea(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970&gt;a&amp;&amp;h.setFullYear(a),h}function fa(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970&gt;a&amp;&amp;b.setUTCFullYear(a),b}function ga(a){return ha(a)?366:365}function ha(a){return a%4===0&amp;&amp;a%100!==0||a%400===0}function ia(){return ha(this.year())}function ja(a,b,c){var d,e=c-b,f=c-a.day();return f&gt;e&amp;&amp;(f-=7),e-7&gt;f&amp;&amp;(f+=7),d=Da(a).add(f,&quot;d&quot;),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ka(a){return ja(a,this._week.dow,this._week.doy).week}function la(){return this._week.dow}function ma(){return this._week.doy}function na(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function oa(a){var b=ja(this,1,4).week;return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function pa(a,b,c,d,e){var f,g=6+e-d,h=fa(a,0,1+g),i=h.getUTCDay();return e&gt;i&amp;&amp;(i+=7),c=null!=c?1*c:e,f=1+g+7*(b-1)-i+c,{year:f&gt;0?a:a-1,dayOfYear:f&gt;0?f:ga(a-1)+f}}function qa(a){var b=Math.round((this.clone().startOf(&quot;day&quot;)-this.clone().startOf(&quot;year&quot;))/864e5)+1;return null==a?b:this.add(a-b,&quot;d&quot;)}function ra(a,b,c){return null!=a?a:null!=b?b:c}function sa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ta(a){var b,c,d,e,f=[];if(!a._d){for(d=sa(a),a._w&amp;&amp;null==a._a[hd]&amp;&amp;null==a._a[gd]&amp;&amp;ua(a),a._dayOfYear&amp;&amp;(e=ra(a._a[fd],d[fd]),a._dayOfYear&gt;ga(e)&amp;&amp;(j(a)._overflowDayOfYear=!0),c=fa(e,0,a._dayOfYear),a._a[gd]=c.getUTCMonth(),a._a[hd]=c.getUTCDate()),b=0;3&gt;b&amp;&amp;null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7&gt;b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[id]&amp;&amp;0===a._a[jd]&amp;&amp;0===a._a[kd]&amp;&amp;0===a._a[ld]&amp;&amp;(a._nextDay=!0,a._a[id]=0),a._d=(a._useUTC?fa:ea).apply(null,f),null!=a._tzm&amp;&amp;a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&amp;&amp;(a._a[id]=24)}}function ua(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=ra(b.GG,a._a[fd],ja(Da(),1,4).year),d=ra(b.W,1),e=ra(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=ra(b.gg,a._a[fd],ja(Da(),f,g).year),d=ra(b.w,1),null!=b.d?(e=b.d,f&gt;e&amp;&amp;++d):e=null!=b.e?b.e+f:f),h=pa(c,d,e,g,f),a._a[fd]=h.year,a._dayOfYear=h.dayOfYear}function va(b){if(b._f===a.ISO_8601)return void ca(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=&quot;&quot;+b._i,i=h.length,k=0;for(e=L(b._f,b._locale).match(Nc)||[],c=0;c&lt;e.length;c++)f=e[c],d=(h.match(O(f,b))||[])[0],d&amp;&amp;(g=h.substr(0,h.indexOf(d)),g.length&gt;0&amp;&amp;j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Qc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),S(f,d,b)):b._strict&amp;&amp;!d&amp;&amp;j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length&gt;0&amp;&amp;j(b).unusedInput.push(h),j(b).bigHour===!0&amp;&amp;b._a[id]&lt;=12&amp;&amp;b._a[id]&gt;0&amp;&amp;(j(b).bigHour=void 0),b._a[id]=wa(b._locale,b._a[id],b._meridiem),ta(b),$(b)}function wa(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&amp;&amp;12&gt;b&amp;&amp;(b+=12),d||12!==b||(b=0),b):b}function xa(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e&lt;a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&amp;&amp;(b._useUTC=a._useUTC),b._f=a._f[e],va(b),k(b)&amp;&amp;(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d&gt;f)&amp;&amp;(d=f,c=b));g(a,c||b)}function ya(a){if(!a._d){var b=B(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ta(a)}}function za(a){var b=new n($(Aa(a)));return b._nextDay&amp;&amp;(b.add(1,&quot;d&quot;),b._nextDay=void 0),b}function Aa(a){var b=a._i,e=a._f;return a._locale=a._locale||y(a._l),null===b||void 0===e&amp;&amp;&quot;&quot;===b?l({nullInput:!0}):(&quot;string&quot;==typeof b&amp;&amp;(a._i=b=a._locale.preparse(b)),o(b)?new n($(b)):(c(e)?xa(a):e?va(a):d(b)?a._d=b:Ba(a),a))}function Ba(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):&quot;string&quot;==typeof f?da(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ta(b)):&quot;object&quot;==typeof f?ya(b):&quot;number&quot;==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ca(a,b,c,d,e){var f={};return&quot;boolean&quot;==typeof c&amp;&amp;(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,za(f)}function Da(a,b,c,d){return Ca(a,b,c,d,!1)}function Ea(a,b){var d,e;if(1===b.length&amp;&amp;c(b[0])&amp;&amp;(b=b[0]),!b.length)return Da();for(d=b[0],e=1;e&lt;b.length;++e)(!b[e].isValid()||b[e][a](d))&amp;&amp;(d=b[e]);return d}function Fa(){var a=[].slice.call(arguments,0);return Ea(&quot;isBefore&quot;,a)}function Ga(){var a=[].slice.call(arguments,0);return Ea(&quot;isAfter&quot;,a)}function Ha(a){var b=B(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=y(),this._bubble()}function Ia(a){return a instanceof Ha}function Ja(a,b){H(a,0,0,function(){var a=this.utcOffset(),c=&quot;+&quot;;return 0&gt;a&amp;&amp;(a=-a,c=&quot;-&quot;),c+G(~~(a/60),2)+b+G(~~a%60,2)})}function Ka(a){var b=(a||&quot;&quot;).match(ad)||[],c=b[b.length-1]||[],d=(c+&quot;&quot;).match(xd)||[&quot;-&quot;,0,0],e=+(60*d[1])+q(d[2]);return&quot;+&quot;===d[0]?e:-e}function La(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Da(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Da(b).local()}function Ma(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Na(b,c){var d,e=this._offset||0;return null!=b?(&quot;string&quot;==typeof b&amp;&amp;(b=Ka(b)),Math.abs(b)&lt;16&amp;&amp;(b=60*b),!this._isUTC&amp;&amp;c&amp;&amp;(d=Ma(this)),this._offset=b,this._isUTC=!0,null!=d&amp;&amp;this.add(d,&quot;m&quot;),e!==b&amp;&amp;(!c||this._changeInProgress?bb(this,Ya(b-e,&quot;m&quot;),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ma(this)}function Oa(a,b){return null!=a?(&quot;string&quot;!=typeof a&amp;&amp;(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Pa(a){return this.utcOffset(0,a)}function Qa(a){return this._isUTC&amp;&amp;(this.utcOffset(0,a),this._isUTC=!1,a&amp;&amp;this.subtract(Ma(this),&quot;m&quot;)),this}function Ra(){return this._tzm?this.utcOffset(this._tzm):&quot;string&quot;==typeof this._i&amp;&amp;this.utcOffset(Ka(this._i)),this}function Sa(a){return a=a?Da(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Ta(){return this.utcOffset()&gt;this.clone().month(0).utcOffset()||this.utcOffset()&gt;this.clone().month(5).utcOffset()}function Ua(){if(&quot;undefined&quot;!=typeof this._isDSTShifted)return this._isDSTShifted;var a={};if(m(a,this),a=Aa(a),a._a){var b=a._isUTC?h(a._a):Da(a._a);this._isDSTShifted=this.isValid()&amp;&amp;r(a._a,b.toArray())&gt;0}else this._isDSTShifted=!1;return this._isDSTShifted}function Va(){return!this._isUTC}function Wa(){return this._isUTC}function Xa(){return this._isUTC&amp;&amp;0===this._offset}function Ya(a,b){var c,d,e,g=a,h=null;return Ia(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:&quot;number&quot;==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=yd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:0,d:q(h[hd])*c,h:q(h[id])*c,m:q(h[jd])*c,s:q(h[kd])*c,ms:q(h[ld])*c}):(h=zd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:Za(h[2],c),M:Za(h[3],c),d:Za(h[4],c),h:Za(h[5],c),m:Za(h[6],c),s:Za(h[7],c),w:Za(h[8],c)}):null==g?g={}:&quot;object&quot;==typeof g&amp;&amp;(&quot;from&quot;in g||&quot;to&quot;in g)&amp;&amp;(e=_a(Da(g.from),Da(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ha(g),Ia(a)&amp;&amp;f(a,&quot;_locale&quot;)&amp;&amp;(d._locale=a._locale),d}function Za(a,b){var c=a&amp;&amp;parseFloat(a.replace(&quot;,&quot;,&quot;.&quot;));return(isNaN(c)?0:c)*b}function $a(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,&quot;M&quot;).isAfter(b)&amp;&amp;--c.months,c.milliseconds=+b-+a.clone().add(c.months,&quot;M&quot;),c}function _a(a,b){var c;return b=La(b,a),a.isBefore(b)?c=$a(a,b):(c=$a(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function ab(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(ba(b,&quot;moment().&quot;+b+&quot;(period, number) is deprecated. Please use moment().&quot;+b+&quot;(number, period).&quot;),f=c,c=d,d=f),c=&quot;string&quot;==typeof c?+c:c,e=Ya(c,d),bb(this,e,a),this}}function bb(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&amp;&amp;b._d.setTime(+b._d+f*d),g&amp;&amp;E(b,&quot;Date&quot;,D(b,&quot;Date&quot;)+g*d),h&amp;&amp;X(b,D(b,&quot;Month&quot;)+h*d),e&amp;&amp;a.updateOffset(b,g||h)}function cb(a,b){var c=a||Da(),d=La(c,this).startOf(&quot;day&quot;),e=this.diff(d,&quot;days&quot;,!0),f=-6&gt;e?&quot;sameElse&quot;:-1&gt;e?&quot;lastWeek&quot;:0&gt;e?&quot;lastDay&quot;:1&gt;e?&quot;sameDay&quot;:2&gt;e?&quot;nextDay&quot;:7&gt;e?&quot;nextWeek&quot;:&quot;sameElse&quot;;return this.format(b&amp;&amp;b[f]||this.localeData().calendar(f,this,Da(c)))}function db(){return new n(this)}function eb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this&gt;+a):(c=o(a)?+a:+Da(a),c&lt;+this.clone().startOf(b))}function fb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+a&gt;+this):(c=o(a)?+a:+Da(a),+this.clone().endOf(b)&lt;c)}function gb(a,b,c){return this.isAfter(a,c)&amp;&amp;this.isBefore(b,c)}function hb(a,b){var c;return b=A(b||&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this===+a):(c=+Da(a),+this.clone().startOf(b)&lt;=c&amp;&amp;c&lt;=+this.clone().endOf(b))}function ib(a,b,c){var d,e,f=La(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=A(b),&quot;year&quot;===b||&quot;month&quot;===b||&quot;quarter&quot;===b?(e=jb(this,f),&quot;quarter&quot;===b?e/=3:&quot;year&quot;===b&amp;&amp;(e/=12)):(d=this-f,e=&quot;second&quot;===b?d/1e3:&quot;minute&quot;===b?d/6e4:&quot;hour&quot;===b?d/36e5:&quot;day&quot;===b?(d-g)/864e5:&quot;week&quot;===b?(d-g)/6048e5:d),c?e:p(e)}function jb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,&quot;months&quot;);return 0&gt;b-f?(c=a.clone().add(e-1,&quot;months&quot;),d=(b-f)/(f-c)):(c=a.clone().add(e+1,&quot;months&quot;),d=(b-f)/(c-f)),-(e+d)}function kb(){return this.clone().locale(&quot;en&quot;).format(&quot;ddd MMM DD YYYY HH:mm:ss [GMT]ZZ&quot;)}function lb(){var a=this.clone().utc();return 0&lt;a.year()&amp;&amp;a.year()&lt;=9999?&quot;function&quot;==typeof Date.prototype.toISOString?this.toDate().toISOString():K(a,&quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;):K(a,&quot;YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;)}function mb(b){var c=K(this,b||a.defaultFormat);return this.localeData().postformat(c)}function nb(a,b){return this.isValid()?Ya({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.from(Da(),a)}function pb(a,b){return this.isValid()?Ya({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function qb(a){return this.to(Da(),a)}function rb(a){var b;return void 0===a?this._locale._abbr:(b=y(a),null!=b&amp;&amp;(this._locale=b),this)}function sb(){return this._locale}function tb(a){switch(a=A(a)){case&quot;year&quot;:this.month(0);case&quot;quarter&quot;:case&quot;month&quot;:this.date(1);case&quot;week&quot;:case&quot;isoWeek&quot;:case&quot;day&quot;:this.hours(0);case&quot;hour&quot;:this.minutes(0);case&quot;minute&quot;:this.seconds(0);case&quot;second&quot;:this.milliseconds(0)}return&quot;week&quot;===a&amp;&amp;this.weekday(0),&quot;isoWeek&quot;===a&amp;&amp;this.isoWeekday(1),&quot;quarter&quot;===a&amp;&amp;this.month(3*Math.floor(this.month()/3)),this}function ub(a){return a=A(a),void 0===a||&quot;millisecond&quot;===a?this:this.startOf(a).add(1,&quot;isoWeek&quot;===a?&quot;week&quot;:a).subtract(1,&quot;ms&quot;)}function vb(){return+this._d-6e4*(this._offset||0)}function wb(){return Math.floor(+this/1e3)}function xb(){return this._offset?new Date(+this):this._d}function yb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function zb(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Ab(){return k(this)}function Bb(){return g({},j(this))}function Cb(){return j(this).overflow}function Db(a,b){H(0,[a,a.length],0,b)}function Eb(a,b,c){return ja(Da([a,11,31+b-c]),b,c).week}function Fb(a){var b=ja(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Gb(a){var b=ja(this,1,4).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Hb(){return Eb(this.year(),1,4)}function Ib(){var a=this.localeData()._week;return Eb(this.year(),a.dow,a.doy)}function Jb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Kb(a,b){return&quot;string&quot;!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),&quot;number&quot;==typeof a?a:null):parseInt(a,10)}function Lb(a){return this._weekdays[a.day()]}function Mb(a){return this._weekdaysShort[a.day()]}function Nb(a){return this._weekdaysMin[a.day()]}function Ob(a){var b,c,d;for(this._weekdaysParse=this._weekdaysParse||[],b=0;7&gt;b;b++)if(this._weekdaysParse[b]||(c=Da([2e3,1]).day(b),d=&quot;^&quot;+this.weekdays(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysShort(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysMin(c,&quot;&quot;),this._weekdaysParse[b]=new RegExp(d.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),this._weekdaysParse[b].test(a))return b}function Pb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Kb(a,this.localeData()),this.add(a-b,&quot;d&quot;)):b}function Qb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,&quot;d&quot;)}function Rb(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Sb(a,b){H(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Tb(a,b){return b._meridiemParse}function Ub(a){return&quot;p&quot;===(a+&quot;&quot;).toLowerCase().charAt(0)}function Vb(a,b,c){return a&gt;11?c?&quot;pm&quot;:&quot;PM&quot;:c?&quot;am&quot;:&quot;AM&quot;}function Wb(a,b){b[ld]=q(1e3*(&quot;0.&quot;+a))}function Xb(){return this._isUTC?&quot;UTC&quot;:&quot;&quot;}function Yb(){return this._isUTC?&quot;Coordinated Universal Time&quot;:&quot;&quot;}function Zb(a){return Da(1e3*a)}function $b(){return Da.apply(null,arguments).parseZone()}function _b(a,b,c){var d=this._calendar[a];return&quot;function&quot;==typeof d?d.call(b,c):d}function ac(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function bc(){return this._invalidDate}function cc(a){return this._ordinal.replace(&quot;%d&quot;,a)}function dc(a){return a}function ec(a,b,c,d){var e=this._relativeTime[c];return&quot;function&quot;==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function fc(a,b){var c=this._relativeTime[a&gt;0?&quot;future&quot;:&quot;past&quot;];return&quot;function&quot;==typeof c?c(b):c.replace(/%s/i,b)}function gc(a){var b,c;for(c in a)b=a[c],&quot;function&quot;==typeof b?this[c]=b:this[&quot;_&quot;+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+&quot;|&quot;+/\d{1,2}/.source)}function hc(a,b,c,d){var e=y(),f=h().set(d,b);return e[c](f,a)}function ic(a,b,c,d,e){if(&quot;number&quot;==typeof a&amp;&amp;(b=a,a=void 0),a=a||&quot;&quot;,null!=b)return hc(a,b,c,e);var f,g=[];for(f=0;d&gt;f;f++)g[f]=hc(a,f,c,e);return g}function jc(a,b){return ic(a,b,&quot;months&quot;,12,&quot;month&quot;)}function kc(a,b){return ic(a,b,&quot;monthsShort&quot;,12,&quot;month&quot;)}function lc(a,b){return ic(a,b,&quot;weekdays&quot;,7,&quot;day&quot;)}function mc(a,b){return ic(a,b,&quot;weekdaysShort&quot;,7,&quot;day&quot;)}function nc(a,b){return ic(a,b,&quot;weekdaysMin&quot;,7,&quot;day&quot;)}function oc(){var a=this._data;return this._milliseconds=Wd(this._milliseconds),this._days=Wd(this._days),this._months=Wd(this._months),a.milliseconds=Wd(a.milliseconds),a.seconds=Wd(a.seconds),a.minutes=Wd(a.minutes),a.hours=Wd(a.hours),a.months=Wd(a.months),a.years=Wd(a.years),this}function pc(a,b,c,d){var e=Ya(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function qc(a,b){return pc(this,a,b,1)}function rc(a,b){return pc(this,a,b,-1)}function sc(a){return 0&gt;a?Math.floor(a):Math.ceil(a)}function tc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f&gt;=0&amp;&amp;g&gt;=0&amp;&amp;h&gt;=0||0&gt;=f&amp;&amp;0&gt;=g&amp;&amp;0&gt;=h||(f+=864e5*sc(vc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=p(f/1e3),i.seconds=a%60,b=p(a/60),i.minutes=b%60,c=p(b/60),i.hours=c%24,g+=p(c/24),e=p(uc(g)),h+=e,g-=sc(vc(e)),d=p(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function uc(a){return 4800*a/146097}function vc(a){return 146097*a/4800}function wc(a){var b,c,d=this._milliseconds;if(a=A(a),&quot;month&quot;===a||&quot;year&quot;===a)return b=this._days+d/864e5,c=this._months+uc(b),&quot;month&quot;===a?c:c/12;switch(b=this._days+Math.round(vc(this._months)),a){case&quot;week&quot;:return b/7+d/6048e5;case&quot;day&quot;:return b+d/864e5;case&quot;hour&quot;:return 24*b+d/36e5;case&quot;minute&quot;:return 1440*b+d/6e4;case&quot;second&quot;:return 86400*b+d/1e3;case&quot;millisecond&quot;:return Math.floor(864e5*b)+d;default:throw new Error(&quot;Unknown unit &quot;+a)}}function xc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*q(this._months/12)}function yc(a){return function(){return this.as(a)}}function zc(a){return a=A(a),this[a+&quot;s&quot;]()}function Ac(a){return function(){return this._data[a]}}function Bc(){return p(this.days()/7)}function Cc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Dc(a,b,c){var d=Ya(a).abs(),e=ke(d.as(&quot;s&quot;)),f=ke(d.as(&quot;m&quot;)),g=ke(d.as(&quot;h&quot;)),h=ke(d.as(&quot;d&quot;)),i=ke(d.as(&quot;M&quot;)),j=ke(d.as(&quot;y&quot;)),k=e&lt;le.s&amp;&amp;[&quot;s&quot;,e]||1===f&amp;&amp;[&quot;m&quot;]||f&lt;le.m&amp;&amp;[&quot;mm&quot;,f]||1===g&amp;&amp;[&quot;h&quot;]||g&lt;le.h&amp;&amp;[&quot;hh&quot;,g]||1===h&amp;&amp;[&quot;d&quot;]||h&lt;le.d&amp;&amp;[&quot;dd&quot;,h]||1===i&amp;&amp;[&quot;M&quot;]||i&lt;le.M&amp;&amp;[&quot;MM&quot;,i]||1===j&amp;&amp;[&quot;y&quot;]||[&quot;yy&quot;,j];return k[2]=b,k[3]=+a&gt;0,k[4]=c,Cc.apply(null,k)}function Ec(a,b){return void 0===le[a]?!1:void 0===b?le[a]:(le[a]=b,!0)}function Fc(a){var b=this.localeData(),c=Dc(this,!a,b);return a&amp;&amp;(c=b.pastFuture(+this,c)),b.postformat(c)}function Gc(){var a,b,c,d=me(this._milliseconds)/1e3,e=me(this._days),f=me(this._months);a=p(d/60),b=p(a/60),d%=60,a%=60,c=p(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0&gt;m?&quot;-&quot;:&quot;&quot;)+&quot;P&quot;+(g?g+&quot;Y&quot;:&quot;&quot;)+(h?h+&quot;M&quot;:&quot;&quot;)+(i?i+&quot;D&quot;:&quot;&quot;)+(j||k||l?&quot;T&quot;:&quot;&quot;)+(j?j+&quot;H&quot;:&quot;&quot;)+(k?k+&quot;M&quot;:&quot;&quot;)+(l?l+&quot;S&quot;:&quot;&quot;):&quot;P0D&quot;}var Hc,Ic,Jc=a.momentProperties=[],Kc=!1,Lc={},Mc={},Nc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Pc={},Qc={},Rc=/\d/,Sc=/\d\d/,Tc=/\d{3}/,Uc=/\d{4}/,Vc=/[+-]?\d{6}/,Wc=/\d\d?/,Xc=/\d{1,3}/,Yc=/\d{1,4}/,Zc=/[+-]?\d{1,6}/,$c=/\d+/,_c=/[+-]?\d+/,ad=/Z|[+-]\d\d:?\d\d/gi,bd=/[+-]?\d+(\.\d{1,3})?/,cd=/[0-9]*[&apos;a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,dd={},ed={},fd=0,gd=1,hd=2,id=3,jd=4,kd=5,ld=6;H(&quot;M&quot;,[&quot;MM&quot;,2],&quot;Mo&quot;,function(){return this.month()+1}),H(&quot;MMM&quot;,0,0,function(a){return this.localeData().monthsShort(this,a)}),H(&quot;MMMM&quot;,0,0,function(a){return this.localeData().months(this,a)}),z(&quot;month&quot;,&quot;M&quot;),N(&quot;M&quot;,Wc),N(&quot;MM&quot;,Wc,Sc),N(&quot;MMM&quot;,cd),N(&quot;MMMM&quot;,cd),Q([&quot;M&quot;,&quot;MM&quot;],function(a,b){b[gd]=q(a)-1}),Q([&quot;MMM&quot;,&quot;MMMM&quot;],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[gd]=e:j(c).invalidMonth=a});var md=&quot;January_February_March_April_May_June_July_August_September_October_November_December&quot;.split(&quot;_&quot;),nd=&quot;Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec&quot;.split(&quot;_&quot;),od={};a.suppressDeprecationWarnings=!1;var pd=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,qd=[[&quot;YYYYYY-MM-DD&quot;,/[+-]\d{6}-\d{2}-\d{2}/],[&quot;YYYY-MM-DD&quot;,/\d{4}-\d{2}-\d{2}/],[&quot;GGGG-[W]WW-E&quot;,/\d{4}-W\d{2}-\d/],[&quot;GGGG-[W]WW&quot;,/\d{4}-W\d{2}/],[&quot;YYYY-DDD&quot;,/\d{4}-\d{3}/]],rd=[[&quot;HH:mm:ss.SSSS&quot;,/(T| )\d\d:\d\d:\d\d\.\d+/],[&quot;HH:mm:ss&quot;,/(T| )\d\d:\d\d:\d\d/],[&quot;HH:mm&quot;,/(T| )\d\d:\d\d/],[&quot;HH&quot;,/(T| )\d\d/]],sd=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=aa(&quot;moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.&quot;,function(a){a._d=new Date(a._i+(a._useUTC?&quot; UTC&quot;:&quot;&quot;))}),H(0,[&quot;YY&quot;,2],0,function(){return this.year()%100}),H(0,[&quot;YYYY&quot;,4],0,&quot;year&quot;),H(0,[&quot;YYYYY&quot;,5],0,&quot;year&quot;),H(0,[&quot;YYYYYY&quot;,6,!0],0,&quot;year&quot;),z(&quot;year&quot;,&quot;y&quot;),N(&quot;Y&quot;,_c),N(&quot;YY&quot;,Wc,Sc),N(&quot;YYYY&quot;,Yc,Uc),N(&quot;YYYYY&quot;,Zc,Vc),N(&quot;YYYYYY&quot;,Zc,Vc),Q([&quot;YYYYY&quot;,&quot;YYYYYY&quot;],fd),Q(&quot;YYYY&quot;,function(b,c){c[fd]=2===b.length?a.parseTwoDigitYear(b):q(b)}),Q(&quot;YY&quot;,function(b,c){c[fd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return q(a)+(q(a)&gt;68?1900:2e3)};var td=C(&quot;FullYear&quot;,!1);H(&quot;w&quot;,[&quot;ww&quot;,2],&quot;wo&quot;,&quot;week&quot;),H(&quot;W&quot;,[&quot;WW&quot;,2],&quot;Wo&quot;,&quot;isoWeek&quot;),z(&quot;week&quot;,&quot;w&quot;),z(&quot;isoWeek&quot;,&quot;W&quot;),N(&quot;w&quot;,Wc),N(&quot;ww&quot;,Wc,Sc),N(&quot;W&quot;,Wc),N(&quot;WW&quot;,Wc,Sc),R([&quot;w&quot;,&quot;ww&quot;,&quot;W&quot;,&quot;WW&quot;],function(a,b,c,d){b[d.substr(0,1)]=q(a)});var ud={dow:0,doy:6};H(&quot;DDD&quot;,[&quot;DDDD&quot;,3],&quot;DDDo&quot;,&quot;dayOfYear&quot;),z(&quot;dayOfYear&quot;,&quot;DDD&quot;),N(&quot;DDD&quot;,Xc),N(&quot;DDDD&quot;,Tc),Q([&quot;DDD&quot;,&quot;DDDD&quot;],function(a,b,c){c._dayOfYear=q(a)}),a.ISO_8601=function(){};var vd=aa(&quot;moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return this&gt;a?this:a}),wd=aa(&quot;moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return a&gt;this?this:a});Ja(&quot;Z&quot;,&quot;:&quot;),Ja(&quot;ZZ&quot;,&quot;&quot;),N(&quot;Z&quot;,ad),N(&quot;ZZ&quot;,ad),Q([&quot;Z&quot;,&quot;ZZ&quot;],function(a,b,c){c._useUTC=!0,c._tzm=Ka(a)});var xd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var yd=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,zd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Ya.fn=Ha.prototype;var Ad=ab(1,&quot;add&quot;),Bd=ab(-1,&quot;subtract&quot;);a.defaultFormat=&quot;YYYY-MM-DDTHH:mm:ssZ&quot;;var Cd=aa(&quot;moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.&quot;,function(a){return void 0===a?this.localeData():this.locale(a)});H(0,[&quot;gg&quot;,2],0,function(){return this.weekYear()%100}),H(0,[&quot;GG&quot;,2],0,function(){return this.isoWeekYear()%100}),Db(&quot;gggg&quot;,&quot;weekYear&quot;),Db(&quot;ggggg&quot;,&quot;weekYear&quot;),Db(&quot;GGGG&quot;,&quot;isoWeekYear&quot;),Db(&quot;GGGGG&quot;,&quot;isoWeekYear&quot;),z(&quot;weekYear&quot;,&quot;gg&quot;),z(&quot;isoWeekYear&quot;,&quot;GG&quot;),N(&quot;G&quot;,_c),N(&quot;g&quot;,_c),N(&quot;GG&quot;,Wc,Sc),N(&quot;gg&quot;,Wc,Sc),N(&quot;GGGG&quot;,Yc,Uc),N(&quot;gggg&quot;,Yc,Uc),N(&quot;GGGGG&quot;,Zc,Vc),N(&quot;ggggg&quot;,Zc,Vc),R([&quot;gggg&quot;,&quot;ggggg&quot;,&quot;GGGG&quot;,&quot;GGGGG&quot;],function(a,b,c,d){b[d.substr(0,2)]=q(a)}),R([&quot;gg&quot;,&quot;GG&quot;],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),H(&quot;Q&quot;,0,0,&quot;quarter&quot;),z(&quot;quarter&quot;,&quot;Q&quot;),N(&quot;Q&quot;,Rc),Q(&quot;Q&quot;,function(a,b){b[gd]=3*(q(a)-1)}),H(&quot;D&quot;,[&quot;DD&quot;,2],&quot;Do&quot;,&quot;date&quot;),z(&quot;date&quot;,&quot;D&quot;),N(&quot;D&quot;,Wc),N(&quot;DD&quot;,Wc,Sc),N(&quot;Do&quot;,function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),Q([&quot;D&quot;,&quot;DD&quot;],hd),Q(&quot;Do&quot;,function(a,b){b[hd]=q(a.match(Wc)[0],10)});var Dd=C(&quot;Date&quot;,!0);H(&quot;d&quot;,0,&quot;do&quot;,&quot;day&quot;),H(&quot;dd&quot;,0,0,function(a){return this.localeData().weekdaysMin(this,a)}),H(&quot;ddd&quot;,0,0,function(a){return this.localeData().weekdaysShort(this,a)}),H(&quot;dddd&quot;,0,0,function(a){return this.localeData().weekdays(this,a)}),H(&quot;e&quot;,0,0,&quot;weekday&quot;),H(&quot;E&quot;,0,0,&quot;isoWeekday&quot;),z(&quot;day&quot;,&quot;d&quot;),z(&quot;weekday&quot;,&quot;e&quot;),z(&quot;isoWeekday&quot;,&quot;E&quot;),N(&quot;d&quot;,Wc),N(&quot;e&quot;,Wc),N(&quot;E&quot;,Wc),N(&quot;dd&quot;,cd),N(&quot;ddd&quot;,cd),N(&quot;dddd&quot;,cd),R([&quot;dd&quot;,&quot;ddd&quot;,&quot;dddd&quot;],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),R([&quot;d&quot;,&quot;e&quot;,&quot;E&quot;],function(a,b,c,d){b[d]=q(a)});var Ed=&quot;Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday&quot;.split(&quot;_&quot;),Fd=&quot;Sun_Mon_Tue_Wed_Thu_Fri_Sat&quot;.split(&quot;_&quot;),Gd=&quot;Su_Mo_Tu_We_Th_Fr_Sa&quot;.split(&quot;_&quot;);H(&quot;H&quot;,[&quot;HH&quot;,2],0,&quot;hour&quot;),H(&quot;h&quot;,[&quot;hh&quot;,2],0,function(){return this.hours()%12||12}),Sb(&quot;a&quot;,!0),Sb(&quot;A&quot;,!1),z(&quot;hour&quot;,&quot;h&quot;),N(&quot;a&quot;,Tb),N(&quot;A&quot;,Tb),N(&quot;H&quot;,Wc),N(&quot;h&quot;,Wc),N(&quot;HH&quot;,Wc,Sc),N(&quot;hh&quot;,Wc,Sc),Q([&quot;H&quot;,&quot;HH&quot;],id),Q([&quot;a&quot;,&quot;A&quot;],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),Q([&quot;h&quot;,&quot;hh&quot;],function(a,b,c){b[id]=q(a),j(c).bigHour=!0});var Hd=/[ap]\.?m?\.?/i,Id=C(&quot;Hours&quot;,!0);H(&quot;m&quot;,[&quot;mm&quot;,2],0,&quot;minute&quot;),z(&quot;minute&quot;,&quot;m&quot;),N(&quot;m&quot;,Wc),N(&quot;mm&quot;,Wc,Sc),Q([&quot;m&quot;,&quot;mm&quot;],jd);var Jd=C(&quot;Minutes&quot;,!1);H(&quot;s&quot;,[&quot;ss&quot;,2],0,&quot;second&quot;),z(&quot;second&quot;,&quot;s&quot;),N(&quot;s&quot;,Wc),N(&quot;ss&quot;,Wc,Sc),Q([&quot;s&quot;,&quot;ss&quot;],kd);var Kd=C(&quot;Seconds&quot;,!1);H(&quot;S&quot;,0,0,function(){return~~(this.millisecond()/100)}),H(0,[&quot;SS&quot;,2],0,function(){return~~(this.millisecond()/10)}),H(0,[&quot;SSS&quot;,3],0,&quot;millisecond&quot;),H(0,[&quot;SSSS&quot;,4],0,function(){return 10*this.millisecond()}),H(0,[&quot;SSSSS&quot;,5],0,function(){return 100*this.millisecond()}),H(0,[&quot;SSSSSS&quot;,6],0,function(){return 1e3*this.millisecond()}),H(0,[&quot;SSSSSSS&quot;,7],0,function(){return 1e4*this.millisecond()}),H(0,[&quot;SSSSSSSS&quot;,8],0,function(){return 1e5*this.millisecond()}),H(0,[&quot;SSSSSSSSS&quot;,9],0,function(){return 1e6*this.millisecond()}),z(&quot;millisecond&quot;,&quot;ms&quot;),N(&quot;S&quot;,Xc,Rc),N(&quot;SS&quot;,Xc,Sc),N(&quot;SSS&quot;,Xc,Tc);var Ld;for(Ld=&quot;SSSS&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)N(Ld,$c);for(Ld=&quot;S&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)Q(Ld,Wb);var Md=C(&quot;Milliseconds&quot;,!1);H(&quot;z&quot;,0,0,&quot;zoneAbbr&quot;),H(&quot;zz&quot;,0,0,&quot;zoneName&quot;);var Nd=n.prototype;Nd.add=Ad,Nd.calendar=cb,Nd.clone=db,Nd.diff=ib,Nd.endOf=ub,Nd.format=mb,Nd.from=nb,Nd.fromNow=ob,Nd.to=pb,Nd.toNow=qb,Nd.get=F,Nd.invalidAt=Cb,Nd.isAfter=eb,Nd.isBefore=fb,Nd.isBetween=gb,Nd.isSame=hb,Nd.isValid=Ab,Nd.lang=Cd,Nd.locale=rb,Nd.localeData=sb,Nd.max=wd,Nd.min=vd,Nd.parsingFlags=Bb,Nd.set=F,Nd.startOf=tb,Nd.subtract=Bd,Nd.toArray=yb,Nd.toObject=zb,Nd.toDate=xb,Nd.toISOString=lb,Nd.toJSON=lb,Nd.toString=kb,Nd.unix=wb,Nd.valueOf=vb,Nd.year=td,Nd.isLeapYear=ia,Nd.weekYear=Fb,Nd.isoWeekYear=Gb,Nd.quarter=Nd.quarters=Jb,Nd.month=Y,Nd.daysInMonth=Z,Nd.week=Nd.weeks=na,Nd.isoWeek=Nd.isoWeeks=oa,Nd.weeksInYear=Ib,Nd.isoWeeksInYear=Hb,Nd.date=Dd,Nd.day=Nd.days=Pb,Nd.weekday=Qb,Nd.isoWeekday=Rb,Nd.dayOfYear=qa,Nd.hour=Nd.hours=Id,Nd.minute=Nd.minutes=Jd,Nd.second=Nd.seconds=Kd,
Nd.millisecond=Nd.milliseconds=Md,Nd.utcOffset=Na,Nd.utc=Pa,Nd.local=Qa,Nd.parseZone=Ra,Nd.hasAlignedHourOffset=Sa,Nd.isDST=Ta,Nd.isDSTShifted=Ua,Nd.isLocal=Va,Nd.isUtcOffset=Wa,Nd.isUtc=Xa,Nd.isUTC=Xa,Nd.zoneAbbr=Xb,Nd.zoneName=Yb,Nd.dates=aa(&quot;dates accessor is deprecated. Use date instead.&quot;,Dd),Nd.months=aa(&quot;months accessor is deprecated. Use month instead&quot;,Y),Nd.years=aa(&quot;years accessor is deprecated. Use year instead&quot;,td),Nd.zone=aa(&quot;moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779&quot;,Oa);var Od=Nd,Pd={sameDay:&quot;[Today at] LT&quot;,nextDay:&quot;[Tomorrow at] LT&quot;,nextWeek:&quot;dddd [at] LT&quot;,lastDay:&quot;[Yesterday at] LT&quot;,lastWeek:&quot;[Last] dddd [at] LT&quot;,sameElse:&quot;L&quot;},Qd={LTS:&quot;h:mm:ss A&quot;,LT:&quot;h:mm A&quot;,L:&quot;MM/DD/YYYY&quot;,LL:&quot;MMMM D, YYYY&quot;,LLL:&quot;MMMM D, YYYY h:mm A&quot;,LLLL:&quot;dddd, MMMM D, YYYY h:mm A&quot;},Rd=&quot;Invalid date&quot;,Sd=&quot;%d&quot;,Td=/\d{1,2}/,Ud={future:&quot;in %s&quot;,past:&quot;%s ago&quot;,s:&quot;a few seconds&quot;,m:&quot;a minute&quot;,mm:&quot;%d minutes&quot;,h:&quot;an hour&quot;,hh:&quot;%d hours&quot;,d:&quot;a day&quot;,dd:&quot;%d days&quot;,M:&quot;a month&quot;,MM:&quot;%d months&quot;,y:&quot;a year&quot;,yy:&quot;%d years&quot;},Vd=s.prototype;Vd._calendar=Pd,Vd.calendar=_b,Vd._longDateFormat=Qd,Vd.longDateFormat=ac,Vd._invalidDate=Rd,Vd.invalidDate=bc,Vd._ordinal=Sd,Vd.ordinal=cc,Vd._ordinalParse=Td,Vd.preparse=dc,Vd.postformat=dc,Vd._relativeTime=Ud,Vd.relativeTime=ec,Vd.pastFuture=fc,Vd.set=gc,Vd.months=U,Vd._months=md,Vd.monthsShort=V,Vd._monthsShort=nd,Vd.monthsParse=W,Vd.week=ka,Vd._week=ud,Vd.firstDayOfYear=ma,Vd.firstDayOfWeek=la,Vd.weekdays=Lb,Vd._weekdays=Ed,Vd.weekdaysMin=Nb,Vd._weekdaysMin=Gd,Vd.weekdaysShort=Mb,Vd._weekdaysShort=Fd,Vd.weekdaysParse=Ob,Vd.isPM=Ub,Vd._meridiemParse=Hd,Vd.meridiem=Vb,w(&quot;en&quot;,{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===q(a%100/10)?&quot;th&quot;:1===b?&quot;st&quot;:2===b?&quot;nd&quot;:3===b?&quot;rd&quot;:&quot;th&quot;;return a+c}}),a.lang=aa(&quot;moment.lang is deprecated. Use moment.locale instead.&quot;,w),a.langData=aa(&quot;moment.langData is deprecated. Use moment.localeData instead.&quot;,y);var Wd=Math.abs,Xd=yc(&quot;ms&quot;),Yd=yc(&quot;s&quot;),Zd=yc(&quot;m&quot;),$d=yc(&quot;h&quot;),_d=yc(&quot;d&quot;),ae=yc(&quot;w&quot;),be=yc(&quot;M&quot;),ce=yc(&quot;y&quot;),de=Ac(&quot;milliseconds&quot;),ee=Ac(&quot;seconds&quot;),fe=Ac(&quot;minutes&quot;),ge=Ac(&quot;hours&quot;),he=Ac(&quot;days&quot;),ie=Ac(&quot;months&quot;),je=Ac(&quot;years&quot;),ke=Math.round,le={s:45,m:45,h:22,d:26,M:11},me=Math.abs,ne=Ha.prototype;ne.abs=oc,ne.add=qc,ne.subtract=rc,ne.as=wc,ne.asMilliseconds=Xd,ne.asSeconds=Yd,ne.asMinutes=Zd,ne.asHours=$d,ne.asDays=_d,ne.asWeeks=ae,ne.asMonths=be,ne.asYears=ce,ne.valueOf=xc,ne._bubble=tc,ne.get=zc,ne.milliseconds=de,ne.seconds=ee,ne.minutes=fe,ne.hours=ge,ne.days=he,ne.weeks=Bc,ne.months=ie,ne.years=je,ne.humanize=Fc,ne.toISOString=Gc,ne.toString=Gc,ne.toJSON=Gc,ne.locale=rb,ne.localeData=sb,ne.toIsoString=aa(&quot;toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)&quot;,Gc),ne.lang=Cd,H(&quot;X&quot;,0,0,&quot;unix&quot;),H(&quot;x&quot;,0,0,&quot;valueOf&quot;),N(&quot;x&quot;,_c),N(&quot;X&quot;,bd),Q(&quot;X&quot;,function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),Q(&quot;x&quot;,function(a,b,c){c._d=new Date(q(a))}),a.version=&quot;2.10.6&quot;,b(Da),a.fn=Od,a.min=Fa,a.max=Ga,a.utc=h,a.unix=Zb,a.months=jc,a.isDate=d,a.locale=w,a.invalid=l,a.duration=Ya,a.isMoment=o,a.weekdays=lc,a.parseZone=$b,a.localeData=y,a.isDuration=Ia,a.monthsShort=kc,a.weekdaysMin=nc,a.defineLocale=x,a.weekdaysShort=mc,a.normalizeUnits=A,a.relativeTimeThreshold=Ec;var oe=a;return oe});</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2c64669f-f07e-4365-bf64-c559ace83004</id>
                <name>stopOnErrorCount</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122375</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to Stop a channel if it reaches a particular error count. 
	Also sends an alert message via another channel (this sends a sms via our monitoring system).

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function stopOnErrorCount(cid, errorCount) {
	var channelStatisticsController = Packages.com.mirth.connect.server.controllers.ChannelStatisticsController.getInstance();
	var channelStatusController = Packages.com.mirth.connect.server.controllers.ChannelStatusController.getInstance();
	var stats = channelStatisticsController.getStatistics(cid);
	// var numOfQueued = stats.queued;
	var numOfErrors = stats.error;

	if(numOfErrors &gt; errorCount )
	{
		//Stop Me
		channelStatusController.stopChannel(cid);
		//Alert msg sent to _SVHALERT channel
		var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
		var channelName = channelController.getDeployedChannelById(cid).getName();
		var alertmsg = &apos;mirth01 mirth_channel_status codeTemplate_stopOnErrorCount 0 &apos; +
					   &apos;channel &apos; + channelName + &apos; stopped&apos;;
		router.routeMessage(&apos;_SVHALERT&apos;, alertmsg);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>08044817-3504-4fc1-80ee-404870195151</id>
                <name>test</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122745</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.
	searchword
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function testfunc(arg1) {
	return arg1;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
            <name>WebPT-Mirth</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121602</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
                <name>Fix HL7v2 Node Order</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121804</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>35f4c250-08b4-4e42-8e60-f85aa98dfe50</id>
            <name>WebPT-Translations</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939924</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>be8f057b-2640-4613-b2e7-83326c59169c</id>
                <name>AddZeros</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122826</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function addZeroes(num) {
   return num.toLocaleString(&quot;en&quot;, {useGrouping: false, minimumFractionDigits: 2})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>51913864-7702-489a-b7c6-54992c12b19d</id>
                <name>FindLookupValueWithDefault</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122218</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithDefault ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        //obj.LeftValue = LeftValue;
        //obj.RightValue1 = DefaultValue1;
        //obj.RightValue2   = DefaultValue2; 
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);
            var result = pattern.test(LeftValue );

            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>c276be9f-c8f1-4dea-8df0-e000c6745271</id>
                <name>FindLookupValueWithInsuranceId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122080</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithInsuranceId ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);             
            var result = pattern.test(LeftValue );
	
            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7d746da2-58c6-44eb-ad5c-c5bfd0a0c537</id>
                <name>UseExternalProblemID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122349</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalProblemID() {

if ([&apos;2804&apos;, &apos;2822&apos;].indexOf($(&apos;tenantId&apos;) + &apos;&apos;) &gt; -1) {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitexternalproblemid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitaccountnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>07730e85-7f30-4ddf-90a4-78183c896ab5</id>
                <name>UseExternalVisitID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122192</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalVisitID() {
	
if ($(&apos;tenantId&apos;)  == &apos;9999&apos; ) {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitexternalvisitid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitvisitnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="4.0.0">
      <id>99b43124-34ef-4ead-a348-ef0ac0a52539</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>_File_ORU_In_ToPDF</name>
      <description></description>
      <revision>1</revision>
      <sourceConnector version="4.0.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.file.FileReceiverProperties" version="4.0.0">
          <pluginProperties/>
          <pollConnectorProperties version="4.0.0">
            <pollingType>INTERVAL</pollingType>
            <pollOnStart>false</pollOnStart>
            <pollingFrequency>5000</pollingFrequency>
            <pollingHour>0</pollingHour>
            <pollingMinute>0</pollingMinute>
            <cronJobs/>
            <pollConnectorPropertiesAdvanced>
              <weekly>true</weekly>
              <inactiveDays>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
              </inactiveDays>
              <dayOfMonth>1</dayOfMonth>
              <allDay>true</allDay>
              <startingHour>8</startingHour>
              <startingMinute>0</startingMinute>
              <endingHour>17</endingHour>
              <endingMinute>0</endingMinute>
            </pollConnectorPropertiesAdvanced>
          </pollConnectorProperties>
          <sourceConnectorProperties version="4.0.0">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <scheme>FILE</scheme>
          <host>C:/HL7/ORU/In</host>
          <fileFilter>*.hl7</fileFilter>
          <regex>false</regex>
          <directoryRecursion>false</directoryRecursion>
          <ignoreDot>true</ignoreDot>
          <anonymous>true</anonymous>
          <username>anonymous</username>
          <password>anonymous</password>
          <timeout>10000</timeout>
          <secure>true</secure>
          <passive>true</passive>
          <validateConnection>true</validateConnection>
          <afterProcessingAction>MOVE</afterProcessingAction>
          <moveToDirectory>../Processed</moveToDirectory>
          <moveToFileName>${originalFilename}.${SYSTIME}</moveToFileName>
          <errorReadingAction>NONE</errorReadingAction>
          <errorResponseAction>AFTER_PROCESSING</errorResponseAction>
          <errorMoveToDirectory></errorMoveToDirectory>
          <errorMoveToFileName></errorMoveToFileName>
          <checkFileAge>true</checkFileAge>
          <fileAge>1000</fileAge>
          <fileSizeMinimum>0</fileSizeMinimum>
          <fileSizeMaximum></fileSizeMaximum>
          <ignoreFileSizeMaximum>true</ignoreFileSizeMaximum>
          <sortBy>date</sortBy>
          <binary>false</binary>
          <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        </properties>
        <transformer version="4.0.0">
          <elements>
            <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
              <name>channelId</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <variable>channelId</variable>
              <mapping></mapping>
              <defaultValue>connectorMessage.getChannelId()</defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
              <name>message</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <variable>message</variable>
              <mapping></mapping>
              <defaultValue>connectorMessage.getRawData()</defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
              <name>call_getMSH_v23</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <script>// Javascript INSERT statement
// Modified 2014-09-03 22:21 CT JER

/*
	var tContent=connectorMessage.getRawData();
	var tChannel_name=ChannelUtil.getDeployedChannelName(channelId);
	var tChannel_connector=connectorMessage.getConnectorName();
*/
var scriptName= &quot;call_getMSH_v23&quot;;
var debug= 0;
var objMSH= getMSH_v23(msg);
// channelMap.put(&apos;objMSH&apos;,JSON.stringify(objMSH));
channelMap.put(&apos;objMSH&apos;,objMSH);

logger.error(&quot;MessageType: &quot;+objMSH.messageType+&quot; EventType: &quot;+objMSH.eventType+&quot; SendingApp: &quot;+objMSH.sendingApplication+&quot; SendingFac: &quot;+objMSH.sendingFacility+ 
	&quot; MessageControlId: &quot;+objMSH.messageControlID+&quot; MessageDateTime: &quot;+objMSH.messageDateTime+&quot; HL7Version: &quot;+objMSH.hl7version);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
              <name>call_getPID_v23</name>
              <sequenceNumber>3</sequenceNumber>
              <enabled>true</enabled>
              <script>var scriptName= &quot;call_getPID_v23&quot;;
var objPID= getPID_v23(msg);
var debug= 0;
// channelMap.put(&apos;objMSH&apos;,JSON.stringify(objMSH));
channelMap.put(&apos;objPID&apos;,objPID);

if (debug&gt; 0) { logger.error(scriptName+&quot;::DEBUG PatientId: &quot;+objPID.patientId+&quot; LastName: &quot;+objPID.patientName.lastName+&quot; FirstName: &quot;+objPID.patientName.firstName+&quot; PatientDOB: &quot;+objPID.dateTimeBirth+&quot; Gender: &quot;+objPID.gender+&quot; Address: &quot;+objPID.patientAddress.streetAddress+&quot; City: &quot;+objPID.patientAddress.city+&quot; State: &quot;+objPID.patientAddress.stateOrProvince+&quot; AccountNumber: &quot;+objPID.accountNumber); }

channelMap.put(&apos;objPID.patientId&apos;,objPID.patientId);
channelMap.put(&apos;objPID.patientLastName&apos;,objPID.patientName.lastName);
channelMap.put(&apos;objPID.patientFirstName&apos;,objPID.patientName.firstName);
channelMap.put(&apos;objPID.dateOfBirth&apos;,objPID.dateTimeBirth);
channelMap.put(&apos;objPID.gender&apos;,objPID.gender);
channelMap.put(&apos;objPID.address&apos;,objPID.patientAddress.streetAddress+&quot; &quot;+objPID.patientAddress.city+&quot;, &quot;+objPID.patientAddress.stateOrProvince)
channelMap.put(&apos;objPID.accountNumber&apos;,objPID.accountNumber);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>HL7V2</inboundDataType>
          <outboundDataType>XML</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
              <handleRepetitions>true</handleRepetitions>
              <handleSubcomponents>true</handleSubcomponents>
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <stripNamespaces>true</stripNamespaces>
              <segmentDelimiter>\r</segmentDelimiter>
              <convertLineBreaks>true</convertLineBreaks>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <segmentDelimiter>\r</segmentDelimiter>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
              <splitType>MSH_Segment</splitType>
              <batchScript></batchScript>
            </batchProperties>
            <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
              <segmentDelimiter>\r</segmentDelimiter>
              <successfulACKCode>AA</successfulACKCode>
              <successfulACKMessage></successfulACKMessage>
              <errorACKCode>AE</errorACKCode>
              <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
              <rejectedACKCode>AR</rejectedACKCode>
              <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
              <msh15ACKAccept>false</msh15ACKAccept>
              <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
            </responseGenerationProperties>
            <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
              <successfulACKCode>AA,CA</successfulACKCode>
              <errorACKCode>AE,CE</errorACKCode>
              <rejectedACKCode>AR,CR</rejectedACKCode>
              <validateMessageControlId>true</validateMessageControlId>
              <originalMessageControlId>Destination_Encoded</originalMessageControlId>
              <originalIdMapVariable></originalIdMapVariable>
            </responseValidationProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
              <stripNamespaces>true</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.0.0">
          <elements/>
        </filter>
        <transportName>File Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.0.0">
          <metaDataId>1</metaDataId>
          <name>HTML to Document Writer (PDF)</name>
          <properties class="com.mirth.connect.connectors.doc.DocumentDispatcherProperties" version="4.0.0">
            <pluginProperties/>
            <destinationConnectorProperties version="4.0.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <host>C:/HL7/ORU/PDF</host>
            <outputPattern>ORU_${SYSTIME}.PDF</outputPattern>
            <documentType>pdf</documentType>
            <encrypt>false</encrypt>
            <output>FILE</output>
            <password></password>
            <pageWidth>8.5</pageWidth>
            <pageHeight>11</pageHeight>
            <pageUnit>INCHES</pageUnit>
            <template>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;html lang=&quot;en&quot;&gt;
	&lt;head&gt;
		&lt;title&gt;Laboratory Result Report&lt;/title&gt;
		&lt;style type=&quot;text/css&quot;&gt;
			
			BODY
			{
				width: 70%;
				margin: 0 auto;
			}
			
			h2, h3
			{	
				text-align: center; 
			}
			
			.subHeader
			{
				text-align: left;
				background-color: #27cce5;
			}

			.tblPatientDemographics
			{
				background-color: #abebf4;
				width: 100%;
			}
			
			.tblEncounter
			{
				background-color: #abebf4;
				width: 100%
			}
			
			.tblOrderedResults
			{
				background-color: #abebf4;
				width: 70%;
				margin: 0 auto;
				text-align: left; 
			}
			
			.bottomline
			{
				background-color: #D8DAED;
			}
					
			table
			{
				background-color: #abebf4;
			}
						
			td 
			{
				vertical-align: top;
			}
			
			td.patientName
			{
				font-size: large;
			}
			
			.bold
			{
				font-weight: bold;
			}

			.italic
			{
				font-style: italic;
			}
			
			.underline
			{
				text-decoration: underline;
			}
			
		&lt;/style&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;div align=&quot;center&quot;&gt;
			&lt;h1&gt;Laboratory Result Report&lt;/h1&gt;
		&lt;/div&gt;
		&lt;!-- Result --&gt;
		&lt;h2 class=&quot;orderResult&quot; style=&quot;color: #990000;&quot;&gt;BASIC METABOLIC PANEL&lt;/h2&gt;
		&lt;h3&gt;Result Date: 09/30/2009&lt;/h3&gt;
		&lt;h3&gt;Stage: Final&lt;/h3&gt;
		&lt;br /&gt;
		&lt;h3 class=&quot;subHeader&quot;&gt;Patient Demographics&lt;/h3&gt;
		&lt;!-- Patient Demographics --&gt;
		&lt;div&gt;
			&lt;table class=&quot;tblPatientDemographics&quot;&gt;
				&lt;tr&gt;
					&lt;td class=&quot;patientMRN label&quot; style=&quot;width: 335px;&quot;&gt;MRN:&lt;/td&gt;
					&lt;td class=&quot;patientMRN&quot; style=&quot;width: 1000px;&quot;&gt;${maps.get(&apos;objPID.patientId&apos;)}&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td class=&quot;patientName label&quot; style=&quot;width: 335px;&quot;&gt;Name:&lt;/td&gt;
					&lt;td class=&quot;patientName&quot; style=&quot;width: 1000px;&quot;&gt;${maps.get(&apos;objPID.patientLastName&apos;)}, ${maps.get(&apos;objPID.patientFirstName&apos;)}&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td class=&quot;patientDOB label&quot; style=&quot;width: 335px;&quot;&gt;Date Of Birth:&lt;/td&gt;
					&lt;td class=&quot;patientDOB&quot; style=&quot;width: 1000px;&quot;&gt;${maps.get(&apos;objPID.dateOfBirth&apos;)}&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td class=&quot;patientAddress label&quot; style=&quot;width: 335px;&quot;&gt;Address:&lt;/td&gt;
					&lt;td class=&quot;patientAddress&quot; style=&quot;width: 1000px;&quot;&gt;${maps.get(&apos;objPID.address&apos;)}&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td class=&quot;accountNumber label&quot; style=&quot;width: 335px;&quot;&gt;Account:&lt;/td&gt;
					&lt;td class=&quot;accountNumber&quot; style=&quot;width: 1000px;&quot;&gt;${maps.get(&apos;objPID.accountNumber&apos;)}&lt;/td&gt;
				&lt;/tr&gt;
			&lt;/table&gt;
		&lt;/div&gt;
		&lt;!-- Encounter --&gt;
		&lt;h3 class=&quot;subHeader&quot;&gt;Encounter - Visit&lt;/h3&gt;
		&lt;div&gt;
			&lt;!--table class=&quot;tblEncounter&quot;--&gt;
			&lt;table&gt;
				&lt;tr&gt;
					&lt;td class=&quot;EncounterType label&quot; style=&quot;width: 335px;&quot;&gt;Type:&lt;/td&gt;
					&lt;td class=&quot;Encounter Type&quot; style=&quot;width: 1000px;&quot;&gt;Outpatient&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td class=&quot;Attending label&quot; style=&quot;width: 335px;&quot;&gt;Attending:&lt;/td&gt;
					&lt;td class=&quot;Attending&quot; style=&quot;width: 1000px;&quot;&gt;Marzena Bieniek MD&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td class=&quot;EncounterNumber label&quot; style=&quot;width: 335px;&quot;&gt;Visit Num:&lt;/td&gt;
					&lt;td class=&quot;EncounterNumber&quot; style=&quot;width: 1000px;&quot;&gt;0234567890&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td class=&quot;Arrived label&quot; style=&quot;width: 335px;&quot;&gt;Arrived:&lt;/td&gt;
					&lt;td class=&quot;Arrived&quot; style=&quot;width: 1000px;&quot;&gt;08/30/2017 14:30&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td class=&quot;Departed label&quot; style=&quot;width: 335px;&quot;&gt;Departed:&lt;/td&gt;
					&lt;td class=&quot;Departed&quot; style=&quot;width: 1000px;&quot;&gt;08/30/2017 15:30&lt;/td&gt;
				&lt;/tr&gt;
			&lt;/table&gt;
		&lt;/div&gt;
		&lt;!-- Individual Results table --&gt;
		&lt;h3 class=&quot;subHeader&quot;&gt;Order Results&lt;/h3&gt;
		&lt;br /&gt;
		&lt;div align=&quot;left&quot;&gt;
		&lt;table class=&quot;tblOrderedResults&quot; border=&quot;1&quot;&gt;
			&lt;thead&gt;
				&lt;tr&gt;
					&lt;th colspan=&quot;2&quot;&gt;Test&lt;/th&gt;
					&lt;th&gt;Result&lt;/th&gt;
					&lt;th&gt;Flag&lt;/th&gt;
					&lt;th&gt;Reference Range&lt;/th&gt;
				&lt;/tr&gt;
			&lt;/thead&gt;
			&lt;tbody&gt;
				&lt;tr&gt;
					&lt;td/&gt;
					&lt;td&gt;GLUCOSE,RANDOM&lt;/td&gt;
					&lt;td&gt;100 mg/dL&lt;/td&gt;
					&lt;td&gt;N&lt;/td&gt;
					&lt;td&gt;74-106 mg/dL&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td/&gt;
					&lt;td&gt;BLOOD UREA NITROGEN&lt;/td&gt;
					&lt;td&gt;10 mg/dL&lt;/td&gt;
					&lt;td&gt;N&lt;/td&gt;
					&lt;td&gt;9-20 mg/dL&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td/&gt;
					&lt;td&gt;CREATININE&lt;/td&gt;
					&lt;td&gt;3.0 mg/dL&lt;/td&gt;
					&lt;td&gt;H&lt;/td&gt;
					&lt;td&gt;0.8-1.5 mg/dL&lt;/td&gt;
				&lt;/tr&gt;
			&lt;/tbody&gt;
		&lt;/table&gt;
		&lt;/div&gt;
	&lt;!-- Authored Order --&gt;
	&lt;ul&gt;
		&lt;li&gt;&lt;u&gt;Ordered By:&lt;/u&gt; CARL STRANGE MD&lt;/li&gt;
		&lt;li&gt;&lt;u&gt;Stage:&lt;/u&gt; Final&lt;/li&gt;
	&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</template>
          </properties>
          <transformer version="4.0.0">
            <elements/>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.0.0">
            <elements/>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.0.0">
            <elements/>
          </filter>
          <transportName>Document Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.0.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.0.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1598378373566</time>
            <timezone>America/Chicago</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="4.0.0">
            <id>d316c4bc-9e10-4162-b67c-e514afc59fa3</id>
            <name>Channel Helpers</name>
            <revision>1</revision>
            <lastModified>
              <time>1706120884823</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>1aca2a66-a83a-4703-9ec7-dfaa3a6ad5b2</string>
              <string>3e15b608-553f-45e7-a617-712d6b75ab4d</string>
              <string>f6d6aa80-d65f-4935-a267-d6bef39a7bdf</string>
              <string>edd93839-401c-4613-b696-6d4799ebc5af</string>
              <string>2f511815-92d1-4f0f-92e9-f4f8ae576b75</string>
              <string>b4a51816-0aad-444a-b1ce-f5c11f9961bc</string>
              <string>cb7f055d-45ae-43b7-ac7c-bb2b2db34ded</string>
              <string>139cdc6a-5f40-46bd-a246-2a9a1ef8ed10</string>
              <string>316c7826-a8ee-44b4-922c-8afe0daa2c72</string>
              <string>6ff8ca2b-c4e3-4e6f-897a-17f36ed63faa</string>
              <string>27aee1c0-8ed0-4062-89b5-1c7a69a946bc</string>
              <string>291b4847-a85d-41c6-bd4a-37f008b15ca8</string>
              <string>81c836fd-cbba-4247-b438-d4c9987ee75b</string>
              <string>4318de8e-4d7b-4885-9f11-8b2ac6f9c70a</string>
              <string>e983e439-461a-424f-8348-764b29e05ecb</string>
              <string>0763b542-8ed8-4a30-9c35-de3dbf030626</string>
              <string>75c150e0-fbc5-4eef-a856-bec6b3a39a24</string>
              <string>dd55a671-a099-4b29-bdbb-85c34050037a</string>
              <string>a08848df-6dcd-4c51-aa6d-d2f85edfdcf8</string>
              <string>ae504043-55f5-497e-ac87-33686e7569b2</string>
              <string>fef7c31a-61a4-43c8-bb15-79f51a36c882</string>
              <string>69f5ad2c-3bf4-4d55-8e4a-bd6faade202d</string>
              <string>39acd9f7-c975-4787-b31e-714f748a51a2</string>
              <string>a8bd6f50-894f-443f-b248-da3ebad3a748</string>
              <string>3c355935-e639-4517-b3b1-42c6564387f8</string>
              <string>1e45f5ac-6815-40a8-8fe9-15e98eb1d07b</string>
              <string>e695a1d8-2bde-4da3-a9a8-8cd6f81ca3c0</string>
              <string>3d95de17-a2ea-446c-be4c-36c32d8cda1c</string>
              <string>205385d0-06be-4baa-b072-9b431c315827</string>
              <string>a8ebde5a-16cb-407e-a8b4-fa8766d26c73</string>
              <string>fdcb1121-0d49-4ed8-b1a1-4f4482e1c20a</string>
              <string>b1842d23-059a-4e7e-b447-3b5f5ccf5c3a</string>
              <string>8c5d3887-bd22-4018-aeda-45e5c0f8d551</string>
              <string>a127fffb-1663-4206-b6d3-348aa228c999</string>
              <string>d70fc7fa-2005-4fc7-9222-dc8119346c6e</string>
              <string>2a2ad8a5-b961-4f4c-ac09-8abee2097972</string>
              <string>143b10e0-e01b-4942-9995-2d3b9a165d76</string>
              <string>a574bc8d-e82e-4ec6-9430-f3a37278e356</string>
              <string>f6e27b4e-dbbd-48c9-994f-55c3ac511fb9</string>
              <string>6060b76d-07c2-4f9f-bc71-d2e8c44d8271</string>
              <string>08536fee-6f99-4cc4-8958-f84daaee73d5</string>
              <string>dccd5a80-a385-482e-97e4-69340bce4522</string>
              <string>bfa0bc00-9ee1-4ba5-99de-9e46faffed6d</string>
              <string>183b6833-a563-42cb-8d4d-cdcb740aef30</string>
              <string>652e2cab-f748-41b4-ae8f-f0aae48e1fca</string>
              <string>bd81709b-2ef0-4760-aba9-f455fb338f37</string>
              <string>633e9341-a80b-4c11-a6a3-1d3942bb1782</string>
              <string>695c7ed6-252e-4229-83db-5571946a8b62</string>
              <string>df3f9b9f-e8e7-47a9-a33d-c9ec7d7820fd</string>
              <string>895ee0ef-745c-464d-a46c-e51331a01c3f</string>
              <string>50dcf6de-46b4-4de5-99c2-d341abb8a41a</string>
              <string>5e411c40-61f8-467e-b132-78e54e0b5f81</string>
              <string>ed4ef090-3f7e-442d-ad30-744e3a1313f2</string>
              <string>ed3e52dc-3023-4cc7-8cad-47e0d5df89c1</string>
              <string>ec29c308-0bc3-4eb0-a948-09c2c0747afa</string>
              <string>aeaba1c0-cef9-4ad8-82d7-76d66cc95562</string>
              <string>58f42d4f-22e1-4f7c-8acf-93a9fe92619c</string>
              <string>7a21d8ac-5afa-45b8-b136-5def45d811b4</string>
              <string>23ea2137-37b1-4b00-9fb0-c8889cd4bc97</string>
              <string>2a33ffd6-253d-402f-8fb6-93bd94f65dcd</string>
              <string>7445aaa5-ff13-4c08-a8b1-817cfed2692b</string>
              <string>3d290a27-5daf-4bb0-b3d8-90c9bb8afaeb</string>
              <string>e07b74b9-756e-4ca2-8be9-01bf7abfd817</string>
              <string>3ba1448a-d0b7-4478-bc57-f9cb8dab6de9</string>
              <string>dcaf136d-a3b8-47ed-aec7-d1619675ba2d</string>
              <string>285faf0d-523a-4c8e-92ec-4a0f3a89e048</string>
              <string>3263ad34-c86d-4481-b19f-4cd3d0d83d62</string>
              <string>e1af2369-c57e-4850-bc30-f79b6fe9fa66</string>
              <string>28ddc4f3-a96b-47db-b0e0-bcfcd825f48a</string>
              <string>90bc60ed-14c6-49db-b1e6-bb70d2b1d01d</string>
              <string>fd6b9376-0847-49d7-96c6-15c540a8e39a</string>
              <string>7ee4a47d-bdf3-473d-9da9-3a62c41037b1</string>
              <string>167ee803-661a-4e6e-ac6e-b84c057f7ca1</string>
              <string>a40e7657-c37a-4fb6-aa79-48a2ea16709c</string>
              <string>5d5e5835-8cd3-43af-ac82-ffe57439bfb5</string>
              <string>47f248b1-72d5-47dc-b0b3-6aa387e9e5d6</string>
              <string>d7c3e640-7850-4d70-bb1c-3289674bd609</string>
              <string>ae961745-fe19-46bd-b240-c82888091366</string>
              <string>68581957-7fba-421f-b063-941a804fcc46</string>
              <string>0056a8aa-7aa5-4047-a693-21bac64470aa</string>
              <string>2a637fa3-fb83-4666-abe0-c754924ff738</string>
              <string>8a08c578-68dd-4550-b178-eee13ade011e</string>
              <string>d448196a-4282-4d10-8c9a-7f1dfd19abea</string>
              <string>05759809-cfbd-4546-8b71-fd28c2499763</string>
              <string>1c01997f-00d1-4e40-9e63-da5706137cdd</string>
              <string>881db416-1776-4ab6-a3ce-5065ed11cdb5</string>
              <string>982b29a5-1743-4435-8842-9810e4e34926</string>
              <string>fe1bdd5e-cce0-4509-a09a-3545b69d3d7a</string>
              <string>1bff9775-2de8-4b51-bb6b-6aaa29c144bb</string>
              <string>5e97d36f-68fe-412d-a1df-3a25a07e5770</string>
              <string>9316c229-da47-49f8-a2c0-398ba155d370</string>
              <string>20524120-844c-4733-ac8a-b01f0e14a12f</string>
              <string>55ebb133-1e4d-4172-8718-301240e9518f</string>
              <string>b0dec3c0-01ca-45a6-b826-707b80644dff</string>
              <string>d1dd4342-0ad4-42cc-b708-f47e8c6621f8</string>
              <string>20d94501-cd46-41ce-9bf1-e34639074d16</string>
              <string>492a7c6c-4768-45e2-9f49-6c5488b0a2e5</string>
              <string>9f67f48f-ca64-4419-9101-05c39d7634fd</string>
              <string>14a2ad40-95bb-4ac9-a10e-d326537cc5a6</string>
              <string>6aa39894-bc9b-448c-aac6-b6967a0ce243</string>
              <string>4108a56a-b1a6-4d8c-9e8e-b065654860d0</string>
              <string>bdb4241f-2858-49da-8d4e-2f1579679620</string>
              <string>d56da279-9aa2-4b33-8913-bf0f37a046a0</string>
              <string>692365a7-9ec6-4c38-adee-672f4084adf3</string>
              <string>3f433a3e-e46d-440a-82c1-5490ada6b54e</string>
              <string>4d223d2f-d247-47da-b6e6-6d25e8a73775</string>
              <string>4b7abf79-011a-428e-96c9-040696a2869b</string>
              <string>72471096-425b-4750-81a4-123fca2e302c</string>
              <string>3558a098-5cbc-4e05-ae03-80b4aad20e53</string>
              <string>4a05dc00-9ad6-454a-b61b-ddd074bbb36c</string>
              <string>9d1c136c-3c94-43c3-b0f8-1c1551ac6987</string>
              <string>b2fdd8c2-f387-493b-ab35-e7e9e8ce056a</string>
              <string>930a4c9e-b458-4edf-92ff-3be07d68c28d</string>
              <string>8e046241-74a3-44e0-9bf9-f0b73a36717d</string>
              <string>0f0df6c9-1153-4e0b-800b-533492ba936c</string>
              <string>f016be9d-205d-4cdd-b4fb-e7139700dd22</string>
              <string>0801e501-57ac-4418-ac59-08e0edadabf3</string>
              <string>2607531a-4f9b-48ed-9ef4-b1b71b880864</string>
              <string>455c536f-d3fb-4832-941e-ef230b683590</string>
              <string>31b37e0b-cfbf-4787-b5d3-2082328fafd7</string>
              <string>21e47d6b-9863-4045-82af-8941087a4da1</string>
              <string>9ef7f26f-d3f7-420d-a30f-26f948be596d</string>
              <string>b3869a86-7d4f-4a10-b116-24b758a191b3</string>
              <string>a6825055-e697-487f-9add-560ad9567a60</string>
              <string>f7552865-32a0-4b5b-a5fd-9b0bddffddf9</string>
              <string>9f2bcd3c-8a74-49f1-b910-aa05c509c9cb</string>
              <string>bd270438-7262-47f8-8656-1baf51287078</string>
              <string>61b10ef9-baef-45e2-b747-a0987d851033</string>
              <string>aa5ba1e6-ab11-4a9a-a03c-e0fe58b49086</string>
              <string>ec653b8b-7362-4167-98ff-3845c7560d11</string>
              <string>1710d009-1bb2-4db6-a8d8-1493e6802c18</string>
              <string>25c5fbce-cb87-4ba9-a572-0be49242a0b2</string>
              <string>13738349-4cc4-43de-9365-a27ead17b524</string>
              <string>a43f7553-71de-41d3-aa16-93cc7a48bafc</string>
              <string>e7b4b295-2b47-4b4f-97b9-b9a9082bffb1</string>
              <string>854f78f8-4ebc-4c99-9a05-c26015671807</string>
              <string>e1900e14-c2a2-426e-86f0-971353d60cdd</string>
              <string>fd3b93dd-8b65-4b9f-a090-09bc7ec9aa12</string>
              <string>72c5d63d-a405-4ccf-b85e-dba740b14fdd</string>
              <string>f6efe381-7851-4bec-96c3-231b7baf666f</string>
              <string>2f3b524c-9d7b-43f7-b4ce-e84d27cc82ff</string>
              <string>99066deb-0d43-44f6-8823-b8cfe08e7185</string>
              <string>aa30f2b5-64cf-4396-b098-efeecb2224f2</string>
              <string>9fee4e0a-7a6d-4925-bc78-59df2c1f28af</string>
              <string>d23d6225-1145-484e-8164-f070fa1f2e8c</string>
              <string>57953b24-64cb-489d-9706-bf5dc1ef94ea</string>
              <string>08955a01-dda6-468b-a8cf-73586fe7d99f</string>
              <string>52d0a715-1be1-4fb2-8f3d-448c89c148f8</string>
              <string>4941f2fb-e641-4e0a-aba4-633ddf410760</string>
              <string>470c6c09-6850-4770-820c-bbfce54196bd</string>
              <string>21a820f0-205a-4046-8c4a-3788daca4d05</string>
              <string>5cee4e54-225f-43e4-830c-6dc3fb2826f2</string>
              <string>99643fbc-fa46-4c38-a7db-ac72833847f1</string>
              <string>9a44798a-871f-4402-9397-75241b18c6b0</string>
              <string>f1e2a84e-89e2-4ea0-8edd-4418f11b7eb7</string>
              <string>fe6275f5-4efa-4c86-90e2-8788c4f9c975</string>
              <string>081454ce-e155-45a1-bfc0-2297d6317259</string>
              <string>8b61cf50-9d95-43dd-b6ab-474e2a1d2d76</string>
              <string>5b245873-9491-4fa3-9bce-08c111cbe04f</string>
              <string>4041500f-7768-4011-b273-13fe61a2ebd6</string>
              <string>eaf28278-dd66-4bcc-b7e7-9a6c422db1ee</string>
              <string>0e0f63c0-5b51-4626-9a50-c0e2f5f94d37</string>
              <string>337347d0-d5f6-492c-9dc3-638a211132ff</string>
              <string>f836f593-4c61-49bd-be13-4cb3f9c6cffb</string>
              <string>0fec52ca-be59-47c9-85b1-700dc3b3dc2e</string>
              <string>a42ba030-2419-490c-8843-889e4197cf83</string>
              <string>4d75bdd7-6d1f-4db5-a7f8-4f63efa13197</string>
              <string>53d49d46-bd95-4ce5-8f98-7685217fedbf</string>
              <string>49a7b526-0577-4811-98c2-185bb6c22d91</string>
              <string>f8b35221-21af-4a86-9a4a-1b5657b5a029</string>
              <string>2f88fefe-6f80-46b6-a20a-04c29532073e</string>
              <string>8c637e01-95b0-4b11-a28f-4518b7f8d1ae</string>
              <string>7f5da166-70b8-48e0-9fa9-cf96fd867c30</string>
              <string>e3d85e42-6410-459f-95fc-2f98af8c0db9</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>bc768cd6-d735-40b1-9617-a3417481fe19</id>
                <name>Convert CSV to JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884963</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} csv - CSV string with column headers
	@return {String} return JSON object using column headers and field keys
*/
function convertCsvToJson(csv) {
	var textXML = SerializerFactory.getSerializer(&apos;DELIMITED&apos;).toXML(csv);
	var xml = new XML(textXML);
	var dataItems = [];
	for (var i = 1; i &lt;= xml[&apos;row&apos;].length() - 1; i++) {
		var jsonData = {};
		for (var j = 1; j &lt;= xml[&apos;row&apos;][0].children().length(); j++) {
			var column = &apos;column&apos; + j.toString();
			var header = xml[&apos;row&apos;][0][column].toString().replace(/\s/g, &apos;_&apos;).replace(/-/g, &apos;_&apos;).toLowerCase();
			var value = xml[&apos;row&apos;][i][column].toString();
			
			jsonData[header] = value;
			
		}
		dataItems.push(jsonData);
	}

	return JSON.stringify(dataItems);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>537d816c-81ff-4507-85c6-85e28b8c546c</id>
                <name>Convert JSON to CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885050</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts JSON to CSV.
**/
/*	@param {String} jsonData - JSON string with [0] index key as headers for csv
	@return {String} return csv
*/	

function convertJsonToCsv(data) {
	try{
		var json = JSON.parse(data);	
		var fields = Object.keys(json[0])
		var replacer = function(key, value) { return value === null ? &apos;&apos; : value } 
		var csv = json.map(function(row){
		  return fields.map(function(fieldName){
		    return JSON.stringify(row[fieldName], replacer)
		  }).join(&apos;,&apos;)
		})
		csv.unshift(fields.join(&apos;,&apos;)) // add header column
		csv = csv.join(&apos;\r\n&apos;);
		return csv;
	}catch(error){
		return error;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>ff3df0b8-cfa2-4ec9-82ac-37c9e4830e0c</id>
                <name>Generic - Send message to channel destination</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function sendMessageToChannelDestination(channelID, destinationID, map, data) {
	var msgMap;
	var outData = {};
	
	if (!map) {
		msgMap = Maps.map();
	} else {
		msgMap = Maps.map(map);
	}

	if (data == null || data == undefined) {
		data = &apos;&apos;;
	}

	if (msgMap.get(&apos;sourceChannelId&apos;) == null) {
		msgMap.add(&apos;sourceChannelId&apos;, channelId);
	}
	if (msgMap.get(&apos;sourceChannelName&apos;) == null) {
		msgMap.add(&apos;sourceChannelName&apos;, channelName);
	}

	// Dirty way to handle connector message not being defined. Handles cases where this function 
	// is used in a source js writer.
	try {
		if (msgMap.get(&apos;sourceMessageId&apos;) == null &amp;&amp; connectorMessage &amp;&amp; connectorMessage.getMessageId()) {
			msgMap.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString());
		}
	} catch(ex) {}

	var msgRequest = new RawMessage(data, [destinationID], msgMap);
	var msgResponse = router.routeMessageByChannelId(channelID, msgRequest);

	if (msgResponse == null) {
		// return;
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;; 
	}
	if (msgResponse.getStatus() == null) {
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;;
	}

	if (msgResponse.getStatus() == &apos;ERROR&apos;) {
		throw msgResponse.getMessage();
	}

	return msgResponse.getMessage();
	
	
	// var msgResponse;

	/*
	try {
		msgResponse = router.routeMessageByChannelId(channelID, msgRequest);
		outData.status = &apos;success&apos;;
		outData.status_message = &apos;message successfully sent to channel&apos;;
	} catch (ex) {
		outData.status = &apos;error&apos;;
		outData.status_message = ex.toString();
		return outData;
	}

	if (msgResponse.getStatus() == null) {
		outData.response_status = &apos;unknown&apos;;
		logger.error(&apos;Code Template &quot;Send message to channel by id&quot;: channel &quot;&apos; + ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;);
	}
	
	switch (String(msgResponse.getStatus())) {
		case &apos;ERROR&apos;:
			outData.response_status = &apos;error&apos;;
			break;
		case &apos;FILTERED&apos;:
			outData.response_status = &apos;filtered&apos;;
			break;
		case &apos;QUEUED&apos;:
			outData.response_status = &apos;queued&apos;;
			break;
		case &apos;RECEIVED&apos;:
			outData.response_status = &apos;received&apos;;
			break;
		case &apos;SENT&apos;:
			outData.response_status = &apos;sent&apos;;
			break;
	}

	outData.response_message = msgResponse.getMessage();

	return outData;
	*/
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>f4cd9e71-4f8d-4472-80a9-31b533f4d578</id>
                <name>Get bots DB connection to specified environment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884906</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get a new bots database connection. Be sure to wrap in try/finally block to close database connection.

	@param {String} environment - prod, staging, dev, local
	@return {String} return database connection
*/
function GetBotsDBConnection() {
	var username = configurationMap.get(&apos;bots-db-user&apos;);
	var password = configurationMap.get(&apos;bots-db-pass&apos;);
	var uri = configurationMap.get(&apos;bots-db-uri&apos;);	
	return DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, uri, username, password);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>554bd282-172b-43a0-8902-992baf63b04d</id>
                <name>Get DB connection to specified environment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885107</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get a new database connection. 

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetDBConnection(environment) {
	if (environment != &apos;prod&apos; &amp;&amp; environment != &apos;staging&apos; &amp;&amp; environment != &apos;dev&apos; &amp;&amp; environment != &apos;local&apos;) {
		return null;
	}
	
	var username = configurationMap.get(&apos;docsink-db-user-&apos; + environment);
	var password = configurationMap.get(&apos;docsink-db-pass-&apos; + environment);
	var uri = configurationMap.get(&apos;docsink-db-uri-&apos; + environment);

	return DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.cj.jdbc.Driver&apos;, uri, username, password);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>552a87ed-b5a0-4546-9e5c-0a768661a351</id>
                <name>Postprocessor - Generate channel response</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884842</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function generateChannelResponse() {
	// This script executes once after a message has been processed
	// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
	
	var destinations = sourceMap.get(&apos;destinationSet&apos;);
	var metadataIds = destinations.toArray();
	
	if (metadataIds.length == 0) {
		return ResponseFactory.getErrorResponse(&apos;invalid request&apos;);
	}
	
	var smsg = message.getConnectorMessages().get(0);
	if (smsg.getStatus() == &apos;ERROR&apos;) {
		if (smsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(smsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(smsg.getResponseData().getMessage());
	}
	
	var metadataID = metadataIds[0];
	var cmsg = message.getConnectorMessages().get(metadataID);

	if (cmsg.getStatus() == &apos;ERROR&apos;) {
		if (cmsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(cmsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;SENT&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;FILTERED&apos;) {
		return ResponseFactory.getFilteredResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;QUEUED&apos;) {
		return ResponseFactory.getQueuedResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;RECEIVED&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else {
		return cmsg;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>06fc07c7-b2aa-4298-b2ab-a825bccefef3</id>
            <name>HL7v2.3</name>
            <revision>8</revision>
            <lastModified>
              <time>1672445597967</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>HL7v2.3 Library</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>14b7de16-de3e-4994-b123-b4d0d3d712aa</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>076d39da-7152-40db-91a1-1746167239e9</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>e5a8825f-1bd4-4a74-8768-669fe2c24b9c</id>
                <name>getEVN_v23</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911263100</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	getEVN_v23(msg)
	
	- Desc: This function retrieves HL7v2 HAPI format elements and values from EVN segment stored in
	object for reference

	@param {String} msg - this contains the raw message (string)
	@return {object} objEVN - this contains the EVN segment elements composed into a single objMSH
		object.
*/
function getEVN_v23(msg) {

	// define variables
	if (typeof(msg[&apos;EVN&apos;].toString()) !== undefined) {

		// EVN	
		var objEVN= new Object();

		if (msg[&apos;EVN&apos;].length() &gt; 0) {
			objEVN = [];
			var index = 0;
			for each (seg in msg.EVN) {
				objEVN[index] = {};

				// EVN.1, eventType
				if (seg[&apos;EVN.1&apos;][&apos;EVN.1.1&apos;].toString() != &quot;&quot;) { objEVN[index].eventType = seg[&apos;EVN.1&apos;][&apos;EVN.1.1&apos;]; }

				// EVN.2, recordedDateTime
				if (seg[&apos;EVN.2&apos;][&apos;EVN.2.1&apos;].toString() != &quot;&quot;) { objEVN[index].recordedDateTime = seg[&apos;EVN.2&apos;][&apos;EVN.2.1&apos;]; }

				// EVN.3, plannedEventDateTime
				if (seg[&apos;EVN.3&apos;][&apos;EVN.3.1&apos;].toString() != &quot;&quot;) { objEVN[index].plannedEventDateTime = seg[&apos;EVN.3&apos;][&apos;EVN.3.1&apos;]; }

				// EVN.4, eventReasonCode
				if (seg[&apos;EVN.4&apos;][&apos;EVN.4.1&apos;].toString() != &quot;&quot;) { objEVN[index].eventReasonCode = seg[&apos;EVN.4&apos;][&apos;EVN.4.1&apos;]; }

				// EVN.5, operatorId
				objEVN[index].operatorId = {};
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.1&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.id = seg[&apos;EVN.5&apos;][&apos;EVN.5.1&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.2&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.lastName = seg[&apos;EVN.5&apos;][&apos;EVN.5.2&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.3&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.firstName = seg[&apos;EVN.5&apos;][&apos;EVN.5.3&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.4&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.middleInitOrName = seg[&apos;EVN.5&apos;][&apos;EVN.5.4&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.5&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.suffix = seg[&apos;EVN.5&apos;][&apos;EVN.5.5&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.6&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.prefix = seg[&apos;EVN.5&apos;][&apos;EVN.5.6&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.7&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.degree = seg[&apos;EVN.5&apos;][&apos;EVN.5.7&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.8&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.sourceTable = seg[&apos;EVN.5&apos;][&apos;EVN.5.8&apos;]; }
				objEVN[index].operatorId.assigningAuthority = {};
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.9&apos;][&apos;EVN.5.9.1&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.assigningAuthority.id = seg[&apos;EVN.5&apos;][&apos;EVN.5.9&apos;][&apos;EVN.5.9.1&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.9&apos;][&apos;EVN.5.9.2&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.assigningAuthority.universalId = seg[&apos;EVN.5&apos;][&apos;EVN.5.9&apos;][&apos;EVN.5.9.2&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.9&apos;][&apos;EVN.5.9.3&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.assigningAuthority.universalIdType = seg[&apos;EVN.5&apos;][&apos;EVN.5.9&apos;][&apos;EVN.5.9.3&apos;]; }
				if (Object.keys(objEVN[index].operatorId.assigningAuthority).length == 0) {
					if (seg[&apos;EVN.5&apos;][&apos;EVN.5.9&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.assigningAuthority.id = seg[&apos;EVN.5&apos;][&apos;EVN.5.9&apos;]; }
					else delete objEVN[index].operatorId.assigningAuthority;
				}
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.10&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.nameTypeCode = seg[&apos;EVN.5&apos;][&apos;EVN.5.10&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.11&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.identifierCheckDigit = seg[&apos;EVN.5&apos;][&apos;EVN.5.11&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.12&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.codeIdentifyingCheckDigitScheme = seg[&apos;EVN.5&apos;][&apos;EVN.5.12&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.13&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.identifierTypeCode = seg[&apos;EVN.5&apos;][&apos;EVN.5.13&apos;]; }
				objEVN[index].operatorId.assigningFacility = {};
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.14&apos;][&apos;EVN.5.14.1&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.assigningFacility.id = seg[&apos;EVN.5&apos;][&apos;EVN.5.14&apos;][&apos;EVN.5.14.1&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.14&apos;][&apos;EVN.5.14.2&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.assigningFacility.universalId = seg[&apos;EVN.5&apos;][&apos;EVN.5.14&apos;][&apos;EVN.5.14.2&apos;]; }
				if (seg[&apos;EVN.5&apos;][&apos;EVN.5.14&apos;][&apos;EVN.5.14.3&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.assigningFacility.universalIdType = seg[&apos;EVN.5&apos;][&apos;EVN.5.14&apos;][&apos;EVN.5.14.3&apos;]; }
				if (Object.keys(objEVN[index].operatorId.assigningFacility).length == 0) {
					if (seg[&apos;EVN.5&apos;][&apos;EVN.5.14&apos;].toString() != &quot;&quot;) { objEVN[index].operatorId.assigningFacility.id = seg[&apos;EVN.5&apos;][&apos;EVN.5.14&apos;]; }
					else delete objEVN[index].operatorId.assigningFacility;
				}
				if (Object.keys(objEVN[index].operatorId).length == 0) {
					delete objEVN[index].operatorId;
				}

				// EVN.6, eventOccurred
				if (seg[&apos;EVN.6&apos;][&apos;EVN.6.1&apos;].toString() != &quot;&quot;) { objEVN[index].eventOccurred = seg[&apos;EVN.6&apos;][&apos;EVN.6.1&apos;]; }

				// clean up EVN and increment index
				if (Object.keys(objEVN[index]).length == 0) {
					delete objEVN[index];
				} else {
					index++;
				}
			}
		}
		
		return objEVN;
	
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>d5e9153f-9f43-4749-8155-d08d7eca1e47</id>
                <name>getGT1_v23</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262435</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	getGT1_v23(msg)
	
	- Desc: This function retrieves HL7v2 HAPI format elements and values from GT1 segment stored in
	object for reference

	@param {String} msg - this contains the raw message (string)
	@return {object} objGT1 - this contains the GT1 segment elements composed into a single objGT1
		object.
*/
function getGT1_v23(msg) {

	// define variables
	if (typeof(msg[&apos;GT1&apos;].toString()) !== undefined) {

		// PV1	
		var objGT1= new Object();
	
		if (msg[&apos;GT1&apos;].length() &gt; 0) {
			objGT1 = [];
			var index = 0;
			for each (seg in msg[&apos;GT1&apos;]) {
				objGT1[index] = {};
		
				// GT1.1, setId
				if (seg[&apos;GT1.1&apos;][&apos;GT1.1.1&apos;].toString() != &quot;&quot;) { objGT1[index].setId = seg[&apos;GT1.1&apos;][&apos;GT1.1.1&apos;]; }
		
				// GT1.2, guarantorNumber
				objGT1[index].guarantorNumber = [];
				for each (field in seg[&apos;GT1.2&apos;]) {
					var block = {};
					if (field[&apos;GT1.2.1&apos;].toString() != &quot;&quot;) { block.id = field[&apos;GT1.2.1&apos;]; }
					if (field[&apos;GT1.2.2&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;GT1.2.2&apos;]; }
					if (field[&apos;GT1.2.3&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;GT1.2.3&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;GT1.2.4&apos;][&apos;GT1.2.4.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;GT1.2.4&apos;][&apos;GT1.2.4.1&apos;]; }
					if (field[&apos;GT1.2.4&apos;][&apos;GT1.2.4.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;GT1.2.4&apos;][&apos;GT1.2.4.2&apos;]; }
					if (field[&apos;GT1.2.4&apos;][&apos;GT1.2.4.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;GT1.2.4&apos;][&apos;GT1.2.4.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;GT1.2.4&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;GT1.2.4&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;GT1.2.5&apos;].toString() != &quot;&quot;) { block.idTypeCode = field[&apos;GT1.2.5&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;GT1.2.6&apos;][&apos;GT1.2.6.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;GT1.2.6&apos;][&apos;GT1.2.6.1&apos;]; }
					if (field[&apos;GT1.2.6&apos;][&apos;GT1.2.6.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;GT1.2.6&apos;][&apos;GT1.2.6.2&apos;]; }
					if (field[&apos;GT1.2.6&apos;][&apos;GT1.2.6.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;GT1.2.6&apos;][&apos;GT1.2.6.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;GT1.2.6&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;GT1.2.6&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorNumber.push(block);
					}
				}
				if (Object.keys(objGT1[index].guarantorNumber).length == 0) {
					delete objGT1[index].guarantorNumber;
				}
		
				// GT1.3, guarantorName
				objGT1[index].guarantorName = [];
				for each (field in seg[&apos;GT1.3&apos;]) {
					var block = {};
					if (field[&apos;GT1.3.1&apos;].toString() != &quot;&quot;) { block.lastName = field[&apos;GT1.3.1&apos;]; }
					if (field[&apos;GT1.3.2&apos;].toString() != &quot;&quot;) { block.firstName = field[&apos;GT1.3.2&apos;]; }
					if (field[&apos;GT1.3.3&apos;].toString() != &quot;&quot;) { block.middleInitOrName = field[&apos;GT1.3.3&apos;]; }
					if (field[&apos;GT1.3.4&apos;].toString() != &quot;&quot;) { block.suffix = field[&apos;GT1.3.4&apos;]; }
					if (field[&apos;GT1.3.5&apos;].toString() != &quot;&quot;) { block.prefix = field[&apos;GT1.3.5&apos;]; }
					if (field[&apos;GT1.3.6&apos;].toString() != &quot;&quot;) { block.degree = field[&apos;GT1.3.6&apos;]; }
					if (field[&apos;GT1.3.7&apos;].toString() != &quot;&quot;) { block.nameTypeCode = field[&apos;GT1.3.7&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorName.push(block);
					}	
				}
				if (objGT1[index].guarantorName.length == 0) {
					delete objGT1[index].guarantorName;
				}
		
				// GT1.4, guarantorSpouseName
				objGT1[index].guarantorSpouseName = [];
				for each (field in seg[&apos;GT1.4&apos;]) {
					var block = {};
					if (field[&apos;GT1.4.1&apos;].toString() != &quot;&quot;) { block.lastName = field[&apos;GT1.4.1&apos;]; }
					if (field[&apos;GT1.4.2&apos;].toString() != &quot;&quot;) { block.firstName = field[&apos;GT1.4.2&apos;]; }
					if (field[&apos;GT1.4.3&apos;].toString() != &quot;&quot;) { block.middleInitOrName = field[&apos;GT1.4.3&apos;]; }
					if (field[&apos;GT1.4.4&apos;].toString() != &quot;&quot;) { block.suffix = field[&apos;GT1.4.4&apos;]; }
					if (field[&apos;GT1.4.5&apos;].toString() != &quot;&quot;) { block.prefix = field[&apos;GT1.4.5&apos;]; }
					if (field[&apos;GT1.4.6&apos;].toString() != &quot;&quot;) { block.degree = field[&apos;GT1.4.6&apos;]; }
					if (field[&apos;GT1.4.7&apos;].toString() != &quot;&quot;) { block.nameTypeCode = field[&apos;GT1.4.7&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorSpouseName.push(block);
					}	
				}
				if (objGT1[index].guarantorSpouseName.length == 0) {
					delete objGT1[index].guarantorSpouseName;
				}
		
				// GT1.5, guarantorAddress
				objGT1[index].guarantorAddress = [];
				for each (field in seg[&apos;GT1.5&apos;]) {
					var block = {};
					if (field[&apos;GT1.5.1&apos;].toString() != &quot;&quot;) { block.streetAddress = field[&apos;GT1.5.1&apos;]; }
					if (field[&apos;GT1.5.2&apos;].toString() != &quot;&quot;) { block.otherDesignation = field[&apos;GT1.5.2&apos;]; }
					if (field[&apos;GT1.5.3&apos;].toString() != &quot;&quot;) { block.city = field[&apos;GT1.5.3&apos;]; }
					if (field[&apos;GT1.5.4&apos;].toString() != &quot;&quot;) { block.stateOrProvince = field[&apos;GT1.5.4&apos;]; }
					if (field[&apos;GT1.5.5&apos;].toString() != &quot;&quot;) { block.zip = field[&apos;GT1.5.5&apos;]; }
					if (field[&apos;GT1.5.6&apos;].toString() != &quot;&quot;) { block.country = field[&apos;GT1.5.6&apos;]; }
					if (field[&apos;GT1.5.7&apos;].toString() != &quot;&quot;) { block.addressType = field[&apos;GT1.5.7&apos;]; }
					if (field[&apos;GT1.5.8&apos;].toString() != &quot;&quot;) { block.otherGeographicDesignation = field[&apos;GT1.5.8&apos;]; }
					if (field[&apos;GT1.5.9&apos;].toString() != &quot;&quot;) { block.countyOrParishCode = field[&apos;GT1.5.9&apos;]; }
					if (field[&apos;GT1.5.10&apos;].toString() != &quot;&quot;) { block.censusTract = field[&apos;GT1.5.10&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorAddress.push(block);
					}
				}
				if (objGT1[index].guarantorAddress.length == 0) {
					delete objGT1[index].guarantorAddress;
				}
		
				// GT1.6, guarantorPhNumHome
				objGT1[index].guarantorPhNumHome = [];
				for each (field in seg[&apos;GT1.6&apos;]) {
					var block = {};
					if (field[&apos;GT1.6.1&apos;].toString() != &quot;&quot;) { block.number = field[&apos;GT1.6.1&apos;]; }
					if (field[&apos;GT1.6.2&apos;].toString() != &quot;&quot;) { block.telecommunicationUseCode = field[&apos;GT1.6.2&apos;]; }
					if (field[&apos;GT1.6.3&apos;].toString() != &quot;&quot;) { block.telecommunicationEquipmentType = field[&apos;GT1.6.3&apos;]; }
					if (field[&apos;GT1.6.4&apos;].toString() != &quot;&quot;) { block.emailAddress = field[&apos;GT1.6.4&apos;]; }
					if (field[&apos;GT1.6.5&apos;].toString() != &quot;&quot;) { block.countryCode = field[&apos;GT1.6.5&apos;]; }
					if (field[&apos;GT1.6.6&apos;].toString() != &quot;&quot;) { block.areaCityCode = field[&apos;GT1.6.6&apos;]; }
					if (field[&apos;GT1.6.7&apos;].toString() != &quot;&quot;) { block.phoneNumber = field[&apos;GT1.6.7&apos;]; }
					if (field[&apos;GT1.6.8&apos;].toString() != &quot;&quot;) { block.extension = field[&apos;GT1.6.8&apos;]; }
					if (field[&apos;GT1.6.9&apos;].toString() != &quot;&quot;) { block.text = field[&apos;GT1.6.9&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorPhNumHome.push(block);
					}
				}
				if (objGT1[index].guarantorPhNumHome.length == 0) {
					delete objGT1[index].guarantorPhNumHome;
				}
		
				// GT1.7, guarantorPhNumBusiness
				objGT1[index].guarantorPhNumBusiness = [];
				for each (field in seg[&apos;GT1.7&apos;]) {
					var block = {};
					if (field[&apos;GT1.7.1&apos;].toString() != &quot;&quot;) { block.number = field[&apos;GT1.7.1&apos;]; }
					if (field[&apos;GT1.7.2&apos;].toString() != &quot;&quot;) { block.telecommunicationUseCode = field[&apos;GT1.7.2&apos;]; }
					if (field[&apos;GT1.7.3&apos;].toString() != &quot;&quot;) { block.telecommunicationEquipmentType = field[&apos;GT1.7.3&apos;]; }
					if (field[&apos;GT1.7.4&apos;].toString() != &quot;&quot;) { block.emailAddress = field[&apos;GT1.7.4&apos;]; }
					if (field[&apos;GT1.7.5&apos;].toString() != &quot;&quot;) { block.countryCode = field[&apos;GT1.7.5&apos;]; }
					if (field[&apos;GT1.7.6&apos;].toString() != &quot;&quot;) { block.areaCityCode = field[&apos;GT1.7.6&apos;]; }
					if (field[&apos;GT1.7.7&apos;].toString() != &quot;&quot;) { block.phoneNumber = field[&apos;GT1.7.7&apos;]; }
					if (field[&apos;GT1.7.8&apos;].toString() != &quot;&quot;) { block.extension = field[&apos;GT1.7.8&apos;]; }
					if (field[&apos;GT1.7.9&apos;].toString() != &quot;&quot;) { block.text = field[&apos;GT1.7.9&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorPhNumBusiness.push(block);
					}
				}
				if (objGT1[index].guarantorPhNumBusiness.length == 0) {
					delete objGT1[index].guarantorPhNumBusiness;
				}
		
				// GT1.8, guarantorDatetimeOfBirth
				if (seg[&apos;GT1.8&apos;][&apos;GT1.8.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorDatetimeOfBirth = seg[&apos;GT1.8&apos;][&apos;GT1.8.1&apos;]; }
		
				// GT1.9, guarantorSex
				if (seg[&apos;GT1.9&apos;][&apos;GT1.9.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorSex = seg[&apos;GT1.9&apos;][&apos;GT1.9.1&apos;]; }
		
				// GT1.10, guarantorType
				if (seg[&apos;GT1.10&apos;][&apos;GT1.10.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorType = seg[&apos;GT1.10&apos;][&apos;GT1.10.1&apos;]; }
		
				// GT1.11, guarantorRelationship
				if (seg[&apos;GT1.11&apos;][&apos;GT1.11.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorRelationship = seg[&apos;GT1.11&apos;][&apos;GT1.11.1&apos;]; }
		
				// GT1.12, guarantorSSN
				if (seg[&apos;GT1.12&apos;][&apos;GT1.12.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorSSN = seg[&apos;GT1.12&apos;][&apos;GT1.12.1&apos;]; }
		
				// GT1.13, guarantorDateBegin
				if (seg[&apos;GT1.13&apos;][&apos;GT1.13.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorDateBegin = seg[&apos;GT1.13&apos;][&apos;GT1.13.1&apos;]; }
		
				// GT1.14, guarantorDateEnd
				if (seg[&apos;GT1.14&apos;][&apos;GT1.14.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorDateEnd = seg[&apos;GT1.14&apos;][&apos;GT1.14.1&apos;]; }
		
				// GT1.15, guarantorPriority
				if (seg[&apos;GT1.15&apos;][&apos;GT1.15.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorPriority = seg[&apos;GT1.15&apos;][&apos;GT1.15.1&apos;]; }
		
				// GT1.16, guarantorEmployerName
				objGT1[index].guarantorEmployerName = [];
				for each (field in seg[&apos;GT1.16&apos;]) {
					var block = {};
					if (field[&apos;GT1.16.1&apos;].toString() != &quot;&quot;) { block.lastName = field[&apos;GT1.16.1&apos;]; }
					if (field[&apos;GT1.16.2&apos;].toString() != &quot;&quot;) { block.firstName = field[&apos;GT1.16.2&apos;]; }
					if (field[&apos;GT1.16.3&apos;].toString() != &quot;&quot;) { block.middleInitOrName = field[&apos;GT1.16.3&apos;]; }
					if (field[&apos;GT1.16.4&apos;].toString() != &quot;&quot;) { block.suffix = field[&apos;GT1.16.4&apos;]; }
					if (field[&apos;GT1.16.5&apos;].toString() != &quot;&quot;) { block.prefix = field[&apos;GT1.16.5&apos;]; }
					if (field[&apos;GT1.16.6&apos;].toString() != &quot;&quot;) { block.degree = field[&apos;GT1.16.6&apos;]; }
					if (field[&apos;GT1.16.7&apos;].toString() != &quot;&quot;) { block.nameTypeCode = field[&apos;GT1.16.7&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorEmployerName.push(block);
					}	
				}
				if (objGT1[index].guarantorEmployerName.length == 0) {
					delete objGT1[index].guarantorEmployerName;
				}
		
				// GT1.17, guarantorEmployerAddress
				objGT1[index].guarantorEmployerAddress = [];
				for each (field in seg[&apos;GT1.17&apos;]) {
					var block = {};
					if (field[&apos;GT1.17.1&apos;].toString() != &quot;&quot;) { block.streetAddress = field[&apos;GT1.17.1&apos;]; }
					if (field[&apos;GT1.17.2&apos;].toString() != &quot;&quot;) { block.otherDesignation = field[&apos;GT1.17.2&apos;]; }
					if (field[&apos;GT1.17.3&apos;].toString() != &quot;&quot;) { block.city = field[&apos;GT1.17.3&apos;]; }
					if (field[&apos;GT1.17.4&apos;].toString() != &quot;&quot;) { block.stateOrProvince = field[&apos;GT1.17.4&apos;]; }
					if (field[&apos;GT1.17.5&apos;].toString() != &quot;&quot;) { block.zip = field[&apos;GT1.17.5&apos;]; }
					if (field[&apos;GT1.17.6&apos;].toString() != &quot;&quot;) { block.country = field[&apos;GT1.17.6&apos;]; }
					if (field[&apos;GT1.17.7&apos;].toString() != &quot;&quot;) { block.addressType = field[&apos;GT1.17.7&apos;]; }
					if (field[&apos;GT1.17.8&apos;].toString() != &quot;&quot;) { block.otherGeographicDesignation = field[&apos;GT1.17.8&apos;]; }
					if (field[&apos;GT1.17.9&apos;].toString() != &quot;&quot;) { block.countyOrParishCode = field[&apos;GT1.17.9&apos;]; }
					if (field[&apos;GT1.17.10&apos;].toString() != &quot;&quot;) { block.censusTract = field[&apos;GT1.17.10&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorEmployerAddress.push(block);
					}
				}
				if (objGT1[index].guarantorEmployerAddress.length == 0) {
					delete objGT1[index].guarantorEmployerAddress;
				}
		
				// GT1.18, guarantorEmployerPhoneNumber
				objGT1[index].guarantorEmployerPhoneNumber = [];
				for each (field in seg[&apos;GT1.18&apos;]) {
					var block = {};
					if (field[&apos;GT1.18.1&apos;].toString() != &quot;&quot;) { block.number = field[&apos;GT1.18.1&apos;]; }
					if (field[&apos;GT1.18.2&apos;].toString() != &quot;&quot;) { block.telecommunicationUseCode = field[&apos;GT1.18.2&apos;]; }
					if (field[&apos;GT1.18.3&apos;].toString() != &quot;&quot;) { block.telecommunicationEquipmentType = field[&apos;GT1.18.3&apos;]; }
					if (field[&apos;GT1.18.4&apos;].toString() != &quot;&quot;) { block.emailAddress = field[&apos;GT1.18.4&apos;]; }
					if (field[&apos;GT1.18.5&apos;].toString() != &quot;&quot;) { block.countryCode = field[&apos;GT1.18.5&apos;]; }
					if (field[&apos;GT1.18.6&apos;].toString() != &quot;&quot;) { block.areaCityCode = field[&apos;GT1.18.6&apos;]; }
					if (field[&apos;GT1.18.7&apos;].toString() != &quot;&quot;) { block.phoneNumber = field[&apos;GT1.18.7&apos;]; }
					if (field[&apos;GT1.18.8&apos;].toString() != &quot;&quot;) { block.extension = field[&apos;GT1.18.8&apos;]; }
					if (field[&apos;GT1.18.9&apos;].toString() != &quot;&quot;) { block.text = field[&apos;GT1.18.9&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorEmployerPhoneNumber.push(block);
					}
				}
				if (objGT1[index].guarantorEmployerPhoneNumber.length == 0) {
					delete objGT1[index].guarantorEmployerPhoneNumber;
				}
		
				// GT1.19, guarantorEmployeeIDNumber
				objGT1[index].guarantorEmployeeIDNumber = [];
				for each (field in seg[&apos;GT1.19&apos;]) {
					var block = {};
					if (field[&apos;GT1.19.1&apos;].toString() != &quot;&quot;) { block.id = field[&apos;GT1.19.1&apos;]; }
					if (field[&apos;GT1.19.2&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;GT1.19.2&apos;]; }
					if (field[&apos;GT1.19.3&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;GT1.19.3&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;GT1.19.4&apos;][&apos;GT1.19.4.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;GT1.19.4&apos;][&apos;GT1.19.4.1&apos;]; }
					if (field[&apos;GT1.19.4&apos;][&apos;GT1.19.4.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;GT1.19.4&apos;][&apos;GT1.19.4.2&apos;]; }
					if (field[&apos;GT1.19.4&apos;][&apos;GT1.19.4.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;GT1.19.4&apos;][&apos;GT1.19.4.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;GT1.19.4&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;GT1.19.4&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;GT1.19.5&apos;].toString() != &quot;&quot;) { block.idTypeCode = field[&apos;GT1.19.5&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;GT1.19.6&apos;][&apos;GT1.19.6.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;GT1.19.6&apos;][&apos;GT1.19.6.1&apos;]; }
					if (field[&apos;GT1.19.6&apos;][&apos;GT1.19.6.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;GT1.19.6&apos;][&apos;GT1.19.6.2&apos;]; }
					if (field[&apos;GT1.19.6&apos;][&apos;GT1.19.6.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;GT1.19.6&apos;][&apos;GT1.19.6.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;GT1.19.6&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;GT1.19.6&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorEmployeeIDNumber.push(block);
					}
				}
				if (objGT1[index].guarantorEmployeeIDNumber.length == 0) {
					delete objGT1[index].guarantorEmployeeIDNumber;
				}
		
				// GT1.20, guarantorEmploymentStatus
				if (seg[&apos;GT1.20&apos;][&apos;GT1.20.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorEmploymentStatus = seg[&apos;GT1.20&apos;][&apos;GT1.20.1&apos;]; }
		
				// GT1.21, guarantorOrganizationName
				objGT1[index].guarantorOrganizationName = [];
				for each (field in seg[&apos;GT1.21&apos;]) {
					var block = {};
					if (field[&apos;GT1.21.1&apos;].toString() != &quot;&quot;) { block.organizationName = field[&apos;GT1.21.1&apos;]; }
					if (field[&apos;GT1.21.2&apos;].toString() != &quot;&quot;) { block.organizationNameTypeCode = field[&apos;GT1.21.2&apos;]; }
					if (field[&apos;GT1.21.3&apos;].toString() != &quot;&quot;) { block.idNumber = field[&apos;GT1.21.3&apos;]; }
					if (field[&apos;GT1.21.4&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;GT1.21.4&apos;]; }
					if (field[&apos;GT1.21.5&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;GT1.21.5&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;GT1.21.6&apos;][&apos;GT1.21.6.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;GT1.21.6&apos;][&apos;GT1.21.6.1&apos;]; }
					if (field[&apos;GT1.21.6&apos;][&apos;GT1.21.6.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;GT1.21.6&apos;][&apos;GT1.21.6.2&apos;]; }
					if (field[&apos;GT1.21.6&apos;][&apos;GT1.21.6.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;GT1.21.6&apos;][&apos;GT1.21.6.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;GT1.21.6&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;GT1.21.6&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;GT1.21.7&apos;].toString() != &quot;&quot;) { block.idTypeCode = field[&apos;GT1.21.7&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;GT1.21.8&apos;][&apos;GT1.21.8.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;GT1.21.8&apos;][&apos;GT1.21.8.1&apos;]; }
					if (field[&apos;GT1.21.8&apos;][&apos;GT1.21.8.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;GT1.21.8&apos;][&apos;GT1.21.8.2&apos;]; }
					if (field[&apos;GT1.21.8&apos;][&apos;GT1.21.8.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;GT1.21.8&apos;][&apos;GT1.21.8.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;GT1.21.8&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;GT1.21.8&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorOrganizationName.push(block);
					}
				}
				if (objGT1[index].guarantorOrganizationName.length == 0) {
					delete objGT1[index].guarantorOrganizationName;
				}
		
				// GT1.22, guarantorBillingHoldFlag
				if (seg[&apos;GT1.22&apos;][&apos;GT1.22.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorBillingHoldFlag = seg[&apos;GT1.22&apos;][&apos;GT1.22.1&apos;]; }
		
				// GT1.23, guarantorCreditRatingCode
				objGT1[index].guarantorCreditRatingCode = {};
				if (seg[&apos;GT1.23&apos;][&apos;GT1.23.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorCreditRatingCode.id = seg[&apos;GT1.23&apos;][&apos;GT1.23.1&apos;]; }
				if (seg[&apos;GT1.23&apos;][&apos;GT1.23.2&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorCreditRatingCode.text = seg[&apos;GT1.23&apos;][&apos;GT1.23.2&apos;]; }
				if (seg[&apos;GT1.23&apos;][&apos;GT1.23.3&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorCreditRatingCode.codingSystem = seg[&apos;GT1.23&apos;][&apos;GT1.23.3&apos;]; }
				if (seg[&apos;GT1.23&apos;][&apos;GT1.23.4&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorCreditRatingCode.altId = seg[&apos;GT1.23&apos;][&apos;GT1.23.4&apos;]; }
				if (seg[&apos;GT1.23&apos;][&apos;GT1.23.5&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorCreditRatingCode.altText = seg[&apos;GT1.23&apos;][&apos;GT1.23.5&apos;]; }
				if (seg[&apos;GT1.23&apos;][&apos;GT1.23.6&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorCreditRatingCode.altCodingSystem = seg[&apos;GT1.23&apos;][&apos;GT1.23.6&apos;]; }
				if (Object.keys(objGT1[index].guarantorCreditRatingCode).length == 0) {
					delete objGT1[index].guarantorCreditRatingCode;
				}
		
				// GT1.24, guarantorDeathDateAndTime
				if (seg[&apos;GT1.24&apos;][&apos;GT1.24.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorDeathDateAndTime = seg[&apos;GT1.24&apos;][&apos;GT1.24.1&apos;]; }
		
				// GT1.25, guarantorDeathFlag
				if (seg[&apos;GT1.25&apos;][&apos;GT1.25.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorDeathFlag = seg[&apos;GT1.25&apos;][&apos;GT1.25.1&apos;]; }
		
				// GT1.26, guarantorChargeAdjustmentCode
				objGT1[index].guarantorChargeAdjustmentCode = {};
				if (seg[&apos;GT1.26&apos;][&apos;GT1.26.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorChargeAdjustmentCode.id = seg[&apos;GT1.26&apos;][&apos;GT1.26.1&apos;]; }
				if (seg[&apos;GT1.26&apos;][&apos;GT1.26.2&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorChargeAdjustmentCode.text = seg[&apos;GT1.26&apos;][&apos;GT1.26.2&apos;]; }
				if (seg[&apos;GT1.26&apos;][&apos;GT1.26.3&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorChargeAdjustmentCode.codingSystem = seg[&apos;GT1.26&apos;][&apos;GT1.26.3&apos;]; }
				if (seg[&apos;GT1.26&apos;][&apos;GT1.26.4&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorChargeAdjustmentCode.altId = seg[&apos;GT1.26&apos;][&apos;GT1.26.4&apos;]; }
				if (seg[&apos;GT1.26&apos;][&apos;GT1.26.5&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorChargeAdjustmentCode.altText = seg[&apos;GT1.26&apos;][&apos;GT1.26.5&apos;]; }
				if (seg[&apos;GT1.26&apos;][&apos;GT1.26.6&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorChargeAdjustmentCode.altCodingSystem = seg[&apos;GT1.26&apos;][&apos;GT1.26.6&apos;]; }
				if (Object.keys(objGT1[index].guarantorChargeAdjustmentCode).length == 0) {
					delete objGT1[index].guarantorChargeAdjustmentCode;
				}
		
				// GT1.27, guarantorHouseholdAnnualIncome
				objGT1[index].guarantorHouseholdAnnualIncome = {};
				objGT1[index].guarantorHouseholdAnnualIncome.price = {};
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.1&apos;][&apos;GT1.27.1.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.price.quantity = seg[&apos;GT1.27&apos;][&apos;GT1.27.1&apos;][&apos;GT1.27.1.1&apos;]; }
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.1&apos;][&apos;GT1.27.1.2&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.price.denomination = seg[&apos;GT1.27&apos;][&apos;GT1.27.1&apos;][&apos;GT1.27.1.2&apos;]; }
				if (Object.keys(objGT1[index].guarantorHouseholdAnnualIncome.price).length == 0) {
					if (seg[&apos;GT1.27&apos;][&apos;GT1.27.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.price.quantity = seg[&apos;GT1.27&apos;][&apos;GT1.27.1&apos;]; }
					else delete objGT1[index].guarantorHouseholdAnnualIncome.price;
				}
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.2&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.priceType = seg[&apos;GT1.27&apos;][&apos;GT1.27.2&apos;]; }
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.3&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.fromValue = seg[&apos;GT1.27&apos;][&apos;GT1.27.3&apos;]; }
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.4&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.toValue = seg[&apos;GT1.27&apos;][&apos;GT1.27.4&apos;]; }
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.5&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.rangeUnits = seg[&apos;GT1.27&apos;][&apos;GT1.27.5&apos;]; }
				objGT1[index].guarantorHouseholdAnnualIncome.rangeType = {};
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.rangeType.id = seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.1&apos;]; }
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.2&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.rangeType.text = seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.2&apos;]; }
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.3&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.rangeType.codingSystem = seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.3&apos;]; }
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.4&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.rangeType.altId = seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.4&apos;]; }
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.5&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.rangeType.altText = seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.5&apos;]; }
				if (seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.6&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.rangeType.altCodingSystem = seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;][&apos;GT1.27.6.6&apos;]; }
				if (Object.keys(objGT1[index].guarantorHouseholdAnnualIncome.rangeType).length == 0) {
					if (seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdAnnualIncome.rangeType.id = seg[&apos;GT1.27&apos;][&apos;GT1.27.6&apos;]; }
					else delete objGT1[index].guarantorHouseholdAnnualIncome.rangeType;
				}
				if (Object.keys(objGT1[index].guarantorHouseholdAnnualIncome).length == 0) {
					delete objGT1[index].guarantorHouseholdAnnualIncome;
				}
		
				// GT1.28, guarantorHouseholdSize
				if (seg[&apos;GT1.28&apos;][&apos;GT1.28.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHouseholdSize = seg[&apos;GT1.28&apos;][&apos;GT1.28.1&apos;]; }
		
				// GT1.29, guarantorEmployerIDNumber
				objGT1[index].guarantorEmployerIDNumber = [];
				for each (field in seg[&apos;GT1.29&apos;]) {
					var block = {};
					if (field[&apos;GT1.29.1&apos;].toString() != &quot;&quot;) { block.id = field[&apos;GT1.29.1&apos;]; }
					if (field[&apos;GT1.29.2&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;GT1.29.2&apos;]; }
					if (field[&apos;GT1.29.3&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;GT1.29.3&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;GT1.29.4&apos;][&apos;GT1.29.4.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;GT1.29.4&apos;][&apos;GT1.29.4.1&apos;]; }
					if (field[&apos;GT1.29.4&apos;][&apos;GT1.29.4.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;GT1.29.4&apos;][&apos;GT1.29.4.2&apos;]; }
					if (field[&apos;GT1.29.4&apos;][&apos;GT1.29.4.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;GT1.29.4&apos;][&apos;GT1.29.4.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;GT1.29.4&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;GT1.29.4&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;GT1.29.5&apos;].toString() != &quot;&quot;) { block.idTypeCode = field[&apos;GT1.29.5&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;GT1.29.6&apos;][&apos;GT1.29.6.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;GT1.29.6&apos;][&apos;GT1.29.6.1&apos;]; }
					if (field[&apos;GT1.29.6&apos;][&apos;GT1.29.6.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;GT1.29.6&apos;][&apos;GT1.29.6.2&apos;]; }
					if (field[&apos;GT1.29.6&apos;][&apos;GT1.29.6.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;GT1.29.6&apos;][&apos;GT1.29.6.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;GT1.29.6&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;GT1.29.6&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorEmployerIDNumber.push(block);
					}
				}
				if (objGT1[index].guarantorEmployerIDNumber.length == 0) {
					delete objGT1[index].guarantorEmployerIDNumber;
				}
		
				// GT1.30, guarantorMaritalStatusCode
				if (seg[&apos;GT1.30&apos;][&apos;GT1.30.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorMaritalStatusCode = seg[&apos;GT1.30&apos;][&apos;GT1.30.1&apos;]; }
		
				// GT1.31, guarantorHireEffectiveDate
				if (seg[&apos;GT1.31&apos;][&apos;GT1.31.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorHireEffectiveDate = seg[&apos;GT1.31&apos;][&apos;GT1.31.1&apos;]; }
		
				// GT1.32, employmentStopDate
				if (seg[&apos;GT1.32&apos;][&apos;GT1.32.1&apos;].toString() != &quot;&quot;) { objGT1[index].employmentStopDate = seg[&apos;GT1.32&apos;][&apos;GT1.32.1&apos;]; }
		
				// GT1.33, livingDependency
				if (seg[&apos;GT1.33&apos;][&apos;GT1.33.1&apos;].toString() != &quot;&quot;) { objGT1[index].livingDependency = seg[&apos;GT1.33&apos;][&apos;GT1.33.1&apos;]; }
		
				// GT1.34, ambulatoryStatus
				if (seg[&apos;GT1.34&apos;][&apos;GT1.34.1&apos;].toString() != &quot;&quot;) { objGT1[index].ambulatoryStatus = seg[&apos;GT1.34&apos;][&apos;GT1.34.1&apos;]; }
		
				// GT1.35, citizenship
				if (seg[&apos;GT1.35&apos;][&apos;GT1.35.1&apos;].toString() != &quot;&quot;) { objGT1[index].citizenship = seg[&apos;GT1.35&apos;][&apos;GT1.35.1&apos;]; }
		
				// GT1.36, primaryLanguage
				objGT1[index].primaryLanguage = {};
				if (seg[&apos;GT1.36&apos;][&apos;GT1.36.1&apos;].toString() != &quot;&quot;) { objGT1[index].primaryLanguage.id = seg[&apos;GT1.36&apos;][&apos;GT1.36.1&apos;]; }
				if (seg[&apos;GT1.36&apos;][&apos;GT1.36.2&apos;].toString() != &quot;&quot;) { objGT1[index].primaryLanguage.text = seg[&apos;GT1.36&apos;][&apos;GT1.36.2&apos;]; }
				if (seg[&apos;GT1.36&apos;][&apos;GT1.36.3&apos;].toString() != &quot;&quot;) { objGT1[index].primaryLanguage.codingSystem = seg[&apos;GT1.36&apos;][&apos;GT1.36.3&apos;]; }
				if (seg[&apos;GT1.36&apos;][&apos;GT1.36.4&apos;].toString() != &quot;&quot;) { objGT1[index].primaryLanguage.altId = seg[&apos;GT1.36&apos;][&apos;GT1.36.4&apos;]; }
				if (seg[&apos;GT1.36&apos;][&apos;GT1.36.5&apos;].toString() != &quot;&quot;) { objGT1[index].primaryLanguage.altText = seg[&apos;GT1.36&apos;][&apos;GT1.36.5&apos;]; }
				if (seg[&apos;GT1.36&apos;][&apos;GT1.36.6&apos;].toString() != &quot;&quot;) { objGT1[index].primaryLanguage.altCodingSystem = seg[&apos;GT1.36&apos;][&apos;GT1.36.6&apos;]; }
				if (Object.keys(objGT1[index].primaryLanguage).length == 0) {
					delete objGT1[index].primaryLanguage;
				}
		
				// GT1.37, livingArrangement
				if (seg[&apos;GT1.37&apos;][&apos;GT1.37.1&apos;].toString() != &quot;&quot;) { objGT1[index].livingArrangement = seg[&apos;GT1.37&apos;][&apos;GT1.37.1&apos;]; }
		
				// GT1.38, publicityIndicator
				objGT1[index].publicityIndicator = {};
				if (seg[&apos;GT1.38&apos;][&apos;GT1.38.1&apos;].toString() != &quot;&quot;) { objGT1[index].publicityIndicator.id = seg[&apos;GT1.38&apos;][&apos;GT1.38.1&apos;]; }
				if (seg[&apos;GT1.38&apos;][&apos;GT1.38.2&apos;].toString() != &quot;&quot;) { objGT1[index].publicityIndicator.text = seg[&apos;GT1.38&apos;][&apos;GT1.38.2&apos;]; }
				if (seg[&apos;GT1.38&apos;][&apos;GT1.38.3&apos;].toString() != &quot;&quot;) { objGT1[index].publicityIndicator.codingSystem = seg[&apos;GT1.38&apos;][&apos;GT1.38.3&apos;]; }
				if (seg[&apos;GT1.38&apos;][&apos;GT1.38.4&apos;].toString() != &quot;&quot;) { objGT1[index].publicityIndicator.altId = seg[&apos;GT1.38&apos;][&apos;GT1.38.4&apos;]; }
				if (seg[&apos;GT1.38&apos;][&apos;GT1.38.5&apos;].toString() != &quot;&quot;) { objGT1[index].publicityIndicator.altText = seg[&apos;GT1.38&apos;][&apos;GT1.38.5&apos;]; }
				if (seg[&apos;GT1.38&apos;][&apos;GT1.38.6&apos;].toString() != &quot;&quot;) { objGT1[index].publicityIndicator.altCodingSystem = seg[&apos;GT1.38&apos;][&apos;GT1.38.6&apos;]; }
				if (Object.keys(objGT1[index].publicityIndicator).length == 0) {
					delete objGT1[index].publicityIndicator;
				}
		
				// GT1.39, protectionIndicator
				if (seg[&apos;GT1.39&apos;][&apos;GT1.39.1&apos;].toString() != &quot;&quot;) { objGT1[index].protectionIndicator = seg[&apos;GT1.39&apos;][&apos;GT1.39.1&apos;]; }
		
				// GT1.40, studentIndicator
				if (seg[&apos;GT1.40&apos;][&apos;GT1.40.1&apos;].toString() != &quot;&quot;) { objGT1[index].studentIndicator = seg[&apos;GT1.40&apos;][&apos;GT1.40.1&apos;]; }
		
				// GT1.41, religion
				if (seg[&apos;GT1.41&apos;][&apos;GT1.41.1&apos;].toString() != &quot;&quot;) { objGT1[index].religion = seg[&apos;GT1.41&apos;][&apos;GT1.41.1&apos;]; }
		
				// GT1.42, mothersMaidenName
				objGT1[index].mothersMaidenName = {};
				if (seg[&apos;GT1.42&apos;][&apos;GT1.42.1&apos;].toString() != &quot;&quot;) { objGT1[index].mothersMaidenName.lastName = seg[&apos;GT1.42&apos;][&apos;GT1.42.1&apos;]; }
				if (seg[&apos;GT1.42&apos;][&apos;GT1.42.2&apos;].toString() != &quot;&quot;) { objGT1[index].mothersMaidenName.firstName = seg[&apos;GT1.42&apos;][&apos;GT1.42.2&apos;]; }
				if (seg[&apos;GT1.42&apos;][&apos;GT1.42.3&apos;].toString() != &quot;&quot;) { objGT1[index].mothersMaidenName.middleInitOrName = seg[&apos;GT1.42&apos;][&apos;GT1.42.3&apos;]; }
				if (seg[&apos;GT1.42&apos;][&apos;GT1.42.4&apos;].toString() != &quot;&quot;) { objGT1[index].mothersMaidenName.suffix = seg[&apos;GT1.42&apos;][&apos;GT1.42.4&apos;]; }
				if (seg[&apos;GT1.42&apos;][&apos;GT1.42.5&apos;].toString() != &quot;&quot;) { objGT1[index].mothersMaidenName.prefix = seg[&apos;GT1.42&apos;][&apos;GT1.42.5&apos;]; }
				if (seg[&apos;GT1.42&apos;][&apos;GT1.42.6&apos;].toString() != &quot;&quot;) { objGT1[index].mothersMaidenName.degree = seg[&apos;GT1.42&apos;][&apos;GT1.42.6&apos;]; }
				if (seg[&apos;GT1.42&apos;][&apos;GT1.42.7&apos;].toString() != &quot;&quot;) { objGT1[index].mothersMaidenName.nameTypeCode = seg[&apos;GT1.42&apos;][&apos;GT1.42.7&apos;]; }
				if (Object.keys(objGT1[index].mothersMaidenName).length == 0) {
					delete objGT1[index].mothersMaidenName;
				}
		
				// GT1.43, nationality
				objGT1[index].nationality = {};
				if (seg[&apos;GT1.43&apos;][&apos;GT1.43.1&apos;].toString() != &quot;&quot;) { objGT1[index].nationality.id = seg[&apos;GT1.43&apos;][&apos;GT1.43.1&apos;]; }
				if (seg[&apos;GT1.43&apos;][&apos;GT1.43.2&apos;].toString() != &quot;&quot;) { objGT1[index].nationality.text = seg[&apos;GT1.43&apos;][&apos;GT1.43.2&apos;]; }
				if (seg[&apos;GT1.43&apos;][&apos;GT1.43.3&apos;].toString() != &quot;&quot;) { objGT1[index].nationality.codingSystem = seg[&apos;GT1.43&apos;][&apos;GT1.43.3&apos;]; }
				if (seg[&apos;GT1.43&apos;][&apos;GT1.43.4&apos;].toString() != &quot;&quot;) { objGT1[index].nationality.altId = seg[&apos;GT1.43&apos;][&apos;GT1.43.4&apos;]; }
				if (seg[&apos;GT1.43&apos;][&apos;GT1.43.5&apos;].toString() != &quot;&quot;) { objGT1[index].nationality.altText = seg[&apos;GT1.43&apos;][&apos;GT1.43.5&apos;]; }
				if (seg[&apos;GT1.43&apos;][&apos;GT1.43.6&apos;].toString() != &quot;&quot;) { objGT1[index].nationality.altCodingSystem = seg[&apos;GT1.43&apos;][&apos;GT1.43.6&apos;]; }
				if (Object.keys(objGT1[index].nationality).length == 0) {
					delete objGT1[index].nationality;
				}
		
				// GT1.44, ethnicGroup
				if (seg[&apos;GT1.44&apos;][&apos;GT1.44.1&apos;].toString() != &quot;&quot;) { objGT1[index].ethnicGroup = seg[&apos;GT1.44&apos;][&apos;GT1.44.1&apos;]; }
		
				// GT1.45, contactPersonsName
				objGT1[index].contactPersonsName = [];
				for each (field in seg[&apos;GT1.45&apos;]) {
					var block = {};
					if (field[&apos;GT1.45.1&apos;].toString() != &quot;&quot;) { block.lastName = field[&apos;GT1.45.1&apos;]; }
					if (field[&apos;GT1.45.2&apos;].toString() != &quot;&quot;) { block.firstName = field[&apos;GT1.45.2&apos;]; }
					if (field[&apos;GT1.45.3&apos;].toString() != &quot;&quot;) { block.middleInitOrName = field[&apos;GT1.45.3&apos;]; }
					if (field[&apos;GT1.45.4&apos;].toString() != &quot;&quot;) { block.suffix = field[&apos;GT1.45.4&apos;]; }
					if (field[&apos;GT1.45.5&apos;].toString() != &quot;&quot;) { block.prefix = field[&apos;GT1.45.5&apos;]; }
					if (field[&apos;GT1.45.6&apos;].toString() != &quot;&quot;) { block.degree = field[&apos;GT1.45.6&apos;]; }
					if (field[&apos;GT1.45.7&apos;].toString() != &quot;&quot;) { block.nameTypeCode = field[&apos;GT1.45.7&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].contactPersonsName.push(block);
					}	
				}
				if (objGT1[index].contactPersonsName.length == 0) {
					delete objGT1[index].contactPersonsName;
				}
		
				// GT1.46, contactPersonsTelephoneNumber
				objGT1[index].contactPersonsTelephoneNumber = [];
				for each (field in seg[&apos;GT1.46&apos;]) {
					var block = {};
					if (field[&apos;GT1.46.1&apos;].toString() != &quot;&quot;) { block.number = field[&apos;GT1.46.1&apos;]; }
					if (field[&apos;GT1.46.2&apos;].toString() != &quot;&quot;) { block.telecommunicationUseCode = field[&apos;GT1.46.2&apos;]; }
					if (field[&apos;GT1.46.3&apos;].toString() != &quot;&quot;) { block.telecommunicationEquipmentType = field[&apos;GT1.46.3&apos;]; }
					if (field[&apos;GT1.46.4&apos;].toString() != &quot;&quot;) { block.emailAddress = field[&apos;GT1.46.4&apos;]; }
					if (field[&apos;GT1.46.5&apos;].toString() != &quot;&quot;) { block.countryCode = field[&apos;GT1.46.5&apos;]; }
					if (field[&apos;GT1.46.6&apos;].toString() != &quot;&quot;) { block.areaCityCode = field[&apos;GT1.46.6&apos;]; }
					if (field[&apos;GT1.46.7&apos;].toString() != &quot;&quot;) { block.phoneNumber = field[&apos;GT1.46.7&apos;]; }
					if (field[&apos;GT1.46.8&apos;].toString() != &quot;&quot;) { block.extension = field[&apos;GT1.46.8&apos;]; }
					if (field[&apos;GT1.46.9&apos;].toString() != &quot;&quot;) { block.text = field[&apos;GT1.46.9&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].contactPersonsTelephoneNumber.push(block);
					}
				}
				if (objGT1[index].contactPersonsTelephoneNumber.length == 0) {
					delete objGT1[index].contactPersonsTelephoneNumber;
				}
		
				// GT1.47, contactReason
				objGT1[index].contactReason = {};
				if (seg[&apos;GT1.47&apos;][&apos;GT1.47.1&apos;].toString() != &quot;&quot;) { objGT1[index].contactReason.id = seg[&apos;GT1.47&apos;][&apos;GT1.47.1&apos;]; }
				if (seg[&apos;GT1.47&apos;][&apos;GT1.47.2&apos;].toString() != &quot;&quot;) { objGT1[index].contactReason.text = seg[&apos;GT1.47&apos;][&apos;GT1.47.2&apos;]; }
				if (seg[&apos;GT1.47&apos;][&apos;GT1.47.3&apos;].toString() != &quot;&quot;) { objGT1[index].contactReason.codingSystem = seg[&apos;GT1.47&apos;][&apos;GT1.47.3&apos;]; }
				if (seg[&apos;GT1.47&apos;][&apos;GT1.47.4&apos;].toString() != &quot;&quot;) { objGT1[index].contactReason.altId = seg[&apos;GT1.47&apos;][&apos;GT1.47.4&apos;]; }
				if (seg[&apos;GT1.47&apos;][&apos;GT1.47.5&apos;].toString() != &quot;&quot;) { objGT1[index].contactReason.altText = seg[&apos;GT1.47&apos;][&apos;GT1.47.5&apos;]; }
				if (seg[&apos;GT1.47&apos;][&apos;GT1.47.6&apos;].toString() != &quot;&quot;) { objGT1[index].contactReason.altCodingSystem = seg[&apos;GT1.47&apos;][&apos;GT1.47.6&apos;]; }
				if (Object.keys(objGT1[index].contactReason).length == 0) {
					delete objGT1[index].contactReason;
				}
		
				// GT1.48, contactRelationship
				if (seg[&apos;GT1.48&apos;][&apos;GT1.48.1&apos;].toString() != &quot;&quot;) { objGT1[index].contactRelationship = seg[&apos;GT1.48&apos;][&apos;GT1.48.1&apos;]; }
		
				// GT1.49, jobTitle
				if (seg[&apos;GT1.49&apos;][&apos;GT1.49.1&apos;].toString() != &quot;&quot;) { objGT1[index].jobTitle = seg[&apos;GT1.49&apos;][&apos;GT1.49.1&apos;]; }
		
				// GT1.50, jobCodeClass
				objGT1[index].jobCodeClass = {};
				if (seg[&apos;GT1.50&apos;][&apos;GT1.50.1&apos;].toString() != &quot;&quot;) { objGT1[index].jobCodeClass.id = seg[&apos;GT1.50&apos;][&apos;GT1.50.1&apos;]; }
				if (seg[&apos;GT1.50&apos;][&apos;GT1.50.1&apos;].toString() != &quot;&quot;) { objGT1[index].jobCodeClass.id = seg[&apos;GT1.50&apos;][&apos;GT1.50.1&apos;]; }
				if (Object.keys(objGT1[index].jobCodeClass).length == 0) {
					delete objGT1[index].jobCodeClass;
				}
		
				// GT1.51, guarantorEmployersOrganization
				objGT1[index].guarantorEmployersOrganization = [];
				for each (field in seg[&apos;GT1.51&apos;]) {
					var block = {};
					if (field[&apos;GT1.51.1&apos;].toString() != &quot;&quot;) { block.organizationName = field[&apos;GT1.51.1&apos;]; }
					if (field[&apos;GT1.51.2&apos;].toString() != &quot;&quot;) { block.organizationNameTypeCode = field[&apos;GT1.51.2&apos;]; }
					if (field[&apos;GT1.51.3&apos;].toString() != &quot;&quot;) { block.idNumber = field[&apos;GT1.51.3&apos;]; }
					if (field[&apos;GT1.51.4&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;GT1.51.4&apos;]; }
					if (field[&apos;GT1.51.5&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;GT1.51.5&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;GT1.51.6&apos;][&apos;GT1.51.6.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;GT1.51.6&apos;][&apos;GT1.51.6.1&apos;]; }
					if (field[&apos;GT1.51.6&apos;][&apos;GT1.51.6.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;GT1.51.6&apos;][&apos;GT1.51.6.2&apos;]; }
					if (field[&apos;GT1.51.6&apos;][&apos;GT1.51.6.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;GT1.51.6&apos;][&apos;GT1.51.6.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;GT1.51.6&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;GT1.51.6&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;GT1.51.7&apos;].toString() != &quot;&quot;) { block.idTypeCode = field[&apos;GT1.51.7&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;GT1.51.8&apos;][&apos;GT1.51.8.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;GT1.51.8&apos;][&apos;GT1.51.8.1&apos;]; }
					if (field[&apos;GT1.51.8&apos;][&apos;GT1.51.8.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;GT1.51.8&apos;][&apos;GT1.51.8.2&apos;]; }
					if (field[&apos;GT1.51.8&apos;][&apos;GT1.51.8.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;GT1.51.8&apos;][&apos;GT1.51.8.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;GT1.51.8&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;GT1.51.8&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						objGT1[index].guarantorEmployersOrganization.push(block);
					}
				}
				if (objGT1[index].guarantorEmployersOrganization.length == 0) {
					delete objGT1[index].guarantorEmployersOrganization;
				}
				// GT1.52, handicap
				if (seg[&apos;GT1.52&apos;][&apos;GT1.52.1&apos;].toString() != &quot;&quot;) { objGT1[index].handicap = seg[&apos;GT1.52&apos;][&apos;GT1.52.1&apos;]; }
		
				// GT1.53, jobStatus
				if (seg[&apos;GT1.53&apos;][&apos;GT1.53.1&apos;].toString() != &quot;&quot;) { objGT1[index].jobStatus = seg[&apos;GT1.53&apos;][&apos;GT1.53.1&apos;]; }
		
				// GT1.54, guarantorFinancialClass
				objGT1[index].guarantorFinancialClass = {};
				if (seg[&apos;GT1.54&apos;][&apos;GT1.54.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorFinancialClass.financialClass = seg[&apos;GT1.54&apos;][&apos;GT1.54.1&apos;]; }
				if (seg[&apos;GT1.54&apos;][&apos;GT1.54.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorFinancialClass.effectiveDate = seg[&apos;GT1.54&apos;][&apos;GT1.54.1&apos;]; }
				if (Object.keys(objGT1[index].guarantorFinancialClass).length == 0) {
					delete objGT1[index].guarantorFinancialClass;
				}
		
				// GT1.55, guarantorRace
				if (seg[&apos;GT1.55&apos;][&apos;GT1.55.1&apos;].toString() != &quot;&quot;) { objGT1[index].guarantorRace = seg[&apos;GT1.55&apos;][&apos;GT1.55.1&apos;]; }
		
				// clean up GT1 and increment index
				if (Object.keys(objGT1[index]).length == 0) {
					delete objGT1[index];
				} else {
					index++;
				}
			}
		} // end if 	
		
		return objGT1;
	
	} // end if 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>65c3f0e2-bb64-4403-96ef-3d40b54c6f58</id>
                <name>getHL7MessageFromXML</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911263032</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	getHL7MessageFromXML(msg)- Desc: This function retrieves the HL7v2 content from a SOAP-WS Service response
	from the ns1:return XML element value.

	@param {String} msg - provide the SOAP-WS XML responses containing HL7 message
	@return {String} - return param msg returns the HL7 string
*/
function getHL7MessageFromXML(msg) {
	
	var scriptName= &apos;getHL7MessageFromXML&apos;;
	var debug= 1;
	
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; BEFORE msg: &apos;+msg); }
	msg= msg.*::[&apos;Body&apos;].*::[&apos;submitMessageResponse&apos;].*::[&apos;return&apos;].toString();
	channelMap.put(&apos;hl7ack&apos;,msg);

	msg = new XML(SerializerFactory.getSerializer(&apos;HL7V2&apos;).toXML(msg));
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER XML to HL7 Serializer msg: &apos;+msg); }
	
	return msg;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>0fa46c3c-e815-4701-80cb-80b5946c55e2</id>
                <name>getIN1_v23</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911263061</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	getIN1_v23(msg)
	
	- Desc: This function retrieves HL7v2 HAPI format elements and values from IN1 segment stored in
	object for reference

	@param {String} msg - this contains the raw message (string)
	@return {object} objIN1 - this contains the IN1 segment elements composed into a single objIN1
		object.
*/
function getIN1_v23(msg) {

	// define variables
	if (typeof(msg[&apos;IN1&apos;].toString()) !== undefined) {

		// IN1
		var objIN1= new Object();
	
		if (msg[&apos;IN1&apos;].length() &gt; 0) {
			objIN1 = [];
			var index = 0;
			for each (seg in msg.IN1) {
				objIN1[index] = {};
				
				// IN1.1, setId
				if (seg[&apos;IN1.1&apos;][&apos;IN1.1.1&apos;].toString() != &quot;&quot;) { objIN1[index].setId = seg[&apos;IN1.1&apos;][&apos;IN1.1.1&apos;]; }
		
				// IN1.2, planId
				objIN1[index].planId = {};
				if (seg[&apos;IN1.2&apos;][&apos;IN1.2.1&apos;].toString() != &quot;&quot;) { objIN1[index].planId.id = seg[&apos;IN1.2&apos;][&apos;IN1.2.1&apos;]; }
				if (seg[&apos;IN1.2&apos;][&apos;IN1.2.2&apos;].toString() != &quot;&quot;) { objIN1[index].planId.text = seg[&apos;IN1.2&apos;][&apos;IN1.2.2&apos;]; }
				if (seg[&apos;IN1.2&apos;][&apos;IN1.2.3&apos;].toString() != &quot;&quot;) { objIN1[index].planId.codingSystem = seg[&apos;IN1.2&apos;][&apos;IN1.2.3&apos;]; }
				if (seg[&apos;IN1.2&apos;][&apos;IN1.2.4&apos;].toString() != &quot;&quot;) { objIN1[index].planId.altId = seg[&apos;IN1.2&apos;][&apos;IN1.2.4&apos;]; }
				if (seg[&apos;IN1.2&apos;][&apos;IN1.2.5&apos;].toString() != &quot;&quot;) { objIN1[index].planId.altText = seg[&apos;IN1.2&apos;][&apos;IN1.2.5&apos;]; }
				if (seg[&apos;IN1.2&apos;][&apos;IN1.2.6&apos;].toString() != &quot;&quot;) { objIN1[index].planId.altCodingSystem = seg[&apos;IN1.2&apos;][&apos;IN1.2.6&apos;]; }
				if (Object.keys(objIN1[index].planId).length == 0) {
					delete objIN1[index].planId;
				}
		
				// IN1.3, companyId
				objIN1[index].companyId = [];
				for each (field in seg[&apos;IN1.3&apos;]) {
					var block = {};
					if (field[&apos;IN1.3.1&apos;].toString() != &quot;&quot;) { block.id = field[&apos;IN1.3.1&apos;]; }
					if (field[&apos;IN1.3.2&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;IN1.3.2&apos;]; }
					if (field[&apos;IN1.3.3&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;IN1.3.3&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;IN1.3.4&apos;][&apos;IN1.3.4.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.3.4&apos;][&apos;IN1.3.4.1&apos;]; }
					if (field[&apos;IN1.3.4&apos;][&apos;IN1.3.4.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;IN1.3.4&apos;][&apos;IN1.3.4.2&apos;]; }
					if (field[&apos;IN1.3.4&apos;][&apos;IN1.3.4.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;IN1.3.4&apos;][&apos;IN1.3.4.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;IN1.3.4&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.3.4&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;IN1.3.5&apos;].toString() != &quot;&quot;) { block.idTypeCode = field[&apos;IN1.3.5&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;IN1.3.6&apos;][&apos;IN1.3.6.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.3.6&apos;][&apos;IN1.3.6.1&apos;]; }
					if (field[&apos;IN1.3.6&apos;][&apos;IN1.3.6.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;IN1.3.6&apos;][&apos;IN1.3.6.2&apos;]; }
					if (field[&apos;IN1.3.6&apos;][&apos;IN1.3.6.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;IN1.3.6&apos;][&apos;IN1.3.6.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;IN1.3.6&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.3.6&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].companyId.push(block);
					}
				}
				if (objIN1[index].companyId.length == 0) {
					delete objIN1[index].companyId;
				}
		
				// IN1.4, companyName
				objIN1[index].companyName = [];
				for each (field in seg[&apos;IN1.4&apos;]) {
					var block = {};
					if (field[&apos;IN1.4.1&apos;].toString() != &quot;&quot;) { block.organizationName = field[&apos;IN1.4.1&apos;]; }
					if (field[&apos;IN1.4.2&apos;].toString() != &quot;&quot;) { block.organizationNameTypeCode = field[&apos;IN1.4.2&apos;]; }
					if (field[&apos;IN1.4.3&apos;].toString() != &quot;&quot;) { block.idNumber = field[&apos;IN1.4.3&apos;]; }
					if (field[&apos;IN1.4.4&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;IN1.4.4&apos;]; }
					if (field[&apos;IN1.4.5&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;IN1.4.5&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;IN1.4.6&apos;][&apos;IN1.4.6.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.4.6&apos;][&apos;IN1.4.6.1&apos;]; }
					if (field[&apos;IN1.4.6&apos;][&apos;IN1.4.6.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;IN1.4.6&apos;][&apos;IN1.4.6.2&apos;]; }
					if (field[&apos;IN1.4.6&apos;][&apos;IN1.4.6.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;IN1.4.6&apos;][&apos;IN1.4.6.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;IN1.4.6&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.4.6&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;IN1.4.7&apos;].toString() != &quot;&quot;) { block.idTypeCode = field[&apos;IN1.4.7&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;IN1.4.8&apos;][&apos;IN1.4.8.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.4.8&apos;][&apos;IN1.4.8.1&apos;]; }
					if (field[&apos;IN1.4.8&apos;][&apos;IN1.4.8.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;IN1.4.8&apos;][&apos;IN1.4.8.2&apos;]; }
					if (field[&apos;IN1.4.8&apos;][&apos;IN1.4.8.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;IN1.4.8&apos;][&apos;IN1.4.8.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;IN1.4.8&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.4.8&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].companyName.push(block);
					}
				}
				if (objIN1[index].companyName.length == 0) {
					delete objIN1[index].companyName;
				}
				
				// IN1.5, companyAddress
				objIN1[index].companyAddress = [];
				for each (field in seg[&apos;IN1.5&apos;]) {
					var block = {};
					if (field[&apos;IN1.5.1&apos;].toString() != &quot;&quot;) { block.streetAddress = field[&apos;IN1.5.1&apos;]; }
					if (field[&apos;IN1.5.2&apos;].toString() != &quot;&quot;) { block.otherDesignation = field[&apos;IN1.5.2&apos;]; }
					if (field[&apos;IN1.5.3&apos;].toString() != &quot;&quot;) { block.city = field[&apos;IN1.5.3&apos;]; }
					if (field[&apos;IN1.5.4&apos;].toString() != &quot;&quot;) { block.stateOrProvince = field[&apos;IN1.5.4&apos;]; }
					if (field[&apos;IN1.5.5&apos;].toString() != &quot;&quot;) { block.zip = field[&apos;IN1.5.5&apos;]; }
					if (field[&apos;IN1.5.6&apos;].toString() != &quot;&quot;) { block.country = field[&apos;IN1.5.6&apos;]; }
					if (field[&apos;IN1.5.7&apos;].toString() != &quot;&quot;) { block.addressType = field[&apos;IN1.5.7&apos;]; }
					if (field[&apos;IN1.5.8&apos;].toString() != &quot;&quot;) { block.otherGeographicDesignation = field[&apos;IN1.5.8&apos;]; }
					if (field[&apos;IN1.5.9&apos;].toString() != &quot;&quot;) { block.countyOrParishCode = field[&apos;IN1.5.9&apos;]; }
					if (field[&apos;IN1.5.10&apos;].toString() != &quot;&quot;) { block.censusTract = field[&apos;IN1.5.10&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].companyAddress.push(block);
					}
				}
				if (objIN1[index].companyAddress.length == 0) {
					delete objIN1[index].companyAddress;
				}
		
				// IN1.6, companyContactPerson
				objIN1[index].companyContactPerson = [];
				for each (field in seg[&apos;IN1.6&apos;]) {
					var block = {};
					if (field[&apos;IN1.6.1&apos;].toString() != &quot;&quot;) { block.lastName = field[&apos;IN1.6.1&apos;]; }
					if (field[&apos;IN1.6.2&apos;].toString() != &quot;&quot;) { block.firstName = field[&apos;IN1.6.2&apos;]; }
					if (field[&apos;IN1.6.3&apos;].toString() != &quot;&quot;) { block.middleInitOrName = field[&apos;IN1.6.3&apos;]; }
					if (field[&apos;IN1.6.4&apos;].toString() != &quot;&quot;) { block.suffix = field[&apos;IN1.6.4&apos;]; }
					if (field[&apos;IN1.6.5&apos;].toString() != &quot;&quot;) { block.prefix = field[&apos;IN1.6.5&apos;]; }
					if (field[&apos;IN1.6.6&apos;].toString() != &quot;&quot;) { block.degree = field[&apos;IN1.6.6&apos;]; }
					if (field[&apos;IN1.6.7&apos;].toString() != &quot;&quot;) { block.nameTypeCode = field[&apos;IN1.6.7&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].companyContactPerson.push(block);
					}	
				}
				if (objIN1[index].companyContactPerson.length == 0) {
					delete objIN1[index].companyContactPerson;
				}
		
				// IN1.7, companyPhoneNumber
				objIN1[index].companyPhoneNumber = [];
				for each (field in seg[&apos;IN1.7&apos;]) {
					var block = {};
					if (field[&apos;IN1.7.1&apos;].toString() != &quot;&quot;) { block.number = field[&apos;IN1.7.1&apos;]; }
					if (field[&apos;IN1.7.2&apos;].toString() != &quot;&quot;) { block.telecommunicationUseCode = field[&apos;IN1.7.2&apos;]; }
					if (field[&apos;IN1.7.3&apos;].toString() != &quot;&quot;) { block.telecommunicationEquipmentType = field[&apos;IN1.7.3&apos;]; }
					if (field[&apos;IN1.7.4&apos;].toString() != &quot;&quot;) { block.emailAddress = field[&apos;IN1.7.4&apos;]; }
					if (field[&apos;IN1.7.5&apos;].toString() != &quot;&quot;) { block.countryCode = field[&apos;IN1.7.5&apos;]; }
					if (field[&apos;IN1.7.6&apos;].toString() != &quot;&quot;) { block.areaCityCode = field[&apos;IN1.7.6&apos;]; }
					if (field[&apos;IN1.7.7&apos;].toString() != &quot;&quot;) { block.phoneNumber = field[&apos;IN1.7.7&apos;]; }
					if (field[&apos;IN1.7.8&apos;].toString() != &quot;&quot;) { block.extension = field[&apos;IN1.7.8&apos;]; }
					if (field[&apos;IN1.7.9&apos;].toString() != &quot;&quot;) { block.text = field[&apos;IN1.7.9&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].companyPhoneNumber.push(block);
					}
				}
				if (objIN1[index].companyPhoneNumber.length == 0) {
					delete objIN1[index].companyPhoneNumber;
				}
		
				// IN1.8, groupNumber
				if (seg[&apos;IN1.8&apos;][&apos;IN1.8.1&apos;].toString() != &quot;&quot;) { objIN1[index].groupNumber = seg[&apos;IN1.8&apos;][&apos;IN1.8.1&apos;]; }
		
				// IN1.9, groupName
				objIN1[index].groupName = [];
				for each (field in seg[&apos;IN1.9&apos;]) {
					var block = {};
					if (field[&apos;IN1.9.1&apos;].toString() != &quot;&quot;) { block.organizationName = field[&apos;IN1.9.1&apos;]; }
					if (field[&apos;IN1.9.2&apos;].toString() != &quot;&quot;) { block.organizationNameTypeCode = field[&apos;IN1.9.2&apos;]; }
					if (field[&apos;IN1.9.3&apos;].toString() != &quot;&quot;) { block.idNumber = field[&apos;IN1.9.3&apos;]; }
					if (field[&apos;IN1.9.4&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;IN1.9.4&apos;]; }
					if (field[&apos;IN1.9.5&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;IN1.9.5&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;IN1.9.6&apos;][&apos;IN1.9.6.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.9.6&apos;][&apos;IN1.9.6.1&apos;]; }
					if (field[&apos;IN1.9.6&apos;][&apos;IN1.9.6.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;IN1.9.6&apos;][&apos;IN1.9.6.2&apos;]; }
					if (field[&apos;IN1.9.6&apos;][&apos;IN1.9.6.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;IN1.9.6&apos;][&apos;IN1.9.6.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;IN1.9.6&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.9.6&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;IN1.9.7&apos;].toString() != &quot;&quot;) { block.idTypeCode = field[&apos;IN1.9.7&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;IN1.9.8&apos;][&apos;IN1.9.8.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.9.8&apos;][&apos;IN1.9.8.1&apos;]; }
					if (field[&apos;IN1.9.8&apos;][&apos;IN1.9.8.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;IN1.9.8&apos;][&apos;IN1.9.8.2&apos;]; }
					if (field[&apos;IN1.9.8&apos;][&apos;IN1.9.8.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;IN1.9.8&apos;][&apos;IN1.9.8.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;IN1.9.8&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.9.8&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].groupName.push(block);
					}
				}
				if (objIN1[index].groupName.length == 0) {
					delete objIN1[index].groupName;
				}
		
				// IN1.10, groupEmpId
				objIN1[index].groupEmpId = [];
				for each (field in seg[&apos;IN1.10&apos;]) {
					var block = {};
					if (field[&apos;IN1.10.1&apos;].toString() != &quot;&quot;) { block.id = field[&apos;IN1.10.1&apos;]; }
					if (field[&apos;IN1.10.2&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;IN1.10.2&apos;]; }
					if (field[&apos;IN1.10.3&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;IN1.10.3&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;IN1.10.4&apos;][&apos;IN1.10.4.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.10.4&apos;][&apos;IN1.10.4.1&apos;]; }
					if (field[&apos;IN1.10.4&apos;][&apos;IN1.10.4.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;IN1.10.4&apos;][&apos;IN1.10.4.2&apos;]; }
					if (field[&apos;IN1.10.4&apos;][&apos;IN1.10.4.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;IN1.10.4&apos;][&apos;IN1.10.4.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;IN1.10.4&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.10.4&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;IN1.10.5&apos;].toString() != &quot;&quot;) { block.idTypeCode = field[&apos;IN1.10.5&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;IN1.10.6&apos;][&apos;IN1.10.6.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.10.6&apos;][&apos;IN1.10.6.1&apos;]; }
					if (field[&apos;IN1.10.6&apos;][&apos;IN1.10.6.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;IN1.10.6&apos;][&apos;IN1.10.6.2&apos;]; }
					if (field[&apos;IN1.10.6&apos;][&apos;IN1.10.6.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;IN1.10.6&apos;][&apos;IN1.10.6.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;IN1.10.6&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.10.6&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].groupEmpId.push(block);
					}
				}
				if (objIN1[index].groupEmpId.length == 0) {
					delete objIN1[index].groupEmpId;
				}
		
				// IN1.11, groupEmpName
				objIN1[index].groupEmpName = [];
				for each (field in seg[&apos;IN1.11&apos;]) {
					var block = {};
					if (field[&apos;IN1.11.1&apos;].toString() != &quot;&quot;) { block.organizationName = field[&apos;IN1.11.1&apos;]; }
					if (field[&apos;IN1.11.2&apos;].toString() != &quot;&quot;) { block.organizationNameTypeCode = field[&apos;IN1.11.2&apos;]; }
					if (field[&apos;IN1.11.3&apos;].toString() != &quot;&quot;) { block.idNumber = field[&apos;IN1.11.3&apos;]; }
					if (field[&apos;IN1.11.4&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;IN1.11.4&apos;]; }
					if (field[&apos;IN1.11.5&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;IN1.11.5&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;IN1.11.6&apos;][&apos;IN1.11.6.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.11.6&apos;][&apos;IN1.11.6.1&apos;]; }
					if (field[&apos;IN1.11.6&apos;][&apos;IN1.11.6.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;IN1.11.6&apos;][&apos;IN1.11.6.2&apos;]; }
					if (field[&apos;IN1.11.6&apos;][&apos;IN1.11.6.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;IN1.11.6&apos;][&apos;IN1.11.6.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;IN1.11.6&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.11.6&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;IN1.11.7&apos;].toString() != &quot;&quot;) { block.idTypeCode = field[&apos;IN1.11.7&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;IN1.11.8&apos;][&apos;IN1.11.8.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.11.8&apos;][&apos;IN1.11.8.1&apos;]; }
					if (field[&apos;IN1.11.8&apos;][&apos;IN1.11.8.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;IN1.11.8&apos;][&apos;IN1.11.8.2&apos;]; }
					if (field[&apos;IN1.11.8&apos;][&apos;IN1.11.8.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;IN1.11.8&apos;][&apos;IN1.11.8.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;IN1.11.8&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.11.8&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].groupEmpName.push(block);
					}
				}
				if (objIN1[index].groupEmpName.length == 0) {
					delete objIN1[index].groupEmpName;
				}
		
				// IN1.12, planEffectiveDate
				if (seg[&apos;IN1.12&apos;][&apos;IN1.12.1&apos;].toString() != &quot;&quot;) { objIN1[index].planEffectiveDate = seg[&apos;IN1.12&apos;][&apos;IN1.12.1&apos;]; }
		
				// IN1.13, planExpirationDate
				if (seg[&apos;IN1.13&apos;][&apos;IN1.13.1&apos;].toString() != &quot;&quot;) { objIN1[index].planExpirationDate = seg[&apos;IN1.13&apos;][&apos;IN1.13.1&apos;]; }
		
				// IN1.14, authorizationInformation
				objIN1[index].authorizationInformation = {};
				if (seg[&apos;IN1.14&apos;][&apos;IN1.14.1&apos;].toString() != &quot;&quot;) { objIN1[index].authorizationInformation.authorizationNumber = seg[&apos;IN1.14&apos;][&apos;IN1.14.1&apos;]; }
				if (seg[&apos;IN1.14&apos;][&apos;IN1.14.2&apos;].toString() != &quot;&quot;) { objIN1[index].authorizationInformation.date = seg[&apos;IN1.14&apos;][&apos;IN1.14.2&apos;]; }
				if (seg[&apos;IN1.14&apos;][&apos;IN1.14.3&apos;].toString() != &quot;&quot;) { objIN1[index].authorizationInformation.source = seg[&apos;IN1.14&apos;][&apos;IN1.14.3&apos;]; }
				if (Object.keys(objIN1[index].authorizationInformation).length == 0) {
					delete objIN1[index].authorizationInformation;
				}
		
				// IN1.15, planType
				if (seg[&apos;IN1.15&apos;][&apos;IN1.15.1&apos;].toString() != &quot;&quot;) { objIN1[index].planType = seg[&apos;IN1.15&apos;][&apos;IN1.15.1&apos;]; }
				
				// IN1.16, insuredName
				objIN1[index].insuredName = [];
				for each (field in seg[&apos;IN1.16&apos;]) {
					var block = {};
					if (field[&apos;IN1.16.1&apos;].toString() != &quot;&quot;) { block.lastName = field[&apos;IN1.16.1&apos;]; }
					if (field[&apos;IN1.16.2&apos;].toString() != &quot;&quot;) { block.firstName = field[&apos;IN1.16.2&apos;]; }
					if (field[&apos;IN1.16.3&apos;].toString() != &quot;&quot;) { block.middleInitOrName = field[&apos;IN1.16.3&apos;]; }
					if (field[&apos;IN1.16.4&apos;].toString() != &quot;&quot;) { block.suffix = field[&apos;IN1.16.4&apos;]; }
					if (field[&apos;IN1.16.5&apos;].toString() != &quot;&quot;) { block.prefix = field[&apos;IN1.16.5&apos;]; }
					if (field[&apos;IN1.16.6&apos;].toString() != &quot;&quot;) { block.degree = field[&apos;IN1.16.6&apos;]; }
					if (field[&apos;IN1.16.7&apos;].toString() != &quot;&quot;) { block.nameTypeCode = field[&apos;IN1.16.7&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].insuredName.push(block);
					}	
				}
				if (objIN1[index].insuredName.length == 0) {
					delete objIN1[index].insuredName;
				}
		
				// IN1.17, insuredRelationshipToPatient
				if (seg[&apos;IN1.17&apos;][&apos;IN1.17.1&apos;].toString() != &quot;&quot;) { objIN1[index].insuredRelationshipToPatient = seg[&apos;IN1.17&apos;][&apos;IN1.17.1&apos;]; }
				
				// IN1.18, insuredDob
				if (seg[&apos;IN1.18&apos;][&apos;IN1.18.1&apos;].toString() != &quot;&quot;) { objIN1[index].insuredDob = seg[&apos;IN1.18&apos;][&apos;IN1.18.1&apos;]; }
				
				// IN1.19, insuredAddress
				objIN1[index].insuredAddress = [];
				for each (field in seg[&apos;IN1.19&apos;]) {
					var block = {};
					if (field[&apos;IN1.19.1&apos;].toString() != &quot;&quot;) { block.streetAddress = field[&apos;IN1.19.1&apos;]; }
					if (field[&apos;IN1.19.2&apos;].toString() != &quot;&quot;) { block.otherDesignation = field[&apos;IN1.19.2&apos;]; }
					if (field[&apos;IN1.19.3&apos;].toString() != &quot;&quot;) { block.city = field[&apos;IN1.19.3&apos;]; }
					if (field[&apos;IN1.19.4&apos;].toString() != &quot;&quot;) { block.stateOrProvince = field[&apos;IN1.19.4&apos;]; }
					if (field[&apos;IN1.19.5&apos;].toString() != &quot;&quot;) { block.zip = field[&apos;IN1.19.5&apos;]; }
					if (field[&apos;IN1.19.6&apos;].toString() != &quot;&quot;) { block.country = field[&apos;IN1.19.6&apos;]; }
					if (field[&apos;IN1.19.7&apos;].toString() != &quot;&quot;) { block.addressType = field[&apos;IN1.19.7&apos;]; }
					if (field[&apos;IN1.19.8&apos;].toString() != &quot;&quot;) { block.otherGeographicDesignation = field[&apos;IN1.19.8&apos;]; }
					if (field[&apos;IN1.19.9&apos;].toString() != &quot;&quot;) { block.countyOrParishCode = field[&apos;IN1.19.9&apos;]; }
					if (field[&apos;IN1.19.10&apos;].toString() != &quot;&quot;) { block.censusTract = field[&apos;IN1.19.10&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].insuredAddress.push(block);
					}
				}
				if (objIN1[index].insuredAddress.length == 0) {
					delete objIN1[index].insuredAddress;
				}
		
				// IN1.20, assignmentOfBenefits
				if (seg[&apos;IN1.20&apos;][&apos;IN1.20.1&apos;].toString() != &quot;&quot;) { objIN1[index].assignmentOfBenefits = seg[&apos;IN1.20&apos;][&apos;IN1.20.1&apos;]; }
				
				// IN1.21, coordinationOfBenefits
				if (seg[&apos;IN1.21&apos;][&apos;IN1.21.1&apos;].toString() != &quot;&quot;) { objIN1[index].coordinationOfBenefits = seg[&apos;IN1.21&apos;][&apos;IN1.21.1&apos;]; }
				
				// IN1.22, coordinationOfBenefitsPriority
				if (seg[&apos;IN1.22&apos;][&apos;IN1.22.1&apos;].toString() != &quot;&quot;) { objIN1[index].coordinationOfBenefitsPriority = seg[&apos;IN1.22&apos;][&apos;IN1.22.1&apos;]; }
				
				// IN1.23, noticeOfAdmissionFlag
				if (seg[&apos;IN1.23&apos;][&apos;IN1.23.1&apos;].toString() != &quot;&quot;) { objIN1[index].noticeOfAdmissionFlag = seg[&apos;IN1.23&apos;][&apos;IN1.23.1&apos;]; }
				
				// IN1.24, noticeOfAdmissionDate
				if (seg[&apos;IN1.24&apos;][&apos;IN1.24.1&apos;].toString() != &quot;&quot;) { objIN1[index].noticeOfAdmissionDate = seg[&apos;IN1.24&apos;][&apos;IN1.24.1&apos;]; }
				
				// IN1.25, reportOfEligibilityFlag
				if (seg[&apos;IN1.25&apos;][&apos;IN1.25.1&apos;].toString() != &quot;&quot;) { objIN1[index].reportOfEligibilityFlag = seg[&apos;IN1.25&apos;][&apos;IN1.25.1&apos;]; }
				
				// IN1.26, reportOfEligibilityDate
				if (seg[&apos;IN1.26&apos;][&apos;IN1.26.1&apos;].toString() != &quot;&quot;) { objIN1[index].reportOfEligibilityDate = seg[&apos;IN1.26&apos;][&apos;IN1.26.1&apos;]; }
				
				// IN1.27, releaseInformationCode
				if (seg[&apos;IN1.27&apos;][&apos;IN1.27.1&apos;].toString() != &quot;&quot;) { objIN1[index].releaseInformationCode = seg[&apos;IN1.27&apos;][&apos;IN1.27.1&apos;]; }
				
				// IN1.28, preAdmitCert
				if (seg[&apos;IN1.28&apos;][&apos;IN1.28.1&apos;].toString() != &quot;&quot;) { objIN1[index].preAdmitCert = seg[&apos;IN1.28&apos;][&apos;IN1.28.1&apos;]; }
				
				// IN1.29, verificationDateTime
				if (seg[&apos;IN1.29&apos;][&apos;IN1.29.1&apos;].toString() != &quot;&quot;) { objIN1[index].verificationDateTime = seg[&apos;IN1.29&apos;][&apos;IN1.29.1&apos;]; }
				
				// IN1.30, verificationBy
				objIN1[index].verificationBy = {};
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.1&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.id = seg[&apos;IN1.30&apos;][&apos;IN1.30.1&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.2&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.lastName = seg[&apos;IN1.30&apos;][&apos;IN1.30.2&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.3&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.firstName = seg[&apos;IN1.30&apos;][&apos;IN1.30.3&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.4&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.middleInitOrName = seg[&apos;IN1.30&apos;][&apos;IN1.30.4&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.5&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.suffix = seg[&apos;IN1.30&apos;][&apos;IN1.30.5&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.6&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.prefix = seg[&apos;IN1.30&apos;][&apos;IN1.30.6&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.7&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.degree = seg[&apos;IN1.30&apos;][&apos;IN1.30.7&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.8&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.sourceTable = seg[&apos;IN1.30&apos;][&apos;IN1.30.8&apos;]; }
				objIN1[index].verificationBy.assigningAuthority = {};
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.9&apos;][&apos;IN1.30.9.1&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.assigningAuthority.id = seg[&apos;IN1.30&apos;][&apos;IN1.30.9&apos;][&apos;IN1.30.9.1&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.9&apos;][&apos;IN1.30.9.2&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.assigningAuthority.universalId = seg[&apos;IN1.30&apos;][&apos;IN1.30.9&apos;][&apos;IN1.30.9.2&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.9&apos;][&apos;IN1.30.9.3&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.assigningAuthority.universalIdType = seg[&apos;IN1.30&apos;][&apos;IN1.30.9&apos;][&apos;IN1.30.9.3&apos;]; }
				if (Object.keys(objIN1[index].verificationBy.assigningAuthority).length == 0) {
					if (seg[&apos;IN1.30&apos;][&apos;IN1.30.9&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.assigningAuthority.id = seg[&apos;IN1.30&apos;][&apos;IN1.30.9&apos;]; }
					else delete objIN1[index].verificationBy.assigningAuthority;
				}
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.10&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.nameTypeCode = seg[&apos;IN1.30&apos;][&apos;IN1.30.10&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.11&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.identifierCheckDigit = seg[&apos;IN1.30&apos;][&apos;IN1.30.11&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.12&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.codeIdentifyingCheckDigitScheme = seg[&apos;IN1.30&apos;][&apos;IN1.30.12&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.13&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.identifierTypeCode = seg[&apos;IN1.30&apos;][&apos;IN1.30.13&apos;]; }
				objIN1[index].verificationBy.assigningFacility = {};
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.14&apos;][&apos;IN1.30.14.1&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.assigningFacility.id = seg[&apos;IN1.30&apos;][&apos;IN1.30.14&apos;][&apos;IN1.30.14.1&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.14&apos;][&apos;IN1.30.14.2&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.assigningFacility.universalId = seg[&apos;IN1.30&apos;][&apos;IN1.30.14&apos;][&apos;IN1.30.14.2&apos;]; }
				if (seg[&apos;IN1.30&apos;][&apos;IN1.30.14&apos;][&apos;IN1.30.14.3&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.assigningFacility.universalIdType = seg[&apos;IN1.30&apos;][&apos;IN1.30.14&apos;][&apos;IN1.30.14.3&apos;]; }
				if (Object.keys(objIN1[index].verificationBy.assigningFacility).length == 0) {
					if (seg[&apos;IN1.30&apos;][&apos;IN1.30.14&apos;].toString() != &quot;&quot;) { objIN1[index].verificationBy.assigningFacility.id = seg[&apos;IN1.30&apos;][&apos;IN1.30.14&apos;]; }
					else delete objIN1[index].verificationBy.assigningFacility;
				}
				if (Object.keys(objIN1[index].verificationBy).length == 0) {
					delete objIN1[index].verificationBy;
				}
		
				// IN1.31, typeOfAgreementCode
				if (seg[&apos;IN1.31&apos;][&apos;IN1.31.1&apos;].toString() != &quot;&quot;) { objIN1[index].typeOfAgreementCode = seg[&apos;IN1.31&apos;][&apos;IN1.31.1&apos;]; }
				
				// IN1.32, billingStatus
				if (seg[&apos;IN1.32&apos;][&apos;IN1.32.1&apos;].toString() != &quot;&quot;) { objIN1[index].billingStatus = seg[&apos;IN1.32&apos;][&apos;IN1.32.1&apos;]; }
				
				// IN1.33, lifetimeReserveDays
				if (seg[&apos;IN1.33&apos;][&apos;IN1.33.1&apos;].toString() != &quot;&quot;) { objIN1[index].lifetimeReserveDays = seg[&apos;IN1.33&apos;][&apos;IN1.33.1&apos;]; }
				
				// IN1.34, delayBeforeLrDay
				if (seg[&apos;IN1.34&apos;][&apos;IN1.34.1&apos;].toString() != &quot;&quot;) { objIN1[index].delayBeforeLrDay = seg[&apos;IN1.34&apos;][&apos;IN1.34.1&apos;]; }
				
				// IN1.35, companyPlanCode
				if (seg[&apos;IN1.35&apos;][&apos;IN1.35.1&apos;].toString() != &quot;&quot;) { objIN1[index].companyPlanCode = seg[&apos;IN1.35&apos;][&apos;IN1.35.1&apos;]; }
				
				// IN1.36, policyNumber
				if (seg[&apos;IN1.36&apos;][&apos;IN1.36.1&apos;].toString() != &quot;&quot;) { objIN1[index].policyNumber = seg[&apos;IN1.36&apos;][&apos;IN1.36.1&apos;]; }
				
				// IN1.37, policyDeductible
				objIN1[index].policyDeductible = {};
				objIN1[index].policyDeductible.price = {};
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.1&apos;][&apos;IN1.37.1.1&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.price.quantity = seg[&apos;IN1.37&apos;][&apos;IN1.37.1&apos;][&apos;IN1.37.1.1&apos;]; }
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.1&apos;][&apos;IN1.37.1.2&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.price.denomination = seg[&apos;IN1.37&apos;][&apos;IN1.37.1&apos;][&apos;IN1.37.1.2&apos;]; }
				if (Object.keys(objIN1[index].policyDeductible.price).length == 0) {
					if (seg[&apos;IN1.37&apos;][&apos;IN1.37.1&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.price.quantity = seg[&apos;IN1.37&apos;][&apos;IN1.37.1&apos;]; }
					else delete objIN1[index].policyDeductible.price;
				}
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.2&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.priceType = seg[&apos;IN1.37&apos;][&apos;IN1.37.2&apos;]; }
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.3&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.fromValue = seg[&apos;IN1.37&apos;][&apos;IN1.37.3&apos;]; }
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.4&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.toValue = seg[&apos;IN1.37&apos;][&apos;IN1.37.4&apos;]; }
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.5&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.rangeUnits = seg[&apos;IN1.37&apos;][&apos;IN1.37.5&apos;]; }
				objIN1[index].policyDeductible.rangeType = {};
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.1&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.rangeType.id = seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.1&apos;]; }
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.2&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.rangeType.text = seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.2&apos;]; }
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.3&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.rangeType.codingSystem = seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.3&apos;]; }
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.4&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.rangeType.altId = seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.4&apos;]; }
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.5&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.rangeType.altText = seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.5&apos;]; }
				if (seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.6&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.rangeType.altCodingSystem = seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;][&apos;IN1.37.6.6&apos;]; }
				if (Object.keys(objIN1[index].policyDeductible.rangeType).length == 0) {
					if (seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;].toString() != &quot;&quot;) { objIN1[index].policyDeductible.rangeType.id = seg[&apos;IN1.37&apos;][&apos;IN1.37.6&apos;]; }
					else delete objIN1[index].policyDeductible.rangeType;
				}
				if (Object.keys(objIN1[index].policyDeductible).length == 0) {
					delete objIN1[index].policyDeductible;
				}
		
				// IN1.38, policyLimitAmount
				objIN1[index].policyLimitAmount = {};
				objIN1[index].policyLimitAmount.price = {};
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.1&apos;][&apos;IN1.38.1.1&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.price.quantity = seg[&apos;IN1.38&apos;][&apos;IN1.38.1&apos;][&apos;IN1.38.1.1&apos;]; }
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.1&apos;][&apos;IN1.38.1.2&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.price.denomination = seg[&apos;IN1.38&apos;][&apos;IN1.38.1&apos;][&apos;IN1.38.1.2&apos;]; }
				if (Object.keys(objIN1[index].policyLimitAmount.price).length == 0) {
					if (seg[&apos;IN1.38&apos;][&apos;IN1.38.1&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.price.quantity = seg[&apos;IN1.38&apos;][&apos;IN1.38.1&apos;]; }
					else delete objIN1[index].policyLimitAmount.price;
				}
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.2&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.priceType = seg[&apos;IN1.38&apos;][&apos;IN1.38.2&apos;]; }
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.3&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.fromValue = seg[&apos;IN1.38&apos;][&apos;IN1.38.3&apos;]; }
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.4&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.toValue = seg[&apos;IN1.38&apos;][&apos;IN1.38.4&apos;]; }
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.5&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.rangeUnits = seg[&apos;IN1.38&apos;][&apos;IN1.38.5&apos;]; }
				objIN1[index].policyLimitAmount.rangeType = {};
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.1&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.rangeType.id = seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.1&apos;]; }
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.2&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.rangeType.text = seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.2&apos;]; }
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.3&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.rangeType.codingSystem = seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.3&apos;]; }
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.4&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.rangeType.altId = seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.4&apos;]; }
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.5&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.rangeType.altText = seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.5&apos;]; }
				if (seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.6&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.rangeType.altCodingSystem = seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;][&apos;IN1.38.6.6&apos;]; }
				if (Object.keys(objIN1[index].policyLimitAmount.rangeType).length == 0) {
					if (seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitAmount.rangeType.id = seg[&apos;IN1.38&apos;][&apos;IN1.38.6&apos;]; }
					else delete objIN1[index].policyLimitAmount.rangeType;
				}
				if (Object.keys(objIN1[index].policyLimitAmount).length == 0) {
					delete objIN1[index].policyLimitAmount;
				}
		
				// IN1.39, policyLimitDays
				if (seg[&apos;IN1.39&apos;][&apos;IN1.39.1&apos;].toString() != &quot;&quot;) { objIN1[index].policyLimitDays = seg[&apos;IN1.39&apos;][&apos;IN1.39.1&apos;]; }
				
				// IN1.40, roomRateSemiPrivate
				objIN1[index].roomRateSemiPrivate = {};
				objIN1[index].roomRateSemiPrivate.price = {};
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.1&apos;][&apos;IN1.40.1.1&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.price.quantity = seg[&apos;IN1.40&apos;][&apos;IN1.40.1&apos;][&apos;IN1.40.1.1&apos;]; }
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.1&apos;][&apos;IN1.40.1.2&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.price.denomination = seg[&apos;IN1.40&apos;][&apos;IN1.40.1&apos;][&apos;IN1.40.1.2&apos;]; }
				if (Object.keys(objIN1[index].roomRateSemiPrivate.price).length == 0) {
					if (seg[&apos;IN1.40&apos;][&apos;IN1.40.1&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.price.quantity = seg[&apos;IN1.40&apos;][&apos;IN1.40.1&apos;]; }
					else delete objIN1[index].roomRateSemiPrivate.price;
				}
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.2&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.priceType = seg[&apos;IN1.40&apos;][&apos;IN1.40.2&apos;]; }
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.3&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.fromValue = seg[&apos;IN1.40&apos;][&apos;IN1.40.3&apos;]; }
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.4&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.toValue = seg[&apos;IN1.40&apos;][&apos;IN1.40.4&apos;]; }
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.5&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.rangeUnits = seg[&apos;IN1.40&apos;][&apos;IN1.40.5&apos;]; }
				objIN1[index].roomRateSemiPrivate.rangeType = {};
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.1&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.rangeType.id = seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.1&apos;]; }
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.2&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.rangeType.text = seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.2&apos;]; }
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.3&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.rangeType.codingSystem = seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.3&apos;]; }
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.4&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.rangeType.altId = seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.4&apos;]; }
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.5&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.rangeType.altText = seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.5&apos;]; }
				if (seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.6&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.rangeType.altCodingSystem = seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;][&apos;IN1.40.6.6&apos;]; }
				if (Object.keys(objIN1[index].roomRateSemiPrivate.rangeType).length == 0) {
					if (seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;].toString() != &quot;&quot;) { objIN1[index].roomRateSemiPrivate.rangeType.id = seg[&apos;IN1.40&apos;][&apos;IN1.40.6&apos;]; }
					else delete objIN1[index].roomRateSemiPrivate.rangeType;
				}
				if (Object.keys(objIN1[index].roomRateSemiPrivate).length == 0) {
					delete objIN1[index].roomRateSemiPrivate;
				}
		
				// IN1.41, roomRatePrivate
				objIN1[index].roomRatePrivate = {};
				objIN1[index].roomRatePrivate.price = {};
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.1&apos;][&apos;IN1.41.1.1&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.price.quantity = seg[&apos;IN1.41&apos;][&apos;IN1.41.1&apos;][&apos;IN1.41.1.1&apos;]; }
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.1&apos;][&apos;IN1.41.1.2&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.price.denomination = seg[&apos;IN1.41&apos;][&apos;IN1.41.1&apos;][&apos;IN1.41.1.2&apos;]; }
				if (Object.keys(objIN1[index].roomRatePrivate.price).length == 0) {
					if (seg[&apos;IN1.41&apos;][&apos;IN1.41.1&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.price.quantity = seg[&apos;IN1.41&apos;][&apos;IN1.41.1&apos;]; }
					else delete objIN1[index].roomRatePrivate.price;
				}
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.2&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.priceType = seg[&apos;IN1.41&apos;][&apos;IN1.41.2&apos;]; }
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.3&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.fromValue = seg[&apos;IN1.41&apos;][&apos;IN1.41.3&apos;]; }
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.4&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.toValue = seg[&apos;IN1.41&apos;][&apos;IN1.41.4&apos;]; }
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.5&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.rangeUnits = seg[&apos;IN1.41&apos;][&apos;IN1.41.5&apos;]; }
				objIN1[index].roomRatePrivate.rangeType = {};
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.1&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.rangeType.id = seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.1&apos;]; }
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.2&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.rangeType.text = seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.2&apos;]; }
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.3&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.rangeType.codingSystem = seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.3&apos;]; }
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.4&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.rangeType.altId = seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.4&apos;]; }
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.5&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.rangeType.altText = seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.5&apos;]; }
				if (seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.6&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.rangeType.altCodingSystem = seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;][&apos;IN1.41.6.6&apos;]; }
				if (Object.keys(objIN1[index].roomRatePrivate.rangeType).length == 0) {
					if (seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;].toString() != &quot;&quot;) { objIN1[index].roomRatePrivate.rangeType.id = seg[&apos;IN1.41&apos;][&apos;IN1.41.6&apos;]; }
					else delete objIN1[index].roomRatePrivate.rangeType;
				}
				if (Object.keys(objIN1[index].roomRatePrivate).length == 0) {
					delete objIN1[index].roomRatePrivate;
				}
		
				// IN1.42, insuredEmploymentStatus
				objIN1[index].insuredEmploymentStatus = {};
				if (seg[&apos;IN1.42&apos;][&apos;IN1.42.1&apos;].toString() != &quot;&quot;) { objIN1[index].insuredEmploymentStatus.id = seg[&apos;IN1.42&apos;][&apos;IN1.42.1&apos;]; }
				if (seg[&apos;IN1.42&apos;][&apos;IN1.42.2&apos;].toString() != &quot;&quot;) { objIN1[index].insuredEmploymentStatus.text = seg[&apos;IN1.42&apos;][&apos;IN1.42.2&apos;]; }
				if (seg[&apos;IN1.42&apos;][&apos;IN1.42.3&apos;].toString() != &quot;&quot;) { objIN1[index].insuredEmploymentStatus.codingSystem = seg[&apos;IN1.42&apos;][&apos;IN1.42.3&apos;]; }
				if (seg[&apos;IN1.42&apos;][&apos;IN1.42.4&apos;].toString() != &quot;&quot;) { objIN1[index].insuredEmploymentStatus.altId = seg[&apos;IN1.42&apos;][&apos;IN1.42.4&apos;]; }
				if (seg[&apos;IN1.42&apos;][&apos;IN1.42.5&apos;].toString() != &quot;&quot;) { objIN1[index].insuredEmploymentStatus.altText = seg[&apos;IN1.42&apos;][&apos;IN1.42.5&apos;]; }
				if (seg[&apos;IN1.42&apos;][&apos;IN1.42.6&apos;].toString() != &quot;&quot;) { objIN1[index].insuredEmploymentStatus.altCodingSystem = seg[&apos;IN1.42&apos;][&apos;IN1.42.6&apos;]; }
				if (Object.keys(objIN1[index].insuredEmploymentStatus).length == 0) {
					delete objIN1[index].insuredEmploymentStatus;
				}
				
				// IN1.43, insuredSex
				if (seg[&apos;IN1.43&apos;][&apos;IN1.43.1&apos;].toString() != &quot;&quot;) { objIN1[index].insuredSex = seg[&apos;IN1.43&apos;][&apos;IN1.43.1&apos;]; }
				
				// IN1.44, insuredEmployerAddress
				objIN1[index].insuredEmployerAddress = [];
				for each (field in seg[&apos;IN1.44&apos;]) {
					var block = {};
					if (field[&apos;IN1.44.1&apos;].toString() != &quot;&quot;) { block.streetAddress = field[&apos;IN1.44.1&apos;]; }
					if (field[&apos;IN1.44.2&apos;].toString() != &quot;&quot;) { block.otherDesignation = field[&apos;IN1.44.2&apos;]; }
					if (field[&apos;IN1.44.3&apos;].toString() != &quot;&quot;) { block.city = field[&apos;IN1.44.3&apos;]; }
					if (field[&apos;IN1.44.4&apos;].toString() != &quot;&quot;) { block.stateOrProvince = field[&apos;IN1.44.4&apos;]; }
					if (field[&apos;IN1.44.5&apos;].toString() != &quot;&quot;) { block.zip = field[&apos;IN1.44.5&apos;]; }
					if (field[&apos;IN1.44.6&apos;].toString() != &quot;&quot;) { block.country = field[&apos;IN1.44.6&apos;]; }
					if (field[&apos;IN1.44.7&apos;].toString() != &quot;&quot;) { block.addressType = field[&apos;IN1.44.7&apos;]; }
					if (field[&apos;IN1.44.8&apos;].toString() != &quot;&quot;) { block.otherGeographicDesignation = field[&apos;IN1.44.8&apos;]; }
					if (field[&apos;IN1.44.9&apos;].toString() != &quot;&quot;) { block.countyOrParishCode = field[&apos;IN1.44.9&apos;]; }
					if (field[&apos;IN1.44.10&apos;].toString() != &quot;&quot;) { block.censusTract = field[&apos;IN1.44.10&apos;]; }
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].insuredEmployerAddress.push(block);
					}
				}
				if (objIN1[index].insuredEmployerAddress.length == 0) {
					delete objIN1[index].insuredEmployerAddress;
				}
		
				// IN1.45, verificationStatus
				if (seg[&apos;IN1.45&apos;][&apos;IN1.45.1&apos;].toString() != &quot;&quot;) { objIN1[index].verificationStatus = seg[&apos;IN1.45&apos;][&apos;IN1.45.1&apos;]; }
				
				// IN1.46, priorInsurancePlanId
				if (seg[&apos;IN1.46&apos;][&apos;IN1.46.1&apos;].toString() != &quot;&quot;) { objIN1[index].priorInsurancePlanId = seg[&apos;IN1.46&apos;][&apos;IN1.46.1&apos;]; }
				
				// IN1.47, coverageType
				if (seg[&apos;IN1.47&apos;][&apos;IN1.47.1&apos;].toString() != &quot;&quot;) { objIN1[index].coverageType = seg[&apos;IN1.47&apos;][&apos;IN1.47.1&apos;]; }
				
				// IN1.48, handicap
				if (seg[&apos;IN1.48&apos;][&apos;IN1.48.1&apos;].toString() != &quot;&quot;) { objIN1[index].handicap = seg[&apos;IN1.48&apos;][&apos;IN1.48.1&apos;]; }
				
				// IN1.49, insuredIdNumber
				objIN1[index].insuredIdNumber = [];
				for each (field in seg[&apos;IN1.49&apos;]) {
					var block = {};
					if (field[&apos;IN1.49.1&apos;].toString() != &quot;&quot;) { block.id = field[&apos;IN1.49.1&apos;]; }
					if (field[&apos;IN1.49.2&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;IN1.49.2&apos;]; }
					if (field[&apos;IN1.49.3&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;IN1.49.3&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;IN1.49.4&apos;][&apos;IN1.49.4.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.49.4&apos;][&apos;IN1.49.4.1&apos;]; }
					if (field[&apos;IN1.49.4&apos;][&apos;IN1.49.4.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;IN1.49.4&apos;][&apos;IN1.49.4.2&apos;]; }
					if (field[&apos;IN1.49.4&apos;][&apos;IN1.49.4.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;IN1.49.4&apos;][&apos;IN1.49.4.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;IN1.49.4&apos;].toString() != &quot;&quot;) { block.assigningAuthority.namespaceId = field[&apos;IN1.49.4&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;IN1.49.5&apos;].toString() != &quot;&quot;) { block.idTypeCode = field[&apos;IN1.49.5&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;IN1.49.6&apos;][&apos;IN1.49.6.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.49.6&apos;][&apos;IN1.49.6.1&apos;]; }
					if (field[&apos;IN1.49.6&apos;][&apos;IN1.49.6.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;IN1.49.6&apos;][&apos;IN1.49.6.2&apos;]; }
					if (field[&apos;IN1.49.6&apos;][&apos;IN1.49.6.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;IN1.49.6&apos;][&apos;IN1.49.6.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;IN1.49.6&apos;].toString() != &quot;&quot;) { block.assigningFacility.namespaceId = field[&apos;IN1.49.6&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						objIN1[index].insuredIdNumber.push(block);
					}
				}
				if (objIN1[index].insuredIdNumber.length == 0) {
					delete objIN1[index].insuredIdNumber;
				}

				// clean up IN1 and increment index
				if (Object.keys(objIN1[index]).length == 0) {
					delete objIN1[index];
				} else {
					index++;
				}
			}
		}
		return objIN1;	
	} // end if 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>11129b32-0d06-4bbf-881a-466425800808</id>
                <name>getMSH_v23</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262873</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	getMSH_v23(msg)
	
	- Desc: This function retrieves HL7v2 HAPI format elements and values from MSH segment stored in
	object for reference

	@param {String} msg - this contains the raw message (string)
	@return {object} objMSH - this contains the MSH segment elements composed into a single objMSH
		object.
*/
function getMSH_v23(msg) {

	var scriptName= &apos;getMSH_v23&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG msg.MSH: &apos;+JSON.stringify(msg[&apos;MSH&apos;].toString())); }
	
	// define variables
	if (typeof(msg[&apos;MSH&apos;].toString()) !== undefined) {

		// MSH
		// var objMSH= new Object();
		var objMSH= {};

		// MSH.1, fieldSeparator
		if (msg[&apos;MSH&apos;][&apos;MSH.1&apos;].toString() != &quot;&quot;) { objMSH.fieldSeparator = msg[&apos;MSH&apos;][&apos;MSH.1&apos;].toString(); }
					
		// objMSH.2, encodingCharacters
		if (msg[&apos;MSH&apos;][&apos;MSH.2&apos;].toString() != &quot;&quot;) { objMSH.subFieldSeparator = msg[&apos;MSH&apos;][&apos;MSH.2&apos;].toString(); }
		
		// objMSH.3, sendingApplication
		if (msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString() != &quot;&quot;) { objMSH.sendingApplication = msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString(); }
		
		// objMSH.4, sendingFacility
		if (msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString() != &quot;&quot;) { objMSH.sendingFacility= msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString(); }
		
		// objMSH.5, receivingApplication
		if (msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString() != &quot;&quot;) { objMSH.receivingApplication = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString(); }
		
		// objMSH.6, receivingFacility
		if (msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;].toString() != &quot;&quot;) { objMSH.receivingFacility = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;].toString(); }
		
		// objMSH.7, dateTimeOfMessage
		if (msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString() != &quot;&quot;) { objMSH.messageDateTime = msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString(); }
		
		// objMSH.8, security
		if (msg[&apos;MSH&apos;][&apos;MSH.8&apos;][&apos;MSH.8.1&apos;].toString() != &quot;&quot;) { objMSH.security = msg[&apos;MSH&apos;][&apos;MSH.8&apos;][&apos;MSH.8.1&apos;].toString(); }
		
		// objMSH.9, messageType
		if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;].toString() != &quot;&quot;) {
			objMSH.messageType = msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString();
			objMSH.eventType   = msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();
			// logger.error(scriptName+&apos;::DEBUG objMSH_messageType: &apos;+objMSH.messageType+&apos; objMSH_eventType: &apos;+objMSH.eventType);
		}
		
		// objMSH.10, messageControlID
		if (msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString() != &quot;&quot;) { 
			objMSH.messageControlID = msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString(); 
		}
		
		// objMSH.11, processingID
		if (msg[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;].toString() != &quot;&quot;) {
			objMSH.processingID = msg[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;].toString(); 
		}
		
		// objMSH.12, versionID
		if (msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;].toString() != &quot;&quot;) { objMSH.hl7version = msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;].toString(); }
		
		// objMSH.13, sequenceNumber
		if (msg[&apos;MSH&apos;][&apos;MSH.13&apos;][&apos;MSH.13.1&apos;].toString() != &quot;&quot;) { objMSH.sequenceNumber = msg[&apos;MSH&apos;][&apos;MSH.13&apos;][&apos;MSH.13.1&apos;].toString(); }
		
		// objMSH.14, continuationPointer
		if (msg[&apos;MSH&apos;][&apos;MSH.14&apos;][&apos;MSH.14.1&apos;].toString() != &quot;&quot;) { objMSH.continuationPointer = msg[&apos;MSH&apos;][&apos;MSH.14&apos;][&apos;MSH.14.1&apos;].toString(); }
		
		// objMSH.15, acceptAcknowledgmentType
		if (msg[&apos;MSH&apos;][&apos;MSH.15&apos;][&apos;MSH.15.1&apos;].toString() != &quot;&quot;) { objMSH.acceptAcknowledgmentType = msg[&apos;MSH&apos;][&apos;MSH.15&apos;][&apos;MSH.15.1&apos;].toString(); }
		
		// objMSH.16, applicationAcknowledgmentType
		if (msg[&apos;MSH&apos;][&apos;MSH.16&apos;][&apos;MSH.16.1&apos;].toString() != &quot;&quot;) { objMSH.applicationAcknowledgmentType = msg[&apos;MSH&apos;][&apos;MSH.16&apos;][&apos;MSH.16.1&apos;].toString(); }
		
		// objMSH.17, countryCode
		if (msg[&apos;MSH&apos;][&apos;MSH.17&apos;][&apos;MSH.17.1&apos;].toString() != &quot;&quot;) { objMSH.countryCode = msg[&apos;MSH&apos;][&apos;MSH.17&apos;][&apos;MSH.17.1&apos;].toString(); }
		
		// objMSH.18, characterSet
		if (msg[&apos;MSH&apos;][&apos;MSH.18&apos;][&apos;MSH.18.1&apos;].toString() != &quot;&quot;) { objMSH.characterSet= msg[&apos;MSH&apos;][&apos;MSH.18&apos;][&apos;MSH.18.1&apos;].toString(); }

		// objMSH.19, principalLanguageOfMessage
		if (msg[&apos;MSH&apos;][&apos;MSH.19&apos;][&apos;MSH.19.1&apos;].toString() != &quot;&quot;) { objMSH.principalLanguageOfMessage = msg[&apos;MSH&apos;][&apos;MSH.19&apos;][&apos;MSH.19.1&apos;].toString(); }

		if (debug&gt;0) { 
			logger.error(scriptName+&apos;::DEBUG objMSH: &apos;+JSON.stringify(objMSH)); 
		}
		
		return objMSH;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>02666541-6d28-4fe9-8aa1-8d875a993d18</id>
                <name>getPD1_v23</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262605</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	getPD1_v23(msg)
	
	- Desc: This function retrieves HL7v2 HAPI format elements and values from PD1 segment stored in
	object for reference

	@param {String} msg - this contains the raw message (string)
	@return {object} objPD1 - this contains the PD1 segment elements composed into a single objPD1 object.
*/
function getPD1_v23(msg) {

	// define variables
	if (typeof(msg[&apos;PD1&apos;]) !== undefined) {

		// PD1	
		var objPD1= new Object();

		if (msg[&apos;PD1&apos;].length() &gt; 0) {
			var index = 0;
			for each (seg in msg.PD1) {

				// PD1.1, Living Dependency
				if (seg[&apos;PD1.1&apos;].toString() != &apos;&apos;) { objPD1.livingDependency= seg[&apos;PD1.1&apos;].toString(); }
					
				// PD1.2, Living Arrangement
				if (seg[&apos;PD1.2&apos;].toString() != &apos;&apos;) { objPD1.livingArrangement= seg[&apos;PD1.2&apos;].toString(); }
					
				// PD1.3, Patient Primary Facility
				if(typeof(seg[&apos;PD1.3&apos;]) !== &apos;undefined&apos;) {
					
					var objPatientPrimaryFacility= new Object();
						if (seg[&apos;PD1.3&apos;][&apos;PD1.3.1&apos;].toString() != &quot;&quot;) { objPatientPrimaryFacility.organizationName= seg[&apos;PD1.3&apos;][&apos;PD1.3.1&apos;].toString(); }
						if (seg[&apos;PD1.3&apos;][&apos;PD1.3.2&apos;].toString() != &quot;&quot;) { objPatientPrimaryFacility.organizationNameTypeCode= seg[&apos;PD1.3&apos;][&apos;PD1.3.2&apos;].toString(); }
						if (seg[&apos;PD1.3&apos;][&apos;PD1.3.3&apos;].toString() != &quot;&quot;) { objPatientPrimaryFacility.id= seg[&apos;PD1.3&apos;][&apos;PD1.3.3&apos;].toString(); }
						if (seg[&apos;PD1.3&apos;][&apos;PD1.3.4&apos;].toString() != &quot;&quot;) { objPatientPrimaryFacility.checkDigit= seg[&apos;PD1.3&apos;][&apos;PD1.3.4&apos;].toString(); }
						if (seg[&apos;PD1.3&apos;][&apos;PD1.3.5&apos;].toString() != &quot;&quot;) { objPatientPrimaryFacility.checkDigitScheme= seg[&apos;PD1.3&apos;][&apos;PD1.3.5&apos;].toString(); }
					
					var objAssigningAuthority= new Object();
						if (seg[&apos;PD1.3&apos;][&apos;PD1.3.6&apos;][&apos;PD1.3.6.1&apos;].toString() != &quot;&quot;) { objAssigningAuthority.namespaceId= seg[&apos;PD1.3&apos;][&apos;PD1.3.6&apos;][&apos;PD1.3.6.1&apos;].toString(); }
						if (seg[&apos;PD1.3&apos;][&apos;PD1.3.6&apos;][&apos;PD1.3.6.2&apos;].toString() != &quot;&quot;) { objAssigningAuthority.universalId= seg[&apos;PD1.3&apos;][&apos;PD1.3.6&apos;][&apos;PD1.3.6.2&apos;].toString(); }
						if (seg[&apos;PD1.3&apos;][&apos;PD1.3.6&apos;][&apos;PD1.3.6.3&apos;].toString() != &quot;&quot;) { objAssigningAuthority.universalIdType= seg[&apos;PD1.3&apos;][&apos;PD1.3.6&apos;][&apos;PD1.3.6.3&apos;].toString(); }
						objPatientPrimaryFacility.assigningAuthority= objAssigningAuthority;
					
					if (seg[&apos;PD1.3&apos;][&apos;PD1.3.7&apos;].toString() != &quot;&quot;) { objPatientPrimaryFacility.identifierTypeCode= seg[&apos;PD1.3&apos;][&apos;PD1.3.7&apos;].toString(); }
					
					var objAssigningFacility= new Object();
						if (seg[&apos;PD1.3&apos;][&apos;PD1.3.8&apos;][&apos;PD1.3.8.1&apos;].toString() != &quot;&quot;) { objAssigningFacility.namespaceId= seg[&apos;PD1.3&apos;][&apos;PD1.3.8&apos;][&apos;PD1.3.8.1&apos;].toString(); }
						if (seg[&apos;PD1.3&apos;][&apos;PD1.3.8&apos;][&apos;PD1.3.8.2&apos;].toString() != &quot;&quot;) { objAssigningFacility.universalId= seg[&apos;PD1.3&apos;][&apos;PD1.3.8&apos;][&apos;PD1.3.8.2&apos;].toString(); }
						if (seg[&apos;PD1.3&apos;][&apos;PD1.3.8&apos;][&apos;PD1.3.8.3&apos;].toString() != &quot;&quot;) { objAssigningFacility.universalIdType= seg[&apos;PD1.3&apos;][&apos;PD1.3.8&apos;][&apos;PD1.3.8.3&apos;].toString(); }
						objPatientPrimaryFacility.assigningFacility= objAssigningFacility;
					
					objPD1.patientPrimaryFacility= objPatientPrimaryFacility;
				}					
			
				// PD1.4, Primary Care Provider Name &amp;amp; ID
				if(typeof(seg[&apos;PD1.4&apos;]) !== &apos;undefined&apos;) {
					var objPrimaryCareProviderName= new Object();
					if (seg[&apos;PD1.4&apos;][&apos;PD1.4.1&apos;].toString() != &quot;&quot;) { objPrimaryCareProviderName.id= seg[&apos;PD1.4&apos;][&apos;PD1.4.1&apos;].toString(); }
					if (seg[&apos;PD1.4&apos;][&apos;PD1.4.2&apos;].toString() != &quot;&quot;) { objPrimaryCareProviderName.familyName= seg[&apos;PD1.4&apos;][&apos;PD1.4.2&apos;].toString(); }
					if (seg[&apos;PD1.4&apos;][&apos;PD1.4.3&apos;].toString() != &quot;&quot;) { objPrimaryCareProviderName.givenName= seg[&apos;PD1.4&apos;][&apos;PD1.4.3&apos;].toString(); }
					if (seg[&apos;PD1.4&apos;][&apos;PD1.4.4&apos;].toString() != &quot;&quot;) { objPrimaryCareProviderName.middleName= seg[&apos;PD1.4&apos;][&apos;PD1.4.4&apos;].toString(); }
					if (seg[&apos;PD1.4&apos;][&apos;PD1.4.5&apos;].toString() != &quot;&quot;) { objPrimaryCareProviderName.suffix= seg[&apos;PD1.4&apos;][&apos;PD1.4.5&apos;].toString(); }
					if (seg[&apos;PD1.4&apos;][&apos;PD1.4.6&apos;].toString() != &quot;&quot;) { objPrimaryCareProviderName.prefix= seg[&apos;PD1.4&apos;][&apos;PD1.4.6&apos;].toString(); }
					if (seg[&apos;PD1.4&apos;][&apos;PD1.4.7&apos;].toString() != &quot;&quot;) { objPrimaryCareProviderName.degree= seg[&apos;PD1.4&apos;][&apos;PD1.4.7&apos;].toString(); }
					if (seg[&apos;PD1.4&apos;][&apos;PD1.4.8&apos;].toString() != &quot;&quot;) { objPrimaryCareProviderName.sourceTable= seg[&apos;PD1.4&apos;][&apos;PD1.4.8&apos;].toString(); }
					
					var objAssigningFacility= new Object();
						if (seg[&apos;PD1.4&apos;][&apos;PD1.4.9&apos;][&apos;PD1.4.9.1&apos;].toString() != &quot;&quot;) { objAssigningFacility.namespaceId= seg[&apos;PD1.4&apos;][&apos;PD1.4.9&apos;][&apos;PD1.4.9.1&apos;].toString(); }
						if (seg[&apos;PD1.4&apos;][&apos;PD1.4.9&apos;][&apos;PD1.4.9.2&apos;].toString() != &quot;&quot;) { objAssigningFacility.universalId= seg[&apos;PD1.4&apos;][&apos;PD1.4.9&apos;][&apos;PD1.4.9.2&apos;].toString(); }
						if (seg[&apos;PD1.4&apos;][&apos;PD1.4.9&apos;][&apos;PD1.4.9.3&apos;].toString() != &quot;&quot;) { objAssigningFacility.universalIdType= seg[&apos;PD1.4&apos;][&apos;PD1.4.9&apos;][&apos;PD1.4.9.3&apos;].toString(); }
						objPrimaryCareProviderName.assigningAuthority= objAssigningFacility;
					
					objPD1.primaryCareProviderName= objPrimaryCareProviderName;
				}
								
				/*
				// clean up SCH and increment index
				if (Object.keys(objSCH[index]).length == 0) {
					delete objSCH[index];
				} else {
					index++;
				}
				*/
				
			}
		}
		
		return objPD1;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>c6bdb3e9-fd12-4821-81d1-34ea8cf274ae</id>
                <name>getPID_v23</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262767</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	getPID_v23(msg)
	
	- Desc: This function retrieves HL7v2 HAPI format elements and values from PID segment stored in
	object for reference

	@param {String} msg - this contains the raw message (string)
	@return {object} objPID - this contains the PID segment elements composed into a single objMSH
		object.
*/
function getPID_v23(msg) {

	var scriptName= &apos;getPID_v23&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG msg.PID: &apos;+JSON.stringify(msg[&apos;PID&apos;].toString())); }
	
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG msg[PID] not undefined= &apos;+(typeof(msg[&apos;PID&apos;].toString()) !== undefined)); }
	
	// define variables
	if (typeof(msg[&apos;PID&apos;].toString()) !== undefined) {

		// PID	
		var objPID= {};

		// PID.1, setId
		if (msg[&apos;PID&apos;][&apos;PID.1&apos;][&apos;PID.1.1&apos;].toString() != &quot;&quot;) {objPID.setId = msg[&apos;PID&apos;][&apos;PID.1&apos;][&apos;PID.1.1&apos;].toString(); }
		
		// PID.2, externalPatientId
		if (msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;].toString() != &quot;&quot;) { objPID.externalPatientId= msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;].toString(); }
	
		// PID.3, patientId
		if (msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString() != &quot;&quot;) { objPID.patientId= msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString(); }
		
		// PID.4, alternatePatientId
		if (msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString() != &quot;&quot;) { objPID.alternatePatientId= msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString(); }
		
		// PID.5, patientName
		var objPatientName= {};
		if (msg[&apos;PID&apos;][&apos;PID.5&apos;].toString().length&gt; 0) {
				
			if (msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString() != &quot;&quot;) { objPatientName.lastName = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString() != &quot;&quot;) { objPatientName.firstName = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString() != &quot;&quot;) { objPatientName.middleName = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.4&apos;].toString() != &quot;&quot;) { objPatientName.suffix = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.4&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.5&apos;].toString() != &quot;&quot;) { objPatientName.prefix = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.5&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.6&apos;].toString() != &quot;&quot;) { objPatientName.degree = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.6&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.7&apos;].toString() != &quot;&quot;) { objPatientName.nameTypeCode = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.7&apos;].toString(); }
		
			objPID.patientName= objPatientName;
			channelMap.put(&apos;objPID.patientName&apos;,objPatientName);
		}	

		// PID.6, mothersMaidenName
		var objMotherMaidenName= {};
		for each (field in msg[&apos;PID&apos;][&apos;PID.6&apos;].children()) {
			if (field[&apos;PID.6.1&apos;].toString() != &quot;&quot;) { objMothersMaidenName.lastName = field[&apos;PID.6.1&apos;].toString(); }
			if (field[&apos;PID.6.2&apos;].toString() != &quot;&quot;) { objMothersMaidenName.firstName = field[&apos;PID.6.2&apos;].toString(); }
			if (field[&apos;PID.6.3&apos;].toString() != &quot;&quot;) { objMothersMaidenName.middleName =field[&apos;PID.6.3&apos;].toString(); }
			if (field[&apos;PID.6.4&apos;].toString() != &quot;&quot;) { objMothersMaidenName.suffix = field[&apos;PID.6.4&apos;].toString(); }
			if (field[&apos;PID.6.5&apos;].toString() != &quot;&quot;) { objMothersMaidenName.prefix = field[&apos;PID.6.5&apos;].toString(); }
			if (field[&apos;PID.6.6&apos;].toString() != &quot;&quot;) { objMothersMaidenName.degree = field[&apos;PID.6.6&apos;].toString(); }
			if (field[&apos;PID.6.7&apos;].toString() != &quot;&quot;) { objMothersMaidenName.nameTypeCode = field[&apos;PID.6.7&apos;].toString(); }
		}
		
		if (objMotherMaidenName.length &gt; 0) {
			objPID.motherMaidenName= objMotherMaidenName;
			channelMap.put(&apos;objPID.motherMaidenName&apos;,objMotherMaidenName);
		}
		
		// PID.7, dateTimeBirth
		if (msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString() != &quot;&quot;) {objPID.dateTimeBirth = msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString(); }
				
		// PID.8, gender
		if (msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString() != &quot;&quot;) {objPID.gender = msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString(); }
				
		// PID.9, alias
		var objPatientAlias= {};
		for each (field in msg[&apos;PID&apos;][&apos;PID.9&apos;].children()) {
			if (field[&apos;PID.9.1&apos;].toString() != &quot;&quot;) { objPatientAlias.lastName = field[&apos;PID.9.1&apos;].toString(); }
			if (field[&apos;PID.9.2&apos;].toString() != &quot;&quot;) { objPatientAlias.firstName = field[&apos;PID.9.2&apos;].toString(); }
			if (field[&apos;PID.9.3&apos;].toString() != &quot;&quot;) { objPatientAlias.middleName = field[&apos;PID.9.3&apos;].toString(); }
			if (field[&apos;PID.9.4&apos;].toString() != &quot;&quot;) { objPatientAlias.suffix = field[&apos;PID.9.4&apos;].toString(); }
			if (field[&apos;PID.9.5&apos;].toString() != &quot;&quot;) { objPatientAlias.prefix = field[&apos;PID.9.5&apos;].toString(); }
			if (field[&apos;PID.9.6&apos;].toString() != &quot;&quot;) { objPatientAlias.degree = field[&apos;PID.9.6&apos;].toString(); }
			if (field[&apos;PID.9.7&apos;].toString() != &quot;&quot;) { objPatientAlias.nameTypeCode = field[&apos;PID.9.7&apos;].toString(); }
		}
		if (objPatientAlias.length &gt; 0) {
			objPID.patientAlias= objPatientAlias;
			channelMap.put(&apos;objPID.patientAlias&apos;,objPatientAlias);
		}
		
		// PID.10, race
		if (msg[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;].toString() != &quot;&quot;) {objPID.race = msg[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;].toString(); }

		// PID.11, address
		var objPatientAddress= {};
		if (msg[&apos;PID&apos;][&apos;PID.11&apos;].toString().length&gt; 0) {
					
			if (msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;].toString().length&gt; 0) { objPatientAddress.streetAddress = msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.2&apos;].toString().length&gt; 0) { objPatientAddress.otherDesignation = msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.2&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;].toString().length&gt; 0) { objPatientAddress.city = msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.4&apos;].toString().length&gt; 0) { objPatientAddress.stateOrProvince = msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.4&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;].toString().length&gt; 0) { objPatientAddress.zip = msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.6&apos;].toString().length&gt; 0) { objPatientAddress.country = msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.6&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.7&apos;].toString().length&gt; 0) { objPatientAddress.addressType = msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.7&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.8&apos;].toString().length&gt; 0) { objPatientAddress.otherGeographicDesignation = msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.8&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.9&apos;].toString().length&gt; 0) { objPatientAddress.countyOrParishCode = msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.9&apos;].toString(); }
			if (msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.10&apos;].toString().length&gt; 0) { objPatientAddress.censusTract = msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.10&apos;].toString(); }
			
			objPID.patientAddress= objPatientAddress;
			channelMap.put(&apos;objPID.patientAddress&apos;,objPatientAddress);
		}
		
		// PID.12, countyCode
		if (msg[&apos;PID&apos;][&apos;PID.12&apos;][&apos;PID.12.1&apos;].toString() != &quot;&quot;) {objPID.countyCode = msg[&apos;PID&apos;][&apos;PID.12&apos;][&apos;PID.12.1&apos;].toString(); }
				
		// PID.13, homePhone
		var objHomePhone = {};
		for each (field in msg[&apos;PID&apos;][&apos;PID.13&apos;].children()) {
			if (field[&apos;PID.13.1&apos;].toString() != &quot;&quot;) { objHomePhone.number = field[&apos;PID.13.1&apos;].toString(); }
			if (field[&apos;PID.13.2&apos;].toString() != &quot;&quot;) { objHomePhone.telecommunicationUseCode = field[&apos;PID.13.2&apos;].toString(); }
			if (field[&apos;PID.13.3&apos;].toString() != &quot;&quot;) { objHomePhone.telecommunicationEquipmentType = field[&apos;PID.13.3&apos;].toString(); }
			if (field[&apos;PID.13.4&apos;].toString() != &quot;&quot;) { objHomePhone.emailAddress = field[&apos;PID.13.4&apos;].toString(); }
			if (field[&apos;PID.13.5&apos;].toString() != &quot;&quot;) { objHomePhone.countryCode = field[&apos;PID.13.5&apos;].toString(); }
			if (field[&apos;PID.13.6&apos;].toString() != &quot;&quot;) { objHomePhone.areaCityCode = field[&apos;PID.13.6&apos;].toString(); }
			if (field[&apos;PID.13.7&apos;].toString() != &quot;&quot;) { objHomePhone.phoneNumber = field[&apos;PID.13.7&apos;].toString(); }
			if (field[&apos;PID.13.8&apos;].toString() != &quot;&quot;) { objHomePhone.extension = field[&apos;PID.13.8&apos;].toString(); }
			if (field[&apos;PID.13.9&apos;].toString() != &quot;&quot;) { objHomePhone.text = field[&apos;PID.13.9&apos;].toString(); }
		}
		if (objHomePhone.length &gt; 0) {
			objPID.homePhone =objHomePhone;
			channelMap.put(&apos;objPID.homePhone&apos;,objHomePhone);
		}
		
		// PID.14, businessPhone
		var objBusinessPhone = {};
		for each (field in msg[&apos;PID&apos;][&apos;PID.14&apos;]) {
			if (field[&apos;PID.14.1&apos;].toString() != &quot;&quot;) { objBusinessPhone.number = field[&apos;PID.14.1&apos;].toString(); }
			if (field[&apos;PID.14.2&apos;].toString() != &quot;&quot;) { objBusinessPhone.telecommunicationUseCode = field[&apos;PID.14.2&apos;].toString(); }
			if (field[&apos;PID.14.3&apos;].toString() != &quot;&quot;) { objBusinessPhone.telecommunicationEquipmentType = field[&apos;PID.14.3&apos;].toString(); }
			if (field[&apos;PID.14.4&apos;].toString() != &quot;&quot;) { objBusinessPhone.emailAddress = field[&apos;PID.14.4&apos;].toString(); }
			if (field[&apos;PID.14.5&apos;].toString() != &quot;&quot;) { objBusinessPhone.countryCode = field[&apos;PID.14.5&apos;].toString(); }
			if (field[&apos;PID.14.6&apos;].toString() != &quot;&quot;) { objBusinessPhone.areaCityCode = field[&apos;PID.14.6&apos;].toString(); }
			if (field[&apos;PID.14.7&apos;].toString() != &quot;&quot;) { objBusinessPhone.phoneNumber = field[&apos;PID.14.7&apos;].toString(); }
			if (field[&apos;PID.14.8&apos;].toString() != &quot;&quot;) { objBusinessPhone.extension = field[&apos;PID.14.8&apos;].toString(); }
			if (field[&apos;PID.14.9&apos;].toString() != &quot;&quot;) { objBusinessPhone.text = field[&apos;PID.14.9&apos;].toString(); }
		}
		if (objBusinessPhone.length &gt; 0) {
			objPID.businessPhone= objBusinessPhone;
			channelMap.put(&apos;objPID.businessPhone&apos;,objBusinessPhone);
		}
		
		// PID.15, primaryLanguage
		if (msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.1&apos;].toString() != &quot;&quot;) { objPID.primaryLanguage = msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.1&apos;].toString(); }
		
		// PID.16, maritalStatus
		if (msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;].toString() != &quot;&quot;) { objPID.maritalStatus = msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;].toString(); }
				
		// PID.17, religion
		if (msg[&apos;PID&apos;][&apos;PID.17&apos;][&apos;PID.17.1&apos;].toString() != &quot;&quot;) { objPID.religion = msg[&apos;PID&apos;][&apos;PID.17&apos;][&apos;PID.17.1&apos;].toString(); }
		
		// PID.18, accountNumber
		if (msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString() != &quot;&quot;) { objPID.accountNumber = msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString(); }
			
		// PID.19, ssn
		if (msg[&apos;PID&apos;][&apos;PID.19&apos;][&apos;PID.19.1&apos;].toString() != &quot;&quot;) {objPID.ssn = msg[&apos;PID&apos;][&apos;PID.19&apos;][&apos;PID.19.1&apos;].toString(); }
				
		// PID.20, driversLicenseNumber
		if (msg[&apos;PID&apos;][&apos;PID.20&apos;][&apos;PID.20.1&apos;].toString() != &quot;&quot;) {objPID.driversLicenseNumber = msg[&apos;PID&apos;][&apos;PID.20&apos;][&apos;PID.20.1&apos;].toString(); }
		
		// PID.21, mothersId
		if (msg[&apos;PID&apos;][&apos;PID.21&apos;][&apos;PID.21.1&apos;].toString() != &quot;&quot;) {objPID.mothersId = msg[&apos;PID&apos;][&apos;PID.21&apos;][&apos;PID.21.1&apos;].toString(); }
		
		// PID.22, ethnicGroup
		if (msg[&apos;PID&apos;][&apos;PID.22&apos;][&apos;PID.22.1&apos;].toString() != &quot;&quot;) {objPID.ethnicGroup = msg[&apos;PID&apos;][&apos;PID.22&apos;][&apos;PID.22.1&apos;].toString(); }
				
		// PID.23, birthPlace
		if (msg[&apos;PID&apos;][&apos;PID.23&apos;][&apos;PID.23.1&apos;].toString() != &quot;&quot;) {objPID.birthPlace = msg[&apos;PID&apos;][&apos;PID.23&apos;][&apos;PID.23.1&apos;].toString(); }
				
		// PID.24, multipleBirthIndicator
		if (msg[&apos;PID&apos;][&apos;PID.24&apos;][&apos;PID.24.1&apos;].toString() != &quot;&quot;) {objPID.multipleBirthIndicator = msg[&apos;PID&apos;][&apos;PID.24&apos;][&apos;PID.24.1&apos;].toString(); }
				
	}
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG objPID: &apos;+JSON.stringify(objPID)); }
		
	return objPID;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>25fcc15a-e935-46c2-9a33-103ae3ef585c</id>
                <name>getPV1_v23</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262681</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	getPV1_v23(msg)
	
	- Desc: This function retrieves HL7v2 HAPI format elements and values from PV1 segment stored in
	object for reference

	@param {String} msg - this contains the raw message (string)
	@return {object} objPV1 - this contains the PV1 segment elements composed into a single objMSH
		object.
*/
function getPV1_v23(msg) {

	var scriptName= &quot;getPV1_v23&quot;;
	var debug= 0;
	
	// define variables
	if (typeof(msg[&apos;PV1&apos;]) !== undefined) {

		// PV1	
		var pv1;
		var objPV1= {};

		if (msg[&apos;PV1&apos;].toString().length &gt; 0) {

			var index = 0;
			for each (seg in msg.PV1.children()) {
	
				if(debug&gt; 0) logger.error(scriptName+&apos;::DEBUG seg[&quot;+index+&quot;]: &apos;+seg.toString());
	
				// PV1.1, setId
				if (seg[&apos;PV1.1&apos;][&apos;PV1.1.1&apos;].toString() != &quot;&quot;) {objPV1.setId = seg[&apos;PV1.1&apos;][&apos;PV1.1.1&apos;].toString(); }
		
				// PV1.2, externalId
				if (seg[&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString() != &quot;&quot;) { objPV1.externalId = seg[&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString(); }
							
				// PV1.3, assignedPatientLocation
				objPV1.assignedPatientLocation = {};
				if (seg[&apos;PV1.3&apos;][&apos;PV1.3.1&apos;].toString() != &quot;&quot;) { objPV1.assignedPatientLocation.pointOfCare = seg[&apos;PV1.3&apos;][&apos;PV1.3.1&apos;].toString(); }
				if (seg[&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString() != &quot;&quot;) { objPV1.assignedPatientLocation.room = seg[&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString(); }
				if (seg[&apos;PV1.3&apos;][&apos;PV1.3.3&apos;].toString() != &quot;&quot;) { objPV1.assignedPatientLocation.bed = seg[&apos;PV1.3&apos;][&apos;PV1.3.3&apos;].toString(); }
				
				objPV1.facility = {};
				if (seg[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;][&apos;PV1.3.4.1&apos;].toString() != &quot;&quot;) { objPV1.facility.nameSpaceId =  seg[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;][&apos;PV1.3.4.1&apos;].toString(); }
				if (seg[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;][&apos;PV1.3.4.2&apos;].toString() != &quot;&quot;) { objPV1.facility.universalId =  seg[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;][&apos;PV1.3.4.2&apos;].toString(); }
				if (seg[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;][&apos;PV1.3.4.3&apos;].toString() != &quot;&quot;) { objPV1.facility.universalIdType =  seg[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;][&apos;PV1.3.4.3&apos;].toString(); }

				if (seg[&apos;PV1.3&apos;][&apos;PV1.3.5&apos;].toString() != &quot;&quot;) { objPV1.assignedPatientLocation.locationStatus = seg[&apos;PV1.3&apos;][&apos;PV1.3.5&apos;].toString(); }
				if (seg[&apos;PV1.3&apos;][&apos;PV1.3.6&apos;].toString() != &quot;&quot;) { objPV1.assignedPatientLocation.personLocationType = seg[&apos;PV1.3&apos;][&apos;PV1.3.6&apos;].toString(); }
				if (seg[&apos;PV1.3&apos;][&apos;PV1.3.7&apos;].toString() != &quot;&quot;) { objPV1.assignedPatientLocation.building = seg[&apos;PV1.3&apos;][&apos;PV1.3.7&apos;].toString(); }
				if (seg[&apos;PV1.3&apos;][&apos;PV1.3.8&apos;].toString() != &quot;&quot;) { objPV1.assignedPatientLocation.floor = seg[&apos;PV1.3&apos;][&apos;PV1.3.8&apos;].toString(); }
				if (seg[&apos;PV1.3&apos;][&apos;PV1.3.9&apos;].toString() != &quot;&quot;) { objPV1.assignedPatientLocation.locationDescription = seg[&apos;PV1.3&apos;][&apos;PV1.3.9&apos;].toString(); }
		
				// PV1.4, admissionType
				if (seg[&apos;PV1.4&apos;][&apos;PV1.4.1&apos;].toString() != &quot;&quot;) { objPV1.admissionType = seg[&apos;PV1.4&apos;][&apos;PV1.4.1&apos;].toString(); }

				// PV1.5, preadmitNumber
				objPV1.preadmitNumber = {};
				if (seg[&apos;PV1.5&apos;][&apos;PV1.5.1&apos;].toString() != &quot;&quot;) { objPV1.preadmitNumber.id = seg[&apos;PV1.5&apos;][&apos;PV1.5.1&apos;].toString(); }
				if (seg[&apos;PV1.5&apos;][&apos;PV1.5.2&apos;].toString() != &quot;&quot;) { objPV1.preadmitNumber.identifierCheckDigit = seg[&apos;PV1.5&apos;][&apos;PV1.5.2&apos;].toString(); }
				if (seg[&apos;PV1.5&apos;][&apos;PV1.5.3&apos;].toString() != &quot;&quot;) { objPV1.preadmitNumber.codeIdentifyingCheckDigitScheme = seg[&apos;PV1.5&apos;][&apos;PV1.5.3&apos;].toString(); }
				
				objPV1.preadmitNumber.assigningAuthority = {};
				if (seg[&apos;PV1.5&apos;][&apos;PV1.5.4&apos;][&apos;PV1.5.4.1&apos;].toString() != &quot;&quot;) { objPV1.preadmitNumber.assigningAuthority.namespaceId = seg[&apos;PV1.5&apos;][&apos;PV1.5.4&apos;][&apos;PV1.5.4.1&apos;].toString(); }
				if (seg[&apos;PV1.5&apos;][&apos;PV1.5.4&apos;][&apos;PV1.5.4.2&apos;].toString() != &quot;&quot;) { objPV1.preadmitNumber.assigningAuthority.universalId = seg[&apos;PV1.5&apos;][&apos;PV1.5.4&apos;][&apos;PV1.5.4.2&apos;].toString(); }
				if (seg[&apos;PV1.5&apos;][&apos;PV1.5.4&apos;][&apos;PV1.5.4.3&apos;].toString() != &quot;&quot;) { objPV1.preadmitNumber.assigningAuthority.universalIdType = seg[&apos;PV1.5&apos;][&apos;PV1.5.4&apos;][&apos;PV1.5.4.3&apos;].toString(); }
/*
				if (seg[&apos;PV1.5&apos;][&apos;PV1.5.5&apos;].toString() != &quot;&quot;) { pv1[index].preadmitNumber.idTypeCode = seg[&apos;PV1.5&apos;][&apos;PV1.5.5&apos;]; }
				pv1[index].preadmitNumber.assigningFacility = {};
				if (seg[&apos;PV1.5&apos;][&apos;PV1.5.6&apos;][&apos;PV1.5.6.1&apos;].toString() != &quot;&quot;) { pv1[index].preadmitNumber.assigningFacility.namespaceId = seg[&apos;PV1.5&apos;][&apos;PV1.5.6&apos;][&apos;PV1.5.6.1&apos;]; }
				if (seg[&apos;PV1.5&apos;][&apos;PV1.5.6&apos;][&apos;PV1.5.6.2&apos;].toString() != &quot;&quot;) { pv1[index].preadmitNumber.assigningFacility.universalId = seg[&apos;PV1.5&apos;][&apos;PV1.5.6&apos;][&apos;PV1.5.6.2&apos;]; }
				if (seg[&apos;PV1.5&apos;][&apos;PV1.5.6&apos;][&apos;PV1.5.6.3&apos;].toString() != &quot;&quot;) { pv1[index].preadmitNumber.assigningFacility.universalIdType = seg[&apos;PV1.5&apos;][&apos;PV1.5.6&apos;][&apos;PV1.5.6.3&apos;]; }
				if (Object.keys(pv1[index].preadmitNumber.assigningFacility).length == 0) {
					if (seg[&apos;PV1.5&apos;][&apos;PV1.5.6&apos;].toString() != &quot;&quot;) { pv1[index].preadmitNumber.assigningFacility.namespaceId = seg[&apos;PV1.5&apos;][&apos;PV1.5.6&apos;]; }
					else delete pv1[index].preadmitNumber.assigningFacility;
				}
				if (Object.keys(pv1[index].preadmitNumber).length == 0) {
					delete pv1[index].preadmitNumber;
				}

				// PV1.6, priorPatientLocation
				pv1[index].priorPatientLocation = {};
				if (seg[&apos;PV1.6&apos;][&apos;PV1.6.1&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.pointOfCare = seg[&apos;PV1.6&apos;][&apos;PV1.6.1&apos;]; }
				if (seg[&apos;PV1.6&apos;][&apos;PV1.6.2&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.room = seg[&apos;PV1.6&apos;][&apos;PV1.6.2&apos;]; }
				if (seg[&apos;PV1.6&apos;][&apos;PV1.6.3&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.bed = seg[&apos;PV1.6&apos;][&apos;PV1.6.3&apos;]; }
				pv1[index].priorPatientLocation.facility = {};
				if (seg[&apos;PV1.6&apos;][&apos;PV1.6.4&apos;][&apos;PV1.6.4.1&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.facility.nameSpaceId =  seg[&apos;PV1.6&apos;][&apos;PV1.6.4&apos;][&apos;PV1.6.4.1&apos;]; }
				if (seg[&apos;PV1.6&apos;][&apos;PV1.6.4&apos;][&apos;PV1.6.4.2&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.facility.universalId =  seg[&apos;PV1.6&apos;][&apos;PV1.6.4&apos;][&apos;PV1.6.4.2&apos;]; }
				if (seg[&apos;PV1.6&apos;][&apos;PV1.6.4&apos;][&apos;PV1.6.4.3&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.facility.universalIdType =  seg[&apos;PV1.6&apos;][&apos;PV1.6.4&apos;][&apos;PV1.6.4.3&apos;]; }
				if (Object.keys(pv1[index].priorPatientLocation.facility).length == 0) {
					if (seg[&apos;PV1.6&apos;][&apos;PV1.6.4&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.facility.nameSpaceId = seg[&apos;PV1.6&apos;][&apos;PV1.6.4&apos;]; }
					else delete pv1[index].priorPatientLocation.facility;
				}
				if (seg[&apos;PV1.6&apos;][&apos;PV1.6.5&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.locationStatus = seg[&apos;PV1.6&apos;][&apos;PV1.6.5&apos;]; }
				if (seg[&apos;PV1.6&apos;][&apos;PV1.6.6&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.personLocationType = seg[&apos;PV1.6&apos;][&apos;PV1.6.6&apos;]; }
				if (seg[&apos;PV1.6&apos;][&apos;PV1.6.7&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.building = seg[&apos;PV1.6&apos;][&apos;PV1.6.7&apos;]; }
				if (seg[&apos;PV1.6&apos;][&apos;PV1.6.8&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.floor = seg[&apos;PV1.6&apos;][&apos;PV1.6.8&apos;]; }
				if (seg[&apos;PV1.6&apos;][&apos;PV1.6.9&apos;].toString() != &quot;&quot;) { pv1[index].priorPatientLocation.locationDescription = seg[&apos;PV1.6&apos;][&apos;PV1.6.9&apos;]; }
				if (Object.keys(pv1[index].priorPatientLocation).length == 0) {
					delete pv1[index].priorPatientLocation;
				}

				// PV1.7, attendingDoctor
				pv1[index].attendingDoctor = [];
				for each (field in seg[&apos;PV1.7&apos;]) {
					var block = {};
					if (field[&apos;PV1.7.1&apos;].toString() != &quot;&quot;) { block.id = field[&apos;PV1.7.1&apos;]; }
					if (field[&apos;PV1.7.2&apos;].toString() != &quot;&quot;) { block.lastName = field[&apos;PV1.7.2&apos;]; }
					if (field[&apos;PV1.7.3&apos;].toString() != &quot;&quot;) { block.firstName = field[&apos;PV1.7.3&apos;]; }
					if (field[&apos;PV1.7.4&apos;].toString() != &quot;&quot;) { block.middleInitOrName = field[&apos;PV1.7.4&apos;]; }
					if (field[&apos;PV1.7.5&apos;].toString() != &quot;&quot;) { block.suffix = field[&apos;PV1.7.5&apos;]; }
					if (field[&apos;PV1.7.6&apos;].toString() != &quot;&quot;) { block.prefix = field[&apos;PV1.7.6&apos;]; }
					if (field[&apos;PV1.7.7&apos;].toString() != &quot;&quot;) { block.degree = field[&apos;PV1.7.7&apos;]; }
					if (field[&apos;PV1.7.8&apos;].toString() != &quot;&quot;) { block.sourceTable = field[&apos;PV1.7.8&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;PV1.7.9&apos;][&apos;PV1.7.9.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.id = field[&apos;PV1.7.9&apos;][&apos;PV1.7.9.1&apos;]; }
					if (field[&apos;PV1.7.9&apos;][&apos;PV1.7.9.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;PV1.7.9&apos;][&apos;PV1.7.9.2&apos;]; }
					if (field[&apos;PV1.7.9&apos;][&apos;PV1.7.9.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;PV1.7.9&apos;][&apos;PV1.7.9.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;PV1.7.9&apos;].toString() != &quot;&quot;) { block.assigningAuthority.id = field[&apos;PV1.7.9&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;PV1.7.10&apos;].toString() != &quot;&quot;) { block.nameTypeCode = field[&apos;PV1.7.10&apos;]; }
					if (field[&apos;PV1.7.11&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;PV1.7.11&apos;]; }
					if (field[&apos;PV1.7.12&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;PV1.7.12&apos;]; }
					if (field[&apos;PV1.7.13&apos;].toString() != &quot;&quot;) { block.identifierTypeCode = field[&apos;PV1.7.13&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;PV1.7.14&apos;][&apos;PV1.7.14.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.id = field[&apos;PV1.7.14&apos;][&apos;PV1.7.14.1&apos;]; }
					if (field[&apos;PV1.7.14&apos;][&apos;PV1.7.14.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;PV1.7.14&apos;][&apos;PV1.7.14.2&apos;]; }
					if (field[&apos;PV1.7.14&apos;][&apos;PV1.7.14.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;PV1.7.14&apos;][&apos;PV1.7.14.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;PV1.7.14&apos;].toString() != &quot;&quot;) { block.assigningFacility.id = field[&apos;PV1.7.14&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						pv1[index].attendingDoctor.push(block);
					}
				}
				if (pv1[index].attendingDoctor.length == 0) {
					delete pv1[index].attendingDoctor;
				}

				// PV1.8, referringDoctor
				pv1[index].referringDoctor = [];
				for each (field in seg[&apos;PV1.8&apos;]) {
					var block = {};
					if (field[&apos;PV1.8.1&apos;].toString() != &quot;&quot;) { block.id = field[&apos;PV1.8.1&apos;]; }
					if (field[&apos;PV1.8.2&apos;].toString() != &quot;&quot;) { block.lastName = field[&apos;PV1.8.2&apos;]; }
					if (field[&apos;PV1.8.3&apos;].toString() != &quot;&quot;) { block.firstName = field[&apos;PV1.8.3&apos;]; }
					if (field[&apos;PV1.8.4&apos;].toString() != &quot;&quot;) { block.middleInitOrName = field[&apos;PV1.8.4&apos;]; }
					if (field[&apos;PV1.8.5&apos;].toString() != &quot;&quot;) { block.suffix = field[&apos;PV1.8.5&apos;]; }
					if (field[&apos;PV1.8.6&apos;].toString() != &quot;&quot;) { block.prefix = field[&apos;PV1.8.6&apos;]; }
					if (field[&apos;PV1.8.7&apos;].toString() != &quot;&quot;) { block.degree = field[&apos;PV1.8.7&apos;]; }
					if (field[&apos;PV1.8.8&apos;].toString() != &quot;&quot;) { block.sourceTable = field[&apos;PV1.8.8&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;PV1.8.9&apos;][&apos;PV1.8.9.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.id = field[&apos;PV1.8.9&apos;][&apos;PV1.8.9.1&apos;]; }
					if (field[&apos;PV1.8.9&apos;][&apos;PV1.8.9.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;PV1.8.9&apos;][&apos;PV1.8.9.2&apos;]; }
					if (field[&apos;PV1.8.9&apos;][&apos;PV1.8.9.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;PV1.8.9&apos;][&apos;PV1.8.9.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;PV1.8.9&apos;].toString() != &quot;&quot;) { block.assigningAuthority.id = field[&apos;PV1.8.9&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;PV1.8.10&apos;].toString() != &quot;&quot;) { block.nameTypeCode = field[&apos;PV1.8.10&apos;]; }
					if (field[&apos;PV1.8.11&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;PV1.8.11&apos;]; }
					if (field[&apos;PV1.8.12&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;PV1.8.12&apos;]; }
					if (field[&apos;PV1.8.13&apos;].toString() != &quot;&quot;) { block.identifierTypeCode = field[&apos;PV1.8.13&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;PV1.8.14&apos;][&apos;PV1.8.14.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.id = field[&apos;PV1.8.14&apos;][&apos;PV1.8.14.1&apos;]; }
					if (field[&apos;PV1.8.14&apos;][&apos;PV1.8.14.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;PV1.8.14&apos;][&apos;PV1.8.14.2&apos;]; }
					if (field[&apos;PV1.8.14&apos;][&apos;PV1.8.14.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;PV1.8.14&apos;][&apos;PV1.8.14.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;PV1.8.14&apos;].toString() != &quot;&quot;) { block.assigningFacility.id = field[&apos;PV1.8.14&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						pv1[index].referringDoctor.push(block);
					}
				}
				if (pv1[index].referringDoctor.length == 0) {
					delete pv1[index].referringDoctor;
				}
				
				// PV1.9, consultingDoctor
				pv1[index].consultingDoctor = [];
				for each (field in seg[&apos;PV1.9&apos;]) {
					var block = {};
					if (field[&apos;PV1.9.1&apos;].toString() != &quot;&quot;) { block.id = field[&apos;PV1.9.1&apos;]; }
					if (field[&apos;PV1.9.2&apos;].toString() != &quot;&quot;) { block.lastName = field[&apos;PV1.9.2&apos;]; }
					if (field[&apos;PV1.9.3&apos;].toString() != &quot;&quot;) { block.firstName = field[&apos;PV1.9.3&apos;]; }
					if (field[&apos;PV1.9.4&apos;].toString() != &quot;&quot;) { block.middleInitOrName = field[&apos;PV1.9.4&apos;]; }
					if (field[&apos;PV1.9.5&apos;].toString() != &quot;&quot;) { block.suffix = field[&apos;PV1.9.5&apos;]; }
					if (field[&apos;PV1.9.6&apos;].toString() != &quot;&quot;) { block.prefix = field[&apos;PV1.9.6&apos;]; }
					if (field[&apos;PV1.9.7&apos;].toString() != &quot;&quot;) { block.degree = field[&apos;PV1.9.7&apos;]; }
					if (field[&apos;PV1.9.8&apos;].toString() != &quot;&quot;) { block.sourceTable = field[&apos;PV1.9.8&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;PV1.9.9&apos;][&apos;PV1.9.9.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.id = field[&apos;PV1.9.9&apos;][&apos;PV1.9.9.1&apos;]; }
					if (field[&apos;PV1.9.9&apos;][&apos;PV1.9.9.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;PV1.9.9&apos;][&apos;PV1.9.9.2&apos;]; }
					if (field[&apos;PV1.9.9&apos;][&apos;PV1.9.9.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;PV1.9.9&apos;][&apos;PV1.9.9.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;PV1.9.9&apos;].toString() != &quot;&quot;) { block.assigningAuthority.id = field[&apos;PV1.9.9&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;PV1.9.10&apos;].toString() != &quot;&quot;) { block.nameTypeCode = field[&apos;PV1.9.10&apos;]; }
					if (field[&apos;PV1.9.11&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;PV1.9.11&apos;]; }
					if (field[&apos;PV1.9.12&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;PV1.9.12&apos;]; }
					if (field[&apos;PV1.9.13&apos;].toString() != &quot;&quot;) { block.identifierTypeCode = field[&apos;PV1.9.13&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;PV1.9.14&apos;][&apos;PV1.9.14.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.id = field[&apos;PV1.9.14&apos;][&apos;PV1.9.14.1&apos;]; }
					if (field[&apos;PV1.9.14&apos;][&apos;PV1.9.14.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;PV1.9.14&apos;][&apos;PV1.9.14.2&apos;]; }
					if (field[&apos;PV1.9.14&apos;][&apos;PV1.9.14.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;PV1.9.14&apos;][&apos;PV1.9.14.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;PV1.9.14&apos;].toString() != &quot;&quot;) { block.assigningFacility.id = field[&apos;PV1.9.14&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						pv1[index].consultingDoctor.push(block);
					}
				}
				if (pv1[index].consultingDoctor.length == 0) {
					delete pv1[index].consultingDoctor;
				}
				
				// PV1.10, hospitalService
				if (seg[&apos;PV1.10&apos;][&apos;PV1.10.1&apos;].toString() != &quot;&quot;) { pv1[index].hospitalService = seg[&apos;PV1.10&apos;][&apos;PV1.10.1&apos;]; }

				// PV1.11, temporaryLocation
				pv1[index].temporaryLocation = {};
				if (seg[&apos;PV1.11&apos;][&apos;PV1.11.1&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.pointOfCare = seg[&apos;PV1.11&apos;][&apos;PV1.11.1&apos;]; }
				if (seg[&apos;PV1.11&apos;][&apos;PV1.11.2&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.room = seg[&apos;PV1.11&apos;][&apos;PV1.11.2&apos;]; }
				if (seg[&apos;PV1.11&apos;][&apos;PV1.11.3&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.bed = seg[&apos;PV1.11&apos;][&apos;PV1.11.3&apos;]; }
				pv1[index].temporaryLocation.facility = {};
				if (seg[&apos;PV1.11&apos;][&apos;PV1.11.4&apos;][&apos;PV1.11.4.1&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.facility.nameSpaceId =  seg[&apos;PV1.11&apos;][&apos;PV1.11.4&apos;][&apos;PV1.11.4.1&apos;]; }
				if (seg[&apos;PV1.11&apos;][&apos;PV1.11.4&apos;][&apos;PV1.11.4.2&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.facility.universalId =  seg[&apos;PV1.11&apos;][&apos;PV1.11.4&apos;][&apos;PV1.11.4.2&apos;]; }
				if (seg[&apos;PV1.11&apos;][&apos;PV1.11.4&apos;][&apos;PV1.11.4.3&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.facility.universalIdType =  seg[&apos;PV1.11&apos;][&apos;PV1.11.4&apos;][&apos;PV1.11.4.3&apos;]; }
				if (Object.keys(pv1[index].temporaryLocation.facility).length == 0) {
					if (seg[&apos;PV1.11&apos;][&apos;PV1.11.4&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.facility.nameSpaceId = seg[&apos;PV1.11&apos;][&apos;PV1.11.4&apos;]; }
					else delete pv1[index].temporaryLocation.facility;
				}
				if (seg[&apos;PV1.11&apos;][&apos;PV1.11.5&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.locationStatus = seg[&apos;PV1.11&apos;][&apos;PV1.11.5&apos;]; }
				if (seg[&apos;PV1.11&apos;][&apos;PV1.11.6&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.personLocationType = seg[&apos;PV1.11&apos;][&apos;PV1.11.6&apos;]; }
				if (seg[&apos;PV1.11&apos;][&apos;PV1.11.7&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.building = seg[&apos;PV1.11&apos;][&apos;PV1.11.7&apos;]; }
				if (seg[&apos;PV1.11&apos;][&apos;PV1.11.8&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.floor = seg[&apos;PV1.11&apos;][&apos;PV1.11.8&apos;]; }
				if (seg[&apos;PV1.11&apos;][&apos;PV1.11.9&apos;].toString() != &quot;&quot;) { pv1[index].temporaryLocation.locationDescription = seg[&apos;PV1.11&apos;][&apos;PV1.11.9&apos;]; }
				if (Object.keys(pv1[index].temporaryLocation).length == 0) {
					delete pv1[index].temporaryLocation;
				}

				// PV1.12, preadmitTestIndicator
				if (seg[&apos;PV1.12&apos;][&apos;PV1.12.1&apos;].toString() != &quot;&quot;) { pv1[index].preadmitTestIndicator = seg[&apos;PV1.12&apos;][&apos;PV1.12.1&apos;]; }

				// PV1.13, readmissionIndicator
				if (seg[&apos;PV1.13&apos;][&apos;PV1.13.1&apos;].toString() != &quot;&quot;) { pv1[index].readmissionIndicator = seg[&apos;PV1.13&apos;][&apos;PV1.13.1&apos;]; }

				// PV1.14, admitSource
				if (seg[&apos;PV1.14&apos;][&apos;PV1.14.1&apos;].toString() != &quot;&quot;) { pv1[index].admitSource = seg[&apos;PV1.14&apos;][&apos;PV1.14.1&apos;]; }

				// PV1.15, ambulatoryStatus
				pv1[index].ambulatoryStatus = [];
				for each (field in seg[&apos;PV1.15&apos;]) {
					if (field[&apos;PV1.15.1&apos;].toString() != &quot;&quot;) {
						pv1[index].ambulatoryStatus.push(field[&apos;PV1.15.1&apos;]);
					}
				}
				if (pv1[index].ambulatoryStatus.length == 0){
					delete pv1[index].ambulatoryStatus;
				}

				// PV1.16, vipIndicator
				if (seg[&apos;PV1.16&apos;][&apos;PV1.16.1&apos;].toString() != &quot;&quot;) { pv1[index].vipIndicator = seg[&apos;PV1.16&apos;][&apos;PV1.16.1&apos;]; }

				// PV1.17, admittingDoctor
				pv1[index].admittingDoctor = [];
				for each (field in seg[&apos;PV1.17&apos;]) {
					var block = {};
					if (field[&apos;PV1.17.1&apos;].toString() != &quot;&quot;) { block.id = field[&apos;PV1.17.1&apos;]; }
					if (field[&apos;PV1.17.2&apos;].toString() != &quot;&quot;) { block.lastName = field[&apos;PV1.17.2&apos;]; }
					if (field[&apos;PV1.17.3&apos;].toString() != &quot;&quot;) { block.firstName = field[&apos;PV1.17.3&apos;]; }
					if (field[&apos;PV1.17.4&apos;].toString() != &quot;&quot;) { block.middleInitOrName = field[&apos;PV1.17.4&apos;]; }
					if (field[&apos;PV1.17.5&apos;].toString() != &quot;&quot;) { block.suffix = field[&apos;PV1.17.5&apos;]; }
					if (field[&apos;PV1.17.6&apos;].toString() != &quot;&quot;) { block.prefix = field[&apos;PV1.17.6&apos;]; }
					if (field[&apos;PV1.17.7&apos;].toString() != &quot;&quot;) { block.degree = field[&apos;PV1.17.7&apos;]; }
					if (field[&apos;PV1.17.8&apos;].toString() != &quot;&quot;) { block.sourceTable = field[&apos;PV1.17.8&apos;]; }
					block.assigningAuthority = {};
					if (field[&apos;PV1.17.9&apos;][&apos;PV1.17.9.1&apos;].toString() != &quot;&quot;) { block.assigningAuthority.id = field[&apos;PV1.17.9&apos;][&apos;PV1.17.9.1&apos;]; }
					if (field[&apos;PV1.17.9&apos;][&apos;PV1.17.9.2&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalId = field[&apos;PV1.17.9&apos;][&apos;PV1.17.9.2&apos;]; }
					if (field[&apos;PV1.17.9&apos;][&apos;PV1.17.9.3&apos;].toString() != &quot;&quot;) { block.assigningAuthority.universalIdType = field[&apos;PV1.17.9&apos;][&apos;PV1.17.9.3&apos;]; }
					if (Object.keys(block.assigningAuthority).length == 0) {
						if (field[&apos;PV1.17.9&apos;].toString() != &quot;&quot;) { block.assigningAuthority.id = field[&apos;PV1.17.9&apos;]; }
						else delete block.assigningAuthority;
					}
					if (field[&apos;PV1.17.10&apos;].toString() != &quot;&quot;) { block.nameTypeCode = field[&apos;PV1.17.10&apos;]; }
					if (field[&apos;PV1.17.11&apos;].toString() != &quot;&quot;) { block.identifierCheckDigit = field[&apos;PV1.17.11&apos;]; }
					if (field[&apos;PV1.17.12&apos;].toString() != &quot;&quot;) { block.codeIdentifyingCheckDigitScheme = field[&apos;PV1.17.12&apos;]; }
					if (field[&apos;PV1.17.13&apos;].toString() != &quot;&quot;) { block.identifierTypeCode = field[&apos;PV1.17.13&apos;]; }
					block.assigningFacility = {};
					if (field[&apos;PV1.17.14&apos;][&apos;PV1.17.14.1&apos;].toString() != &quot;&quot;) { block.assigningFacility.id = field[&apos;PV1.17.14&apos;][&apos;PV1.17.14.1&apos;]; }
					if (field[&apos;PV1.17.14&apos;][&apos;PV1.17.14.2&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalId = field[&apos;PV1.17.14&apos;][&apos;PV1.17.14.2&apos;]; }
					if (field[&apos;PV1.17.14&apos;][&apos;PV1.17.14.3&apos;].toString() != &quot;&quot;) { block.assigningFacility.universalIdType = field[&apos;PV1.17.14&apos;][&apos;PV1.17.14.3&apos;]; }
					if (Object.keys(block.assigningFacility).length == 0) {
						if (field[&apos;PV1.17.14&apos;].toString() != &quot;&quot;) { block.assigningFacility.id = field[&apos;PV1.17.14&apos;]; }
						else delete block.assigningFacility;
					}
					if (Object.keys(block).length &gt; 0) {
						pv1[index].admittingDoctor.push(block);
					}
				}
				if (pv1[index].admittingDoctor.length == 0) {
					delete pv1[index].admittingDoctor;
				}
				
				// PV1.18, patientType
				if (seg[&apos;PV1.18&apos;][&apos;PV1.18.1&apos;].toString() != &quot;&quot;) { pv1[index].patientType = seg[&apos;PV1.18&apos;][&apos;PV1.18.1&apos;]; }

				// PV1.19, visitNumber
				pv1[index].visitNumber = {};
				if (seg[&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.id = seg[&apos;PV1.19&apos;][&apos;PV1.19.1&apos;]; }
				if (seg[&apos;PV1.19&apos;][&apos;PV1.19.2&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.identifierCheckDigit = seg[&apos;PV1.19&apos;][&apos;PV1.19.2&apos;]; }
				if (seg[&apos;PV1.19&apos;][&apos;PV1.19.3&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.codeIdentifyingCheckDigitScheme = seg[&apos;PV1.19&apos;][&apos;PV1.19.3&apos;]; }
				pv1[index].visitNumber.assigningAuthority = {};
				if (seg[&apos;PV1.19&apos;][&apos;PV1.19.4&apos;][&apos;PV1.19.4.1&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.assigningAuthority.namespaceId = seg[&apos;PV1.19&apos;][&apos;PV1.19.4&apos;][&apos;PV1.19.4.1&apos;]; }
				if (seg[&apos;PV1.19&apos;][&apos;PV1.19.4&apos;][&apos;PV1.19.4.2&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.assigningAuthority.universalId = seg[&apos;PV1.19&apos;][&apos;PV1.19.4&apos;][&apos;PV1.19.4.2&apos;]; }
				if (seg[&apos;PV1.19&apos;][&apos;PV1.19.4&apos;][&apos;PV1.19.4.3&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.assigningAuthority.universalIdType = seg[&apos;PV1.19&apos;][&apos;PV1.19.4&apos;][&apos;PV1.19.4.3&apos;]; }
				if (Object.keys(pv1[index].visitNumber.assigningAuthority).length == 0) {
					if (seg[&apos;PV1.19&apos;][&apos;PV1.19.4&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.assigningAuthority.namespaceId = seg[&apos;PV1.19&apos;][&apos;PV1.19.4&apos;]; }
					else delete pv1[index].visitNumber.assigningAuthority;
				}
				if (seg[&apos;PV1.19&apos;][&apos;PV1.19.5&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.idTypeCode = seg[&apos;PV1.19&apos;][&apos;PV1.19.5&apos;]; }
				pv1[index].visitNumber.assigningFacility = {};
				if (seg[&apos;PV1.19&apos;][&apos;PV1.19.6&apos;][&apos;PV1.19.6.1&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.assigningFacility.namespaceId = seg[&apos;PV1.19&apos;][&apos;PV1.19.6&apos;][&apos;PV1.19.6.1&apos;]; }
				if (seg[&apos;PV1.19&apos;][&apos;PV1.19.6&apos;][&apos;PV1.19.6.2&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.assigningFacility.universalId = seg[&apos;PV1.19&apos;][&apos;PV1.19.6&apos;][&apos;PV1.19.6.2&apos;]; }
				if (seg[&apos;PV1.19&apos;][&apos;PV1.19.6&apos;][&apos;PV1.19.6.3&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.assigningFacility.universalIdType = seg[&apos;PV1.19&apos;][&apos;PV1.19.6&apos;][&apos;PV1.19.6.3&apos;]; }
				if (Object.keys(pv1[index].visitNumber.assigningFacility).length == 0) {
					if (seg[&apos;PV1.19&apos;][&apos;PV1.19.6&apos;].toString() != &quot;&quot;) { pv1[index].visitNumber.assigningFacility.namespaceId = seg[&apos;PV1.19&apos;][&apos;PV1.19.6&apos;]; }
					else delete pv1[index].visitNumber.assigningFacility;
				}
				if (Object.keys(pv1[index].visitNumber).length == 0) {
					delete pv1[index].visitNumber;
				}
				
				// PV1.20, financialClass
				pv1[index].financialClass = {};
				if (seg[&apos;PV1.20&apos;][&apos;PV1.20.1&apos;].toString() != &quot;&quot;) { pv1[index].financialClass.financialClass = seg[&apos;PV1.20&apos;][&apos;PV1.20.1&apos;]; }
				if (seg[&apos;PV1.20&apos;][&apos;PV1.20.2&apos;].toString() != &quot;&quot;) { pv1[index].financialClass.effectiveDate = seg[&apos;PV1.20&apos;][&apos;PV1.20.2&apos;]; }
				if (Object.keys(pv1[index].financialClass).length == 0) {
					delete pv1[index].financialClass;
				}

				// PV1.21, chargePriceIndicator
				if (seg[&apos;PV1.21&apos;][&apos;PV1.21.1&apos;].toString() != &quot;&quot;) { pv1[index].chargePriceIndicator = seg[&apos;PV1.21&apos;][&apos;PV1.21.1&apos;]; }

				// PV1.22, courtesyCode
				if (seg[&apos;PV1.22&apos;][&apos;PV1.22.1&apos;].toString() != &quot;&quot;) { pv1[index].courtesyCode = seg[&apos;PV1.22&apos;][&apos;PV1.22.1&apos;]; }

				// PV1.23, creditRating
				if (seg[&apos;PV1.23&apos;][&apos;PV1.23.1&apos;].toString() != &quot;&quot;) { pv1[index].creditRating = seg[&apos;PV1.23&apos;][&apos;PV1.23.1&apos;]; }

				// PV1.24, contractCode
				pv1[index].contractCode = [];
				for each (field in seg[&apos;PV1.24&apos;]) {
					if (field[&apos;PV1.24.1&apos;].toString() != &quot;&quot;) {
						pv1[index].contractCode.push(field[&apos;PV1.24.1&apos;]);
					}
				}
				if (pv1[index].contractCode.length == 0) {
					delete pv1[index].contractCode;
				}

				// PV1.25, contractEffectiveDate
				pv1[index].contractEffectiveDate = [];
				for each (field in seg[&apos;PV1.25&apos;]) {
					if (field[&apos;PV1.25.1&apos;].toString() != &quot;&quot;) {
						pv1[index].contractEffectiveDate.push(field[&apos;PV1.25.1&apos;]);
					}
				}
				if (pv1[index].contractEffectiveDate.length == 0) {
					delete pv1[index].contractEffectiveDate;
				}

				// PV1.26, contractAmount
				pv1[index].contractAmount = [];
				for each (field in seg[&apos;PV1.26&apos;]) {
					if (field[&apos;PV1.26.1&apos;].toString() != &quot;&quot;) {
						pv1[index].contractAmount.push(field[&apos;PV1.26.1&apos;]);
					}
				}
				if (pv1[index].contractAmount.length == 0) {
					delete pv1[index].contractAmount;
				}

				// PV1.27, contractPeriod
				pv1[index].contractPeriod = [];
				for each (field in seg[&apos;PV1.27&apos;]) {
					if (field[&apos;PV1.27.1&apos;].toString() != &quot;&quot;) {
						pv1[index].contractPeriod.push(field[&apos;PV1.27.1&apos;]);
					}
				}
				if (pv1[index].contractPeriod.length == 0) {
					delete pv1[index].contractPeriod;
				}

				// PV1.28, interestCode
				if (seg[&apos;PV1.28&apos;][&apos;PV1.28.1&apos;].toString() != &quot;&quot;) { pv1[index].interestCode = seg[&apos;PV1.28&apos;][&apos;PV1.28.1&apos;]; }

				// PV1.29, transferToBadDebtCode
				if (seg[&apos;PV1.29&apos;][&apos;PV1.29.1&apos;].toString() != &quot;&quot;) { pv1[index].transferToBadDebtCode = seg[&apos;PV1.29&apos;][&apos;PV1.29.1&apos;]; }

				// PV1.30, transferToBadDebtDate
				if (seg[&apos;PV1.30&apos;][&apos;PV1.30.1&apos;].toString() != &quot;&quot;) { pv1[index].transferToBadDebtDate = seg[&apos;PV1.30&apos;][&apos;PV1.30.1&apos;]; }

				// PV1.31, badDebtAgencyCode
				if (seg[&apos;PV1.31&apos;][&apos;PV1.31.1&apos;].toString() != &quot;&quot;) { pv1[index].badDebtAgencyCode = seg[&apos;PV1.31&apos;][&apos;PV1.31.1&apos;]; }

				// PV1.32, badDebtTransferAmount
				if (seg[&apos;PV1.32&apos;][&apos;PV1.32.1&apos;].toString() != &quot;&quot;) { pv1[index].badDebtTransferAmount = seg[&apos;PV1.32&apos;][&apos;PV1.32.1&apos;]; }

				// PV1.33, badDebtRecoveryAmount
				if (seg[&apos;PV1.33&apos;][&apos;PV1.33.1&apos;].toString() != &quot;&quot;) { pv1[index].badDebtRecoveryAmount = seg[&apos;PV1.33&apos;][&apos;PV1.33.1&apos;]; }

				// PV1.34, deleteAccountIndicator
				if (seg[&apos;PV1.34&apos;][&apos;PV1.34.1&apos;].toString() != &quot;&quot;) { pv1[index].deleteAccountIndicator = seg[&apos;PV1.34&apos;][&apos;PV1.34.1&apos;]; }

				// PV1.35, deleteAccountDate
				if (seg[&apos;PV1.35&apos;][&apos;PV1.35.1&apos;].toString() != &quot;&quot;) { pv1[index].deleteAccountDate = seg[&apos;PV1.35&apos;][&apos;PV1.35.1&apos;]; }

				// PV1.36, dischargeDisposition
				if (seg[&apos;PV1.36&apos;][&apos;PV1.36.1&apos;].toString() != &quot;&quot;) { pv1[index].dischargeDisposition = seg[&apos;PV1.36&apos;][&apos;PV1.36.1&apos;]; }

				// PV1.37, dischargedtoLocation
				pv1[index].dischargedtoLocation = {};
				if (seg[&apos;PV1.37&apos;][&apos;PV1.37.1&apos;].toString() != &quot;&quot;) { pv1[index].dischargedtoLocation.dischargeLocation = seg[&apos;PV1.37&apos;][&apos;PV1.37.1&apos;]; }
				if (seg[&apos;PV1.37&apos;][&apos;PV1.37.2&apos;].toString() != &quot;&quot;) { pv1[index].dischargedtoLocation.effectiveDate = seg[&apos;PV1.37&apos;][&apos;PV1.37.2&apos;]; }
				if (Object.keys(pv1[index].dischargedtoLocation).length == 0) {
					delete pv1[index].dischargedtoLocation;
				}

				// PV1.38, dietType
				if (seg[&apos;PV1.38&apos;][&apos;PV1.38.1&apos;].toString() != &quot;&quot;) { pv1[index].dietType = seg[&apos;PV1.38&apos;][&apos;PV1.38.1&apos;]; }

				// PV1.39, servicingFacility
				if (seg[&apos;PV1.39&apos;][&apos;PV1.39.1&apos;].toString() != &quot;&quot;) { pv1[index].servicingFacility = seg[&apos;PV1.39&apos;][&apos;PV1.39.1&apos;]; }

				// PV1.40, bedStatus
				if (seg[&apos;PV1.40&apos;][&apos;PV1.40.1&apos;].toString() != &quot;&quot;) { pv1[index].bedStatus = seg[&apos;PV1.40&apos;][&apos;PV1.40.1&apos;]; }

				// PV1.41, accountStatus
				if (seg[&apos;PV1.41&apos;][&apos;PV1.41.1&apos;].toString() != &quot;&quot;) { pv1[index].accountStatus = seg[&apos;PV1.41&apos;][&apos;PV1.41.1&apos;]; }

				// PV1.42, pendingLocation
				pv1[index].pendingLocation = {};
				if (seg[&apos;PV1.42&apos;][&apos;PV1.42.1&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.pointOfCare = seg[&apos;PV1.42&apos;][&apos;PV1.42.1&apos;]; }
				if (seg[&apos;PV1.42&apos;][&apos;PV1.42.2&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.room = seg[&apos;PV1.42&apos;][&apos;PV1.42.2&apos;]; }
				if (seg[&apos;PV1.42&apos;][&apos;PV1.42.3&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.bed = seg[&apos;PV1.42&apos;][&apos;PV1.42.3&apos;]; }
				pv1[index].pendingLocation.facility = {};
				if (seg[&apos;PV1.42&apos;][&apos;PV1.42.4&apos;][&apos;PV1.42.4.1&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.facility.nameSpaceId =  seg[&apos;PV1.42&apos;][&apos;PV1.42.4&apos;][&apos;PV1.42.4.1&apos;]; }
				if (seg[&apos;PV1.42&apos;][&apos;PV1.42.4&apos;][&apos;PV1.42.4.2&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.facility.universalId =  seg[&apos;PV1.42&apos;][&apos;PV1.42.4&apos;][&apos;PV1.42.4.2&apos;]; }
				if (seg[&apos;PV1.42&apos;][&apos;PV1.42.4&apos;][&apos;PV1.42.4.3&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.facility.universalIdType =  seg[&apos;PV1.42&apos;][&apos;PV1.42.4&apos;][&apos;PV1.42.4.3&apos;]; }
				if (Object.keys(pv1[index].pendingLocation.facility).length == 0) {
					if (seg[&apos;PV1.42&apos;][&apos;PV1.42.4&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.facility.nameSpaceId = seg[&apos;PV1.42&apos;][&apos;PV1.42.4&apos;]; }
					else delete pv1[index].pendingLocation.facility;
				}
				if (seg[&apos;PV1.42&apos;][&apos;PV1.42.5&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.locationStatus = seg[&apos;PV1.42&apos;][&apos;PV1.42.5&apos;]; }
				if (seg[&apos;PV1.42&apos;][&apos;PV1.42.6&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.personLocationType = seg[&apos;PV1.42&apos;][&apos;PV1.42.6&apos;]; }
				if (seg[&apos;PV1.42&apos;][&apos;PV1.42.7&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.building = seg[&apos;PV1.42&apos;][&apos;PV1.42.7&apos;]; }
				if (seg[&apos;PV1.42&apos;][&apos;PV1.42.8&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.floor = seg[&apos;PV1.42&apos;][&apos;PV1.42.8&apos;]; }
				if (seg[&apos;PV1.42&apos;][&apos;PV1.42.9&apos;].toString() != &quot;&quot;) { pv1[index].pendingLocation.locationDescription = seg[&apos;PV1.42&apos;][&apos;PV1.42.9&apos;]; }
				if (Object.keys(pv1[index].pendingLocation).length == 0) {
					delete pv1[index].pendingLocation;
				}

				// PV1.43, priorTemporaryLocation
				pv1[index].priorTemporaryLocation = {};
				if (seg[&apos;PV1.43&apos;][&apos;PV1.43.1&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.pointOfCare = seg[&apos;PV1.43&apos;][&apos;PV1.43.1&apos;]; }
				if (seg[&apos;PV1.43&apos;][&apos;PV1.43.2&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.room = seg[&apos;PV1.43&apos;][&apos;PV1.43.2&apos;]; }
				if (seg[&apos;PV1.43&apos;][&apos;PV1.43.3&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.bed = seg[&apos;PV1.43&apos;][&apos;PV1.43.3&apos;]; }
				pv1[index].priorTemporaryLocation.facility = {};
				if (seg[&apos;PV1.43&apos;][&apos;PV1.43.4&apos;][&apos;PV1.43.4.1&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.facility.nameSpaceId =  seg[&apos;PV1.43&apos;][&apos;PV1.43.4&apos;][&apos;PV1.43.4.1&apos;]; }
				if (seg[&apos;PV1.43&apos;][&apos;PV1.43.4&apos;][&apos;PV1.43.4.2&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.facility.universalId =  seg[&apos;PV1.43&apos;][&apos;PV1.43.4&apos;][&apos;PV1.43.4.2&apos;]; }
				if (seg[&apos;PV1.43&apos;][&apos;PV1.43.4&apos;][&apos;PV1.43.4.3&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.facility.universalIdType =  seg[&apos;PV1.43&apos;][&apos;PV1.43.4&apos;][&apos;PV1.43.4.3&apos;]; }
				if (Object.keys(pv1[index].priorTemporaryLocation.facility).length == 0) {
					if (seg[&apos;PV1.43&apos;][&apos;PV1.43.4&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.facility.nameSpaceId = seg[&apos;PV1.43&apos;][&apos;PV1.43.4&apos;]; }
					else delete pv1[index].priorTemporaryLocation.facility;
				}
				if (seg[&apos;PV1.43&apos;][&apos;PV1.43.5&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.locationStatus = seg[&apos;PV1.43&apos;][&apos;PV1.43.5&apos;]; }
				if (seg[&apos;PV1.43&apos;][&apos;PV1.43.6&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.personLocationType = seg[&apos;PV1.43&apos;][&apos;PV1.43.6&apos;]; }
				if (seg[&apos;PV1.43&apos;][&apos;PV1.43.7&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.building = seg[&apos;PV1.43&apos;][&apos;PV1.43.7&apos;]; }
				if (seg[&apos;PV1.43&apos;][&apos;PV1.43.8&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.floor = seg[&apos;PV1.43&apos;][&apos;PV1.43.8&apos;]; }
				if (seg[&apos;PV1.43&apos;][&apos;PV1.43.9&apos;].toString() != &quot;&quot;) { pv1[index].priorTemporaryLocation.locationDescription = seg[&apos;PV1.43&apos;][&apos;PV1.43.9&apos;]; }
				if (Object.keys(pv1[index].priorTemporaryLocation).length == 0) {
					delete pv1[index].priorTemporaryLocation;
				}

				// PV1.44, admitDateTime
				if (seg[&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString() != &quot;&quot;) { pv1[index].admitDateTime = seg[&apos;PV1.44&apos;][&apos;PV1.44.1&apos;]; }

				// PV1.45, dischargeDateTime
				if (seg[&apos;PV1.45&apos;][&apos;PV1.45.1&apos;].toString() != &quot;&quot;) { pv1[index].dischargeDateTime = seg[&apos;PV1.45&apos;][&apos;PV1.45.1&apos;]; }

				// PV1.46, currentPatientBalance
				if (seg[&apos;PV1.46&apos;][&apos;PV1.46.1&apos;].toString() != &quot;&quot;) { pv1[index].currentPatientBalance = seg[&apos;PV1.46&apos;][&apos;PV1.46.1&apos;]; }

				// PV1.47, totalCharges
				if (seg[&apos;PV1.47&apos;][&apos;PV1.47.1&apos;].toString() != &quot;&quot;) { pv1[index].totalCharges = seg[&apos;PV1.47&apos;][&apos;PV1.47.1&apos;]; }

				// PV1.48, totalAdjustments
				if (seg[&apos;PV1.48&apos;][&apos;PV1.48.1&apos;].toString() != &quot;&quot;) { pv1[index].totalAdjustments = seg[&apos;PV1.48&apos;][&apos;PV1.48.1&apos;]; }

				// PV1.49, totalPayments
				if (seg[&apos;PV1.49&apos;][&apos;PV1.49.1&apos;].toString() != &quot;&quot;) { pv1[index].totalPayments = seg[&apos;PV1.49&apos;][&apos;PV1.49.1&apos;]; }

				// PV1.50, alternateVisitID
				pv1[index].alternateVisitID = {};
				if (seg[&apos;PV1.50&apos;][&apos;PV1.50.1&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.id = seg[&apos;PV1.50&apos;][&apos;PV1.50.1&apos;]; }
				if (seg[&apos;PV1.50&apos;][&apos;PV1.50.2&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.identifierCheckDigit = seg[&apos;PV1.50&apos;][&apos;PV1.50.2&apos;]; }
				if (seg[&apos;PV1.50&apos;][&apos;PV1.50.3&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.codeIdentifyingCheckDigitScheme = seg[&apos;PV1.50&apos;][&apos;PV1.50.3&apos;]; }
				pv1[index].alternateVisitID.assigningAuthority = {};
				if (seg[&apos;PV1.50&apos;][&apos;PV1.50.4&apos;][&apos;PV1.50.4.1&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.assigningAuthority.namespaceId = seg[&apos;PV1.50&apos;][&apos;PV1.50.4&apos;][&apos;PV1.50.4.1&apos;]; }
				if (seg[&apos;PV1.50&apos;][&apos;PV1.50.4&apos;][&apos;PV1.50.4.2&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.assigningAuthority.universalId = seg[&apos;PV1.50&apos;][&apos;PV1.50.4&apos;][&apos;PV1.50.4.2&apos;]; }
				if (seg[&apos;PV1.50&apos;][&apos;PV1.50.4&apos;][&apos;PV1.50.4.3&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.assigningAuthority.universalIdType = seg[&apos;PV1.50&apos;][&apos;PV1.50.4&apos;][&apos;PV1.50.4.3&apos;]; }
				if (Object.keys(pv1[index].alternateVisitID.assigningAuthority).length == 0) {
					if (seg[&apos;PV1.50&apos;][&apos;PV1.50.4&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.assigningAuthority.namespaceId = seg[&apos;PV1.50&apos;][&apos;PV1.50.4&apos;]; }
					else delete pv1[index].alternateVisitID.assigningAuthority;
				}
				if (seg[&apos;PV1.50&apos;][&apos;PV1.50.5&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.idTypeCode = seg[&apos;PV1.50&apos;][&apos;PV1.50.5&apos;]; }
				pv1[index].alternateVisitID.assigningFacility = {};
				if (seg[&apos;PV1.50&apos;][&apos;PV1.50.6&apos;][&apos;PV1.50.6.1&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.assigningFacility.namespaceId = seg[&apos;PV1.50&apos;][&apos;PV1.50.6&apos;][&apos;PV1.50.6.1&apos;]; }
				if (seg[&apos;PV1.50&apos;][&apos;PV1.50.6&apos;][&apos;PV1.50.6.2&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.assigningFacility.universalId = seg[&apos;PV1.50&apos;][&apos;PV1.50.6&apos;][&apos;PV1.50.6.2&apos;]; }
				if (seg[&apos;PV1.50&apos;][&apos;PV1.50.6&apos;][&apos;PV1.50.6.3&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.assigningFacility.universalIdType = seg[&apos;PV1.50&apos;][&apos;PV1.50.6&apos;][&apos;PV1.50.6.3&apos;]; }
				if (Object.keys(pv1[index].alternateVisitID.assigningFacility).length == 0) {
					if (seg[&apos;PV1.50&apos;][&apos;PV1.50.6&apos;].toString() != &quot;&quot;) { pv1[index].alternateVisitID.assigningFacility.namespaceId = seg[&apos;PV1.50&apos;][&apos;PV1.50.6&apos;]; }
					else delete pv1[index].alternateVisitID.assigningFacility;
				}
				if (Object.keys(pv1[index].alternateVisitID).length == 0) {
					delete pv1[index].alternateVisitID;
				}

				// PV1.51, visitIndicator
				if (seg[&apos;PV1.51&apos;][&apos;PV1.51.1&apos;].toString() != &quot;&quot;) { pv1[index].visitIndicator = seg[&apos;PV1.51&apos;][&apos;PV1.51.1&apos;]; }

				// PV1.52, otherHealthcareProvider
				pv1[index].otherHealthcareProvider = {};
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.1&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.id = seg[&apos;PV1.52&apos;][&apos;PV1.52.1&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.2&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.lastName = seg[&apos;PV1.52&apos;][&apos;PV1.52.2&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.3&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.firstName = seg[&apos;PV1.52&apos;][&apos;PV1.52.3&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.4&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.middleInitOrName = seg[&apos;PV1.52&apos;][&apos;PV1.52.4&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.5&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.suffix = seg[&apos;PV1.52&apos;][&apos;PV1.52.5&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.6&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.prefix = seg[&apos;PV1.52&apos;][&apos;PV1.52.6&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.7&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.degree = seg[&apos;PV1.52&apos;][&apos;PV1.52.7&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.8&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.sourceTable = seg[&apos;PV1.52&apos;][&apos;PV1.52.8&apos;]; }
				pv1[index].otherHealthcareProvider.assigningAuthority = {};
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.9&apos;][&apos;PV1.52.9.1&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.assigningAuthority.id = seg[&apos;PV1.52&apos;][&apos;PV1.52.9&apos;][&apos;PV1.52.9.1&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.9&apos;][&apos;PV1.52.9.2&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.assigningAuthority.universalId = seg[&apos;PV1.52&apos;][&apos;PV1.52.9&apos;][&apos;PV1.52.9.2&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.9&apos;][&apos;PV1.52.9.3&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.assigningAuthority.universalIdType = seg[&apos;PV1.52&apos;][&apos;PV1.52.9&apos;][&apos;PV1.52.9.3&apos;]; }
				if (Object.keys(pv1[index].otherHealthcareProvider.assigningAuthority).length == 0) {
					if (seg[&apos;PV1.52&apos;][&apos;PV1.52.9&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.assigningAuthority.id = seg[&apos;PV1.52&apos;][&apos;PV1.52.9&apos;]; }
					else delete pv1[index].otherHealthcareProvider.assigningAuthority;
				}
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.10&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.nameTypeCode = seg[&apos;PV1.52&apos;][&apos;PV1.52.10&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.11&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.identifierCheckDigit = seg[&apos;PV1.52&apos;][&apos;PV1.52.11&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.12&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.codeIdentifyingCheckDigitScheme = seg[&apos;PV1.52&apos;][&apos;PV1.52.12&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.13&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.identifierTypeCode = seg[&apos;PV1.52&apos;][&apos;PV1.52.13&apos;]; }
				pv1[index].otherHealthcareProvider.assigningFacility = {};
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.14&apos;][&apos;PV1.52.14.1&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.assigningFacility.id = seg[&apos;PV1.52&apos;][&apos;PV1.52.14&apos;][&apos;PV1.52.14.1&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.14&apos;][&apos;PV1.52.14.2&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.assigningFacility.universalId = seg[&apos;PV1.52&apos;][&apos;PV1.52.14&apos;][&apos;PV1.52.14.2&apos;]; }
				if (seg[&apos;PV1.52&apos;][&apos;PV1.52.14&apos;][&apos;PV1.52.14.3&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.assigningFacility.universalIdType = seg[&apos;PV1.52&apos;][&apos;PV1.52.14&apos;][&apos;PV1.52.14.3&apos;]; }
				if (Object.keys(pv1[index].otherHealthcareProvider.assigningFacility).length == 0) {
					if (seg[&apos;PV1.52&apos;][&apos;PV1.52.14&apos;].toString() != &quot;&quot;) { pv1[index].otherHealthcareProvider.assigningFacility.id = seg[&apos;PV1.52&apos;][&apos;PV1.52.14&apos;]; }
					else delete pv1[index].otherHealthcareProvider.assigningFacility;
				}
				if (Object.keys(pv1[index].otherHealthcareProvider).length == 0) {
					delete pv1[index].otherHealthcareProvider;
				}
				*/
				
				index++;
				
				/*
				if(debug&gt; 0) {
					logger.error(scriptName+&apos;::DEBUG seg[&quot;+index+&quot;]: &apos;+seg.toString());
					logger.error(scriptName+&apos;::DEBUG pv1[&quot;+index+&quot;]: &apos;+pv1.toString());
				}
				*/
			
			}
		}
		
		logger.error(scriptName+&apos;::DEBUG objPV1: &apos;+JSON.stringify(objPV1));		
		return objPV1;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>517b87b6-8ea2-48ba-899d-895b700069ee</id>
                <name>getSCH_v23</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262510</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	getSCH_v23(msg)
	
	- Desc: This function retrieves HL7v2 HAPI format elements and values from SCH segment stored in
	object for reference

	@param {String} msg - this contains the raw message (string)
	@return {object} objSCH - this contains the SCH segment elements composed into a single objSCH object.
*/
function getSCH_v23(msg) {

	// define variables
	if (typeof(msg[&apos;SCH&apos;].toString()) !== undefined) {

		// SCH	
		var objSCH= new Object();

		if (msg[&apos;SCH&apos;].length() &gt; 0) {
			var index = 0;
			for each (seg in msg.SCH) {

				// SCH.1, placerAppointmentId
				if(typeof(seg[&apos;SCH.1&apos;]) !== &apos;undefined&apos;) {
					var objPlacerAppointmentId= new Object();
					if (seg[&apos;SCH.1&apos;][&apos;SCH.1.1&apos;].toString() != &quot;&quot;) { objPlacerAppointmentId.id= seg[&apos;SCH.1&apos;][&apos;SCH.1.1&apos;].toString(); }
					if (seg[&apos;SCH.1&apos;][&apos;SCH.1.2&apos;].toString() != &quot;&quot;) { objPlacerAppointmentId.namespaceId= seg[&apos;SCH.1&apos;][&apos;SCH.1.2&apos;].toString(); }
					if (seg[&apos;SCH.1&apos;][&apos;SCH.1.3&apos;].toString() != &quot;&quot;) { objPlacerAppointmentId.universalId= seg[&apos;SCH.1&apos;][&apos;SCH.1.3&apos;].toString(); }
					if (seg[&apos;SCH.1&apos;][&apos;SCH.1.4&apos;].toString() != &quot;&quot;) { objPlacerAppointmentId.universalIdType= seg[&apos;SCH.1&apos;][&apos;SCH.1.4&apos;].toString(); }
					
					objSCH.objPlacerAppointmentId= objPlacerAppointmentId;
				}
					
				// SCH.2, fillerAppointmentId
				if(typeof(seg[&apos;SCH.2&apos;]) !== &apos;undefined&apos;) {
					var objFillerAppointmentId= new Object();
					if (seg[&apos;SCH.2&apos;][&apos;SCH.2.1&apos;].toString() != &quot;&quot;) { objFillerAppointmentId.id= seg[&apos;SCH.2&apos;][&apos;SCH.2.1&apos;].toString(); }
					if (seg[&apos;SCH.2&apos;][&apos;SCH.2.2&apos;].toString() != &quot;&quot;) { objFillerAppointmentId.namespaceId= seg[&apos;SCH.2&apos;][&apos;SCH.2.2&apos;].toString(); }
					if (seg[&apos;SCH.2&apos;][&apos;SCH.2.3&apos;].toString() != &quot;&quot;) { objFillerAppointmentId.universalId= seg[&apos;SCH.2&apos;][&apos;SCH.2.3&apos;].toString(); }
					if (seg[&apos;SCH.2&apos;][&apos;SCH.2.4&apos;].toString() != &quot;&quot;) { objFillerAppointmentId.universalIdType= seg[&apos;SCH.2&apos;][&apos;SCH.2.4&apos;].toString(); }
					
					objSCH.fillerAppointmentId= objFillerAppointmentId;
				}
				
				// SCH.3, occurrenceNumber
				if (seg[&apos;SCH.3&apos;][&apos;SCH.3.1&apos;].toString() != &quot;&quot;) { objSCH.occurrenceNumber = seg[&apos;SCH.3&apos;][&apos;SCH.3.1&apos;].toString(); }

				// SCH.4, placerGroupNumber
				if(typeof(seg[&apos;SCH.4&apos;]) !== &apos;undefined&apos;) {
					var objPlacerGroupNumber= new Object();
					if (seg[&apos;SCH.4&apos;][&apos;SCH.4.1&apos;].toString() != &quot;&quot;) { objPlacerGroupNumber.id= seg[&apos;SCH.4&apos;][&apos;SCH.4.1&apos;].toString(); }
					if (seg[&apos;SCH.4&apos;][&apos;SCH.4.2&apos;].toString() != &quot;&quot;) { objPlacerGroupNumber.namespaceId= seg[&apos;SCH.4&apos;][&apos;SCH.4.2&apos;].toString(); }
					if (seg[&apos;SCH.4&apos;][&apos;SCH.4.3&apos;].toString() != &quot;&quot;) { objPlacerGroupNumber.universalId= seg[&apos;SCH.4&apos;][&apos;SCH.4.3&apos;].toString(); }
					if (seg[&apos;SCH.4&apos;][&apos;SCH.4.4&apos;].toString() != &quot;&quot;) { objPlacerGroupNumber.universalIdType= seg[&apos;SCH.4&apos;][&apos;SCH.4.4&apos;].toString(); }
					
					objSCH.placerGroupNumber= objPlacerGroupNumber;
				}

				// SCH.5, scheduleId
				if(typeof(seg[&apos;SCH.5&apos;]) !== &apos;undefined&apos;) {
					var objScheduleId= new Object();
					if (seg[&apos;SCH.5&apos;][&apos;SCH.5.1&apos;].toString() != &quot;&quot;) { objScheduleId.id= seg[&apos;SCH.5&apos;][&apos;SCH.5.1&apos;].toString(); }
					if (seg[&apos;SCH.5&apos;][&apos;SCH.5.2&apos;].toString() != &quot;&quot;) { objScheduleId.text= seg[&apos;SCH.5&apos;][&apos;SCH.5.2&apos;].toString(); }
					if (seg[&apos;SCH.5&apos;][&apos;SCH.5.3&apos;].toString() != &quot;&quot;) { objScheduleId.codeSystem= seg[&apos;SCH.5&apos;][&apos;SCH.5.3&apos;].toString(); }
					if (seg[&apos;SCH.5&apos;][&apos;SCH.5.4&apos;].toString() != &quot;&quot;) { objScheduleId.alternateId= seg[&apos;SCH.5&apos;][&apos;SCH.5.4&apos;].toString(); }
					if (seg[&apos;SCH.5&apos;][&apos;SCH.5.5&apos;].toString() != &quot;&quot;) { objScheduleId.alternateText= seg[&apos;SCH.5&apos;][&apos;SCH.5.5&apos;].toString(); }
					if (seg[&apos;SCH.5&apos;][&apos;SCH.5.6&apos;].toString() != &quot;&quot;) { objScheduleId.altCodeSystem= seg[&apos;SCH.5&apos;][&apos;SCH.5.6&apos;].toString(); }
					
					objSCH.scheduleId= objScheduleId;
				}
				
				// SCH.6, eventReason
				if(typeof(seg[&apos;SCH.6&apos;]) !== &apos;undefined&apos;) {
					var objEventReason= new Object();
					if (seg[&apos;SCH.6&apos;][&apos;SCH.6.1&apos;].toString() != &quot;&quot;) { objEventReason.id= seg[&apos;SCH.6&apos;][&apos;SCH.6.1&apos;].toString(); }
					if (seg[&apos;SCH.6&apos;][&apos;SCH.6.2&apos;].toString() != &quot;&quot;) { objEventReason.text= seg[&apos;SCH.6&apos;][&apos;SCH.6.2&apos;].toString(); }
					if (seg[&apos;SCH.6&apos;][&apos;SCH.6.3&apos;].toString() != &quot;&quot;) { objEventReason.codeSystem= seg[&apos;SCH.6&apos;][&apos;SCH.6.3&apos;].toString(); }
					if (seg[&apos;SCH.6&apos;][&apos;SCH.6.4&apos;].toString() != &quot;&quot;) { objEventReason.alternateId= seg[&apos;SCH.6&apos;][&apos;SCH.6.4&apos;].toString(); }
					if (seg[&apos;SCH.6&apos;][&apos;SCH.6.5&apos;].toString() != &quot;&quot;) { objEventReason.alternateText= seg[&apos;SCH.6&apos;][&apos;SCH.6.5&apos;].toString(); }
					if (seg[&apos;SCH.6&apos;][&apos;SCH.6.6&apos;].toString() != &quot;&quot;) { objEventReason.altCodeSystem= seg[&apos;SCH.6&apos;][&apos;SCH.6.6&apos;].toString(); }
					
					objSCH.eventReason= objEventReason;
				}

				// SCH.7, appointmentReason
				if(typeof(seg[&apos;SCH.7&apos;]) !== &apos;undefined&apos;) {
					var objAppointmentReason= new Object();
					if (seg[&apos;SCH.7&apos;][&apos;SCH.7.1&apos;].toString() != &quot;&quot;) { objAppointmentReason.id= seg[&apos;SCH.7&apos;][&apos;SCH.7.1&apos;].toString(); }
					if (seg[&apos;SCH.7&apos;][&apos;SCH.7.2&apos;].toString() != &quot;&quot;) { objAppointmentReason.text= seg[&apos;SCH.7&apos;][&apos;SCH.7.2&apos;].toString(); }
					if (seg[&apos;SCH.7&apos;][&apos;SCH.7.3&apos;].toString() != &quot;&quot;) { objAppointmentReason.codeSystem= seg[&apos;SCH.7&apos;][&apos;SCH.7.3&apos;].toString(); }
					if (seg[&apos;SCH.7&apos;][&apos;SCH.7.4&apos;].toString() != &quot;&quot;) { objAppointmentReason.alternateId= seg[&apos;SCH.7&apos;][&apos;SCH.7.4&apos;].toString(); }
					if (seg[&apos;SCH.7&apos;][&apos;SCH.7.5&apos;].toString() != &quot;&quot;) { objAppointmentReason.alternateText= seg[&apos;SCH.7&apos;][&apos;SCH.7.5&apos;].toString(); }
					if (seg[&apos;SCH.7&apos;][&apos;SCH.7.6&apos;].toString() != &quot;&quot;) { objAppointmentReason.altCodeSystem= seg[&apos;SCH.7&apos;][&apos;SCH.7.6&apos;].toString(); }
					
					objSCH.appointmentReason= objAppointmentReason;
				}
				
				// SCH.8, appointmentType
				if(typeof(seg[&apos;SCH.8&apos;]) !== &apos;undefined&apos;) {
					var x= new Object();
					if (seg[&apos;SCH.8&apos;][&apos;SCH.8.1&apos;].toString() != &quot;&quot;) { objAppointmentType.id= seg[&apos;SCH.8&apos;][&apos;SCH.8.1&apos;].toString(); }
					if (seg[&apos;SCH.8&apos;][&apos;SCH.8.2&apos;].toString() != &quot;&quot;) { objAppointmentType.text= seg[&apos;SCH.8&apos;][&apos;SCH.8.2&apos;].toString(); }
					if (seg[&apos;SCH.8&apos;][&apos;SCH.8.3&apos;].toString() != &quot;&quot;) { objAppointmentType.codeSystem= seg[&apos;SCH.8&apos;][&apos;SCH.8.3&apos;].toString(); }
					if (seg[&apos;SCH.8&apos;][&apos;SCH.8.4&apos;].toString() != &quot;&quot;) { objAppointmentType.alternateId= seg[&apos;SCH.8&apos;][&apos;SCH.8.4&apos;].toString(); }
					if (seg[&apos;SCH.8&apos;][&apos;SCH.8.5&apos;].toString() != &quot;&quot;) { objAppointmentType.alternateText= seg[&apos;SCH.8&apos;][&apos;SCH.8.5&apos;].toString(); }
					if (seg[&apos;SCH.8&apos;][&apos;SCH.8.6&apos;].toString() != &quot;&quot;) { objAppointmentType.altCodeSystem= seg[&apos;SCH.8&apos;][&apos;SCH.8.6&apos;].toString(); }
					
					objSCH.appointmentType= objAppointmentType;
				}

				// SCH.9, appointmentDuration
				if (seg[&apos;SCH.9&apos;][&apos;SCH.9.1&apos;].toString() != &quot;&quot;) { objSCH.appointmentDuration= seg[&apos;SCH.9&apos;][&apos;SCH.9.1&apos;].toString(); }

				// SCH.10, appointmentDurationUnits
				if(typeof(seg[&apos;SCH.10&apos;]) !== &apos;undefined&apos;) {
					var objAppointmentDurationUnits= new Object();
					if (seg[&apos;SCH.10&apos;][&apos;SCH.10.1&apos;].toString() != &quot;&quot;) { objAppointmentDurationUnits.id= seg[&apos;SCH.10&apos;][&apos;SCH.10.1&apos;].toString(); }
					if (seg[&apos;SCH.10&apos;][&apos;SCH.10.2&apos;].toString() != &quot;&quot;) { objAppointmentDurationUnits.text= seg[&apos;SCH.10&apos;][&apos;SCH.10.2&apos;].toString(); }
					if (seg[&apos;SCH.10&apos;][&apos;SCH.10.3&apos;].toString() != &quot;&quot;) { objAppointmentDurationUnits.codeSystem= seg[&apos;SCH.10&apos;][&apos;SCH.10.3&apos;].toString(); }
					if (seg[&apos;SCH.10&apos;][&apos;SCH.10.4&apos;].toString() != &quot;&quot;) { objAppointmentDurationUnits.alternateId= seg[&apos;SCH.10&apos;][&apos;SCH.10.4&apos;].toString(); }
					if (seg[&apos;SCH.10&apos;][&apos;SCH.10.5&apos;].toString() != &quot;&quot;) { objAppointmentDurationUnits.alternateText= seg[&apos;SCH.10&apos;][&apos;SCH.10.5&apos;].toString(); }
					if (seg[&apos;SCH.10&apos;][&apos;SCH.10.6&apos;].toString() != &quot;&quot;) { objAppointmentDurationUnits.altCodeSystem= seg[&apos;SCH.10&apos;][&apos;SCH.10.6&apos;].toString(); }
					
					objSCH.appointmentDurationUnits= objAppointmentDurationUnits;
				}
				
				// SCH.11, appointmentTimingQuantity
				if(typeof(seg[&apos;SCH.11&apos;]) !== &apos;undefined&apos;) {
					
					var objAppointmentTimingQuantity= new Object();

					// SCH.11.1, quantity
					if(typeof(seg[&apos;SCH.11&apos;][&apos;SCH.11.1&apos;]) !== &apos;undefined&apos;) {
						var objAppointmentTimingQuantityCE= new Object();
						if (seg[&apos;SCH.11&apos;][&apos;SCH.11.1&apos;][&apos;SCH.11.1.1&apos;].toString() != &quot;&quot;) { objAppointmentTimingQuantityCE.quantity= seg[&apos;SCH.11&apos;][&apos;SCH.11.1&apos;][&apos;SCH.11.1.1&apos;].toString(); }
						if (seg[&apos;SCH.11&apos;][&apos;SCH.11.1&apos;][&apos;SCH.11.1.2&apos;].toString() != &quot;&quot;) { objAppointmentTimingQuantityCE.units= seg[&apos;SCH.11&apos;][&apos;SCH.11.1&apos;][&apos;SCH.11.1.2&apos;].toString(); }
						objAppointmentTimingQuantity.quantity= objAppointmentTimingQuantityCE;
					}
					
					// SCH.11.2, interval
					if(typeof(seg[&apos;SCH.11&apos;][&apos;SCH.11.2&apos;]) !== &apos;undefined&apos;) {
						var objAppointmentTimingQuantityInterval= new Object();
						if (seg[&apos;SCH.11&apos;][&apos;SCH.11.2&apos;][&apos;SCH.11.2.1&apos;].toString() != &quot;&quot;) { objAppointmentTimingQuantityInterval.pattern= seg[&apos;SCH.11&apos;][&apos;SCH.11.2&apos;][&apos;SCH.11.2.1&apos;].toString(); }
						if (seg[&apos;SCH.11&apos;][&apos;SCH.11.2&apos;][&apos;SCH.11.2.2&apos;].toString() != &quot;&quot;) { objAppointmentTimingQuantityInterval.interval= seg[&apos;SCH.11&apos;][&apos;SCH.11.2&apos;][&apos;SCH.11.2.2&apos;].toString(); }
						objAppointmentTimingQuantity.interval= objAppointmentTimingQuantityInterval;
					}
					
					// SCH.11.3, duration
					if (seg[&apos;SCH.11&apos;][&apos;SCH.11.3&apos;].toString() != &apos;&apos;) { objAppointmentTimingQuantity.duration= seg[&apos;SCH.11&apos;][&apos;SCH.11.3&apos;].toString(); }
					
					// SCH.11.4, start date/time
					if (seg[&apos;SCH.11&apos;][&apos;SCH.11.4&apos;].toString() != &apos;&apos;) { objAppointmentTimingQuantity.startDateTime= seg[&apos;SCH.11&apos;][&apos;SCH.11.4&apos;].toString(); }
					
					// SCH.11.5, stop date/time
					if (seg[&apos;SCH.11&apos;][&apos;SCH.11.5&apos;].toString() != &apos;&apos;) { objAppointmentTimingQuantity.stopDateTime= seg[&apos;SCH.11&apos;][&apos;SCH.11.5&apos;].toString(); }
				
					objSCH.appointmentTimingQuantity= objAppointmentTimingQuantity;
				}	
				
				// SCH.12, placer contact person
				if(typeof(seg[&apos;SCH.12&apos;]) !== &apos;undefined&apos;) {
					var objPlacerContactPerson= new Object();
					if (seg[&apos;SCH.12&apos;][&apos;SCH.12.1&apos;].toString() != &quot;&quot;) { objPlacerContactPerson.id= seg[&apos;SCH.12&apos;][&apos;SCH.12.1&apos;].toString(); }
					if (seg[&apos;SCH.12&apos;][&apos;SCH.12.2&apos;].toString() != &quot;&quot;) { objPlacerContactPerson.familyName= seg[&apos;SCH.12&apos;][&apos;SCH.12.2&apos;].toString(); }
					if (seg[&apos;SCH.12&apos;][&apos;SCH.12.3&apos;].toString() != &quot;&quot;) { objPlacerContactPerson.givenName= seg[&apos;SCH.12&apos;][&apos;SCH.12.3&apos;].toString(); }
					if (seg[&apos;SCH.12&apos;][&apos;SCH.12.4&apos;].toString() != &quot;&quot;) { objPlacerContactPerson.middleName= seg[&apos;SCH.12&apos;][&apos;SCH.12.4&apos;].toString(); }
					if (seg[&apos;SCH.12&apos;][&apos;SCH.12.5&apos;].toString() != &quot;&quot;) { objPlacerContactPerson.suffix= seg[&apos;SCH.12&apos;][&apos;SCH.12.5&apos;].toString(); }
					if (seg[&apos;SCH.12&apos;][&apos;SCH.12.6&apos;].toString() != &quot;&quot;) { objPlacerContactPerson.prefix= seg[&apos;SCH.12&apos;][&apos;SCH.12.6&apos;].toString(); }
					if (seg[&apos;SCH.12&apos;][&apos;SCH.12.7&apos;].toString() != &quot;&quot;) { objPlacerContactPerson.degree= seg[&apos;SCH.12&apos;][&apos;SCH.12.7&apos;].toString(); }
					if (seg[&apos;SCH.12&apos;][&apos;SCH.12.8&apos;].toString() != &quot;&quot;) { objPlacerContactPerson.sourceTable= seg[&apos;SCH.12&apos;][&apos;SCH.12.8&apos;].toString(); }
					if (seg[&apos;SCH.12&apos;][&apos;SCH.12.9&apos;].toString() != &quot;&quot;) { objPlacerContactPerson.assigningAuthority= seg[&apos;SCH.12&apos;][&apos;SCH.12.9&apos;].toString(); }
					
					objSCH.placerContractPerson= objPlacerContactPerson;
				}
					
				// SCH.13, placer contact phone number
				if(typeof(seg[&apos;SCH.13&apos;]) !== &apos;undefined&apos;) {
					var objPlacerContactPhoneNumber= new Object();
					if (seg[&apos;SCH.13&apos;][&apos;SCH.13.1&apos;].toString() != &quot;&quot;) { objPlacerContactPhoneNumber.telephoneNumber= seg[&apos;SCH.13&apos;][&apos;SCH.13.1&apos;].toString(); }
					if (seg[&apos;SCH.13&apos;][&apos;SCH.13.2&apos;].toString() != &quot;&quot;) { objPlacerContactPhoneNumber.useCode= seg[&apos;SCH.13&apos;][&apos;SCH.13.2&apos;].toString(); }
					if (seg[&apos;SCH.13&apos;][&apos;SCH.13.3&apos;].toString() != &quot;&quot;) { objPlacerContactPhoneNumber.equipmentType= seg[&apos;SCH.13&apos;][&apos;SCH.13.3&apos;].toString(); }
					if (seg[&apos;SCH.13&apos;][&apos;SCH.13.4&apos;].toString() != &quot;&quot;) { objPlacerContactPhoneNumber.emailAddress= seg[&apos;SCH.13&apos;][&apos;SCH.13.4&apos;].toString(); }
					if (seg[&apos;SCH.13&apos;][&apos;SCH.13.5&apos;].toString() != &quot;&quot;) { objPlacerContactPhoneNumber.countryCode= seg[&apos;SCH.13&apos;][&apos;SCH.13.5&apos;].toString(); }
					if (seg[&apos;SCH.13&apos;][&apos;SCH.13.6&apos;].toString() != &quot;&quot;) { objPlacerContactPhoneNumber.areaCode= seg[&apos;SCH.13&apos;][&apos;SCH.13.6&apos;].toString(); }
					if (seg[&apos;SCH.13&apos;][&apos;SCH.13.6&apos;].toString() != &quot;&quot;) { objPlacerContactPhoneNumber.phoneNumber= seg[&apos;SCH.13&apos;][&apos;SCH.13.7&apos;].toString(); }

					objSCH.placerContactPhoneNumber= objPlacerContactPhoneNumber;
				}
				
				// SCH.14, placer contact address
				if(typeof(seg[&apos;SCH.14&apos;]) !== &apos;undefined&apos;) {
					var objPlacerContactAddress= new Object();
					if (seg[&apos;SCH.14&apos;][&apos;SCH.14.1&apos;].toString() != &quot;&quot;) { objPlacerContactAddress.streetAddress= seg[&apos;SCH.14&apos;][&apos;SCH.14.1&apos;].toString(); }
					if (seg[&apos;SCH.14&apos;][&apos;SCH.14.2&apos;].toString() != &quot;&quot;) { objPlacerContactAddress.otherDesignation= seg[&apos;SCH.14&apos;][&apos;SCH.14.2&apos;].toString(); }
					if (seg[&apos;SCH.14&apos;][&apos;SCH.14.3&apos;].toString() != &quot;&quot;) { objPlacerContactAddress.city= seg[&apos;SCH.14&apos;][&apos;SCH.14.3&apos;].toString(); }
					if (seg[&apos;SCH.14&apos;][&apos;SCH.14.4&apos;].toString() != &quot;&quot;) { objPlacerContactAddress.state= seg[&apos;SCH.14&apos;][&apos;SCH.14.4&apos;].toString(); }
					if (seg[&apos;SCH.14&apos;][&apos;SCH.14.5&apos;].toString() != &quot;&quot;) { objPlacerContactAddress.postalCode= seg[&apos;SCH.14&apos;][&apos;SCH.14.5&apos;].toString(); }
					if (seg[&apos;SCH.14&apos;][&apos;SCH.14.6&apos;].toString() != &quot;&quot;) { objPlacerContactAddress.country= seg[&apos;SCH.14&apos;][&apos;SCH.14.6&apos;].toString(); }
					if (seg[&apos;SCH.14&apos;][&apos;SCH.14.7&apos;].toString() != &quot;&quot;) { objPlacerContactAddress.addressType= seg[&apos;SCH.14&apos;][&apos;SCH.14.7&apos;].toString(); }
				
					objSCH.placerContactAddress= objPlacerContactAddress;
				}
				
				// SCH.15, placer contact location
				if(typeof(seg[&apos;SCH.15&apos;]) !== &apos;undefined&apos;) {
					var objPlacerContactLocation= new Object();
					if (seg[&apos;SCH.15&apos;][&apos;SCH.15.1&apos;].toString() != &quot;&quot;) { objPlacerContactLocation.pointOfCare= seg[&apos;SCH.15&apos;][&apos;SCH.15.1&apos;].toString(); }
					if (seg[&apos;SCH.15&apos;][&apos;SCH.15.2&apos;].toString() != &quot;&quot;) { objPlacerContactLocation.room= seg[&apos;SCH.15&apos;][&apos;SCH.15.2&apos;].toString(); }
					if (seg[&apos;SCH.15&apos;][&apos;SCH.15.3&apos;].toString() != &quot;&quot;) { objPlacerContactLocation.bed= seg[&apos;SCH.15&apos;][&apos;SCH.15.3&apos;].toString(); }
					if (seg[&apos;SCH.15&apos;][&apos;SCH.15.4&apos;].toString() != &quot;&quot;) { objPlacerContactLocation.facility= seg[&apos;SCH.15&apos;][&apos;SCH.15.4&apos;].toString(); }
					if (seg[&apos;SCH.15&apos;][&apos;SCH.15.5&apos;].toString() != &quot;&quot;) { objPlacerContactLocation.locationStatus= seg[&apos;SCH.15&apos;][&apos;SCH.15.5&apos;].toString(); }
				
					objSCH.placerContactLocation= objPlacerContactLocation;
				}
				
				// SCH.16, filler contact person
				if(typeof(seg[&apos;SCH.16&apos;]) !== &apos;undefined&apos;) {
					var objFillerContactPerson= new Object();
					
					if (seg[&apos;SCH.16&apos;][&apos;SCH.16.1&apos;].toString() != &quot;&quot;) { objFillerContactPerson.id= seg[&apos;SCH.16&apos;][&apos;SCH.16.1&apos;].toString(); }
					if (seg[&apos;SCH.16&apos;][&apos;SCH.16.2&apos;].toString() != &quot;&quot;) { objFillerContactPerson.familyName= seg[&apos;SCH.16&apos;][&apos;SCH.16.2&apos;].toString(); }
					if (seg[&apos;SCH.16&apos;][&apos;SCH.16.3&apos;].toString() != &quot;&quot;) { objFillerContactPerson.givenName= seg[&apos;SCH.16&apos;][&apos;SCH.16.3&apos;].toString(); }
					if (seg[&apos;SCH.16&apos;][&apos;SCH.16.4&apos;].toString() != &quot;&quot;) { objFillerContactPerson.middleName= seg[&apos;SCH.16&apos;][&apos;SCH.16.4&apos;].toString(); }
					if (seg[&apos;SCH.16&apos;][&apos;SCH.16.5&apos;].toString() != &quot;&quot;) { objFillerContactPerson.suffix= seg[&apos;SCH.16&apos;][&apos;SCH.16.5&apos;].toString(); }
					if (seg[&apos;SCH.16&apos;][&apos;SCH.16.6&apos;].toString() != &quot;&quot;) { objFillerContactPerson.prefix= seg[&apos;SCH.16&apos;][&apos;SCH.16.6&apos;].toString(); }
					if (seg[&apos;SCH.16&apos;][&apos;SCH.16.7&apos;].toString() != &quot;&quot;) { objFillerContactPerson.degree= seg[&apos;SCH.16&apos;][&apos;SCH.16.7&apos;].toString(); }
					if (seg[&apos;SCH.16&apos;][&apos;SCH.16.8&apos;].toString() != &quot;&quot;) { objFillerContactPerson.sourceTable= seg[&apos;SCH.16&apos;][&apos;SCH.16.8&apos;].toString(); }
					if (seg[&apos;SCH.16&apos;][&apos;SCH.16.9&apos;].toString() != &quot;&quot;) { objFillerContactPerson.assigningAuthority= seg[&apos;SCH.16&apos;][&apos;SCH.16.9&apos;].toString(); }
					
					objSCH.fillerContractPerson= objFillerContactPerson;
				}
				
				// SCH.17, filler contact phone number
				if(typeof(seg[&apos;SCH.17&apos;]) !== &apos;undefined&apos;) {
					var objFillerContactPhoneNumber= new Object();
					if (seg[&apos;SCH.17&apos;][&apos;SCH.17.1&apos;].toString() != &quot;&quot;) { objFillerContactPhoneNumber.telephoneNumber= seg[&apos;SCH.17&apos;][&apos;SCH.17.1&apos;].toString(); }
					if (seg[&apos;SCH.17&apos;][&apos;SCH.17.2&apos;].toString() != &quot;&quot;) { objFillerContactPhoneNumber.useCode= seg[&apos;SCH.17&apos;][&apos;SCH.17.2&apos;].toString(); }
					if (seg[&apos;SCH.17&apos;][&apos;SCH.17.3&apos;].toString() != &quot;&quot;) { objFillerContactPhoneNumber.equipmentType= seg[&apos;SCH.17&apos;][&apos;SCH.17.3&apos;].toString(); }
					if (seg[&apos;SCH.17&apos;][&apos;SCH.17.4&apos;].toString() != &quot;&quot;) { objFillerContactPhoneNumber.emailAddress= seg[&apos;SCH.17&apos;][&apos;SCH.17.4&apos;].toString(); }
					if (seg[&apos;SCH.17&apos;][&apos;SCH.17.5&apos;].toString() != &quot;&quot;) { objFillerContactPhoneNumber.countryCode= seg[&apos;SCH.17&apos;][&apos;SCH.17.5&apos;].toString(); }
					if (seg[&apos;SCH.17&apos;][&apos;SCH.17.6&apos;].toString() != &quot;&quot;) { objFillerContactPhoneNumber.areaCode= seg[&apos;SCH.17&apos;][&apos;SCH.17.6&apos;].toString(); }
					if (seg[&apos;SCH.17&apos;][&apos;SCH.17.6&apos;].toString() != &quot;&quot;) { objFillerContactPhoneNumber.phoneNumber= seg[&apos;SCH.17&apos;][&apos;SCH.17.7&apos;].toString(); }

					objSCH.fillerContactPhoneNumber= objFillerContactPhoneNumber;
				}
				
				// SCH.18, placer contact address
				if(typeof(seg[&apos;SCH.18&apos;]) !== &apos;undefined&apos;) {
					var objFillerContactAddress= new Object();
					if (seg[&apos;SCH.18&apos;][&apos;SCH.18.1&apos;].toString() != &quot;&quot;) { objFillerContactAddress.streetAddress= seg[&apos;SCH.18&apos;][&apos;SCH.18.1&apos;].toString(); }
					if (seg[&apos;SCH.18&apos;][&apos;SCH.18.2&apos;].toString() != &quot;&quot;) { objFillerContactAddress.otherDesignation= seg[&apos;SCH.18&apos;][&apos;SCH.18.2&apos;].toString(); }
					if (seg[&apos;SCH.18&apos;][&apos;SCH.18.3&apos;].toString() != &quot;&quot;) { objFillerContactAddress.city= seg[&apos;SCH.18&apos;][&apos;SCH.18.3&apos;].toString(); }
					if (seg[&apos;SCH.18&apos;][&apos;SCH.18.4&apos;].toString() != &quot;&quot;) { objFillerContactAddress.state= seg[&apos;SCH.18&apos;][&apos;SCH.18.4&apos;].toString(); }
					if (seg[&apos;SCH.18&apos;][&apos;SCH.18.5&apos;].toString() != &quot;&quot;) { objFillerContactAddress.postalCode= seg[&apos;SCH.18&apos;][&apos;SCH.18.5&apos;].toString(); }
					if (seg[&apos;SCH.18&apos;][&apos;SCH.18.6&apos;].toString() != &quot;&quot;) { objFillerContactAddress.country= seg[&apos;SCH.18&apos;][&apos;SCH.18.6&apos;].toString(); }
					if (seg[&apos;SCH.18&apos;][&apos;SCH.18.7&apos;].toString() != &quot;&quot;) { objFillerContactAddress.addressType= seg[&apos;SCH.18&apos;][&apos;SCH.18.7&apos;].toString(); }
				
					objSCH.fillerContactAddress= objFillerContactAddress;
				}
				
				// SCH.19, placer contact location
				if(typeof(seg[&apos;SCH.19&apos;]) !== &apos;undefined&apos;) {
					var objFillerContactLocation= new Object();
					if (seg[&apos;SCH.19&apos;][&apos;SCH.19.1&apos;].toString() != &quot;&quot;) { objFillerContactLocation.pointOfCare= seg[&apos;SCH.19&apos;][&apos;SCH.19.1&apos;].toString(); }
					if (seg[&apos;SCH.19&apos;][&apos;SCH.19.2&apos;].toString() != &quot;&quot;) { objFillerContactLocation.room= seg[&apos;SCH.19&apos;][&apos;SCH.19.2&apos;].toString(); }
					if (seg[&apos;SCH.19&apos;][&apos;SCH.19.3&apos;].toString() != &quot;&quot;) { objFillerContactLocation.bed= seg[&apos;SCH.19&apos;][&apos;SCH.19.3&apos;].toString(); }
					if (seg[&apos;SCH.19&apos;][&apos;SCH.19.4&apos;].toString() != &quot;&quot;) { objFillerContactLocation.facility= seg[&apos;SCH.19&apos;][&apos;SCH.19.4&apos;].toString(); }
					if (seg[&apos;SCH.19&apos;][&apos;SCH.19.5&apos;].toString() != &quot;&quot;) { objFillerContactLocation.locationStatus= seg[&apos;SCH.19&apos;][&apos;SCH.19.5&apos;].toString(); }
				
					objSCH.placerContactLocation= objFillerContactLocation;
				}
				
				// SCH.20, entered by person
				if(typeof(seg[&apos;SCH.20&apos;]) !== &apos;undefined&apos;) {
					var objEnteredByPerson= new Object();
					
					if (seg[&apos;SCH.20&apos;][&apos;SCH.20.1&apos;].toString() != &quot;&quot;) { objEnteredByPerson.id= seg[&apos;SCH.20&apos;][&apos;SCH.20.1&apos;].toString(); }
					if (seg[&apos;SCH.20&apos;][&apos;SCH.20.2&apos;].toString() != &quot;&quot;) { objEnteredByPerson.familyName= seg[&apos;SCH.20&apos;][&apos;SCH.20.2&apos;].toString(); }
					if (seg[&apos;SCH.20&apos;][&apos;SCH.20.3&apos;].toString() != &quot;&quot;) { objEnteredByPerson.givenName= seg[&apos;SCH.20&apos;][&apos;SCH.20.3&apos;].toString(); }
					if (seg[&apos;SCH.20&apos;][&apos;SCH.20.4&apos;].toString() != &quot;&quot;) { objEnteredByPerson.middleName= seg[&apos;SCH.20&apos;][&apos;SCH.20.4&apos;].toString(); }
					if (seg[&apos;SCH.20&apos;][&apos;SCH.20.5&apos;].toString() != &quot;&quot;) { objEnteredByPerson.suffix= seg[&apos;SCH.20&apos;][&apos;SCH.20.5&apos;].toString(); }
					if (seg[&apos;SCH.20&apos;][&apos;SCH.20.6&apos;].toString() != &quot;&quot;) { objEnteredByPerson.prefix= seg[&apos;SCH.20&apos;][&apos;SCH.20.6&apos;].toString(); }
					if (seg[&apos;SCH.20&apos;][&apos;SCH.20.7&apos;].toString() != &quot;&quot;) { objEnteredByPerson.degree= seg[&apos;SCH.20&apos;][&apos;SCH.20.7&apos;].toString(); }
					if (seg[&apos;SCH.20&apos;][&apos;SCH.20.8&apos;].toString() != &quot;&quot;) { objEnteredByPerson.sourceTable= seg[&apos;SCH.20&apos;][&apos;SCH.20.8&apos;].toString(); }
					if (seg[&apos;SCH.20&apos;][&apos;SCH.20.9&apos;].toString() != &quot;&quot;) { objEnteredByPerson.assigningAuthority= seg[&apos;SCH.20&apos;][&apos;SCH.20.9&apos;].toString(); }
					
					objSCH.fillerContractPerson= objEnteredByPerson;
				}

				// SCH.21, entered by phone number
				if(typeof(seg[&apos;SCH.21&apos;]) !== &apos;undefined&apos;) {
					var objEnteredByPhoneNumber= new Object();
					if (seg[&apos;SCH.21&apos;][&apos;SCH.21.1&apos;].toString() != &quot;&quot;) { objEnteredByPhoneNumber.telephoneNumber= seg[&apos;SCH.21&apos;][&apos;SCH.21.1&apos;].toString(); }
					if (seg[&apos;SCH.21&apos;][&apos;SCH.21.2&apos;].toString() != &quot;&quot;) { objEnteredByPhoneNumber.useCode= seg[&apos;SCH.21&apos;][&apos;SCH.21.2&apos;].toString(); }
					if (seg[&apos;SCH.21&apos;][&apos;SCH.21.3&apos;].toString() != &quot;&quot;) { objEnteredByPhoneNumber.equipmentType= seg[&apos;SCH.21&apos;][&apos;SCH.21.3&apos;].toString(); }
					if (seg[&apos;SCH.21&apos;][&apos;SCH.21.4&apos;].toString() != &quot;&quot;) { objEnteredByPhoneNumber.emailAddress= seg[&apos;SCH.21&apos;][&apos;SCH.21.4&apos;].toString(); }
					if (seg[&apos;SCH.21&apos;][&apos;SCH.21.5&apos;].toString() != &quot;&quot;) { objEnteredByPhoneNumber.countryCode= seg[&apos;SCH.21&apos;][&apos;SCH.21.5&apos;].toString(); }
					if (seg[&apos;SCH.21&apos;][&apos;SCH.21.6&apos;].toString() != &quot;&quot;) { objEnteredByPhoneNumber.areaCode= seg[&apos;SCH.21&apos;][&apos;SCH.21.6&apos;].toString(); }
					if (seg[&apos;SCH.21&apos;][&apos;SCH.21.6&apos;].toString() != &quot;&quot;) { objEnteredByPhoneNumber.phoneNumber= seg[&apos;SCH.21&apos;][&apos;SCH.21.7&apos;].toString(); }

					objSCH.enteredByPhoneNumber= objEnteredByPhoneNumber;
				}
				
				// SCH.22, entered by location
				if(typeof(seg[&apos;SCH.22&apos;]) !== &apos;undefined&apos;) {
					var objEnteredByLocation= new Object();
					if (seg[&apos;SCH.22&apos;][&apos;SCH.22.1&apos;].toString() != &quot;&quot;) { objEnteredByLocation.streetAddress= seg[&apos;SCH.22&apos;][&apos;SCH.22.1&apos;].toString(); }
					if (seg[&apos;SCH.22&apos;][&apos;SCH.22.2&apos;].toString() != &quot;&quot;) { objEnteredByLocation.otherDesignation= seg[&apos;SCH.22&apos;][&apos;SCH.22.2&apos;].toString(); }
					if (seg[&apos;SCH.22&apos;][&apos;SCH.22.3&apos;].toString() != &quot;&quot;) { objEnteredByLocation.city= seg[&apos;SCH.22&apos;][&apos;SCH.22.3&apos;].toString(); }
					if (seg[&apos;SCH.22&apos;][&apos;SCH.22.4&apos;].toString() != &quot;&quot;) { objEnteredByLocation.state= seg[&apos;SCH.22&apos;][&apos;SCH.22.4&apos;].toString(); }
					if (seg[&apos;SCH.22&apos;][&apos;SCH.22.5&apos;].toString() != &quot;&quot;) { objEnteredByLocation.postalCode= seg[&apos;SCH.22&apos;][&apos;SCH.22.5&apos;].toString(); }
					if (seg[&apos;SCH.22&apos;][&apos;SCH.22.6&apos;].toString() != &quot;&quot;) { objEnteredByLocation.country= seg[&apos;SCH.22&apos;][&apos;SCH.22.6&apos;].toString(); }
					if (seg[&apos;SCH.22&apos;][&apos;SCH.22.7&apos;].toString() != &quot;&quot;) { objEnteredByLocation.addressType= seg[&apos;SCH.22&apos;][&apos;SCH.22.7&apos;].toString(); }
				
					objSCH.placerContactAddress= objEnteredByLocation;
				}
				
				// SCH.23, parent placer appointment id
				if(typeof(seg[&apos;SCH.23&apos;]) !== &apos;undefined&apos;) {
					var objParentPlacerAppointmentId= new Object();
					if (seg[&apos;SCH.23&apos;][&apos;SCH.23.1&apos;].toString() != &quot;&quot;) { objParentPlacerAppointmentId.id= seg[&apos;SCH.23&apos;][&apos;SCH.23.1&apos;].toString(); }
					if (seg[&apos;SCH.23&apos;][&apos;SCH.23.2&apos;].toString() != &quot;&quot;) { objParentPlacerAppointmentId.namespaceId= seg[&apos;SCH.23&apos;][&apos;SCH.23.2&apos;].toString(); }
					if (seg[&apos;SCH.23&apos;][&apos;SCH.23.3&apos;].toString() != &quot;&quot;) { objParentPlacerAppointmentId.universalId= seg[&apos;SCH.23&apos;][&apos;SCH.23.3&apos;].toString(); }
					if (seg[&apos;SCH.23&apos;][&apos;SCH.23.4&apos;].toString() != &quot;&quot;) { objParentPlacerAppointmentId.universalIdType= seg[&apos;SCH.23&apos;][&apos;SCH.23.4&apos;].toString(); }
					
					objSCH.parentPlacerAppointmentId= objParentPlacerAppointmentId;
				}
				
				// SCH.24, parent filler appointment id
				if(typeof(seg[&apos;SCH.24&apos;]) !== &apos;undefined&apos;) {
					var objParentFillerAppointmentId= new Object();
					if (seg[&apos;SCH.24&apos;][&apos;SCH.24.1&apos;].toString() != &quot;&quot;) { objParentFillerAppointmentId.id= seg[&apos;SCH.24&apos;][&apos;SCH.24.1&apos;].toString(); }
					if (seg[&apos;SCH.24&apos;][&apos;SCH.24.2&apos;].toString() != &quot;&quot;) { objParentFillerAppointmentId.namespaceId= seg[&apos;SCH.24&apos;][&apos;SCH.24.2&apos;].toString(); }
					if (seg[&apos;SCH.24&apos;][&apos;SCH.24.3&apos;].toString() != &quot;&quot;) { objParentFillerAppointmentId.universalId= seg[&apos;SCH.24&apos;][&apos;SCH.24.3&apos;].toString(); }
					if (seg[&apos;SCH.24&apos;][&apos;SCH.24.4&apos;].toString() != &quot;&quot;) { objParentFillerAppointmentId.universalIdType= seg[&apos;SCH.24&apos;][&apos;SCH.24.4&apos;].toString(); }
					
					objSCH.parentFillerAppointmentId= objParentFillerAppointmentId;
				}
				
				// SCH.25, filler status code
				if(typeof(seg[&apos;SCH.25&apos;]) !== &apos;undefined&apos;) {
					var objFillerStatusCode= new Object();
					if (seg[&apos;SCH.25&apos;][&apos;SCH.25.1&apos;].toString() != &quot;&quot;) { objFillerStatusCode.id= seg[&apos;SCH.25&apos;][&apos;SCH.25.1&apos;].toString(); }
					if (seg[&apos;SCH.25&apos;][&apos;SCH.25.2&apos;].toString() != &quot;&quot;) { objFillerStatusCode.text= seg[&apos;SCH.25&apos;][&apos;SCH.25.2&apos;].toString(); }
					if (seg[&apos;SCH.25&apos;][&apos;SCH.25.3&apos;].toString() != &quot;&quot;) { objFillerStatusCode.codeSystem= seg[&apos;SCH.25&apos;][&apos;SCH.25.3&apos;].toString(); }
					if (seg[&apos;SCH.25&apos;][&apos;SCH.25.4&apos;].toString() != &quot;&quot;) { objFillerStatusCode.alternateId= seg[&apos;SCH.25&apos;][&apos;SCH.25.4&apos;].toString(); }
					if (seg[&apos;SCH.25&apos;][&apos;SCH.25.5&apos;].toString() != &quot;&quot;) { objFillerStatusCode.alternateText= seg[&apos;SCH.25&apos;][&apos;SCH.25.5&apos;].toString(); }
					if (seg[&apos;SCH.25&apos;][&apos;SCH.25.6&apos;].toString() != &quot;&quot;) { objFillerStatusCode.altCodeSystem= seg[&apos;SCH.25&apos;][&apos;SCH.25.6&apos;].toString(); }

					objSCH.fillerStatusCode= objFillerStatusCode;
				}
				
				/*
				// clean up SCH and increment index
				if (Object.keys(objSCH[index]).length == 0) {
					delete objSCH[index];
				} else {
					index++;
				}
				*/
				
			}
		}
		
		return objSCH;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
            <name>WebPT-Common</name>
            <revision>2</revision>
            <lastModified>
              <time>1678715257049</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
                <name>Check if String contains</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122790</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
                <name>Check if String contains HTTP code</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122593</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>8515e088-5c50-47ee-9e2f-9fad1ecf48bd</id>
                <name>Check if String is JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123309</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Added by Kirby Knight
	12/21/2020
	Test for JSON

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5f2f84ba-3e66-4be3-8260-8fbd8258bd92</id>
                <name>Check if the PDF is valid</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122055</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
//This function is used for checking the word &quot;PDF&quot; in inbound attachment.
function isValidBase64PDF(base64) {
	const ENCODED_PDF_SIGN = &quot;JVBERi&quot;; // %PDF sign
	const PDF_EOF = &quot;JSVFT0YNCg&quot;; // %EOF
	var pdfBase64Size = (base64.length() * (3 / 4)) - 1;
	
	return (base64.indexOf(ENCODED_PDF_SIGN) != -1 &amp;&amp; base64.indexOf(PDF_EOF) != -1 &amp;&amp; pdf_base64_size &gt; 36);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
                <name>Convert JSON date to HL7v2 date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122137</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
                <name>Convert JSON datetime to HL7v2 datetime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122430</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>bb21449a-df39-48c6-be52-24106c8df4c4</id>
                <name>Destination Formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Kirby Knight 03/10/2021
	
	This function will remove all other ROOT.Meta.Destinations nodes that are not passed in the
	destination variable and removes the ROOT.Meta.Destinations[x].Destination node

	@param {Any} destination - 
	@return {String} return description
*/
function formatDestinations(destination) {
var arrDestinations = msg[&apos;Meta&apos;][&apos;Destinations&apos;];
	//  Start at the end of the array because of the posibility of deleted array items 
	for (var i = arrDestinations.length - 1; i &gt;= 0; i--) {
		if (arrDestinations[i][&apos;Destination&apos;] == destination){
			delete arrDestinations[i][&apos;Destination&apos;]
		}else if (arrDestinations[i][&apos;Destination&apos;] != destination){
			arrDestinations.splice(i, 1);
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
                <name>Extract JSON node data</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121748</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7ed44f8a-fa40-4f3e-9426-3021604eabe0</id>
                <name>Get Feature Value by Name and Database</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123262</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns a string containing the feature value (system property) for a specific client database.

	@param {String} featureName - name of the feature, ie: &quot;BetterPTBidirectionalScheduling&quot;
	@param {String} databaseIdentifier - database name or databaseID / TenantID
	@param {String} databaseIdentifierType - what value is provided in databaseIdentifier. current options include &quot;ID&quot; or &quot;NAME&quot;
	@return {String} returns feature value
*/
function getFeatureValueByNameDatabase(featureName, databaseIdentifier, databaseIdentifierType) {
	var paramList = new Packages.java.util.ArrayList();
	paramList.add(featureName);
	paramList.add(databaseIdentifier);
	paramList.add(databaseIdentifierType);
	
	var sSQL = &apos;EXEC [dbo].[pr_FeatureValueByNameDatabase] ?, ?, ?&apos;;
	
	try {
		var result = executeSharedDBStatementFhirCh(sSQL, true, paramList);
		var featureValue ;
		if(result.next()){			//Added
		 featureValue = result.getString(1);
		}
		return featureValue;
	} catch (e) {
		logger.error(e);
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>9842be2c-c633-42ac-87f1-f91aca9e370f</id>
                <name>JSON Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121776</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function populates the MR and PI patient IDS to channelMap

	@return {String} return description
*/
function jsonPatientIds() {
	for each (patId in msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) {
	if (patId[&apos;IDType&apos;].toString() == &apos;MR&apos;){
		channelMap.put(&apos;extPatId&apos;, patId[&apos;ID&apos;].toString());
	}else if(patId[&apos;IDType&apos;].toString() == &apos;PI&apos;){
		channelMap.put(&apos;patId&apos;, patId[&apos;ID&apos;].toString());
	}
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
                <name>Verify JSON node for existance</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>394664c0-d536-4310-970e-181dc03ee7da</id>
            <name>WebPT-Conversions</name>
            <revision>2</revision>
            <lastModified>
              <time>1690140133427</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
                <name>Convert FHIR codes to HL7v2 codes</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122899</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>2fc8cbf3-0d92-4d1d-a3d6-136c09bd9f2a</id>
            <name>WebPT-Custom Database Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1703964939898</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>23c0b510-63e4-40fa-a4e1-7b2b92ce9a96</id>
                <name>Execute Statement Shared DB Conn clientDb Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122401</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Executes a SQL statement using a shared database connection stored in the Global Map. If the
connection does not exist, creates it.

@param {String} statement - The SQL statement to execute
@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
@param {List} paramList - A Java List object containing the parameters for the statement (optional)
 */
function executeSharedDBStatementclientDbCh(statement, isQuery, paramList) {
    var result;

    try {
        var dbConnclientDbCh = globalChannelMap.get(&quot;dbConnclientDbCh&quot;);

        if (dbConnclientDbCh == null || dbConnclientDbCh.getConnection().isClosed()) {
            dbConnclientDbCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;), $(&apos;dbClient&apos;), $(&apos;dbUserFhir&apos;), $(&apos;dbPwFhir&apos;));
            globalChannelMap.put(&quot;dbConnclientDbCh&quot;, dbConnclientDbCh);
        }

        if (paramList == undefined) {
            paramList = new Packages.java.util.ArrayList();
        }

        if (isQuery) {
            result = dbConnclientDbCh.executeCachedQuery(statement, paramList);
        } else {
            result = dbConnclientDbCh.executeUpdate(statement, paramList);
        }
    } catch (e) {
        logger.error(e);
    }
    finally {
        return result;
    }
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>4efb3110-a83f-48b5-93ad-79c847b51865</id>
                <name>Execute Statement Shared DB Conn clntAcl Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123455</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClntAclCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnClntAclCh = globalChannelMap.get(&quot;dbConnClntAclCh&quot;);

		if (dbConnClntAclCh == null || dbConnClntAclCh.getConnection().isClosed())
		{
			dbConnClntAclCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbClntAcl&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnClntAclCh&quot;, dbConnClntAclCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnClntAclCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnClntAclCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>d96d45dd-57f7-4aa9-9bf4-e464d31b94c6</id>
                <name>Execute Statement Shared DB Conn FHIR</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121922</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhir(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhir.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhir.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6014068e-c021-4a38-9fa6-6f38f6a2cdab</id>
                <name>Execute Statement Shared DB Conn FHIR Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123492</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhirCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhirCh = globalChannelMap.get(&quot;dbConnFhirCh&quot;);

		if (dbConnFhirCh == null || dbConnFhirCh.getConnection().isClosed())
		{
			dbConnFhirCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnFhirCh&quot;, dbConnFhirCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhirCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhirCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fbd5c4a1-b816-4496-acdf-067005f1d376</id>
                <name>Execute Statement Shared DB Conn Translations Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123008</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementTranslationsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnTranslationsCh = globalChannelMap.get(&quot;dbConnTranslationsCh&quot;);

		if (dbConnTranslationsCh == null || dbConnTranslationsCh.getConnection().isClosed())
		{
			dbConnTranslationsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlTranslations&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnTranslationsCh&quot;, dbConnTranslationsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnTranslationsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnTranslationsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5d1a5577-4ba4-4d1e-b6cd-e2d924164909</id>
                <name>Execute Statement with Shared DB Conn ODS Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122280</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdsCh = globalChannelMap.get(&quot;dbConnOdsCh&quot;);

		if (dbConnOdsCh == null || dbConnOdsCh.getConnection().isClosed())
		{
			dbConnOdsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOds&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdsCh&quot;, dbConnOdsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>3991db14-0c0b-4123-952c-5164c1ded501</id>
                <name>Execute Statement with Shared DB Conn ODW Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122960</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.  THis connects to the ODW db in Azure

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdwCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdwCh = globalChannelMap.get(&quot;dbConnOdwCh&quot;);

		if (dbConnOdwCh == null || dbConnOdwCh.getConnection().isClosed())
		{
			dbConnOdwCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOdw&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdwCh&quot;, dbConnOdwCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdwCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdwCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fae08c88-7550-479a-b8ed-ffef47e8eed9</id>
                <name>executeSharedDBStatementClient</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121956</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClient(statement, isQuery, paramList, dbname)
{
	var result;
 	var dburl= &apos;jdbc:sqlserver://AZW1DEV-SQL02.clinicient.com:1433;databaseName=&apos;+dbname+&apos;&apos;;
	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),dburl,$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			
			//globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		result = dbConnFhir.executeCachedQuery(statement);
	
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>ed20a457-5beb-4aea-9bb9-cf91112ccc56</id>
            <name>WebPT-Default Functions</name>
            <revision>10</revision>
            <lastModified>
              <time>1690140133487</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>a8a9a0c8-9322-46dc-bef8-011eb3d70291</id>
                <name>Create Header for CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121678</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This creates a header for csv files based on the contents of the header variable.  The header
	variable is populated in the channel from the outbound msg template

	@return {String} return description
*/
function createHeader() {
	//Destination transformer.  this creates the header for each new file

	var path = java.nio.file.Paths.get($(&apos;filePath&apos;)+$(&apos;fileName&apos;));
	var bytes = (new java.lang.String($(&apos;header&apos;))).getBytes(&quot;UTF-8&quot;);
	try {
	  java.nio.file.Files.write(path, bytes, java.nio.file.StandardOpenOption.CREATE_NEW);
	}
	catch (e) {
	  //logger.info(&quot; should throw IOException if file already exists&quot;);
	
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5a886a1f-dab1-41b5-94c6-1a639907d7da</id>
                <name>Filter Message Evaluate Received Checksum</name>
                <revision>33</revision>
                <lastModified>
                  <time>1678916806664</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating a checksum for each provided message.  We save off the most recent 100 unique checksum values in a global 
	array so if the current message has been recently received we are able to ignore it.
	
	@author:  	Jeffrey Ritz
	@scriptName: 	filterEvaluateReceivedChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {boolean} filter - return filter boolean (true= filter msg, false= do not filter msg)
		persist received_checksum global ChannelMap array
		persist filterMessage ChannelMap variable
	@history
*/
function filterEvaluateReceivedChecksum(msg) {	

	var scriptName= &apos;filterEvaluateReceivedChecksum&apos;
	var filter = false;
	var received_len_limit = 999;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B connectorMessage.getRawData() typeof: &apos;+typeof(connectorMessage.getRawData())+&apos; msg: &apos;+connectorMessage.getRawData());
	} // end if 
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	// var dataBytes = new java.lang.String(connectorMessage.getRawData()).getBytes(&apos;UTF-8&apos;);
	// message = new String(message.getBytes(&quot;utf-8&quot;), &quot;utf-8&quot;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	// var dataBytes = new java.lang.String(msg.getBytes(&apos;UTF-8&apos;));
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);

	// var messageObjectgetBytes= checksum.update(connectorMessage.getRawData().getBytes());
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 
	
	$c(&apos;checksum&apos;, checksum.getValue());
	
	//grab the global channel map variable holding the last X unique checksums that we&apos;ve received
	var received = $gc(&apos;received_checksums&apos;);
	
	if (received == undefined) {
		var received = new Array();
		received.push(checksum.getValue());
	} else {
		//check if we&apos;ve recently received this message, skip it if so
		if (received.indexOf(checksum.getValue()) &gt; -1) {
			filter = true;
		//we haven&apos;t seen it recently, so remember it and allow it through
		} else {
			var received_len = received.length;
			if (received_len &gt; received_len_limit) {
				//remove oldest/first entry, shift all entries forward, and add new entry to end
				received.shift();
				received[received_len_limit] = checksum.getValue();
			} else {
				//add new entry to end of array
				received[received_len] = checksum.getValue();
			} // end if 
		} // end if 
	} // end if 

	 //debug code
	/*for (x=0; x&lt;=received_len_limit; x++) {
		$c(&apos;received-&apos;+x, received[x]);
	} */

	$c(&apos;filterMessage&apos;,filter);
	$gc(&apos;received_checksums&apos;,received);

	return filter;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fbd0484d-74a2-48e4-aedd-f97c2fcefa16</id>
                <name>Get Message Checksum</name>
                <revision>12</revision>
                <lastModified>
                  <time>1678916806703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating and reutrning a checksum for each provided message
	
	@author:  	Jeffrey Ritz
	@scriptName: 	getMessageChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {object} result - return checksum value
	@history
	2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() to remove the exponential representation of the number value
*/
function getMessageChecksum(msg) {	

	var scriptName= &apos;getMessageChecksum&apos;;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	} // end if 
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 

	var checksumValue= checksum.getValue();
	// 2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() 
	var arrChecksumValue= new Array(); 
	arrChecksumValue.push(checksumValue);
	$c(&apos;checksum&apos;, arrChecksumValue);

	return checksumValue;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>91db9bd1-ca92-4dcc-bba4-e1ece603fc87</id>
                <name>Remove Child Object From Parent Object Json</name>
                <revision>22</revision>
                <lastModified>
                  <time>1678916845037</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON child object and it&apos;s descendents from a parent object JSON
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeChildObjectFromParentObjectJson.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
		{string} parentObject - place the name of the string to be designated as the parent object in the JSON
		{string} childObject  - place the name of the string to be designated as the child object to be deleted from the JSON
	@param {object} msg - return modified Json object msg excluding specified Json child object
	@history
*/
function removeChildObjectFromParentObjectJson(msg, parentObject, childObject) {
	
	var scriptName= &apos;removeChildObjectFromParentObjectJson&apos;;
	var debug= 0;

	//var strObjJson= JSON.parse(msg);
	var strObjJson= JSON.stringify(msg);
	
	//var objJson= JSON.parse(msg);
	var newParentObjects= new Object();
	var parentObjects= msg;
	var arrParentObjects= new Array();
	var arrTransactionObjects= new Array();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof parentObjects: &apos;+typeof(parentObjects));
	for (var key in parentObjects) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof key: &apos;+typeof(key)+&apos; key: &apos;+key);
		if(key== parentObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof objJson[key]: &apos;+typeof(parentObjects[key])+&apos; parentObjects[key]: &apos;+JSON.stringify(parentObjects[key]));
			
			var newChildObjects= new Object();
			var childObjects= parentObjects[key];
			var arrChildObjects= new Array();
			
			for(var key2 in childObjects) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key2: &apos;+typeof(key2)+&apos; key2: &apos;+key2+&apos; childObject: &apos;+childObject);
				for(var key3 in childObjects[key2]) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key3: &apos;+typeof(key3)+&apos; key3: &apos;+key3+&apos; childObject: &apos;+childObject);
					if(key3== childObject) {
						var transactionObject= new Object();
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; childObject typeof: &apos;+typeof(childObjects[key2][key3])+&apos; childObject: &apos;+JSON.stringify(childObjects[key2][key3]));
						transactionObject.key= key3;
						transactionObject.value= childObjects[key2][key3];
						delete childObjects[key2][key3];
						if(debug&gt;0) logger.info(&apos;DEBUG::&apos;+scriptName+&apos; DELETE childObject: &apos;+key3+&apos; of parentObject: &apos;+JSON.stringify(childObjects[key2]));
						arrTransactionObjects.push(transactionObject);
					} // end if
				} // end for 
				arrChildObjects.push(childObjects[key2]);
			} // end for
			newParentObjects[key]= arrChildObjects;
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add all child keys: &apos;+JSON.stringify(arrChildObjects)+&apos; into ParentObject[&apos;+key+&apos;]: &apos;+newParentObjects[key]);
		} else {
			newParentObjects[key]= parentObjects[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+parentObjects[key]+&apos; string: &apos;+JSON.stringify(parentObjects[key]));
		} // end if
		arrParentObjects.push(newParentObjects);
	} // end for 
	var newMsg= arrParentObjects;
	channelMap.put(&apos;removeChildObjectMsg&apos;,newMsg);
	channelMap.put(&apos;removedChildTransIds&apos;,arrTransactionObjects);
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));
	return newMsg;
	
} </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2ff28338-dfb6-445d-a04e-c74b5486a08c</id>
                <name>Remove Object From Json</name>
                <revision>26</revision>
                <lastModified>
                  <time>1703964988318</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  Desc: This function will remove a JSON object and it&apos;s descendents from the msg
	
	fileName: 	removeObjectFromJson.js
	name:		Remove Object From Json	
	Authored:  	Jeffrey Ritz
	Created: 		2023-03-09
	Details:
		@param IN {string} msg - provide parent JSON object (i.e. Inbound connectorMessage.getRawData() - msg)
		@param IN {string} removeObject - provide JSON object to evaluate and remove from parent JSON object (msg)
		OUT (object) newMsg - return JSON object from processing
	@history
	2023-03-15 JER - Modified to include removeObject function parameter to specify specific JSON object by referencing key to be removed
*/
function removeObjectFromJson(msg, removeObject) {
	
	var scriptName= &apos;removeObjectFromJson&apos;;
	var debug= 0;
	//var objJson= JSON.stringify(msg);
	var objJson= JSON.parse(msg);
	var newObjJson= new Object();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof objJson: &apos;+typeof(objJson)+&apos; objJSON: &apos;+JSON.stringify(objJson));
	for (var key in objJson) {
		if(key== removeObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; DELETE key: &apos;+key);
			// delete objJson[key];
		} else {
			newObjJson[key]= objJson[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+objJson[key]+&apos; string: &apos;+JSON.stringify(objJson[key]));
		} // end if 
	} // end for 
	var newMsg= newObjJson;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));

	// return JSON.stringify(newMsg);
	return newMsg;
} 
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>993a6fd8-454a-4133-ba32-dbcfea71582b</id>
                <name>Update EDITransactionLog</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123233</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	The purpose of this function is to update the status in Insight.
	Populate the channel map with the following variables functionalGroupControlNumber, status, eventDate

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateStatus () {

	//  Build the llst of paramters to pass to the database
	var paramList = new Packages.java.util.ArrayList();
	paramList.add($(&apos;functionalGroupControlNumber&apos;));
	paramList.add($(&apos;eventDate&apos;));  //dateTime in the acknoledged field in this format (&quot;2017-07-31 14:15:01.577&quot;)
	paramList.add(new java.lang.Integer(parseInt($(&apos;status&apos;), 10)));
	
//	logger.info(&quot;updateStatus &quot;+paramList);

	//  SQL Statement and paramters that will be sent to SQL
	var statement = &quot;EXEC dbo.pr_EDITransactionLog_Update ?, ?, ?&quot;;
	//  Code template used for establishiing connection and passing the sql statement and parameter list  
	var result = executeSharedDBStatementFhirCh(statement, false, paramList);
	return result;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>42cb290e-5fb0-46b8-82db-576ea1e1ba0d</id>
                <name>Update EDITransactionLog from responseStatus in the response transformer </name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123356</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Call this in the response transformer on the destination.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateReponseStatus() {
	var status = 0;
	if (responseStatus == SENT){
		var status = 1;
		channelMap.put(&apos;status&apos;,status);
	}

updateStatus()
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2223579b-f914-4be7-a575-f1a2a2aa1ae2</id>
                <name>ValidateToString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123044</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} mapping - 
	@param {Any} defaultValue - 
	@param {Any} replacement - 
	@return {String} return description
*/
function validateToString(mapping, defaultValue, replacement) {
    if (mapping == null) {
        mapping = &apos;&apos;;
    }
    return validate(mapping, defaultValue, replacement).toString() + &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>8c9a8268-4ef0-43e9-ae5b-bf8895f0b80c</id>
            <name>WebPT-FORMAT</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939902</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>Include any functions or codes with 
-date &amp; time formating related
-data type formatting</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>920c9ead-70a6-4168-9d95-89261b73ae44</id>
                <name>12digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123520</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Take any 12 digit string yyyyMMddHHmm and change to MM/dd/yyyy HH:mm 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm
*/
function yyyyMMddHHmm(string) {
	return DateUtil.convertDate(&quot;yyyyMMddHHmm&quot;, &quot;MM/dd/yyyy HH:mm&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fe2689ec-1946-46d5-8dd6-8fbbf106e1e6</id>
                <name>14digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122871</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Take 14 digit string yyyyMMddHHmmss and change to MM/dd/yyyy HH:mm:ss 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm:ss
*/
function yyyyMMddHHmmss(string) {
	if (string.length == 14) {
		  return DateUtil.convertDate(&quot;yyyyMMddHHmmss&quot;, &quot;MM/dd/yyyy HH:mm:ss&quot;, string);
	}
	else {
		return &quot;unregcognized string&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>b9db35e2-d5bd-48a1-8cc6-3475c698d7b4</id>
                <name>currentDT_yyyy-MM-dd HH:mm:ss.SSS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123114</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Kirby Knight
	Date Modified:  11/09/2020
	Retund the current date/time down to the millisecond

	@return {String} return description
*/
function currentDtToMilliseconds() {
	return DateUtil.getCurrentDate(&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7e747999-4bec-43fc-978d-7049d3543cf0</id>
                <name>fixHL7NodeOrder</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/

function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>dfedacf6-773b-413e-b78d-1bf16a92071d</id>
                <name>formatHL7Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121643</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Take any eight digit HL7 message data string (yyyyMMdd) and formats it human-readable format (MM/dd/yyyy)
	such as 20090612 -&gt; 06/12/2009

	@param {String} arg1 - 8 digit HL7 message data string yyyyMMdd
	@return {String} return date format as MM/dd/yyyy
*/
function formatHL7Date(string) {
	return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;MM/dd/yyyy&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>a8f54921-2cb6-4134-8806-3c4e10a757d9</id>
                <name>getCurrentLocalTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122014</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = getCurrentLocalTimestamp();

	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestamp() {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(&quot;EST&quot;)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6c5f1bd8-ebbf-4c8e-b465-0be8ccaba0d0</id>
                <name>getCurrentLocalTimeToMs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123077</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	Gets the current local date/time to the milliseconds
	Converts to the timezone that is passed in Examples (America/New_York, America/Chicago, America/Phoenix )

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestampToMs(timeZone) {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timeZone)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>78d74c5b-c881-404a-ad96-4e909e1a19f3</id>
                <name>phoneToE164</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121982</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Insight phone number to E164 format 5554446666 to +15554446666

	@param {Any} phoneIn - 
	@return {String} return description
*/
function phoneToE164(phoneIn) {
	logger.info(&apos;L1 &apos;+phoneIn);
	if(phoneIn != null ){
	//phoneIn = &apos;+1&apos; + phoneIn.toString(); 
	logger.info(&apos;L2 &apos;+phoneIn);
	return &apos;+1&apos; + phoneIn.toString(); 
	} else{
		return null;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>6a32d94d-408c-4e10-9799-e45e150b5c1f</id>
            <name>WebPT-MISC</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939909</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>miscellaneous javascript</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>84b4f1c7-f82d-4140-9fbd-98a95f68ff32</id>
                <name>getChannelState</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122648</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetChannelState(channel_id) {

    var channel_status = &quot;NA&quot;;

    var channel_count = parseInt(Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().size());

    for(var i=0;i&lt;channel_count;i++) {
        if (channel_id == Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getChannelId()) {
            channel_status = Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getState();
        }
    }

    return channel_status;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>715435a9-cb15-4e8f-bc5b-4249eaea6e17</id>
                <name>momentjs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122487</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Testing MIRTH-3794 using external JavaScript library &quot;moment.js&quot;
*/
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=b():&quot;function&quot;==typeof define&amp;&amp;define.amd?define(b):a.moment=b()}(this,function(){&quot;use strict&quot;;function a(){return Hc.apply(null,arguments)}function b(a){Hc=a}function c(a){return&quot;[object Array]&quot;===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||&quot;[object Date]&quot;===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c&lt;a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&amp;&amp;(a[c]=b[c]);return f(b,&quot;toString&quot;)&amp;&amp;(a.toString=b.toString),f(b,&quot;valueOf&quot;)&amp;&amp;(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ca(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&amp;&amp;(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow&lt;0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&amp;&amp;(a._isValid=a._isValid&amp;&amp;0===b.charsLeftOver&amp;&amp;0===b.unusedTokens.length&amp;&amp;void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if(&quot;undefined&quot;!=typeof b._isAMomentObject&amp;&amp;(a._isAMomentObject=b._isAMomentObject),&quot;undefined&quot;!=typeof b._i&amp;&amp;(a._i=b._i),&quot;undefined&quot;!=typeof b._f&amp;&amp;(a._f=b._f),&quot;undefined&quot;!=typeof b._l&amp;&amp;(a._l=b._l),&quot;undefined&quot;!=typeof b._strict&amp;&amp;(a._strict=b._strict),&quot;undefined&quot;!=typeof b._tzm&amp;&amp;(a._tzm=b._tzm),&quot;undefined&quot;!=typeof b._isUTC&amp;&amp;(a._isUTC=b._isUTC),&quot;undefined&quot;!=typeof b._offset&amp;&amp;(a._offset=b._offset),&quot;undefined&quot;!=typeof b._pf&amp;&amp;(a._pf=j(b)),&quot;undefined&quot;!=typeof b._locale&amp;&amp;(a._locale=b._locale),Jc.length&gt;0)for(c in Jc)d=Jc[c],e=b[d],&quot;undefined&quot;!=typeof e&amp;&amp;(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),Kc===!1&amp;&amp;(Kc=!0,a.updateOffset(this),Kc=!1)}function o(a){return a instanceof n||null!=a&amp;&amp;null!=a._isAMomentObject}function p(a){return 0&gt;a?Math.ceil(a):Math.floor(a)}function q(a){var b=+a,c=0;return 0!==b&amp;&amp;isFinite(b)&amp;&amp;(c=p(b)),c}function r(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e&gt;d;d++)(c&amp;&amp;a[d]!==b[d]||!c&amp;&amp;q(a[d])!==q(b[d]))&amp;&amp;g++;return g+f}function s(){}function t(a){return a?a.toLowerCase().replace(&quot;_&quot;,&quot;-&quot;):a}function u(a){for(var b,c,d,e,f=0;f&lt;a.length;){for(e=t(a[f]).split(&quot;-&quot;),b=e.length,c=t(a[f+1]),c=c?c.split(&quot;-&quot;):null;b&gt;0;){if(d=v(e.slice(0,b).join(&quot;-&quot;)))return d;if(c&amp;&amp;c.length&gt;=b&amp;&amp;r(e,c,!0)&gt;=b-1)break;b--}f++}return null}function v(a){var b=null;if(!Lc[a]&amp;&amp;&quot;undefined&quot;!=typeof module&amp;&amp;module&amp;&amp;module.exports)try{b=Ic._abbr,require(&quot;./locale/&quot;+a),w(b)}catch(c){}return Lc[a]}function w(a,b){var c;return a&amp;&amp;(c=&quot;undefined&quot;==typeof b?y(a):x(a,b),c&amp;&amp;(Ic=c)),Ic._abbr}function x(a,b){return null!==b?(b.abbr=a,Lc[a]=Lc[a]||new s,Lc[a].set(b),w(a),Lc[a]):(delete Lc[a],null)}function y(a){var b;if(a&amp;&amp;a._locale&amp;&amp;a._locale._abbr&amp;&amp;(a=a._locale._abbr),!a)return Ic;if(!c(a)){if(b=v(a))return b;a=[a]}return u(a)}function z(a,b){var c=a.toLowerCase();Mc[c]=Mc[c+&quot;s&quot;]=Mc[b]=a}function A(a){return&quot;string&quot;==typeof a?Mc[a]||Mc[a.toLowerCase()]:void 0}function B(a){var b,c,d={};for(c in a)f(a,c)&amp;&amp;(b=A(c),b&amp;&amp;(d[b]=a[c]));return d}function C(b,c){return function(d){return null!=d?(E(this,b,d),a.updateOffset(this,c),this):D(this,b)}}function D(a,b){return a._d[&quot;get&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b]()}function E(a,b,c){return a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b](c)}function F(a,b){var c;if(&quot;object&quot;==typeof a)for(c in a)this.set(c,a[c]);else if(a=A(a),&quot;function&quot;==typeof this[a])return this[a](b);return this}function G(a,b,c){var d=&quot;&quot;+Math.abs(a),e=b-d.length,f=a&gt;=0;return(f?c?&quot;+&quot;:&quot;&quot;:&quot;-&quot;)+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function H(a,b,c,d){var e=d;&quot;string&quot;==typeof d&amp;&amp;(e=function(){return this[d]()}),a&amp;&amp;(Qc[a]=e),b&amp;&amp;(Qc[b[0]]=function(){return G(e.apply(this,arguments),b[1],b[2])}),c&amp;&amp;(Qc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function I(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,&quot;&quot;):a.replace(/\\/g,&quot;&quot;)}function J(a){var b,c,d=a.match(Nc);for(b=0,c=d.length;c&gt;b;b++)Qc[d[b]]?d[b]=Qc[d[b]]:d[b]=I(d[b]);return function(e){var f=&quot;&quot;;for(b=0;c&gt;b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function K(a,b){return a.isValid()?(b=L(b,a.localeData()),Pc[b]=Pc[b]||J(b),Pc[b](a)):a.localeData().invalidDate()}function L(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Oc.lastIndex=0;d&gt;=0&amp;&amp;Oc.test(a);)a=a.replace(Oc,c),Oc.lastIndex=0,d-=1;return a}function M(a){return&quot;function&quot;==typeof a&amp;&amp;&quot;[object Function]&quot;===Object.prototype.toString.call(a)}function N(a,b,c){dd[a]=M(b)?b:function(a){return a&amp;&amp;c?c:b}}function O(a,b){return f(dd,a)?dd[a](b._strict,b._locale):new RegExp(P(a))}function P(a){return a.replace(&quot;\\&quot;,&quot;&quot;).replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,&quot;\\$&amp;&quot;)}function Q(a,b){var c,d=b;for(&quot;string&quot;==typeof a&amp;&amp;(a=[a]),&quot;number&quot;==typeof b&amp;&amp;(d=function(a,c){c[b]=q(a)}),c=0;c&lt;a.length;c++)ed[a[c]]=d}function R(a,b){Q(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function S(a,b,c){null!=b&amp;&amp;f(ed,a)&amp;&amp;ed[a](b,c._a,c,a)}function T(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function U(a){return this._months[a.month()]}function V(a){return this._monthsShort[a.month()]}function W(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12&gt;d;d++){if(e=h([2e3,d]),c&amp;&amp;!this._longMonthsParse[d]&amp;&amp;(this._longMonthsParse[d]=new RegExp(&quot;^&quot;+this.months(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;),this._shortMonthsParse[d]=new RegExp(&quot;^&quot;+this.monthsShort(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;)),c||this._monthsParse[d]||(f=&quot;^&quot;+this.months(e,&quot;&quot;)+&quot;|^&quot;+this.monthsShort(e,&quot;&quot;),this._monthsParse[d]=new RegExp(f.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),c&amp;&amp;&quot;MMMM&quot;===b&amp;&amp;this._longMonthsParse[d].test(a))return d;if(c&amp;&amp;&quot;MMM&quot;===b&amp;&amp;this._shortMonthsParse[d].test(a))return d;if(!c&amp;&amp;this._monthsParse[d].test(a))return d}}function X(a,b){var c;return&quot;string&quot;==typeof b&amp;&amp;(b=a.localeData().monthsParse(b),&quot;number&quot;!=typeof b)?a:(c=Math.min(a.date(),T(a.year(),b)),a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+&quot;Month&quot;](b,c),a)}function Y(b){return null!=b?(X(this,b),a.updateOffset(this,!0),this):D(this,&quot;Month&quot;)}function Z(){return T(this.year(),this.month())}function $(a){var b,c=a._a;return c&amp;&amp;-2===j(a).overflow&amp;&amp;(b=c[gd]&lt;0||c[gd]&gt;11?gd:c[hd]&lt;1||c[hd]&gt;T(c[fd],c[gd])?hd:c[id]&lt;0||c[id]&gt;24||24===c[id]&amp;&amp;(0!==c[jd]||0!==c[kd]||0!==c[ld])?id:c[jd]&lt;0||c[jd]&gt;59?jd:c[kd]&lt;0||c[kd]&gt;59?kd:c[ld]&lt;0||c[ld]&gt;999?ld:-1,j(a)._overflowDayOfYear&amp;&amp;(fd&gt;b||b&gt;hd)&amp;&amp;(b=hd),j(a).overflow=b),a}function _(b){a.suppressDeprecationWarnings===!1&amp;&amp;&quot;undefined&quot;!=typeof console&amp;&amp;console.warn&amp;&amp;console.warn(&quot;Deprecation warning: &quot;+b)}function aa(a,b){var c=!0;return g(function(){return c&amp;&amp;(_(a+&quot;\n&quot;+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function ba(a,b){od[a]||(_(b),od[a]=!0)}function ca(a){var b,c,d=a._i,e=pd.exec(d);if(e){for(j(a).iso=!0,b=0,c=qd.length;c&gt;b;b++)if(qd[b][1].exec(d)){a._f=qd[b][0];break}for(b=0,c=rd.length;c&gt;b;b++)if(rd[b][1].exec(d)){a._f+=(e[6]||&quot; &quot;)+rd[b][0];break}d.match(ad)&amp;&amp;(a._f+=&quot;Z&quot;),va(a)}else a._isValid=!1}function da(b){var c=sd.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ca(b),void(b._isValid===!1&amp;&amp;(delete b._isValid,a.createFromInputFallback(b))))}function ea(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970&gt;a&amp;&amp;h.setFullYear(a),h}function fa(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970&gt;a&amp;&amp;b.setUTCFullYear(a),b}function ga(a){return ha(a)?366:365}function ha(a){return a%4===0&amp;&amp;a%100!==0||a%400===0}function ia(){return ha(this.year())}function ja(a,b,c){var d,e=c-b,f=c-a.day();return f&gt;e&amp;&amp;(f-=7),e-7&gt;f&amp;&amp;(f+=7),d=Da(a).add(f,&quot;d&quot;),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ka(a){return ja(a,this._week.dow,this._week.doy).week}function la(){return this._week.dow}function ma(){return this._week.doy}function na(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function oa(a){var b=ja(this,1,4).week;return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function pa(a,b,c,d,e){var f,g=6+e-d,h=fa(a,0,1+g),i=h.getUTCDay();return e&gt;i&amp;&amp;(i+=7),c=null!=c?1*c:e,f=1+g+7*(b-1)-i+c,{year:f&gt;0?a:a-1,dayOfYear:f&gt;0?f:ga(a-1)+f}}function qa(a){var b=Math.round((this.clone().startOf(&quot;day&quot;)-this.clone().startOf(&quot;year&quot;))/864e5)+1;return null==a?b:this.add(a-b,&quot;d&quot;)}function ra(a,b,c){return null!=a?a:null!=b?b:c}function sa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ta(a){var b,c,d,e,f=[];if(!a._d){for(d=sa(a),a._w&amp;&amp;null==a._a[hd]&amp;&amp;null==a._a[gd]&amp;&amp;ua(a),a._dayOfYear&amp;&amp;(e=ra(a._a[fd],d[fd]),a._dayOfYear&gt;ga(e)&amp;&amp;(j(a)._overflowDayOfYear=!0),c=fa(e,0,a._dayOfYear),a._a[gd]=c.getUTCMonth(),a._a[hd]=c.getUTCDate()),b=0;3&gt;b&amp;&amp;null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7&gt;b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[id]&amp;&amp;0===a._a[jd]&amp;&amp;0===a._a[kd]&amp;&amp;0===a._a[ld]&amp;&amp;(a._nextDay=!0,a._a[id]=0),a._d=(a._useUTC?fa:ea).apply(null,f),null!=a._tzm&amp;&amp;a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&amp;&amp;(a._a[id]=24)}}function ua(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=ra(b.GG,a._a[fd],ja(Da(),1,4).year),d=ra(b.W,1),e=ra(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=ra(b.gg,a._a[fd],ja(Da(),f,g).year),d=ra(b.w,1),null!=b.d?(e=b.d,f&gt;e&amp;&amp;++d):e=null!=b.e?b.e+f:f),h=pa(c,d,e,g,f),a._a[fd]=h.year,a._dayOfYear=h.dayOfYear}function va(b){if(b._f===a.ISO_8601)return void ca(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=&quot;&quot;+b._i,i=h.length,k=0;for(e=L(b._f,b._locale).match(Nc)||[],c=0;c&lt;e.length;c++)f=e[c],d=(h.match(O(f,b))||[])[0],d&amp;&amp;(g=h.substr(0,h.indexOf(d)),g.length&gt;0&amp;&amp;j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Qc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),S(f,d,b)):b._strict&amp;&amp;!d&amp;&amp;j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length&gt;0&amp;&amp;j(b).unusedInput.push(h),j(b).bigHour===!0&amp;&amp;b._a[id]&lt;=12&amp;&amp;b._a[id]&gt;0&amp;&amp;(j(b).bigHour=void 0),b._a[id]=wa(b._locale,b._a[id],b._meridiem),ta(b),$(b)}function wa(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&amp;&amp;12&gt;b&amp;&amp;(b+=12),d||12!==b||(b=0),b):b}function xa(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e&lt;a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&amp;&amp;(b._useUTC=a._useUTC),b._f=a._f[e],va(b),k(b)&amp;&amp;(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d&gt;f)&amp;&amp;(d=f,c=b));g(a,c||b)}function ya(a){if(!a._d){var b=B(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ta(a)}}function za(a){var b=new n($(Aa(a)));return b._nextDay&amp;&amp;(b.add(1,&quot;d&quot;),b._nextDay=void 0),b}function Aa(a){var b=a._i,e=a._f;return a._locale=a._locale||y(a._l),null===b||void 0===e&amp;&amp;&quot;&quot;===b?l({nullInput:!0}):(&quot;string&quot;==typeof b&amp;&amp;(a._i=b=a._locale.preparse(b)),o(b)?new n($(b)):(c(e)?xa(a):e?va(a):d(b)?a._d=b:Ba(a),a))}function Ba(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):&quot;string&quot;==typeof f?da(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ta(b)):&quot;object&quot;==typeof f?ya(b):&quot;number&quot;==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ca(a,b,c,d,e){var f={};return&quot;boolean&quot;==typeof c&amp;&amp;(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,za(f)}function Da(a,b,c,d){return Ca(a,b,c,d,!1)}function Ea(a,b){var d,e;if(1===b.length&amp;&amp;c(b[0])&amp;&amp;(b=b[0]),!b.length)return Da();for(d=b[0],e=1;e&lt;b.length;++e)(!b[e].isValid()||b[e][a](d))&amp;&amp;(d=b[e]);return d}function Fa(){var a=[].slice.call(arguments,0);return Ea(&quot;isBefore&quot;,a)}function Ga(){var a=[].slice.call(arguments,0);return Ea(&quot;isAfter&quot;,a)}function Ha(a){var b=B(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=y(),this._bubble()}function Ia(a){return a instanceof Ha}function Ja(a,b){H(a,0,0,function(){var a=this.utcOffset(),c=&quot;+&quot;;return 0&gt;a&amp;&amp;(a=-a,c=&quot;-&quot;),c+G(~~(a/60),2)+b+G(~~a%60,2)})}function Ka(a){var b=(a||&quot;&quot;).match(ad)||[],c=b[b.length-1]||[],d=(c+&quot;&quot;).match(xd)||[&quot;-&quot;,0,0],e=+(60*d[1])+q(d[2]);return&quot;+&quot;===d[0]?e:-e}function La(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Da(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Da(b).local()}function Ma(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Na(b,c){var d,e=this._offset||0;return null!=b?(&quot;string&quot;==typeof b&amp;&amp;(b=Ka(b)),Math.abs(b)&lt;16&amp;&amp;(b=60*b),!this._isUTC&amp;&amp;c&amp;&amp;(d=Ma(this)),this._offset=b,this._isUTC=!0,null!=d&amp;&amp;this.add(d,&quot;m&quot;),e!==b&amp;&amp;(!c||this._changeInProgress?bb(this,Ya(b-e,&quot;m&quot;),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ma(this)}function Oa(a,b){return null!=a?(&quot;string&quot;!=typeof a&amp;&amp;(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Pa(a){return this.utcOffset(0,a)}function Qa(a){return this._isUTC&amp;&amp;(this.utcOffset(0,a),this._isUTC=!1,a&amp;&amp;this.subtract(Ma(this),&quot;m&quot;)),this}function Ra(){return this._tzm?this.utcOffset(this._tzm):&quot;string&quot;==typeof this._i&amp;&amp;this.utcOffset(Ka(this._i)),this}function Sa(a){return a=a?Da(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Ta(){return this.utcOffset()&gt;this.clone().month(0).utcOffset()||this.utcOffset()&gt;this.clone().month(5).utcOffset()}function Ua(){if(&quot;undefined&quot;!=typeof this._isDSTShifted)return this._isDSTShifted;var a={};if(m(a,this),a=Aa(a),a._a){var b=a._isUTC?h(a._a):Da(a._a);this._isDSTShifted=this.isValid()&amp;&amp;r(a._a,b.toArray())&gt;0}else this._isDSTShifted=!1;return this._isDSTShifted}function Va(){return!this._isUTC}function Wa(){return this._isUTC}function Xa(){return this._isUTC&amp;&amp;0===this._offset}function Ya(a,b){var c,d,e,g=a,h=null;return Ia(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:&quot;number&quot;==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=yd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:0,d:q(h[hd])*c,h:q(h[id])*c,m:q(h[jd])*c,s:q(h[kd])*c,ms:q(h[ld])*c}):(h=zd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:Za(h[2],c),M:Za(h[3],c),d:Za(h[4],c),h:Za(h[5],c),m:Za(h[6],c),s:Za(h[7],c),w:Za(h[8],c)}):null==g?g={}:&quot;object&quot;==typeof g&amp;&amp;(&quot;from&quot;in g||&quot;to&quot;in g)&amp;&amp;(e=_a(Da(g.from),Da(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ha(g),Ia(a)&amp;&amp;f(a,&quot;_locale&quot;)&amp;&amp;(d._locale=a._locale),d}function Za(a,b){var c=a&amp;&amp;parseFloat(a.replace(&quot;,&quot;,&quot;.&quot;));return(isNaN(c)?0:c)*b}function $a(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,&quot;M&quot;).isAfter(b)&amp;&amp;--c.months,c.milliseconds=+b-+a.clone().add(c.months,&quot;M&quot;),c}function _a(a,b){var c;return b=La(b,a),a.isBefore(b)?c=$a(a,b):(c=$a(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function ab(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(ba(b,&quot;moment().&quot;+b+&quot;(period, number) is deprecated. Please use moment().&quot;+b+&quot;(number, period).&quot;),f=c,c=d,d=f),c=&quot;string&quot;==typeof c?+c:c,e=Ya(c,d),bb(this,e,a),this}}function bb(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&amp;&amp;b._d.setTime(+b._d+f*d),g&amp;&amp;E(b,&quot;Date&quot;,D(b,&quot;Date&quot;)+g*d),h&amp;&amp;X(b,D(b,&quot;Month&quot;)+h*d),e&amp;&amp;a.updateOffset(b,g||h)}function cb(a,b){var c=a||Da(),d=La(c,this).startOf(&quot;day&quot;),e=this.diff(d,&quot;days&quot;,!0),f=-6&gt;e?&quot;sameElse&quot;:-1&gt;e?&quot;lastWeek&quot;:0&gt;e?&quot;lastDay&quot;:1&gt;e?&quot;sameDay&quot;:2&gt;e?&quot;nextDay&quot;:7&gt;e?&quot;nextWeek&quot;:&quot;sameElse&quot;;return this.format(b&amp;&amp;b[f]||this.localeData().calendar(f,this,Da(c)))}function db(){return new n(this)}function eb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this&gt;+a):(c=o(a)?+a:+Da(a),c&lt;+this.clone().startOf(b))}function fb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+a&gt;+this):(c=o(a)?+a:+Da(a),+this.clone().endOf(b)&lt;c)}function gb(a,b,c){return this.isAfter(a,c)&amp;&amp;this.isBefore(b,c)}function hb(a,b){var c;return b=A(b||&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this===+a):(c=+Da(a),+this.clone().startOf(b)&lt;=c&amp;&amp;c&lt;=+this.clone().endOf(b))}function ib(a,b,c){var d,e,f=La(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=A(b),&quot;year&quot;===b||&quot;month&quot;===b||&quot;quarter&quot;===b?(e=jb(this,f),&quot;quarter&quot;===b?e/=3:&quot;year&quot;===b&amp;&amp;(e/=12)):(d=this-f,e=&quot;second&quot;===b?d/1e3:&quot;minute&quot;===b?d/6e4:&quot;hour&quot;===b?d/36e5:&quot;day&quot;===b?(d-g)/864e5:&quot;week&quot;===b?(d-g)/6048e5:d),c?e:p(e)}function jb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,&quot;months&quot;);return 0&gt;b-f?(c=a.clone().add(e-1,&quot;months&quot;),d=(b-f)/(f-c)):(c=a.clone().add(e+1,&quot;months&quot;),d=(b-f)/(c-f)),-(e+d)}function kb(){return this.clone().locale(&quot;en&quot;).format(&quot;ddd MMM DD YYYY HH:mm:ss [GMT]ZZ&quot;)}function lb(){var a=this.clone().utc();return 0&lt;a.year()&amp;&amp;a.year()&lt;=9999?&quot;function&quot;==typeof Date.prototype.toISOString?this.toDate().toISOString():K(a,&quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;):K(a,&quot;YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;)}function mb(b){var c=K(this,b||a.defaultFormat);return this.localeData().postformat(c)}function nb(a,b){return this.isValid()?Ya({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.from(Da(),a)}function pb(a,b){return this.isValid()?Ya({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function qb(a){return this.to(Da(),a)}function rb(a){var b;return void 0===a?this._locale._abbr:(b=y(a),null!=b&amp;&amp;(this._locale=b),this)}function sb(){return this._locale}function tb(a){switch(a=A(a)){case&quot;year&quot;:this.month(0);case&quot;quarter&quot;:case&quot;month&quot;:this.date(1);case&quot;week&quot;:case&quot;isoWeek&quot;:case&quot;day&quot;:this.hours(0);case&quot;hour&quot;:this.minutes(0);case&quot;minute&quot;:this.seconds(0);case&quot;second&quot;:this.milliseconds(0)}return&quot;week&quot;===a&amp;&amp;this.weekday(0),&quot;isoWeek&quot;===a&amp;&amp;this.isoWeekday(1),&quot;quarter&quot;===a&amp;&amp;this.month(3*Math.floor(this.month()/3)),this}function ub(a){return a=A(a),void 0===a||&quot;millisecond&quot;===a?this:this.startOf(a).add(1,&quot;isoWeek&quot;===a?&quot;week&quot;:a).subtract(1,&quot;ms&quot;)}function vb(){return+this._d-6e4*(this._offset||0)}function wb(){return Math.floor(+this/1e3)}function xb(){return this._offset?new Date(+this):this._d}function yb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function zb(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Ab(){return k(this)}function Bb(){return g({},j(this))}function Cb(){return j(this).overflow}function Db(a,b){H(0,[a,a.length],0,b)}function Eb(a,b,c){return ja(Da([a,11,31+b-c]),b,c).week}function Fb(a){var b=ja(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Gb(a){var b=ja(this,1,4).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Hb(){return Eb(this.year(),1,4)}function Ib(){var a=this.localeData()._week;return Eb(this.year(),a.dow,a.doy)}function Jb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Kb(a,b){return&quot;string&quot;!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),&quot;number&quot;==typeof a?a:null):parseInt(a,10)}function Lb(a){return this._weekdays[a.day()]}function Mb(a){return this._weekdaysShort[a.day()]}function Nb(a){return this._weekdaysMin[a.day()]}function Ob(a){var b,c,d;for(this._weekdaysParse=this._weekdaysParse||[],b=0;7&gt;b;b++)if(this._weekdaysParse[b]||(c=Da([2e3,1]).day(b),d=&quot;^&quot;+this.weekdays(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysShort(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysMin(c,&quot;&quot;),this._weekdaysParse[b]=new RegExp(d.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),this._weekdaysParse[b].test(a))return b}function Pb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Kb(a,this.localeData()),this.add(a-b,&quot;d&quot;)):b}function Qb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,&quot;d&quot;)}function Rb(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Sb(a,b){H(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Tb(a,b){return b._meridiemParse}function Ub(a){return&quot;p&quot;===(a+&quot;&quot;).toLowerCase().charAt(0)}function Vb(a,b,c){return a&gt;11?c?&quot;pm&quot;:&quot;PM&quot;:c?&quot;am&quot;:&quot;AM&quot;}function Wb(a,b){b[ld]=q(1e3*(&quot;0.&quot;+a))}function Xb(){return this._isUTC?&quot;UTC&quot;:&quot;&quot;}function Yb(){return this._isUTC?&quot;Coordinated Universal Time&quot;:&quot;&quot;}function Zb(a){return Da(1e3*a)}function $b(){return Da.apply(null,arguments).parseZone()}function _b(a,b,c){var d=this._calendar[a];return&quot;function&quot;==typeof d?d.call(b,c):d}function ac(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function bc(){return this._invalidDate}function cc(a){return this._ordinal.replace(&quot;%d&quot;,a)}function dc(a){return a}function ec(a,b,c,d){var e=this._relativeTime[c];return&quot;function&quot;==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function fc(a,b){var c=this._relativeTime[a&gt;0?&quot;future&quot;:&quot;past&quot;];return&quot;function&quot;==typeof c?c(b):c.replace(/%s/i,b)}function gc(a){var b,c;for(c in a)b=a[c],&quot;function&quot;==typeof b?this[c]=b:this[&quot;_&quot;+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+&quot;|&quot;+/\d{1,2}/.source)}function hc(a,b,c,d){var e=y(),f=h().set(d,b);return e[c](f,a)}function ic(a,b,c,d,e){if(&quot;number&quot;==typeof a&amp;&amp;(b=a,a=void 0),a=a||&quot;&quot;,null!=b)return hc(a,b,c,e);var f,g=[];for(f=0;d&gt;f;f++)g[f]=hc(a,f,c,e);return g}function jc(a,b){return ic(a,b,&quot;months&quot;,12,&quot;month&quot;)}function kc(a,b){return ic(a,b,&quot;monthsShort&quot;,12,&quot;month&quot;)}function lc(a,b){return ic(a,b,&quot;weekdays&quot;,7,&quot;day&quot;)}function mc(a,b){return ic(a,b,&quot;weekdaysShort&quot;,7,&quot;day&quot;)}function nc(a,b){return ic(a,b,&quot;weekdaysMin&quot;,7,&quot;day&quot;)}function oc(){var a=this._data;return this._milliseconds=Wd(this._milliseconds),this._days=Wd(this._days),this._months=Wd(this._months),a.milliseconds=Wd(a.milliseconds),a.seconds=Wd(a.seconds),a.minutes=Wd(a.minutes),a.hours=Wd(a.hours),a.months=Wd(a.months),a.years=Wd(a.years),this}function pc(a,b,c,d){var e=Ya(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function qc(a,b){return pc(this,a,b,1)}function rc(a,b){return pc(this,a,b,-1)}function sc(a){return 0&gt;a?Math.floor(a):Math.ceil(a)}function tc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f&gt;=0&amp;&amp;g&gt;=0&amp;&amp;h&gt;=0||0&gt;=f&amp;&amp;0&gt;=g&amp;&amp;0&gt;=h||(f+=864e5*sc(vc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=p(f/1e3),i.seconds=a%60,b=p(a/60),i.minutes=b%60,c=p(b/60),i.hours=c%24,g+=p(c/24),e=p(uc(g)),h+=e,g-=sc(vc(e)),d=p(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function uc(a){return 4800*a/146097}function vc(a){return 146097*a/4800}function wc(a){var b,c,d=this._milliseconds;if(a=A(a),&quot;month&quot;===a||&quot;year&quot;===a)return b=this._days+d/864e5,c=this._months+uc(b),&quot;month&quot;===a?c:c/12;switch(b=this._days+Math.round(vc(this._months)),a){case&quot;week&quot;:return b/7+d/6048e5;case&quot;day&quot;:return b+d/864e5;case&quot;hour&quot;:return 24*b+d/36e5;case&quot;minute&quot;:return 1440*b+d/6e4;case&quot;second&quot;:return 86400*b+d/1e3;case&quot;millisecond&quot;:return Math.floor(864e5*b)+d;default:throw new Error(&quot;Unknown unit &quot;+a)}}function xc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*q(this._months/12)}function yc(a){return function(){return this.as(a)}}function zc(a){return a=A(a),this[a+&quot;s&quot;]()}function Ac(a){return function(){return this._data[a]}}function Bc(){return p(this.days()/7)}function Cc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Dc(a,b,c){var d=Ya(a).abs(),e=ke(d.as(&quot;s&quot;)),f=ke(d.as(&quot;m&quot;)),g=ke(d.as(&quot;h&quot;)),h=ke(d.as(&quot;d&quot;)),i=ke(d.as(&quot;M&quot;)),j=ke(d.as(&quot;y&quot;)),k=e&lt;le.s&amp;&amp;[&quot;s&quot;,e]||1===f&amp;&amp;[&quot;m&quot;]||f&lt;le.m&amp;&amp;[&quot;mm&quot;,f]||1===g&amp;&amp;[&quot;h&quot;]||g&lt;le.h&amp;&amp;[&quot;hh&quot;,g]||1===h&amp;&amp;[&quot;d&quot;]||h&lt;le.d&amp;&amp;[&quot;dd&quot;,h]||1===i&amp;&amp;[&quot;M&quot;]||i&lt;le.M&amp;&amp;[&quot;MM&quot;,i]||1===j&amp;&amp;[&quot;y&quot;]||[&quot;yy&quot;,j];return k[2]=b,k[3]=+a&gt;0,k[4]=c,Cc.apply(null,k)}function Ec(a,b){return void 0===le[a]?!1:void 0===b?le[a]:(le[a]=b,!0)}function Fc(a){var b=this.localeData(),c=Dc(this,!a,b);return a&amp;&amp;(c=b.pastFuture(+this,c)),b.postformat(c)}function Gc(){var a,b,c,d=me(this._milliseconds)/1e3,e=me(this._days),f=me(this._months);a=p(d/60),b=p(a/60),d%=60,a%=60,c=p(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0&gt;m?&quot;-&quot;:&quot;&quot;)+&quot;P&quot;+(g?g+&quot;Y&quot;:&quot;&quot;)+(h?h+&quot;M&quot;:&quot;&quot;)+(i?i+&quot;D&quot;:&quot;&quot;)+(j||k||l?&quot;T&quot;:&quot;&quot;)+(j?j+&quot;H&quot;:&quot;&quot;)+(k?k+&quot;M&quot;:&quot;&quot;)+(l?l+&quot;S&quot;:&quot;&quot;):&quot;P0D&quot;}var Hc,Ic,Jc=a.momentProperties=[],Kc=!1,Lc={},Mc={},Nc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Pc={},Qc={},Rc=/\d/,Sc=/\d\d/,Tc=/\d{3}/,Uc=/\d{4}/,Vc=/[+-]?\d{6}/,Wc=/\d\d?/,Xc=/\d{1,3}/,Yc=/\d{1,4}/,Zc=/[+-]?\d{1,6}/,$c=/\d+/,_c=/[+-]?\d+/,ad=/Z|[+-]\d\d:?\d\d/gi,bd=/[+-]?\d+(\.\d{1,3})?/,cd=/[0-9]*[&apos;a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,dd={},ed={},fd=0,gd=1,hd=2,id=3,jd=4,kd=5,ld=6;H(&quot;M&quot;,[&quot;MM&quot;,2],&quot;Mo&quot;,function(){return this.month()+1}),H(&quot;MMM&quot;,0,0,function(a){return this.localeData().monthsShort(this,a)}),H(&quot;MMMM&quot;,0,0,function(a){return this.localeData().months(this,a)}),z(&quot;month&quot;,&quot;M&quot;),N(&quot;M&quot;,Wc),N(&quot;MM&quot;,Wc,Sc),N(&quot;MMM&quot;,cd),N(&quot;MMMM&quot;,cd),Q([&quot;M&quot;,&quot;MM&quot;],function(a,b){b[gd]=q(a)-1}),Q([&quot;MMM&quot;,&quot;MMMM&quot;],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[gd]=e:j(c).invalidMonth=a});var md=&quot;January_February_March_April_May_June_July_August_September_October_November_December&quot;.split(&quot;_&quot;),nd=&quot;Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec&quot;.split(&quot;_&quot;),od={};a.suppressDeprecationWarnings=!1;var pd=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,qd=[[&quot;YYYYYY-MM-DD&quot;,/[+-]\d{6}-\d{2}-\d{2}/],[&quot;YYYY-MM-DD&quot;,/\d{4}-\d{2}-\d{2}/],[&quot;GGGG-[W]WW-E&quot;,/\d{4}-W\d{2}-\d/],[&quot;GGGG-[W]WW&quot;,/\d{4}-W\d{2}/],[&quot;YYYY-DDD&quot;,/\d{4}-\d{3}/]],rd=[[&quot;HH:mm:ss.SSSS&quot;,/(T| )\d\d:\d\d:\d\d\.\d+/],[&quot;HH:mm:ss&quot;,/(T| )\d\d:\d\d:\d\d/],[&quot;HH:mm&quot;,/(T| )\d\d:\d\d/],[&quot;HH&quot;,/(T| )\d\d/]],sd=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=aa(&quot;moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.&quot;,function(a){a._d=new Date(a._i+(a._useUTC?&quot; UTC&quot;:&quot;&quot;))}),H(0,[&quot;YY&quot;,2],0,function(){return this.year()%100}),H(0,[&quot;YYYY&quot;,4],0,&quot;year&quot;),H(0,[&quot;YYYYY&quot;,5],0,&quot;year&quot;),H(0,[&quot;YYYYYY&quot;,6,!0],0,&quot;year&quot;),z(&quot;year&quot;,&quot;y&quot;),N(&quot;Y&quot;,_c),N(&quot;YY&quot;,Wc,Sc),N(&quot;YYYY&quot;,Yc,Uc),N(&quot;YYYYY&quot;,Zc,Vc),N(&quot;YYYYYY&quot;,Zc,Vc),Q([&quot;YYYYY&quot;,&quot;YYYYYY&quot;],fd),Q(&quot;YYYY&quot;,function(b,c){c[fd]=2===b.length?a.parseTwoDigitYear(b):q(b)}),Q(&quot;YY&quot;,function(b,c){c[fd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return q(a)+(q(a)&gt;68?1900:2e3)};var td=C(&quot;FullYear&quot;,!1);H(&quot;w&quot;,[&quot;ww&quot;,2],&quot;wo&quot;,&quot;week&quot;),H(&quot;W&quot;,[&quot;WW&quot;,2],&quot;Wo&quot;,&quot;isoWeek&quot;),z(&quot;week&quot;,&quot;w&quot;),z(&quot;isoWeek&quot;,&quot;W&quot;),N(&quot;w&quot;,Wc),N(&quot;ww&quot;,Wc,Sc),N(&quot;W&quot;,Wc),N(&quot;WW&quot;,Wc,Sc),R([&quot;w&quot;,&quot;ww&quot;,&quot;W&quot;,&quot;WW&quot;],function(a,b,c,d){b[d.substr(0,1)]=q(a)});var ud={dow:0,doy:6};H(&quot;DDD&quot;,[&quot;DDDD&quot;,3],&quot;DDDo&quot;,&quot;dayOfYear&quot;),z(&quot;dayOfYear&quot;,&quot;DDD&quot;),N(&quot;DDD&quot;,Xc),N(&quot;DDDD&quot;,Tc),Q([&quot;DDD&quot;,&quot;DDDD&quot;],function(a,b,c){c._dayOfYear=q(a)}),a.ISO_8601=function(){};var vd=aa(&quot;moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return this&gt;a?this:a}),wd=aa(&quot;moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return a&gt;this?this:a});Ja(&quot;Z&quot;,&quot;:&quot;),Ja(&quot;ZZ&quot;,&quot;&quot;),N(&quot;Z&quot;,ad),N(&quot;ZZ&quot;,ad),Q([&quot;Z&quot;,&quot;ZZ&quot;],function(a,b,c){c._useUTC=!0,c._tzm=Ka(a)});var xd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var yd=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,zd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Ya.fn=Ha.prototype;var Ad=ab(1,&quot;add&quot;),Bd=ab(-1,&quot;subtract&quot;);a.defaultFormat=&quot;YYYY-MM-DDTHH:mm:ssZ&quot;;var Cd=aa(&quot;moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.&quot;,function(a){return void 0===a?this.localeData():this.locale(a)});H(0,[&quot;gg&quot;,2],0,function(){return this.weekYear()%100}),H(0,[&quot;GG&quot;,2],0,function(){return this.isoWeekYear()%100}),Db(&quot;gggg&quot;,&quot;weekYear&quot;),Db(&quot;ggggg&quot;,&quot;weekYear&quot;),Db(&quot;GGGG&quot;,&quot;isoWeekYear&quot;),Db(&quot;GGGGG&quot;,&quot;isoWeekYear&quot;),z(&quot;weekYear&quot;,&quot;gg&quot;),z(&quot;isoWeekYear&quot;,&quot;GG&quot;),N(&quot;G&quot;,_c),N(&quot;g&quot;,_c),N(&quot;GG&quot;,Wc,Sc),N(&quot;gg&quot;,Wc,Sc),N(&quot;GGGG&quot;,Yc,Uc),N(&quot;gggg&quot;,Yc,Uc),N(&quot;GGGGG&quot;,Zc,Vc),N(&quot;ggggg&quot;,Zc,Vc),R([&quot;gggg&quot;,&quot;ggggg&quot;,&quot;GGGG&quot;,&quot;GGGGG&quot;],function(a,b,c,d){b[d.substr(0,2)]=q(a)}),R([&quot;gg&quot;,&quot;GG&quot;],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),H(&quot;Q&quot;,0,0,&quot;quarter&quot;),z(&quot;quarter&quot;,&quot;Q&quot;),N(&quot;Q&quot;,Rc),Q(&quot;Q&quot;,function(a,b){b[gd]=3*(q(a)-1)}),H(&quot;D&quot;,[&quot;DD&quot;,2],&quot;Do&quot;,&quot;date&quot;),z(&quot;date&quot;,&quot;D&quot;),N(&quot;D&quot;,Wc),N(&quot;DD&quot;,Wc,Sc),N(&quot;Do&quot;,function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),Q([&quot;D&quot;,&quot;DD&quot;],hd),Q(&quot;Do&quot;,function(a,b){b[hd]=q(a.match(Wc)[0],10)});var Dd=C(&quot;Date&quot;,!0);H(&quot;d&quot;,0,&quot;do&quot;,&quot;day&quot;),H(&quot;dd&quot;,0,0,function(a){return this.localeData().weekdaysMin(this,a)}),H(&quot;ddd&quot;,0,0,function(a){return this.localeData().weekdaysShort(this,a)}),H(&quot;dddd&quot;,0,0,function(a){return this.localeData().weekdays(this,a)}),H(&quot;e&quot;,0,0,&quot;weekday&quot;),H(&quot;E&quot;,0,0,&quot;isoWeekday&quot;),z(&quot;day&quot;,&quot;d&quot;),z(&quot;weekday&quot;,&quot;e&quot;),z(&quot;isoWeekday&quot;,&quot;E&quot;),N(&quot;d&quot;,Wc),N(&quot;e&quot;,Wc),N(&quot;E&quot;,Wc),N(&quot;dd&quot;,cd),N(&quot;ddd&quot;,cd),N(&quot;dddd&quot;,cd),R([&quot;dd&quot;,&quot;ddd&quot;,&quot;dddd&quot;],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),R([&quot;d&quot;,&quot;e&quot;,&quot;E&quot;],function(a,b,c,d){b[d]=q(a)});var Ed=&quot;Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday&quot;.split(&quot;_&quot;),Fd=&quot;Sun_Mon_Tue_Wed_Thu_Fri_Sat&quot;.split(&quot;_&quot;),Gd=&quot;Su_Mo_Tu_We_Th_Fr_Sa&quot;.split(&quot;_&quot;);H(&quot;H&quot;,[&quot;HH&quot;,2],0,&quot;hour&quot;),H(&quot;h&quot;,[&quot;hh&quot;,2],0,function(){return this.hours()%12||12}),Sb(&quot;a&quot;,!0),Sb(&quot;A&quot;,!1),z(&quot;hour&quot;,&quot;h&quot;),N(&quot;a&quot;,Tb),N(&quot;A&quot;,Tb),N(&quot;H&quot;,Wc),N(&quot;h&quot;,Wc),N(&quot;HH&quot;,Wc,Sc),N(&quot;hh&quot;,Wc,Sc),Q([&quot;H&quot;,&quot;HH&quot;],id),Q([&quot;a&quot;,&quot;A&quot;],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),Q([&quot;h&quot;,&quot;hh&quot;],function(a,b,c){b[id]=q(a),j(c).bigHour=!0});var Hd=/[ap]\.?m?\.?/i,Id=C(&quot;Hours&quot;,!0);H(&quot;m&quot;,[&quot;mm&quot;,2],0,&quot;minute&quot;),z(&quot;minute&quot;,&quot;m&quot;),N(&quot;m&quot;,Wc),N(&quot;mm&quot;,Wc,Sc),Q([&quot;m&quot;,&quot;mm&quot;],jd);var Jd=C(&quot;Minutes&quot;,!1);H(&quot;s&quot;,[&quot;ss&quot;,2],0,&quot;second&quot;),z(&quot;second&quot;,&quot;s&quot;),N(&quot;s&quot;,Wc),N(&quot;ss&quot;,Wc,Sc),Q([&quot;s&quot;,&quot;ss&quot;],kd);var Kd=C(&quot;Seconds&quot;,!1);H(&quot;S&quot;,0,0,function(){return~~(this.millisecond()/100)}),H(0,[&quot;SS&quot;,2],0,function(){return~~(this.millisecond()/10)}),H(0,[&quot;SSS&quot;,3],0,&quot;millisecond&quot;),H(0,[&quot;SSSS&quot;,4],0,function(){return 10*this.millisecond()}),H(0,[&quot;SSSSS&quot;,5],0,function(){return 100*this.millisecond()}),H(0,[&quot;SSSSSS&quot;,6],0,function(){return 1e3*this.millisecond()}),H(0,[&quot;SSSSSSS&quot;,7],0,function(){return 1e4*this.millisecond()}),H(0,[&quot;SSSSSSSS&quot;,8],0,function(){return 1e5*this.millisecond()}),H(0,[&quot;SSSSSSSSS&quot;,9],0,function(){return 1e6*this.millisecond()}),z(&quot;millisecond&quot;,&quot;ms&quot;),N(&quot;S&quot;,Xc,Rc),N(&quot;SS&quot;,Xc,Sc),N(&quot;SSS&quot;,Xc,Tc);var Ld;for(Ld=&quot;SSSS&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)N(Ld,$c);for(Ld=&quot;S&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)Q(Ld,Wb);var Md=C(&quot;Milliseconds&quot;,!1);H(&quot;z&quot;,0,0,&quot;zoneAbbr&quot;),H(&quot;zz&quot;,0,0,&quot;zoneName&quot;);var Nd=n.prototype;Nd.add=Ad,Nd.calendar=cb,Nd.clone=db,Nd.diff=ib,Nd.endOf=ub,Nd.format=mb,Nd.from=nb,Nd.fromNow=ob,Nd.to=pb,Nd.toNow=qb,Nd.get=F,Nd.invalidAt=Cb,Nd.isAfter=eb,Nd.isBefore=fb,Nd.isBetween=gb,Nd.isSame=hb,Nd.isValid=Ab,Nd.lang=Cd,Nd.locale=rb,Nd.localeData=sb,Nd.max=wd,Nd.min=vd,Nd.parsingFlags=Bb,Nd.set=F,Nd.startOf=tb,Nd.subtract=Bd,Nd.toArray=yb,Nd.toObject=zb,Nd.toDate=xb,Nd.toISOString=lb,Nd.toJSON=lb,Nd.toString=kb,Nd.unix=wb,Nd.valueOf=vb,Nd.year=td,Nd.isLeapYear=ia,Nd.weekYear=Fb,Nd.isoWeekYear=Gb,Nd.quarter=Nd.quarters=Jb,Nd.month=Y,Nd.daysInMonth=Z,Nd.week=Nd.weeks=na,Nd.isoWeek=Nd.isoWeeks=oa,Nd.weeksInYear=Ib,Nd.isoWeeksInYear=Hb,Nd.date=Dd,Nd.day=Nd.days=Pb,Nd.weekday=Qb,Nd.isoWeekday=Rb,Nd.dayOfYear=qa,Nd.hour=Nd.hours=Id,Nd.minute=Nd.minutes=Jd,Nd.second=Nd.seconds=Kd,
Nd.millisecond=Nd.milliseconds=Md,Nd.utcOffset=Na,Nd.utc=Pa,Nd.local=Qa,Nd.parseZone=Ra,Nd.hasAlignedHourOffset=Sa,Nd.isDST=Ta,Nd.isDSTShifted=Ua,Nd.isLocal=Va,Nd.isUtcOffset=Wa,Nd.isUtc=Xa,Nd.isUTC=Xa,Nd.zoneAbbr=Xb,Nd.zoneName=Yb,Nd.dates=aa(&quot;dates accessor is deprecated. Use date instead.&quot;,Dd),Nd.months=aa(&quot;months accessor is deprecated. Use month instead&quot;,Y),Nd.years=aa(&quot;years accessor is deprecated. Use year instead&quot;,td),Nd.zone=aa(&quot;moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779&quot;,Oa);var Od=Nd,Pd={sameDay:&quot;[Today at] LT&quot;,nextDay:&quot;[Tomorrow at] LT&quot;,nextWeek:&quot;dddd [at] LT&quot;,lastDay:&quot;[Yesterday at] LT&quot;,lastWeek:&quot;[Last] dddd [at] LT&quot;,sameElse:&quot;L&quot;},Qd={LTS:&quot;h:mm:ss A&quot;,LT:&quot;h:mm A&quot;,L:&quot;MM/DD/YYYY&quot;,LL:&quot;MMMM D, YYYY&quot;,LLL:&quot;MMMM D, YYYY h:mm A&quot;,LLLL:&quot;dddd, MMMM D, YYYY h:mm A&quot;},Rd=&quot;Invalid date&quot;,Sd=&quot;%d&quot;,Td=/\d{1,2}/,Ud={future:&quot;in %s&quot;,past:&quot;%s ago&quot;,s:&quot;a few seconds&quot;,m:&quot;a minute&quot;,mm:&quot;%d minutes&quot;,h:&quot;an hour&quot;,hh:&quot;%d hours&quot;,d:&quot;a day&quot;,dd:&quot;%d days&quot;,M:&quot;a month&quot;,MM:&quot;%d months&quot;,y:&quot;a year&quot;,yy:&quot;%d years&quot;},Vd=s.prototype;Vd._calendar=Pd,Vd.calendar=_b,Vd._longDateFormat=Qd,Vd.longDateFormat=ac,Vd._invalidDate=Rd,Vd.invalidDate=bc,Vd._ordinal=Sd,Vd.ordinal=cc,Vd._ordinalParse=Td,Vd.preparse=dc,Vd.postformat=dc,Vd._relativeTime=Ud,Vd.relativeTime=ec,Vd.pastFuture=fc,Vd.set=gc,Vd.months=U,Vd._months=md,Vd.monthsShort=V,Vd._monthsShort=nd,Vd.monthsParse=W,Vd.week=ka,Vd._week=ud,Vd.firstDayOfYear=ma,Vd.firstDayOfWeek=la,Vd.weekdays=Lb,Vd._weekdays=Ed,Vd.weekdaysMin=Nb,Vd._weekdaysMin=Gd,Vd.weekdaysShort=Mb,Vd._weekdaysShort=Fd,Vd.weekdaysParse=Ob,Vd.isPM=Ub,Vd._meridiemParse=Hd,Vd.meridiem=Vb,w(&quot;en&quot;,{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===q(a%100/10)?&quot;th&quot;:1===b?&quot;st&quot;:2===b?&quot;nd&quot;:3===b?&quot;rd&quot;:&quot;th&quot;;return a+c}}),a.lang=aa(&quot;moment.lang is deprecated. Use moment.locale instead.&quot;,w),a.langData=aa(&quot;moment.langData is deprecated. Use moment.localeData instead.&quot;,y);var Wd=Math.abs,Xd=yc(&quot;ms&quot;),Yd=yc(&quot;s&quot;),Zd=yc(&quot;m&quot;),$d=yc(&quot;h&quot;),_d=yc(&quot;d&quot;),ae=yc(&quot;w&quot;),be=yc(&quot;M&quot;),ce=yc(&quot;y&quot;),de=Ac(&quot;milliseconds&quot;),ee=Ac(&quot;seconds&quot;),fe=Ac(&quot;minutes&quot;),ge=Ac(&quot;hours&quot;),he=Ac(&quot;days&quot;),ie=Ac(&quot;months&quot;),je=Ac(&quot;years&quot;),ke=Math.round,le={s:45,m:45,h:22,d:26,M:11},me=Math.abs,ne=Ha.prototype;ne.abs=oc,ne.add=qc,ne.subtract=rc,ne.as=wc,ne.asMilliseconds=Xd,ne.asSeconds=Yd,ne.asMinutes=Zd,ne.asHours=$d,ne.asDays=_d,ne.asWeeks=ae,ne.asMonths=be,ne.asYears=ce,ne.valueOf=xc,ne._bubble=tc,ne.get=zc,ne.milliseconds=de,ne.seconds=ee,ne.minutes=fe,ne.hours=ge,ne.days=he,ne.weeks=Bc,ne.months=ie,ne.years=je,ne.humanize=Fc,ne.toISOString=Gc,ne.toString=Gc,ne.toJSON=Gc,ne.locale=rb,ne.localeData=sb,ne.toIsoString=aa(&quot;toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)&quot;,Gc),ne.lang=Cd,H(&quot;X&quot;,0,0,&quot;unix&quot;),H(&quot;x&quot;,0,0,&quot;valueOf&quot;),N(&quot;x&quot;,_c),N(&quot;X&quot;,bd),Q(&quot;X&quot;,function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),Q(&quot;x&quot;,function(a,b,c){c._d=new Date(q(a))}),a.version=&quot;2.10.6&quot;,b(Da),a.fn=Od,a.min=Fa,a.max=Ga,a.utc=h,a.unix=Zb,a.months=jc,a.isDate=d,a.locale=w,a.invalid=l,a.duration=Ya,a.isMoment=o,a.weekdays=lc,a.parseZone=$b,a.localeData=y,a.isDuration=Ia,a.monthsShort=kc,a.weekdaysMin=nc,a.defineLocale=x,a.weekdaysShort=mc,a.normalizeUnits=A,a.relativeTimeThreshold=Ec;var oe=a;return oe});</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2c64669f-f07e-4365-bf64-c559ace83004</id>
                <name>stopOnErrorCount</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122375</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to Stop a channel if it reaches a particular error count. 
	Also sends an alert message via another channel (this sends a sms via our monitoring system).

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function stopOnErrorCount(cid, errorCount) {
	var channelStatisticsController = Packages.com.mirth.connect.server.controllers.ChannelStatisticsController.getInstance();
	var channelStatusController = Packages.com.mirth.connect.server.controllers.ChannelStatusController.getInstance();
	var stats = channelStatisticsController.getStatistics(cid);
	// var numOfQueued = stats.queued;
	var numOfErrors = stats.error;

	if(numOfErrors &gt; errorCount )
	{
		//Stop Me
		channelStatusController.stopChannel(cid);
		//Alert msg sent to _SVHALERT channel
		var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
		var channelName = channelController.getDeployedChannelById(cid).getName();
		var alertmsg = &apos;mirth01 mirth_channel_status codeTemplate_stopOnErrorCount 0 &apos; +
					   &apos;channel &apos; + channelName + &apos; stopped&apos;;
		router.routeMessage(&apos;_SVHALERT&apos;, alertmsg);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>08044817-3504-4fc1-80ee-404870195151</id>
                <name>test</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122745</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.
	searchword
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function testfunc(arg1) {
	return arg1;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
            <name>WebPT-Mirth</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121602</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
                <name>Fix HL7v2 Node Order</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121804</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>35f4c250-08b4-4e42-8e60-f85aa98dfe50</id>
            <name>WebPT-Translations</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939924</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>be8f057b-2640-4613-b2e7-83326c59169c</id>
                <name>AddZeros</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122826</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function addZeroes(num) {
   return num.toLocaleString(&quot;en&quot;, {useGrouping: false, minimumFractionDigits: 2})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>51913864-7702-489a-b7c6-54992c12b19d</id>
                <name>FindLookupValueWithDefault</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122218</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithDefault ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        //obj.LeftValue = LeftValue;
        //obj.RightValue1 = DefaultValue1;
        //obj.RightValue2   = DefaultValue2; 
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);
            var result = pattern.test(LeftValue );

            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>c276be9f-c8f1-4dea-8df0-e000c6745271</id>
                <name>FindLookupValueWithInsuranceId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122080</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithInsuranceId ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);             
            var result = pattern.test(LeftValue );
	
            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7d746da2-58c6-44eb-ad5c-c5bfd0a0c537</id>
                <name>UseExternalProblemID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122349</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalProblemID() {

if ([&apos;2804&apos;, &apos;2822&apos;].indexOf($(&apos;tenantId&apos;) + &apos;&apos;) &gt; -1) {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitexternalproblemid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitaccountnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>07730e85-7f30-4ddf-90a4-78183c896ab5</id>
                <name>UseExternalVisitID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122192</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalVisitID() {
	
if ($(&apos;tenantId&apos;)  == &apos;9999&apos; ) {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitexternalvisitid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitvisitnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
        <channelTags>
          <channelTag>
            <id>c977a28e-18bc-4072-93d9-db92b5bec0d6</id>
            <name>FILE</name>
            <channelIds>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>7311d096-fb98-4242-81fd-9c1a3d12261e</string>
              <string>27139815-1d29-4f32-ad00-fc266f2448cd</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>aed44a77-012f-4eee-aa3e-73234edf4542</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
            </channelIds>
            <backgroundColor>
              <red>0</red>
              <green>255</green>
              <blue>255</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>a727d6e7-ed41-4197-bed5-16af58ab6813</id>
            <name>ORU</name>
            <channelIds>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>1ae4e7ac-e62f-468c-aa2a-99cbd6139838</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
            </channelIds>
            <backgroundColor>
              <red>0</red>
              <green>128</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>441d20af-8076-4299-a200-ee020c536458</id>
            <name>PDF</name>
            <channelIds>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>255</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
        </channelTags>
      </exportData>
    </channel>
    <channel version="4.0.0">
      <id>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</id>
      <nextMetaDataId>20</nextMetaDataId>
      <name>XML to HTML</name>
      <description>2018-04-22 v1.13 JER - Modified the &quot;Call getAuthor -&gt; Set Author Channel Map variables&quot; transformer, added a Pre-Processor script and updated the GetAssignedEntity.
2018-02-25 v1.11 JER - Added getAssignedAuthor, modified getAssignedEntity, newly added the getXdsAuthorPerson and modified Call getPerformer, getAuthor and getEncounters (modified) for additional error handling and checking for undefined, null and object length characteristics.
2018-02-16 v1.10 JER - Modified Code templates: getPerformer and getAuthorPerson and Source Transformer: Call getAuthor -&gt; Set Author Channel Map variables.
2018-02-15 v1.9 JER - Modified getAuthorPerson for improved handling using typeof functions, getPerformer modified from E4X to Rhino standard Javascript notation and getServiceEvent modified to include capturing the ClassCode and DisplayName attributes
2018-02-13 v1.8 JER - Modified the destination connector outbound template to reference as the receipent To: https://certhub.1click2care.net:20000/repository , added default values for performerAuthorRole and performerAuthorSpeciality if none is provided for the Call getPerformer and getAuthors -&gt; Set Performer and Authors Channel Map variables transformer, verified Response transformer included AND readded the removed channelMap.put for the encodedCCD to destination [Encoded the CCD] transformer.
2018-02-13 v1.7.1 JER - Modified the &quot;Encoded the CCD&quot; destination transformer to Stringify the encData.length() object and will remove/truncate decimal
2018-02-12 v1.7 JER - Modified the Destination Transformer: Encoded the CCD to output the bytes size length of the encoded CCD used as encFileSize in Soap Xds Metadata versus using the sourceMap fileSize determined from channel source File Reader connector.
2018-02-12 v1.6 JER - Improved handling of many components: ServiceStartTime, ServiceStopTime, XdsSubmissionSet Entry_UUID and included additional logical on handling multiple documentationOf\serviceEvents.
2018-02-07 v1.5 JER - Modified by including additional typeof element &apos;undefined&apos; checks on the getPerformer code-template and the Call getPerformer transformer to resolve and minimize &quot;TypeError: Cannot read property &quot;functionDisplayName&quot; from undefined&quot;
2018-02-01 JER (v1.4) - Modified a few Code-templates, created a destination HTTP Web Sender connect for NIST XD* validation testing and made a few minor adjustments to the Destination Web Server Sender Inbound Message Template.  Passed NIST XD* metadata IHE XDS.b ITI-41 PnR Set-b (no codes check) validation.
2018-01-31 JER (v1.3) - Modified to set the sourceOid from the \ClinicalDocument\author\assignedAuthor\representedOrganization\id\@root, included getPerformer to store serviceEvent\performer instances and channel Map the Web Service response.
2018-01-30 JER (v1.2) - Modified by including checks for undefined and will set to no string {} where applicable and disabled the Strip Namespaces on the Destinations Web Server Sender Inbound Message Template.
2018-01-30 JER (v1.1) - Modified the Source transformer named &quot;Call getClinicalDocumentInfo...&quot; channelMap.put for key: &apos;confCodeDisplayName&apos; to reference getHL7v3Confidentiality displayName property.
2018-01-29 JER (v1.0) - Import Code Templates, modified the Source type to File Reader from Channel Reader and re-enabled the Medicity_Repository destination Web Service Sender. </description>
      <revision>1</revision>
      <sourceConnector version="4.0.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.file.FileReceiverProperties" version="4.0.0">
          <pluginProperties/>
          <pollConnectorProperties version="4.0.0">
            <pollingType>INTERVAL</pollingType>
            <pollOnStart>false</pollOnStart>
            <pollingFrequency>5000</pollingFrequency>
            <pollingHour>0</pollingHour>
            <pollingMinute>0</pollingMinute>
            <cronJobs/>
            <pollConnectorPropertiesAdvanced>
              <weekly>true</weekly>
              <inactiveDays>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
              </inactiveDays>
              <dayOfMonth>1</dayOfMonth>
              <allDay>true</allDay>
              <startingHour>8</startingHour>
              <startingMinute>0</startingMinute>
              <endingHour>17</endingHour>
              <endingMinute>0</endingMinute>
            </pollConnectorPropertiesAdvanced>
          </pollConnectorProperties>
          <sourceConnectorProperties version="4.0.0">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <scheme>FILE</scheme>
          <host>C:/temp/Mirth/messages/in</host>
          <fileFilter>*.xml</fileFilter>
          <regex>false</regex>
          <directoryRecursion>false</directoryRecursion>
          <ignoreDot>true</ignoreDot>
          <anonymous>true</anonymous>
          <username>anonymous</username>
          <password>anonymous</password>
          <timeout>10000</timeout>
          <secure>true</secure>
          <passive>true</passive>
          <validateConnection>true</validateConnection>
          <afterProcessingAction>DELETE</afterProcessingAction>
          <moveToDirectory>C:/temp/Mirth/messages/archive</moveToDirectory>
          <moveToFileName>${originalFilename}_${SYSTIME}</moveToFileName>
          <errorReadingAction>DELETE</errorReadingAction>
          <errorResponseAction>DELETE</errorResponseAction>
          <errorMoveToDirectory></errorMoveToDirectory>
          <errorMoveToFileName></errorMoveToFileName>
          <checkFileAge>true</checkFileAge>
          <fileAge>1000</fileAge>
          <fileSizeMinimum>0</fileSizeMinimum>
          <fileSizeMaximum></fileSizeMaximum>
          <ignoreFileSizeMaximum>true</ignoreFileSizeMaximum>
          <sortBy>date</sortBy>
          <binary>false</binary>
          <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        </properties>
        <transformer version="4.0.0">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
              <name>Call getClinicalDocumentInfo -&gt; Set Document Channel Map variables</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>/* Modified:
2018-12-03  - Modified the debugging of the arrEncounter object
2018-11-20  - Modified additional handling if document extension exists or not
2018-11-12  - Modified for debugging channelName scriptName
2018-02-11  - Added additional checks on documentId for objClinDocInfo.root &amp; extension with fallback to SetId.root &amp; extension
*/
   
/* getPatientRole to set ChannelMap variables */
var debug= 0
var scriptName= &apos;Call getClinicalDocumentInfo&apos;;

if(debug&gt;1) { logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; msg= &apos;+msg); }

var objClinDocInfo= getClinicalDocumentInfo(msg);
channelMap.put(&apos;objClinDocInfo&apos;,objClinDocInfo);

// if objClinicalDocumentInfo root and extension either have a value
if(typeof objClinDocInfo.root !== &apos;undefined&apos;) {
	if ((typeof objClinDocInfo.root !== &apos;undefined&apos;) &amp;&amp; (typeof objClinDocInfo.extension !== &apos;undefined&apos;)) {
		// if both root and extension values exist - concatenate the values for the documentId
		if(objClinDocInfo.root.toString().indexOf(&apos;-&apos;)&gt;-1) {
			if((objClinDocInfo.extension.toString().length &gt;0) &amp;&amp; (objClinDocInfo.extension.toString() !== null)) {
				channelMap.put(&apos;documentId&apos;,objClinDocInfo.root.toString()+&quot;-&quot;+objClinDocInfo.extension.toString());
			} else {
				channelMap.put(&apos;documentId&apos;,objClinDocInfo.root.toString());
			} // end if 
		} else {
			if(objClinDocInfo.extension.toString() !== null) {
				channelMap.put(&apos;documentId&apos;,objClinDocInfo.root.toString()+&quot;.&quot;+objClinDocInfo.extension.toString());
			} else {
				channelMap.put(&apos;documentId&apos;,objClinDocInfo.root.toString());
			} // end if
		} // end if 
		if (debug&gt;0) { logger.error(&quot;documentId: &quot;+channelMap.get(&apos;documentId&apos;)); }
	}  else if ((typeof objClinDocInfo.root === &apos;undefined&apos;) &amp;&amp; (typeof objClinDocInfo.extension !== &apos;undefined&apos;)) {
		// if only extension value exists - concatenate the objEncounter.root (i.e. Oid) and the extension values for the documentId
		// channelMap.put(&apos;documentId&apos;,objEncounter.root.toString()+&quot;.&quot;+objClinDocInfo.extension.toString());
		channelMap.put(&apos;documentId&apos;,objClinDocInfo.extension.toString());
		if (debug&gt;0) { logger.error(&quot;documentId: &quot;+channelMap.get(&apos;documentId&apos;)); }
	}  else if ((typeof objClinDocInfo.root !== &apos;undefined&apos;) &amp;&amp; (typeof objClinDocInfo.extension === &apos;undefined&apos;)) {
		// if only root value exists - concatenate the root and the objEncounter extension values for the documentId
		// channelMap.put(&apos;documentId&apos;,objClinDocInfo.root.toString()+&quot;.&quot;+objEncounter.extension.toString());
		channelMap.put(&apos;documentId&apos;,objClinDocInfo.root.toString());
		if (debug&gt;0) { logger.error(&quot;documentId: &quot;+channelMap.get(&apos;documentId&apos;)); }
	} else { 
		channelMap.put(&quot;documentId&quot;, currentDate_yyyyMMddhhmmss());
		if (debug&gt;0) { logger.error(&quot;documentId: &quot;+channelMap.get(&apos;documentId&apos;)); }
	} // end if
// else if reference objClinicalDocumentInfo SetId root and extension either have a value
} else {
	if ((typeof objClinDocInfo.setIdRoot !== &apos;undefined&apos;) &amp;&amp; (typeof objClinDocInfo.setIdExtension !== &apos;undefined&apos;)) {
		// if both SetId root and extension values exist - concatenate the values for the documentId
		channelMap.put(&apos;documentId&apos;,objClinDocInfo.setIdRoot.toString()+&quot;.&quot;+objClinDocInfo.SetIdExtension.toString());
		if (debug&gt;0) { logger.error(&quot;documentId: &quot;+objClinDocInfo.setIdRoot.toString()+&quot;:&quot;+objClinDocInfo.setIdExtension.toString()); }	
	}  else if ((typeof objClinDocInfo.setIdRoot === &apos;undefined&apos;) &amp;&amp; (typeof objClinDocInfo.setIdExtension !== &apos;undefined&apos;)) {
		// if only SetId extension value exists - concatenate the objEncounter.root (i.e. Oid) and the extension values for the documentId
		channelMap.put(&apos;documentId&apos;,objEncounter.root.toString()+&quot;.&quot;+objClinDocInfo.setIdExtension.toString());
		if (debug&gt;0) { logger.error(&quot;documentId: &quot;+objEncounter.root.toString()+&quot;.&quot;+objClinDocInfo.setIdExtension.toString()); }		
	}  else if ((typeof objClinDocInfo.setIdRoot !== &apos;undefined&apos;) &amp;&amp; (typeof objClinDocInfo.setIdExtension === &apos;undefined&apos;)) {
		// if only SetId root value exists - concatenate the root and the objEncounter extension values for the documentId
		channelMap.put(&apos;documentId&apos;,objClinDocInfo.setIdRoot.toString()+&quot;.&quot;+objEncounter.extension.toString());
		if (debug&gt;0) { logger.error(&quot;documentId: &quot;+objClinDocInfo.root.toString()+&quot;.&quot;+objEncounter.extension.toString()); }		
	} else { 
		channelMap.put(&quot;documentId&quot;, currentDate_yyyyMMddhhmmss());
	} // end if
} // end if

if (typeof objClinDocInfo.code !== &apos;undefined&apos;) {
	if (objClinDocInfo.code.toString().length&gt;0) {
		channelMap.put(&apos;documentCode&apos;, objClinDocInfo.code.toString());
		if(debug&gt;0) { logger.error(&quot;documentCode: &quot;+objClinDocInfo.code.toString()); }
	} // end if 
} else { channelMap.put(&quot;documentCode&quot;, &quot;34133-9&quot;); }

if (typeof objClinDocInfo.codeSystemOid !== &apos;undefined&apos;) {
	if (objClinDocInfo.codeSystemOid.toString().length&gt;0) {
		channelMap.put(&apos;documentCodeSystemOid&apos;,objClinDocInfo.codeSystemOid.toString());
		if(debug&gt;0) { logger.error(&quot;documentCodeSystemOid: &quot;+objClinDocInfo.codeSystemOid.toString());	}
	} // end if 
} else { channelMap.put(&quot;documentCodeSystemOid&quot;, &quot;2.16.840.1.113883.6.1&quot;); }

if (typeof objClinDocInfo.codeSystemName !== &apos;undefined&apos;) {
	if (objClinDocInfo.codeSystemName.toString().length&gt;0) {
		channelMap.put(&apos;documentCodeSystem&apos;,objClinDocInfo.codeSystemName.toString());
		if(debug&gt;0) { logger.error(&quot;documentCodeSystem: &quot;+objClinDocInfo.codeSystemName.toString()); }
	} // end if
} else { channelMap.put(&quot;documentCodeSystem&quot;, &quot;2.16.840.1.113883.6.1&quot;); }

if (typeof objClinDocInfo.displayName !== &apos;undefined&apos;) {
	if(objClinDocInfo.displayName.toString().length&gt;0) {
		channelMap.put(&apos;documentCodeDisplayName&apos;,objClinDocInfo.displayName.toString());
		if(debug&gt;0) { logger.error(&quot;documentCodeDisplayName: &quot;+objClinDocInfo.displayName.toString()); }
	} // end if
} else { channelMap.put(&quot;documentCodeDisplayName&quot;, &quot;Summarization of Episode Note&quot;); }

if (typeof objClinDocInfo.title !== &apos;undefined&apos;) {
	if(objClinDocInfo.title.toString().length&gt;0) {
		channelMap.put(&apos;documentTitle&apos;,objClinDocInfo.title.toString());
		if(debug&gt;0) { logger.error(&quot;documentTitle: &quot;+objClinDocInfo.title.toString()); }
	} // end if 
} else { channelMap.put(&quot;documentTitle&quot;, &quot;Summarization of Episode Note&quot;); }

if (typeof objClinDocInfo.creationTime !== &apos;undefined&apos;) {
	if(objClinDocInfo.creationTime.toString().length&gt;0) {
		channelMap.put(&apos;documentCreationTime&apos;,objClinDocInfo.creationTime.toString());
		if(debug&gt;0) { logger.error(&quot;documentCreationTime: &quot;+objClinDocInfo.creationTime.toString()); }
	} // end if 
} else { 
	channelMap.put(&quot;documentCreationTime&quot;, currentDate_yyyyMMddhhmmss()); 
}

if (typeof objClinDocInfo.confCode !== &apos;undefined&apos;) {
	if (objClinDocInfo.confCode.toString().length&gt;0) {
		channelMap.put(&apos;confCode&apos;,objClinDocInfo.confCode.toString());
		if(debug&gt;0) { logger.error(&quot;confCode: &quot;+objClinDocInfo.confCode.toString()); }
	} else { 
		channelMap.put(&quot;confCode&quot;, &quot;N&quot;); 
	}
} else { channelMap.put(&quot;confCode&quot;, &quot;N&quot;); }

if (typeof getHL7v3Confidentiality(objClinDocInfo.confCode.toString()).displayName !== &apos;undefined&apos;) {
	if (getHL7v3Confidentiality(objClinDocInfo.confCode.toString()).displayName.toString().length&gt;0) {
		channelMap.put(&apos;confCodeDisplayName&apos;,getHL7v3Confidentiality(objClinDocInfo.confCode.toString()).displayName.toString());
		if(debug&gt;0) { logger.error(&quot;confCodeDisplayName: &quot;+getHL7v3Confidentiality(objClinDocInfo.confCode.toString()).displayName.toString()); }
	} else { 
		channelMap.put(&quot;confCodeDisplayName&quot;, &quot;Normal&quot;); 
	}// end if 
} else { channelMap.put(&quot;confCodeDisplayName&quot;, &quot;Normal&quot;); }

if (typeof objClinDocInfo.confCodeSystemOid !== &apos;undefined&apos;) {
	if (typeof objClinDocInfo.confCodeSystemOid.toString().length&gt;0) {
		channelMap.put(&apos;confCodeSystemOid&apos;, objClinDocInfo.confCodeSystemOid.toString());
		if(debug&gt;0) { logger.error(&quot;confCodeSystemOid: &quot;+objClinDocInfo.confCodeSystemOid.toString()); }
	} else { 
		channelMap.put(&quot;confCodeSystemOid&quot;, &quot;2.16.840.1.113883.5.25&quot;); 
	}// end if 
} else { channelMap.put(&quot;confCodeSystemOid&quot;, &quot;2.16.840.1.113883.5.25&quot;); }

if (typeof objClinDocInfo.languageCode !== &apos;undefined&apos;) {
	if (objClinDocInfo.languageCode.toString().length&gt;0) {
		channelMap.put(&apos;languageCode&apos;, objClinDocInfo.languageCode.toString());
		if(debug&gt;0) { logger.error(&quot;languageCode: &quot;+objClinDocInfo.languageCode.toString()); }
	} else { 
		channelMap.put(&quot;languageCode&quot;, &quot;en-US&quot;); 
	}
} else { channelMap.put(&quot;languageCode&quot;, &quot;en-US&quot;); }</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
              <name>Call getEncounter or fallback to getServiceEvent -&gt; Set Service Event Channel Map variables</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>false</enabled>
              <script>/* 
ScriptName:	getEncounter.js
Description:	Source Connector Transformer to populate ITI-41 XDS Metadata from CCD/CDAR2 document type

Modified
2018-12-03 JER - Modified additional debugging on the arrEncounter and objEncounter objects
2018-11-12 JER - Modified handling of objEncounter.startTime and stopTime
2018-11-12 JER - Modified for debugging channelName scriptName
2018-02-12 JER - Modified to accommodate tertiary conditions to set both startTime and stopTime using Encounters, ServiceEvents and current datetimestamp
2018-02-11 JER - Modified to determine Xds Metadata StartTime and StopTime primary objEncounter, secondary objServiceEvent and finally set to current_datetime
*/

/* getPatientRole to set ChannelMap variables */
var debug= 0
var scriptName= &apos;Call getEncounter&apos;;
if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; msg= &apos;+msg); }

var arrServiceEvent= getServiceEvent(msg);
if(typeof(arrServiceEvent) !== &apos;undefined&apos;) { 
	channelMap.put(&apos;arrServiceEvent&apos;,arrServiceEvent);
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; arrServiceEvent= &apos;+JSON.stringify(arrServiceEvent, null, 4)); }
} // end if 

if (typeof(arrServiceEvent) !== &apos;undefined&apos;) {
	for each(objServiceEvent in arrServiceEvent) {
		if (typeof objServiceEvent.root !== &apos;undefined&apos;) {
			channelMap.put(&apos;serviceEventRoot&apos;,objServiceEvent.root.toString());	
			if(debug&gt;0) { logger.error(&apos;serviceEventRoot: &apos;+objServiceEvent.root.toString()); }
		} else { channelMap.put(&quot;serviceEventRoot&quot;, &quot;&quot;); }

		if (typeof objServiceEvent.Id !== &apos;undefined&apos;) {
			channelMap.put(&apos;serviceEventId&apos;,objServiceEvent.Id.toString());	
			if(debug&gt;0) { logger.error(&apos;serviceEventId: &apos;+objServiceEvent.Id.toString()); }
		} else { channelMap.put(&quot;serviceEventId&quot;, &quot;&quot;); }

		if ((typeof objServiceEvent.root !== &apos;undefined&apos;) &amp;&amp; (typeof objServiceEvent.Id !== &apos;undefined&apos;)) {
			channelMap.put(&apos;serviceEventSubmissionId&apos;,objServiceEvent.root.toString()+&quot;.&quot;+objServiceEvent.Id.toString());	
			if(debug&gt;0) { logger.error(&apos;serviceEventSubmissionId: &apos;+objServiceEvent.root.toString()+&quot;.&quot;+objServiceEvent.Id.toString()); }
		} else { channelMap.put(&quot;serviceEventSubmissionId&quot;, &quot;&quot;); }
	} // end for
} // end if 

var arrEncounter= getEncounter(msg);
if(typeof(arrEncounter) !== &apos;undefined&apos;) { 
	channelMap.put(&apos;arrEncounter&apos;,arrEncounter);
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; arrEncounter= &apos;+JSON.stringify(arrEncounter, null, 4)); }
} // end if 

// primary objEncounter startTime, secondary objServiceEvent and last ditch effort set to current datetime
if(debug&gt;0) { 
	logger.error(&apos;object type[assigningAuthorityName]: &apos;+arrEncounter.assigningAuthorityName);
	logger.error(&apos;object type[extension]: &apos;+arrEncounter.extension);
	logger.error(&apos;object type[root]: &apos;+arrEncounter.root);
	logger.error(&apos;object type[startTime]: &apos;+arrEncounter.startTime);
	logger.error(&apos;object type[stopTime]: &apos;+arrEncounter.stopTime);
} // end if 

if(typeof(arrEncounter) !== &apos;undefined&apos;) {
	// for each(objEncounter in arrEncounter) {
	
	var objEncounter= arrEncounter;
	if(debug&gt;0) { logger.error(&apos;objEncounter: &apos;+JSON.stringify(objEncounter, null, 4)); }
		
	if(typeof objEncounter !== &apos;undefined&apos;) {
		// use Encounter startTime
		if((typeof objEncounter.startTime !== &apos;undefined&apos;)||(objEncounter.startTime !== &apos;&apos;)) {
			if(debug&gt;0) { logger.error(&apos;objEncounter.startTime: &apos;+objEncounter.startTime); }
			if(objEncounter.startTime.toString().length&lt;9) {
				channelMap.put(&apos;serviceStartTime&apos;,objEncounter.startTime.toString()+&apos;0000&apos;);
			} else {
				channelMap.put(&apos;serviceStartTime&apos;,objEncounter.startTime);
			} // end if 
			if(debug&gt;0) { logger.error(&apos;serviceStartTime: &apos;+objEncounter.startTime.toString()); }
		} else {
		// use current datetime
			channelMap.put(&apos;serviceStartTime&apos;, currentDate_yyyyMMddhhmmss()); 
			if(debug&gt;0) { logger.error(&apos;serviceStartTime: &apos;+currentDate_yyyyMMddhhmmss().toString()); }	
		} // end if 
	
		// use Encounter stopTime
		if((typeof objEncounter.stopTime !== &apos;undefined&apos;)||(objEncounter.stopTime !== &apos;&apos;)) {
			if(objEncounter.stopTime.toString().length&lt;9) {
				channelMap.put(&apos;serviceStopTime&apos;,objEncounter.stopTime.toString()+&apos;0000&apos;);
			} else {
				channelMap.put(&apos;serviceStopTime&apos;,objEncounter.stopTime);
			} // end if 
			if(debug&gt;0) { logger.error(&apos;serviceStopTime: &apos;+objEncounter.stopTime.toString()); }
		}  else {
			channelMap.put(&apos;serviceStopTime&apos;, currentDate_yyyyMMddhhmmss()); 
			if(debug&gt;0) { logger.error(&apos;serviceStopTime: &apos;+currentDate_yyyyMMddhhmmss().toString()); }	
		} // end if 
	} // end if 
	// } // end for each
} else if(typeof(arrServiceEvent) !== &apos;undefined&apos;) {
	for each(objServiceEvent in arrServiceEvent) {
		// use ServiceEvent startTime
		if((typeof objServiceEvent.startTime !== &apos;undefined&apos;)||(objServiceEvent.startTime !== &apos;&apos;)) {
			if(objServiceEvent.startTime.toString().length&lt;9) {
				channelMap.put(&apos;serviceStartTime&apos;,objServiceEvent.startTime.toString()+&apos;0000&apos;);
			} else {
				channelMap.put(&apos;serviceStartTime&apos;,objServiceEvent.startTime);
			} // end if 
			if(debug&gt;0) { logger.error(&apos;serviceStartTime: &apos;+objServiceEvent.startTime); }
		} else {
		// use current datetime
			channelMap.put(&apos;serviceStartTime&apos;, currentDate_yyyyMMddhhmmss()); 
			if(debug&gt;0) { logger.error(&apos;serviceStartTime: &apos;+currentDate_yyyyMMddhhmmss().toString()); }	
		} // end if 
	
		// use ServiceEvent stopTime
		if((typeof objServiceEvent.stopTime !== &apos;undefined&apos;)||(objServiceEvent.stopTime !== &apos;&apos;)) {
			if(objServiceEvent.stopTime.toString().length&lt;9) {
				channelMap.put(&apos;serviceStopTime&apos;,objServiceEvent.stopTime.toString()+&apos;0000&apos;);
			} else {
				channelMap.put(&apos;serviceStopTime&apos;,objServiceEvent.stopTime);
			} // end if 
			if(debug&gt;0) { logger.error(&apos;serviceStopTime: &apos;+objServiceEvent.stopTime); }
		}  else {
			channelMap.put(&apos;serviceStopTime&apos;, currentDate_yyyyMMddhhmmss()); 
			if(debug&gt;0) { logger.error(&apos;serviceStopTime: &apos;+currentDate_yyyyMMddhhmmss().toString()); }	
		} // end if
	} // end foreach
} else {
	// use current datetime
	channelMap.put(&apos;serviceStartTime&apos;, currentDate_yyyyMMddhhmmss()); 
	if(debug&gt;0) { logger.error(&apos;serviceStartTime: &apos;+currentDate_yyyyMMddhhmmss().toString()); }	
	
	channelMap.put(&apos;serviceStopTime&apos;, currentDate_yyyyMMddhhmmss()); 
	if(debug&gt;0) { logger.error(&apos;serviceStopTime: &apos;+currentDate_yyyyMMddhhmmss().toString()); }	
} // end if</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
              <name>Call getPatientRole -&gt; Set Patient Channel Map variables</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <script>/* getPatientRole to set ChannelMap variables 
Modified:
2018-11-12 JER - Modified for debugging channelName scriptName
*/

var debug= 0
var scriptName= &apos;Call getPatientRole&apos;;
if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; msg= &apos;+msg); }

var objPatientRole= getPatientRole(msg);
channelMap.put(&apos;objPatientRole&apos;,objPatientRole);

if (typeof objPatientRole.patientId !== &apos;undefined&apos;) {
	channelMap.put(&quot;patientId&quot;,objPatientRole.patientId);
	if(debug&gt;0) { logger.error(&quot;patientId: &quot;+objPatientRole.patientId); }
} else { channelMap.put(&quot;patientId&quot;, &quot;&quot;); }

if (typeof objPatientRole.root !== &apos;undefined&apos;) {
	channelMap.put(&quot;patientIdRootOid&quot;,objPatientRole.root);
	if(debug&gt;0) { logger.error(&quot;localAssigningAuthority: &quot;+objPatientRole.root); }
} else { channelMap.put(&quot;patientIdRootOid&quot;, &quot;&quot;); }
/*
if (typeof getXdsSourcePatientInfo(objPatientRole) !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientInfo&quot;,getXdsSourcePatientInfo(objPatientRole));
	if(debug&gt;0) { logger.error(&quot;sourcePatientId: &quot;+getXdsSourcePatientId(objPatientRole)); }
}
*/
// left off here - 2018-01-30 10:17 CT

// 2018-02-01 12:52 JER - Re-added the set of sourcePatientId channelMap variable
if (typeof getXdsSourcePatientId(objPatientRole) !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientId&quot;,getXdsSourcePatientId(objPatientRole));
	if(debug&gt;0) { logger.error(&quot;sourcePatientId: &quot;+getXdsSourcePatientId(objPatientRole).toString()); }
} else { channelMap.put(&quot;sourcePatientId&quot;, &quot;&quot;); }

if (typeof getXdsSourcePatientInfo(objPatientRole).pid3 !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientInfo_pid3&quot;,getXdsSourcePatientInfo(objPatientRole).pid3);
	if(debug&gt;0) { logger.error(&quot;sourcePatientInfo_pid3: &quot;+getXdsSourcePatientInfo(objPatientRole).pid3.toString()); }
} else { channelMap.put(&quot;sourcePatientInfo_pid3&quot;, &quot;&quot;); }

if (typeof getXdsSourcePatientInfo(objPatientRole).pid5 !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientInfo_pid5&quot;,getXdsSourcePatientInfo(objPatientRole).pid5);
	if(debug&gt;0) { logger.error(&quot;sourcePatientInfo_pid5: &quot;+getXdsSourcePatientInfo(objPatientRole).pid5.toString()); }
} else { channelMap.put(&quot;sourcePatientInfo_pid5&quot;, &quot;&quot;); }

if (typeof getXdsSourcePatientInfo(objPatientRole).pid7 !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientInfo_pid7&quot;,getXdsSourcePatientInfo(objPatientRole).pid7);
	if(debug&gt;0) { logger.error(&quot;sourcePatientInfo_pid7: &quot;+getXdsSourcePatientInfo(objPatientRole).pid7.toString()); }
} else { channelMap.put(&quot;sourcePatientInfo_pid7&quot;, &quot;&quot;); }

if (typeof getXdsSourcePatientInfo(objPatientRole).pid8 !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientInfo_pid8&quot;,getXdsSourcePatientInfo(objPatientRole).pid8);
	if(debug&gt;0) { logger.error(&quot;sourcePatientInfo_pid8: &quot;+getXdsSourcePatientInfo(objPatientRole).pid8.toString()); }
} else { channelMap.put(&quot;sourcePatientInfo_pid8&quot;, &quot;&quot;); }

if (typeof getXdsSourcePatientInfo(objPatientRole).pid11 !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientInfo_pid11&quot;,getXdsSourcePatientInfo(objPatientRole).pid11);
	if(debug&gt;0) { logger.error(&quot;sourcePatientInfo_pid11: &quot;+getXdsSourcePatientInfo(objPatientRole).pid11.toString()); }
} else { channelMap.put(&quot;sourcePatientInfo_pid11&quot;, &quot;&quot;); }

if (typeof getXdsSourcePatientInfo(objPatientRole).pid13 !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientInfo_pid13&quot;,getXdsSourcePatientInfo(objPatientRole).pid13);
	if(debug&gt;0) { logger.error(&quot;sourcePatientInfo_pid13: &quot;+getXdsSourcePatientInfo(objPatientRole).pid13.toString()); }
} else { channelMap.put(&quot;sourcePatientInfo_pid13&quot;, &quot;&quot;); }

if (typeof objPatientRole.lastName !== &apos;undefined&apos;) {
	channelMap.put(&quot;lastName&quot;,objPatientRole.lastName);
	if(debug&gt;0) { logger.error(&quot;objPatientRole.lastName: &quot;+objPatientRole.lastName.toString()); }
} else { channelMap.put(&quot;lastName&quot;, &quot;&quot;); }

if (typeof objPatientRole.firstName !== &apos;undefined&apos;) {
	channelMap.put(&quot;firstName&quot;,objPatientRole.firstName);
	if(debug&gt;0) { logger.error(&quot;objPatientRole.firstName: &quot;+objPatientRole.firstName.toString()); }
} else { channelMap.put(&quot;firstName&quot;, &quot;&quot;); }

// channelMap.put(&quot;gender&quot;,getHL7v3AdministrativeGender(objPatientRole.gender).displayName.toString());
if (typeof objPatientRole.gender !== &apos;undefined&apos;) {
	channelMap.put(&quot;gender&quot;,objPatientRole.gender);
	if(debug&gt;0) { logger.error(&quot;objPatientRole.gender: &quot;+objPatientRole.gender.toString()); }
} else { channelMap.put(&quot;gender&quot;, &quot;&quot;); }

if (typeof objPatientRole.dateOfBirth !== &apos;undefined&apos;) {
	channelMap.put(&quot;dateOfBirth&quot;,objPatientRole.dateOfBirth);
	if(debug&gt;0) { logger.error(&quot;objPatientRole.dateOfBirth: &quot;+objPatientRole.dateOfBirth.toString()); }
} else { channelMap.put(&quot;dateOfBirth&quot;, &quot;&quot;); }

if (typeof objPatientRole.phoneNumber !== &apos;undefined&apos;) {
	channelMap.put(&quot;phoneNumber&quot;,objPatientRole.phoneNumber);
	if(debug&gt;0) { logger.error(&quot;objPatientRole.phoneNumber: &quot;+objPatientRole.phoneNumber.toString()); }
} else { channelMap.put(&quot;phoneNumber&quot;, &quot;&quot;); }</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
              <name>Call getAuthor -&gt; Set Author Channel Map variables</name>
              <sequenceNumber>3</sequenceNumber>
              <enabled>false</enabled>
              <script>/* Modifications
2018-11-12 JER - Modified for debugging channelName scriptName
2018-04-22 JER - Modified to apply additional if-then conditional objAuthor, objPerformer and objCustodian objects and contents and handle no authorInstitution
2018-02-16 10:26 CT JER - Corrected typo in the logger.error statements removing the {&apos;,objAuthor...} with {: &apos;+objAuthor...} 
2018-02-10 JER - Un-deprecate the Call getAuthor transformer 
2018-01-31 - Deprecate use the Call getPerformer transform 
*/
var debug= 0
var scriptName= &apos;Call getAuthor&apos;;
if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; msg= &apos;+msg); }

if(debug&gt;0) { logger.error(&apos;Call getAuthor msg: &apos;+msg +&apos; msg[author]: &apos;+msg[&apos;author&apos;]); } // end if 

	// get array of Author Object
	var objAuthor= getAuthors(msg);
	channelMap.put(&apos;objAuthor&apos;,objAuthor);

	if(debug&gt;0) { logger.error(&apos;objAuthor: &apos;+objAuthor.toSource()+&apos; type: &apos;+typeof objAuthor); }

	// representedOrganization_extension&quot;:&quot;INLP&quot;,&quot;representedOrganization_root&quot;:&quot;2.16.840.1.113883.3.2139.200
	if (typeof objAuthor.representedOrganization_extension !== &apos;undefined&apos;) {
		channelMap.put(&apos;authorIdExtension&apos;,objAuthor.representedOrganization_extension.toString());	
		if(debug&gt;0) { logger.error(&apos;authorIdExtension: &apos;+objAuthor.representedOrganization_extension.toString()); }
	} else { channelMap.put(&quot;authorIdExtension&quot;, &quot;&quot;); }
	
	if (typeof objAuthor.representedOrganization_root !== &apos;undefined&apos;) {
		channelMap.put(&apos;authorIdRoot&apos;,objAuthor.representedOrganization_root.toString());
		if(debug&gt;0) { logger.error(&apos;authorIdRoot: &apos;+objAuthor.representedOrganization_root.toString()); }
	} else { channelMap.put(&quot;authorIdRoot&quot;, &quot;&quot;); }
	
	if (typeof objAuthor.authorizingDevice !== &apos;undefined&apos;) {
		channelMap.put(&apos;authorizingDevice&apos;,objAuthor.authorizingDevice.toString());
		if(debug&gt;0) { logger.error(&apos;authorizingDevice: &apos;+objAuthor.authorizingDevice.toString()); }
	} else { channelMap.put(&quot;authorizingDevice&quot;, &quot;&quot;); }

	/* deprecated
	if (typeof objAuthor.authorInstitution !== &apos;undefined&apos;) {
		channelMap.put(&apos;authorInstitution&apos;,objAuthor.authorInstitution.toString());
		if(debug&gt;0) { logger.error(&apos;authorInstitution: &apos;+objAuthor.authorInstitution.toString()); }
	} else { channelMap.put(&quot;authorInstitution&quot;, &quot;&quot;); }
	*/
	
	// first try from objAuthor - objAuthor.authorInstitution to populate authorInstitution
	if(typeof objAuthor.authorInstitution !== &apos;undefined&apos;) {
		if(debug&gt;0) {
			logger.error(&apos;objAuthor.authorInstitution: &apos;+objAuthor.authorInstitution.toString()+
			&apos; type: &apos;+typeof objAuthor.authorInstitution+
			&apos; length: &apos;+objAuthor.authorInstitution.toString().length);
		} // end if 
		if(objAuthor.authorInstitution.toString().length&gt;0) {
			channelMap.put(&apos;authorInstitution&apos;,objAuthor.authorInstitution.toString());
			if(debug&gt;0) { 
				logger.error(&apos;objAuthor.authorInstitution: &apos;+objAuthor.authorInstitution.toString()); 
			} // end if 
		} // end if
	} // end if

	// get array of Performer Objects
	var objPerformers= getPerformer(msg);		
	channelMap.put(&apos;objPerformers&apos;,objPerformers);

	if(debug&gt;0) { logger.error(&apos;objPerformers: &apos;+objPerformers.toSource()+&apos; type: &apos;+typeof objPerformers); }
	
	// second try from objPerformer - objPerformer.assignedEntity_representedOrganization to populate authorInstitution
	var strAuthorInstitution= channelMap.get(&apos;authorInstitution&apos;);
	if((typeof strAuthorInstitution == &apos;undefined&apos;)||(strAuthorInstitution == null)) {
		if((typeof objPerformers !== &apos;undefined&apos;)&amp;&amp;(objPerformers != null)) {
			for each(objPerformer in objPerformers) {
				if(debug&gt;0) { logger.error(&apos;objPerformer.assignedEntity_representedOrganization= &apos;+objPerformer.assignedEntity_representedOrganization.toString()); }
				if(typeof objPerformer.assignedEntity_representedOrganization !== &apos;undefined&apos;) {
					if(debug&gt;0) {
						logger.error(&apos;objPerformer.assignedEntity_representedOrganization: &apos;+objPerformer.assignedEntity_representedOrganization.toString()+
						&apos; type: &apos;+typeof objPerformer.assignedEntity_representedOrganization+
						&apos; length: &apos;+objPerformer.assignedEntity_representedOrganization.toString().length);
					} // end if 
					if(objPerformer.assignedEntity_representedOrganization.toString().length&gt;0) {
						channelMap.put(&apos;authorInstitution&apos;,objPerformer.assignedEntity_representedOrganization.toString());
						if(debug&gt;0) { 
							logger.error(&apos;objPerformer.authorInstitution: &apos;+objPerformer.assignedEntity_representedOrganization.toString()); 
						} // end if 
					} // end if
				} // end if
			} // end for each
		} // end if  
	} // end if 

	// get array of Custodian Objects
	var objCustodians= getCustodian(msg);
	channelMap.put(&apos;objCustodians&apos;,objCustodians);

	if(debug&gt;0) { logger.error(&apos;objCustodians: &apos;+objCustodians.toSource()+&apos; type: &apos;+typeof objCustodians); }
	
	// third try from objCustodian - objCustodian.representedOrganization to populate authorInstitution
	var strAuthorInstitution= channelMap.get(&apos;authorInstitution&apos;);
	if((typeof strAuthorInstitution == &apos;undefined&apos;)||(strAuthorInstitution == null)) {
		if((typeof objCustodians !== &apos;undefined&apos;)&amp;&amp;(objCustodians != null)) {
			for each(objCustodian in objCustodians) {
				if((typeof objCustodian.representedOrganization !== &apos;undefined&apos;)&amp;&amp;(objCustodian.representedOrganization != null)) {
				if(debug&gt;0) {
					logger.error(&apos;objCustodian.representedOrganization: &apos;+objCustodian.representedOrganization.toString()+
					&apos; type: &apos;+typeof objCustodian.representedOrganization+
					&apos; length: &apos;+objCustodian.representedOrganization.toString().length);
				} // end if 
					if(objCustodian.representedOrganization.toString().length&gt;0) {
						channelMap.put(&apos;authorInstitution&apos;,objCustodian.representedOrganization.toString());
						if(debug&gt;0) { 
							logger.error(&apos;objCustodians.authorInstitution: &apos;+objCustodian.representedOrganization.toString()); 
						} // end if 
					} // end if
				} // end if
			} // end for each
		} // end if
	} // end if

	// one last ditched effort insert non-character string to populate authorInstitution
	var strAuthorInstitution= channelMap.get(&apos;authorInstitution&apos;);
	if(typeof strAuthorInstitution == &apos;undefined&apos;) {
		channelMap.put(&apos;authorInstitution&apos;,&apos;&apos;);
		if(debug&gt;0) { 
			logger.error(&apos;default.authorInstitution: {no value}&apos;); 
		} // end if 
	} // end if 
	
	/* deprecated
	if (typeof getXdsAuthorPerson(objAuthor) !== &apos;undefined&apos;) {
		channelMap.put(&apos;authorPerson&apos;,getXdsAuthorPerson(objAuthor).toString());
		if(debug&gt;0) { logger.error(&apos;authorPerson: &apos;+getXdsAuthorPerson(objAuthor).toString()); }
	} else { channelMap.put(&quot;authorPerson&quot;, &quot;&quot;); }
	*/
//}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
              <name>Call getPerformer, getAuthors and getEncounters -&gt; Set Performer and Authors Channel Map variables</name>
              <sequenceNumber>4</sequenceNumber>
              <enabled>false</enabled>
              <script>/* Modified:
2018-11-12  - Modified for debugging channelName scriptName
2018-02-25 18:16 CT  - Modified to change handling of author.assignedAuthor.assignedPerson.name
2018-02-24 05:16 CT  - Modified the debug logging appropriately to handle undefined occurrences
2018-02-16 19:17 CT  - Modified to call the objPerformers and objEncounters getAssignedEntity related elements and attributes especially to populate the authoring institution, role, speciality and name
2018-02-13 17:11 CT  - Added default values for performerAuthorRole and performerAuthorSpeciality if none is provided
/* getPatientRole to set ChannelMap variables */
var debug= 0;
var strAuthorInstitution= &apos;&apos;;
var strAuthorPerson= &apos;&apos;;
var scriptName= &apos;Call getPerformer&apos;;
if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; msg= &apos;+msg); }

var objPerformers= getPerformer(msg);		// get array of Performer Objects
if(objPerformers !== &apos;undefined&apos;) {
	if(objPerformers.length&gt;0) {
		for each(obj in objPerformers) {
			if(typeof obj.functionCode !== &apos;undefined&apos;) {
				channelMap.put(&apos;objPerformer&apos;,obj);
			} // end if
		} // end for each
	} // end if
} // end if

/*
// set AuthorInstitution
var objAuthor= getAuthors(msg)[0];			// get first Author Object from array
if(objAuthor !== &apos;undefined&apos;) {
	channelMap.put(&apos;objAuthor&apos;,objAuthor);
	if(objAuthor.authorInstitution.toString().length&gt;0) {
		strAuthorInstitution += objAuthor.authorInstitution.toString();
	} else {
		// pull Institution from Performers
		if(objPerformers !== &apos;undefined&apos;) {
			if(objPerformers[0].assignedEntity_representedOrganization.toString().length&gt;0) {
				strAuthorInstitution += objPerformers[0].assignedEntity_representedOrganization.toString();
			} // end if 
		} // end if 
	} // end if 
} // end if 
channelMap.put(&apos;authorInstitution&apos;,strAuthorInstitution);
*/
var objEncounter= channelMap.get(&apos;objEncounter&apos;);

// set Author Role and Speciality
if(typeof objPerformers !== undefined) {
	
	// get AuthorRole from objPerformers
	if ((typeof objPerformers.functionDisplayName !== &apos;undefined&apos;)&amp;&amp;(objPerformers.functionDisplayName.toString().length&gt;0)) {
		channelMap.put(&apos;performerAuthorRole&apos;,objPerformers.functionDisplayName.toString());	
		if(debug&gt;0) { logger.error(&apos;performerAuthorRole: &apos;+objPerformers.functionDisplayName.toString()); }
	} else { 
		channelMap.put(&quot;performerAuthorRole&quot;, &quot;Medical Doctor&quot;); 
	} // end if 

	// get AuthorSpeciality from Performer
	if ((typeof objPerformers.assignedDisplayName !== &apos;undefined&apos;)&amp;&amp;(objPerformers.assignedDisplayName.toString().length&gt;0)) {
		channelMap.put(&apos;performerAuthorSpeciality&apos;,objPerformers.assignedDisplayName.toString());	
		if(debug&gt;0) { logger.error(&apos;performerAuthorSpeciality: &apos;+objPerformers.assignedDisplayName.toString()); }
	} else { 
		channelMap.put(&quot;performerAuthorSpeciality&quot;, &quot;General Medicine&quot;); 
	} // end if 

} else if(typeof objEncounter !== &apos;undefined&apos;) {

	// get AuthorRole from objEncounters
	if ((typeof objEncounter.encounterParticipant_code !== &apos;undefined&apos;)&amp;&amp;(objEncounter.encounterParticipant_code.toString().length&gt;0)) {
		channelMap.put(&apos;performerAuthorRole&apos;,objEncounter.encounterParticipant_code.toString());					// ATND	
		if(debug&gt;0) { logger.error(&apos;performerAuthorRole: &apos;+objEncounter.encounterParticipant_code.toString()); }
	} else if ((typeof objEncounter.assignedEntity_codeDisplayName !== &apos;undefined&apos;)&amp;&amp;(objEncounter.assignedEntity_codeDisplayName.toString().length&gt;0)) {
		channelMap.put(&apos;performerAuthorRole&apos;,objEncounter.assignedEntity_codeDisplayName.toString());					// ATND	
		if(debug&gt;0) { logger.error(&apos;performerAuthorRole: &apos;+objEncounter.assignedEntity_codeDisplayName.toString()); }
	} else { 
		channelMap.put(&quot;performerAuthorRole&quot;, &quot;Medical Doctor&quot;); 
	} // end if 
	
	// get AuthorSpeciality from Performer
	if ((typeof objEncounter.assignedEntity_codeDisplayName !== &apos;undefined&apos;)&amp;&amp;(objEncounter.assignedEntity_codeDisplayName.toString().length&gt;0)) {
		channelMap.put(&apos;performerAuthorSpeciality&apos;,objEncounter.assignedEntity_codeDisplayName.toString());	
		if(debug&gt;0) { logger.error(&apos;performerAuthorSpeciality: &apos;+objEncounter.assignedEntity_codeDisplayName.toString()); }
	} else { 
		channelMap.put(&quot;performerAuthorSpeciality&quot;, &quot;General Medicine&quot;); 
	} // end if 

} else {
	channelMap.put(&quot;performerAuthorRole&quot;, &quot;Medical Doctor&quot;); 
	channelMap.put(&quot;performerAuthorSpeciality&quot;, &quot;General Medicine&quot;); 
} // end if 

// set Authors Name
// first try from objPerformers
if(debug&gt;0) { 
	// logger.error(&apos;Call getPerformers and getAuthors -&gt; objPerformers.assignedEntity_familyName: &apos;+objPerformers.assignedEntity_familyName+
	// &apos; typeof: &apos;+typeof objPerformers.assignedEntity_familyName+
	logger.error(&apos;Call getPerformers -&gt; &apos;+
	&apos; objPerformers: &apos;+JSON.stringify(objPerformers)+
	&apos; typeof: &apos;+typeof objPerformers) 
};

if((typeof objPerformers !== &apos;undefined&apos;)&amp;&amp;(objPerformers != null)&amp;&amp;(objPerformers.length&gt;0)) {
	if((typeof objPerformers[0].assignedEntity_familyName !== &apos;undefined&apos;)&amp;&amp;(objPerformers[0].assignedEntity_familyName != null)) {
		if(debug&gt;0) {
			logger.error(&apos;objPerformers.assignedEntity_familyName: &apos;+objPerformers[0].assignedEntity_familyName.toString()+
			&apos; type: &apos;+typeof objPerformers[0].assignedEntity_familyName+
			&apos; length: &apos;+objPerformers[0].assignedEntity_familyName.toString().length);
		} // end if 
		if(objPerformers[0].assignedEntity_familyName.toString().length&gt;0) {
			strAuthorPerson= getAuthorPerson(objPerformers[0]);
			if(debug&gt;0) { logger.error(&apos;strAuthorPerson: &apos;+strAuthorPerson); }
		} // end if
	} // end if
} // end if 

// second try from objEncounters
if((strAuthorPerson.toString().length&lt;1)&amp;&amp;(typeof objEncounter !== &apos;undefined&apos;)) {
	if(debug&gt;0) { 
		logger.error(&apos;Call getAuthors -&gt; &apos;+
		&apos; strAuthorPerson.toString: &apos;+ strAuthorPerson.toString()+
		&apos; strAuthorPerson length: &apos;+strAuthorPerson.toString().length);
		logger.error(&apos;objEncounter: &apos;+JSON.stringify(objEncounter));
	} // end if
	if((typeof objEncounter.assignedEntity_familyName !== &apos;undefined&apos;)&amp;&amp;(objEncounter.assignedEntity_familyName.toString().length&gt;0)) {
		strAuthorPerson= getAuthorPerson(objEncounter);
		if(debug&gt;0) { logger.error(&apos;strAuthorPerson: &apos;+strAuthorPerson); }
	} // end if 
} // end if 

// set Author Name to Channel Map variable
if (typeof strAuthorPerson !== &apos;undefined&apos;) {
	channelMap.put(&apos;strAuthorPerson&apos;,strAuthorPerson.toString());	
	if(debug&gt;0) { logger.error(&apos;strAuthorPerson: &apos;+strAuthorPerson.toString()); }
} else { 
	channelMap.put(&quot;strAuthorPerson&quot;, &quot;&quot;); 
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
              <name>Set Xds Parameters</name>
              <sequenceNumber>5</sequenceNumber>
              <enabled>false</enabled>
              <script>/* Modified
2018-12-03  - Modified additional debugging to verify sourceOid population
2018-11-12  - Modified for debugging channelName scriptName
2018-02-11  - Modified to include additional handling on the SourceOID, primarily pull from representedOrganization Id in Author, then Custodian and final ditch effort pull from the patientRole patient id root
*/

// additional configurations
var debug= 0;
var scriptName= &apos;Call getPerformer&apos;;
if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; msg= &apos;+msg); }

// static documentSource OID - can be configured to pull based on sending System attributes if needed
var objCustodian= channelMap.put(&apos;objCustodian&apos;,getCustodian(msg));
var objAuthor= $(&apos;objAuthor&apos;);
var objClinDocInfo= $(&apos;objClinDocInfo&apos;);

if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;:(1)Check for objClinDocInfo: &apos;+JSON.stringify(objClinDocInfo, null, 4)); }

if(typeof objClinDocInfo !== &apos;undefined&apos;) {
	// if Clinical Document Id Root exists
	var sourceOid= objClinDocInfo.root.toString();
	channelMap.put(&apos;sourceOid&apos;,objClinDocInfo.root.toString());
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;:(2)objClinDocInfo.root sourceOid= &apos;+objClinDocInfo.root.toString()); }
} else {
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;:(3)Check for objAuthor= &apos;+objAuthor); }
	if(typeof objAuthor !== &apos;undefined&apos;) {
		// if author get from representedOrganization Id root
		if (typeof objAuthor.documentSourceOid !== &apos;undefined&apos;) {
			channelMap.put(&apos;sourceOid&apos;,objAuthor.documentSourceOid.toString());	
			if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;:(4)objAuthor.documentSourceOid sourceOid= &apos;+objAuthor.documentSourceOid.toString()); }
		} else {
		// else if custodian get from representedOrganization Id root
			if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;:(5)objCustodian= &apos;+objCustodian); }
			if(typeof objCustodian !== &apos;undefined&apos;) {
				channelMap.put(&apos;sourceOid&apos;,objCustodian.repOrgIdRoot.toString());
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;:(6)objCustodian.repOrgIdRoot sourceOid= &apos;+objCustodian.repOrgIdRoot.toString()); }
			} else {
				// else last resort pull from the patientRole id root
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;:(7)objPatientRole: &apos;+objPatientRole); }
				if(typeof $(&apos;objPatientRole&apos;) !== &apos;undefined&apos;) {
					channelMap.put(&apos;sourceOid&apos;,$(&apos;objPatientRole&apos;).patientIdRootOid.toString());
					if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;:(8)objPatientRole.patientIdRootOid sourceOid= &apos;+$(&apos;objPatientRole&apos;).patientIdRootOid.toString()); }
				} // end if 
			} // end if 
		} // end if 
	} // end if 
} // end if</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
              <name>Set to MobileMD Document Source and Patient Local AssigningAuthority OIDs</name>
              <sequenceNumber>6</sequenceNumber>
              <enabled>false</enabled>
              <script>/*   ScriptName:  setDocumentSource_PatientLocalAssigningAuthorityOID
	Description: This script is used to normalize the Source Document and Patient Local AssigningAuthority OIDs per CHSWyoming HIE requirements
	Created:     2018-12-17 

	Modified
	2018-12-18 - Modified by storing separate local assigning authorities one for original MedHost and latest MobileMD for patientId
	2018-12-17 - Modified additional debugging to verify sourceOid population
*/

var scriptName= &apos;setDocumentSource_PatientLocalAssigningAuthorityOID&apos;;
var debug= 0;
var environment= globalMap.get(&apos;environment&apos;);

// evaluate Document Source OID
if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; sourceOid: &apos;+$(&apos;sourceOid&apos;)+&apos; check either contains: &apos;+$(&apos;BerwickRootOID&apos;)+&apos; OR: &apos;+$(&apos;TylerRootOID&apos;)); }
if(($(&apos;sourceOid&apos;).indexOf($(&apos;BerwickRootOID&apos;))&gt;-1)||($(&apos;sourceOid&apos;).indexOf($(&apos;TylerRootOID&apos;))&gt;-1)) {
	if(environment.toString().toUpperCase()== &apos;TEST&apos;) {
		channelMap.put(&apos;sourceOid&apos;,globalMap.get(&apos;TestSourceOID&apos;));
	} else {
		channelMap.put(&apos;sourceOid&apos;,globalMap.get(&apos;ProdSourceOID&apos;));
	} // end if 
}  // end if

// evaluate MRN Local AssigningAuthority OID
logger.error(&apos;DEBUG::&apos;+scriptName+&apos; MedHost patientId: &apos;+$(&apos;patientId&apos;)+&apos; MedHost patientIdRootOid: &apos;+$(&apos;patientIdRootOid&apos;));
channelMap.put(&apos;MedHostPatientId&apos;,$(&apos;patientId&apos;)+&apos;^^^&amp;amp;&apos;+$(&apos;patientIdRootOid&apos;)+&apos;&amp;amp;ISO&apos;);

if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; patientIdRootOid: &apos;+$(&apos;patientIdRootOid&apos;)+&apos; check either contains: &apos;+$(&apos;BerwickRootOID&apos;)+&apos; OR: &apos;+$(&apos;TylerRootOID&apos;)); }
if(($(&apos;patientIdRootOid&apos;).indexOf($(&apos;BerwickRootOID&apos;))&gt;-1)||($(&apos;patientIdRootOid&apos;).indexOf($(&apos;TylerRootOID&apos;))&gt;-1)) {
	// check Test environment
	if(environment.toString().toUpperCase()== &apos;TEST&apos;) {
		// check if patient Root OID is Berwick Root OID
		if($(&apos;patientIdRootOid&apos;).indexOf($(&apos;BerwickRootOID&apos;))&gt;-1) {
			channelMap.put(&apos;patientIdRootOid&apos;, globalMap.get(&apos;TestBerwickMRNOID&apos;));
		// check if patient Root OID is Tyler Root OID
		} else if($(&apos;patientIdRootOid&apos;).indexOf($(&apos;TylerRootOID&apos;))&gt;-1) {
			channelMap.put(&apos;patientIdRootOid&apos;, globalMap.get(&apos;TestTylerMRNOID&apos;));
		} // end if 
	// check Prod environment
	} else if(environment.toString().toUpperCase()== &apos;PROD&apos;) {
		// check if patient Root OID is Berwick Root OID
		if($(&apos;patientIdRootOid&apos;).indexOf($(&apos;BerwickRootOID&apos;))&gt;-1) {
			channelMap.put(&apos;patientIdRootOid&apos;, globalMap.get(&apos;ProdBerwickMRNOID&apos;));
		// check if patient Root OID is Tyler Root OID
		} else if($(&apos;patientIdRootOid&apos;).indexOf($(&apos;TylerRootOID&apos;))&gt;-1) {
			channelMap.put(&apos;patientIdRootOid&apos;, globalMap.get(&apos;ProdTylerMRNOID&apos;));
		} // end if 
	} // end if 
}  // end if

logger.error(&apos;DEBUG::&apos;+scriptName+&apos; MedHost patientId: &apos;+$(&apos;patientId&apos;)+&apos; MobileMD patientIdRootOid: &apos;+$(&apos;patientIdRootOid&apos;));
channelMap.put(&apos;MobileMDPatientId&apos;,$(&apos;patientId&apos;)+&apos;^^^&amp;amp;&apos;+$(&apos;patientIdRootOid&apos;)+&apos;&amp;amp;ISO&apos;);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>XML</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.0.0">
          <elements/>
        </filter>
        <transportName>File Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.0.0">
          <metaDataId>14</metaDataId>
          <name>File Writer (C:\temp\Mirth\messages\out)</name>
          <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="4.0.0">
            <pluginProperties/>
            <destinationConnectorProperties version="4.0.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <scheme>FILE</scheme>
            <host>C:/temp/Mirth/messages/out</host>
            <outputPattern>${originalFilename}</outputPattern>
            <anonymous>true</anonymous>
            <username>anonymous</username>
            <password>anonymous</password>
            <timeout>10000</timeout>
            <keepConnectionOpen>true</keepConnectionOpen>
            <maxIdleTime>0</maxIdleTime>
            <secure>true</secure>
            <passive>true</passive>
            <validateConnection>true</validateConnection>
            <outputAppend>true</outputAppend>
            <errorOnExists>false</errorOnExists>
            <temporary>false</temporary>
            <binary>false</binary>
            <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
            <template> &lt;s:Envelope xmlns:s=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:a=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;
  &lt;s:Header&gt;
        &lt;a:Action s:mustUnderstand=&quot;1&quot;&gt;urn:ihe:iti:2007:ProvideAndRegisterDocumentSet-b&lt;/a:Action&gt;
        &lt;a:MessageID&gt;${uuid}&lt;/a:MessageID&gt;
        &lt;a:ReplyTo&gt;
            &lt;a:Address&gt;http://www.w3.org/2005/08/addressing/anonymous&lt;/a:Address&gt;
        &lt;/a:ReplyTo&gt;
        &lt;a:To s:mustUnderstand=&quot;1&quot;&gt;https://certhub.1click2care.net:20000/repository&lt;/a:To&gt;
    &lt;/s:Header&gt;
  &lt;s:Body&gt;
        &lt;ProvideAndRegisterDocumentSetRequest xsi:schemaLocation=&quot;urn:ihe:iti:xds-b:2007 ../../schema/IHE/XDS.b_DocumentRepository.xsd&quot; 
        xmlns=&quot;urn:ihe:iti:xds-b:2007&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        xmlns:lcm=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0&quot; xmlns:rim=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;
        xmlns:rs=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0&quot;&gt;
            &lt;lcm:SubmitObjectsRequest&gt;
                &lt;rim:RegistryObjectList&gt;
                    &lt;rim:ExtrinsicObject id=&quot;${extrinsicObjectUUID}&quot; mimeType=&quot;text/xml&quot; objectType=&quot;urn:uuid:7edca82f-054d-47f2-a032-9b2a5b5186c1&quot;&gt;
                        &lt;rim:Slot name=&quot;creationTime&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;${documentCreationTime}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Slot name=&quot;languageCode&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;${languageCode}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Slot name=&quot;serviceStartTime&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;${serviceStartTime}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Slot name=&quot;serviceStopTime&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;${serviceStopTime}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Slot name=&quot;sourcePatientId&quot;&gt;
                            &lt;rim:ValueList&gt;
								&lt;rim:Value&gt;${sourcePatientId}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Slot name=&quot;sourcePatientInfo&quot;&gt;
                            &lt;rim:ValueList&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid3}&lt;/rim:Value&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid5}&lt;/rim:Value&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid7}&lt;/rim:Value&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid8}&lt;/rim:Value&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid11}&lt;/rim:Value&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid13}&lt;/rim:Value&gt;
							&lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
						&lt;rim:Slot name=&quot;size&quot;&gt;
							&lt;rim:ValueList&gt;
								&lt;rim:Value&gt;${encFileSize}&lt;/rim:Value&gt;
							&lt;/rim:ValueList&gt;
						&lt;/rim:Slot&gt;
						&lt;rim:Slot name=&quot;hash&quot;&gt;
							&lt;rim:ValueList&gt;
								&lt;rim:Value&gt;${ccdHash}&lt;/rim:Value&gt;
							&lt;/rim:ValueList&gt;
						&lt;/rim:Slot&gt;
                        &lt;rim:Name&gt;
                            &lt;rim:LocalizedString value=&quot;${documentTitle}&quot;/&gt;
                        &lt;/rim:Name&gt;
                        &lt;rim:Description/&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;&gt;
                            &lt;rim:Slot name=&quot;authorPerson&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${strAuthorPerson}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorInstitution&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${authorInstitution}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorRole&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${performerAuthorRole}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${performerAuthorSpeciality}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:41a5887f-8865-4c09-adf7-e362475b143a&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;${documentCode}&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${documentCodeSystemOid}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;${documentCodeDisplayName}&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;${confCode}&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${confCodeSystemOid}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;${confCodeDisplayName}&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:a09d5840-386c-46f2-b5ad-9c3699a4309d&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;urn:hl7-org:sdwg:ccda-structuredBody:1.1&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;1.3.6.1.4.1.19376.1.2.3&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;C-CDA R1.1 Continuity of Care Document (CCD)&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;35971002&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;2.16.840.1.113883.6.96&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;Ambulatory care site&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;394814009&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;2.16.840.1.113883.6.96&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;General practice&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:f0306f51-975f-434e-a61c-c59651d33983&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;${documentCode}&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${documentCodeSystemOid}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;${documentCodeDisplayName}&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:ExternalIdentifier id=&quot;${uuid}&quot; registryObject=&quot;${extrinsicObjectUUID}&quot; identificationScheme=&quot;urn:uuid:58a6f841-87b3-4a3e-92fd-a8ffeff98427&quot;
                            value=&quot;${sourcePatientId}&quot;&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;XDSDocumentEntry.patientId&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:ExternalIdentifier&gt;
                        &lt;rim:ExternalIdentifier id=&quot;${uuid}&quot; registryObject=&quot;${extrinsicObjectUUID}&quot; identificationScheme=&quot;urn:uuid:2e82c1f6-a085-4c72-9da3-8640a32e42ab&quot;
                            value=&quot;${documentId}&quot;&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;XDSDocumentEntry.uniqueId&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:ExternalIdentifier&gt;
                    &lt;/rim:ExtrinsicObject&gt;
                    &lt;rim:RegistryPackage id=&quot;${submissionSetUUID}&quot;&gt;
                        &lt;rim:Slot name=&quot;submissionTime&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;${currentDateTime}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Name&gt;
                            &lt;rim:LocalizedString value=&quot;Submission Set&quot;/&gt;
                        &lt;/rim:Name&gt;
                        &lt;rim:Description&gt;
                            &lt;rim:LocalizedString value=&quot;A collection of CDA documents&quot;/&gt;
                        &lt;/rim:Description&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:a7058bb9-b4e4-4307-ba5b-e3f0ab85e12d&quot; classifiedObject=&quot;${submissionSetUUID}&quot;&gt;
                            &lt;rim:Slot name=&quot;authorPerson&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${strAuthorPerson}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorInstitution&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${authorInstitution}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorRole&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${performerAuthorRole}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${performerAuthorSpeciality}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:aa543740-bdda-424e-8c96-df4873be8500&quot; classifiedObject=&quot;${submissionSetUUID}&quot;
                            nodeRepresentation=&quot;${documentCode}&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${documentCodeSystemOid}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;${documentCodeDisplayName}&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:ExternalIdentifier id=&quot;${uuid}&quot; registryObject=&quot;${submissionSetUUID}&quot; identificationScheme=&quot;urn:uuid:96fdda7c-d067-4183-912e-bf5ee74998a8&quot;
                            value=&quot;${submissionSetUniqueId}&quot;&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;XDSSubmissionSet.uniqueId&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:ExternalIdentifier&gt;
                        &lt;rim:ExternalIdentifier id=&quot;${uuid}&quot; registryObject=&quot;${submissionSetUUID}&quot; identificationScheme=&quot;urn:uuid:554ac39e-e3fe-47fe-b233-965d2a147832&quot;
                            value=&quot;${sourceOid}&quot;&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;XDSSubmissionSet.sourceId&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:ExternalIdentifier&gt;
                        &lt;rim:ExternalIdentifier id=&quot;${uuid}&quot; registryObject=&quot;${submissionSetUUID}&quot; identificationScheme=&quot;urn:uuid:6b5aea1a-874d-4603-a4bc-96a0a7b38446&quot;
                            value=&quot;${sourcePatientId}&quot;&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;XDSSubmissionSet.patientId&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:ExternalIdentifier&gt;
                    &lt;/rim:RegistryPackage&gt;
                    &lt;rim:Classification id=&quot;${uuid}&quot; classifiedObject=&quot;${submissionSetUUID}&quot; classificationNode=&quot;urn:uuid:a54d6aa5-d40d-43f9-88c5-b4633d873bdd&quot;/&gt;
                    &lt;rim:Association id=&quot;${uuid}&quot; associationType=&quot;HasMember&quot; sourceObject=&quot;${submissionSetUUID}&quot; targetObject=&quot;${extrinsicObjectUUID}&quot;&gt;
                        &lt;rim:Slot name=&quot;SubmissionSetStatus&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;Original&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                    &lt;/rim:Association&gt;
                &lt;/rim:RegistryObjectList&gt;
            &lt;/lcm:SubmitObjectsRequest&gt;
            &lt;Document id=&quot;${extrinsicObjectUUID}&quot;&gt;${encodedCCD}&lt;/Document&gt;
        &lt;/ProvideAndRegisterDocumentSetRequest&gt;
    &lt;/s:Body&gt;
&lt;/s:Envelope&gt;</template>
          </properties>
          <transformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>currentDateTime</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <variable>currentDateTime</variable>
                <mapping>getCurrentDateTime()</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>uuid</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <variable>uuid</variable>
                <mapping>&quot;urn:uuid:&quot;+UUIDGenerator.getUUID()</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>extrinsicObjectUUID</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <variable>extrinsicObjectUUID</variable>
                <mapping>&quot;urn:uuid:&quot;+UUIDGenerator.getUUID()</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>submissionSetUUID</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <variable>submissionSetUUID</variable>
                <mapping>&quot;urn:uuid:&quot;+UUIDGenerator.getUUID()</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>submissionSetUniqueId</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <variable>submissionSetUniqueId</variable>
                <mapping>$(&apos;documentId&apos;)+&quot;.&quot;+$(&apos;patientId&apos;)</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>Encoded the CCD</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <script>/* Modified: 
2018-02-13 17:34 CT JER - Readded the removed channelMap.put for the encodedCCD
2018-02-13 09:11 CT JER - Stringified the encData object and will remove/truncate decimal
**/
// encoded CCD
// var encData = FileUtil.encode(msg.getBytes(&quot;UTF8&quot;)).replaceAll(&apos;\\s&apos;,&apos;&apos;);
var debug= 0;

var encData = FileUtil.encode(new java.lang.String(msg.toString()).getBytes(&apos;UTF-8&apos;)).replaceAll(&apos;\\s&apos;,&apos;&apos;);
channelMap.put(&apos;encodedCCD&apos;,encData);
if(debug&gt;0) { 
	logger.error(&apos;encFileSize: &apos;+encData.length());
	logger.error(&apos;datatype: &apos;+typeof encData); 
	logger.error(&apos;JSON.stringify: &apos;+JSON.stringify(encData.length())); 
}
// Modify using the JSON.stringify method
var encUTF8Size= JSON.stringify(encData.length());
channelMap.put(&apos;encFileSize&apos;,encUTF8Size);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>ccdHash</name>
                <sequenceNumber>6</sequenceNumber>
                <enabled>true</enabled>
                <variable>ccdHash</variable>
                <mapping>com.google.common.hash.Hashing.sha256().hashUnencodedChars($(&apos;encodedCCD&apos;))</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>set newFileName from originalFileName -&gt; used for File Writer Only</name>
                <sequenceNumber>7</sequenceNumber>
                <enabled>true</enabled>
                <script>// Specific to the File Writer Destination channel
var debug= 0;

// JSON de-objectify object to string for sourceMap variable
var originalFileName= JSON.stringify(sourceMap.get(&apos;originalFilename&apos;));
if (debug&gt;0) { logger.error(&apos;originalFileName is: &apos;+originalFileName.toString()+
	&apos; dataType: &apos;+(typeof originalFileName)
	//&apos; size: &apos;+(origFileName.size())+
	//&apos; values: &apos;+(origFileName.values())	
	); }

var lstFileName= originalFileName.split(&apos;.&apos;);
if (debug&gt;0) { logger.error(&apos;lstFileName is: &apos;+lstFileName
	+&apos; toString: &apos;+lstFileName.toString()
	+&apos; dataType: &apos;+(typeof lstFileName)
	);}

// var newFileShortName= lstOrigFileName[0].toString()+&apos;_&apos;+currentDate_yyyyMMddhhmmss();
var shortName= lstFileName[0].toString()+&apos;_&apos;+currentDate_yyyyMMddhhmmss();
if (debug&gt;0) { logger.error(&apos;shortName is: &apos;+shortName+&apos; dataType: &apos;+(typeof shortName)); }
var fileExt=   lstFileName[1];
if (debug&gt;0) { logger.error(&apos;fileExt is: &apos;+fileExt+&apos; dataType: &apos;+(typeof fileExt)); }
var newFileName= shortName+&apos;.&apos;+fileExt
if (debug&gt;0) { logger.error(&apos;newFileName is: &apos;+newFileName.toString()+&apos; dataType: &apos;+(typeof newFileName)); }
channelMap.put(&apos;newFileName&apos;,newFileName);
// JSON re-objectify string to object
var objNewFileName = JSON.parse(&apos;{&quot;newFileName&quot;:&apos;+newFileName+&apos;}&apos;);
channelMap.put(&apos;objNewFileName&apos;,objNewFileName);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>Get XdsResponse</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>false</enabled>
                <script>var debug= 1;

// where get calling current Destination Connector name (e.g. Medicity_Repository)
var channelConnector= connectorMessage.getConnectorName();
var destination = responseMap.get(channelConnector);
if(typeof destination.getMessage() !== &apos;undefined&apos;) {
	channelMap.put(&apos;XdsResponse&apos;,destination.getMessage());
	if(destination.getStatus() != &apos;SUCCESS&apos;) {
		if(debug&gt;0) { logger.error(channelConnector.toString()+&apos; XdsResponse: &apos;+destination.getMessage()); }
	} // end if
} // end if</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.0.0">
            <elements/>
          </filter>
          <transportName>File Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="4.0.0">
          <metaDataId>15</metaDataId>
          <name>PIX ITI-45 File Writer</name>
          <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="4.0.0">
            <pluginProperties/>
            <destinationConnectorProperties version="4.0.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <scheme>FILE</scheme>
            <host>C:/temp/Mirth/iti45</host>
            <outputPattern>${documentCreationTime}.xml</outputPattern>
            <anonymous>true</anonymous>
            <username>anonymous</username>
            <password>anonymous</password>
            <timeout>10000</timeout>
            <keepConnectionOpen>true</keepConnectionOpen>
            <maxIdleTime>0</maxIdleTime>
            <secure>true</secure>
            <passive>true</passive>
            <validateConnection>true</validateConnection>
            <outputAppend>true</outputAppend>
            <errorOnExists>false</errorOnExists>
            <temporary>false</temporary>
            <binary>false</binary>
            <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
            <template>${message.encodedData}</template>
          </properties>
          <transformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>senderSystemOid</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <variable>senderSystemOid</variable>
                <mapping>$(&apos;sourceOid&apos;)</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>receiverSystemOid</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <variable>receiverSystemOid</variable>
                <mapping>&quot;1.3.6.1.4.1.12559.11.1.2.2.5.7&quot;</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>receiverSystemUrl</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <variable>receiverSystemUrl</variable>
                <mapping>&quot;https://ihe2.mobilemd.com/IHECHSWV/pixcrossrefservice.svc/PIX&quot;</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>PRPA_IN201309UV02 Query</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>// PRPA_IN201309UV02 Query
/* Modified:
2018-12-03  - Added the queryByParameter/dataSource element value @root attribute pulled from $(&apos;sourceOid&apos;) channelMap variable
*/

tmp[&apos;id&apos;][&apos;@root&apos;]= $(&apos;senderSystemOid&apos;);
tmp[&apos;id&apos;][&apos;@extension&apos;]= UUIDGenerator.getUUID();
tmp[&apos;creationTime&apos;][&apos;@value&apos;]= DateUtil.getCurrentDate(&apos;yyyyMMddhhmmss&apos;);
tmp[&apos;processingCode&apos;][&apos;@code&apos;]= globalMap.get(&apos;itiIheProcessingCode&apos;); // P
tmp[&apos;processingModeCode&apos;][&apos;@code&apos;]= globalMap.get(&apos;itiIheProcessingModeCode&apos;); // T

// receiver
tmp[&apos;receiver&apos;][&apos;device&apos;][&apos;id&apos;][&apos;@root&apos;]= $(&apos;receiverSystemOid&apos;);
tmp[&apos;receiver&apos;][&apos;device&apos;][&apos;telecom&apos;][&apos;@value&apos;]= $(&apos;receiverSystemUrl&apos;);

// sender
tmp[&apos;sender&apos;][&apos;device&apos;][&apos;id&apos;][&apos;@root&apos;]= $(&apos;senderSystemOid&apos;);

// queryByParameter
tmp[&apos;controlActProcess&apos;][&apos;queryByParameter&apos;][&apos;queryId&apos;][&apos;@extension&apos;]= $(&apos;patientId&apos;);
tmp[&apos;controlActProcess&apos;][&apos;queryByParameter&apos;][&apos;queryId&apos;][&apos;@root&apos;]= $(&apos;patientIdRootOid&apos;);

// dataSource
// 2018-12-18 17:08 - Modified from $(&apos;sourceOid&apos;) to globalMap.get(&apos;MobileMDAffinityDomainOID&apos;)
tmp[&apos;controlActProcess&apos;][&apos;queryByParameter&apos;][&apos;parameterList&apos;][&apos;dataSource&apos;][&apos;value&apos;][&apos;@root&apos;]= globalMap.get(&apos;MobileMDAffinityDomainOID&apos;);

// patientIdentifier
tmp[&apos;controlActProcess&apos;][&apos;queryByParameter&apos;][&apos;parameterList&apos;][&apos;patientIdentifier&apos;][&apos;value&apos;][&apos;@extension&apos;]= $(&apos;patientId&apos;);
tmp[&apos;controlActProcess&apos;][&apos;queryByParameter&apos;][&apos;parameterList&apos;][&apos;patientIdentifier&apos;][&apos;value&apos;][&apos;@root&apos;]= $(&apos;patientIdRootOid&apos;);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGOCIgc3RhbmRhbG9uZT0ieWVzIj8+CjxQUlBBX0lOMjAxMzA5VVYwMiBJVFNWZXJzaW9uPSJYTUxfMS4wIiB4bWxucz0idXJuOmhsNy1vcmc6djMiPgogICAgPGlkIGV4dGVuc2lvbj0iIiByb290PSIiLz4KICAgIDxjcmVhdGlvblRpbWUgdmFsdWU9IiIvPgogICAgPGludGVyYWN0aW9uSWQgZXh0ZW5zaW9uPSJQUlBBX0lOMjAxMzA5VVYwMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMS4xOCIvPgogICAgPHByb2Nlc3NpbmdDb2RlIGNvZGU9IlQiLz4KICAgIDxwcm9jZXNzaW5nTW9kZUNvZGUgY29kZT0iVCIvPgogICAgPGFjY2VwdEFja0NvZGUgY29kZT0iQUwiLz4KICAgIDxyZWNlaXZlciB0eXBlQ29kZT0iUkNWIj4KICAgICAgICA8ZGV2aWNlIGNsYXNzQ29kZT0iREVWIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICA8aWQgcm9vdD0iIi8+CiAgICAgICAgICAgIDx0ZWxlY29tIHZhbHVlPSIiLz4KICAgICAgICA8L2RldmljZT4KICAgIDwvcmVjZWl2ZXI+CiAgICA8c2VuZGVyIHR5cGVDb2RlPSJTTkQiPgogICAgICAgIDxkZXZpY2UgY2xhc3NDb2RlPSJERVYiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgIDxpZCByb290PSIiLz4KICAgICAgICA8L2RldmljZT4KICAgIDwvc2VuZGVyPgogICAgPGNvbnRyb2xBY3RQcm9jZXNzIGNsYXNzQ29kZT0iQ0FDVCIgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgPGNvZGUgY29kZT0iUFJQQV9URTIwMTMwOVVWMDIiIGRpc3BsYXlOYW1lPSIyLjE2Ljg0MC4xLjExMzg4My4xLjE4Ii8+CiAgICAgICAgPHF1ZXJ5QnlQYXJhbWV0ZXI+CiAgICAgICAgICAgIDxxdWVyeUlkIGV4dGVuc2lvbj0iIiByb290PSIiLz4KICAgICAgICAgICAgPHN0YXR1c0NvZGUgY29kZT0ibmV3Ii8+CiAgICAgICAgICAgIDxyZXNwb25zZVByaW9yaXR5Q29kZSBjb2RlPSJJIi8+CiAgICAgICAgICAgIDxwYXJhbWV0ZXJMaXN0PgogICAgICAgICAgICAgICAgPHBhdGllbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgIDx2YWx1ZSBleHRlbnNpb249IjEiIHJvb3Q9InRlc3QiLz4KICAgICAgICAgICAgICAgICAgICA8c2VtYW50aWNzVGV4dD5QYXRpZW50LmlkPC9zZW1hbnRpY3NUZXh0PgogICAgICAgICAgICAgICAgPC9wYXRpZW50SWRlbnRpZmllcj4KICAgICAgICAgICAgPC9wYXJhbWV0ZXJMaXN0PgogICAgICAgIDwvcXVlcnlCeVBhcmFtZXRlcj4KICAgIDwvY29udHJvbEFjdFByb2Nlc3M+CjwvUFJQQV9JTjIwMTMwOVVWMDI+</outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>getConnectorMessageResponse</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>/*
File: 	getConnectorMessageResponse-noNamespace.js
Created:	2018-12-03

Modified:
2019-01-14 - Removed the document Envelope parent element and special handling for namespaces by entering *:: before each default namespace element or use the specific namespace (e.g. s::[&apos;Body&apos;]) for the namespace specific element.
2018-12-06 - Modified to improve XML object handling, filter if patientId or Extension has no value and add some additional debugging
2018-12-03 - Inserted and modified to store the HIE MPI PatientId Root and Extension
*/

var scriptName= &apos;Test PIX Sender ITI-45 - MobileMD ResponseFilter&apos;
var responseMsg= msg;
channelMap.put(&apos;iti45_ResponseMsg&apos;,responseMsg);
var s= new Namespace(&apos;http://www.w3.org/2003/05/soap-envelope&apos;);
var xsd= new Namespace(&apos;http://www.w3.org/2001/XMLSchema&apos;);
var xsi= new Namespace(&apos;http://www.w3.org/2001/XMLSchema-instance&apos;);
default xml namespace = &apos;urn:hl7-org:v3&apos;;
var debug= 0;

// logger.error(&apos;msg.s::Body.PRPA_IN201310UV02.acknowledgement.typeCode.@code : &apos;+msg.s::[&apos;Body&apos;].*::[&apos;PRPA_IN201310UV02&apos;].*::[&apos;acknowledgement&apos;].*::[&apos;typeCode&apos;][&apos;@code&apos;]);

if(msg.s::[&apos;Body&apos;].*::[&apos;PRPA_IN201310UV02&apos;].*::[&apos;acknowledgement&apos;].*::[&apos;typeCode&apos;][&apos;@code&apos;].toString()== &apos;AE&apos;) {
	
	logger.error(&apos;msg.s::[Body].*::[PRPA_IN201310UV02].*::[acknowledgement].*::[typeCode].*::[@code]= &apos;+msg.s::[&apos;Body&apos;].*::[&apos;PRPA_IN201310UV02&apos;].*::[&apos;acknowledgement&apos;].*::[&apos;typeCode&apos;][&apos;@code&apos;].toString());
	
	var objText= scriptName+&apos;:FAIL&apos;;
	var objError= new Object();
	objError.ackTypeCode= msg.s::[&apos;Body&apos;].*::[&apos;PRPA_IN201310UV02&apos;].*::[&apos;acknowledgement&apos;].*::[&apos;acknowledgementDetail&apos;][&apos;@typeCode&apos;].toString();
	objText+= &apos; AckTypeCode: &apos;+objError.ackTypeCode;
	objError.ackDetailCode= msg.s::[&apos;Body&apos;].*::[&apos;PRPA_IN201310UV02&apos;].*::[&apos;acknowledgement&apos;].*::[&apos;acknowledgementDetail&apos;].*::[&apos;code&apos;][&apos;@code&apos;].toString();
	objText+= &apos; AckDetailCode: &apos;+objError.ackDetailCode;
	objError.ackErrorText= msg.s::[&apos;Body&apos;].*::[&apos;PRPA_IN201310UV02&apos;].*::[&apos;acknowledgement&apos;].*::[&apos;acknowledgementDetail&apos;].*::[&apos;text&apos;].toString();
	objText+= &apos; AckErrorText: &apos;+objError.ackErrorText;
	objError.queryAckRoot= msg.s::[&apos;Body&apos;].*::[&apos;PRPA_IN201310UV02&apos;].*::[&apos;controlActProcess&apos;].*::[&apos;queryAck&apos;].*::[&apos;queryId&apos;][&apos;@root&apos;].toString();
	objText+= &apos; QueryAckRoot: &apos;+objError.queryAckRoot;
	objError.queryAckExtension= msg.s::[&apos;Body&apos;].*::[&apos;PRPA_IN201310UV02&apos;].*::[&apos;controlActProcess&apos;].*::[&apos;queryAck&apos;].*::[&apos;queryId&apos;][&apos;@extension&apos;].toString();
	objText+= &apos; QueryAckExtension: &apos;+objError.queryAckExtension;
	
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;:&apos;+objText); } 
	channelMap.put(&apos;iti45_DestinationFilter&apos;,true);
	return true;
	
} else {
	var objText= scriptName+&apos;:SUCCESS&apos;;

	// set patientIdAssigningAuthorityName		
	if(msg.s::[&apos;Body&apos;].*::[&apos;PRPA_IN201310UV02&apos;].*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].*::[&apos;registrationEvent&apos;].*::[&apos;subject1&apos;].*::[&apos;patient&apos;].*::[&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString().length&gt;0) {
		var patientIdAssigningAuthorityName= msg.s::[&apos;Body&apos;].*::[&apos;PRPA_IN201310UV02&apos;].*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].*::[&apos;registrationEvent&apos;].*::[&apos;subject1&apos;].*::[&apos;patient&apos;].*::[&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString();
	} else {
		var patientIdAssigningAuthorityName= &apos;&apos;;
	} // end if
	objText+= &apos; PatientIdAssigningAuthorityName: &apos;+patientIdAssigningAuthorityName;

	// set patientIdRoot
	if(msg.s::[&apos;Body&apos;].*::[&apos;PRPA_IN201310UV02&apos;].*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].*::[&apos;registrationEvent&apos;].*::[&apos;subject1&apos;].*::[&apos;patient&apos;].*::[&apos;id&apos;][&apos;@root&apos;].toString().length&gt;0) {
		var patientIdRoot= msg.s::[&apos;Body&apos;].*::[&apos;PRPA_IN201310UV02&apos;].*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].*::[&apos;registrationEvent&apos;].*::[&apos;custodian&apos;].*::[&apos;assignedEntity&apos;].*::[&apos;id&apos;][&apos;@root&apos;].toString();
	} else {
		var patientIdRoot= &apos;&apos;;
	} // end if
	objText+= &apos; PatientIdRoot: &apos;+patientIdRoot;

	// set patientIdExtension
	if(msg.s::[&apos;Body&apos;].*::[&apos;PRPA_IN201310UV02&apos;].*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].*::[&apos;registrationEvent&apos;].*::[&apos;custodian&apos;].*::[&apos;assignedEntity&apos;].*::[&apos;id&apos;][&apos;@extension&apos;].toString().length&gt;0) {
		var patientIdExtension= msg.s::[&apos;Body&apos;].*::[&apos;PRPA_IN201310UV02&apos;].*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].*::[&apos;registrationEvent&apos;].*::[&apos;custodian&apos;].*::[&apos;assignedEntity&apos;].*::[&apos;id&apos;][&apos;@extension&apos;].toString();
	} else {
		var patientIdExtension= &apos;&apos;;
	} // end if
	objText+= &apos; PatientIdExtension: &apos;+patientIdExtension;

	if(patientIdExtension.toString().length&gt;0) {
		channelMap.put(&apos;MPI_PatientIdExtension&apos;,patientIdExtension);
		var filter= false;
	} else {
		var filter= true;
	} // end if 
	
	if(patientIdRoot.toString().length&gt;0) {
		channelMap.put(&apos;MPI_PatientIdRoot&apos;,patientIdRoot);
		var filter= false;
	} else {
		var filter= true;
	} // end if 
	
	channelMap.put(&apos;MPI_PatientIdAssigningAuthorityName&apos;,patientIdAssigningAuthorityName);
	// 3875993^^^&amp;amp;1.3.6.1.4.1.37646.1.3.7.14&amp;amp;ISO
	channelMap.put(&apos;sourcePatientId&apos;,patientIdExtension+&apos;^^^&amp;amp;&apos;+patientIdRoot+&apos;&amp;amp;ISO&apos;);
	
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;:&apos;+objText); } 
	channelMap.put(&apos;iti45_DestinationFilter&apos;,filter);
	return filter;
	
} // end if</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PHM6RW52ZWxvcGUgeG1sbnM6YT0iaHR0cDovL3d3dy53My5vcmcvMjAwNS8wOC9hZGRyZXNzaW5nIiB4bWxuczplbnY9Imh0dHA6Ly93d3cudzMub3JnLzIwMDMvMDUvc29hcC1lbnZlbG9wZSIgeG1sbnM6cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMy8wNS9zb2FwLWVudmVsb3BlIj4KICAgIDxzOkhlYWRlcj4KICAgICAgICA8YTpBY3Rpb24gczptdXN0VW5kZXJzdGFuZD0iMSI+dXJuOmhsNy1vcmc6djM6UFJQQV9JTjIwMTMxMFVWMDI8L2E6QWN0aW9uPgogICAgICAgIDxhOk1lc3NhZ2VJRD51cm46dXVpZDo5NDBiYTIwNS1lZGEwLTRhMjMtOTZkYy01NGQzZWJmZjFhNzI8L2E6TWVzc2FnZUlEPgogICAgICAgIDxBY3Rpdml0eUlkIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tLzIwMDQvMDkvU2VydmljZU1vZGVsL0RpYWdub3N0aWNzIiBDb3JyZWxhdGlvbklkPSIwYWRhYmFjNC04MTg3LTRkNTgtYWIzMy1kMDY2YmE0OWUzMjQiPjEzMmExMjRhLWM5ZDAtNDVlMy05N2NlLTU5ZGZkMDdkYzkzZjwvQWN0aXZpdHlJZD4KICAgICAgICA8YTpSZWxhdGVzVG8+dXJuOnV1aWQ6MWVkMmU2NDQtMzZkYS00ZmMxLWI1MjQtMWFmMWEzZTZlNDJiPC9hOlJlbGF0ZXNUbz4KICAgIDwvczpIZWFkZXI+CiAgICA8czpCb2R5PgogICAgICAgIDxQUlBBX0lOMjAxMzEwVVYwMiB4bWxucz0idXJuOmhsNy1vcmc6djMiIHhtbG5zOnhzZD0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIElUU1ZlcnNpb249IlhNTF8xLjAiPgogICAgICAgICAgICA8aWQgcm9vdD0iNzUzOWRlNmYtNTZmMC00OTZlLTkxZjEtNjhmN2MwNjE0YzUzIi8+CiAgICAgICAgICAgIDxjcmVhdGlvblRpbWUgdmFsdWU9IjIwMTkwMTE0MjAyMzE2Ii8+CiAgICAgICAgICAgIDxpbnRlcmFjdGlvbklkIGV4dGVuc2lvbj0iUFJQQV9JTjIwMTMxMFVWMDIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEuNiIvPgogICAgICAgICAgICA8cHJvY2Vzc2luZ0NvZGUgY29kZT0iUCIvPgogICAgICAgICAgICA8cHJvY2Vzc2luZ01vZGVDb2RlIGNvZGU9IlQiLz4KICAgICAgICAgICAgPGFjY2VwdEFja0NvZGUgY29kZT0iTkUiLz4KICAgICAgICAgICAgPHJlY2VpdmVyIHR5cGVDb2RlPSJSQ1YiPgogICAgICAgICAgICAgICAgPGRldmljZSBjbGFzc0NvZGU9IkRFViIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICA8aWQgcm9vdD0iMS4zLjYuMS40LjEuMzc2NDYuMi4zLjguMSIvPgogICAgICAgICAgICAgICAgICAgIDxhc0FnZW50IGNsYXNzQ29kZT0iQUdOVCIgbnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAgICAgICAgICAgICAgICA8cmVwcmVzZW50ZWRPcmdhbml6YXRpb24gY2xhc3NDb2RlPSJPUkciIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgZXh0ZW5zaW9uPSIxMjMiIHJvb3Q9IjEuMi4zIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcmVwcmVzZW50ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9hc0FnZW50PgogICAgICAgICAgICAgICAgPC9kZXZpY2U+CiAgICAgICAgICAgIDwvcmVjZWl2ZXI+CiAgICAgICAgICAgIDxzZW5kZXIgdHlwZUNvZGU9IlNORCI+CiAgICAgICAgICAgICAgICA8ZGV2aWNlIGNsYXNzQ29kZT0iREVWIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAgIDxpZCByb290PSIxLjMuNi4xLjQuMS4xMjU1OS4xMS4xLjIuMi41LjciLz4KICAgICAgICAgICAgICAgICAgICA8dGVsZWNvbSB2YWx1ZT0iaHR0cHM6Ly9paGUyLm1vYmlsZW1kLmNvbS9JSEVDSFNXVi9waXhjcm9zc3JlZnNlcnZpY2Uuc3ZjL1BJWCIvPgogICAgICAgICAgICAgICAgICAgIDxhc0FnZW50IGNsYXNzQ29kZT0iQUdOVCIgbnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAgICAgICAgICAgICAgICA8cmVwcmVzZW50ZWRPcmdhbml6YXRpb24gY2xhc3NDb2RlPSJPUkciIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgZXh0ZW5zaW9uPSIxMjMiIHJvb3Q9IjEuMi4zIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcmVwcmVzZW50ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9hc0FnZW50PgogICAgICAgICAgICAgICAgPC9kZXZpY2U+CiAgICAgICAgICAgIDwvc2VuZGVyPgogICAgICAgICAgICA8YWNrbm93bGVkZ2VtZW50PgogICAgICAgICAgICAgICAgPHR5cGVDb2RlIGNvZGU9IkFBIi8+CiAgICAgICAgICAgICAgICA8dGFyZ2V0TWVzc2FnZT4KICAgICAgICAgICAgICAgICAgICA8aWQgZXh0ZW5zaW9uPSIxMDA5YTBiYi01ZDRmLTRjYzUtODIwNC03YjFlZjc3ODc1MjMiIHJvb3Q9IjEuMy42LjEuNC4xLjM3NjQ2LjIuMy44LjEiLz4KICAgICAgICAgICAgICAgIDwvdGFyZ2V0TWVzc2FnZT4KICAgICAgICAgICAgPC9hY2tub3dsZWRnZW1lbnQ+CiAgICAgICAgICAgIDxjb250cm9sQWN0UHJvY2VzcyBjbGFzc0NvZGU9IkNBQ1QiIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iUFJQQV9URTIwMTMxMFVWMDIiLz4KICAgICAgICAgICAgICAgIDxzdWJqZWN0IHR5cGVDb2RlPSJTVUJKIj4KICAgICAgICAgICAgICAgICAgICA8cmVnaXN0cmF0aW9uRXZlbnQgY2xhc3NDb2RlPSJSRUciIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgICAgICAgICA8aWQgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUgY29kZT0iQWN0aXZlIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzdWJqZWN0MSB0eXBlQ29kZT0iU0JKIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRpZW50IGNsYXNzQ29kZT0iUEFUIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRW50ZXJwcmlzZSBBY2Nlc3MgUmVwb3NpdG9yeSBSb2xsZWQgVXAgRGF0YSIgZXh0ZW5zaW9uPSIyMTY1NjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuNjYwLjEuNTgwMC4xLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZSBjb2RlPSJhY3RpdmUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aWVudFBlcnNvbiBjbGFzc0NvZGU9IlBTTiIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIiBudWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wYXRpZW50UGVyc29uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wYXRpZW50PgogICAgICAgICAgICAgICAgICAgICAgICA8L3N1YmplY3QxPgogICAgICAgICAgICAgICAgICAgICAgICA8Y3VzdG9kaWFuIHR5cGVDb2RlPSJDU1QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkRW50aXR5IGNsYXNzQ29kZT0iQVNTSUdORUQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJFbnRlcnByaXNlIEFjY2VzcyBSZXBvc2l0b3J5IFJvbGxlZCBVcCBEYXRhIiBleHRlbnNpb249IjIxNjU2MiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy42NjAuMS41ODAwLjEuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9jdXN0b2RpYW4+CiAgICAgICAgICAgICAgICAgICAgPC9yZWdpc3RyYXRpb25FdmVudD4KICAgICAgICAgICAgICAgIDwvc3ViamVjdD4KICAgICAgICAgICAgICAgIDxxdWVyeUFjaz4KICAgICAgICAgICAgICAgICAgICA8cXVlcnlJZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSIzODU3NzA3IiBleHRlbnNpb249IjM4NTc3MDciIHJvb3Q9IjEuMy42LjEuNC4xLjM3NjQ2LjIuMy43LjE0Ii8+CiAgICAgICAgICAgICAgICAgICAgPHF1ZXJ5UmVzcG9uc2VDb2RlIGNvZGU9Ik9LIi8+CiAgICAgICAgICAgICAgICA8L3F1ZXJ5QWNrPgogICAgICAgICAgICAgICAgPHF1ZXJ5QnlQYXJhbWV0ZXI+CiAgICAgICAgICAgICAgICAgICAgPHF1ZXJ5SWQgZXh0ZW5zaW9uPSIzODU3NzA3IiByb290PSIxLjMuNi4xLjQuMS4zNzY0Ni4yLjMuNy4xNCIvPgogICAgICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlIGNvZGU9Im5ldyIvPgogICAgICAgICAgICAgICAgICAgIDxyZXNwb25zZVByaW9yaXR5Q29kZSBjb2RlPSJJIi8+CiAgICAgICAgICAgICAgICAgICAgPHBhcmFtZXRlckxpc3Q+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRhU291cmNlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRhdGFTb3VyY2VJZCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy42NjAuMS41ODAwLjEuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbWFudGljc1RleHQ+RGF0YVNvdXJjZS5pZDwvc2VtYW50aWNzVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kYXRhU291cmNlPgogICAgICAgICAgICAgICAgICAgICAgICA8cGF0aWVudElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUgZXh0ZW5zaW9uPSIzODU3NzA3IiByb290PSIxLjMuNi4xLjQuMS4zNzY0Ni4yLjMuNy4xNCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbWFudGljc1RleHQ+UGF0aWVudC5pZDwvc2VtYW50aWNzVGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wYXRpZW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICA8L3BhcmFtZXRlckxpc3Q+CiAgICAgICAgICAgICAgICA8L3F1ZXJ5QnlQYXJhbWV0ZXI+CiAgICAgICAgICAgIDwvY29udHJvbEFjdFByb2Nlc3M+CiAgICAgICAgPC9QUlBBX0lOMjAxMzEwVVYwMj4KICAgIDwvczpCb2R5Pgo8L3M6RW52ZWxvcGU+Cg==</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.0.0">
            <elements/>
          </filter>
          <transportName>File Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="4.0.0">
          <metaDataId>16</metaDataId>
          <name>ITI-41 Repository - Mobile MD</name>
          <properties class="com.mirth.connect.connectors.ws.WebServiceDispatcherProperties" version="4.0.0">
            <pluginProperties/>
            <destinationConnectorProperties version="4.0.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <wsdlUrl>https://ihe2.mobilemd.com/IHECHSWV/Repository.svc?wsdl</wsdlUrl>
            <service></service>
            <port></port>
            <operation>Press Get Operations</operation>
            <locationURI></locationURI>
            <socketTimeout>0</socketTimeout>
            <useAuthentication>false</useAuthentication>
            <username></username>
            <password></password>
            <envelope> &lt;s:Envelope xmlns:s=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:a=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;
  &lt;s:Header&gt;
        &lt;a:Action s:mustUnderstand=&quot;1&quot;&gt;urn:ihe:iti:2007:ProvideAndRegisterDocumentSet-b&lt;/a:Action&gt;
        &lt;a:MessageID&gt;${uuid}&lt;/a:MessageID&gt;
        &lt;a:ReplyTo&gt;
            &lt;a:Address&gt;http://www.w3.org/2005/08/addressing/anonymous&lt;/a:Address&gt;
        &lt;/a:ReplyTo&gt;
        &lt;a:To s:mustUnderstand=&quot;1&quot;&gt;https://certhub.1click2care.net:20000/repository&lt;/a:To&gt;
    &lt;/s:Header&gt;
  &lt;s:Body&gt;
        &lt;ProvideAndRegisterDocumentSetRequest xsi:schemaLocation=&quot;urn:ihe:iti:xds-b:2007 ../../schema/IHE/XDS.b_DocumentRepository.xsd&quot; 
        xmlns=&quot;urn:ihe:iti:xds-b:2007&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        xmlns:lcm=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0&quot; xmlns:rim=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;
        xmlns:rs=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0&quot;&gt;
            &lt;lcm:SubmitObjectsRequest&gt;
                &lt;rim:RegistryObjectList&gt;
                    &lt;rim:ExtrinsicObject id=&quot;${extrinsicObjectUUID}&quot; mimeType=&quot;text/xml&quot; objectType=&quot;urn:uuid:7edca82f-054d-47f2-a032-9b2a5b5186c1&quot;&gt;
                        &lt;rim:Slot name=&quot;creationTime&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;${documentCreationTime}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Slot name=&quot;languageCode&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;${languageCode}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Slot name=&quot;serviceStartTime&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;${serviceStartTime}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Slot name=&quot;serviceStopTime&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;${serviceStopTime}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Slot name=&quot;sourcePatientId&quot;&gt;
                            &lt;rim:ValueList&gt;
								&lt;rim:Value&gt;${sourcePatientId}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Slot name=&quot;sourcePatientInfo&quot;&gt;
                            &lt;rim:ValueList&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid3}&lt;/rim:Value&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid5}&lt;/rim:Value&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid7}&lt;/rim:Value&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid8}&lt;/rim:Value&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid11}&lt;/rim:Value&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid13}&lt;/rim:Value&gt;
							&lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
						&lt;rim:Slot name=&quot;size&quot;&gt;
							&lt;rim:ValueList&gt;
								&lt;rim:Value&gt;${encFileSize}&lt;/rim:Value&gt;
							&lt;/rim:ValueList&gt;
						&lt;/rim:Slot&gt;
						&lt;rim:Slot name=&quot;hash&quot;&gt;
							&lt;rim:ValueList&gt;
								&lt;rim:Value&gt;${ccdHash}&lt;/rim:Value&gt;
							&lt;/rim:ValueList&gt;
						&lt;/rim:Slot&gt;
                        &lt;rim:Name&gt;
                            &lt;rim:LocalizedString value=&quot;${documentTitle}&quot;/&gt;
                        &lt;/rim:Name&gt;
                        &lt;rim:Description/&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;&gt;
                            &lt;rim:Slot name=&quot;authorPerson&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${strAuthorPerson}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorInstitution&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${authorInstitution}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorRole&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${performerAuthorRole}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${performerAuthorSpeciality}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:41a5887f-8865-4c09-adf7-e362475b143a&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;${documentCode}&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${documentCodeSystemOid}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;${documentCodeDisplayName}&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;${confCode}&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${confCodeSystemOid}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;${confCodeDisplayName}&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:a09d5840-386c-46f2-b5ad-9c3699a4309d&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;urn:hl7-org:sdwg:ccda-structuredBody:1.1&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;1.3.6.1.4.1.19376.1.2.3&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;C-CDA R1.1 Continuity of Care Document (CCD)&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;35971002&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;2.16.840.1.113883.6.96&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;Ambulatory care site&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;394814009&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;2.16.840.1.113883.6.96&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;General practice&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:f0306f51-975f-434e-a61c-c59651d33983&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;${documentCode}&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${documentCodeSystemOid}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;${documentCodeDisplayName}&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:ExternalIdentifier id=&quot;${uuid}&quot; registryObject=&quot;${extrinsicObjectUUID}&quot; identificationScheme=&quot;urn:uuid:58a6f841-87b3-4a3e-92fd-a8ffeff98427&quot;
                            value=&quot;${sourcePatientId}&quot;&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;XDSDocumentEntry.patientId&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:ExternalIdentifier&gt;
                        &lt;rim:ExternalIdentifier id=&quot;${uuid}&quot; registryObject=&quot;${extrinsicObjectUUID}&quot; identificationScheme=&quot;urn:uuid:2e82c1f6-a085-4c72-9da3-8640a32e42ab&quot;
                            value=&quot;${documentId}&quot;&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;XDSDocumentEntry.uniqueId&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:ExternalIdentifier&gt;
                    &lt;/rim:ExtrinsicObject&gt;
                    &lt;rim:RegistryPackage id=&quot;${submissionSetUUID}&quot;&gt;
                        &lt;rim:Slot name=&quot;submissionTime&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;${currentDateTime}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Name&gt;
                            &lt;rim:LocalizedString value=&quot;Submission Set&quot;/&gt;
                        &lt;/rim:Name&gt;
                        &lt;rim:Description&gt;
                            &lt;rim:LocalizedString value=&quot;A collection of CDA documents&quot;/&gt;
                        &lt;/rim:Description&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:a7058bb9-b4e4-4307-ba5b-e3f0ab85e12d&quot; classifiedObject=&quot;${submissionSetUUID}&quot;&gt;
                            &lt;rim:Slot name=&quot;authorPerson&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${strAuthorPerson}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorInstitution&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${authorInstitution}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorRole&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${performerAuthorRole}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${performerAuthorSpeciality}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:aa543740-bdda-424e-8c96-df4873be8500&quot; classifiedObject=&quot;${submissionSetUUID}&quot;
                            nodeRepresentation=&quot;${documentCode}&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${documentCodeSystem}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;${documentCodeDisplayName}&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:ExternalIdentifier id=&quot;${uuid}&quot; registryObject=&quot;${submissionSetUUID}&quot; identificationScheme=&quot;urn:uuid:96fdda7c-d067-4183-912e-bf5ee74998a8&quot;
                            value=&quot;${submissionSetUniqueId}&quot;&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;XDSSubmissionSet.uniqueId&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:ExternalIdentifier&gt;
                        &lt;rim:ExternalIdentifier id=&quot;${uuid}&quot; registryObject=&quot;${submissionSetUUID}&quot; identificationScheme=&quot;urn:uuid:554ac39e-e3fe-47fe-b233-965d2a147832&quot;
                            value=&quot;${sourceOid}&quot;&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;XDSSubmissionSet.sourceId&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:ExternalIdentifier&gt;
                        &lt;rim:ExternalIdentifier id=&quot;${uuid}&quot; registryObject=&quot;${submissionSetUUID}&quot; identificationScheme=&quot;urn:uuid:6b5aea1a-874d-4603-a4bc-96a0a7b38446&quot;
                            value=&quot;${sourcePatientId}&quot;&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;XDSSubmissionSet.patientId&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:ExternalIdentifier&gt;
                    &lt;/rim:RegistryPackage&gt;
                    &lt;rim:Classification id=&quot;${uuid}&quot; classifiedObject=&quot;${submissionSetUUID}&quot; classificationNode=&quot;urn:uuid:a54d6aa5-d40d-43f9-88c5-b4633d873bdd&quot;/&gt;
                    &lt;rim:Association id=&quot;${uuid}&quot; associationType=&quot;HasMember&quot; sourceObject=&quot;${submissionSetUUID}&quot; targetObject=&quot;${extrinsicObjectUUID}&quot;&gt;
                        &lt;rim:Slot name=&quot;SubmissionSetStatus&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;Original&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                    &lt;/rim:Association&gt;
                &lt;/rim:RegistryObjectList&gt;
            &lt;/lcm:SubmitObjectsRequest&gt;
            &lt;Document id=&quot;${extrinsicObjectUUID}&quot;&gt;${encodedCCD}&lt;/Document&gt;
        &lt;/ProvideAndRegisterDocumentSetRequest&gt;
    &lt;/s:Body&gt;
&lt;/s:Envelope&gt;</envelope>
            <oneWay>true</oneWay>
            <headers/>
            <headersVariable></headersVariable>
            <isUseHeadersVariable>false</isUseHeadersVariable>
            <useMtom>false</useMtom>
            <attachmentNames/>
            <attachmentContents/>
            <attachmentTypes/>
            <attachmentsVariable></attachmentsVariable>
            <isUseAttachmentsVariable>false</isUseAttachmentsVariable>
            <soapAction></soapAction>
          </properties>
          <transformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>currentDateTime</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <variable>currentDateTime</variable>
                <mapping>currentDate_yyyyMMddhhmmss()</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>inMessage</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <variable>inMessage</variable>
                <mapping>connectorMessage.getRawData()</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>uuid</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <variable>uuid</variable>
                <mapping>&quot;urn:uuid:&quot;+UUIDGenerator.getUUID()</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>messageUUID</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <variable>messageUUID</variable>
                <mapping>&quot;urn:uuid:&quot;+UUIDGenerator.getUUID()</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>classificationUUID</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <script>channelMap.put(&apos;classificationUUID1&apos;,&quot;urn:uuid:&quot;+UUIDGenerator.getUUID());
channelMap.put(&apos;classificationUUID2&apos;,&quot;urn:uuid:&quot;+UUIDGenerator.getUUID());
channelMap.put(&apos;classificationUUID3&apos;,&quot;urn:uuid:&quot;+UUIDGenerator.getUUID());
channelMap.put(&apos;classificationUUID4&apos;,&quot;urn:uuid:&quot;+UUIDGenerator.getUUID());
channelMap.put(&apos;classificationUUID5&apos;,&quot;urn:uuid:&quot;+UUIDGenerator.getUUID());
channelMap.put(&apos;classificationUUID6&apos;,&quot;urn:uuid:&quot;+UUIDGenerator.getUUID());
channelMap.put(&apos;classificationUUID7&apos;,&quot;urn:uuid:&quot;+UUIDGenerator.getUUID());
channelMap.put(&apos;classificationUUID8&apos;,&quot;urn:uuid:&quot;+UUIDGenerator.getUUID());
channelMap.put(&apos;classificationUUID9&apos;,&quot;urn:uuid:&quot;+UUIDGenerator.getUUID());
channelMap.put(&apos;classificationUUID0&apos;,&quot;urn:uuid:&quot;+UUIDGenerator.getUUID());</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>extrinsicObjectUUID</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <variable>extrinsicObjectUUID</variable>
                <mapping>&quot;urn:uuid:&quot;+UUIDGenerator.getUUID()</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>externalIdentifierUUID</name>
                <sequenceNumber>6</sequenceNumber>
                <enabled>true</enabled>
                <script>channelMap.put(&apos;externalIdentifierUUID0&apos;,&quot;urn:uuid:&quot;+UUIDGenerator.getUUID());
channelMap.put(&apos;externalIdentifierUUID1&apos;,&quot;urn:uuid:&quot;+UUIDGenerator.getUUID());
channelMap.put(&apos;externalIdentifierUUID2&apos;,&quot;urn:uuid:&quot;+UUIDGenerator.getUUID());
channelMap.put(&apos;externalIdentifierUUID3&apos;,&quot;urn:uuid:&quot;+UUIDGenerator.getUUID());
channelMap.put(&apos;externalIdentifierUUID4&apos;,&quot;urn:uuid:&quot;+UUIDGenerator.getUUID());

// channelMap.put(&apos;sourcePatientInfo_pid3&apos;,$(&apos;sourcePatientId&apos;));</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>submissionSetUUID</name>
                <sequenceNumber>7</sequenceNumber>
                <enabled>true</enabled>
                <variable>submissionSetUUID</variable>
                <mapping>&quot;urn:uuid:&quot;+UUIDGenerator.getUUID()</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>sourcePatientId</name>
                <sequenceNumber>8</sequenceNumber>
                <enabled>true</enabled>
                <script>channelMap.put(&apos;sourcePatientId&apos;,$(&apos;MPI_PatientIdExtension&apos;)+&quot;^^^&amp;amp;&quot;+$(&apos;MPI_PatientIdRoot&apos;)+&quot;&amp;amp;ISO&quot;);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>submissionSetUniqueId</name>
                <sequenceNumber>9</sequenceNumber>
                <enabled>true</enabled>
                <variable>submissionSetUniqueId</variable>
                <mapping>$(&apos;documentId&apos;)+&quot;.&quot;+$(&apos;patientId&apos;)</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>associationUUID</name>
                <sequenceNumber>10</sequenceNumber>
                <enabled>true</enabled>
                <variable>associationUUID</variable>
                <mapping>&quot;urn:uuid:&quot;+UUIDGenerator.getUUID()</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>ccdHash</name>
                <sequenceNumber>11</sequenceNumber>
                <enabled>true</enabled>
                <variable>ccdHash</variable>
                <mapping>com.google.common.hash.Hashing.sha1().hashUnencodedChars($(&apos;inMessage&apos;))</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>encodedCCD</name>
                <sequenceNumber>12</sequenceNumber>
                <enabled>true</enabled>
                <variable>encodedCCD</variable>
                <mapping>FileUtil.encode(new java.lang.String($(&apos;inMessage&apos;).toString()).getBytes(&apos;UTF-8&apos;));</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>encFileSize</name>
                <sequenceNumber>13</sequenceNumber>
                <enabled>true</enabled>
                <variable>encFileSize</variable>
                <mapping>$(&apos;inMessage&apos;).length().toString();</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>Get Xds Response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>/*
File: 	getConnectorMessageResponse.js
Created:	2018-12-03

Modified:
2018-12-17 - Modified to improve XML object handling and additional debugging
*/

var scriptName= &apos;Test ITI-41 Repository - MobileMD ResponseTransformer&apos;
var responseMsg= msg;
var ResponseMessage = response.getMessage();
var debug= 1;

// where get calling current Destination Connector name (e.g. Medicity_Repository)
var channelConnector= connectorMessage.getConnectorName();
var destination = responseMap.get(channelConnector);
if(typeof msg !== &apos;undefined&apos; &amp;&amp; msg !== null) {
	channelMap.put(&apos;iti41_ResponseMsg&apos;,responseMsg);
	if(msg.*::[&apos;Body&apos;].*::[&apos;RegistryResponse&apos;][&apos;@status&apos;].toString().toUpperCase().indexOf(&apos;SUCCESS&apos;)&gt;-1) {
		if(debug&gt;0) { logger.error(channelConnector.toString()+&apos; XdsResponse SUCCESS: &apos;+msg.*::[&apos;Body&apos;].*::[&apos;RegistryResponse&apos;].toString()); }
	} else {
		responseMessage.setStatus()= &apos;ERROR&apos;
		if(debug&gt;0) { logger.error(channelConnector.toString()+&apos; XdsResponse ERROR: &apos;+msg.*::[&apos;Body&apos;].*::[&apos;RegistryResponse&apos;].toString()); }
	} // end if 
} // end if</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="4.0.0">
                <name>Accept message if &quot;$(&apos;iti45_DestinationFilter&apos;)&quot; equals false</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <field>$(&apos;iti45_DestinationFilter&apos;)</field>
                <condition>EQUALS</condition>
                <values>
                  <string>false</string>
                </values>
              </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
            </elements>
          </filter>
          <transportName>Web Service Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="4.0.0">
          <metaDataId>19</metaDataId>
          <name>PIX ITI-45 SOAP Query CHS Wyoming Valley Endpoint</name>
          <properties class="com.mirth.connect.connectors.ws.WebServiceDispatcherProperties" version="4.0.0">
            <pluginProperties/>
            <destinationConnectorProperties version="4.0.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <wsdlUrl>https://test2.mobilemd.com/IHECHSWyomingValleyTest/pixcrossreference.svc?wsdl</wsdlUrl>
            <service></service>
            <port></port>
            <operation>Press Get Operations</operation>
            <locationURI></locationURI>
            <socketTimeout>30000</socketTimeout>
            <useAuthentication>false</useAuthentication>
            <username></username>
            <password></password>
            <envelope></envelope>
            <oneWay>false</oneWay>
            <headers/>
            <headersVariable></headersVariable>
            <isUseHeadersVariable>false</isUseHeadersVariable>
            <useMtom>false</useMtom>
            <attachmentNames/>
            <attachmentContents/>
            <attachmentTypes/>
            <attachmentsVariable></attachmentsVariable>
            <isUseAttachmentsVariable>false</isUseAttachmentsVariable>
            <soapAction></soapAction>
          </properties>
          <transformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>senderSystemOid</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <variable>senderSystemOid</variable>
                <mapping>&quot;1.3.6.1.4.1.12559.11.25.1.8&quot;</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>receiverSystemOid</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <variable>receiverSystemOid</variable>
                <mapping>&quot;1.3.6.1.4.1.12559.11.20.1.9&quot;</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>receiverSystemUrl</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <variable>receiverSystemUrl</variable>
                <mapping>&quot;https://ehealthsuisse.ihe-europe.net/PAMSimulator-ejb/PIXManager_Service/PIXManager_PortType&quot;</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>PRPA_IN201309UV02 Query</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>// PRPA_IN201309UV02 Query

tmp[&apos;id&apos;][&apos;@root&apos;]= $(&apos;senderSystemOid&apos;);
tmp[&apos;id&apos;][&apos;@extension&apos;]= UUIDGenerator.getUUID();
tmp[&apos;creationTime&apos;][&apos;@value&apos;]= DateUtil.getCurrentDate(&apos;yyyyMMddhhmmss&apos;);
tmp[&apos;processingCode&apos;][&apos;@code&apos;]= globalMap.get(&apos;itiIheProcessingCode&apos;);
tmp[&apos;processingModeCode&apos;][&apos;@code&apos;]= globalMap.get(&apos;itiIheProcessingCode&apos;);

// receiver
tmp[&apos;receiver&apos;][&apos;device&apos;][&apos;id&apos;][&apos;@root&apos;]= $(&apos;receiverSystemOid&apos;);
tmp[&apos;receiver&apos;][&apos;device&apos;][&apos;telecom&apos;][&apos;@value&apos;]= $(&apos;receiverSystemUrl&apos;);

// sender
tmp[&apos;sender&apos;][&apos;device&apos;][&apos;id&apos;][&apos;@root&apos;]= $(&apos;senderSystemOid&apos;);

// queryByParameter
tmp[&apos;controlActProcess&apos;][&apos;queryByParameter&apos;][&apos;queryId&apos;][&apos;@extension&apos;]= $(&apos;patientId&apos;);
tmp[&apos;controlActProcess&apos;][&apos;queryByParameter&apos;][&apos;queryId&apos;][&apos;@root&apos;]= $(&apos;patientIdRootOid&apos;);

// patientIdentifier
tmp[&apos;controlActProcess&apos;][&apos;queryByParameter&apos;][&apos;parameterList&apos;][&apos;patientIdentifier&apos;][&apos;value&apos;][&apos;@extension&apos;]= $(&apos;patientId&apos;);
tmp[&apos;controlActProcess&apos;][&apos;queryByParameter&apos;][&apos;parameterList&apos;][&apos;patientIdentifier&apos;][&apos;value&apos;][&apos;@root&apos;]= $(&apos;patientIdRootOid&apos;);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGOCIgc3RhbmRhbG9uZT0ieWVzIj8+CjxQUlBBX0lOMjAxMzA5VVYwMiBJVFNWZXJzaW9uPSJYTUxfMS4wIiB4bWxucz0idXJuOmhsNy1vcmc6djMiPgogICAgPGlkIGV4dGVuc2lvbj0iIiByb290PSIiLz4KICAgIDxjcmVhdGlvblRpbWUgdmFsdWU9IiIvPgogICAgPGludGVyYWN0aW9uSWQgZXh0ZW5zaW9uPSJQUlBBX0lOMjAxMzA5VVYwMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMS4xOCIvPgogICAgPHByb2Nlc3NpbmdDb2RlIGNvZGU9IlQiLz4KICAgIDxwcm9jZXNzaW5nTW9kZUNvZGUgY29kZT0iVCIvPgogICAgPGFjY2VwdEFja0NvZGUgY29kZT0iQUwiLz4KICAgIDxyZWNlaXZlciB0eXBlQ29kZT0iUkNWIj4KICAgICAgICA8ZGV2aWNlIGNsYXNzQ29kZT0iREVWIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICA8aWQgcm9vdD0iIi8+CiAgICAgICAgICAgIDx0ZWxlY29tIHZhbHVlPSIiLz4KICAgICAgICA8L2RldmljZT4KICAgIDwvcmVjZWl2ZXI+CiAgICA8c2VuZGVyIHR5cGVDb2RlPSJTTkQiPgogICAgICAgIDxkZXZpY2UgY2xhc3NDb2RlPSJERVYiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgIDxpZCByb290PSIiLz4KICAgICAgICA8L2RldmljZT4KICAgIDwvc2VuZGVyPgogICAgPGNvbnRyb2xBY3RQcm9jZXNzIGNsYXNzQ29kZT0iQ0FDVCIgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgPGNvZGUgY29kZT0iUFJQQV9URTIwMTMwOVVWMDIiIGRpc3BsYXlOYW1lPSIyLjE2Ljg0MC4xLjExMzg4My4xLjE4Ii8+CiAgICAgICAgPHF1ZXJ5QnlQYXJhbWV0ZXI+CiAgICAgICAgICAgIDxxdWVyeUlkIGV4dGVuc2lvbj0iIiByb290PSIiLz4KICAgICAgICAgICAgPHN0YXR1c0NvZGUgY29kZT0ibmV3Ii8+CiAgICAgICAgICAgIDxyZXNwb25zZVByaW9yaXR5Q29kZSBjb2RlPSJJIi8+CiAgICAgICAgICAgIDxwYXJhbWV0ZXJMaXN0PgogICAgICAgICAgICAgICAgPHBhdGllbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgIDx2YWx1ZSBleHRlbnNpb249IjEiIHJvb3Q9InRlc3QiLz4KICAgICAgICAgICAgICAgICAgICA8c2VtYW50aWNzVGV4dD5QYXRpZW50LmlkPC9zZW1hbnRpY3NUZXh0PgogICAgICAgICAgICAgICAgPC9wYXRpZW50SWRlbnRpZmllcj4KICAgICAgICAgICAgPC9wYXJhbWV0ZXJMaXN0PgogICAgICAgIDwvcXVlcnlCeVBhcmFtZXRlcj4KICAgIDwvY29udHJvbEFjdFByb2Nlc3M+CjwvUFJQQV9JTjIwMTMwOVVWMDI+</outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>connectorMessage response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var response = connectorMessage.getRawData()
channelMap.put(&apos;responseRawData&apos;,response);
var response = connectorMessage.getEncodedData();
channelMap.put(&apos;responseEncoded&apos;,response);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.0.0">
            <elements/>
          </filter>
          <transportName>Web Service Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="4.0.0">
          <metaDataId>17</metaDataId>
          <name>PIX ITI-45 HTTPS Query CHS Wyoming Valley Endpoint</name>
          <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="4.0.0">
            <pluginProperties/>
            <destinationConnectorProperties version="4.0.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <host>https://test2.mobilemd.com/IHECHSWyomingValleyTest/pixcrossreference.svc/PIX</host>
            <useProxyServer>false</useProxyServer>
            <proxyAddress></proxyAddress>
            <proxyPort></proxyPort>
            <method>post</method>
            <headers class="linked-hash-map"/>
            <parameters class="linked-hash-map"/>
            <useHeadersVariable>false</useHeadersVariable>
            <headersVariable></headersVariable>
            <useParametersVariable>false</useParametersVariable>
            <parametersVariable></parametersVariable>
            <responseXmlBody>false</responseXmlBody>
            <responseParseMultipart>true</responseParseMultipart>
            <responseIncludeMetadata>false</responseIncludeMetadata>
            <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
            <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
            <multipart>false</multipart>
            <useAuthentication>false</useAuthentication>
            <authenticationType>Basic</authenticationType>
            <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
            <username></username>
            <password></password>
            <content>${message.encodedData}</content>
            <contentType>text/xml</contentType>
            <dataTypeBinary>false</dataTypeBinary>
            <charset>UTF-8</charset>
            <socketTimeout>30000</socketTimeout>
          </properties>
          <transformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>senderSystemOid</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <variable>senderSystemOid</variable>
                <mapping>$(&apos;sourceOid&apos;)</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>receiverSystemOid</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <variable>receiverSystemOid</variable>
                <mapping>&quot;1.3.6.1.4.1.12559.11.1.2.2.5.7&quot;</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>receiverSystemUrl</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <variable>receiverSystemUrl</variable>
                <mapping>&quot;http://86.15.228.119:8080//public/hsbus/HS.IHE.PDQv3.Supplier.Services.cls&quot;</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>PRPA_IN201309UV02 Query</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>// PRPA_IN201309UV02 Query

tmp[&apos;id&apos;][&apos;@root&apos;]= $(&apos;senderSystemOid&apos;);
tmp[&apos;id&apos;][&apos;@extension&apos;]= UUIDGenerator.getUUID();
tmp[&apos;creationTime&apos;][&apos;@value&apos;]= DateUtil.getCurrentDate(&apos;yyyyMMddhhmmss&apos;);
tmp[&apos;processingCode&apos;][&apos;@code&apos;]= globalMap.get(&apos;itiIheProcessingCode&apos;);
tmp[&apos;processingModeCode&apos;][&apos;@code&apos;]= globalMap.get(&apos;itiIheProcessingCode&apos;);

// receiver
tmp[&apos;receiver&apos;][&apos;device&apos;][&apos;id&apos;][&apos;@root&apos;]= $(&apos;receiverSystemOid&apos;);
tmp[&apos;receiver&apos;][&apos;device&apos;][&apos;telecom&apos;][&apos;@value&apos;]= $(&apos;receiverSystemUrl&apos;);

// sender
tmp[&apos;sender&apos;][&apos;device&apos;][&apos;id&apos;][&apos;@root&apos;]= $(&apos;senderSystemOid&apos;);

// queryByParameter
tmp[&apos;controlActProcess&apos;][&apos;queryByParameter&apos;][&apos;queryId&apos;][&apos;@extension&apos;]= $(&apos;patientId&apos;);
tmp[&apos;controlActProcess&apos;][&apos;queryByParameter&apos;][&apos;queryId&apos;][&apos;@root&apos;]= $(&apos;patientIdRootOid&apos;);

// patientIdentifier
tmp[&apos;controlActProcess&apos;][&apos;queryByParameter&apos;][&apos;parameterList&apos;][&apos;patientIdentifier&apos;][&apos;value&apos;][&apos;@extension&apos;]= $(&apos;patientId&apos;);
tmp[&apos;controlActProcess&apos;][&apos;queryByParameter&apos;][&apos;parameterList&apos;][&apos;patientIdentifier&apos;][&apos;value&apos;][&apos;@root&apos;]= $(&apos;patientIdRootOid&apos;);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGOCIgc3RhbmRhbG9uZT0ieWVzIj8+CjxQUlBBX0lOMjAxMzA5VVYwMiBJVFNWZXJzaW9uPSJYTUxfMS4wIiB4bWxucz0idXJuOmhsNy1vcmc6djMiPgogICAgPGlkIGV4dGVuc2lvbj0iIiByb290PSIiLz4KICAgIDxjcmVhdGlvblRpbWUgdmFsdWU9IiIvPgogICAgPGludGVyYWN0aW9uSWQgZXh0ZW5zaW9uPSJQUlBBX0lOMjAxMzA5VVYwMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMS4xOCIvPgogICAgPHByb2Nlc3NpbmdDb2RlIGNvZGU9IlQiLz4KICAgIDxwcm9jZXNzaW5nTW9kZUNvZGUgY29kZT0iVCIvPgogICAgPGFjY2VwdEFja0NvZGUgY29kZT0iQUwiLz4KICAgIDxyZWNlaXZlciB0eXBlQ29kZT0iUkNWIj4KICAgICAgICA8ZGV2aWNlIGNsYXNzQ29kZT0iREVWIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICA8aWQgcm9vdD0iIi8+CiAgICAgICAgICAgIDx0ZWxlY29tIHZhbHVlPSIiLz4KICAgICAgICA8L2RldmljZT4KICAgIDwvcmVjZWl2ZXI+CiAgICA8c2VuZGVyIHR5cGVDb2RlPSJTTkQiPgogICAgICAgIDxkZXZpY2UgY2xhc3NDb2RlPSJERVYiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgIDxpZCByb290PSIiLz4KICAgICAgICA8L2RldmljZT4KICAgIDwvc2VuZGVyPgogICAgPGNvbnRyb2xBY3RQcm9jZXNzIGNsYXNzQ29kZT0iQ0FDVCIgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgPGNvZGUgY29kZT0iUFJQQV9URTIwMTMwOVVWMDIiIGRpc3BsYXlOYW1lPSIyLjE2Ljg0MC4xLjExMzg4My4xLjE4Ii8+CiAgICAgICAgPHF1ZXJ5QnlQYXJhbWV0ZXI+CiAgICAgICAgICAgIDxxdWVyeUlkIGV4dGVuc2lvbj0iIiByb290PSIiLz4KICAgICAgICAgICAgPHN0YXR1c0NvZGUgY29kZT0ibmV3Ii8+CiAgICAgICAgICAgIDxyZXNwb25zZVByaW9yaXR5Q29kZSBjb2RlPSJJIi8+CiAgICAgICAgICAgIDxwYXJhbWV0ZXJMaXN0PgogICAgICAgICAgICAgICAgPHBhdGllbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgIDx2YWx1ZSBleHRlbnNpb249IjEiIHJvb3Q9InRlc3QiLz4KICAgICAgICAgICAgICAgICAgICA8c2VtYW50aWNzVGV4dD5QYXRpZW50LmlkPC9zZW1hbnRpY3NUZXh0PgogICAgICAgICAgICAgICAgPC9wYXRpZW50SWRlbnRpZmllcj4KICAgICAgICAgICAgPC9wYXJhbWV0ZXJMaXN0PgogICAgICAgIDwvcXVlcnlCeVBhcmFtZXRlcj4KICAgIDwvY29udHJvbEFjdFByb2Nlc3M+CjwvUFJQQV9JTjIwMTMwOVVWMDI+</outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>connectorMessage response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var response = connectorMessage.getEncodedData()
channelMap.put(&apos;response&apos;,response);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.0.0">
            <elements/>
          </filter>
          <transportName>HTTP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="4.0.0">
          <metaDataId>18</metaDataId>
          <name>PIX ITI-45 Query ehealthsuisse.ihe-europe.net</name>
          <properties class="com.mirth.connect.connectors.ws.WebServiceDispatcherProperties" version="4.0.0">
            <pluginProperties/>
            <destinationConnectorProperties version="4.0.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <wsdlUrl>https://ehealthsuisse.ihe-europe.net/PAMSimulator-ejb/PIXManager_Service/PIXManager_PortType?wsdl</wsdlUrl>
            <service></service>
            <port></port>
            <operation>Press Get Operations</operation>
            <locationURI></locationURI>
            <socketTimeout>30000</socketTimeout>
            <useAuthentication>false</useAuthentication>
            <username></username>
            <password></password>
            <envelope></envelope>
            <oneWay>false</oneWay>
            <headers/>
            <headersVariable></headersVariable>
            <isUseHeadersVariable>false</isUseHeadersVariable>
            <useMtom>false</useMtom>
            <attachmentNames/>
            <attachmentContents/>
            <attachmentTypes/>
            <attachmentsVariable></attachmentsVariable>
            <isUseAttachmentsVariable>false</isUseAttachmentsVariable>
            <soapAction></soapAction>
          </properties>
          <transformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>senderSystemOid</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <variable>senderSystemOid</variable>
                <mapping>&quot;1.3.6.1.4.1.12559.11.25.1.8&quot;</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>receiverSystemOid</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <variable>receiverSystemOid</variable>
                <mapping>&quot;1.3.6.1.4.1.12559.11.20.1.9&quot;</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>receiverSystemUrl</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <variable>receiverSystemUrl</variable>
                <mapping>&quot;https://ehealthsuisse.ihe-europe.net/PAMSimulator-ejb/PIXManager_Service/PIXManager_PortType&quot;</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>PRPA_IN201309UV02 Query</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>// PRPA_IN201309UV02 Query

tmp[&apos;id&apos;][&apos;@root&apos;]= $(&apos;senderSystemOid&apos;);
tmp[&apos;id&apos;][&apos;@extension&apos;]= UUIDGenerator.getUUID();
tmp[&apos;creationTime&apos;][&apos;@value&apos;]= DateUtil.getCurrentDate(&apos;yyyyMMddhhmmss&apos;);
tmp[&apos;processingCode&apos;][&apos;@code&apos;]= globalMap.get(&apos;itiIheProcessingCode&apos;);
tmp[&apos;processingModeCode&apos;][&apos;@code&apos;]= globalMap.get(&apos;itiIheProcessingCode&apos;);

// receiver
tmp[&apos;receiver&apos;][&apos;device&apos;][&apos;id&apos;][&apos;@root&apos;]= $(&apos;receiverSystemOid&apos;);
tmp[&apos;receiver&apos;][&apos;device&apos;][&apos;telecom&apos;][&apos;@value&apos;]= $(&apos;receiverSystemUrl&apos;);

// sender
tmp[&apos;sender&apos;][&apos;device&apos;][&apos;id&apos;][&apos;@root&apos;]= $(&apos;senderSystemOid&apos;);

// queryByParameter
tmp[&apos;controlActProcess&apos;][&apos;queryByParameter&apos;][&apos;queryId&apos;][&apos;@extension&apos;]= $(&apos;patientId&apos;);
tmp[&apos;controlActProcess&apos;][&apos;queryByParameter&apos;][&apos;queryId&apos;][&apos;@root&apos;]= $(&apos;patientIdRootOid&apos;);

// patientIdentifier
tmp[&apos;controlActProcess&apos;][&apos;queryByParameter&apos;][&apos;parameterList&apos;][&apos;patientIdentifier&apos;][&apos;value&apos;][&apos;@extension&apos;]= $(&apos;patientId&apos;);
tmp[&apos;controlActProcess&apos;][&apos;queryByParameter&apos;][&apos;parameterList&apos;][&apos;patientIdentifier&apos;][&apos;value&apos;][&apos;@root&apos;]= $(&apos;patientIdRootOid&apos;);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGOCIgc3RhbmRhbG9uZT0ieWVzIj8+CjxQUlBBX0lOMjAxMzA5VVYwMiBJVFNWZXJzaW9uPSJYTUxfMS4wIiB4bWxucz0idXJuOmhsNy1vcmc6djMiPgogICAgPGlkIGV4dGVuc2lvbj0iIiByb290PSIiLz4KICAgIDxjcmVhdGlvblRpbWUgdmFsdWU9IiIvPgogICAgPGludGVyYWN0aW9uSWQgZXh0ZW5zaW9uPSJQUlBBX0lOMjAxMzA5VVYwMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMS4xOCIvPgogICAgPHByb2Nlc3NpbmdDb2RlIGNvZGU9IlQiLz4KICAgIDxwcm9jZXNzaW5nTW9kZUNvZGUgY29kZT0iVCIvPgogICAgPGFjY2VwdEFja0NvZGUgY29kZT0iQUwiLz4KICAgIDxyZWNlaXZlciB0eXBlQ29kZT0iUkNWIj4KICAgICAgICA8ZGV2aWNlIGNsYXNzQ29kZT0iREVWIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICA8aWQgcm9vdD0iIi8+CiAgICAgICAgICAgIDx0ZWxlY29tIHZhbHVlPSIiLz4KICAgICAgICA8L2RldmljZT4KICAgIDwvcmVjZWl2ZXI+CiAgICA8c2VuZGVyIHR5cGVDb2RlPSJTTkQiPgogICAgICAgIDxkZXZpY2UgY2xhc3NDb2RlPSJERVYiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgIDxpZCByb290PSIiLz4KICAgICAgICA8L2RldmljZT4KICAgIDwvc2VuZGVyPgogICAgPGNvbnRyb2xBY3RQcm9jZXNzIGNsYXNzQ29kZT0iQ0FDVCIgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgPGNvZGUgY29kZT0iUFJQQV9URTIwMTMwOVVWMDIiIGRpc3BsYXlOYW1lPSIyLjE2Ljg0MC4xLjExMzg4My4xLjE4Ii8+CiAgICAgICAgPHF1ZXJ5QnlQYXJhbWV0ZXI+CiAgICAgICAgICAgIDxxdWVyeUlkIGV4dGVuc2lvbj0iIiByb290PSIiLz4KICAgICAgICAgICAgPHN0YXR1c0NvZGUgY29kZT0ibmV3Ii8+CiAgICAgICAgICAgIDxyZXNwb25zZVByaW9yaXR5Q29kZSBjb2RlPSJJIi8+CiAgICAgICAgICAgIDxwYXJhbWV0ZXJMaXN0PgogICAgICAgICAgICAgICAgPHBhdGllbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgIDx2YWx1ZSBleHRlbnNpb249IjEiIHJvb3Q9InRlc3QiLz4KICAgICAgICAgICAgICAgICAgICA8c2VtYW50aWNzVGV4dD5QYXRpZW50LmlkPC9zZW1hbnRpY3NUZXh0PgogICAgICAgICAgICAgICAgPC9wYXRpZW50SWRlbnRpZmllcj4KICAgICAgICAgICAgPC9wYXJhbWV0ZXJMaXN0PgogICAgICAgIDwvcXVlcnlCeVBhcmFtZXRlcj4KICAgIDwvY29udHJvbEFjdFByb2Nlc3M+CjwvUFJQQV9JTjIwMTMwOVVWMDI+</outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>connectorMessage response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var response = connectorMessage.getRawData()
channelMap.put(&apos;responseRawData&apos;,response);
var response = connectorMessage.getEncodedData();
channelMap.put(&apos;responseEncoded&apos;,response);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.0.0">
            <elements/>
          </filter>
          <transportName>Web Service Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="4.0.0">
          <metaDataId>9</metaDataId>
          <name>Medicity_Repository</name>
          <properties class="com.mirth.connect.connectors.ws.WebServiceDispatcherProperties" version="4.0.0">
            <pluginProperties/>
            <destinationConnectorProperties version="4.0.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <wsdlUrl>http://localhost:8080/Medicity_clickshare.wsdl</wsdlUrl>
            <service>{http://tempuri.org/}XDSbRepositoryService</service>
            <port>{http://tempuri.org/}CustomBinding_IRepository</port>
            <operation>Press Get Operations</operation>
            <locationURI>https://certhub.1click2care.net:20000/repository</locationURI>
            <socketTimeout>0</socketTimeout>
            <useAuthentication>false</useAuthentication>
            <username></username>
            <password></password>
            <envelope> &lt;s:Envelope xmlns:s=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:a=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;
  &lt;s:Header&gt;
        &lt;a:Action s:mustUnderstand=&quot;1&quot;&gt;urn:ihe:iti:2007:ProvideAndRegisterDocumentSet-b&lt;/a:Action&gt;
        &lt;a:MessageID&gt;${uuid}&lt;/a:MessageID&gt;
        &lt;a:ReplyTo&gt;
            &lt;a:Address&gt;http://www.w3.org/2005/08/addressing/anonymous&lt;/a:Address&gt;
        &lt;/a:ReplyTo&gt;
        &lt;a:To s:mustUnderstand=&quot;1&quot;&gt;https://certhub.1click2care.net:20000/repository&lt;/a:To&gt;
    &lt;/s:Header&gt;
  &lt;s:Body&gt;
        &lt;ProvideAndRegisterDocumentSetRequest xsi:schemaLocation=&quot;urn:ihe:iti:xds-b:2007 ../../schema/IHE/XDS.b_DocumentRepository.xsd&quot; 
        xmlns=&quot;urn:ihe:iti:xds-b:2007&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        xmlns:lcm=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0&quot; xmlns:rim=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;
        xmlns:rs=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0&quot;&gt;
            &lt;lcm:SubmitObjectsRequest&gt;
                &lt;rim:RegistryObjectList&gt;
                    &lt;rim:ExtrinsicObject id=&quot;${extrinsicObjectUUID}&quot; mimeType=&quot;text/xml&quot; objectType=&quot;urn:uuid:7edca82f-054d-47f2-a032-9b2a5b5186c1&quot;&gt;
                        &lt;rim:Slot name=&quot;creationTime&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;${documentCreationTime}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Slot name=&quot;languageCode&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;${languageCode}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Slot name=&quot;serviceStartTime&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;${serviceStartTime}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Slot name=&quot;serviceStopTime&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;${serviceStopTime}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Slot name=&quot;sourcePatientId&quot;&gt;
                            &lt;rim:ValueList&gt;
								&lt;rim:Value&gt;${sourcePatientId}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Slot name=&quot;sourcePatientInfo&quot;&gt;
                            &lt;rim:ValueList&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid3}&lt;/rim:Value&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid5}&lt;/rim:Value&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid7}&lt;/rim:Value&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid8}&lt;/rim:Value&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid11}&lt;/rim:Value&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid13}&lt;/rim:Value&gt;
							&lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
						&lt;rim:Slot name=&quot;size&quot;&gt;
							&lt;rim:ValueList&gt;
								&lt;rim:Value&gt;${encFileSize}&lt;/rim:Value&gt;
							&lt;/rim:ValueList&gt;
						&lt;/rim:Slot&gt;
						&lt;rim:Slot name=&quot;hash&quot;&gt;
							&lt;rim:ValueList&gt;
								&lt;rim:Value&gt;${ccdHash}&lt;/rim:Value&gt;
							&lt;/rim:ValueList&gt;
						&lt;/rim:Slot&gt;
                        &lt;rim:Name&gt;
                            &lt;rim:LocalizedString value=&quot;${documentTitle}&quot;/&gt;
                        &lt;/rim:Name&gt;
                        &lt;rim:Description/&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;&gt;
                            &lt;rim:Slot name=&quot;authorPerson&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${strAuthorPerson}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorInstitution&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${authorInstitution}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorRole&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${performerAuthorRole}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${performerAuthorSpeciality}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:41a5887f-8865-4c09-adf7-e362475b143a&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;${documentCode}&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${documentCodeSystemOid}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;${documentCodeDisplayName}&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;${confCode}&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${confCodeSystemOid}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;${confCodeDisplayName}&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:a09d5840-386c-46f2-b5ad-9c3699a4309d&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;urn:hl7-org:sdwg:ccda-structuredBody:1.1&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;1.3.6.1.4.1.19376.1.2.3&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;C-CDA R1.1 Continuity of Care Document (CCD)&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;35971002&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;2.16.840.1.113883.6.96&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;Ambulatory care site&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;394814009&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;2.16.840.1.113883.6.96&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;General practice&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:f0306f51-975f-434e-a61c-c59651d33983&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;${documentCode}&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${documentCodeSystemOid}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;${documentCodeDisplayName}&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:ExternalIdentifier id=&quot;${uuid}&quot; registryObject=&quot;${extrinsicObjectUUID}&quot; identificationScheme=&quot;urn:uuid:58a6f841-87b3-4a3e-92fd-a8ffeff98427&quot;
                            value=&quot;${sourcePatientId}&quot;&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;XDSDocumentEntry.patientId&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:ExternalIdentifier&gt;
                        &lt;rim:ExternalIdentifier id=&quot;${uuid}&quot; registryObject=&quot;${extrinsicObjectUUID}&quot; identificationScheme=&quot;urn:uuid:2e82c1f6-a085-4c72-9da3-8640a32e42ab&quot;
                            value=&quot;${documentId}&quot;&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;XDSDocumentEntry.uniqueId&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:ExternalIdentifier&gt;
                    &lt;/rim:ExtrinsicObject&gt;
                    &lt;rim:RegistryPackage id=&quot;${submissionSetUUID}&quot;&gt;
                        &lt;rim:Slot name=&quot;submissionTime&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;${currentDateTime}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Name&gt;
                            &lt;rim:LocalizedString value=&quot;Submission Set&quot;/&gt;
                        &lt;/rim:Name&gt;
                        &lt;rim:Description&gt;
                            &lt;rim:LocalizedString value=&quot;A collection of CDA documents&quot;/&gt;
                        &lt;/rim:Description&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:a7058bb9-b4e4-4307-ba5b-e3f0ab85e12d&quot; classifiedObject=&quot;${submissionSetUUID}&quot;&gt;
                            &lt;rim:Slot name=&quot;authorPerson&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${strAuthorPerson}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorInstitution&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${authorInstitution}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorRole&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${performerAuthorRole}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${performerAuthorSpeciality}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:aa543740-bdda-424e-8c96-df4873be8500&quot; classifiedObject=&quot;${submissionSetUUID}&quot;
                            nodeRepresentation=&quot;${documentCode}&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${documentCodeSystem}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;${documentCodeDisplayName}&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:ExternalIdentifier id=&quot;${uuid}&quot; registryObject=&quot;${submissionSetUUID}&quot; identificationScheme=&quot;urn:uuid:96fdda7c-d067-4183-912e-bf5ee74998a8&quot;
                            value=&quot;${submissionSetUniqueId}&quot;&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;XDSSubmissionSet.uniqueId&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:ExternalIdentifier&gt;
                        &lt;rim:ExternalIdentifier id=&quot;${uuid}&quot; registryObject=&quot;${submissionSetUUID}&quot; identificationScheme=&quot;urn:uuid:554ac39e-e3fe-47fe-b233-965d2a147832&quot;
                            value=&quot;${sourceOid}&quot;&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;XDSSubmissionSet.sourceId&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:ExternalIdentifier&gt;
                        &lt;rim:ExternalIdentifier id=&quot;${uuid}&quot; registryObject=&quot;${submissionSetUUID}&quot; identificationScheme=&quot;urn:uuid:6b5aea1a-874d-4603-a4bc-96a0a7b38446&quot;
                            value=&quot;${sourcePatientId}&quot;&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;XDSSubmissionSet.patientId&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:ExternalIdentifier&gt;
                    &lt;/rim:RegistryPackage&gt;
                    &lt;rim:Classification id=&quot;${uuid}&quot; classifiedObject=&quot;${submissionSetUUID}&quot; classificationNode=&quot;urn:uuid:a54d6aa5-d40d-43f9-88c5-b4633d873bdd&quot;/&gt;
                    &lt;rim:Association id=&quot;${uuid}&quot; associationType=&quot;HasMember&quot; sourceObject=&quot;${submissionSetUUID}&quot; targetObject=&quot;${extrinsicObjectUUID}&quot;&gt;
                        &lt;rim:Slot name=&quot;SubmissionSetStatus&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;Original&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                    &lt;/rim:Association&gt;
                &lt;/rim:RegistryObjectList&gt;
            &lt;/lcm:SubmitObjectsRequest&gt;
            &lt;Document id=&quot;${extrinsicObjectUUID}&quot;&gt;${encodedCCD}&lt;/Document&gt;
        &lt;/ProvideAndRegisterDocumentSetRequest&gt;
    &lt;/s:Body&gt;
&lt;/s:Envelope&gt;</envelope>
            <oneWay>true</oneWay>
            <headers/>
            <headersVariable></headersVariable>
            <isUseHeadersVariable>false</isUseHeadersVariable>
            <useMtom>false</useMtom>
            <attachmentNames/>
            <attachmentContents/>
            <attachmentTypes/>
            <attachmentsVariable></attachmentsVariable>
            <isUseAttachmentsVariable>false</isUseAttachmentsVariable>
            <soapAction></soapAction>
          </properties>
          <transformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>currentDateTime</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <variable>currentDateTime</variable>
                <mapping>currentDate_yyyyMMddhhmmss()</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>uuid</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <variable>uuid</variable>
                <mapping>&quot;urn:uuid:&quot;+UUIDGenerator.getUUID()</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>extrinsicObjectUUID</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <variable>extrinsicObjectUUID</variable>
                <mapping>&quot;urn:uuid:&quot;+UUIDGenerator.getUUID()</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>submissionSetUUID</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <variable>submissionSetUUID</variable>
                <mapping>&quot;urn:uuid:&quot;+UUIDGenerator.getUUID()</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>submissionSetUniqueId</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <variable>submissionSetUniqueId</variable>
                <mapping>$(&apos;documentId&apos;)+&quot;.&quot;+$(&apos;patientId&apos;)</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>Encoded the CCD</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <script>/* Modified: 
2018-02-13 17:34 CT JER - Readded the removed channelMap.put for the encodedCCD to Encoded the CCD transformer
2018-02-13 09:11 CT JER - Stringified the encData object and will remove/truncate decimal
**/
// encoded CCD
// var encData = FileUtil.encode(msg.getBytes(&quot;UTF8&quot;)).replaceAll(&apos;\\s&apos;,&apos;&apos;);
var debug= 0;

var encData = FileUtil.encode(new java.lang.String(msg.toString()).getBytes(&apos;UTF-8&apos;)).replaceAll(&apos;\\s&apos;,&apos;&apos;);
channelMap.put(&apos;encodedCCD&apos;,encData);
if(debug&gt;0) { 
	logger.error(&apos;encFileSize: &apos;+encData.length());
	logger.error(&apos;datatype: &apos;+typeof encData); 
	logger.error(&apos;JSON.stringify: &apos;+JSON.stringify(encData.length())); 
}
// Modify using the JSON.stringify method
var encUTF8Size= JSON.stringify(encData.length());
channelMap.put(&apos;encFileSize&apos;,encUTF8Size);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>ccdHash</name>
                <sequenceNumber>6</sequenceNumber>
                <enabled>true</enabled>
                <variable>ccdHash</variable>
                <mapping>com.google.common.hash.Hashing.sha256().hashUnencodedChars($(&apos;encodedCCD&apos;))</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>Get Xds Response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var debug= 1;

// where get calling current Destination Connector name (e.g. Medicity_Repository)
var channelConnector= connectorMessage.getConnectorName();
var destination = responseMap.get(channelConnector);
if(typeof destination.getMessage() !== &apos;undefined&apos;) {
	channelMap.put(&apos;XdsResponse&apos;,destination.getMessage());
	if(destination.getStatus() != &apos;SUCCESS&apos;) {
		if(debug&gt;0) { logger.error(channelConnector.toString()+&apos; XdsResponse: &apos;+destination.getMessage()); }
	} // end if
} // end if</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.0.0">
            <elements/>
          </filter>
          <transportName>Web Service Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="4.0.0">
          <metaDataId>13</metaDataId>
          <name>Test HTTP - Soap-WS Channel (port: 8989)</name>
          <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="4.0.0">
            <pluginProperties/>
            <destinationConnectorProperties version="4.0.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <host>http://localhost:8989</host>
            <useProxyServer>false</useProxyServer>
            <proxyAddress></proxyAddress>
            <proxyPort></proxyPort>
            <method>post</method>
            <headers class="linked-hash-map"/>
            <parameters class="linked-hash-map"/>
            <useHeadersVariable>false</useHeadersVariable>
            <headersVariable></headersVariable>
            <useParametersVariable>false</useParametersVariable>
            <parametersVariable></parametersVariable>
            <responseXmlBody>false</responseXmlBody>
            <responseParseMultipart>true</responseParseMultipart>
            <responseIncludeMetadata>false</responseIncludeMetadata>
            <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
            <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
            <multipart>false</multipart>
            <useAuthentication>false</useAuthentication>
            <authenticationType>Basic</authenticationType>
            <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
            <username></username>
            <password></password>
            <content> &lt;s:Envelope xmlns:s=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:a=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;
  &lt;s:Header&gt;
        &lt;a:Action s:mustUnderstand=&quot;1&quot;&gt;urn:ihe:iti:2007:ProvideAndRegisterDocumentSet-b&lt;/a:Action&gt;
        &lt;a:MessageID&gt;${uuid}&lt;/a:MessageID&gt;
        &lt;a:ReplyTo&gt;
            &lt;a:Address&gt;http://www.w3.org/2005/08/addressing/anonymous&lt;/a:Address&gt;
        &lt;/a:ReplyTo&gt;
        &lt;a:To s:mustUnderstand=&quot;1&quot;&gt;https://certhub.1click2care.net:20000/repository&lt;/a:To&gt;
    &lt;/s:Header&gt;
  &lt;s:Body&gt;
        &lt;ProvideAndRegisterDocumentSetRequest xsi:schemaLocation=&quot;urn:ihe:iti:xds-b:2007 ../../schema/IHE/XDS.b_DocumentRepository.xsd&quot; 
        xmlns=&quot;urn:ihe:iti:xds-b:2007&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        xmlns:lcm=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0&quot; xmlns:rim=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;
        xmlns:rs=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0&quot;&gt;
            &lt;lcm:SubmitObjectsRequest&gt;
                &lt;rim:RegistryObjectList&gt;
                    &lt;rim:ExtrinsicObject id=&quot;${extrinsicObjectUUID}&quot; mimeType=&quot;text/xml&quot; objectType=&quot;urn:uuid:7edca82f-054d-47f2-a032-9b2a5b5186c1&quot;&gt;
                        &lt;rim:Slot name=&quot;creationTime&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;${documentCreationTime}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Slot name=&quot;languageCode&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;${languageCode}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Slot name=&quot;serviceStartTime&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;${serviceStartTime}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Slot name=&quot;serviceStopTime&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;${serviceStopTime}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Slot name=&quot;sourcePatientId&quot;&gt;
                            &lt;rim:ValueList&gt;
								&lt;rim:Value&gt;${sourcePatientId}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Slot name=&quot;sourcePatientInfo&quot;&gt;
                            &lt;rim:ValueList&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid3}&lt;/rim:Value&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid5}&lt;/rim:Value&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid7}&lt;/rim:Value&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid8}&lt;/rim:Value&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid11}&lt;/rim:Value&gt;
								&lt;rim:Value&gt;${sourcePatientInfo_pid13}&lt;/rim:Value&gt;
							&lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
						&lt;rim:Slot name=&quot;size&quot;&gt;
							&lt;rim:ValueList&gt;
								&lt;rim:Value&gt;${encFileSize}&lt;/rim:Value&gt;
							&lt;/rim:ValueList&gt;
						&lt;/rim:Slot&gt;
						&lt;rim:Slot name=&quot;hash&quot;&gt;
							&lt;rim:ValueList&gt;
								&lt;rim:Value&gt;${ccdHash}&lt;/rim:Value&gt;
							&lt;/rim:ValueList&gt;
						&lt;/rim:Slot&gt;
                        &lt;rim:Name&gt;
                            &lt;rim:LocalizedString value=&quot;${documentTitle}&quot;/&gt;
                        &lt;/rim:Name&gt;
                        &lt;rim:Description/&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;&gt;
                            &lt;rim:Slot name=&quot;authorPerson&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${strAuthorPerson}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorInstitution&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${authorInstitution}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorRole&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${performerAuthorRole}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${performerAuthorSpeciality}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:41a5887f-8865-4c09-adf7-e362475b143a&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;${documentCode}&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${documentCodeSystemOid}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;${documentCodeDisplayName}&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;${confCode}&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${confCodeSystemOid}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;${confCodeDisplayName}&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:a09d5840-386c-46f2-b5ad-9c3699a4309d&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;urn:hl7-org:sdwg:ccda-structuredBody:1.1&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;1.3.6.1.4.1.19376.1.2.3&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;C-CDA R1.1 Continuity of Care Document (CCD)&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;35971002&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;2.16.840.1.113883.6.96&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;Ambulatory care site&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;394814009&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;2.16.840.1.113883.6.96&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;General practice&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:f0306f51-975f-434e-a61c-c59651d33983&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;
                            nodeRepresentation=&quot;${documentCode}&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${documentCodeSystemOid}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;${documentCodeDisplayName}&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:ExternalIdentifier id=&quot;${uuid}&quot; registryObject=&quot;${extrinsicObjectUUID}&quot; identificationScheme=&quot;urn:uuid:58a6f841-87b3-4a3e-92fd-a8ffeff98427&quot;
                            value=&quot;${sourcePatientId}&quot;&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;XDSDocumentEntry.patientId&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:ExternalIdentifier&gt;
                        &lt;rim:ExternalIdentifier id=&quot;${uuid}&quot; registryObject=&quot;${extrinsicObjectUUID}&quot; identificationScheme=&quot;urn:uuid:2e82c1f6-a085-4c72-9da3-8640a32e42ab&quot;
                            value=&quot;${documentId}&quot;&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;XDSDocumentEntry.uniqueId&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:ExternalIdentifier&gt;
                    &lt;/rim:ExtrinsicObject&gt;
                    &lt;rim:RegistryPackage id=&quot;${submissionSetUUID}&quot;&gt;
                        &lt;rim:Slot name=&quot;submissionTime&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;${currentDateTime}&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                        &lt;rim:Name&gt;
                            &lt;rim:LocalizedString value=&quot;Submission Set&quot;/&gt;
                        &lt;/rim:Name&gt;
                        &lt;rim:Description&gt;
                            &lt;rim:LocalizedString value=&quot;A collection of CDA documents&quot;/&gt;
                        &lt;/rim:Description&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:a7058bb9-b4e4-4307-ba5b-e3f0ab85e12d&quot; classifiedObject=&quot;${submissionSetUUID}&quot;&gt;
                            &lt;rim:Slot name=&quot;authorPerson&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${strAuthorPerson}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorInstitution&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${authorInstitution}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorRole&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${performerAuthorRole}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${performerAuthorSpeciality}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:aa543740-bdda-424e-8c96-df4873be8500&quot; classifiedObject=&quot;${submissionSetUUID}&quot;
                            nodeRepresentation=&quot;${documentCode}&quot;&gt;
                            &lt;rim:Slot name=&quot;codingScheme&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;${documentCodeSystem}&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;${documentCodeDisplayName}&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:Classification&gt;
                        &lt;rim:ExternalIdentifier id=&quot;${uuid}&quot; registryObject=&quot;${submissionSetUUID}&quot; identificationScheme=&quot;urn:uuid:96fdda7c-d067-4183-912e-bf5ee74998a8&quot;
                            value=&quot;${submissionSetUniqueId}&quot;&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;XDSSubmissionSet.uniqueId&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:ExternalIdentifier&gt;
                        &lt;rim:ExternalIdentifier id=&quot;${uuid}&quot; registryObject=&quot;${submissionSetUUID}&quot; identificationScheme=&quot;urn:uuid:554ac39e-e3fe-47fe-b233-965d2a147832&quot;
                            value=&quot;${sourceOid}&quot;&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;XDSSubmissionSet.sourceId&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:ExternalIdentifier&gt;
                        &lt;rim:ExternalIdentifier id=&quot;${uuid}&quot; registryObject=&quot;${submissionSetUUID}&quot; identificationScheme=&quot;urn:uuid:6b5aea1a-874d-4603-a4bc-96a0a7b38446&quot;
                            value=&quot;${sourcePatientId}&quot;&gt;
                            &lt;rim:Name&gt;
                                &lt;rim:LocalizedString value=&quot;XDSSubmissionSet.patientId&quot;/&gt;
                            &lt;/rim:Name&gt;
                        &lt;/rim:ExternalIdentifier&gt;
                    &lt;/rim:RegistryPackage&gt;
                    &lt;rim:Classification id=&quot;${uuid}&quot; classifiedObject=&quot;${submissionSetUUID}&quot; classificationNode=&quot;urn:uuid:a54d6aa5-d40d-43f9-88c5-b4633d873bdd&quot;/&gt;
                    &lt;rim:Association id=&quot;${uuid}&quot; associationType=&quot;HasMember&quot; sourceObject=&quot;${submissionSetUUID}&quot; targetObject=&quot;${extrinsicObjectUUID}&quot;&gt;
                        &lt;rim:Slot name=&quot;SubmissionSetStatus&quot;&gt;
                            &lt;rim:ValueList&gt;
                                &lt;rim:Value&gt;Original&lt;/rim:Value&gt;
                            &lt;/rim:ValueList&gt;
                        &lt;/rim:Slot&gt;
                    &lt;/rim:Association&gt;
                &lt;/rim:RegistryObjectList&gt;
            &lt;/lcm:SubmitObjectsRequest&gt;
            &lt;Document id=&quot;${extrinsicObjectUUID}&quot;&gt;${encodedCCD}&lt;/Document&gt;
        &lt;/ProvideAndRegisterDocumentSetRequest&gt;
    &lt;/s:Body&gt;
&lt;/s:Envelope&gt;</content>
            <contentType>text/plain</contentType>
            <dataTypeBinary>false</dataTypeBinary>
            <charset>UTF-8</charset>
            <socketTimeout>30000</socketTimeout>
          </properties>
          <transformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>currentDateTime</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <variable>currentDateTime</variable>
                <mapping>currentDate_yyyyMMddhhmmss()</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>uuid</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <variable>uuid</variable>
                <mapping>&quot;urn:uuid:&quot;+UUIDGenerator.getUUID()</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>extrinsicObjectUUID</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <variable>extrinsicObjectUUID</variable>
                <mapping>&quot;urn:uuid:&quot;+UUIDGenerator.getUUID()</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>submissionSetUUID</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <variable>submissionSetUUID</variable>
                <mapping>&quot;urn:uuid:&quot;+UUIDGenerator.getUUID()</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>submissionSetUniqueId</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <variable>submissionSetUniqueId</variable>
                <mapping>$(&apos;documentId&apos;)+&quot;.&quot;+$(&apos;patientId&apos;)</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>Encoded the CCD</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <script>// encoded CCD
// var encData = FileUtil.encode(msg.getBytes(&quot;UTF8&quot;)).replaceAll(&apos;\\s&apos;,&apos;&apos;);
var encData = FileUtil.encode(new java.lang.String(msg.toString()).getBytes(&apos;UTF-8&apos;)).replaceAll(&apos;\\s&apos;,&apos;&apos;);
channelMap.put(&apos;encodedCCD&apos;,encData);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
                <name>ccdHash</name>
                <sequenceNumber>6</sequenceNumber>
                <enabled>true</enabled>
                <variable>ccdHash</variable>
                <mapping>com.google.common.hash.Hashing.sha256().hashUnencodedChars($(&apos;encodedCCD&apos;))</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>Get Xds Response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var destination = responseMap.get(&quot;Test HTTP - Soap-WS Channel (port: 8989)&quot;);
if(typeof destination.getMessage() !== &apos;undefined&apos;) {
	channelMap.put(&apos;XdsResponse&apos;,destination.getMessage());
	if(debug&gt;0) { logger.error(&apos;XdsResponse: &apos;+destination.getMessage()); }
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.0.0">
            <elements/>
          </filter>
          <transportName>HTTP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>/* Modify the message variable below to pre process data
Filename: preProcessor_duplicateMessages.js
Modified:
2018-11-12 JER - Modified for debugging channelName scriptName
*/

var debug= 0
var oMessage= message;
var scriptName= &apos;Call PreProcessor&apos;;
// if (oMessage.namespace() != undefined) { default xml namespace = oMessage.namespace(); } else { default xml namespace = &apos;&apos;; }
var xsi = new Namespace(&apos;http://www.w3.org/2001/XMLSchema-instance&apos;);
if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; BEFORE msg typeof= &apos;+typeof(message)+&apos; msg= &apos;+message); }

var set = new java.util.HashSet();
var duplicates = new java.util.HashSet();
var header= &apos;ClinicalDocument&apos;;
var xStyleSheet= &apos;&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;CCD.xsl&quot;?&gt;&apos;;
var xmlComment1= &apos;&lt;!-- The following sample document depicts a fictional characterâ€™s health summary. Any resemblance to a real person is coincidental. --&gt;&apos;;
var xmlComment2= &apos;&lt;!-- The following sample document depicts a fictional characterÃ¢â‚¬â„¢s health summary. Any resemblance to a real person is coincidental. --&gt;&apos;;
var xmlVersionHeader= &apos;&lt;?xml version=&quot;1.0&quot;?&gt;&apos;;

if(message.indexOf(header)&gt;-1) {
	if(message.indexOf(&apos;xml-stylesheet&apos;)&gt;-1) {
		message= message.replace(xStyleSheet,&apos;&apos;);
	} // end if
	if(message.indexOf(xmlComment1)&gt;-1||message.indexOf(xmlComment2)&gt;-1) {
		message= message.replace(xmlComment1,&apos;&apos;);
		message= message.replace(xmlComment2,&apos;&apos;);
	} // end if 
	if(message.indexOf(xmlVersionHeader)&gt;-1) {
		message= message.replace(xmlVersionHeader,&apos;&apos;);
	} // end if 
	/*
	for each (str in message.split(/\&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;\?&gt;/g)) {
		if(str.indexOf(header)&gt;-1) {
			if (set.contains(str)) {
				duplicates.add(str);
			} else {
				var newStr= str.toString().replace(/&lt;\?,/g,&apos;&apos;).replace(&apos;&lt;?&apos;,&apos;&apos;).replace(/^\s+|\s+$/g,&apos;&apos;);
				set.add(newStr);
			} // end if 
		} // end if 
	} // end for each
	set.removeAll(duplicates);
	return set.toArray().join(&apos;&apos;);
} else {
	return;
}
*/

} // end if
if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; AFTER msg= &apos;+message); }
globalChannelMap.put(&apos;message&apos;, message);
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.0.0">
        <clearGlobalChannelMap>false</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STOPPED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE_OID</name>
            <type>STRING</type>
            <mappingName>sourceOid</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>PATIENTID</name>
            <type>STRING</type>
            <mappingName>patientId</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>DOCUMENTID</name>
            <type>STRING</type>
            <mappingName>documentId</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>SERVICE_EVENT_ID</name>
            <type>STRING</type>
            <mappingName>serviceEventId</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.0.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1632188418891</time>
            <timezone>America/Chicago</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="4.0.0">
            <id>690e66f5-be75-4877-9354-42bb679b7bf6</id>
            <name>CCDtoXDS</name>
            <revision>21</revision>
            <lastModified>
              <time>1661376358782</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <description>CCDtoXDS</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>21901337-48c5-4cce-b4ff-ffdb3a14d9ba</id>
                <name>getAddress</name>
                <revision>16</revision>
                <lastModified>
                  <time>1659055557599</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  getAddress(address) - Desc: This function receives CCD/CCDA msg and returns from Address Object

   	@param {String} msg - this contains the raw message (string)
	@return {object} objAddress - this contains the patientRole elements composed into a single objPatientRole object.
	
	History
	2022-07-28 JER - Modify the streetAddressLine if multiple streetAddressLine element objects
	2021-09-20 JER - Modified to incorporate evaluation of multiple patientRole Id(s) in the case there are multiple patient identifiers
	2021-09-20 JER - Modified to patient.name incorporate evaluation of multiple patient name child elements in the case there are multiple patient identifiers
*/
function getAddress(address) {
 
	// define variables
	var debug= 0;
	var scriptName= &apos;getAddress&apos;;
	var arrAddresses= new Array();
	
	if(debug&gt;0) { logger.error(scriptName+&apos; msg= &apos;+msg); }
	if (typeof(address) !== &apos;undefined&apos;) {

		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; address.length= &apos;+address.length()+&apos; address= &apos;+address); }			
		
		if(address.length()&gt;1) {
			// for each addr element
			var j= 0;
			for(var i= 0;i&lt;1;i++) {

				var objAddress= new Object();
				objAddress.id= j;
				if(address[i][&apos;@use&apos;]) {
					objAddress.use= address[i][&apos;@use&apos;].toString();
				} // end if address element @use property is not null

				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; address[&apos;+i+&apos;].children()= &apos;+address[i].children()); }
				
				// 2022-07-28 JER - Modify the streetAddressLine if multiple streetAddressLine element objects
				var strStreetAddressLine= &apos;&apos;; var lenStreetAddressLine= address[i].streetAddressLine.length();
				for(var j= 0;j&lt;address[i].streetAddressLine.length();j++) {
					if(lenStreetAddressLine&gt;1) {
						strStreetAddressLine+= address[i].streetAddressLine[j].toString()+&apos; &apos;;
					} else {
						strStreetAddressLine=  address[i].streetAddressLine[j].toString();
					} // end if 
				} // end for 
				objAddress.streetAddressLine= strStreetAddressLine;
				
				/*
				if(address[i].streetAddressLine.toString().length&gt;0) {
					objAddress.streetAddressLine=	address[i].streetAddressLine.toString();
				} else {
					objAddress.streetAddressLine=	&quot;&quot;; 
				} // end if streetAddressLine
				*/	
					
					if(address[i].county.toString().length&gt;0) {
						objAddress.county=			address[i].county.toString()
					} else {
						objAddress.county=	&quot;&quot;; 
					} // end if county element
					
					if(address[i].city.toString().length&gt;0) {
						objAddress.city=			address[i].city.toString()
					} else {
						objAddress.city=	&quot;&quot;; 
					} // end if city element
					
					if(address[i].state.toString().length&gt;0) {
						objAddress.state=			address[i].state.toString()
					} else {
						objAddress.state= &quot;&quot;;
					} // end if state element
					
					if(address[i].postalCode.toString().length&gt;0) {
						objAddress.postalCode=		address[i].postalCode.toString()
					} else {
						objAddress.postalCode= &quot;&quot;;
					} // end if postalCode element
					
					if(address[i].useablePeriod) {
						if(address[i].useablePeriod.children().length()&gt;0) {
							for each(child in address[i].useablePeriod.children()) {
								if(child.localName()== &apos;low&apos;) {
									objAddress.beginDate=	child[&apos;@low&apos;].toString();
								}
								if(child.localName()== &apos;high&apos;) {
									objAddress.endDate=		child[&apos;@high&apos;].toString();
								}
							} // end for each
						} // end if 
					} // end if useablePeriod element
					arrAddresses.push(objAddress);
				//} // for each child element
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;function arrAddress: &apos;+JSON.stringify(arrAddresses)); }
				j++;
			} // for each address element 
		} else {
			if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; address.children()= &apos;+JSON.stringify(address.children())); }
			var objAddress= new Object();
			objAddress.id= i;
			if(address[&apos;@use&apos;]) {
				objAddress.use= address[&apos;@use&apos;].toString();
			} // end if address element @use property is not null

			if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; address.children()= &apos;+address.children()); }
				
				// for each(child in address.children()) {
				
					if(address.streetAddressLine.toString().length&gt;0) {
						objAddress.streetAddressLine=	address.streetAddressLine.toString();
					} else {
						objAddress.streetAddressLine=	&quot;&quot;; 
					} // end if streetAddressLine
					
					if(address.county.toString().length&gt;0) {
						objAddress.county=			address.county.toString()
					} else {
						objAddress.county=	&quot;&quot;; 
					} // end if county element
					
					if(address.city.toString().length&gt;0) {
						objAddress.city=			address.city.toString()
					} else {
						objAddress.city=	&quot;&quot;; 
					} // end if city element
					
					if(address.state.toString().length&gt;0) {
						objAddress.state=			address.state.toString()
					} else {
						objAddress.state= &quot;&quot;;
					} // end if state element
					
					if(address.postalCode.toString().length&gt;0) {
						objAddress.postalCode=		address.postalCode.toString()
					} else {
						objAddress.postalCode= &quot;&quot;;
					} // end if postalCode element
					
					if(address.useablePeriod) {
						if(address.useablePeriod.children().length()&gt;0) {
							for each(child in address.useablePeriod.children()) {
								if(child.localName()== &apos;low&apos;) {
									objAddress.beginDate=	child[&apos;@low&apos;].toString();
								}
								if(child.localName()== &apos;high&apos;) {
									objAddress.endDate=		child[&apos;@high&apos;].toString();
								}
							} // end for each
						} // end if 
					} // end if useablePeriod element
					arrAddresses.push(objAddress);
				// } // for each child element
				
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;function arrAddress: &apos;+JSON.stringify(arrAddresses)); }

			arrAddresses= objAddress;
			if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;function arrAddress: &apos;+JSON.stringify(arrAddresses)); }
		} // end if number of addr elements

		channelMap.put(&apos;arrAddresses&apos;,JSON.stringify(arrAddresses));
		return arrAddresses;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6b3af922-f209-40b0-a3d2-074f147abe37</id>
                <name>getAssignedAuthor</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911325519</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** getAssignedAuthor(msg)

  	- Desc: This function receives CCD assignedAuthor XML Object and returns JavaScript object
  	- Modified 
  	2018-02-24 04:18 CT JER - Modified the msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;].toString() evaluation !== undefined to length&gt;0
	
   	@param {XML} msg - this contains the raw message (string)
	@return {object} getAssignedAuthor - contains getAssignedAuthor JS object and related properties.
*/

function getAssignedAuthor(msg) {

	var debug= 0;
	var objAssignedAuthor= new Object;

	if(debug&gt;0) { 
		logger.error(&apos;getAssignedAuthor msg: &apos;+msg);
		logger.error(&apos;getAssignedAuthor msg[assignedAuthor]: &apos;+JSON.stringify(msg[&apos;assignedAuthor&apos;])+
		&apos; typeof: &apos;+msg[&apos;assignedAuthor&apos;]+
		&apos; length: &apos;+msg[&apos;assignedAuthor&apos;].toString().length); 
	} // end if 
	
	if(typeof msg[&apos;assignedAuthor&apos;] !== &apos;undefined&apos;) {
		if(msg[&apos;assignedAuthor&apos;].children().length()&gt;0) {
			
			// &lt;assignedAuthor classCode=&quot;ASSIGNED&quot;&gt;
			// set assignedAuthor classCode
			if(typeof msg[&apos;assignedAuthor&apos;][&apos;@classCode&apos;] !== &apos;undefined&apos;) {
				if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][@classCode]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;@classCode&apos;].toString()); }
				objAssignedAuthor.classCode= msg[&apos;assignedAuthor&apos;][&apos;@classCode&apos;].toString();
			} // end if
			
			// &lt;id assigningAuthorityName=&quot;INLP_FIN&quot; extension=&quot;INLP&quot; root=&quot;2.16.840.1.113883.3.2139.200&quot;/&gt;
			// set assignedAuthor Id
			if(typeof msg[&apos;assignedAuthor&apos;][&apos;id&apos;] !== &apos;undefined&apos;) {
				// set assignedAuthor Id assigningAuthorityName
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][id][@assigningAuthorityName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString()); }
					objAssignedAuthor.assigningAuthorityName= msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString();
				} // end if
				// set assignedAuthor Id root
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@root&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][id][@root]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@root&apos;].toString()); }
					objAssignedAuthor.root= msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@root&apos;].toString();
				} // end if
				// set assignedAuthor Id extension
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@extension&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][id][@extension]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@extension&apos;].toString()); }
					objAssignedAuthor.extension= msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
				} // end if
			} // end if
			
			// set assignedAuthor Code
			if(typeof msg[&apos;assignedAuthor&apos;][&apos;code&apos;] !== &apos;undefined&apos;) {
				// set assignedAuthor code code
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@code&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][code][@code]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@code&apos;].toString()); }
					objAssignedAuthor.code= msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
				} // end if
				// set assignedAuthor code codeSystemOid
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][code][@codeSystem]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString()); }
					objAssignedAuthor.codeSystem= msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString();
				} // end if
				// set assignedAuthor code codeSystemName
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][code][@codeSystemName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;].toString()); }
					objAssignedAuthor.codeSystemName= msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;].toString();
				} // end if
				// set assignedAuthor code displayName
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@displayName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][code][@displayName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString()); }
					objAssignedAuthor.codeDisplayName= msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
				} // end if
			} // end if
			
	
			// set assignedAuthor assignedAuthoringDevice
			/* &lt;assignedAuthoringDevice&gt;&lt;manufacturerModelName&gt;Cerner Corporation&lt;/manufacturerModelName&gt;&lt;softwareName&gt;Millennium Clinical Document Generator&lt;/softwareName&gt;&lt;/assignedAuthoringDevice&gt; */
			if(typeof msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;] !== &apos;undefined&apos;) {
				// get manufacturer
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;manufacturerModelName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][assignedAuthoringDevice][manufacturerModelName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;manufacturerModelName&apos;].toString()); }
					objAssignedAuthor.assignedAuthorizingDevice_manufacturer= msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;manufacturerModelName&apos;].toString();
				} // end if 
				// get softwareName
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;softwareName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][assignedAuthoringDevice][softwareName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;softwareName&apos;].toString()); }
					objAssignedAuthor.assignedAuthorizingDevice_softwareName= msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;softwareName&apos;].toString();
				} // end if 
			} // end if 
			
			// set assignedAuthor representedOrganization
			/*  &lt;representedOrganization classCode=&quot;ORG&quot; determinerCode=&quot;INSTANCE&quot;&gt;&lt;id assigningAuthorityName=&quot;INLP_FIN&quot; extension=&quot;INLP&quot; root=&quot;2.16.840.1.113883.3.2139.200&quot;/&gt;&lt;id root=&quot;2.16.840.1.113883.3.2139&quot;/&gt;&lt;name&gt;La Porte Hospital&lt;/name&gt;
			*/

			if(debug&gt;0) { 
				logger.error(&apos;msg[assignedAuthor][representedOrganization]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;]+
					&apos; typeof: &apos;+typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;]+
					&apos; toString: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;].toString()+
					&apos; length: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;].toString().length); 
			}
			
			if(msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;].toString().length&gt;0) {
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;] !== &apos;undefined&apos;) {
					// set representedOrganization Id assigningAuthorityName
					if(typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][representedOrganization][id][@assigningAuthorityName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString()); }
						objAssignedAuthor.representedOrganization_assigningAuthorityName= msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString();
					} // end if
					// set representedOrganization Id extension
					if(typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@extension&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][representedOrganization][id][@extension]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@extension&apos;].toString()); }
						objAssignedAuthor.representedOrganization_extension= msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@extension&apos;].toString();
					} // end if
					// set representedOrganization Id root
					if(typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@root&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][representedOrganization][id][@root]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@root&apos;].toString()); }
						objAssignedAuthor.representedOrganization_root= msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@root&apos;].toString();
					} // end if
				} // end if 
			} // end if
				
			// check for assignedAuthor representedOrganization name child element
			if(typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;name&apos;] !== &apos;undefined&apos;) {
				if(msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;name&apos;].toString().length&gt;0) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][representedOrganization][name]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;name&apos;].toString()); }
					objAssignedAuthor.representedOrganizationName= msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;name&apos;].toString();	// Walgreens Drug Store 12562
				} else if (msg[&apos;assignedAuthor&apos;][&apos;assignedPerson&apos;][&apos;name&apos;].toString().length&gt;0) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][assignedPerson][name]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;assignedPerson&apos;][&apos;name&apos;].toString()); }
					objAssignedAuthor.representedOrganizationName= msg[&apos;assignedAuthor&apos;][&apos;assignedPerson&apos;][&apos;name&apos;].toString();	// Walgreens Drug Store 12562
				} // end if
			} // end if 
		} // end if
	} // end if 
	return objAssignedAuthor;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>a303a44c-4750-4b83-893f-cecf38ee1c7c</id>
                <name>getAssignedAuthorAddress</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911325540</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** setAssignedAuthorAddress(msg)

  	- Desc: This setAssignedAuthorAddress function receives message and returns objAssignedAuthorAddress toXMLString
  	- Modified:
  	2019-11-20 22:20 CST - Under development
	
   	@param {msg} - this contains the Javascript message document 
	@return {XML} objAssignedAuthorAddress - contains objAssignedAuthorAddress in XML Object string.

	Reference: https://gazelle.ihe.net/XDStarClient/rimihe-templates/rimihe-Author_XDSDocumentEntry.html
		
*/

function getAssignedAuthorAddress(msg) {

	var debug= 0;
	var arrParticipant= new Array();
	var strFunctionName= &apos;getAssignedAuthorAddress&apos;;
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; msg[author][assignedAuthor]: &apos;+msg[&apos;author&apos;][&apos;assignedAuthor&apos;].toXMLString());
		logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; msg[author][assignedAuthor][addr]: &apos;+msg[&apos;author&apos;][&apos;assignedAuthor&apos;][&apos;addr&apos;].toXMLString());
	} // end if 
		
	var objAssignedAuthorAddress= new Object;
	if(msg.author.assignedAuthor.children().length()&gt;0) {
		
		if(debug&gt;0) { 
			logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; AssignedAuthor.children().length: &apos;+msg.author.assignedAuthor.children().length()+&apos; children names: &apos;+msg.author.assignedAuthor.children());
		} // end if 
		if((msg[&apos;author&apos;][&apos;assignedAuthor&apos;][&apos;addr&apos;] !== &apos;undefined&apos;)&amp;&amp;(msg[&apos;author&apos;][&apos;assignedAuthor&apos;][&apos;addr&apos;].toString().length&gt;0)) {
			
			for each (child in msg.author.assignedAuthor.children()) {
					
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; child.fullName: &apos;+child.name()+&apos; child.text: &apos;+child.name+&apos; child.localName(): &apos;+child.localName());
				} // end if 
				if(child.localName()== &apos;addr&apos;) {
					if((child.toString() !== &apos;undefined&apos;)&amp;&amp;(child.toString().length&gt;0)) {
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; addr.toXMLString: &apos;+child.toXMLString());
						} // end if 
						objAssignedAuthorAddress.addr= child.toXMLString();
					} // end if 
				} // end if 
			} // end for each
		} // end if
		channelMap.put(&apos;objAssignedAuthorAddress&apos;,objAssignedAuthorAddress);
	} // end if

} // end proc</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>ee2d85ee-4285-4f11-9947-e1a96874d3f5</id>
                <name>getAssignedEntity</name>
                <revision>2</revision>
                <lastModified>
                  <time>1654011867722</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** getAssignedEntity(msg)

  	- Desc: This function receives CCD assignedEntity XML Object and returns JavaScript object
  	- Modified 	
  	2020-01-29 19:25 CT JER - Modified to comment out the debug statement to echo the toXMLString msg[assignedEntity][assignedPerson][name][given]
	2018-04-22 16:43 CT JER - Modified to include the storing of the id.root element.attribute for reference purposes
	2018-04-15 23:42 CT JER - Modified to include additional if no value or sizeable value handling (length()&gt;1, length= 1 and the else) for givenName element value.
	2018-02-16 17:48 CT JER - Added the assignedPerson Name suffix and the representedOrganization Name

   	@param {XML} msg - this contains the raw message (string)
	@return {object} objAssignedEntity - contains objAssignedEntity JS object and related properties.
*/

function getAssignedEntity(msg) {

	var debug= 0;
	var objAssignedEntity= new Object;
	default xml namespace = &apos;urn:hl7-org:v3&apos;;
	// &lt;given xmlns=&quot;urn:hl7-org:v3&quot;&gt;Julius&lt;/given&gt;&lt;given xmlns=&quot;urn:hl7-org:v3&quot;&gt;R&lt;/given&gt;
	
	if(typeof msg[&apos;assignedEntity&apos;] !== &apos;undefined&apos;) {
		if(msg[&apos;assignedEntity&apos;].children().length()&gt;0) {
			
			// set assignedEntity classCode
			if(typeof msg[&apos;assignedEntity&apos;][&apos;@classCode&apos;] !== &apos;undefined&apos;) {
				if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][@classCode]: &apos;+msg[&apos;assignedEntity&apos;][&apos;@classCode&apos;].toString()); }
				objAssignedEntity.classCode= msg[&apos;assignedEntity&apos;][&apos;@classCode&apos;].toString();
			} // end if
			
			// set assignedEntity Id
			if(typeof msg[&apos;assignedEntity&apos;][&apos;id&apos;][0] !== &apos;undefined&apos;) {
				// set assignedEntity Id assigningAuthorityName
				if(typeof msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@assigningAuthorityName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][id][0][@assigningAuthorityName]: &apos;+msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@assigningAuthorityName&apos;].toString()); }
					objAssignedEntity.assigningAuthorityName= msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@assigningAuthorityName&apos;].toString();
				} // end if
				// set assignedEntity Id root
				if(typeof msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@root&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][id][0][@root]: &apos;+msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@root&apos;].toString()); }
					objAssignedEntity.root= msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@root&apos;].toString();
				} // end if
				// set assignedEntity Id extension
				if(typeof msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@extension&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][id][0][@extension]: &apos;+msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@extension&apos;].toString()); }
					objAssignedEntity.extension= msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@extension&apos;].toString();
				} // end if
			} // end if
			
			// set assignedEntity Code
			if(typeof msg[&apos;assignedEntity&apos;][&apos;code&apos;] !== &apos;undefined&apos;) {
				// set assignedEntity code code
				if(typeof msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@code&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][code][@code]: &apos;+msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@code&apos;].toString()); }
					objAssignedEntity.code= msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
				} // end if
				// set assignedEntity code codeSystemOid
				if(typeof msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][code][@codeSystem]: &apos;+msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString()); }
					objAssignedEntity.codeSystem= msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString();
				} // end if
				// set assignedEntity code codeSystemName
				if(typeof msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][code][@codeSystemName]: &apos;+msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;].toString()); }
					objAssignedEntity.codeSystemName= msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;].toString();
				} // end if
				// set assignedEntity code displayName
				if(typeof msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@displayName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][code][@displayName]: &apos;+msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString()); }
					objAssignedEntity.codeDisplayName= msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
				} // end if
			} // end if

		
			// set assignedEntity assignedPerson name
			if(typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;] !== &apos;undefined&apos;) {
				if(debug&gt;0) { 
					logger.error(&apos;toXMLString msg[assignedEntity][assignedPerson][name][given]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].toXMLString()+
					&apos;msg[assignedEntity][assignedPerson][name][given]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].toString()+
					&apos; typeof: &apos;+typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;]+
					&apos; length: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].length()
					);
				}
				if(typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;] !== &apos;undefined&apos;) {
					// get assignedEntity Given name	
					if((typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;] !== &apos;undefined&apos;)||(msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].toString().length&gt;0)) {	
						if(debug&gt;0) { 
							logger.error(&apos;msg[assignedEntity][assignedPerson][name][given]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;][0].toString()); 
						} // end if 
						if(msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].length()&gt;1) {
							objAssignedEntity.givenName= msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;][0].toString();
						} else if(msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].length()== 1) {
							objAssignedEntity.givenName= msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].toString();
						} else {
							objAssignedEntity.givenName= &apos;&apos;;
						} // end if 
					} // end if 
					// get assignedEntity Family name	
					if((typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;family&apos;] !== &apos;undefined&apos;)||(msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;family&apos;].length&gt;0)) {	
						if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][assignedPerson][name][family]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;family&apos;].toString().replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;)); }
						objAssignedEntity.familyName= msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;family&apos;].toString().replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;);
					} // end if
					// get assignedEntity Suffix
					if(debug&gt;0) { logger.error(&apos;getAssignedEntity msg[assignedEntity][assignedPerson][name][suffix]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;]+
						&apos; typeof: &apos;+typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;]+
						&apos; length: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;].toString().length);
					} // end if logger.error
					if((typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;] !== &apos;undefined&apos;)||(msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;].toString().length&gt;0)) {	
						if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][assignedPerson][name][suffix]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;].toString()); }
						objAssignedEntity.suffix= msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;].toString();
					} // end if 
				} // end if 
			} // end if 
			
			// set assignedEntity representedOrganization
			if(typeof msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;] !== &apos;undefined&apos;) {
				// check for assignedEntity representedOrganization name child element
				if(typeof msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;name&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][representedOrganization][name]: &apos;+msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;name&apos;].toString()); }
					objAssignedEntity.representedOrganizationName= msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;name&apos;].toString();	// Walgreens Drug Store 12562
				} // end if
				
				if(typeof msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;id&apos;] !== &apos;undefined&apos;) {
					if(typeof msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;root&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][representedOrganization][id][root]: &apos;+msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;root&apos;].toString()); }
						objAssignedEntity.representedOrganizationIdRoot= msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;root&apos;].toString();	// 12562
					} // end if 
				} // end if
			} // end if
		} // end if
	} // end if 

	if(objAssignedEntity.toString().length&gt;0) {
		channelMap.put(&apos;assignedEntity&apos;,objAssignedEntity);
	}
	
	return objAssignedEntity;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>e2cc3ab2-6619-43f6-b77e-bb2f56a8670f</id>
                <name>getAuthorPerson</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911325323</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** getAuthorPerson(object)

  	- Desc: This function receives Javascript Object and returns AuthorPerson string
  	- Modified:
	2018-02-18 10:12 CT JER - Modified to accommodate the changes to the objAssignedEntity
  	2018-02-16 10:40 CT JER - Removed the objAuthor instances reference and left the references specific to JS Rhino XPath
  	2018-02-15 16:01 CT JER - Modified included additional typeof and for each object

   	@param {object} objAuthor - this contains the Javascript Object (object)
	@return {string} strAuthorPerson - contains authorPerson string containing the required HL7.Composite.XCN datatype and related properties.
	
	[2018-02-18 10:11:47,629]  ERROR (transformer:?): objAuthor= ({assigningAuthorityName:&quot;INLP_FIN&quot;, extension:&quot;3100004118&quot;, root:&quot;2.16.840.1.113883.3.2139.200&quot;, startTime:&quot;20180208041500&quot;, stopTime:&quot;20180208075000&quot;, dispositionCode:&quot;&quot;, dispositionCodeSystemOid:&quot;&quot;, dispositionCodeSystemName:&quot;&quot;, dispositionDisplayName:&quot;Home or Self Care&quot;, encounterParticipant_code:&quot;ATND&quot;, assignedEntity_root:&quot;2.16.840.1.113883.3.2139.300&quot;, assignedEntity_extension:&quot;8284&quot;, assignedEntity_assigningAuthorityName:&quot;LPS_ORG_DOC&quot;, assignedEntity_code:&quot;&quot;, assignedEntity_codeSystem:&quot;&quot;, assignedEntity_codeSystemName:&quot;&quot;, assignedEntity_codeDisplayName:&quot;&quot;, assignedEntity_givenName:&quot;Robert&quot;, assignedEntity_familyName:&quot;Riggs&quot;})
	
*/

function getAuthorPerson(objAuthor) {

	var debug= 0;
	var cntObject= 0;
	var strAuthorPerson= &apos;&apos;;
	if(debug&gt;0) { 
		logger.error(&quot;getAuthorPerson objAuthor= &quot;+objAuthor.toSource()); 
		// logger.error(&quot;objAuthor JSON= &quot;+JSON.stringify(objAuthor, null, 4));
	}

	if(typeof objAuthor !== &apos;undefined&apos;) {	
	
		// replaced the assignedId with assignedEntity_extension
		if(typeof objAuthor.assignedEntity_extension !== &apos;undefined&apos;) {
			if(objAuthor.assignedEntity_extension.toString().length&gt;0) {
				if(debug&gt;0) { logger.error(&apos;objAuthor.assignedEntity_extension: &apos;+objAuthor.assignedEntity_extension.toString()); }
				strAuthorPerson += objAuthor.assignedEntity_extension.toString();
			} // end if 
		} // end if 

	
		// replaced the assignedPersonLastName with assignedEntity_familyName
		if(typeof objAuthor.assignedEntity_familyName !== &apos;undefined&apos;) {
			if(debug&gt;0) { logger.error(&apos;objAuthor.assignedEntity_familyName: &apos;+objAuthor.assignedEntity_familyName.toString()); }
			if(objAuthor.assignedEntity_familyName.toString().length&gt;0) {
				strAuthorPerson += &quot;^&quot;+objAuthor.assignedEntity_familyName.toString();
			} else {
				strAuthorPerson += &quot;^&quot;;
			} // end if 
		} // end if 
		// replaced the assignedPersonFirstName with assignedEntity_givenName
		if(typeof objAuthor.assignedEntity_givenName !== &apos;undefined&apos;) {
			// replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;) to remove namespaces
			// objAuthor.assignedEntity_givenName.toString().replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;)); }
			if(debug&gt;0) { 
				logger.error(&apos;objAuthor.assignedEntity_givenName: &apos;+objAuthor.assignedEntity_givenName.toString());
			} // end if 
			if(objAuthor.assignedEntity_givenName.toString().length&gt;0) {
				// strAuthorPerson += &quot;^&quot;+objAuthor.assignedEntity_givenName.toString().replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;);
				strAuthorPerson += &quot;^&quot;+objAuthor.assignedEntity_givenName;
			} else {
				strAuthorPerson += &quot;^&quot;;
			} // end if 
		} // end if

		 
		// replace the assignedPersonSuffix with assignedEntity_suffix
		if(typeof objAuthor.assignedEntity_suffix !== &apos;undefined&apos;) {
			if(debug&gt;0) { logger.error(&apos;objAuthor.assignedEntity_suffix: &apos;+objAuthor.assignedEntity_suffix.toString()); }
			if(objAuthor.assignedEntity_suffix.toString().length&gt;0) {
				strAuthorPerson += &quot;^^&quot;+objAuthor.assignedEntity_suffix.toString();
			} else {
				strAuthorPerson += &quot;^^&quot;;
			} // end if 
		} // end if 
		// replace the assignedRoot with assignedEntity_root
		if(typeof objAuthor.assignedEntity_root !== &apos;undefined&apos;) {
			if(debug&gt;0) { logger.error(&apos;objAuthor.assignedEntity_root: &apos;+objAuthor.assignedEntity_root.toString()); }
			if (objAuthor.assignedEntity_root.toString().length&gt;0) {
				strAuthorPerson += &quot;^^^^^&amp;amp;&quot;+objAuthor.assignedEntity_root.toString()+&quot;&amp;amp;ISO&quot;;
			} else {
				strAuthorPerson += &quot;^^^^^&quot;;
			} // end if
		} // end if
	} // end if 

	if(debug&gt;0) { logger.error(&quot;getAuthorPerson.strAuthorPerson: &quot;+strAuthorPerson); }
	return strAuthorPerson;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>e7b0d95b-2bde-43e7-ab61-ea1572002360</id>
                <name>getAuthors</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911325559</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** getAuthors(msg)

	- Desc: This function receives CCD msg and returns an array of Author objects 
	- Modified
	2018-02-18 13:38 CT JER - Modified to accommodate the changes to call the objAssignedAuthor function
	2018-02-10 11:32 CT JER - Verified per the HL7 Rim model 1..* assignedAuthors elements (1..* more authors) list objects persist to arrAuthors.
	2018-02-08 03:58 CT JER - Modified for additional handling verify typeof !== &apos;undefined&apos; and two conditionals to set authorInstitution property
	
	@param {String} msg - Raw msg
	@return {Array} return array of Author objects
*/
function getAuthors(msg) {
	
	var debug= 0;
	// uncertain if more than one assignedAuthor per ClinicalDocument
	if(debug&gt;0) { logger.error(&apos;getAuthor of msg[author]: &apos;+msg[&apos;author&apos;]); }
	
	var objAuthor= new Object;			
	var objAssignedAuthor= getAssignedAuthor(msg[&apos;author&apos;]);

	if(typeof objAssignedAuthor !== &apos;undefined&apos;) {
	
		// get assigningAuthorityName
		if((typeof objAssignedAuthor.assigningAuthorityName !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.assigningAuthorityName.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][id][@assigningAuthorityName]: &apos;+objAssignedAuthor.assigningAuthorityName.toString()); }
			objAuthor.IdAssigningAuthorityName= objAssignedAuthor.assigningAuthorityName.toString();
		} // end if
		// get root
		if((typeof objAssignedAuthor.root !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.root.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][id][@root]: &apos;+objAssignedAuthor.root.toString()); }
			objAuthor.Idroot= objAssignedAuthor.root.toString();
		} // end if
		// get extension
		if((typeof objAssignedAuthor.extension !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.extension.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][id][@extension]: &apos;+objAssignedAuthor.extension.toString()); }
			objAuthor.Idextension= objAssignedAuthor.extension.toString();
		} // end if			
	
		// get assignedAuthorizingDevice manufacturer -&gt; set manufacturer
		if((typeof objAssignedAuthor.assignedAuthorizingDevice_manufacturer !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.assignedAuthorizingDevice_manufacturer.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][assignedAuthoringDevice][manufacturerModelName]: &apos;+objAssignedAuthor.assignedAuthorizingDevice_manufacturer.toString()); }
			objAuthor.authorizingDevice= objAssignedAuthor.assignedAuthorizingDevice_manufacturer.toString();
		} // end if			
	
		// get assignedAuthorizingDevice softwareName -&gt; set softwareName
		if((typeof objAssignedAuthor.assignedAuthorizingDevice_softwareName !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.assignedAuthorizingDevice_softwareName.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][assignedAuthoringDevice][softwareName]: &apos;+objAssignedAuthor.assignedAuthorizingDevice_softwareName.toString()); }
			objAuthor.softwareName= objAssignedAuthor.assignedAuthorizingDevice_softwareName.toString();
		} // end if	
				
		// get objAssignedAuthor representedOrganization_assigningAuthorityName -&gt; set assigningAuthorityName
		if((typeof objAssignedAuthor.representedOrganization_assigningAuthorityName !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.representedOrganization_assigningAuthorityName.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][representedOrganization][id][assigingAuthorityName]: &apos;+objAssignedAuthor.representedOrganization_assigningAuthorityName.toString()); }
			objAuthor.representedOrganization_assigingAuthorityName= objAssignedAuthor.representedOrganization_assigningAuthorityName.toString();
		} // end if				
	
		// get objAssignedAuthor representedOrganization_extension -&gt; set extension
		if((typeof objAssignedAuthor.representedOrganization_extension !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.representedOrganization_extension.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][representedOrganization][id][extension]: &apos;+objAssignedAuthor.representedOrganization_extension.toString()); }
			objAuthor.representedOrganization_extension= objAssignedAuthor.representedOrganization_extension.toString();
		} // end if	
	
		// get objAssignedAuthor representedOrganization_root -&gt; set root
		if((typeof objAssignedAuthor.representedOrganization_root !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.representedOrganization_root.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][representedOrganization][id][root]: &apos;+objAssignedAuthor.representedOrganization_root.toString()); }
			objAuthor.representedOrganization_root= objAssignedAuthor.representedOrganization_root.toString();
		} // end if
				
		// get objAssignedAuthor.representedOrganizationName -&gt; set representedOrganizationName
		if((typeof objAssignedAuthor.representedOrganizationName !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.representedOrganizationName.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][representedOrganization][name]: &apos;+objAssignedAuthor.representedOrganizationName.toString()); }
			objAuthor.authorInstitution= objAssignedAuthor.representedOrganizationName.toString();
		} // end if
	} // end if 
	
	return objAuthor;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>d3986b7b-37b0-4f49-a339-b77570df76a6</id>
                <name>getCCDASectionMap</name>
                <revision>1</revision>
                <lastModified>
                  <time>1656369794466</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** getCCDASectionMap(code)

  	- Desc: This function receives the templateId code and returns the mapped CCDA Section titlename

   	@param {String} msg - this contains the raw message (string)
	@return {object} objPatientRole - this contains the patientRole elements composed into a single objPatientRole object.
	
	History
*/
function getCCDASectionMap(code) {

	var debug= 0;
	var scriptName= &apos;getCCDASectionMap&apos;;
	
	if(code== &quot;2.16.840.1.113883.10.20.22.2.22&quot;) return &apos;Encounter Details&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.6&quot;)  return &apos;Allergies&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.1&quot;)  return &apos;Medications&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.5&quot;)  return &apos;Active Problems&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.2&quot;)  return &apos;Immunizations&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.17&quot;) return &apos;Social History&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.4&quot;)  return &apos;Vital Signs&apos;;
	if(code== &quot;1.3.6.1.4.1.19376.1.5.3.1.3.4&quot;)   return &apos;Progress Notes&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.65&quot;) return &apos;Miscellaneous Notes&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.10&quot;) return &apos;Plan of Treatment&apos;; 
	if(code== &quot;2.16.840.1.113883.10.20.22.2.7&quot;)  return &apos;Procedures&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.3&quot;)  return &apos;Results&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.8&quot;)  return &apos;Visit Diagnoses&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.18&quot;) return &apos;Insurance&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6fa24651-0c70-4d88-95b6-a50ba345cdfc</id>
                <name>getClinicalDocumentInfo</name>
                <revision>3</revision>
                <lastModified>
                  <time>1661276497143</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** getClinicalDocumentInfo(msg)

  	- Desc: This function receives CCD msg and returns clinicalDocumentInfo object
  	- Modified:
 	2018-02-10 11:20 CT JER - Modified to include capturing the SetId and versionNumber attributes

   	@param {String} msg - this contains the raw message (string)
	@return {object} objClinDocInfo - this contains a clinical document info element specific values composed into a single objClinDocInfo object.
	History 
	2022-08-23 JER - Added channelMap to capture the CCDA Document Header Information
	2021-09-20 JER - Modified to incorporate logger.error prior to returning function value
*/
function getClinicalDocumentInfo(msg) {
	var scriptName= &apos;getClinicalDocumentInfo&apos;;
	var debug= 0;
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function BEGIN msg: &apos;+msg); }
		
		var objClinDocInfo= new Object();
		
		objClinDocInfo.extension=				msg[&apos;id&apos;][&apos;@extension&apos;].toString();
		objClinDocInfo.root=					msg[&apos;id&apos;][&apos;@root&apos;].toString();	
		objClinDocInfo.assigningAuthorityName=		msg[&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString();
		objClinDocInfo.code=					msg[&apos;code&apos;][&apos;@code&apos;].toString();
		objClinDocInfo.codeSystemOid=				msg[&apos;code&apos;][&apos;@codeSystem&apos;].toString();
		objClinDocInfo.codeSystemName=			msg[&apos;code&apos;][&apos;@codeSystemName&apos;].toString();
		objClinDocInfo.displayName=				msg[&apos;code&apos;][&apos;@displayName&apos;].toString();
		objClinDocInfo.title=					msg[&apos;title&apos;].toString();
		objClinDocInfo.creationTime=				msg[&apos;effectiveTime&apos;][&apos;@value&apos;].toString().substring(0,14);
		objClinDocInfo.confCode=					msg[&apos;confidentialityCode&apos;][&apos;@code&apos;].toString();
		objClinDocInfo.confCodeSystemOid=			msg[&apos;confidentialityCode&apos;][&apos;@codeSystem&apos;].toString();
		objClinDocInfo.languageCode=				msg[&apos;languageCode&apos;][&apos;@code&apos;].toString();
		objClinDocInfo.setIdExtension=			msg[&apos;setId&apos;][&apos;@extension&apos;].toString();
		objClinDocInfo.setIdRoot=				msg[&apos;setId&apos;][&apos;@root&apos;].toString();	
		objClinDocInfo.setIdAssigningAuthorityName=	msg[&apos;setId&apos;][&apos;@assigningAuthorityName&apos;].toString();
		objClinDocInfo.documentVersion=			msg[&apos;versionNumber&apos;][&apos;@value&apos;].toString();

		// 2022-08-23 JER - Added channelMap to capture the CCDA Document Header Information
		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function objClinDocInfo: &apos;+JSON.stringify(objClinDocInfo)); }
		channelMap.put(&apos;ClinDocInfo&apos;,JSON.stringify(objClinDocInfo));
		
		return objClinDocInfo;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>70cd4591-c02c-43e3-8da1-b6c7f3debd3b</id>
                <name>getCustodian</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911325472</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** getCustodian(msg)

	- Desc: This function receives CCD msg and returns an array of custodian objects 
	- Modified
	2018-02-11 17:49 CT JER - Newly created to store the custodian objects

	@param {String} msg - Raw msg
	@return {Array} return array of custodian objects
*/
function getCustodian(msg) {
	
	var debug= 0;
	var objCounter= 1;
	var arrCustodian= new Array();

	// uncertain if more than one assignedCustodians per ClinicalDocument
	for each(custodian in msg[&apos;custodian&apos;][0]) {
		var objCustodian= new Object;
		objCustodian.id= objCounter;
		if(custodian.children().length()&gt;0) {
			if(debug&gt;0) { logger.error(&apos;custodian children()= &apos;+custodian.children()); }
			for each(child in custodian.children()) {
				// each assignedCustodian
				if(child.localName()== &apos;assignedCustodian&apos;) {
					// &lt;id assigningAuthorityName=&quot;HMS HOSPITAL NUMBER&quot; extension=&quot;134&quot; root=&quot;2.16.840.1.113883.3.1579.834848495152.134.500&quot;/&gt;
					if(typeof child.representedCustodianOrganization.id !== &apos;undefined&apos;) {
						objCustodian.representedOrganization_AssignAuthorityName=	child.representedCustodianOrganization.id.@assigningAuthorityName.toString();
						objCustodian.representedOrganization_Extension=  			child.representedCustodianOrganization.id.@extension.toString();
						objCustodian.representedOrganization_Root=  				child.representedCustodianOrganization.id.@root.toString();
					} // end if
					// e.g &lt;name&gt;HILL REGIONAL HOSPITAL&lt;/name&gt;
					if(typeof child.representedOrganziation.name !== &apos;undefined&apos;) {
						objCustodian.representedOrganization=					child.representedCustodianOrganization.name.toString();
					}
					// &lt;telecom use=&quot;WP&quot; value=&quot;tel:(254)580-8500&quot;/&gt;
					if(typeof child.representedOrganziation.telecom !== &apos;undefined&apos;) {
						objCustodian.representedOrganization_telecom=			child.representedCustodianOrganization.telecom.@value.toString();
					}
					// &lt;addr use=&quot;WP&quot;&gt;&lt;streetAddressLine&gt;101 CIRCLE DRIVE&lt;/streetAddressLine&gt;&lt;city&gt;HILLSBORO&lt;/city&gt;&lt;state&gt;TX&lt;/state&gt;&lt;postalCode&gt;766450000&lt;/postalCode&gt;&lt;/addr&gt;
					if(typeof child.representedOrganziation.addr !== &apos;undefined&apos;) {
						objCustodian.representedOrganization_streetAddress=				child.representedCustodianOrganization.addr.streetAddressLine.toString();
						objCustodian.representedOrganization_city=						child.representedCustodianOrganization.addr.city.toString();
						objCustodian.representedOrganization_state=						child.representedCustodianOrganization.addr.state.toString();
						objCustodian.representedOrganization_postalCode=					child.representedCustodianOrganization.addr.postalCode.toString();
					} // end if
				}
			} // end for each
		} // end if 
		objCounter++;
	} // end for each
	arrCustodian.push(objCustodian);

	return arrCustodian;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>b0e1a23f-7003-4f27-a819-985f89f80e87</id>
                <name>getEncounter</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911325138</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** getEncounter(msg)

  	- Desc: This function receives CCD msg and returns Encounter object
  	- Modified
  	2018-02-18 20:23 CT JER - Modified to include the addition of healthcareFacility Location Name - use for HealthcareFacilityTypeCode displayName
  	2018-02-16 17:33 CT JER - Added association to the getAssignedEntity to retrieve the assignedEntity related elements and attributes
  	2018-02-16 15:55 CT JER - Added handling for DischargeDisposition elements and attributes
  	2018-02-11 17:34 CT JER - Modified startTime and stopTime by applying the substring(0,14) function to remove the datetime offset
  	2018-02-10 11:27 CT JER - Corrected the setting of the objEncounter extension, root, startTime and stopTime
  	

   	@param {String} msg - this contains the raw message (string)
	@return {object} objEncounter - contains objEncounter object and related properties.
*/

function getEncounter(msg) {

var debug= 0;

	if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;] !== &apos;undefined&apos;) {
		if(msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;].children().length()&gt;0) {
			var objEncounter= new Object;
			
			// &lt;id assigningAuthorityName=&quot;HMS PATIENT ACCOUNT NUMBER&quot; extension=&quot;3480487&quot; root=&quot;2.16.840.1.113883.3.1579.834848495152.134.300&quot;/&gt;
			if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;] !== &apos;undefined&apos;) {
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][id][@assigningAuthorityName]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString()); }
					objEncounter.assigningAuthorityName= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString();
				} // end if
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@extension&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][id][@extension]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@extension&apos;].toString()); }
					objEncounter.extension= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
				} // end if
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@root&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][id][@root]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@root&apos;].toString()); }
					objEncounter.root= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@root&apos;].toString();
				} // end if
			} // end if
			
			// &lt;effectiveTime&gt;&lt;low value=&quot;20180203075200-0600&quot;/&gt;&lt;high value=&quot;20180203075200-0600&quot;/&gt;&lt;/effectiveTime&gt;
			if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;] !== &apos;undefined&apos;) {
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;low&apos;][&apos;@value&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][effectiveTime][low][@value]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;low&apos;][&apos;@value&apos;].toString()); }
					objEncounter.startTime= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;low&apos;][&apos;@value&apos;].toString().substring(0,14);
				} // end if
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;high&apos;][&apos;@value&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][effectiveTime][high][@value]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;high&apos;][&apos;@value&apos;].toString()); }
					objEncounter.stopTime= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;high&apos;][&apos;@value&apos;].toString().substring(0,14);
				} // end if
			} // end if
			
			//  &lt;dischargeDispositionCode code=&quot;1&quot; codeSystem=&quot;2.16.840.1.113883.12.112&quot; codeSystemName=&quot;HL7 Discharge Disposition&quot; displayName=&quot;DISCHARGED HOME/SELF CARE&quot;/&gt;
			if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;] !== &apos;undefined&apos;) {
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@code&apos;] !== &apos;undefined&apos;) {
					// get DischargeDisposition Code
					if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@code&apos;] !== &apos;undefined&apos;) {&#xd;						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][dischargeDispositionCode][@code]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@code&apos;].toString()); }
						objEncounter.dispositionCode= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@code&apos;].toString();
					} // end if
					// get DischargeDisposition CodeSystemOid
					if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystem&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][dischargeDispositionCode][@codeSystem]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystem&apos;].toString()); }
						objEncounter.dispositionCodeSystemOid= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystem&apos;].toString();
					} // end if
					// get DischargeDisposition CodeSystemName
					if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystemName&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][dischargeDispositionCode][@codeSystemName]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystemName&apos;].toString()); }						
						objEncounter.dispositionCodeSystemName= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystemName&apos;].toString();
					} // end if
					// get DischargeDisposition DisplayName
					if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@displayName&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][dischargeDispositionCode][@displayName]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@displayName&apos;].toString()); }
						objEncounter.dispositionDisplayName= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@displayName&apos;].toString();
					} // end if
				} // end if 
				// get DischargeDisposition originalText
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;originalText&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][dischargeDispositionCode][originalText]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;originalText&apos;].toString()); }
					objEncounter.dispositionDisplayName= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;originalText&apos;].toString();
				} // end if 
			} // end if 	
				
			// get encounterParticipant assignedEntity
			if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;encounterParticipant&apos;] !== &apos;undefined&apos;) {
					
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;encounterParticipant&apos;][&apos;@typeCode&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][@typeCode]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;encounterParticipant&apos;][&apos;@typeCode&apos;].toString()); }
					objEncounter.encounterParticipant_code= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;encounterParticipant&apos;][&apos;@typeCode&apos;].toString();
				} // end if
				
				// call getAssignedEntity
				var objAssignedEntity= getAssignedEntity(msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;encounterParticipant&apos;]);
				if(objAssignedEntity !== &apos;undefined&apos;) {
				
					// get assignedEntity Root
					if(objAssignedEntity.root != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][id][@root]: &apos;+objAssignedEntity.root.toString()); }
						objEncounter.assignedEntity_root= objAssignedEntity.root.toString();
					} // end if
					// get assignedEntity Extension
					if(objAssignedEntity.extension != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][id][@extension]: &apos;+objAssignedEntity.extension.toString()); }
						objEncounter.assignedEntity_extension= objAssignedEntity.extension.toString();
					} // end if
					// get assignedEntity AssigningAuthorityName
					if(objAssignedEntity.assigningAuthorityName != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][id][@assigningAuthorityName]: &apos;+objAssignedEntity.assigningAuthorityName.toString()); }
						objEncounter.assignedEntity_assigningAuthorityName= objAssignedEntity.assigningAuthorityName.toString();
					} // end if
					
					// get assignedEntity code
					if(objAssignedEntity.code != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][code][@code]: &apos;+objAssignedEntity.code.toString()); }
						objEncounter.assignedEntity_code= objAssignedEntity.code.toString();
					} // end if
					// get assignedEntity codeSystem
					if(objAssignedEntity.codeSystem != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][code][@codeSystem]: &apos;+objAssignedEntity.codeSystem.toString()); }
						objEncounter.assignedEntity_codeSystem= objAssignedEntity.codeSystem.toString();
					} // end if
					// get assignedEntity codeSystemName
					if(objAssignedEntity.codeSystemName != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][code][@codeSystemName]: &apos;+objAssignedEntity.codeSystemName.toString()); }
						objEncounter.assignedEntity_codeSystemName= objAssignedEntity.codeSystemName.toString();
					} // end if
					// get assignedEntity displayName
					if(objAssignedEntity.codeDisplayName != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][code][@displayName]: &apos;+objAssignedEntity.codeDisplayName.toString()); }
						objEncounter.assignedEntity_codeDisplayName= objAssignedEntity.codeDisplayName.toString();
					} // end if

					// get assignedEntity Author GivenName
					if(objAssignedEntity.givenName != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][assignedPerson][name][@given]: &apos;+objAssignedEntity.givenName.toString()); }
						objEncounter.assignedEntity_givenName= objAssignedEntity.givenName.toString();
					} // end if
					// get assignedEntity Author FamilyName
					if(objAssignedEntity.familyName != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][assignedPerson][name][@family]: &apos;+objAssignedEntity.familyName.toString()); }
						objEncounter.assignedEntity_familyName= objAssignedEntity.familyName.toString();
					} // end if					
				} // end if 
			} // end if 
			
			// get HealthcareFacilityTypeCode
			if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthCareFacility&apos;] !== &apos;undefined&apos;) {
	
				// set healthcareFacility classCode
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;@classCode&apos;] !== &apos;undefined&apos;) {
					if((typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;@classCode&apos;] != null)&amp;&amp;(msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;@classCode&apos;].toString().length&gt;0)) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][location][healthcareFacility][@classCode].toString(): &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;@classCode&apos;].toString()); }
						objEncounter.healthcareFacility_classCode= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;@classCode&apos;].toString();
					} // end if 
				} // end if

				// set healthcareFacility Location 
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;] !== &apos;undefined&apos;) {
	
					// set healthcareFacility Location classCode
					if((typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;@classCode&apos;] != null)&amp;&amp;(msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;@classCode&apos;].toString().length&gt;0)) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][location][healthcareFacility][location][@classCode].toString(): &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;@classCode&apos;].toString()); }
						objEncounter.healthcareFacilityLocation_classCode= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;@classCode&apos;].toString();
					} // end if 

					// set healthcareFacility Location Name - use for HealthcareFacilityTypeCode displayName
					if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;name&apos;] !== &apos;undefined&apos;) {
						if((typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;name&apos;] != null)&amp;&amp;(msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;name&apos;].toString().length&gt;0)) {
							if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][location][healthcareFacility][location][name].toString(): &apos;+msg.componentOf.encompassingEncounter.location.healthcareFacility.location.name.toString()); }
							objEncounter.healthcareFacilityLocation_name= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;name&apos;].toString();
							channelMap.put(healthcareFacilityDisplayName,objEncounter.healthcareFacilityLocation_name);
						} // end if 
					} // end if
				} // end if 
			} // end if 
		} // end if 
	} // end if
		
	return objEncounter;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>811b8224-4f41-4d15-8869-bbc5083c5533</id>
                <name>getEncounterDetails</name>
                <revision>9</revision>
                <lastModified>
                  <time>1657116996485</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  getEncounterDetails(object) - Desc: This function evaluates the Encounter Details Section of the CCDA to create arrObservations array of objObservations objects 

   	@param {String} msg - this contains the raw message (string)
	@return {object} objPatientRole - this contains the patientRole elements composed into a single objPatientRole object.
	
	History
	2021-09-20 JER - Modified to incorporate evaluation of multiple patientRole Id(s) in the case there are multiple patient identifiers
	2021-09-20 JER - Modified to patient.name incorporate evaluation of multiple patient name child elements in the case there are multiple patient identifiers
*/
function getEncounterDetails(section) {

	// define variables
	var debug= 0;
	var scriptName= &apos;getEncounterDetails&apos;;
	var arrObservations= [];
	
	// if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(section)= &apos;+typeof(section)+&apos; section= &apos;+section); 
	// }

	logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A&apos;+&apos;\n&apos;);
	
	if (typeof(section[&apos;entry&apos;][&apos;encounter&apos;][&apos;entryRelationship&apos;][&apos;act&apos;] !== &apos;undefined&apos;)) {
		
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B act.children()= &apos;+section[&apos;entry&apos;][&apos;encounter&apos;][&apos;entryRelationship&apos;][&apos;act&apos;].children()+&apos;\n&apos;);
		
		var cnt= 0;
		for(child in section[&apos;entry&apos;][&apos;encounter&apos;][&apos;entryRelationship&apos;][&apos;act&apos;].children()) {
			
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C&apos;+&apos;\n&apos;);
			
			if(child.localName()== &apos;entryRelationship&apos;) {
				if (child[&apos;@typeCode&apos;].toString() == &apos;SUBJ&apos;) {
					
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D&apos;+&apos;\n&apos;);
					var objObservation= new Object();
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos;: entryRelationship.act= &apos;+entryRelationship[&apos;@typeCode&apos;].toString()+&apos; of entryRelationship= &apos;+entryRelationship);
					objObservation.id= cnt;
					objObservation.typeCode= &apos;SUBJ&apos;;

					cnt++;
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos;: objObservation= &apos;+objObservation);
					arrObservations.push(objObservation);
				}
			}
		}
	}
	
	channelMap.put(&apos;arrObservations&apos;,arrObservations);
	return arrObservations;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>f9d47f7b-aeaa-4232-a93c-99e8045a89e0</id>
                <name>getEthnicGroupCode</name>
                <revision>14</revision>
                <lastModified>
                  <time>1661352317364</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  getEthnicGroupCode(ethnicity) - Desc: This function receives CCD/CCDA msg and returns from getEthnicGroupCode Object

   	@param {String} msg - this contains the raw message (string)
	@return {object} objEthnicity - this contains the elements composed into a single objEthnicity object.
	
	History
	2022-08-21 JER - Handling of nullFlavor property with UNK value
	2022-08-17 JER - Modifying arrEthnicity from array to objEthnicity as a singular object
	2021-09-20 JER - leveraging the getTelecom for getEthnicGroupCode script
*/
function getEthnicGroupCode(ethnicity) {
 
	// define variables
	var debug= 0;
	var scriptName= &apos;getEthnicGroupCode&apos;;
	// var arrEthnicity= new Array();
	
	if(debug&gt;0) { logger.error(scriptName+&apos; ethnicity= &apos;+ethnicity); }
	if (typeof(ethnicity) !== &apos;undefined&apos;) {

		if(debug&gt;0) { 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; object.length= &apos;+ethnicity.length+&apos; value= &apos;+ethnicity);
		}
		
		var j= 0;
		for(var i= 0;i&lt;ethnicity.length();i++) {

			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(ethnicity[&apos;+i+&apos;][@code])= &apos;+typeof(ethnicity[i][&apos;@code&apos;])+&apos; ethnicity[@code]= &apos;+ethnicity[i][&apos;@code&apos;]);
			}

			var objEthnicity= new Object();
			// 2022-08-19 JER - Added evaluation of code if undefined or has toString gt zero (0) 
			if((typeof(ethnicity[i][&apos;@code&apos;])!== &apos;undefined&apos;)&amp;&amp;(ethnicity[i][&apos;@code&apos;].toString().length&gt;0)) {

				if(debug&gt; 0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; ethnicity[&apos;+i+&apos;][@code]: &apos;+ethnicity[i][&apos;@code&apos;].toString()); }
					
				objEthnicity.id= j;
				objEthnicity.code= ethnicity[i][&apos;@code&apos;].toString();
				objEthnicity.codeSystem= ethnicity[i][&apos;@codeSystem&apos;].toString();
				objEthnicity.codeSystemName= ethnicity[i][&apos;@codeSystemName&apos;].toString();
				objEthnicity.displayName= ethnicity[i][&apos;@displayName&apos;].toString();

			} else {
				logger.error(&apos;B&apos;);
				if(debug&gt; 0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; ethnicity[&apos;+i+&apos;][@code]: &apos;+ethnicity[i][&apos;@code&apos;].toString()); }
					
				objEthnicity.id= j;
				objEthnicity.code= &apos;LA4489-6&apos;;
				objEthnicity.codeSystem= &apos;1.3.6.1.4.1.12009.10.1.1817&apos;;
				objEthnicity.codeSystemName= &apos;LOINC UCUM Codes for Electronic Messaging&apos;
				objEthnicity.displayName= &apos;Unknown&apos;
					
				if(debug&gt;0) {
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function objEthnicity: &apos;+JSON.stringify(objEthnicity));
				}
			} // end if 
				
			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function objEthnicity: &apos;+JSON.stringify(objEthnicity)); 
			}
			j++;
		} // for each address element 

		//2022-08-17 JER - Modifying arrEthnicity from array to objEthnicity as a singular object
		// channelMap.put(&apos;arrEthnicity&apos;,JSON.stringify(arrEthnicity));
		// return arrEthnicity;
		if(objEthnicity) {
			return objEthnicity;
		} // end if 
	} else {
		return;
	} // end if 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>b6a4ff9d-f944-409f-8d73-46f34fa598dc</id>
                <name>getLanguageCommunication</name>
                <revision>3</revision>
                <lastModified>
                  <time>1660773608059</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  getLanguageCommunication(language) - Desc: This function receives CCD/CCDA msg and returns from getLanguageCommunication Object

   	@param {String} msg - this contains the raw message (string)
	@return {object} objLanguage - this contains the elements composed into a single objLanguage object.
	
	History
	2022-08-17 JER - Modifying arrLanguage from array to objLanguage as a singular object
	2021-09-20 JER - leveraging the getTelecom for getLanguageCommunication script
*/
function getLanguageCommunication(language) {
 
	// define variables
	var debug= 0;
	var scriptName= &apos;getLanguageCommunication&apos;;
	// var arrLanguage= new Array();
	
	if(debug&gt;0) { logger.error(scriptName+&apos; language= &apos;+language); }
	if (typeof(language) !== &apos;undefined&apos;) {

		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; object.length= &apos;+language.length()+&apos; value= &apos;+language);	}			
		
		if(language[&apos;languageCode&apos;].length()&gt;0) {
			// for each language element
			var j= 0;
			for(var i= 0;i&lt;language[&apos;languageCode&apos;].length();i++) {

				var objLanguage= new Object();
				// objLanguage.id= j;
				if(language[&apos;languageCode&apos;][i][&apos;@code&apos;].toString().length&gt;0) {
					
					if(debug&gt; 0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; language[languageCode][&apos;+i+&apos;][@code]: &apos;+language[&apos;languageCode&apos;][i][&apos;@code&apos;].toString()); }
					
					objLanguage.code= language[&apos;languageCode&apos;][i][&apos;@code&apos;].toString();
					objLanguage.codeSystem= language[&apos;languageCode&apos;][i][&apos;@codeSystem&apos;].toString();
					objLanguage.codeSystemName= language[&apos;languageCode&apos;][i][&apos;@codeSystemName&apos;].toString();
					objLanguage.displayName= language[&apos;languageCode&apos;][i][&apos;@displayName&apos;].toString();
				} // end if 

				// 2022-08-17 JER - Modifying arrLanguage from array to objLanguage as a singular object
				// arrLanguage.push(objLanguage);
				
				//} // for each child element
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function objLanguage: &apos;+JSON.stringify(objLanguage)); }
				j++;
			} // for each address element 
		} // end if 

		// 2022-08-17 JER - Modifying arrLanguage from array to objLanguage as a singular object
		// channelMap.put(&apos;arrLanguage&apos;,JSON.stringify(arrLanguage));
		// return arrLanguage;
		return objLanguage;
	} else {
		return;
	} // end if 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>f9b60e30-9568-4d8e-8a7a-e3760ff98cf2</id>
                <name>getParticipant</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911325443</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** getParticipant(msg)

  	- Desc: This function receives CCD msg and returns Participant objects
  	- Modified
	2019-11-21 CT JER - Copy of the getPerformer function

   	@param {String} msg - this contains the raw message (string)
	@return {array} arrParticipant - contains arrParticipant array contains objParticipant objects and related properties.
*/

function getParticipant(msg) {

	var debug= 0;
	var arrParticipant= new Array();

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; msg[component][structuredBody][component][section][entry]..*[participant]: &apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][&apos;section&apos;][&apos;entry&apos;]..*[&apos;participant&apos;].toXMLString()); 
		logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; msg[component][structuredBody][component][section][entry]..*[participant][@addr]: &apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][&apos;section&apos;][&apos;entry&apos;]..*[&apos;participant&apos;][&apos;@addr&apos;].toXMLString()); 
	} // end if 
	
	for each (participant in msg[component][structuredBody][component][section][entry]..*[participant]) {
	
		if((participant !== &apos;undefined&apos;)&amp;&amp;(participant.toString().length()&gt;0)) {
			var strPartCount= 0;
			if(debug&gt;0) { logger.error(&apos;participant[&apos;+strPartCount+&apos;]: &apos;+participant); }
			
			var objParticipant= new Object;
			if(participant.children().length()&gt;0) {
					
					if(debug&gt;0) { logger.error(&apos;Participant.children().length: &apos;+participant.children().length()+&apos; children names: &apos;+participant.children()); }
					// str = str.replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;);
					
					if(participant[&apos;addr&apos;] != null) {
						// check for functionCode element and it&apos;s attributes
						if(typeof participant[&apos;addr&apos;] !== &apos;undefined&apos;) {
							// check for functionCode code attribute
							if(participant[&apos;addr&apos;].toString().length&gt;0) {
								// get Participant Address
								if(debug&gt;0) { logger.error(&apos;participant[addr].toString(): &apos;+participant[&apos;addr&apos;].toXMLString()); }
								objParticipant.addr= participant[&apos;addr&apos;].toString();				// PP
							} // end if 
						} // end if 
						
					} // end if 

				} // end if
			//} // end if 
			arrParticipant.push(objParticipant);
			strPartCount++;
		} // end for each
	} // end if
	channelMap.put(&apos;objParticipant&apos;,arrParticipant);
	return arrParticipant;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>ddf9102b-8eaa-451e-875c-d359ef078c35</id>
                <name>getPatientRole</name>
                <revision>28</revision>
                <lastModified>
                  <time>1660679866865</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** getPatientRole(msg)

  	- Desc: This function receives CCD msg and returns from patientRole Object

   	@param {String} msg - this contains the raw message (string)
	@return {object} objPatientRole - this contains the patientRole elements composed into a single objPatientRole object.
	
	History
	2022-08-16 JER - Removed this code from the getPatientRole and add to the channel transformer separate these values from the patientRole object
	2022-08-14 JER - Modified/Add the patient/raceCode, patient/ethnicGroupCode and patient/languageCommunication coded element
	2022-07-28 JER - Modified to evaluate multiple name.given elements with the first as firstName and secondary elements as middleNames
	2021-09-20 JER - Modified to incorporate evaluation of multiple patientRole Id(s) in the case there are multiple patient identifiers
	2021-09-20 JER - Modified to patient.name incorporate evaluation of multiple patient name child elements in the case there are multiple patient identifiers
*/
function getPatientRole(msg) {

	// define variables
	var debug= 0;
	var scriptName= &apos;getPatientRole&apos;;
	var arrPatientIds= new Array();
	default xml namespace = new Namespace(&apos;urn:hl7-org:v3&apos;);
	
	if(debug&gt;0) { logger.error(scriptName+&apos; msg= &apos;+msg); }
	if (typeof(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;].toString()) !== &apos;undefined&apos;) {

		var objPatientRole= new Object();
		
		// 2021-09-20 JER - Modified to incorporate evaluation of multiple patientRole Id(s) in the case there are multiple patient identifiers
		if (typeof(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;]) !== &apos;undefined&apos;) {
			
			if(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;].length()&gt;0) {
				if(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;].length()&gt; 1) {
					for each(child in msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;]) {
					
						var objPatientId= new Object();
						objPatientId.patientId=						child[&apos;@extension&apos;].toString();
						objPatientId.assigningAuthorityOid=			child[&apos;@root&apos;].toString();
						objPatientId.assigningAuthorityName= 			child[&apos;@assigningAuthorityName&apos;].toString();
						arrPatientIds.push(objPatientId);
						if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function evaluate recordTarget.patientRole.Id objPatientId: &apos;+JSON.stringify(objPatientId)); }
					
					} // end for each 
					objPatientRole.patientIds=		arrPatientIds;
				} else {
					objPatientRole.patientId=					msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
					objPatientRole.assigningAuthorityOid=			msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;][&apos;@root&apos;].toString();
					objPatientRole.assigningAuthorityName= 			msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString();;
				}
			} // end if 
		} // end if 

		objPatientRole.address= getAddress(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;addr&apos;])
		
		// 2021-09-20 JER - Modified to patient.name incorporate evaluation of multiple patient name child elements in the case there are multiple patient identifiers
		for(var i= 0;i&lt;msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;].length();i++) {
			
			if (typeof(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][i]) !== &apos;undefined&apos;) {
				if(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][i][&apos;@use&apos;] == &apos;L&apos;) {

					if(debug&gt;0) { 
						logger.error(&apos;recordTarget.patientRole.patient.name= &apos;+JSON.stringify(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][0].toString())); 
					}
					// 2022-07-28 JER - Modified to evaluate multiple name.given elements with the first as firstName and secondary elements as middleNames
					objPatientRole.lastName=	msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][i][&apos;family&apos;].toString();
					for(var j= 0;j&lt;msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][i][&apos;given&apos;].length();j++) {
						if(j==0) {
							objPatientRole.firstName=	msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][i][&apos;given&apos;][j].toString();
						} else {
							objPatientRole.middleName=	msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][i][&apos;given&apos;][j].toString();
						}
					} // end for 
				} // end if 
			} // end if
			 
		} // end for

		objPatientRole.gender=			msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;administrativeGenderCode&apos;][&apos;@code&apos;].toString();
		objPatientRole.dateOfBirth=		msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;birthTime&apos;][&apos;@value&apos;].toString();
		// objPID.dateOfBirth=			convertDate(msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].text().toString(),&quot;MM-dd-yyyy&quot;);
		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; phoneNumber= &apos;+msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;telecom&apos;]); }
		objPatientRole.telecom=			getTelecom(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;telecom&apos;]);
		// objPatientRole.phoneNumber=	msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;telecom&apos;][&apos;@value&apos;].toString();

		/* 2022-08-16 JER - Removed this code from the getPatientRole and add to the channel transformer separate these values from the patientRole object */
		/*
		// 2022-08-14 JER - Modified/Add the patient/raceCode coded element
		if(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;raceCode&apos;]) {
			objPatientRole.race= 		getRaceCode(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;raceCode&apos;]);
		} // end if
		
		// 2022-08-14 JER - Modified/Add the patient/ethnicGroupCode coded element
		if(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;ethnicGroupCode&apos;]) {
			objPatientRole.ethnicity= 	getEthnicGroupCode(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;ethnicGroupCode&apos;]);
		} // end if 

		// 2022-08-14 JER - Modified/Add the patient/languageCommunication coded element
		if(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;languageCommunication&apos;]) {
			objPatientRole.language= 	getLanguageCommunication(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;languageCommunication&apos;]);
		} // end if 
		*/
		
		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;function F objPatientRole: &apos;+JSON.stringify(objPatientRole)); }
		channelMap.put(&apos;objPatientRole&apos;,objPatientRole);
		return objPatientRole;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>ceb659b6-95fb-4a37-8bb1-7198343b0976</id>
                <name>getPerformer</name>
                <revision>5</revision>
                <lastModified>
                  <time>1657116983503</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** getPerformer(msg)

  	- Desc: This function receives CCD msg and returns Performer objects
  	- Modified
	2018-02-16 18:21 CT JER - Modified call the getAssignedEntity function to reference the serviceEvent\assignedEntity child elements and attributes instead of using XPath assignments - reusability of the getAssignedEntities
	2018-02-16 10:40 CT JER - Corrected typo error still referencing performerChild object no longer in reference/deprecated usage of performer[&apos;functionCode&apos;][&apos;@displayName&apos;] XPath reference
	2018-02-15 08:37 CT JER - Modified changed from usage of children(), child and attribute XML ECMAScript E4X calls to specific XMLPath calls
  	2018-02-14 17:19 CT JER - Modified to provide additional handling typeof != &apos;undefined&apos; on the functionCode element and child elements and their attributes
	2018-02-07 11:44 CT JER - Modified for additional handling verify typeof !== &apos;undefined&apos;

   	@param {String} msg - this contains the raw message (string)
	@return {array} arrPerformer - contains arrPerformer array contains objPerformer objects and related properties.
*/

function getPerformer(msg) {

	var debug= 0;
	var arrPerformer= new Array();

	if(msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;] !== &apos;undefined&apos;) {
		var strPerfCount= 0;
		for each (performer in msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;][0]) {
			if(debug&gt;0) { logger.error(&apos;performer[&apos;+strPerfCount+&apos;]: &apos;+performer); }
			//if(typeof performer !== &apos;undefined&apos;) {
				var objPerformer= new Object;
				if(performer.children().length()&gt;0) {
					
					if(debug&gt;0) { logger.error(&apos;Performer.children().length: &apos;+performer.children().length()+&apos; children names: &apos;+performer.children()); }
					// str = str.replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;);
					
					if(performer[&apos;functionCode&apos;][&apos;@code&apos;] != null) {
						// check for functionCode element and it&apos;s attributes
						if(typeof performer[&apos;functionCode&apos;][&apos;@code&apos;] !== &apos;undefined&apos;) {
							// check for functionCode code attribute
							if(performer[&apos;functionCode&apos;][&apos;@code&apos;].toString().length&gt;0) {
								// get Provider Role
								if(debug&gt;0) { logger.error(&apos;performer[functionCode][@code].toString(): &apos;+performer[&apos;functionCode&apos;][&apos;@code&apos;].toString()); }
								objPerformer.functionCode= performer[&apos;functionCode&apos;][&apos;@code&apos;].toString();				// PP
							} // end if 
						} // end if 
						// check for functionCode displayName attribute
						if(typeof performer[&apos;functionCode&apos;][&apos;@displayName&apos;] !=null) {
							// check for functionCode displayName attribute
							if(performer[&apos;functionCode&apos;][&apos;@displayName&apos;].toString().length&gt;0) {
								// get Provider Role
								if(debug&gt;0) { logger.error(&apos;performer[functionCode][@displayName].toString(): &apos;+performer[&apos;functionCode&apos;][&apos;@displayName&apos;].toString()); }
								objPerformer.functionDisplayNmae= performer[&apos;functionCode&apos;][&apos;@displayName&apos;].toString();						// PP
							} // end if 
						} // end if 
						if(typeof performer[&apos;functionCode&apos;][&apos;@codeSystem&apos;] !=null) {
							// check for functionCode codeSystem attribute
							if(performer[&apos;functionCode&apos;][&apos;@codeSystem&apos;].toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[functionCode][@codeSystem].toString(): &apos;+performer[&apos;functionCode&apos;][&apos;@codeSystem&apos;].toString()); }
								objPerformer.functionCodeSystem= performer[&apos;functionCode&apos;][&apos;@codeSystem&apos;].toString(); 		// 2.16.840.1.113883.12.443
							} // end if 
						} // end if
					} // end if

					channelMap.put(&apos;Performer&apos;,objPerformer);

					var objAssignedEntity= getAssignedEntity(performer);
					if(objAssignedEntity !== &apos;undefined&apos;) {
						
						// check for assignedEntity id assigningAuthorityName 
						if(typeof objAssignedEntity.assigningAuthorityName !== &apos;undefined&apos;) {
							if(objAssignedEntity.assigningAuthorityName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][id][@assigningAuthorityName].toString(): &apos;+objAssignedEntity.assigningAuthorityName.toString()); }
								objPerformer.assignedEntity_assigningAuthorityName= objAssignedEntity.assigningAuthorityName.toString(); 		// 2.16.840.1.113883.12.443
							} // end if							
						} // end if 
						
						// check for assignedEntity id root 
						if(typeof objAssignedEntity.root !== &apos;undefined&apos;) {
							if(objAssignedEntity.root.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][id][@root].toString(): &apos;+objAssignedEntity.root.toString()); }
								objPerformer.assignedEntity_root= objAssignedEntity.root.toString(); 		// 2.16.840.1.113883.12.443
							} // end if							
						} // end if 

						// check for assignedEntity id extension 
						if(typeof objAssignedEntity.extension !== &apos;undefined&apos;) {
							if(objAssignedEntity.extension.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][id][@extension].toString(): &apos;+objAssignedEntity.extension.toString()); }
								objPerformer.assignedEntity_extension= objAssignedEntity.extension.toString(); 		// 2.16.840.1.113883.12.443
							} // end if							
						} // end if 

						
						// &lt;code code=&quot;208D00000X&quot; codeSystem=&quot;2.16.840.1.113883.6.101&quot; codeSystemName=&quot;NUCC Health Care Provider Taxonomy&quot; displayName=&quot;General Practice&quot;/&gt;
						// check for assignedEntity code element
						if(typeof objAssignedEntity.code !== &apos;undefined&apos;) {
							if(objAssignedEntity.code.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][code][@code].toString(): &apos;+objAssignedEntity.code.toString()); }
								objPerformer.assignedEntity_code= objAssignedEntity.code.toString(); 				// 208D00000X
							} // end if							
						} // end if 

						// check for assignedEntity codeSystem element
						if(typeof objAssignedEntity.codeSystem !== &apos;undefined&apos;) {
							if(objAssignedEntity.codeSystem.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][code][@codeSystem].toString(): &apos;+objAssignedEntity.codeSystem.toString()); }
								objPerformer.assignedEntity_codeSystem= objAssignedEntity.codeSystem.toString(); 			// 2.16.840.1.113883.6.101
							} // end if							
						} // end if 
						
						// check for assignedEntity codeSystemName element
						if(typeof objAssignedEntity.codeSystemName !== &apos;undefined&apos;) {
							if(objAssignedEntity.codeSystemName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][code][@codeSystemName].toString(): &apos;+objAssignedEntity.codeSystemName.toString()); }
								objPerformer.assignedEntity_codeSystemName= objAssignedEntity.codeSystemName.toString(); 		// NUCC Health Care Provider Taxonomy
							} // end if							
						} // end if 

						// check for assignedEntity displayName element
						if(typeof objAssignedEntity.displayName !== &apos;undefined&apos;) {
							if(objAssignedEntity.displayName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][code][@displayName].toString(): &apos;+objAssignedEntity.displayName.toString()); }
								objPerformer.assignedEntity_displayName= objAssignedEntity.codeSystemName.toString(); 		// NUCC Health Care Provider Taxonomy
							} // end if							
						} // end if 						

						
						// check for assignedEntity assignedPerson Given name
						if(typeof objAssignedEntity.givenName !== &apos;undefined&apos;) {
							if(objAssignedEntity.givenName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][assignedPerson][name][given].toString(): &apos;+objAssignedEntity.givenName.toString()); }
								objPerformer.assignedEntity_givenName= objAssignedEntity.givenName.toString(); 		// NUCC Health Care Provider Taxonomy
							} // end if							
						} // end if
						
						// check for assignedEntity assignedPerson Family name
						if(typeof objAssignedEntity.familyName !== &apos;undefined&apos;) {
							if(objAssignedEntity.familyName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][assignedPerson][name][family].toString(): &apos;+objAssignedEntity.familyName.toString()); }
								objPerformer.assignedEntity_familyName= objAssignedEntity.familyName.toString(); 		// NUCC Health Care Provider Taxonomy
							} // end if							
						} // end if

						if(debug&gt;0) { logger.error(&apos;getPerformer objAssignedEntity.suffix: &apos;+objAssignedEntity.suffix+
							&apos; typeof: &apos;+typeof objAssignedEntity.suffix); }
							
						// check for assignedEntity assignedPerson Suffix
						if(typeof objAssignedEntity.suffix !== &apos;undefined&apos;) {
							if(objAssignedEntity.suffix.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][assignedPerson][name][suffix].toString(): &apos;+objAssignedEntity.suffix.toString()); }
								objPerformer.assignedEntity_suffix= objAssignedEntity.suffix.toString(); 		// NUCC Health Care Provider Taxonomy
							} // end if							
						} // end if
						
						
						// check for assignedEntity representedOrganization name
						if(typeof objAssignedEntity.representedOrganizationName !== &apos;undefined&apos;) {
							if(objAssignedEntity.representedOrganizationName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][representedOrganization][name].toString(): &apos;+objAssignedEntity.representedOrganizationName.toString()); }
								objPerformer.assignedEntity_representedOrganization= objAssignedEntity.representedOrganizationName.toString(); 		// Walgreens Drug Store 12562
							} // end if							
						} // end if
						
					} // end if 

				} // end if
			//} // end if 
			
			if(objPerformer.toString().length&gt;0) {
				channelMap.put(&apos;objPerformer&apos;,objPerformer);
			}
			
			arrPerformer.push(objPerformer);
			strPerfCount++;
		} // end for each
	} // end if

	if(arrPerformer.toString().length&gt;0) {
		channelMap.put(&apos;arrPerformer&apos;,arrPerformer);
	}
	
	return arrPerformer;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>1a0a3a57-4870-42f3-bb1a-bb5c3cc79ad9</id>
                <name>getRaceCode</name>
                <revision>25</revision>
                <lastModified>
                  <time>1661352336919</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  getRace(race) - Desc: This function receives CCD/CCDA msg and returns from RaceCode Object

   	@param {String} msg - this contains the raw message (string)
	@return {object} objRace - this contains the elements composed into a single objRace object.
	
	History
	2022-08-21 JER - Handling of nullFlavor property with UNK value
	2022-08-19 JER - Added evaluation of code if undefined or has toString gt zero (0)
	2022-08-19 JER - perform finalize review to confirm objRace has populated with value
	2022-08-17 JER - Modifying arrRace from array to objRace as a singular object
	2021-09-20 JER - leveraging the getTelecom for getRaceCode script
*/
function getRaceCode(race) {
 
	// define variables
	var debug= 0;
	var scriptName= &apos;getRaceCode&apos;;
	// 2022-08-17 JER - Modifying arrRace from array to objRace as a singular object
	// var arrRace= new Array();
	
	if(debug&gt;0) { logger.error(scriptName+&apos; race= &apos;+race); }
	if (typeof(race) !== &apos;undefined&apos;) {

		if(debug&gt;0) { 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(race)= &apos;+typeof(race)+&apos; object.length= &apos;+race.length()+&apos; value= &apos;+race);	
		}			
		

		// if(race.length()&gt;0) {
			// for each race element
			var j= 0;
			for(var i= 0;i&lt;race.length();i++) {

			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(race[&apos;+i+&apos;][@code])= &apos;+typeof(race[i][&apos;@code&apos;])+&apos; race[@code]= &apos;+race[i][&apos;@code&apos;]);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; PART 1: typeof(race[&apos;+i+&apos;][@code])= &apos;+typeof(race[i][&apos;@code&apos;]));
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; PART 2: race[&apos;+i+&apos;][@code].toString().length= &apos;+race[i][&apos;@code&apos;].toString().length);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(race[&apos;+i+&apos;][@code])= &apos;+typeof(race[i][&apos;@code&apos;])+&apos; race[&apos;+i+&apos;][@code].toString().length= &apos;+race[i][&apos;@code&apos;].toString().length+&apos; EVALUATION= &apos;+((typeof(race[i][&apos;@code&apos;]) !== &apos;undefined&apos;)&amp;&amp;(race[i][&apos;@code&apos;].toString().length&gt;0)));
			}
				
				var objRace= new Object();
				// 2022-08-19 JER - Added evaluation of code if undefined or has toString gt zero (0) 
				if((typeof(race[i][&apos;@code&apos;])!== &apos;undefined&apos;)&amp;&amp;(race[i][&apos;@code&apos;].toString().length&gt;0)) {
					// objRace.id= j;
					//if(race[i][&apos;@code&apos;].toString().length&gt;0) {
					
						if(debug&gt; 0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; race[&apos;+i+&apos;][@code]: &apos;+race[i][&apos;@code&apos;].toString()); }
					
						objRace.code= race[i][&apos;@code&apos;].toString();
						objRace.codeSystem= race[i][&apos;@codeSystem&apos;].toString();
						objRace.codeSystemName= race[i][&apos;@codeSystemName&apos;].toString();
						objRace.displayName= race[i][&apos;@displayName&apos;].toString();
					//} // end if 
				
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function objRace: &apos;+JSON.stringify(objRace)); 
					}
				} else {
					var objRace= new Object();
					// objRace.id= j;
					
					objRace.code= &apos;LA4489-6&apos;;
					objRace.codeSystem= &apos;1.3.6.1.4.1.12009.10.1.1817&apos;;
					objRace.codeSystemName= &apos;LOINC UCUM Codes for Electronic Messaging&apos;
					objRace.displayName= &apos;Unknown&apos;
					
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function objRace: &apos;+JSON.stringify(objRace)); 
					}
				} // end if 
				j++;
			} // for each address element 
		// } // end if 

		// 2022-08-17 JER - Modifying arrRace from array to objRace as a singular object
		// channelMap.put(&apos;arrRace&apos;,JSON.stringify(arrRace));
		// return arrRace;
		// 2022-08-19 JER - perform finalize review to confirm objRace has populated with value
		if(objRace) {
			return objRace;
		} // end if 
	} else {
		return;
	} // end if 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>a3b08547-8ed2-4097-a7e7-ea43e052f13b</id>
                <name>getServiceEvent</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911325104</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** getServiceEvent(msg)

  	- Desc: This function receives CCD msg and returns Service Event objects
  	- Modified:
	2018-11-12 JER - Modified additional debugging for function
  	2018-02-14 JER - Modified to capture the serviceEvent ClassCode and DisplayName attribute values
  	2018-02-12 JER - multiple documentationOf (1..M) with (1..1) serviceEvents

   	@param {String} msg - this contains the raw message (string)
	@return {array} arrServiceEvents - this array contains list of objServiceEvent objects composed into the arrServiceEvents
*/
function getServiceEvent(msg) {

	// define variables
	var scriptName= &apos;getServiceEvent&apos;;
	var arrServiceEvent= new Array();
	var tSrvcCount= 1;
	var debug= 0;
	if(debug&gt;0) { logger.error(&apos;Function: &apos;+scriptName+&apos; msg[documentationOf]= &apos;+msg[&apos;documentationOf&apos;].toXMLString()); }

	if(msg[&apos;documentationOf&apos;] !== &apos;undefined&apos;) {
		for each(documentationOf in msg[&apos;documentationOf&apos;]) {
			if(documentationOf.serviceEvent !== &apos;undefined&apos;) {
				for each(serviceEvent in documentationOf.serviceEvent) {
					var objServiceEvent= new Object();
					objServiceEvent.id= 	tSrvcCount;
					if(typeof serviceEvent.@classCode !== &apos;undefined&apos;) {
						if(serviceEvent.@classCode.length()&gt;0) {
							objServiceEvent.classCode=	serviceEvent.@classCode.toString();
						} // end if 
					} // end if 
					if(serviceEvent.children().length()&gt;0) {
						if(typeof serviceEvent.id.@extension !== &apos;undefined&apos;) {
							objServiceEvent.extension=	serviceEvent.id.@extension.toString();
						} else {
							objServiceEvent.extension=    &apos;&apos;;
						} // end if
						if(typeof serviceEvent.id.@root !== &apos;undefined&apos;) {
							objServiceEvent.root=		serviceEvent.id.@root.toString();
						} else {
							objServiceEvent.root=		&apos;&apos;;
						} // end if
						if(typeof serviceEvent.code.@displayName !== &apos;undefined&apos;) {
							objServiceEvent.displayName=	serviceEvent.code.@displayName.toString();
						} else {
							objServiceEvent.displayName=    &apos;&apos;;
						} // end if
						if(typeof serviceEvent.effectiveTime.low.@value !== &apos;undefined&apos;) {
							objServiceEvent.startTime=	serviceEvent.effectiveTime.low.@value.toString().substring(0,14);
						} else {
							objServiceEvent.startTime=	&apos;&apos;;
						} // end if
						if(typeof serviceEvent.effectiveTime.high.@value !== &apos;undefined&apos;) {
							objServiceEvent.stopTime=	serviceEvent.effectiveTime.high.@value.toString().substring(0,14);
						} else {
							objServiceEvent.stopTime=	&apos;&apos;;
						} // end if
					} // end if 
					arrServiceEvent.push(objServiceEvent);
				} // end for each	
			} // end if 
		} // end for each
	} // end if 

	if(debug&gt;0) { logger.error(&apos;Function: &apos;+scriptName+&apos; arrServiceEvent= &apos;+JSON.stringify(arrServiceEvent, null, 4)); }
	
	return arrServiceEvent;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>24958132-05d2-43f5-ab96-d4055c40804c</id>
                <name>getTelecom</name>
                <revision>18</revision>
                <lastModified>
                  <time>1656365508834</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  getTelecom(telecom) - Desc: This function receives CCD/CCDA msg and returns from Telecom Object

   	@param {String} msg - this contains the raw message (string)
	@return {object} objAddress - this contains the elements composed into a single objTelecom object.
	
	History
	2021-09-20 JER - Modified to incorporate evaluation of multiple patientRole Id(s) in the case there are multiple patient identifiers
	2021-09-20 JER - Modified to patient.name incorporate evaluation of multiple patient name child elements in the case there are multiple patient identifiers
*/
function getTelecom(telecom) {
 
	// define variables
	var debug= 0;
	var scriptName= &apos;getTelecom&apos;;
	var arrTelecom= new Array();
	
	if(debug&gt;0) { logger.error(scriptName+&apos; telecom= &apos;+telecom); }
	if (typeof(telecom) !== &apos;undefined&apos;) {

		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; object.length= &apos;+telecom.length()+&apos; value= &apos;+telecom);	}			
		
		if(telecom.length()&gt;0) {
			// for each addr element
			var j= 0;
			for(var i= 0;i&lt;telecom.length();i++) {

				var objTelecom= new Object();
				objTelecom.id= j;
				if(telecom[i][&apos;@value&apos;].toString().length&gt; 0) {
					if(telecom[i][&apos;@value&apos;].toString().indexOf(&apos;:&apos;)&gt;-1) {
						
						if(debug&gt; 0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; telecom[&apos;+i+&apos;][@value]: &apos;+telecom[i][&apos;@value&apos;].toString()); }
						
						var lstTelecom=	telecom[i][&apos;@value&apos;].toString().split(&apos;:&apos;);
						var varName= lstTelecom[0];
						
						if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; varName: &apos;+varName); }
						
						switch (varName) {
							case &quot;tel&quot;: 	objTelecom.type= varName; break;
							case &quot;fax&quot;: 	objTelecom.type= varName; break;
							case &quot;mailto&quot;: 	objTelecom.type= varName; break;
							default: 		objTelecom.type= varName; break;
						} // end switch 
						// remove the + character from the value
						objTelecom.value= lstTelecom[1].replace(&apos;+&apos;,&apos;&apos;);
					} else {
						objTelecom.value= telecom[i][&apos;@value&apos;].toString().replace(&apos;+&apos;,&apos;&apos;);
					} // end if 
				} // end if 
				
				arrTelecom.push(objTelecom);
				
				//} // for each child element
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;function arrTelecom: &apos;+JSON.stringify(arrTelecom)); }
				j++;
			} // for each address element 
		} // end if 

		channelMap.put(&apos;arrTelecom&apos;,JSON.stringify(arrTelecom));
		return arrTelecom;
	} else {
		return;
	} // end if 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>39531322-8698-4cdf-9824-d225f1bc60ea</id>
                <name>getXdsAuthorPerson</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911325271</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** getXdsAuthorPerson

	- Desc: This function receives Author Object and returns a CCD authorPerson XML
	- Modified:
	2018-02-25 12:35 PM CST - Perform additional checks on the supplied object typeof and null checks

	@param {object} objAuthor - the objAuthor object passed input argument
	@return {XML} return stringXML containing the newly devised XML containing the authorPerson

*/
function getXdsAuthorPerson(objAuthor) {

	// 0^Allscripts^System^^^^^^&amp;amp;1.3.6.1.4.1.22812.4.10065404.0.3.3
	var authorPerson= &apos;&apos;;
	var debug= 0;

	if(debug&gt;0) { logger.error(&apos;getXdsAuthorPerson Input objAuthor: &apos;+objAuthor); }

	// Author Id Extension
	if((typeof objAuthor.extension !== &apos;undefined&apos;)&amp;&amp;(objAuthor.extension != null)) {
		if(objAuthor.extension.toString().length&gt;0) {
			if(debug&gt;0) { logger.error(&apos;objAuthor.extension: &apos;+objAuthor.extension.toString()); }
			authorPerson += objAuthor.extension.toString()+&apos;^&apos;;
		} else {
			authorPerson += &apos;^&apos;;
		} // end if
	} else {
		authorPerson += &apos;^&apos;;
	} // end if 

	// Author LastName
	if((typeof objAuthor.idExtension !== &apos;undefined&apos;)&amp;&amp;(objAuthor.idExtension != null)) {
		if(objAuthor.idExtension.toString().length&gt;0) {
			authorPerson += objAuthor.idExtension.toString()+&apos;^&apos;;
		} else {
			authorPerson += &apos;^&apos;;
		} // end if
	} else {
		authorPerson += &apos;^&apos;;
	} // end if 

	// Author FirstName
	if((typeof objAuthor.idExtension !== &apos;undefined&apos;)&amp;&amp;(objAuthor.idExtension != null)) {
		if(objAuthor.idExtension.toString().length&gt;0) {
			authorPerson += objAuthor.idExtension.toString()+&apos;^&apos;;
		} else {
			authorPerson += &apos;^&apos;;
		} // end if
	} else {
		authorPerson += &apos;^&apos;;
	} // end if 


	// Author Id Root - objAssignedAuthor.root
	if((typeof objAuthor.root !== &apos;undefined&apos;)&amp;&amp;(objAuthor.root != null)) {
		if(objAuthor.root.toString().length&gt;0) {
			if(debug&gt;0) { logger.error(&apos;objAuthor.root: &apos;+objAuthor.root.toString()); }
			authorPerson += &apos;^^^^^&apos;+objAuthor.root.toString();
		} else {
			authorPerson += &apos;^^^^^&apos;;
		} // end if
	} else {
		authorPerson += &apos;^^^^^&apos;; 
	} // end if

	if(debug) { logger.error(&apos;getXdsAuthorPerson authorPerson: &apos;+authorPerson); }
	channelMap.put(&apos;authorPerson&apos;,authorPerson);	

	return authorPerson;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>bac30250-f269-474b-a628-e41b4a27ca54</id>
                <name>getXdsSourcePatientId</name>
                <revision>2</revision>
                <lastModified>
                  <time>1654275735219</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** getXdsSourcePatientId(object)

  	 - Desc: This function receives patientRole JavaScript Object and returns a sourcePatientId String

	@param {object} objPatientRole - the objPatientRole object passed input argument
	@return {string} return string containing the newly devised string containing the sourcePatientId
*/
// @return {XML} return stringXML containing the newly devised XML containing the sourcePatientInfo
function getXdsSourcePatientId(objPatientRole) {

	var debug= 0;
	/*
	var objSourcePatientId= new Object;
	//if (msg.namespace() != undefined) { default xml namespace = msg.namespace(); } else { default xml namespace = &apos;&apos;; }
	var rim = new Namespace(&apos;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&apos;);

	var stringXML= new XML(&apos;&lt;ValueList/&gt;&apos;);
	*/
	if(typeof objPatientRole.patientId !== &apos;undefined&apos;) {
		var pid_3=  objPatientRole.patientId+&quot;^^^&amp;amp;&quot;+objPatientRole.assigningAuthorityOid+&quot;&amp;amp;ISO&quot;;
		if(debug&gt;1) { logger.error(&quot;objPatientRole.patientid: &quot;+objPatientRole.patientId.toString()); }
	} else { var pid_3= &apos;&apos;; }
			
	// var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_3+&apos;&lt;/Value&gt;&apos;);
	var strSourcePatientId= pid_3;

	return strSourcePatientId;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>cc1f343b-bfa4-4994-9402-bb78c1ad6388</id>
                <name>getXdsSourcePatientInfo</name>
                <revision>3</revision>
                <lastModified>
                  <time>1654275670549</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** getXdsSourcePatientInfo(object)

  	- Desc: This function receives patientRole JavaScript Object and returns a XML SourcePatientInfo JavaScript object

	@param {object} objPatientRole - the objPatientRole object passed input argument
	@return {object} return object containing the newly devised string for XML containing the sourcePatientInfo
*/
// @return {XML} return stringXML containing the newly devised XML containing the sourcePatientInfo
function getXdsSourcePatientInfo(objPatientRole) {

	var objSourcePatientInfo= new Object;
	var rim = new Namespace(&apos;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&apos;);
	var stringXML= new XML(&apos;&lt;ValueList/&gt;&apos;);
	
	var pid_3=  &quot;PID-3|&quot;+objPatientRole.patientId+&quot;^^^&quot;+objPatientRole.assigningAuthorityName+&quot;&amp;amp;&quot;+objPatientRole.assigningAuthorityOid+&quot;&amp;amp;ISO&quot;
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_3+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid3= pid_3;
	
	var pid_5=  &quot;PID-5|&quot;+objPatientRole.lastName+&quot;^&quot;+objPatientRole.firstName+&quot;^^^^&quot;
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_5+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid5= pid_5;
	
	var pid_7=  &quot;PID-7|&quot;+objPatientRole.dateOfBirth
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_7+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid7= pid_7;
	
	var pid_8=  &quot;PID-8|&quot;+objPatientRole.gender
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_8+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid8= pid_8;
	
	var pid_11= &quot;PID-11|&quot;+objPatientRole.streetAddress+&quot;^^&quot;+objPatientRole.city+&quot;^&quot;+objPatientRole.state+&quot;^&quot;+objPatientRole.postalCode+&quot;^&quot;+objPatientRole.country
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_11+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid11= pid_11;
	
	var pid_13= &quot;PID-13|&quot;+objPatientRole.phoneNumber
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_13+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid13= pid_13;
	
	return objSourcePatientInfo;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>d78fd3dc-2f75-4b0e-ab30-1e7eea48e0c1</id>
                <name>setXdsAuthor</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911325343</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** setXdsMetadataAuthor(object)

  	- Desc: This setXdsAuthor function receives Javascript Array of Objects and author XML string
  	- Modified:
  	2018-02-26 19:20 CST - Under development
	2018-02-25 12:40PM CST - Replacement of the Call getPerformer, getAuthor and usage of objEncounter transformation function.

   	@param {object} arrPerformer - this contains the Javascript Object (object) - could pass in 
	@return {XML} authorXML - contains authorXML XML Object string to build out the Template : XDSDocumentEntry.author (urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d) XML scheme.

	Reference: https://gazelle.ihe.net/XDStarClient/rimihe-templates/rimihe-Author_XDSDocumentEntry.html
		
*/

function setXdsMetadataAuthor(arrAuthors) {

	var debug= 1;
	var i= 0;
	
	if(debug&gt;0) { logger.error(&apos;setXdsAuthor arrAuthors: &apos;+JSON.stringify(arrAuthors)); } 
	
	if(typeof arrAuthor !== &apos;undefined&apos;) {
		if(arrAuthor.length&gt;1) {
			for each(objAuthor in arrAuthors) {
				if(debug&gt;0) { logger.error(&apos;objAuthor[&apos;+i+&apos;]: &apos;+JSON.stringify(objAuthor)+
					&apos; typeof: &apos;+typeof objAuthor+
					&apos; length: &apos;+objAuthor.length());
				} // end if 
		
				var authorXML = new XML(&apos;&lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;&gt;&lt;/rim:Classification&gt;&apos;);

				// need to confirm the objAuthor contains the representedOrganization
				// create Author Person - using either objAuthor.assignedEntity_familyName OR objEncounter.assignedEntity_familyName call the getAuthorPerson function
				if((typeof objAuthor.assignedEntity_familyName !== &apos;undefined&apos;)&amp;&amp;(objAuthor.assignedEntity_familyName.toString() != null)) { 
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorPerson&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
					xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= getAuthorPerson(objAuthor);
				} else {
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorPerson&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
				} // end if 
		
				// create Author Institution - objAuthor.authorInstitution
				if((typeof objAuthor.authorInstitution !== &apos;undefined&apos;)&amp;&amp;(objAuthor.authorInstitution.toString() != null)) {
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorInstitution&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
					xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.authorInstitution.toString();
				} else {
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorInstitution&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
				} // end if
		
				// create Author Role 
				// objPerformers.functionDisplayName
				if((typeof objAuthor.functionDisplayName !== &apos;undefined&apos;)&amp;&amp;(objAuthor.functionDisplayName.toString() != null)) {
					if(objAuthor.functionDisplayName.toString().length&gt;0) {
						var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorRole&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
						xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.functionDisplayName.toString();
					} // end if 
					// objEncounter.encounterParticipant_code
				} else if((typeof objAuthor.encounterParticipant_code !== &apos;undefined&apos;)&amp;&amp;(objAuthor.encounterParticipant_code.toString() != null)) {
					if(objAuthor.encounterParticipant_code.toString().length&gt;0) {
						var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorRole&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
						xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.functionDisplayName.toString();
					} // end if 
				// objEncounter.assignedEntity_codeDisplayName
				} else if((typeof objAuthor.assignedEntity_codeDisplayName !== &apos;undefined&apos;)&amp;&amp;(objAuthor.assignedEntity_codeDisplayName.toString() != null)) {
					if(objAuthor.assignedEntity_codeDisplayName.toString().length&gt;0) {
						var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorRole&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
						xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.assignedEntity_codeDisplayName.toString();
					} // end if 
				} else {
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorRole&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;Medical Doctor&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
				} // end if 
		
				// create Author Specialty
				// objPerformers.assignedDisplayName
				if((typeof objAuthor.assignedDisplayName !== &apos;undefined&apos;)&amp;&amp;(objAuthor.assignedDisplayName.toString() != null)) {
					if(objAuthor.assignedDisplayName.toString().length&gt;0) {
						var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
						xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.assignedDisplayName.toString();
					} // end if 
				// objEncounter.assignedEntity_codeDisplayName
				} else if((typeof objAuthor.assignedEntity_codeDisplayName !== &apos;undefined&apos;)&amp;&amp;(objAuthor.assignedEntity_codeDisplayName.toString() != null)) {
					if(objAuthor.assignedEntity_codeDisplayName.toString().length&gt;0) {
						var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
						xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.assignedEntity_codeDisplayName.toString();
					} // end if 
				} else {
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;General Medicine&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
				} // end if 
			} // end for each
		} // end if 
	} else {		
		var classificationXML=     [&apos;rim:Classification&apos;][&apos;@id&apos;]=&quot;1234&quot;; 
		classificationXML+=        [&apos;rim:Classification&apos;][&apos;@ClassificationScheme&apos;]= &quot;urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d&quot;;
		classificationXML+=        [&apos;rim:Classification&apos;][&apos;@classifiedObject&apos;]= &quot;&quot;;
		var authorXML = new XML(classificationXML);
			
		var authorPersonXML=    	new XML(&apos;&lt;rim:Slot name=&quot;authorPerson&quot;&gt;&lt;/rim:Slot&gt;&apos;);
		authorPersonXML+= 		new XML(&apos;&lt;rim:ValueList&gt;&lt;/rim:ValueList&gt;&apos;);
		authorPersonXML+=	 	new XML(&apos;&lt;rim:Value&gt;&lt;/rim:Value&gt;&apos;);
		authorXML+= authorPersonXML; 

		var authorInstitutionXML=    new XML(&apos;&lt;rim:Slot name=&quot;authorInstitution&quot;&gt;&lt;/rim:Slot&gt;&apos;);
		authorInstitutionXML+= 		new XML(&apos;&lt;rim:ValueList&gt;&lt;/rim:ValueList&gt;&apos;);
		authorInstitutionXML+=		new XML(&apos;&lt;rim:Value&gt;&lt;/rim:Value&gt;&apos;);
		authorXML+= authorInstitutionXML;

		var authorRoleXML=  new XML(&apos;&lt;rim:Slot name=&quot;authorRole&quot;&gt;&lt;/rim:Slot&gt;&apos;);
		authorRoleXML+= 	new XML(&apos;&lt;rim:ValueList&gt;&lt;/rim:ValueList&gt;&apos;);
		authorRoleXML+=	new XML(&apos;&lt;rim:Value&gt;&lt;/rim:Value&gt;&apos;);
		authorXML+= autorRoleXML;
		
		var authorSpecialtyXML =		new XML(&apos;&lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;&lt;/rim:Slot&gt;&apos;);
		authorSpecialtyXML+= new XML(&apos;&lt;rim:ValueList&gt;&lt;/rim:ValueList&gt;&apos;);
		authorSpecialtyXML+= new XML(&apos;&lt;rim:Value&gt;&lt;/rim:Value&gt;&apos;);
		authorXML+= authorSpecialtyXML;
				
	} // end if 	
		
	return authorXML;
} // end function</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>d316c4bc-9e10-4162-b67c-e514afc59fa3</id>
            <name>Channel Helpers</name>
            <revision>1</revision>
            <lastModified>
              <time>1706120884823</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>1aca2a66-a83a-4703-9ec7-dfaa3a6ad5b2</string>
              <string>3e15b608-553f-45e7-a617-712d6b75ab4d</string>
              <string>f6d6aa80-d65f-4935-a267-d6bef39a7bdf</string>
              <string>edd93839-401c-4613-b696-6d4799ebc5af</string>
              <string>2f511815-92d1-4f0f-92e9-f4f8ae576b75</string>
              <string>b4a51816-0aad-444a-b1ce-f5c11f9961bc</string>
              <string>cb7f055d-45ae-43b7-ac7c-bb2b2db34ded</string>
              <string>139cdc6a-5f40-46bd-a246-2a9a1ef8ed10</string>
              <string>316c7826-a8ee-44b4-922c-8afe0daa2c72</string>
              <string>6ff8ca2b-c4e3-4e6f-897a-17f36ed63faa</string>
              <string>27aee1c0-8ed0-4062-89b5-1c7a69a946bc</string>
              <string>291b4847-a85d-41c6-bd4a-37f008b15ca8</string>
              <string>81c836fd-cbba-4247-b438-d4c9987ee75b</string>
              <string>4318de8e-4d7b-4885-9f11-8b2ac6f9c70a</string>
              <string>e983e439-461a-424f-8348-764b29e05ecb</string>
              <string>0763b542-8ed8-4a30-9c35-de3dbf030626</string>
              <string>75c150e0-fbc5-4eef-a856-bec6b3a39a24</string>
              <string>dd55a671-a099-4b29-bdbb-85c34050037a</string>
              <string>a08848df-6dcd-4c51-aa6d-d2f85edfdcf8</string>
              <string>ae504043-55f5-497e-ac87-33686e7569b2</string>
              <string>fef7c31a-61a4-43c8-bb15-79f51a36c882</string>
              <string>69f5ad2c-3bf4-4d55-8e4a-bd6faade202d</string>
              <string>39acd9f7-c975-4787-b31e-714f748a51a2</string>
              <string>a8bd6f50-894f-443f-b248-da3ebad3a748</string>
              <string>3c355935-e639-4517-b3b1-42c6564387f8</string>
              <string>1e45f5ac-6815-40a8-8fe9-15e98eb1d07b</string>
              <string>e695a1d8-2bde-4da3-a9a8-8cd6f81ca3c0</string>
              <string>3d95de17-a2ea-446c-be4c-36c32d8cda1c</string>
              <string>205385d0-06be-4baa-b072-9b431c315827</string>
              <string>a8ebde5a-16cb-407e-a8b4-fa8766d26c73</string>
              <string>fdcb1121-0d49-4ed8-b1a1-4f4482e1c20a</string>
              <string>b1842d23-059a-4e7e-b447-3b5f5ccf5c3a</string>
              <string>8c5d3887-bd22-4018-aeda-45e5c0f8d551</string>
              <string>a127fffb-1663-4206-b6d3-348aa228c999</string>
              <string>d70fc7fa-2005-4fc7-9222-dc8119346c6e</string>
              <string>2a2ad8a5-b961-4f4c-ac09-8abee2097972</string>
              <string>143b10e0-e01b-4942-9995-2d3b9a165d76</string>
              <string>a574bc8d-e82e-4ec6-9430-f3a37278e356</string>
              <string>f6e27b4e-dbbd-48c9-994f-55c3ac511fb9</string>
              <string>6060b76d-07c2-4f9f-bc71-d2e8c44d8271</string>
              <string>08536fee-6f99-4cc4-8958-f84daaee73d5</string>
              <string>dccd5a80-a385-482e-97e4-69340bce4522</string>
              <string>bfa0bc00-9ee1-4ba5-99de-9e46faffed6d</string>
              <string>183b6833-a563-42cb-8d4d-cdcb740aef30</string>
              <string>652e2cab-f748-41b4-ae8f-f0aae48e1fca</string>
              <string>bd81709b-2ef0-4760-aba9-f455fb338f37</string>
              <string>633e9341-a80b-4c11-a6a3-1d3942bb1782</string>
              <string>695c7ed6-252e-4229-83db-5571946a8b62</string>
              <string>df3f9b9f-e8e7-47a9-a33d-c9ec7d7820fd</string>
              <string>895ee0ef-745c-464d-a46c-e51331a01c3f</string>
              <string>50dcf6de-46b4-4de5-99c2-d341abb8a41a</string>
              <string>5e411c40-61f8-467e-b132-78e54e0b5f81</string>
              <string>ed4ef090-3f7e-442d-ad30-744e3a1313f2</string>
              <string>ed3e52dc-3023-4cc7-8cad-47e0d5df89c1</string>
              <string>ec29c308-0bc3-4eb0-a948-09c2c0747afa</string>
              <string>aeaba1c0-cef9-4ad8-82d7-76d66cc95562</string>
              <string>58f42d4f-22e1-4f7c-8acf-93a9fe92619c</string>
              <string>7a21d8ac-5afa-45b8-b136-5def45d811b4</string>
              <string>23ea2137-37b1-4b00-9fb0-c8889cd4bc97</string>
              <string>2a33ffd6-253d-402f-8fb6-93bd94f65dcd</string>
              <string>7445aaa5-ff13-4c08-a8b1-817cfed2692b</string>
              <string>3d290a27-5daf-4bb0-b3d8-90c9bb8afaeb</string>
              <string>e07b74b9-756e-4ca2-8be9-01bf7abfd817</string>
              <string>3ba1448a-d0b7-4478-bc57-f9cb8dab6de9</string>
              <string>dcaf136d-a3b8-47ed-aec7-d1619675ba2d</string>
              <string>285faf0d-523a-4c8e-92ec-4a0f3a89e048</string>
              <string>3263ad34-c86d-4481-b19f-4cd3d0d83d62</string>
              <string>e1af2369-c57e-4850-bc30-f79b6fe9fa66</string>
              <string>28ddc4f3-a96b-47db-b0e0-bcfcd825f48a</string>
              <string>90bc60ed-14c6-49db-b1e6-bb70d2b1d01d</string>
              <string>fd6b9376-0847-49d7-96c6-15c540a8e39a</string>
              <string>7ee4a47d-bdf3-473d-9da9-3a62c41037b1</string>
              <string>167ee803-661a-4e6e-ac6e-b84c057f7ca1</string>
              <string>a40e7657-c37a-4fb6-aa79-48a2ea16709c</string>
              <string>5d5e5835-8cd3-43af-ac82-ffe57439bfb5</string>
              <string>47f248b1-72d5-47dc-b0b3-6aa387e9e5d6</string>
              <string>d7c3e640-7850-4d70-bb1c-3289674bd609</string>
              <string>ae961745-fe19-46bd-b240-c82888091366</string>
              <string>68581957-7fba-421f-b063-941a804fcc46</string>
              <string>0056a8aa-7aa5-4047-a693-21bac64470aa</string>
              <string>2a637fa3-fb83-4666-abe0-c754924ff738</string>
              <string>8a08c578-68dd-4550-b178-eee13ade011e</string>
              <string>d448196a-4282-4d10-8c9a-7f1dfd19abea</string>
              <string>05759809-cfbd-4546-8b71-fd28c2499763</string>
              <string>1c01997f-00d1-4e40-9e63-da5706137cdd</string>
              <string>881db416-1776-4ab6-a3ce-5065ed11cdb5</string>
              <string>982b29a5-1743-4435-8842-9810e4e34926</string>
              <string>fe1bdd5e-cce0-4509-a09a-3545b69d3d7a</string>
              <string>1bff9775-2de8-4b51-bb6b-6aaa29c144bb</string>
              <string>5e97d36f-68fe-412d-a1df-3a25a07e5770</string>
              <string>9316c229-da47-49f8-a2c0-398ba155d370</string>
              <string>20524120-844c-4733-ac8a-b01f0e14a12f</string>
              <string>55ebb133-1e4d-4172-8718-301240e9518f</string>
              <string>b0dec3c0-01ca-45a6-b826-707b80644dff</string>
              <string>d1dd4342-0ad4-42cc-b708-f47e8c6621f8</string>
              <string>20d94501-cd46-41ce-9bf1-e34639074d16</string>
              <string>492a7c6c-4768-45e2-9f49-6c5488b0a2e5</string>
              <string>9f67f48f-ca64-4419-9101-05c39d7634fd</string>
              <string>14a2ad40-95bb-4ac9-a10e-d326537cc5a6</string>
              <string>6aa39894-bc9b-448c-aac6-b6967a0ce243</string>
              <string>4108a56a-b1a6-4d8c-9e8e-b065654860d0</string>
              <string>bdb4241f-2858-49da-8d4e-2f1579679620</string>
              <string>d56da279-9aa2-4b33-8913-bf0f37a046a0</string>
              <string>692365a7-9ec6-4c38-adee-672f4084adf3</string>
              <string>3f433a3e-e46d-440a-82c1-5490ada6b54e</string>
              <string>4d223d2f-d247-47da-b6e6-6d25e8a73775</string>
              <string>4b7abf79-011a-428e-96c9-040696a2869b</string>
              <string>72471096-425b-4750-81a4-123fca2e302c</string>
              <string>3558a098-5cbc-4e05-ae03-80b4aad20e53</string>
              <string>4a05dc00-9ad6-454a-b61b-ddd074bbb36c</string>
              <string>9d1c136c-3c94-43c3-b0f8-1c1551ac6987</string>
              <string>b2fdd8c2-f387-493b-ab35-e7e9e8ce056a</string>
              <string>930a4c9e-b458-4edf-92ff-3be07d68c28d</string>
              <string>8e046241-74a3-44e0-9bf9-f0b73a36717d</string>
              <string>0f0df6c9-1153-4e0b-800b-533492ba936c</string>
              <string>f016be9d-205d-4cdd-b4fb-e7139700dd22</string>
              <string>0801e501-57ac-4418-ac59-08e0edadabf3</string>
              <string>2607531a-4f9b-48ed-9ef4-b1b71b880864</string>
              <string>455c536f-d3fb-4832-941e-ef230b683590</string>
              <string>31b37e0b-cfbf-4787-b5d3-2082328fafd7</string>
              <string>21e47d6b-9863-4045-82af-8941087a4da1</string>
              <string>9ef7f26f-d3f7-420d-a30f-26f948be596d</string>
              <string>b3869a86-7d4f-4a10-b116-24b758a191b3</string>
              <string>a6825055-e697-487f-9add-560ad9567a60</string>
              <string>f7552865-32a0-4b5b-a5fd-9b0bddffddf9</string>
              <string>9f2bcd3c-8a74-49f1-b910-aa05c509c9cb</string>
              <string>bd270438-7262-47f8-8656-1baf51287078</string>
              <string>61b10ef9-baef-45e2-b747-a0987d851033</string>
              <string>aa5ba1e6-ab11-4a9a-a03c-e0fe58b49086</string>
              <string>ec653b8b-7362-4167-98ff-3845c7560d11</string>
              <string>1710d009-1bb2-4db6-a8d8-1493e6802c18</string>
              <string>25c5fbce-cb87-4ba9-a572-0be49242a0b2</string>
              <string>13738349-4cc4-43de-9365-a27ead17b524</string>
              <string>a43f7553-71de-41d3-aa16-93cc7a48bafc</string>
              <string>e7b4b295-2b47-4b4f-97b9-b9a9082bffb1</string>
              <string>854f78f8-4ebc-4c99-9a05-c26015671807</string>
              <string>e1900e14-c2a2-426e-86f0-971353d60cdd</string>
              <string>fd3b93dd-8b65-4b9f-a090-09bc7ec9aa12</string>
              <string>72c5d63d-a405-4ccf-b85e-dba740b14fdd</string>
              <string>f6efe381-7851-4bec-96c3-231b7baf666f</string>
              <string>2f3b524c-9d7b-43f7-b4ce-e84d27cc82ff</string>
              <string>99066deb-0d43-44f6-8823-b8cfe08e7185</string>
              <string>aa30f2b5-64cf-4396-b098-efeecb2224f2</string>
              <string>9fee4e0a-7a6d-4925-bc78-59df2c1f28af</string>
              <string>d23d6225-1145-484e-8164-f070fa1f2e8c</string>
              <string>57953b24-64cb-489d-9706-bf5dc1ef94ea</string>
              <string>08955a01-dda6-468b-a8cf-73586fe7d99f</string>
              <string>52d0a715-1be1-4fb2-8f3d-448c89c148f8</string>
              <string>4941f2fb-e641-4e0a-aba4-633ddf410760</string>
              <string>470c6c09-6850-4770-820c-bbfce54196bd</string>
              <string>21a820f0-205a-4046-8c4a-3788daca4d05</string>
              <string>5cee4e54-225f-43e4-830c-6dc3fb2826f2</string>
              <string>99643fbc-fa46-4c38-a7db-ac72833847f1</string>
              <string>9a44798a-871f-4402-9397-75241b18c6b0</string>
              <string>f1e2a84e-89e2-4ea0-8edd-4418f11b7eb7</string>
              <string>fe6275f5-4efa-4c86-90e2-8788c4f9c975</string>
              <string>081454ce-e155-45a1-bfc0-2297d6317259</string>
              <string>8b61cf50-9d95-43dd-b6ab-474e2a1d2d76</string>
              <string>5b245873-9491-4fa3-9bce-08c111cbe04f</string>
              <string>4041500f-7768-4011-b273-13fe61a2ebd6</string>
              <string>eaf28278-dd66-4bcc-b7e7-9a6c422db1ee</string>
              <string>0e0f63c0-5b51-4626-9a50-c0e2f5f94d37</string>
              <string>337347d0-d5f6-492c-9dc3-638a211132ff</string>
              <string>f836f593-4c61-49bd-be13-4cb3f9c6cffb</string>
              <string>0fec52ca-be59-47c9-85b1-700dc3b3dc2e</string>
              <string>a42ba030-2419-490c-8843-889e4197cf83</string>
              <string>4d75bdd7-6d1f-4db5-a7f8-4f63efa13197</string>
              <string>53d49d46-bd95-4ce5-8f98-7685217fedbf</string>
              <string>49a7b526-0577-4811-98c2-185bb6c22d91</string>
              <string>f8b35221-21af-4a86-9a4a-1b5657b5a029</string>
              <string>2f88fefe-6f80-46b6-a20a-04c29532073e</string>
              <string>8c637e01-95b0-4b11-a28f-4518b7f8d1ae</string>
              <string>7f5da166-70b8-48e0-9fa9-cf96fd867c30</string>
              <string>e3d85e42-6410-459f-95fc-2f98af8c0db9</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>bc768cd6-d735-40b1-9617-a3417481fe19</id>
                <name>Convert CSV to JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884963</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} csv - CSV string with column headers
	@return {String} return JSON object using column headers and field keys
*/
function convertCsvToJson(csv) {
	var textXML = SerializerFactory.getSerializer(&apos;DELIMITED&apos;).toXML(csv);
	var xml = new XML(textXML);
	var dataItems = [];
	for (var i = 1; i &lt;= xml[&apos;row&apos;].length() - 1; i++) {
		var jsonData = {};
		for (var j = 1; j &lt;= xml[&apos;row&apos;][0].children().length(); j++) {
			var column = &apos;column&apos; + j.toString();
			var header = xml[&apos;row&apos;][0][column].toString().replace(/\s/g, &apos;_&apos;).replace(/-/g, &apos;_&apos;).toLowerCase();
			var value = xml[&apos;row&apos;][i][column].toString();
			
			jsonData[header] = value;
			
		}
		dataItems.push(jsonData);
	}

	return JSON.stringify(dataItems);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>537d816c-81ff-4507-85c6-85e28b8c546c</id>
                <name>Convert JSON to CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885050</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts JSON to CSV.
**/
/*	@param {String} jsonData - JSON string with [0] index key as headers for csv
	@return {String} return csv
*/	

function convertJsonToCsv(data) {
	try{
		var json = JSON.parse(data);	
		var fields = Object.keys(json[0])
		var replacer = function(key, value) { return value === null ? &apos;&apos; : value } 
		var csv = json.map(function(row){
		  return fields.map(function(fieldName){
		    return JSON.stringify(row[fieldName], replacer)
		  }).join(&apos;,&apos;)
		})
		csv.unshift(fields.join(&apos;,&apos;)) // add header column
		csv = csv.join(&apos;\r\n&apos;);
		return csv;
	}catch(error){
		return error;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>ff3df0b8-cfa2-4ec9-82ac-37c9e4830e0c</id>
                <name>Generic - Send message to channel destination</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function sendMessageToChannelDestination(channelID, destinationID, map, data) {
	var msgMap;
	var outData = {};
	
	if (!map) {
		msgMap = Maps.map();
	} else {
		msgMap = Maps.map(map);
	}

	if (data == null || data == undefined) {
		data = &apos;&apos;;
	}

	if (msgMap.get(&apos;sourceChannelId&apos;) == null) {
		msgMap.add(&apos;sourceChannelId&apos;, channelId);
	}
	if (msgMap.get(&apos;sourceChannelName&apos;) == null) {
		msgMap.add(&apos;sourceChannelName&apos;, channelName);
	}

	// Dirty way to handle connector message not being defined. Handles cases where this function 
	// is used in a source js writer.
	try {
		if (msgMap.get(&apos;sourceMessageId&apos;) == null &amp;&amp; connectorMessage &amp;&amp; connectorMessage.getMessageId()) {
			msgMap.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString());
		}
	} catch(ex) {}

	var msgRequest = new RawMessage(data, [destinationID], msgMap);
	var msgResponse = router.routeMessageByChannelId(channelID, msgRequest);

	if (msgResponse == null) {
		// return;
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;; 
	}
	if (msgResponse.getStatus() == null) {
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;;
	}

	if (msgResponse.getStatus() == &apos;ERROR&apos;) {
		throw msgResponse.getMessage();
	}

	return msgResponse.getMessage();
	
	
	// var msgResponse;

	/*
	try {
		msgResponse = router.routeMessageByChannelId(channelID, msgRequest);
		outData.status = &apos;success&apos;;
		outData.status_message = &apos;message successfully sent to channel&apos;;
	} catch (ex) {
		outData.status = &apos;error&apos;;
		outData.status_message = ex.toString();
		return outData;
	}

	if (msgResponse.getStatus() == null) {
		outData.response_status = &apos;unknown&apos;;
		logger.error(&apos;Code Template &quot;Send message to channel by id&quot;: channel &quot;&apos; + ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;);
	}
	
	switch (String(msgResponse.getStatus())) {
		case &apos;ERROR&apos;:
			outData.response_status = &apos;error&apos;;
			break;
		case &apos;FILTERED&apos;:
			outData.response_status = &apos;filtered&apos;;
			break;
		case &apos;QUEUED&apos;:
			outData.response_status = &apos;queued&apos;;
			break;
		case &apos;RECEIVED&apos;:
			outData.response_status = &apos;received&apos;;
			break;
		case &apos;SENT&apos;:
			outData.response_status = &apos;sent&apos;;
			break;
	}

	outData.response_message = msgResponse.getMessage();

	return outData;
	*/
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>f4cd9e71-4f8d-4472-80a9-31b533f4d578</id>
                <name>Get bots DB connection to specified environment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884906</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get a new bots database connection. Be sure to wrap in try/finally block to close database connection.

	@param {String} environment - prod, staging, dev, local
	@return {String} return database connection
*/
function GetBotsDBConnection() {
	var username = configurationMap.get(&apos;bots-db-user&apos;);
	var password = configurationMap.get(&apos;bots-db-pass&apos;);
	var uri = configurationMap.get(&apos;bots-db-uri&apos;);	
	return DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, uri, username, password);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>554bd282-172b-43a0-8902-992baf63b04d</id>
                <name>Get DB connection to specified environment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885107</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get a new database connection. 

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetDBConnection(environment) {
	if (environment != &apos;prod&apos; &amp;&amp; environment != &apos;staging&apos; &amp;&amp; environment != &apos;dev&apos; &amp;&amp; environment != &apos;local&apos;) {
		return null;
	}
	
	var username = configurationMap.get(&apos;docsink-db-user-&apos; + environment);
	var password = configurationMap.get(&apos;docsink-db-pass-&apos; + environment);
	var uri = configurationMap.get(&apos;docsink-db-uri-&apos; + environment);

	return DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.cj.jdbc.Driver&apos;, uri, username, password);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>552a87ed-b5a0-4546-9e5c-0a768661a351</id>
                <name>Postprocessor - Generate channel response</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884842</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function generateChannelResponse() {
	// This script executes once after a message has been processed
	// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
	
	var destinations = sourceMap.get(&apos;destinationSet&apos;);
	var metadataIds = destinations.toArray();
	
	if (metadataIds.length == 0) {
		return ResponseFactory.getErrorResponse(&apos;invalid request&apos;);
	}
	
	var smsg = message.getConnectorMessages().get(0);
	if (smsg.getStatus() == &apos;ERROR&apos;) {
		if (smsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(smsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(smsg.getResponseData().getMessage());
	}
	
	var metadataID = metadataIds[0];
	var cmsg = message.getConnectorMessages().get(metadataID);

	if (cmsg.getStatus() == &apos;ERROR&apos;) {
		if (cmsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(cmsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;SENT&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;FILTERED&apos;) {
		return ResponseFactory.getFilteredResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;QUEUED&apos;) {
		return ResponseFactory.getQueuedResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;RECEIVED&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else {
		return cmsg;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>ee8d4c72-de8a-4e42-8de4-e56376c99c69</id>
            <name>HL7v3</name>
            <revision>4</revision>
            <lastModified>
              <time>1690140133399</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>HL7v3 Library</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>46863fa1-cc19-42b4-b713-5048a69d7fe1</id>
                <name>getHL7v3AdministrativeGender</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911325383</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** getHL7v3AdministrativeGender(code)

  	- Desc: This function receives a code system code (string) and returns adminGender array contains both the code and displayName

   	@param {String} code - this contains a code system code (string)
	@return {array} adminGender - this array contains the Gender and DisplayName (key,value) pair in the adminGender array.
*/

function getHL7v3AdministrativeGender(code) {

	// define local variables
	var adminGender= {};
	adminGender.codeSystem= &quot;2.16.840.1.133883.5.1&quot;
	adminGender.codeSystemName= &quot;HL7 AdministrativeGender&quot;;

	if(&quot;M&quot; == code) {
		adminGender.code= &quot;M&quot;;
		adminGender.displayName= &quot;Male&quot;;
	} else if (&quot;F&quot; == code) {
		adminGender.code= &quot;F&quot;;
		adminGender.displayName= &quot;Female&quot;;
	} else {
		adminGender.code= &quot;UN&quot;;
		adminGender.displayName= &quot;Undifferentiated&quot;;
	}

	return adminGender;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>e48db441-8556-4a03-a3e2-d018a8f9f608</id>
                <name>getHL7v3Confidentiality</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911325172</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** getHL7v3Confidentiality(code)

  	- Desc: This function receives a code system code (string) and returns confidentiality array contains both the code and displayName

   	@param {String} code - this contains a code system code (string)
	@return {array} confidentiality - this array contains the Confidentiality Code and DisplayName (key,value) pair in the confidentialityCode array.
*/

function getHL7v3Confidentiality(code) {

	// define local variables
	var confidentiality= {};
	confidentiality.codeSystem= &quot;2.16.840.1.113883.5.25&quot;
	confidentiality.codeSystemName= &quot;HL7 Confidentiality&quot;;

	if(&quot;N&quot; == code) {
		confidentiality.code= &quot;N&quot;;
		confidentiality.displayName= &quot;Normal&quot;;
	} else if (&quot;R&quot; == code) {
		confidentiality.code= &quot;R&quot;;
		confidentiality.displayName= &quot;Restricted&quot;;
	} else {
		confidentiality.code= &quot;V&quot;;
		confidentiality.displayName= &quot;Very Restricted&quot;;
	}

	return confidentiality;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>759504b7-8f74-4a3a-bd4a-1a6ff876f59a</id>
                <name>getMCCI_IN000002()</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911325420</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	getMCCI_IN000002() Desc:  Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getMCCI_IN000002() { 
	var mcci = &apos;&lt;MCCI_IN000002UV01 ITSVersion=&quot;XML_1.0&quot;&gt;&apos; + 
		&apos;&lt;id root=&quot;2.16.840.1.113883.1.3&quot; extension=&quot;&quot;/&gt;&apos; + 
		&apos;&lt;creationTime value=&quot;&quot;/&gt;&apos; + 
		&apos;&lt;versionCode controlInformationRoot=&quot;2.16.840.1.113883.11.19373&quot; code=&quot;V3PR1&quot;/&gt;&apos; + 
		&apos;&lt;interactionId root=&quot;2.16.840.1.113883.1.6&quot; extension=&quot;MCCI_IN000002UV01&quot;/&gt;&apos; + 
		&apos;&lt;processingCode code=&quot;D&quot;/&gt;&apos; + 
		&apos;&lt;processingModeCode code=&quot;T&quot;/&gt;&apos; +
		&apos;&lt;acceptAckCode code=&quot;NE&quot;/&gt;&apos; + 
		&apos;&lt;receiver typeCode=&quot;RCV&quot;&gt;&apos; + 
			&apos;&lt;device classCode=&quot;DEV&quot; determinerCode=&quot;INSTANCE&quot;&gt;&apos; + 
				&apos;&lt;id controlInformationRoot=&quot;2.16.840.1.113883.3.40.5.1&quot; controlInformationExtension=&quot;Organization&quot;/&gt;&apos; + 
				&apos;&lt;asAgent classCode=&quot;AGNT&quot;&gt;&apos; + 
					&apos;&lt;representedOrganization classCode=&quot;ORG&quot; determinerCode=&quot;INSTANCE&quot;&gt;&apos; + 
						&apos;&lt;id controlInformationRoot=&quot;2.16.840.1.113883.3.51.200&quot; controlInformationExtension=&quot;&quot;/&gt;&apos; + 
					&apos;&lt;/representedOrganization&gt;&apos; + 
				&apos;&lt;/asAgent&gt;&apos; + 
			&apos;&lt;/device&gt;&apos; + 
		&apos;&lt;/receiver&gt;&apos; + 
		&apos;&lt;sender typeCode=&quot;SND&quot;&gt;&apos; + 
			&apos;&lt;device classCode=&quot;DEV&quot; determinerCode=&quot;INSTANCE&quot;&gt;&apos; + 
				&apos;&lt;id controlInformationRoot=&quot;2.16.840.1.113883.3.40.5.2&quot; controlInformationExtension=&quot;Organization&quot;/&gt;&apos; + 
				&apos;&lt;asAgent classCode=&quot;AGNT&quot;&gt;&apos; + 
					&apos;&lt;representedOrganization classCode=&quot;ORG&quot; determinerCode=&quot;INSTANCE&quot;&gt;&apos; + 
						&apos;&lt;id controlInformationRoot=&quot;2.16.840.1.113883.3.51.200&quot; controlInformationExtension=&quot;&quot;/&gt;&apos; + 
					&apos;&lt;/representedOrganization&gt;&apos; + 
				&apos;&lt;/asAgent&gt;&apos; + 
			&apos;&lt;/device&gt;&apos; + 
		&apos;&lt;/sender&gt;&apos; + 
		&apos;&lt;acknowledgement typeCode=&quot;AE&quot;&gt;&apos; + 
			&apos;&lt;targetMessage&gt;&apos; + 
				&apos;&lt;id root=&quot;2.16.840.1.113883.1.3&quot; extension=&quot;&quot;/&gt;&apos; + 
			&apos;&lt;/targetMessage&gt;&apos; + 
			&apos;&lt;acknowledgementDetail&gt;&apos; + 
				&apos;&lt;code code=&quot;&quot;/&gt;&apos; + 
				&apos;&lt;text value=&quot;&quot;/&gt;&apos; + 
			&apos;&lt;/acknowledgementDetail&gt;&apos; + 
		&apos;&lt;/acknowledgement&gt;&apos; + 
	&apos;&lt;/MCCI_IN000002UV01&gt;&apos;; 
		
	return mcci;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
            <name>WebPT-Common</name>
            <revision>2</revision>
            <lastModified>
              <time>1678715257049</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
                <name>Check if String contains</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122790</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
                <name>Check if String contains HTTP code</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122593</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>8515e088-5c50-47ee-9e2f-9fad1ecf48bd</id>
                <name>Check if String is JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123309</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Added by Kirby Knight
	12/21/2020
	Test for JSON

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5f2f84ba-3e66-4be3-8260-8fbd8258bd92</id>
                <name>Check if the PDF is valid</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122055</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
//This function is used for checking the word &quot;PDF&quot; in inbound attachment.
function isValidBase64PDF(base64) {
	const ENCODED_PDF_SIGN = &quot;JVBERi&quot;; // %PDF sign
	const PDF_EOF = &quot;JSVFT0YNCg&quot;; // %EOF
	var pdfBase64Size = (base64.length() * (3 / 4)) - 1;
	
	return (base64.indexOf(ENCODED_PDF_SIGN) != -1 &amp;&amp; base64.indexOf(PDF_EOF) != -1 &amp;&amp; pdf_base64_size &gt; 36);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
                <name>Convert JSON date to HL7v2 date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122137</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
                <name>Convert JSON datetime to HL7v2 datetime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122430</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>bb21449a-df39-48c6-be52-24106c8df4c4</id>
                <name>Destination Formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Kirby Knight 03/10/2021
	
	This function will remove all other ROOT.Meta.Destinations nodes that are not passed in the
	destination variable and removes the ROOT.Meta.Destinations[x].Destination node

	@param {Any} destination - 
	@return {String} return description
*/
function formatDestinations(destination) {
var arrDestinations = msg[&apos;Meta&apos;][&apos;Destinations&apos;];
	//  Start at the end of the array because of the posibility of deleted array items 
	for (var i = arrDestinations.length - 1; i &gt;= 0; i--) {
		if (arrDestinations[i][&apos;Destination&apos;] == destination){
			delete arrDestinations[i][&apos;Destination&apos;]
		}else if (arrDestinations[i][&apos;Destination&apos;] != destination){
			arrDestinations.splice(i, 1);
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
                <name>Extract JSON node data</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121748</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7ed44f8a-fa40-4f3e-9426-3021604eabe0</id>
                <name>Get Feature Value by Name and Database</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123262</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns a string containing the feature value (system property) for a specific client database.

	@param {String} featureName - name of the feature, ie: &quot;BetterPTBidirectionalScheduling&quot;
	@param {String} databaseIdentifier - database name or databaseID / TenantID
	@param {String} databaseIdentifierType - what value is provided in databaseIdentifier. current options include &quot;ID&quot; or &quot;NAME&quot;
	@return {String} returns feature value
*/
function getFeatureValueByNameDatabase(featureName, databaseIdentifier, databaseIdentifierType) {
	var paramList = new Packages.java.util.ArrayList();
	paramList.add(featureName);
	paramList.add(databaseIdentifier);
	paramList.add(databaseIdentifierType);
	
	var sSQL = &apos;EXEC [dbo].[pr_FeatureValueByNameDatabase] ?, ?, ?&apos;;
	
	try {
		var result = executeSharedDBStatementFhirCh(sSQL, true, paramList);
		var featureValue ;
		if(result.next()){			//Added
		 featureValue = result.getString(1);
		}
		return featureValue;
	} catch (e) {
		logger.error(e);
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>9842be2c-c633-42ac-87f1-f91aca9e370f</id>
                <name>JSON Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121776</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function populates the MR and PI patient IDS to channelMap

	@return {String} return description
*/
function jsonPatientIds() {
	for each (patId in msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) {
	if (patId[&apos;IDType&apos;].toString() == &apos;MR&apos;){
		channelMap.put(&apos;extPatId&apos;, patId[&apos;ID&apos;].toString());
	}else if(patId[&apos;IDType&apos;].toString() == &apos;PI&apos;){
		channelMap.put(&apos;patId&apos;, patId[&apos;ID&apos;].toString());
	}
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
                <name>Verify JSON node for existance</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>394664c0-d536-4310-970e-181dc03ee7da</id>
            <name>WebPT-Conversions</name>
            <revision>2</revision>
            <lastModified>
              <time>1690140133427</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
                <name>Convert FHIR codes to HL7v2 codes</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122899</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>2fc8cbf3-0d92-4d1d-a3d6-136c09bd9f2a</id>
            <name>WebPT-Custom Database Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1703964939898</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>23c0b510-63e4-40fa-a4e1-7b2b92ce9a96</id>
                <name>Execute Statement Shared DB Conn clientDb Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122401</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Executes a SQL statement using a shared database connection stored in the Global Map. If the
connection does not exist, creates it.

@param {String} statement - The SQL statement to execute
@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
@param {List} paramList - A Java List object containing the parameters for the statement (optional)
 */
function executeSharedDBStatementclientDbCh(statement, isQuery, paramList) {
    var result;

    try {
        var dbConnclientDbCh = globalChannelMap.get(&quot;dbConnclientDbCh&quot;);

        if (dbConnclientDbCh == null || dbConnclientDbCh.getConnection().isClosed()) {
            dbConnclientDbCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;), $(&apos;dbClient&apos;), $(&apos;dbUserFhir&apos;), $(&apos;dbPwFhir&apos;));
            globalChannelMap.put(&quot;dbConnclientDbCh&quot;, dbConnclientDbCh);
        }

        if (paramList == undefined) {
            paramList = new Packages.java.util.ArrayList();
        }

        if (isQuery) {
            result = dbConnclientDbCh.executeCachedQuery(statement, paramList);
        } else {
            result = dbConnclientDbCh.executeUpdate(statement, paramList);
        }
    } catch (e) {
        logger.error(e);
    }
    finally {
        return result;
    }
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>4efb3110-a83f-48b5-93ad-79c847b51865</id>
                <name>Execute Statement Shared DB Conn clntAcl Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123455</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClntAclCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnClntAclCh = globalChannelMap.get(&quot;dbConnClntAclCh&quot;);

		if (dbConnClntAclCh == null || dbConnClntAclCh.getConnection().isClosed())
		{
			dbConnClntAclCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbClntAcl&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnClntAclCh&quot;, dbConnClntAclCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnClntAclCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnClntAclCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>d96d45dd-57f7-4aa9-9bf4-e464d31b94c6</id>
                <name>Execute Statement Shared DB Conn FHIR</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121922</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhir(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhir.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhir.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6014068e-c021-4a38-9fa6-6f38f6a2cdab</id>
                <name>Execute Statement Shared DB Conn FHIR Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123492</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhirCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhirCh = globalChannelMap.get(&quot;dbConnFhirCh&quot;);

		if (dbConnFhirCh == null || dbConnFhirCh.getConnection().isClosed())
		{
			dbConnFhirCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnFhirCh&quot;, dbConnFhirCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhirCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhirCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fbd5c4a1-b816-4496-acdf-067005f1d376</id>
                <name>Execute Statement Shared DB Conn Translations Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123008</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementTranslationsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnTranslationsCh = globalChannelMap.get(&quot;dbConnTranslationsCh&quot;);

		if (dbConnTranslationsCh == null || dbConnTranslationsCh.getConnection().isClosed())
		{
			dbConnTranslationsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlTranslations&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnTranslationsCh&quot;, dbConnTranslationsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnTranslationsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnTranslationsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5d1a5577-4ba4-4d1e-b6cd-e2d924164909</id>
                <name>Execute Statement with Shared DB Conn ODS Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122280</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdsCh = globalChannelMap.get(&quot;dbConnOdsCh&quot;);

		if (dbConnOdsCh == null || dbConnOdsCh.getConnection().isClosed())
		{
			dbConnOdsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOds&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdsCh&quot;, dbConnOdsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>3991db14-0c0b-4123-952c-5164c1ded501</id>
                <name>Execute Statement with Shared DB Conn ODW Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122960</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.  THis connects to the ODW db in Azure

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdwCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdwCh = globalChannelMap.get(&quot;dbConnOdwCh&quot;);

		if (dbConnOdwCh == null || dbConnOdwCh.getConnection().isClosed())
		{
			dbConnOdwCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOdw&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdwCh&quot;, dbConnOdwCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdwCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdwCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fae08c88-7550-479a-b8ed-ffef47e8eed9</id>
                <name>executeSharedDBStatementClient</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121956</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClient(statement, isQuery, paramList, dbname)
{
	var result;
 	var dburl= &apos;jdbc:sqlserver://AZW1DEV-SQL02.clinicient.com:1433;databaseName=&apos;+dbname+&apos;&apos;;
	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),dburl,$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			
			//globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		result = dbConnFhir.executeCachedQuery(statement);
	
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>ed20a457-5beb-4aea-9bb9-cf91112ccc56</id>
            <name>WebPT-Default Functions</name>
            <revision>10</revision>
            <lastModified>
              <time>1690140133487</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>a8a9a0c8-9322-46dc-bef8-011eb3d70291</id>
                <name>Create Header for CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121678</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This creates a header for csv files based on the contents of the header variable.  The header
	variable is populated in the channel from the outbound msg template

	@return {String} return description
*/
function createHeader() {
	//Destination transformer.  this creates the header for each new file

	var path = java.nio.file.Paths.get($(&apos;filePath&apos;)+$(&apos;fileName&apos;));
	var bytes = (new java.lang.String($(&apos;header&apos;))).getBytes(&quot;UTF-8&quot;);
	try {
	  java.nio.file.Files.write(path, bytes, java.nio.file.StandardOpenOption.CREATE_NEW);
	}
	catch (e) {
	  //logger.info(&quot; should throw IOException if file already exists&quot;);
	
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5a886a1f-dab1-41b5-94c6-1a639907d7da</id>
                <name>Filter Message Evaluate Received Checksum</name>
                <revision>33</revision>
                <lastModified>
                  <time>1678916806664</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating a checksum for each provided message.  We save off the most recent 100 unique checksum values in a global 
	array so if the current message has been recently received we are able to ignore it.
	
	@author:  	Jeffrey Ritz
	@scriptName: 	filterEvaluateReceivedChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {boolean} filter - return filter boolean (true= filter msg, false= do not filter msg)
		persist received_checksum global ChannelMap array
		persist filterMessage ChannelMap variable
	@history
*/
function filterEvaluateReceivedChecksum(msg) {	

	var scriptName= &apos;filterEvaluateReceivedChecksum&apos;
	var filter = false;
	var received_len_limit = 999;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B connectorMessage.getRawData() typeof: &apos;+typeof(connectorMessage.getRawData())+&apos; msg: &apos;+connectorMessage.getRawData());
	} // end if 
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	// var dataBytes = new java.lang.String(connectorMessage.getRawData()).getBytes(&apos;UTF-8&apos;);
	// message = new String(message.getBytes(&quot;utf-8&quot;), &quot;utf-8&quot;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	// var dataBytes = new java.lang.String(msg.getBytes(&apos;UTF-8&apos;));
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);

	// var messageObjectgetBytes= checksum.update(connectorMessage.getRawData().getBytes());
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 
	
	$c(&apos;checksum&apos;, checksum.getValue());
	
	//grab the global channel map variable holding the last X unique checksums that we&apos;ve received
	var received = $gc(&apos;received_checksums&apos;);
	
	if (received == undefined) {
		var received = new Array();
		received.push(checksum.getValue());
	} else {
		//check if we&apos;ve recently received this message, skip it if so
		if (received.indexOf(checksum.getValue()) &gt; -1) {
			filter = true;
		//we haven&apos;t seen it recently, so remember it and allow it through
		} else {
			var received_len = received.length;
			if (received_len &gt; received_len_limit) {
				//remove oldest/first entry, shift all entries forward, and add new entry to end
				received.shift();
				received[received_len_limit] = checksum.getValue();
			} else {
				//add new entry to end of array
				received[received_len] = checksum.getValue();
			} // end if 
		} // end if 
	} // end if 

	 //debug code
	/*for (x=0; x&lt;=received_len_limit; x++) {
		$c(&apos;received-&apos;+x, received[x]);
	} */

	$c(&apos;filterMessage&apos;,filter);
	$gc(&apos;received_checksums&apos;,received);

	return filter;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fbd0484d-74a2-48e4-aedd-f97c2fcefa16</id>
                <name>Get Message Checksum</name>
                <revision>12</revision>
                <lastModified>
                  <time>1678916806703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating and reutrning a checksum for each provided message
	
	@author:  	Jeffrey Ritz
	@scriptName: 	getMessageChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {object} result - return checksum value
	@history
	2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() to remove the exponential representation of the number value
*/
function getMessageChecksum(msg) {	

	var scriptName= &apos;getMessageChecksum&apos;;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	} // end if 
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 

	var checksumValue= checksum.getValue();
	// 2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() 
	var arrChecksumValue= new Array(); 
	arrChecksumValue.push(checksumValue);
	$c(&apos;checksum&apos;, arrChecksumValue);

	return checksumValue;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>91db9bd1-ca92-4dcc-bba4-e1ece603fc87</id>
                <name>Remove Child Object From Parent Object Json</name>
                <revision>22</revision>
                <lastModified>
                  <time>1678916845037</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON child object and it&apos;s descendents from a parent object JSON
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeChildObjectFromParentObjectJson.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
		{string} parentObject - place the name of the string to be designated as the parent object in the JSON
		{string} childObject  - place the name of the string to be designated as the child object to be deleted from the JSON
	@param {object} msg - return modified Json object msg excluding specified Json child object
	@history
*/
function removeChildObjectFromParentObjectJson(msg, parentObject, childObject) {
	
	var scriptName= &apos;removeChildObjectFromParentObjectJson&apos;;
	var debug= 0;

	//var strObjJson= JSON.parse(msg);
	var strObjJson= JSON.stringify(msg);
	
	//var objJson= JSON.parse(msg);
	var newParentObjects= new Object();
	var parentObjects= msg;
	var arrParentObjects= new Array();
	var arrTransactionObjects= new Array();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof parentObjects: &apos;+typeof(parentObjects));
	for (var key in parentObjects) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof key: &apos;+typeof(key)+&apos; key: &apos;+key);
		if(key== parentObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof objJson[key]: &apos;+typeof(parentObjects[key])+&apos; parentObjects[key]: &apos;+JSON.stringify(parentObjects[key]));
			
			var newChildObjects= new Object();
			var childObjects= parentObjects[key];
			var arrChildObjects= new Array();
			
			for(var key2 in childObjects) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key2: &apos;+typeof(key2)+&apos; key2: &apos;+key2+&apos; childObject: &apos;+childObject);
				for(var key3 in childObjects[key2]) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key3: &apos;+typeof(key3)+&apos; key3: &apos;+key3+&apos; childObject: &apos;+childObject);
					if(key3== childObject) {
						var transactionObject= new Object();
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; childObject typeof: &apos;+typeof(childObjects[key2][key3])+&apos; childObject: &apos;+JSON.stringify(childObjects[key2][key3]));
						transactionObject.key= key3;
						transactionObject.value= childObjects[key2][key3];
						delete childObjects[key2][key3];
						if(debug&gt;0) logger.info(&apos;DEBUG::&apos;+scriptName+&apos; DELETE childObject: &apos;+key3+&apos; of parentObject: &apos;+JSON.stringify(childObjects[key2]));
						arrTransactionObjects.push(transactionObject);
					} // end if
				} // end for 
				arrChildObjects.push(childObjects[key2]);
			} // end for
			newParentObjects[key]= arrChildObjects;
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add all child keys: &apos;+JSON.stringify(arrChildObjects)+&apos; into ParentObject[&apos;+key+&apos;]: &apos;+newParentObjects[key]);
		} else {
			newParentObjects[key]= parentObjects[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+parentObjects[key]+&apos; string: &apos;+JSON.stringify(parentObjects[key]));
		} // end if
		arrParentObjects.push(newParentObjects);
	} // end for 
	var newMsg= arrParentObjects;
	channelMap.put(&apos;removeChildObjectMsg&apos;,newMsg);
	channelMap.put(&apos;removedChildTransIds&apos;,arrTransactionObjects);
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));
	return newMsg;
	
} </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2ff28338-dfb6-445d-a04e-c74b5486a08c</id>
                <name>Remove Object From Json</name>
                <revision>26</revision>
                <lastModified>
                  <time>1703964988318</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  Desc: This function will remove a JSON object and it&apos;s descendents from the msg
	
	fileName: 	removeObjectFromJson.js
	name:		Remove Object From Json	
	Authored:  	Jeffrey Ritz
	Created: 		2023-03-09
	Details:
		@param IN {string} msg - provide parent JSON object (i.e. Inbound connectorMessage.getRawData() - msg)
		@param IN {string} removeObject - provide JSON object to evaluate and remove from parent JSON object (msg)
		OUT (object) newMsg - return JSON object from processing
	@history
	2023-03-15 JER - Modified to include removeObject function parameter to specify specific JSON object by referencing key to be removed
*/
function removeObjectFromJson(msg, removeObject) {
	
	var scriptName= &apos;removeObjectFromJson&apos;;
	var debug= 0;
	//var objJson= JSON.stringify(msg);
	var objJson= JSON.parse(msg);
	var newObjJson= new Object();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof objJson: &apos;+typeof(objJson)+&apos; objJSON: &apos;+JSON.stringify(objJson));
	for (var key in objJson) {
		if(key== removeObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; DELETE key: &apos;+key);
			// delete objJson[key];
		} else {
			newObjJson[key]= objJson[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+objJson[key]+&apos; string: &apos;+JSON.stringify(objJson[key]));
		} // end if 
	} // end for 
	var newMsg= newObjJson;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));

	// return JSON.stringify(newMsg);
	return newMsg;
} 
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>993a6fd8-454a-4133-ba32-dbcfea71582b</id>
                <name>Update EDITransactionLog</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123233</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	The purpose of this function is to update the status in Insight.
	Populate the channel map with the following variables functionalGroupControlNumber, status, eventDate

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateStatus () {

	//  Build the llst of paramters to pass to the database
	var paramList = new Packages.java.util.ArrayList();
	paramList.add($(&apos;functionalGroupControlNumber&apos;));
	paramList.add($(&apos;eventDate&apos;));  //dateTime in the acknoledged field in this format (&quot;2017-07-31 14:15:01.577&quot;)
	paramList.add(new java.lang.Integer(parseInt($(&apos;status&apos;), 10)));
	
//	logger.info(&quot;updateStatus &quot;+paramList);

	//  SQL Statement and paramters that will be sent to SQL
	var statement = &quot;EXEC dbo.pr_EDITransactionLog_Update ?, ?, ?&quot;;
	//  Code template used for establishiing connection and passing the sql statement and parameter list  
	var result = executeSharedDBStatementFhirCh(statement, false, paramList);
	return result;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>42cb290e-5fb0-46b8-82db-576ea1e1ba0d</id>
                <name>Update EDITransactionLog from responseStatus in the response transformer </name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123356</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Call this in the response transformer on the destination.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateReponseStatus() {
	var status = 0;
	if (responseStatus == SENT){
		var status = 1;
		channelMap.put(&apos;status&apos;,status);
	}

updateStatus()
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2223579b-f914-4be7-a575-f1a2a2aa1ae2</id>
                <name>ValidateToString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123044</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} mapping - 
	@param {Any} defaultValue - 
	@param {Any} replacement - 
	@return {String} return description
*/
function validateToString(mapping, defaultValue, replacement) {
    if (mapping == null) {
        mapping = &apos;&apos;;
    }
    return validate(mapping, defaultValue, replacement).toString() + &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>8c9a8268-4ef0-43e9-ae5b-bf8895f0b80c</id>
            <name>WebPT-FORMAT</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939902</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>Include any functions or codes with 
-date &amp; time formating related
-data type formatting</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>920c9ead-70a6-4168-9d95-89261b73ae44</id>
                <name>12digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123520</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Take any 12 digit string yyyyMMddHHmm and change to MM/dd/yyyy HH:mm 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm
*/
function yyyyMMddHHmm(string) {
	return DateUtil.convertDate(&quot;yyyyMMddHHmm&quot;, &quot;MM/dd/yyyy HH:mm&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fe2689ec-1946-46d5-8dd6-8fbbf106e1e6</id>
                <name>14digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122871</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Take 14 digit string yyyyMMddHHmmss and change to MM/dd/yyyy HH:mm:ss 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm:ss
*/
function yyyyMMddHHmmss(string) {
	if (string.length == 14) {
		  return DateUtil.convertDate(&quot;yyyyMMddHHmmss&quot;, &quot;MM/dd/yyyy HH:mm:ss&quot;, string);
	}
	else {
		return &quot;unregcognized string&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>b9db35e2-d5bd-48a1-8cc6-3475c698d7b4</id>
                <name>currentDT_yyyy-MM-dd HH:mm:ss.SSS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123114</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Kirby Knight
	Date Modified:  11/09/2020
	Retund the current date/time down to the millisecond

	@return {String} return description
*/
function currentDtToMilliseconds() {
	return DateUtil.getCurrentDate(&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7e747999-4bec-43fc-978d-7049d3543cf0</id>
                <name>fixHL7NodeOrder</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/

function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>dfedacf6-773b-413e-b78d-1bf16a92071d</id>
                <name>formatHL7Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121643</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Take any eight digit HL7 message data string (yyyyMMdd) and formats it human-readable format (MM/dd/yyyy)
	such as 20090612 -&gt; 06/12/2009

	@param {String} arg1 - 8 digit HL7 message data string yyyyMMdd
	@return {String} return date format as MM/dd/yyyy
*/
function formatHL7Date(string) {
	return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;MM/dd/yyyy&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>a8f54921-2cb6-4134-8806-3c4e10a757d9</id>
                <name>getCurrentLocalTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122014</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = getCurrentLocalTimestamp();

	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestamp() {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(&quot;EST&quot;)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6c5f1bd8-ebbf-4c8e-b465-0be8ccaba0d0</id>
                <name>getCurrentLocalTimeToMs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123077</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	Gets the current local date/time to the milliseconds
	Converts to the timezone that is passed in Examples (America/New_York, America/Chicago, America/Phoenix )

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestampToMs(timeZone) {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timeZone)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>78d74c5b-c881-404a-ad96-4e909e1a19f3</id>
                <name>phoneToE164</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121982</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Insight phone number to E164 format 5554446666 to +15554446666

	@param {Any} phoneIn - 
	@return {String} return description
*/
function phoneToE164(phoneIn) {
	logger.info(&apos;L1 &apos;+phoneIn);
	if(phoneIn != null ){
	//phoneIn = &apos;+1&apos; + phoneIn.toString(); 
	logger.info(&apos;L2 &apos;+phoneIn);
	return &apos;+1&apos; + phoneIn.toString(); 
	} else{
		return null;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>6a32d94d-408c-4e10-9799-e45e150b5c1f</id>
            <name>WebPT-MISC</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939909</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>miscellaneous javascript</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>84b4f1c7-f82d-4140-9fbd-98a95f68ff32</id>
                <name>getChannelState</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122648</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetChannelState(channel_id) {

    var channel_status = &quot;NA&quot;;

    var channel_count = parseInt(Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().size());

    for(var i=0;i&lt;channel_count;i++) {
        if (channel_id == Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getChannelId()) {
            channel_status = Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getState();
        }
    }

    return channel_status;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>715435a9-cb15-4e8f-bc5b-4249eaea6e17</id>
                <name>momentjs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122487</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Testing MIRTH-3794 using external JavaScript library &quot;moment.js&quot;
*/
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=b():&quot;function&quot;==typeof define&amp;&amp;define.amd?define(b):a.moment=b()}(this,function(){&quot;use strict&quot;;function a(){return Hc.apply(null,arguments)}function b(a){Hc=a}function c(a){return&quot;[object Array]&quot;===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||&quot;[object Date]&quot;===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c&lt;a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&amp;&amp;(a[c]=b[c]);return f(b,&quot;toString&quot;)&amp;&amp;(a.toString=b.toString),f(b,&quot;valueOf&quot;)&amp;&amp;(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ca(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&amp;&amp;(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow&lt;0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&amp;&amp;(a._isValid=a._isValid&amp;&amp;0===b.charsLeftOver&amp;&amp;0===b.unusedTokens.length&amp;&amp;void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if(&quot;undefined&quot;!=typeof b._isAMomentObject&amp;&amp;(a._isAMomentObject=b._isAMomentObject),&quot;undefined&quot;!=typeof b._i&amp;&amp;(a._i=b._i),&quot;undefined&quot;!=typeof b._f&amp;&amp;(a._f=b._f),&quot;undefined&quot;!=typeof b._l&amp;&amp;(a._l=b._l),&quot;undefined&quot;!=typeof b._strict&amp;&amp;(a._strict=b._strict),&quot;undefined&quot;!=typeof b._tzm&amp;&amp;(a._tzm=b._tzm),&quot;undefined&quot;!=typeof b._isUTC&amp;&amp;(a._isUTC=b._isUTC),&quot;undefined&quot;!=typeof b._offset&amp;&amp;(a._offset=b._offset),&quot;undefined&quot;!=typeof b._pf&amp;&amp;(a._pf=j(b)),&quot;undefined&quot;!=typeof b._locale&amp;&amp;(a._locale=b._locale),Jc.length&gt;0)for(c in Jc)d=Jc[c],e=b[d],&quot;undefined&quot;!=typeof e&amp;&amp;(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),Kc===!1&amp;&amp;(Kc=!0,a.updateOffset(this),Kc=!1)}function o(a){return a instanceof n||null!=a&amp;&amp;null!=a._isAMomentObject}function p(a){return 0&gt;a?Math.ceil(a):Math.floor(a)}function q(a){var b=+a,c=0;return 0!==b&amp;&amp;isFinite(b)&amp;&amp;(c=p(b)),c}function r(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e&gt;d;d++)(c&amp;&amp;a[d]!==b[d]||!c&amp;&amp;q(a[d])!==q(b[d]))&amp;&amp;g++;return g+f}function s(){}function t(a){return a?a.toLowerCase().replace(&quot;_&quot;,&quot;-&quot;):a}function u(a){for(var b,c,d,e,f=0;f&lt;a.length;){for(e=t(a[f]).split(&quot;-&quot;),b=e.length,c=t(a[f+1]),c=c?c.split(&quot;-&quot;):null;b&gt;0;){if(d=v(e.slice(0,b).join(&quot;-&quot;)))return d;if(c&amp;&amp;c.length&gt;=b&amp;&amp;r(e,c,!0)&gt;=b-1)break;b--}f++}return null}function v(a){var b=null;if(!Lc[a]&amp;&amp;&quot;undefined&quot;!=typeof module&amp;&amp;module&amp;&amp;module.exports)try{b=Ic._abbr,require(&quot;./locale/&quot;+a),w(b)}catch(c){}return Lc[a]}function w(a,b){var c;return a&amp;&amp;(c=&quot;undefined&quot;==typeof b?y(a):x(a,b),c&amp;&amp;(Ic=c)),Ic._abbr}function x(a,b){return null!==b?(b.abbr=a,Lc[a]=Lc[a]||new s,Lc[a].set(b),w(a),Lc[a]):(delete Lc[a],null)}function y(a){var b;if(a&amp;&amp;a._locale&amp;&amp;a._locale._abbr&amp;&amp;(a=a._locale._abbr),!a)return Ic;if(!c(a)){if(b=v(a))return b;a=[a]}return u(a)}function z(a,b){var c=a.toLowerCase();Mc[c]=Mc[c+&quot;s&quot;]=Mc[b]=a}function A(a){return&quot;string&quot;==typeof a?Mc[a]||Mc[a.toLowerCase()]:void 0}function B(a){var b,c,d={};for(c in a)f(a,c)&amp;&amp;(b=A(c),b&amp;&amp;(d[b]=a[c]));return d}function C(b,c){return function(d){return null!=d?(E(this,b,d),a.updateOffset(this,c),this):D(this,b)}}function D(a,b){return a._d[&quot;get&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b]()}function E(a,b,c){return a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b](c)}function F(a,b){var c;if(&quot;object&quot;==typeof a)for(c in a)this.set(c,a[c]);else if(a=A(a),&quot;function&quot;==typeof this[a])return this[a](b);return this}function G(a,b,c){var d=&quot;&quot;+Math.abs(a),e=b-d.length,f=a&gt;=0;return(f?c?&quot;+&quot;:&quot;&quot;:&quot;-&quot;)+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function H(a,b,c,d){var e=d;&quot;string&quot;==typeof d&amp;&amp;(e=function(){return this[d]()}),a&amp;&amp;(Qc[a]=e),b&amp;&amp;(Qc[b[0]]=function(){return G(e.apply(this,arguments),b[1],b[2])}),c&amp;&amp;(Qc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function I(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,&quot;&quot;):a.replace(/\\/g,&quot;&quot;)}function J(a){var b,c,d=a.match(Nc);for(b=0,c=d.length;c&gt;b;b++)Qc[d[b]]?d[b]=Qc[d[b]]:d[b]=I(d[b]);return function(e){var f=&quot;&quot;;for(b=0;c&gt;b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function K(a,b){return a.isValid()?(b=L(b,a.localeData()),Pc[b]=Pc[b]||J(b),Pc[b](a)):a.localeData().invalidDate()}function L(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Oc.lastIndex=0;d&gt;=0&amp;&amp;Oc.test(a);)a=a.replace(Oc,c),Oc.lastIndex=0,d-=1;return a}function M(a){return&quot;function&quot;==typeof a&amp;&amp;&quot;[object Function]&quot;===Object.prototype.toString.call(a)}function N(a,b,c){dd[a]=M(b)?b:function(a){return a&amp;&amp;c?c:b}}function O(a,b){return f(dd,a)?dd[a](b._strict,b._locale):new RegExp(P(a))}function P(a){return a.replace(&quot;\\&quot;,&quot;&quot;).replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,&quot;\\$&amp;&quot;)}function Q(a,b){var c,d=b;for(&quot;string&quot;==typeof a&amp;&amp;(a=[a]),&quot;number&quot;==typeof b&amp;&amp;(d=function(a,c){c[b]=q(a)}),c=0;c&lt;a.length;c++)ed[a[c]]=d}function R(a,b){Q(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function S(a,b,c){null!=b&amp;&amp;f(ed,a)&amp;&amp;ed[a](b,c._a,c,a)}function T(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function U(a){return this._months[a.month()]}function V(a){return this._monthsShort[a.month()]}function W(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12&gt;d;d++){if(e=h([2e3,d]),c&amp;&amp;!this._longMonthsParse[d]&amp;&amp;(this._longMonthsParse[d]=new RegExp(&quot;^&quot;+this.months(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;),this._shortMonthsParse[d]=new RegExp(&quot;^&quot;+this.monthsShort(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;)),c||this._monthsParse[d]||(f=&quot;^&quot;+this.months(e,&quot;&quot;)+&quot;|^&quot;+this.monthsShort(e,&quot;&quot;),this._monthsParse[d]=new RegExp(f.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),c&amp;&amp;&quot;MMMM&quot;===b&amp;&amp;this._longMonthsParse[d].test(a))return d;if(c&amp;&amp;&quot;MMM&quot;===b&amp;&amp;this._shortMonthsParse[d].test(a))return d;if(!c&amp;&amp;this._monthsParse[d].test(a))return d}}function X(a,b){var c;return&quot;string&quot;==typeof b&amp;&amp;(b=a.localeData().monthsParse(b),&quot;number&quot;!=typeof b)?a:(c=Math.min(a.date(),T(a.year(),b)),a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+&quot;Month&quot;](b,c),a)}function Y(b){return null!=b?(X(this,b),a.updateOffset(this,!0),this):D(this,&quot;Month&quot;)}function Z(){return T(this.year(),this.month())}function $(a){var b,c=a._a;return c&amp;&amp;-2===j(a).overflow&amp;&amp;(b=c[gd]&lt;0||c[gd]&gt;11?gd:c[hd]&lt;1||c[hd]&gt;T(c[fd],c[gd])?hd:c[id]&lt;0||c[id]&gt;24||24===c[id]&amp;&amp;(0!==c[jd]||0!==c[kd]||0!==c[ld])?id:c[jd]&lt;0||c[jd]&gt;59?jd:c[kd]&lt;0||c[kd]&gt;59?kd:c[ld]&lt;0||c[ld]&gt;999?ld:-1,j(a)._overflowDayOfYear&amp;&amp;(fd&gt;b||b&gt;hd)&amp;&amp;(b=hd),j(a).overflow=b),a}function _(b){a.suppressDeprecationWarnings===!1&amp;&amp;&quot;undefined&quot;!=typeof console&amp;&amp;console.warn&amp;&amp;console.warn(&quot;Deprecation warning: &quot;+b)}function aa(a,b){var c=!0;return g(function(){return c&amp;&amp;(_(a+&quot;\n&quot;+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function ba(a,b){od[a]||(_(b),od[a]=!0)}function ca(a){var b,c,d=a._i,e=pd.exec(d);if(e){for(j(a).iso=!0,b=0,c=qd.length;c&gt;b;b++)if(qd[b][1].exec(d)){a._f=qd[b][0];break}for(b=0,c=rd.length;c&gt;b;b++)if(rd[b][1].exec(d)){a._f+=(e[6]||&quot; &quot;)+rd[b][0];break}d.match(ad)&amp;&amp;(a._f+=&quot;Z&quot;),va(a)}else a._isValid=!1}function da(b){var c=sd.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ca(b),void(b._isValid===!1&amp;&amp;(delete b._isValid,a.createFromInputFallback(b))))}function ea(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970&gt;a&amp;&amp;h.setFullYear(a),h}function fa(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970&gt;a&amp;&amp;b.setUTCFullYear(a),b}function ga(a){return ha(a)?366:365}function ha(a){return a%4===0&amp;&amp;a%100!==0||a%400===0}function ia(){return ha(this.year())}function ja(a,b,c){var d,e=c-b,f=c-a.day();return f&gt;e&amp;&amp;(f-=7),e-7&gt;f&amp;&amp;(f+=7),d=Da(a).add(f,&quot;d&quot;),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ka(a){return ja(a,this._week.dow,this._week.doy).week}function la(){return this._week.dow}function ma(){return this._week.doy}function na(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function oa(a){var b=ja(this,1,4).week;return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function pa(a,b,c,d,e){var f,g=6+e-d,h=fa(a,0,1+g),i=h.getUTCDay();return e&gt;i&amp;&amp;(i+=7),c=null!=c?1*c:e,f=1+g+7*(b-1)-i+c,{year:f&gt;0?a:a-1,dayOfYear:f&gt;0?f:ga(a-1)+f}}function qa(a){var b=Math.round((this.clone().startOf(&quot;day&quot;)-this.clone().startOf(&quot;year&quot;))/864e5)+1;return null==a?b:this.add(a-b,&quot;d&quot;)}function ra(a,b,c){return null!=a?a:null!=b?b:c}function sa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ta(a){var b,c,d,e,f=[];if(!a._d){for(d=sa(a),a._w&amp;&amp;null==a._a[hd]&amp;&amp;null==a._a[gd]&amp;&amp;ua(a),a._dayOfYear&amp;&amp;(e=ra(a._a[fd],d[fd]),a._dayOfYear&gt;ga(e)&amp;&amp;(j(a)._overflowDayOfYear=!0),c=fa(e,0,a._dayOfYear),a._a[gd]=c.getUTCMonth(),a._a[hd]=c.getUTCDate()),b=0;3&gt;b&amp;&amp;null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7&gt;b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[id]&amp;&amp;0===a._a[jd]&amp;&amp;0===a._a[kd]&amp;&amp;0===a._a[ld]&amp;&amp;(a._nextDay=!0,a._a[id]=0),a._d=(a._useUTC?fa:ea).apply(null,f),null!=a._tzm&amp;&amp;a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&amp;&amp;(a._a[id]=24)}}function ua(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=ra(b.GG,a._a[fd],ja(Da(),1,4).year),d=ra(b.W,1),e=ra(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=ra(b.gg,a._a[fd],ja(Da(),f,g).year),d=ra(b.w,1),null!=b.d?(e=b.d,f&gt;e&amp;&amp;++d):e=null!=b.e?b.e+f:f),h=pa(c,d,e,g,f),a._a[fd]=h.year,a._dayOfYear=h.dayOfYear}function va(b){if(b._f===a.ISO_8601)return void ca(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=&quot;&quot;+b._i,i=h.length,k=0;for(e=L(b._f,b._locale).match(Nc)||[],c=0;c&lt;e.length;c++)f=e[c],d=(h.match(O(f,b))||[])[0],d&amp;&amp;(g=h.substr(0,h.indexOf(d)),g.length&gt;0&amp;&amp;j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Qc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),S(f,d,b)):b._strict&amp;&amp;!d&amp;&amp;j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length&gt;0&amp;&amp;j(b).unusedInput.push(h),j(b).bigHour===!0&amp;&amp;b._a[id]&lt;=12&amp;&amp;b._a[id]&gt;0&amp;&amp;(j(b).bigHour=void 0),b._a[id]=wa(b._locale,b._a[id],b._meridiem),ta(b),$(b)}function wa(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&amp;&amp;12&gt;b&amp;&amp;(b+=12),d||12!==b||(b=0),b):b}function xa(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e&lt;a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&amp;&amp;(b._useUTC=a._useUTC),b._f=a._f[e],va(b),k(b)&amp;&amp;(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d&gt;f)&amp;&amp;(d=f,c=b));g(a,c||b)}function ya(a){if(!a._d){var b=B(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ta(a)}}function za(a){var b=new n($(Aa(a)));return b._nextDay&amp;&amp;(b.add(1,&quot;d&quot;),b._nextDay=void 0),b}function Aa(a){var b=a._i,e=a._f;return a._locale=a._locale||y(a._l),null===b||void 0===e&amp;&amp;&quot;&quot;===b?l({nullInput:!0}):(&quot;string&quot;==typeof b&amp;&amp;(a._i=b=a._locale.preparse(b)),o(b)?new n($(b)):(c(e)?xa(a):e?va(a):d(b)?a._d=b:Ba(a),a))}function Ba(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):&quot;string&quot;==typeof f?da(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ta(b)):&quot;object&quot;==typeof f?ya(b):&quot;number&quot;==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ca(a,b,c,d,e){var f={};return&quot;boolean&quot;==typeof c&amp;&amp;(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,za(f)}function Da(a,b,c,d){return Ca(a,b,c,d,!1)}function Ea(a,b){var d,e;if(1===b.length&amp;&amp;c(b[0])&amp;&amp;(b=b[0]),!b.length)return Da();for(d=b[0],e=1;e&lt;b.length;++e)(!b[e].isValid()||b[e][a](d))&amp;&amp;(d=b[e]);return d}function Fa(){var a=[].slice.call(arguments,0);return Ea(&quot;isBefore&quot;,a)}function Ga(){var a=[].slice.call(arguments,0);return Ea(&quot;isAfter&quot;,a)}function Ha(a){var b=B(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=y(),this._bubble()}function Ia(a){return a instanceof Ha}function Ja(a,b){H(a,0,0,function(){var a=this.utcOffset(),c=&quot;+&quot;;return 0&gt;a&amp;&amp;(a=-a,c=&quot;-&quot;),c+G(~~(a/60),2)+b+G(~~a%60,2)})}function Ka(a){var b=(a||&quot;&quot;).match(ad)||[],c=b[b.length-1]||[],d=(c+&quot;&quot;).match(xd)||[&quot;-&quot;,0,0],e=+(60*d[1])+q(d[2]);return&quot;+&quot;===d[0]?e:-e}function La(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Da(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Da(b).local()}function Ma(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Na(b,c){var d,e=this._offset||0;return null!=b?(&quot;string&quot;==typeof b&amp;&amp;(b=Ka(b)),Math.abs(b)&lt;16&amp;&amp;(b=60*b),!this._isUTC&amp;&amp;c&amp;&amp;(d=Ma(this)),this._offset=b,this._isUTC=!0,null!=d&amp;&amp;this.add(d,&quot;m&quot;),e!==b&amp;&amp;(!c||this._changeInProgress?bb(this,Ya(b-e,&quot;m&quot;),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ma(this)}function Oa(a,b){return null!=a?(&quot;string&quot;!=typeof a&amp;&amp;(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Pa(a){return this.utcOffset(0,a)}function Qa(a){return this._isUTC&amp;&amp;(this.utcOffset(0,a),this._isUTC=!1,a&amp;&amp;this.subtract(Ma(this),&quot;m&quot;)),this}function Ra(){return this._tzm?this.utcOffset(this._tzm):&quot;string&quot;==typeof this._i&amp;&amp;this.utcOffset(Ka(this._i)),this}function Sa(a){return a=a?Da(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Ta(){return this.utcOffset()&gt;this.clone().month(0).utcOffset()||this.utcOffset()&gt;this.clone().month(5).utcOffset()}function Ua(){if(&quot;undefined&quot;!=typeof this._isDSTShifted)return this._isDSTShifted;var a={};if(m(a,this),a=Aa(a),a._a){var b=a._isUTC?h(a._a):Da(a._a);this._isDSTShifted=this.isValid()&amp;&amp;r(a._a,b.toArray())&gt;0}else this._isDSTShifted=!1;return this._isDSTShifted}function Va(){return!this._isUTC}function Wa(){return this._isUTC}function Xa(){return this._isUTC&amp;&amp;0===this._offset}function Ya(a,b){var c,d,e,g=a,h=null;return Ia(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:&quot;number&quot;==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=yd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:0,d:q(h[hd])*c,h:q(h[id])*c,m:q(h[jd])*c,s:q(h[kd])*c,ms:q(h[ld])*c}):(h=zd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:Za(h[2],c),M:Za(h[3],c),d:Za(h[4],c),h:Za(h[5],c),m:Za(h[6],c),s:Za(h[7],c),w:Za(h[8],c)}):null==g?g={}:&quot;object&quot;==typeof g&amp;&amp;(&quot;from&quot;in g||&quot;to&quot;in g)&amp;&amp;(e=_a(Da(g.from),Da(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ha(g),Ia(a)&amp;&amp;f(a,&quot;_locale&quot;)&amp;&amp;(d._locale=a._locale),d}function Za(a,b){var c=a&amp;&amp;parseFloat(a.replace(&quot;,&quot;,&quot;.&quot;));return(isNaN(c)?0:c)*b}function $a(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,&quot;M&quot;).isAfter(b)&amp;&amp;--c.months,c.milliseconds=+b-+a.clone().add(c.months,&quot;M&quot;),c}function _a(a,b){var c;return b=La(b,a),a.isBefore(b)?c=$a(a,b):(c=$a(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function ab(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(ba(b,&quot;moment().&quot;+b+&quot;(period, number) is deprecated. Please use moment().&quot;+b+&quot;(number, period).&quot;),f=c,c=d,d=f),c=&quot;string&quot;==typeof c?+c:c,e=Ya(c,d),bb(this,e,a),this}}function bb(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&amp;&amp;b._d.setTime(+b._d+f*d),g&amp;&amp;E(b,&quot;Date&quot;,D(b,&quot;Date&quot;)+g*d),h&amp;&amp;X(b,D(b,&quot;Month&quot;)+h*d),e&amp;&amp;a.updateOffset(b,g||h)}function cb(a,b){var c=a||Da(),d=La(c,this).startOf(&quot;day&quot;),e=this.diff(d,&quot;days&quot;,!0),f=-6&gt;e?&quot;sameElse&quot;:-1&gt;e?&quot;lastWeek&quot;:0&gt;e?&quot;lastDay&quot;:1&gt;e?&quot;sameDay&quot;:2&gt;e?&quot;nextDay&quot;:7&gt;e?&quot;nextWeek&quot;:&quot;sameElse&quot;;return this.format(b&amp;&amp;b[f]||this.localeData().calendar(f,this,Da(c)))}function db(){return new n(this)}function eb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this&gt;+a):(c=o(a)?+a:+Da(a),c&lt;+this.clone().startOf(b))}function fb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+a&gt;+this):(c=o(a)?+a:+Da(a),+this.clone().endOf(b)&lt;c)}function gb(a,b,c){return this.isAfter(a,c)&amp;&amp;this.isBefore(b,c)}function hb(a,b){var c;return b=A(b||&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this===+a):(c=+Da(a),+this.clone().startOf(b)&lt;=c&amp;&amp;c&lt;=+this.clone().endOf(b))}function ib(a,b,c){var d,e,f=La(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=A(b),&quot;year&quot;===b||&quot;month&quot;===b||&quot;quarter&quot;===b?(e=jb(this,f),&quot;quarter&quot;===b?e/=3:&quot;year&quot;===b&amp;&amp;(e/=12)):(d=this-f,e=&quot;second&quot;===b?d/1e3:&quot;minute&quot;===b?d/6e4:&quot;hour&quot;===b?d/36e5:&quot;day&quot;===b?(d-g)/864e5:&quot;week&quot;===b?(d-g)/6048e5:d),c?e:p(e)}function jb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,&quot;months&quot;);return 0&gt;b-f?(c=a.clone().add(e-1,&quot;months&quot;),d=(b-f)/(f-c)):(c=a.clone().add(e+1,&quot;months&quot;),d=(b-f)/(c-f)),-(e+d)}function kb(){return this.clone().locale(&quot;en&quot;).format(&quot;ddd MMM DD YYYY HH:mm:ss [GMT]ZZ&quot;)}function lb(){var a=this.clone().utc();return 0&lt;a.year()&amp;&amp;a.year()&lt;=9999?&quot;function&quot;==typeof Date.prototype.toISOString?this.toDate().toISOString():K(a,&quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;):K(a,&quot;YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;)}function mb(b){var c=K(this,b||a.defaultFormat);return this.localeData().postformat(c)}function nb(a,b){return this.isValid()?Ya({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.from(Da(),a)}function pb(a,b){return this.isValid()?Ya({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function qb(a){return this.to(Da(),a)}function rb(a){var b;return void 0===a?this._locale._abbr:(b=y(a),null!=b&amp;&amp;(this._locale=b),this)}function sb(){return this._locale}function tb(a){switch(a=A(a)){case&quot;year&quot;:this.month(0);case&quot;quarter&quot;:case&quot;month&quot;:this.date(1);case&quot;week&quot;:case&quot;isoWeek&quot;:case&quot;day&quot;:this.hours(0);case&quot;hour&quot;:this.minutes(0);case&quot;minute&quot;:this.seconds(0);case&quot;second&quot;:this.milliseconds(0)}return&quot;week&quot;===a&amp;&amp;this.weekday(0),&quot;isoWeek&quot;===a&amp;&amp;this.isoWeekday(1),&quot;quarter&quot;===a&amp;&amp;this.month(3*Math.floor(this.month()/3)),this}function ub(a){return a=A(a),void 0===a||&quot;millisecond&quot;===a?this:this.startOf(a).add(1,&quot;isoWeek&quot;===a?&quot;week&quot;:a).subtract(1,&quot;ms&quot;)}function vb(){return+this._d-6e4*(this._offset||0)}function wb(){return Math.floor(+this/1e3)}function xb(){return this._offset?new Date(+this):this._d}function yb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function zb(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Ab(){return k(this)}function Bb(){return g({},j(this))}function Cb(){return j(this).overflow}function Db(a,b){H(0,[a,a.length],0,b)}function Eb(a,b,c){return ja(Da([a,11,31+b-c]),b,c).week}function Fb(a){var b=ja(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Gb(a){var b=ja(this,1,4).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Hb(){return Eb(this.year(),1,4)}function Ib(){var a=this.localeData()._week;return Eb(this.year(),a.dow,a.doy)}function Jb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Kb(a,b){return&quot;string&quot;!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),&quot;number&quot;==typeof a?a:null):parseInt(a,10)}function Lb(a){return this._weekdays[a.day()]}function Mb(a){return this._weekdaysShort[a.day()]}function Nb(a){return this._weekdaysMin[a.day()]}function Ob(a){var b,c,d;for(this._weekdaysParse=this._weekdaysParse||[],b=0;7&gt;b;b++)if(this._weekdaysParse[b]||(c=Da([2e3,1]).day(b),d=&quot;^&quot;+this.weekdays(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysShort(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysMin(c,&quot;&quot;),this._weekdaysParse[b]=new RegExp(d.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),this._weekdaysParse[b].test(a))return b}function Pb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Kb(a,this.localeData()),this.add(a-b,&quot;d&quot;)):b}function Qb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,&quot;d&quot;)}function Rb(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Sb(a,b){H(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Tb(a,b){return b._meridiemParse}function Ub(a){return&quot;p&quot;===(a+&quot;&quot;).toLowerCase().charAt(0)}function Vb(a,b,c){return a&gt;11?c?&quot;pm&quot;:&quot;PM&quot;:c?&quot;am&quot;:&quot;AM&quot;}function Wb(a,b){b[ld]=q(1e3*(&quot;0.&quot;+a))}function Xb(){return this._isUTC?&quot;UTC&quot;:&quot;&quot;}function Yb(){return this._isUTC?&quot;Coordinated Universal Time&quot;:&quot;&quot;}function Zb(a){return Da(1e3*a)}function $b(){return Da.apply(null,arguments).parseZone()}function _b(a,b,c){var d=this._calendar[a];return&quot;function&quot;==typeof d?d.call(b,c):d}function ac(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function bc(){return this._invalidDate}function cc(a){return this._ordinal.replace(&quot;%d&quot;,a)}function dc(a){return a}function ec(a,b,c,d){var e=this._relativeTime[c];return&quot;function&quot;==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function fc(a,b){var c=this._relativeTime[a&gt;0?&quot;future&quot;:&quot;past&quot;];return&quot;function&quot;==typeof c?c(b):c.replace(/%s/i,b)}function gc(a){var b,c;for(c in a)b=a[c],&quot;function&quot;==typeof b?this[c]=b:this[&quot;_&quot;+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+&quot;|&quot;+/\d{1,2}/.source)}function hc(a,b,c,d){var e=y(),f=h().set(d,b);return e[c](f,a)}function ic(a,b,c,d,e){if(&quot;number&quot;==typeof a&amp;&amp;(b=a,a=void 0),a=a||&quot;&quot;,null!=b)return hc(a,b,c,e);var f,g=[];for(f=0;d&gt;f;f++)g[f]=hc(a,f,c,e);return g}function jc(a,b){return ic(a,b,&quot;months&quot;,12,&quot;month&quot;)}function kc(a,b){return ic(a,b,&quot;monthsShort&quot;,12,&quot;month&quot;)}function lc(a,b){return ic(a,b,&quot;weekdays&quot;,7,&quot;day&quot;)}function mc(a,b){return ic(a,b,&quot;weekdaysShort&quot;,7,&quot;day&quot;)}function nc(a,b){return ic(a,b,&quot;weekdaysMin&quot;,7,&quot;day&quot;)}function oc(){var a=this._data;return this._milliseconds=Wd(this._milliseconds),this._days=Wd(this._days),this._months=Wd(this._months),a.milliseconds=Wd(a.milliseconds),a.seconds=Wd(a.seconds),a.minutes=Wd(a.minutes),a.hours=Wd(a.hours),a.months=Wd(a.months),a.years=Wd(a.years),this}function pc(a,b,c,d){var e=Ya(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function qc(a,b){return pc(this,a,b,1)}function rc(a,b){return pc(this,a,b,-1)}function sc(a){return 0&gt;a?Math.floor(a):Math.ceil(a)}function tc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f&gt;=0&amp;&amp;g&gt;=0&amp;&amp;h&gt;=0||0&gt;=f&amp;&amp;0&gt;=g&amp;&amp;0&gt;=h||(f+=864e5*sc(vc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=p(f/1e3),i.seconds=a%60,b=p(a/60),i.minutes=b%60,c=p(b/60),i.hours=c%24,g+=p(c/24),e=p(uc(g)),h+=e,g-=sc(vc(e)),d=p(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function uc(a){return 4800*a/146097}function vc(a){return 146097*a/4800}function wc(a){var b,c,d=this._milliseconds;if(a=A(a),&quot;month&quot;===a||&quot;year&quot;===a)return b=this._days+d/864e5,c=this._months+uc(b),&quot;month&quot;===a?c:c/12;switch(b=this._days+Math.round(vc(this._months)),a){case&quot;week&quot;:return b/7+d/6048e5;case&quot;day&quot;:return b+d/864e5;case&quot;hour&quot;:return 24*b+d/36e5;case&quot;minute&quot;:return 1440*b+d/6e4;case&quot;second&quot;:return 86400*b+d/1e3;case&quot;millisecond&quot;:return Math.floor(864e5*b)+d;default:throw new Error(&quot;Unknown unit &quot;+a)}}function xc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*q(this._months/12)}function yc(a){return function(){return this.as(a)}}function zc(a){return a=A(a),this[a+&quot;s&quot;]()}function Ac(a){return function(){return this._data[a]}}function Bc(){return p(this.days()/7)}function Cc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Dc(a,b,c){var d=Ya(a).abs(),e=ke(d.as(&quot;s&quot;)),f=ke(d.as(&quot;m&quot;)),g=ke(d.as(&quot;h&quot;)),h=ke(d.as(&quot;d&quot;)),i=ke(d.as(&quot;M&quot;)),j=ke(d.as(&quot;y&quot;)),k=e&lt;le.s&amp;&amp;[&quot;s&quot;,e]||1===f&amp;&amp;[&quot;m&quot;]||f&lt;le.m&amp;&amp;[&quot;mm&quot;,f]||1===g&amp;&amp;[&quot;h&quot;]||g&lt;le.h&amp;&amp;[&quot;hh&quot;,g]||1===h&amp;&amp;[&quot;d&quot;]||h&lt;le.d&amp;&amp;[&quot;dd&quot;,h]||1===i&amp;&amp;[&quot;M&quot;]||i&lt;le.M&amp;&amp;[&quot;MM&quot;,i]||1===j&amp;&amp;[&quot;y&quot;]||[&quot;yy&quot;,j];return k[2]=b,k[3]=+a&gt;0,k[4]=c,Cc.apply(null,k)}function Ec(a,b){return void 0===le[a]?!1:void 0===b?le[a]:(le[a]=b,!0)}function Fc(a){var b=this.localeData(),c=Dc(this,!a,b);return a&amp;&amp;(c=b.pastFuture(+this,c)),b.postformat(c)}function Gc(){var a,b,c,d=me(this._milliseconds)/1e3,e=me(this._days),f=me(this._months);a=p(d/60),b=p(a/60),d%=60,a%=60,c=p(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0&gt;m?&quot;-&quot;:&quot;&quot;)+&quot;P&quot;+(g?g+&quot;Y&quot;:&quot;&quot;)+(h?h+&quot;M&quot;:&quot;&quot;)+(i?i+&quot;D&quot;:&quot;&quot;)+(j||k||l?&quot;T&quot;:&quot;&quot;)+(j?j+&quot;H&quot;:&quot;&quot;)+(k?k+&quot;M&quot;:&quot;&quot;)+(l?l+&quot;S&quot;:&quot;&quot;):&quot;P0D&quot;}var Hc,Ic,Jc=a.momentProperties=[],Kc=!1,Lc={},Mc={},Nc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Pc={},Qc={},Rc=/\d/,Sc=/\d\d/,Tc=/\d{3}/,Uc=/\d{4}/,Vc=/[+-]?\d{6}/,Wc=/\d\d?/,Xc=/\d{1,3}/,Yc=/\d{1,4}/,Zc=/[+-]?\d{1,6}/,$c=/\d+/,_c=/[+-]?\d+/,ad=/Z|[+-]\d\d:?\d\d/gi,bd=/[+-]?\d+(\.\d{1,3})?/,cd=/[0-9]*[&apos;a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,dd={},ed={},fd=0,gd=1,hd=2,id=3,jd=4,kd=5,ld=6;H(&quot;M&quot;,[&quot;MM&quot;,2],&quot;Mo&quot;,function(){return this.month()+1}),H(&quot;MMM&quot;,0,0,function(a){return this.localeData().monthsShort(this,a)}),H(&quot;MMMM&quot;,0,0,function(a){return this.localeData().months(this,a)}),z(&quot;month&quot;,&quot;M&quot;),N(&quot;M&quot;,Wc),N(&quot;MM&quot;,Wc,Sc),N(&quot;MMM&quot;,cd),N(&quot;MMMM&quot;,cd),Q([&quot;M&quot;,&quot;MM&quot;],function(a,b){b[gd]=q(a)-1}),Q([&quot;MMM&quot;,&quot;MMMM&quot;],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[gd]=e:j(c).invalidMonth=a});var md=&quot;January_February_March_April_May_June_July_August_September_October_November_December&quot;.split(&quot;_&quot;),nd=&quot;Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec&quot;.split(&quot;_&quot;),od={};a.suppressDeprecationWarnings=!1;var pd=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,qd=[[&quot;YYYYYY-MM-DD&quot;,/[+-]\d{6}-\d{2}-\d{2}/],[&quot;YYYY-MM-DD&quot;,/\d{4}-\d{2}-\d{2}/],[&quot;GGGG-[W]WW-E&quot;,/\d{4}-W\d{2}-\d/],[&quot;GGGG-[W]WW&quot;,/\d{4}-W\d{2}/],[&quot;YYYY-DDD&quot;,/\d{4}-\d{3}/]],rd=[[&quot;HH:mm:ss.SSSS&quot;,/(T| )\d\d:\d\d:\d\d\.\d+/],[&quot;HH:mm:ss&quot;,/(T| )\d\d:\d\d:\d\d/],[&quot;HH:mm&quot;,/(T| )\d\d:\d\d/],[&quot;HH&quot;,/(T| )\d\d/]],sd=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=aa(&quot;moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.&quot;,function(a){a._d=new Date(a._i+(a._useUTC?&quot; UTC&quot;:&quot;&quot;))}),H(0,[&quot;YY&quot;,2],0,function(){return this.year()%100}),H(0,[&quot;YYYY&quot;,4],0,&quot;year&quot;),H(0,[&quot;YYYYY&quot;,5],0,&quot;year&quot;),H(0,[&quot;YYYYYY&quot;,6,!0],0,&quot;year&quot;),z(&quot;year&quot;,&quot;y&quot;),N(&quot;Y&quot;,_c),N(&quot;YY&quot;,Wc,Sc),N(&quot;YYYY&quot;,Yc,Uc),N(&quot;YYYYY&quot;,Zc,Vc),N(&quot;YYYYYY&quot;,Zc,Vc),Q([&quot;YYYYY&quot;,&quot;YYYYYY&quot;],fd),Q(&quot;YYYY&quot;,function(b,c){c[fd]=2===b.length?a.parseTwoDigitYear(b):q(b)}),Q(&quot;YY&quot;,function(b,c){c[fd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return q(a)+(q(a)&gt;68?1900:2e3)};var td=C(&quot;FullYear&quot;,!1);H(&quot;w&quot;,[&quot;ww&quot;,2],&quot;wo&quot;,&quot;week&quot;),H(&quot;W&quot;,[&quot;WW&quot;,2],&quot;Wo&quot;,&quot;isoWeek&quot;),z(&quot;week&quot;,&quot;w&quot;),z(&quot;isoWeek&quot;,&quot;W&quot;),N(&quot;w&quot;,Wc),N(&quot;ww&quot;,Wc,Sc),N(&quot;W&quot;,Wc),N(&quot;WW&quot;,Wc,Sc),R([&quot;w&quot;,&quot;ww&quot;,&quot;W&quot;,&quot;WW&quot;],function(a,b,c,d){b[d.substr(0,1)]=q(a)});var ud={dow:0,doy:6};H(&quot;DDD&quot;,[&quot;DDDD&quot;,3],&quot;DDDo&quot;,&quot;dayOfYear&quot;),z(&quot;dayOfYear&quot;,&quot;DDD&quot;),N(&quot;DDD&quot;,Xc),N(&quot;DDDD&quot;,Tc),Q([&quot;DDD&quot;,&quot;DDDD&quot;],function(a,b,c){c._dayOfYear=q(a)}),a.ISO_8601=function(){};var vd=aa(&quot;moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return this&gt;a?this:a}),wd=aa(&quot;moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return a&gt;this?this:a});Ja(&quot;Z&quot;,&quot;:&quot;),Ja(&quot;ZZ&quot;,&quot;&quot;),N(&quot;Z&quot;,ad),N(&quot;ZZ&quot;,ad),Q([&quot;Z&quot;,&quot;ZZ&quot;],function(a,b,c){c._useUTC=!0,c._tzm=Ka(a)});var xd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var yd=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,zd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Ya.fn=Ha.prototype;var Ad=ab(1,&quot;add&quot;),Bd=ab(-1,&quot;subtract&quot;);a.defaultFormat=&quot;YYYY-MM-DDTHH:mm:ssZ&quot;;var Cd=aa(&quot;moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.&quot;,function(a){return void 0===a?this.localeData():this.locale(a)});H(0,[&quot;gg&quot;,2],0,function(){return this.weekYear()%100}),H(0,[&quot;GG&quot;,2],0,function(){return this.isoWeekYear()%100}),Db(&quot;gggg&quot;,&quot;weekYear&quot;),Db(&quot;ggggg&quot;,&quot;weekYear&quot;),Db(&quot;GGGG&quot;,&quot;isoWeekYear&quot;),Db(&quot;GGGGG&quot;,&quot;isoWeekYear&quot;),z(&quot;weekYear&quot;,&quot;gg&quot;),z(&quot;isoWeekYear&quot;,&quot;GG&quot;),N(&quot;G&quot;,_c),N(&quot;g&quot;,_c),N(&quot;GG&quot;,Wc,Sc),N(&quot;gg&quot;,Wc,Sc),N(&quot;GGGG&quot;,Yc,Uc),N(&quot;gggg&quot;,Yc,Uc),N(&quot;GGGGG&quot;,Zc,Vc),N(&quot;ggggg&quot;,Zc,Vc),R([&quot;gggg&quot;,&quot;ggggg&quot;,&quot;GGGG&quot;,&quot;GGGGG&quot;],function(a,b,c,d){b[d.substr(0,2)]=q(a)}),R([&quot;gg&quot;,&quot;GG&quot;],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),H(&quot;Q&quot;,0,0,&quot;quarter&quot;),z(&quot;quarter&quot;,&quot;Q&quot;),N(&quot;Q&quot;,Rc),Q(&quot;Q&quot;,function(a,b){b[gd]=3*(q(a)-1)}),H(&quot;D&quot;,[&quot;DD&quot;,2],&quot;Do&quot;,&quot;date&quot;),z(&quot;date&quot;,&quot;D&quot;),N(&quot;D&quot;,Wc),N(&quot;DD&quot;,Wc,Sc),N(&quot;Do&quot;,function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),Q([&quot;D&quot;,&quot;DD&quot;],hd),Q(&quot;Do&quot;,function(a,b){b[hd]=q(a.match(Wc)[0],10)});var Dd=C(&quot;Date&quot;,!0);H(&quot;d&quot;,0,&quot;do&quot;,&quot;day&quot;),H(&quot;dd&quot;,0,0,function(a){return this.localeData().weekdaysMin(this,a)}),H(&quot;ddd&quot;,0,0,function(a){return this.localeData().weekdaysShort(this,a)}),H(&quot;dddd&quot;,0,0,function(a){return this.localeData().weekdays(this,a)}),H(&quot;e&quot;,0,0,&quot;weekday&quot;),H(&quot;E&quot;,0,0,&quot;isoWeekday&quot;),z(&quot;day&quot;,&quot;d&quot;),z(&quot;weekday&quot;,&quot;e&quot;),z(&quot;isoWeekday&quot;,&quot;E&quot;),N(&quot;d&quot;,Wc),N(&quot;e&quot;,Wc),N(&quot;E&quot;,Wc),N(&quot;dd&quot;,cd),N(&quot;ddd&quot;,cd),N(&quot;dddd&quot;,cd),R([&quot;dd&quot;,&quot;ddd&quot;,&quot;dddd&quot;],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),R([&quot;d&quot;,&quot;e&quot;,&quot;E&quot;],function(a,b,c,d){b[d]=q(a)});var Ed=&quot;Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday&quot;.split(&quot;_&quot;),Fd=&quot;Sun_Mon_Tue_Wed_Thu_Fri_Sat&quot;.split(&quot;_&quot;),Gd=&quot;Su_Mo_Tu_We_Th_Fr_Sa&quot;.split(&quot;_&quot;);H(&quot;H&quot;,[&quot;HH&quot;,2],0,&quot;hour&quot;),H(&quot;h&quot;,[&quot;hh&quot;,2],0,function(){return this.hours()%12||12}),Sb(&quot;a&quot;,!0),Sb(&quot;A&quot;,!1),z(&quot;hour&quot;,&quot;h&quot;),N(&quot;a&quot;,Tb),N(&quot;A&quot;,Tb),N(&quot;H&quot;,Wc),N(&quot;h&quot;,Wc),N(&quot;HH&quot;,Wc,Sc),N(&quot;hh&quot;,Wc,Sc),Q([&quot;H&quot;,&quot;HH&quot;],id),Q([&quot;a&quot;,&quot;A&quot;],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),Q([&quot;h&quot;,&quot;hh&quot;],function(a,b,c){b[id]=q(a),j(c).bigHour=!0});var Hd=/[ap]\.?m?\.?/i,Id=C(&quot;Hours&quot;,!0);H(&quot;m&quot;,[&quot;mm&quot;,2],0,&quot;minute&quot;),z(&quot;minute&quot;,&quot;m&quot;),N(&quot;m&quot;,Wc),N(&quot;mm&quot;,Wc,Sc),Q([&quot;m&quot;,&quot;mm&quot;],jd);var Jd=C(&quot;Minutes&quot;,!1);H(&quot;s&quot;,[&quot;ss&quot;,2],0,&quot;second&quot;),z(&quot;second&quot;,&quot;s&quot;),N(&quot;s&quot;,Wc),N(&quot;ss&quot;,Wc,Sc),Q([&quot;s&quot;,&quot;ss&quot;],kd);var Kd=C(&quot;Seconds&quot;,!1);H(&quot;S&quot;,0,0,function(){return~~(this.millisecond()/100)}),H(0,[&quot;SS&quot;,2],0,function(){return~~(this.millisecond()/10)}),H(0,[&quot;SSS&quot;,3],0,&quot;millisecond&quot;),H(0,[&quot;SSSS&quot;,4],0,function(){return 10*this.millisecond()}),H(0,[&quot;SSSSS&quot;,5],0,function(){return 100*this.millisecond()}),H(0,[&quot;SSSSSS&quot;,6],0,function(){return 1e3*this.millisecond()}),H(0,[&quot;SSSSSSS&quot;,7],0,function(){return 1e4*this.millisecond()}),H(0,[&quot;SSSSSSSS&quot;,8],0,function(){return 1e5*this.millisecond()}),H(0,[&quot;SSSSSSSSS&quot;,9],0,function(){return 1e6*this.millisecond()}),z(&quot;millisecond&quot;,&quot;ms&quot;),N(&quot;S&quot;,Xc,Rc),N(&quot;SS&quot;,Xc,Sc),N(&quot;SSS&quot;,Xc,Tc);var Ld;for(Ld=&quot;SSSS&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)N(Ld,$c);for(Ld=&quot;S&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)Q(Ld,Wb);var Md=C(&quot;Milliseconds&quot;,!1);H(&quot;z&quot;,0,0,&quot;zoneAbbr&quot;),H(&quot;zz&quot;,0,0,&quot;zoneName&quot;);var Nd=n.prototype;Nd.add=Ad,Nd.calendar=cb,Nd.clone=db,Nd.diff=ib,Nd.endOf=ub,Nd.format=mb,Nd.from=nb,Nd.fromNow=ob,Nd.to=pb,Nd.toNow=qb,Nd.get=F,Nd.invalidAt=Cb,Nd.isAfter=eb,Nd.isBefore=fb,Nd.isBetween=gb,Nd.isSame=hb,Nd.isValid=Ab,Nd.lang=Cd,Nd.locale=rb,Nd.localeData=sb,Nd.max=wd,Nd.min=vd,Nd.parsingFlags=Bb,Nd.set=F,Nd.startOf=tb,Nd.subtract=Bd,Nd.toArray=yb,Nd.toObject=zb,Nd.toDate=xb,Nd.toISOString=lb,Nd.toJSON=lb,Nd.toString=kb,Nd.unix=wb,Nd.valueOf=vb,Nd.year=td,Nd.isLeapYear=ia,Nd.weekYear=Fb,Nd.isoWeekYear=Gb,Nd.quarter=Nd.quarters=Jb,Nd.month=Y,Nd.daysInMonth=Z,Nd.week=Nd.weeks=na,Nd.isoWeek=Nd.isoWeeks=oa,Nd.weeksInYear=Ib,Nd.isoWeeksInYear=Hb,Nd.date=Dd,Nd.day=Nd.days=Pb,Nd.weekday=Qb,Nd.isoWeekday=Rb,Nd.dayOfYear=qa,Nd.hour=Nd.hours=Id,Nd.minute=Nd.minutes=Jd,Nd.second=Nd.seconds=Kd,
Nd.millisecond=Nd.milliseconds=Md,Nd.utcOffset=Na,Nd.utc=Pa,Nd.local=Qa,Nd.parseZone=Ra,Nd.hasAlignedHourOffset=Sa,Nd.isDST=Ta,Nd.isDSTShifted=Ua,Nd.isLocal=Va,Nd.isUtcOffset=Wa,Nd.isUtc=Xa,Nd.isUTC=Xa,Nd.zoneAbbr=Xb,Nd.zoneName=Yb,Nd.dates=aa(&quot;dates accessor is deprecated. Use date instead.&quot;,Dd),Nd.months=aa(&quot;months accessor is deprecated. Use month instead&quot;,Y),Nd.years=aa(&quot;years accessor is deprecated. Use year instead&quot;,td),Nd.zone=aa(&quot;moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779&quot;,Oa);var Od=Nd,Pd={sameDay:&quot;[Today at] LT&quot;,nextDay:&quot;[Tomorrow at] LT&quot;,nextWeek:&quot;dddd [at] LT&quot;,lastDay:&quot;[Yesterday at] LT&quot;,lastWeek:&quot;[Last] dddd [at] LT&quot;,sameElse:&quot;L&quot;},Qd={LTS:&quot;h:mm:ss A&quot;,LT:&quot;h:mm A&quot;,L:&quot;MM/DD/YYYY&quot;,LL:&quot;MMMM D, YYYY&quot;,LLL:&quot;MMMM D, YYYY h:mm A&quot;,LLLL:&quot;dddd, MMMM D, YYYY h:mm A&quot;},Rd=&quot;Invalid date&quot;,Sd=&quot;%d&quot;,Td=/\d{1,2}/,Ud={future:&quot;in %s&quot;,past:&quot;%s ago&quot;,s:&quot;a few seconds&quot;,m:&quot;a minute&quot;,mm:&quot;%d minutes&quot;,h:&quot;an hour&quot;,hh:&quot;%d hours&quot;,d:&quot;a day&quot;,dd:&quot;%d days&quot;,M:&quot;a month&quot;,MM:&quot;%d months&quot;,y:&quot;a year&quot;,yy:&quot;%d years&quot;},Vd=s.prototype;Vd._calendar=Pd,Vd.calendar=_b,Vd._longDateFormat=Qd,Vd.longDateFormat=ac,Vd._invalidDate=Rd,Vd.invalidDate=bc,Vd._ordinal=Sd,Vd.ordinal=cc,Vd._ordinalParse=Td,Vd.preparse=dc,Vd.postformat=dc,Vd._relativeTime=Ud,Vd.relativeTime=ec,Vd.pastFuture=fc,Vd.set=gc,Vd.months=U,Vd._months=md,Vd.monthsShort=V,Vd._monthsShort=nd,Vd.monthsParse=W,Vd.week=ka,Vd._week=ud,Vd.firstDayOfYear=ma,Vd.firstDayOfWeek=la,Vd.weekdays=Lb,Vd._weekdays=Ed,Vd.weekdaysMin=Nb,Vd._weekdaysMin=Gd,Vd.weekdaysShort=Mb,Vd._weekdaysShort=Fd,Vd.weekdaysParse=Ob,Vd.isPM=Ub,Vd._meridiemParse=Hd,Vd.meridiem=Vb,w(&quot;en&quot;,{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===q(a%100/10)?&quot;th&quot;:1===b?&quot;st&quot;:2===b?&quot;nd&quot;:3===b?&quot;rd&quot;:&quot;th&quot;;return a+c}}),a.lang=aa(&quot;moment.lang is deprecated. Use moment.locale instead.&quot;,w),a.langData=aa(&quot;moment.langData is deprecated. Use moment.localeData instead.&quot;,y);var Wd=Math.abs,Xd=yc(&quot;ms&quot;),Yd=yc(&quot;s&quot;),Zd=yc(&quot;m&quot;),$d=yc(&quot;h&quot;),_d=yc(&quot;d&quot;),ae=yc(&quot;w&quot;),be=yc(&quot;M&quot;),ce=yc(&quot;y&quot;),de=Ac(&quot;milliseconds&quot;),ee=Ac(&quot;seconds&quot;),fe=Ac(&quot;minutes&quot;),ge=Ac(&quot;hours&quot;),he=Ac(&quot;days&quot;),ie=Ac(&quot;months&quot;),je=Ac(&quot;years&quot;),ke=Math.round,le={s:45,m:45,h:22,d:26,M:11},me=Math.abs,ne=Ha.prototype;ne.abs=oc,ne.add=qc,ne.subtract=rc,ne.as=wc,ne.asMilliseconds=Xd,ne.asSeconds=Yd,ne.asMinutes=Zd,ne.asHours=$d,ne.asDays=_d,ne.asWeeks=ae,ne.asMonths=be,ne.asYears=ce,ne.valueOf=xc,ne._bubble=tc,ne.get=zc,ne.milliseconds=de,ne.seconds=ee,ne.minutes=fe,ne.hours=ge,ne.days=he,ne.weeks=Bc,ne.months=ie,ne.years=je,ne.humanize=Fc,ne.toISOString=Gc,ne.toString=Gc,ne.toJSON=Gc,ne.locale=rb,ne.localeData=sb,ne.toIsoString=aa(&quot;toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)&quot;,Gc),ne.lang=Cd,H(&quot;X&quot;,0,0,&quot;unix&quot;),H(&quot;x&quot;,0,0,&quot;valueOf&quot;),N(&quot;x&quot;,_c),N(&quot;X&quot;,bd),Q(&quot;X&quot;,function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),Q(&quot;x&quot;,function(a,b,c){c._d=new Date(q(a))}),a.version=&quot;2.10.6&quot;,b(Da),a.fn=Od,a.min=Fa,a.max=Ga,a.utc=h,a.unix=Zb,a.months=jc,a.isDate=d,a.locale=w,a.invalid=l,a.duration=Ya,a.isMoment=o,a.weekdays=lc,a.parseZone=$b,a.localeData=y,a.isDuration=Ia,a.monthsShort=kc,a.weekdaysMin=nc,a.defineLocale=x,a.weekdaysShort=mc,a.normalizeUnits=A,a.relativeTimeThreshold=Ec;var oe=a;return oe});</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2c64669f-f07e-4365-bf64-c559ace83004</id>
                <name>stopOnErrorCount</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122375</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to Stop a channel if it reaches a particular error count. 
	Also sends an alert message via another channel (this sends a sms via our monitoring system).

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function stopOnErrorCount(cid, errorCount) {
	var channelStatisticsController = Packages.com.mirth.connect.server.controllers.ChannelStatisticsController.getInstance();
	var channelStatusController = Packages.com.mirth.connect.server.controllers.ChannelStatusController.getInstance();
	var stats = channelStatisticsController.getStatistics(cid);
	// var numOfQueued = stats.queued;
	var numOfErrors = stats.error;

	if(numOfErrors &gt; errorCount )
	{
		//Stop Me
		channelStatusController.stopChannel(cid);
		//Alert msg sent to _SVHALERT channel
		var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
		var channelName = channelController.getDeployedChannelById(cid).getName();
		var alertmsg = &apos;mirth01 mirth_channel_status codeTemplate_stopOnErrorCount 0 &apos; +
					   &apos;channel &apos; + channelName + &apos; stopped&apos;;
		router.routeMessage(&apos;_SVHALERT&apos;, alertmsg);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>08044817-3504-4fc1-80ee-404870195151</id>
                <name>test</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122745</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.
	searchword
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function testfunc(arg1) {
	return arg1;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
            <name>WebPT-Mirth</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121602</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
                <name>Fix HL7v2 Node Order</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121804</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>35f4c250-08b4-4e42-8e60-f85aa98dfe50</id>
            <name>WebPT-Translations</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939924</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>be8f057b-2640-4613-b2e7-83326c59169c</id>
                <name>AddZeros</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122826</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function addZeroes(num) {
   return num.toLocaleString(&quot;en&quot;, {useGrouping: false, minimumFractionDigits: 2})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>51913864-7702-489a-b7c6-54992c12b19d</id>
                <name>FindLookupValueWithDefault</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122218</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithDefault ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        //obj.LeftValue = LeftValue;
        //obj.RightValue1 = DefaultValue1;
        //obj.RightValue2   = DefaultValue2; 
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);
            var result = pattern.test(LeftValue );

            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>c276be9f-c8f1-4dea-8df0-e000c6745271</id>
                <name>FindLookupValueWithInsuranceId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122080</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithInsuranceId ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);             
            var result = pattern.test(LeftValue );
	
            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7d746da2-58c6-44eb-ad5c-c5bfd0a0c537</id>
                <name>UseExternalProblemID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122349</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalProblemID() {

if ([&apos;2804&apos;, &apos;2822&apos;].indexOf($(&apos;tenantId&apos;) + &apos;&apos;) &gt; -1) {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitexternalproblemid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitaccountnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>07730e85-7f30-4ddf-90a4-78183c896ab5</id>
                <name>UseExternalVisitID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122192</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalVisitID() {
	
if ($(&apos;tenantId&apos;)  == &apos;9999&apos; ) {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitexternalvisitid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitvisitnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
        <channelTags>
          <channelTag>
            <id>dc204463-f36f-4c34-889a-b63430174228</id>
            <name>CCD</name>
            <channelIds>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>15708463-af53-428c-88f5-16351dd49b2e</string>
              <string>82ac96ff-a32d-42b2-81a4-80ebda4783db</string>
              <string>03bc65a0-25b4-48f5-8455-7e58e71b1446</string>
              <string>24504c80-a7ef-496d-bca0-c25ce27f4d19</string>
              <string>2dbdcefd-11b5-42c8-a365-05038df92fef</string>
              <string>06bd4ce9-2338-4c78-86fb-2e04ff9f9e08</string>
              <string>e882ff76-1127-4e35-838c-93cbc2655ef9</string>
              <string>ce7c2eec-c71c-4d86-a375-98e965e52126</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>280d822c-1479-4fb6-9e2a-b7267e540c63</string>
              <string>197d7939-edb9-4dc7-af2d-ab91ae9023ad</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>2f6cd9fb-90e2-4121-b05a-cad72d278cc3</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>0edf321a-b712-47e2-972a-03f2c4c8f0ac</string>
            </channelIds>
            <backgroundColor>
              <red>0</red>
              <green>255</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>d6bc07f2-5b26-49f0-aef2-71579733ace3</id>
            <name>HTML</name>
            <channelIds>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
            </channelIds>
            <backgroundColor>
              <red>128</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>7a4cc169-17b5-41be-8f3a-bdb34e133a17</id>
            <name>XML</name>
            <channelIds>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
        </channelTags>
      </exportData>
    </channel>
    <channel version="4.0.0">
      <id>631f9a02-6b74-4ecd-9582-221b98a0450e</id>
      <nextMetaDataId>4</nextMetaDataId>
      <name>Volume Test - CSV to HL7 RDE Interface</name>
      <description></description>
      <revision>10</revision>
      <sourceConnector version="4.0.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.file.FileReceiverProperties" version="4.0.0">
          <pluginProperties/>
          <pollConnectorProperties version="4.0.0">
            <pollingType>INTERVAL</pollingType>
            <pollOnStart>false</pollOnStart>
            <pollingFrequency>5000</pollingFrequency>
            <pollingHour>0</pollingHour>
            <pollingMinute>0</pollingMinute>
            <cronJobs/>
            <pollConnectorPropertiesAdvanced>
              <weekly>true</weekly>
              <inactiveDays>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
              </inactiveDays>
              <dayOfMonth>1</dayOfMonth>
              <allDay>true</allDay>
              <startingHour>8</startingHour>
              <startingMinute>0</startingMinute>
              <endingHour>17</endingHour>
              <endingMinute>0</endingMinute>
            </pollConnectorPropertiesAdvanced>
          </pollConnectorProperties>
          <sourceConnectorProperties version="4.0.0">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>true</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <scheme>FILE</scheme>
          <host>C:/HL7/IntegrateIT.us/in/rde</host>
          <fileFilter>*.csv</fileFilter>
          <regex>false</regex>
          <directoryRecursion>false</directoryRecursion>
          <ignoreDot>true</ignoreDot>
          <anonymous>true</anonymous>
          <username>anonymous</username>
          <password>anonymous</password>
          <timeout>10000</timeout>
          <secure>true</secure>
          <passive>true</passive>
          <validateConnection>true</validateConnection>
          <afterProcessingAction>DELETE</afterProcessingAction>
          <moveToDirectory></moveToDirectory>
          <moveToFileName></moveToFileName>
          <errorReadingAction>NONE</errorReadingAction>
          <errorResponseAction>AFTER_PROCESSING</errorResponseAction>
          <errorMoveToDirectory></errorMoveToDirectory>
          <errorMoveToFileName></errorMoveToFileName>
          <checkFileAge>true</checkFileAge>
          <fileAge>1000</fileAge>
          <fileSizeMinimum>0</fileSizeMinimum>
          <fileSizeMaximum></fileSizeMaximum>
          <ignoreFileSizeMaximum>true</ignoreFileSizeMaximum>
          <sortBy>date</sortBy>
          <binary>false</binary>
          <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        </properties>
        <transformer version="4.0.0">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
              <name>Populate RDE msgs from CSV file</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>// 2022-06-10 JER - Added field: batchId from column14

var date = new Date();
// var ts=new Timestamp(date.getTime());
var today = new Date();
var dd = String(today.getDate()).padStart(2,&apos;0&apos;);
var mm = String(today.getMonth() + 1).padStart(2,&apos;0&apos;); //January is 0!
var yyyy = today.getFullYear();
var hh= String(today.getHours()).padStart(2,&apos;0&apos;);
var MM= String(today.getMinutes()).padStart(2,&apos;0&apos;); 
var ss= String(today.getSeconds()).padStart(2,&apos;0&apos;);
var ts= yyyy+mm+dd+hh+MM+ss;
// message datetime
tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;]= ts;
// event recorded datetime
tmp[&apos;EVN&apos;][&apos;EVN.2&apos;][&apos;EVN.2.1&apos;]= ts;
// 2022-06-10 JER - Added field: batchId from column14 - record batch number (e.g. BATCH06301, etc.)
channelMap.put(&apos;batchId&apos;,msg[&apos;row1&apos;][&apos;column14&apos;].toString());
tmp[&apos;EVN&apos;][&apos;EVN.4&apos;][&apos;EVN.4.1&apos;]= msg[&apos;row1&apos;][&apos;column14&apos;].toString();
// event type
channelMap.put(&apos;eventType&apos;,tmp[&apos;EVN&apos;][&apos;EVN.1&apos;][&apos;EVN.1.1&apos;].toString());
// patientId
tmp[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;]= msg[&apos;row1&apos;][&apos;column1&apos;].toString();
channelMap.put(&apos;patientId&apos;,msg[&apos;row1&apos;][&apos;column1&apos;].toString());
// sending Application
tmp[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;]= $gc(&apos;gcSendingApplication&apos;);
// sending Facility
tmp[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;]= $gc(&apos;gcSendingFacility&apos;);
// receiving Application
tmp[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;]= $gc(&apos;gcReceivingApplication&apos;);
// receiving Facility
tmp[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;]= $gc(&apos;gcReceivingFacility&apos;);
// msgCtrlId
tmp[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]= msg[&apos;row1&apos;][&apos;column1&apos;].toString()+&quot;.&quot;+ts;
channelMap.put(&apos;msgCtrlId&apos;,msg[&apos;row1&apos;][&apos;column1&apos;].toString()+&quot;.&quot;+ts);
// firstName
tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;]= msg[&apos;row1&apos;][&apos;column2&apos;].toString();
// firstName
tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;]= msg[&apos;row1&apos;][&apos;column3&apos;].toString();
// middleName
tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;]= msg[&apos;row1&apos;][&apos;column4&apos;].toString();
// dateOfBirth
tmp[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;]= msg[&apos;row1&apos;][&apos;column5&apos;].toString();
// gender
tmp[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;]= msg[&apos;row1&apos;][&apos;column6&apos;].toString();
// local assigningAuthority
tmp[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;]= msg[&apos;row1&apos;][&apos;column7&apos;].toString();
channelMap.put(&apos;assigningAuthority&apos;,msg[&apos;row1&apos;][&apos;column7&apos;].toString());
// accountNumber
tmp[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;]= msg[&apos;row1&apos;][&apos;column13&apos;].toString();
// sendingFacility
tmp[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;]= msg[&apos;row1&apos;][&apos;column7&apos;].toString();
// unit
tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;]= msg[&apos;row1&apos;][&apos;column8&apos;].toString();
// room
tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;]= msg[&apos;row1&apos;][&apos;column9&apos;].toString();
// bed
tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.3&apos;]= msg[&apos;row1&apos;][&apos;column11&apos;].toString();
// deviceId
tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.9&apos;]= msg[&apos;row1&apos;][&apos;column12&apos;].toString();
channelMap.put(&apos;deviceId&apos;,msg[&apos;row1&apos;][&apos;column12&apos;].toString());

// admissionDateTime
// event recorded datetime
tmp[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;]= ts;</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
              <name>Get Global Channel Map Varibles for Local Instances Variables</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>/* 
Name: 	Get Global Channel Map Varibles for Local Instances Variables
Desc: 	Get Global Channel Map Variables for Local Channel Map variable instances
Created:	2020-12-01 
Modified:
2020-11-23 JER - Modified to match the provided HL7 msg file
*/

var scriptName= &quot;Get Global Channel Map Variables for Local Channel&quot;;
var debug= 0;

if(debug&gt;0) { 
	logger.error(&apos;DEBUG::&apos;+scriptName+&apos; patientIdPrefix: &apos;+globalMap.get(&apos;gPatientIdPrefix&apos;));
}

var patientIdPrefix= channelMap.put(&apos;lPatientIdPrefix&apos;,globalMap.get(&apos;gPatientIdPrefix&apos;));
var patientLastName= channelMap.put(&apos;lPatientLastName&apos;,globalMap.get(&apos;gPatientLastName&apos;));
var patientFirstName= channelMap.put(&apos;lPatientFirstName&apos;,globalMap.get(&apos;gPatientFirstName&apos;));
var patientDateOfBirth= channelMap.put(&apos;lPatientDateOfBirth&apos;,globalMap.get(&apos;gPatientDateOfBirth&apos;));
var patientGender= channelMap.put(&apos;lPatientGender&apos;,globalMap.get(&apos;gPatientGender&apos;));</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64">TVNIfF5+XCZ8UVMxUEhBUk1BQ1l8OTg3NXxRUzFPUkRFUlN8QVBGTXwyMDE0MDQxMDA5NDQwMHx8UkRTXk8xM3wyMDE0MDQxMDA5NDQwMHxQfDIuNS4xfHx8fHx8fHx8fHx8fHwKUElEfHx8MjAxNDA0MTAwMDF8Q1JVWlZ8Q1JVWl5WRVJBXnx8MTkzMzEwMTB8Rnx8fDEyMzQ1IFdFU1QgTUFJTiBTVFJFRVReXkNBUk1FTF5JTl40NjAzMnx8MDAwMDAwMDAwMHwwMDAwMDAwMDAwfHx8fDIwMTQwNDEwMDAxfHx8fHx8fHx8fHx8fHx8fHx8fHx8ClBWMXwxfHxXXjEwOF5BXkFQRk18fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fApPUkN8UkV8fDA2NDAxMTkyXlJYXjA2NDAxMTkyMTQwNDEwXlFTMVJYfHx8fHx8MjAxNDA0MTAwOTQzNTl8UVMxXlFTMV5RUzF8UVMxXlFTMV5RUzF8MzIxNDU2Nzg5M15URVNUXihOUEkpLHx8fDIwMTQwNDEwMDk0MzU5fHx8fHx8fHx8fHx8fHx8fHwKVFExfDF8MF5UQUJ8UUQgIH4xfnwwODAwMDB8fHwyMDE0MDQxMDA5MzN8MjAxNTA0MTAwOTMyfHx8VEFLRSBUV08oMikgVEFCTEVUUyBJTiAgIFRIRSBNT1JOSU5HLnxBfHx8ClRRMXwyfDFeVEFCfE5PT05+MX58MTIwMHx8fDIwMTQwNDEwMDkzM3wyMDE1MDQxMDA5MzJ8fHxUQUtFIE9ORSBUQUJMRVQgQVQgMTIgICAgTk9PTi58fHx8ClJYT3wwMDAzOTAwNjAxM15MQVNJWCA0ME1HIFRBQkxFVF5OREN8fHxUQUJ8fFRBS0UgVFdPKDIpIFRBQkxFVFMgSU4gICBUSEUgTU9STklORy58fHxHfHx8fHx8fHx8fHx8fHx8fHx8fHwKUlhSfFBPfHx8fHx8ClJYRXx8MDAzNzgwMjE2MTBeRlVST1NFTUlERSA0ME1HIFRBQkxFVF5ORENeMDAwMzkwMDYwMTNeTEFTSVggNDBNRyBUQUJMRVReTkRDXnwwfHxeVEFCfHx8fEd8MDkwfHwwMTF8QUIxMjM0NTY3fHwwNjQwMTE5MnwwMTF8MDB8MjAxNDA0MTAwOTQzNTl8fHxefHx8fDQwfE1HfF5eSUNEOXwxMDAwfFRBQnx8fDIwMTQwNDEwMDk0MzU5fHx8fHx8fHxeVEVTVCBDVVNUT01FUnwyMDEgVy4gU0FJTlQgSk9ITiBTVFJFRVReXlNQQVJUQU5CVVJHXlNDXjI5MzA2fHx8fApSWER8MXwwMDM3ODAyMTYxMF5GVVJPU0VNSURFIDQwTUcgVEFCTEVUXk5EQ14wMDAzOTAwNjAxM15MQVNJWCA0ME1HIFRBQkxFVF5OREN8MjAxNDA0MTAwOTQzNTl8MDkwfHx8MDY0MDExOTJ8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHw=</outboundTemplate>
          <inboundDataType>DELIMITED</inboundDataType>
          <outboundDataType>HL7V2</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="4.0.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="4.0.0">
              <columnDelimiter>,</columnDelimiter>
              <recordDelimiter>\r\n</recordDelimiter>
              <quoteToken>&quot;</quoteToken>
              <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
              <quoteEscapeToken>\</quoteEscapeToken>
              <numberedRows>true</numberedRows>
              <ignoreCR>false</ignoreCR>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="4.0.0">
              <columnDelimiter>,</columnDelimiter>
              <recordDelimiter>\n</recordDelimiter>
              <quoteToken>&quot;</quoteToken>
              <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
              <quoteEscapeToken>\</quoteEscapeToken>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="4.0.0">
              <splitType>Record</splitType>
              <batchSkipRecords>1</batchSkipRecords>
              <batchMessageDelimiter></batchMessageDelimiter>
              <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
              <batchGroupingColumn></batchGroupingColumn>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
              <handleRepetitions>true</handleRepetitions>
              <handleSubcomponents>true</handleSubcomponents>
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <stripNamespaces>false</stripNamespaces>
              <segmentDelimiter>\r</segmentDelimiter>
              <convertLineBreaks>true</convertLineBreaks>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <segmentDelimiter>\r</segmentDelimiter>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
              <splitType>MSH_Segment</splitType>
              <batchScript></batchScript>
            </batchProperties>
            <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
              <segmentDelimiter>\r</segmentDelimiter>
              <successfulACKCode>AA</successfulACKCode>
              <successfulACKMessage></successfulACKMessage>
              <errorACKCode>AE</errorACKCode>
              <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
              <rejectedACKCode>AR</rejectedACKCode>
              <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
              <msh15ACKAccept>false</msh15ACKAccept>
              <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
            </responseGenerationProperties>
            <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
              <successfulACKCode>AA,CA</successfulACKCode>
              <errorACKCode>AE,CE</errorACKCode>
              <rejectedACKCode>AR,CR</rejectedACKCode>
              <validateMessageControlId>true</validateMessageControlId>
              <originalMessageControlId>Destination_Encoded</originalMessageControlId>
              <originalIdMapVariable></originalIdMapVariable>
            </responseValidationProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.0.0">
          <elements/>
        </filter>
        <transportName>File Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.0.0">
          <metaDataId>3</metaDataId>
          <name>TCP Sender - RDE Messaging Interface</name>
          <properties class="com.mirth.connect.connectors.tcp.TcpDispatcherProperties" version="4.0.0">
            <pluginProperties/>
            <destinationConnectorProperties version="4.0.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <transmissionModeProperties class="com.mirth.connect.plugins.mllpmode.MLLPModeProperties">
              <pluginPointName>MLLP</pluginPointName>
              <startOfMessageBytes>0B</startOfMessageBytes>
              <endOfMessageBytes>1C0D</endOfMessageBytes>
              <useMLLPv2>false</useMLLPv2>
              <ackBytes>06</ackBytes>
              <nackBytes>15</nackBytes>
              <maxRetries>2</maxRetries>
            </transmissionModeProperties>
            <serverMode>false</serverMode>
            <remoteAddress>127.0.0.1</remoteAddress>
            <remotePort>6662</remotePort>
            <overrideLocalBinding>false</overrideLocalBinding>
            <localAddress>0.0.0.0</localAddress>
            <localPort>0</localPort>
            <sendTimeout>5000</sendTimeout>
            <bufferSize>65536</bufferSize>
            <maxConnections>10</maxConnections>
            <keepConnectionOpen>false</keepConnectionOpen>
            <checkRemoteHost>false</checkRemoteHost>
            <responseTimeout>5000</responseTimeout>
            <ignoreResponse>false</ignoreResponse>
            <queueOnResponseTimeout>true</queueOnResponseTimeout>
            <dataTypeBinary>false</dataTypeBinary>
            <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
            <template>${message.encodedData}</template>
          </properties>
          <transformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>Call Anonymize HL7 Message Header</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>/*
	scriptName:	Call Anonymize HL7 Message Header
	scripFile:	call_anonymize_hl7_message_header.js
	desc:		This script handles the transformation to anonymize HL7 message header
	date:		2022-07-18 
	history:
	2022-04-15 JER - created from the call_anonymize_hl7_message_patient_demographics script
*/
var scriptName= &quot;call_anonymize_hl7_message_header&quot;;
var debug= 0;

var tmp= anonymize_hl7_message_header(msg);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>Call Anonymize HL7 Patient Demographics</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>/*
	scriptName:	Call Anonymize HL7 Patient Demographics
	scripFile:	call_anonymize_hl7_patient_demographics.js
	desc:		This script handles the transformation to anonymize HL7 message patient demographics
	date:		2022-05-36 
	history:
	2022-07-13 JER - moved the script to a code_template
	2022-04-15 JER - created from the convert_RDS_HL7_to_JSON script
*/
var scriptName= &quot;call_anonymize_hl7_patient_demographics&quot;;
var debug= 0;

var tmp= anonymize_hl7_patient_demographics(msg);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>Call Anonymize HL7 Patient Orders</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <script>/*
	scriptName:	Call Anonymize HL7 Patient Orders
	scripFile:	call_anonymize_hl7_patient_orders.js
	desc:		This script handles the transformation to anonymize HL7 message patient RDE orders
	date:		2022-07-18 
	history:
	2022-07-13 JER - moved the script to a code_template
	2022-04-15 JER - created from the convert_RDS_HL7_to_JSON script
*/
var scriptName= &quot;call_anonymize_hl7_patient_orders&quot;;
var debug= 0;

if($(&apos;EventType&apos;).toString().toUpperCase().indexOf(&apos;RDE&apos;)&gt;0) {
	var tmp= anonymize_hl7_patient_orders(msg);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.0.0">
            <elements/>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.javascriptrule.JavaScriptRule version="4.0.0">
                <name>Filter Validation HL7 message - PID.3 &amp; PID.18</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>/* 
Name: 	filter_validation_hl7_message.js
Desc: 	Filter Incoming HL7v2 Message - ChannelMap
Created:	2021-02-12 
Modified:
*/
var scriptName= &quot;filter_validation_hl7_message&quot;;
var debug= 0;
var msgCtrlId= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
var msgDateTime= msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
if(msgCtrlId.toString().length&lt; 1) {
	msgCtrlId= msgDateTime;
}

if (debug&gt;0) { logger.debug(scriptName+&quot;::DEBUG received msg: &quot;+msg); }
// Verify PID-3 element value
if(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString().length &gt; 0) {
    if (debug&gt;0) { logger.debug(scriptName+&quot;::DEBUG message PASSED filter successfully&quot;); }
} else {
	var failureMessage= &apos;PID-3 Element: Missing Patient ID&apos;;
	logger.error(scriptName+&quot;::DEBUG message: &quot;+msgCtrlId+&quot; FILTERED msg: &quot;+failureMessage);
}
// Verify PID-18 element value
if(msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString().length &gt; 0) {
    if (debug&gt;0) { logger.debug(scriptName+&quot;::DEBUG message PASSED filter successfully&quot;); }
} else {
	var failureMessage= &apos;PID-18 Element: Missing Account Number&apos;;
	logger.error(scriptName+&quot;::DEBUG message: &quot;+msgCtrlId+&quot; FILTERED msg: &quot;+failureMessage);
}
/*
// Verify PV1-19 element value
if(tmp[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PID.19.1&apos;].toString().length &gt; 0) {
    if (debug&gt;0) { logger.debug(scriptName+&quot;::DEBUG message PASSED filter successfully&quot;); }
} else {
	var failureMessage= &apos;PV1-19 Element: Missing Visit Number&apos;;
	logger.error(scriptName+&quot;::DEBUG message: &quot;+msgCtrlId+&quot; FILTERED msg: &quot;+failureMessage);
}
*/
if(failureMessage) {
	$c(&apos;rejectMessage&apos;,failureMessage);
	$c(&apos;failureMessage&apos;,failureMessage);
	return false;
} else {
    return true;
}</script>
              </com.mirth.connect.plugins.javascriptrule.JavaScriptRule>
            </elements>
          </filter>
          <transportName>TCP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="4.0.0">
          <metaDataId>2</metaDataId>
          <name>Sent to outfile: C:\HL7\Caregility\out</name>
          <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="4.0.0">
            <pluginProperties/>
            <destinationConnectorProperties version="4.0.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <scheme>FILE</scheme>
            <host>C:/HL7/Caregility/out</host>
            <outputPattern>${msgCtrlId}_${assigningAuthority}.hl7</outputPattern>
            <anonymous>true</anonymous>
            <username>anonymous</username>
            <password>anonymous</password>
            <timeout>10000</timeout>
            <keepConnectionOpen>true</keepConnectionOpen>
            <maxIdleTime>0</maxIdleTime>
            <secure>true</secure>
            <passive>true</passive>
            <validateConnection>true</validateConnection>
            <outputAppend>false</outputAppend>
            <errorOnExists>false</errorOnExists>
            <temporary>false</temporary>
            <binary>false</binary>
            <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
            <template>${message.encodedData}</template>
          </properties>
          <transformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>Call Anonymize HL7 Message Header</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>/*
	scriptName:	Call Anonymize HL7 Message Header
	scripFile:	call_anonymize_hl7_message_header.js
	desc:		This script handles the transformation to anonymize HL7 message header
	date:		2022-07-18 
	history:
	2022-04-15 JER - created from the call_anonymize_hl7_message_patient_demographics script
*/
var scriptName= &quot;call_anonymize_hl7_message_header&quot;;
var debug= 0;

var tmp= anonymize_hl7_message_header(msg);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>Call Anonymize HL7 Patient Demographics</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>/*
	scriptName:	Call Anonymize HL7 Patient Demographics
	scripFile:	call_anonymize_hl7_patient_demographics.js
	desc:		This script handles the transformation to anonymize HL7 message patient demographics
	date:		2022-05-36 
	history:
	2022-07-13 JER - moved the script to a code_template
	2022-04-15 JER - created from the convert_RDS_HL7_to_JSON script
*/
var scriptName= &quot;call_anonymize_hl7_patient_demographics&quot;;
var debug= 0;

var tmp= anonymize_hl7_patient_demographics(msg);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>Call Anonymize HL7 Patient Orders</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <script>/*
	scriptName:	Call Anonymize HL7 Patient Orders
	scripFile:	call_anonymize_hl7_patient_orders.js
	desc:		This script handles the transformation to anonymize HL7 message patient RDE orders
	date:		2022-07-18 
	history:
	2022-07-13 JER - moved the script to a code_template
	2022-04-15 JER - created from the convert_RDS_HL7_to_JSON script
*/
var scriptName= &quot;call_anonymize_hl7_patient_orders&quot;;
var debug= 0;

if($(&apos;EventType&apos;).toString().toUpperCase().indexOf(&apos;RDE&apos;)&gt;0) {
	var tmp= anonymize_hl7_patient_orders(msg);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.0.0">
            <elements/>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.0.0">
            <elements/>
          </filter>
          <transportName>File Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
globalChannelMap.put(&apos;gcSendingApplication&apos;,&apos;QS1PHARMACY&apos;);
globalChannelMap.put(&apos;gcSendingFacility&apos;,&apos;9875&apos;);
globalChannelMap.put(&apos;gcReceivingApplication&apos;,&apos;QS1ORDERS&apos;);
globalChannelMap.put(&apos;gcReceivingFacility&apos;,&apos;APFM&apos;);

return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.0.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>true</removeAttachmentsOnCompletion>
        <initialState>STOPPED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>BATCHID</name>
            <type>STRING</type>
            <mappingName>batchId</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>EVENTTYPE</name>
            <type>STRING</type>
            <mappingName>eventType</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>MSGCTRLID</name>
            <type>STRING</type>
            <mappingName>msgCtrlId</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>PATIENTID</name>
            <type>STRING</type>
            <mappingName>patientId</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>DEVICEID</name>
            <type>STRING</type>
            <mappingName>deviceId</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.0.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1658530898469</time>
            <timezone>GMT-06:00</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>10</pruneMetaDataDays>
            <pruneContentDays>10</pruneContentDays>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="4.0.0">
            <id>d316c4bc-9e10-4162-b67c-e514afc59fa3</id>
            <name>Channel Helpers</name>
            <revision>1</revision>
            <lastModified>
              <time>1706120884823</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>1aca2a66-a83a-4703-9ec7-dfaa3a6ad5b2</string>
              <string>3e15b608-553f-45e7-a617-712d6b75ab4d</string>
              <string>f6d6aa80-d65f-4935-a267-d6bef39a7bdf</string>
              <string>edd93839-401c-4613-b696-6d4799ebc5af</string>
              <string>2f511815-92d1-4f0f-92e9-f4f8ae576b75</string>
              <string>b4a51816-0aad-444a-b1ce-f5c11f9961bc</string>
              <string>cb7f055d-45ae-43b7-ac7c-bb2b2db34ded</string>
              <string>139cdc6a-5f40-46bd-a246-2a9a1ef8ed10</string>
              <string>316c7826-a8ee-44b4-922c-8afe0daa2c72</string>
              <string>6ff8ca2b-c4e3-4e6f-897a-17f36ed63faa</string>
              <string>27aee1c0-8ed0-4062-89b5-1c7a69a946bc</string>
              <string>291b4847-a85d-41c6-bd4a-37f008b15ca8</string>
              <string>81c836fd-cbba-4247-b438-d4c9987ee75b</string>
              <string>4318de8e-4d7b-4885-9f11-8b2ac6f9c70a</string>
              <string>e983e439-461a-424f-8348-764b29e05ecb</string>
              <string>0763b542-8ed8-4a30-9c35-de3dbf030626</string>
              <string>75c150e0-fbc5-4eef-a856-bec6b3a39a24</string>
              <string>dd55a671-a099-4b29-bdbb-85c34050037a</string>
              <string>a08848df-6dcd-4c51-aa6d-d2f85edfdcf8</string>
              <string>ae504043-55f5-497e-ac87-33686e7569b2</string>
              <string>fef7c31a-61a4-43c8-bb15-79f51a36c882</string>
              <string>69f5ad2c-3bf4-4d55-8e4a-bd6faade202d</string>
              <string>39acd9f7-c975-4787-b31e-714f748a51a2</string>
              <string>a8bd6f50-894f-443f-b248-da3ebad3a748</string>
              <string>3c355935-e639-4517-b3b1-42c6564387f8</string>
              <string>1e45f5ac-6815-40a8-8fe9-15e98eb1d07b</string>
              <string>e695a1d8-2bde-4da3-a9a8-8cd6f81ca3c0</string>
              <string>3d95de17-a2ea-446c-be4c-36c32d8cda1c</string>
              <string>205385d0-06be-4baa-b072-9b431c315827</string>
              <string>a8ebde5a-16cb-407e-a8b4-fa8766d26c73</string>
              <string>fdcb1121-0d49-4ed8-b1a1-4f4482e1c20a</string>
              <string>b1842d23-059a-4e7e-b447-3b5f5ccf5c3a</string>
              <string>8c5d3887-bd22-4018-aeda-45e5c0f8d551</string>
              <string>a127fffb-1663-4206-b6d3-348aa228c999</string>
              <string>d70fc7fa-2005-4fc7-9222-dc8119346c6e</string>
              <string>2a2ad8a5-b961-4f4c-ac09-8abee2097972</string>
              <string>143b10e0-e01b-4942-9995-2d3b9a165d76</string>
              <string>a574bc8d-e82e-4ec6-9430-f3a37278e356</string>
              <string>f6e27b4e-dbbd-48c9-994f-55c3ac511fb9</string>
              <string>6060b76d-07c2-4f9f-bc71-d2e8c44d8271</string>
              <string>08536fee-6f99-4cc4-8958-f84daaee73d5</string>
              <string>dccd5a80-a385-482e-97e4-69340bce4522</string>
              <string>bfa0bc00-9ee1-4ba5-99de-9e46faffed6d</string>
              <string>183b6833-a563-42cb-8d4d-cdcb740aef30</string>
              <string>652e2cab-f748-41b4-ae8f-f0aae48e1fca</string>
              <string>bd81709b-2ef0-4760-aba9-f455fb338f37</string>
              <string>633e9341-a80b-4c11-a6a3-1d3942bb1782</string>
              <string>695c7ed6-252e-4229-83db-5571946a8b62</string>
              <string>df3f9b9f-e8e7-47a9-a33d-c9ec7d7820fd</string>
              <string>895ee0ef-745c-464d-a46c-e51331a01c3f</string>
              <string>50dcf6de-46b4-4de5-99c2-d341abb8a41a</string>
              <string>5e411c40-61f8-467e-b132-78e54e0b5f81</string>
              <string>ed4ef090-3f7e-442d-ad30-744e3a1313f2</string>
              <string>ed3e52dc-3023-4cc7-8cad-47e0d5df89c1</string>
              <string>ec29c308-0bc3-4eb0-a948-09c2c0747afa</string>
              <string>aeaba1c0-cef9-4ad8-82d7-76d66cc95562</string>
              <string>58f42d4f-22e1-4f7c-8acf-93a9fe92619c</string>
              <string>7a21d8ac-5afa-45b8-b136-5def45d811b4</string>
              <string>23ea2137-37b1-4b00-9fb0-c8889cd4bc97</string>
              <string>2a33ffd6-253d-402f-8fb6-93bd94f65dcd</string>
              <string>7445aaa5-ff13-4c08-a8b1-817cfed2692b</string>
              <string>3d290a27-5daf-4bb0-b3d8-90c9bb8afaeb</string>
              <string>e07b74b9-756e-4ca2-8be9-01bf7abfd817</string>
              <string>3ba1448a-d0b7-4478-bc57-f9cb8dab6de9</string>
              <string>dcaf136d-a3b8-47ed-aec7-d1619675ba2d</string>
              <string>285faf0d-523a-4c8e-92ec-4a0f3a89e048</string>
              <string>3263ad34-c86d-4481-b19f-4cd3d0d83d62</string>
              <string>e1af2369-c57e-4850-bc30-f79b6fe9fa66</string>
              <string>28ddc4f3-a96b-47db-b0e0-bcfcd825f48a</string>
              <string>90bc60ed-14c6-49db-b1e6-bb70d2b1d01d</string>
              <string>fd6b9376-0847-49d7-96c6-15c540a8e39a</string>
              <string>7ee4a47d-bdf3-473d-9da9-3a62c41037b1</string>
              <string>167ee803-661a-4e6e-ac6e-b84c057f7ca1</string>
              <string>a40e7657-c37a-4fb6-aa79-48a2ea16709c</string>
              <string>5d5e5835-8cd3-43af-ac82-ffe57439bfb5</string>
              <string>47f248b1-72d5-47dc-b0b3-6aa387e9e5d6</string>
              <string>d7c3e640-7850-4d70-bb1c-3289674bd609</string>
              <string>ae961745-fe19-46bd-b240-c82888091366</string>
              <string>68581957-7fba-421f-b063-941a804fcc46</string>
              <string>0056a8aa-7aa5-4047-a693-21bac64470aa</string>
              <string>2a637fa3-fb83-4666-abe0-c754924ff738</string>
              <string>8a08c578-68dd-4550-b178-eee13ade011e</string>
              <string>d448196a-4282-4d10-8c9a-7f1dfd19abea</string>
              <string>05759809-cfbd-4546-8b71-fd28c2499763</string>
              <string>1c01997f-00d1-4e40-9e63-da5706137cdd</string>
              <string>881db416-1776-4ab6-a3ce-5065ed11cdb5</string>
              <string>982b29a5-1743-4435-8842-9810e4e34926</string>
              <string>fe1bdd5e-cce0-4509-a09a-3545b69d3d7a</string>
              <string>1bff9775-2de8-4b51-bb6b-6aaa29c144bb</string>
              <string>5e97d36f-68fe-412d-a1df-3a25a07e5770</string>
              <string>9316c229-da47-49f8-a2c0-398ba155d370</string>
              <string>20524120-844c-4733-ac8a-b01f0e14a12f</string>
              <string>55ebb133-1e4d-4172-8718-301240e9518f</string>
              <string>b0dec3c0-01ca-45a6-b826-707b80644dff</string>
              <string>d1dd4342-0ad4-42cc-b708-f47e8c6621f8</string>
              <string>20d94501-cd46-41ce-9bf1-e34639074d16</string>
              <string>492a7c6c-4768-45e2-9f49-6c5488b0a2e5</string>
              <string>9f67f48f-ca64-4419-9101-05c39d7634fd</string>
              <string>14a2ad40-95bb-4ac9-a10e-d326537cc5a6</string>
              <string>6aa39894-bc9b-448c-aac6-b6967a0ce243</string>
              <string>4108a56a-b1a6-4d8c-9e8e-b065654860d0</string>
              <string>bdb4241f-2858-49da-8d4e-2f1579679620</string>
              <string>d56da279-9aa2-4b33-8913-bf0f37a046a0</string>
              <string>692365a7-9ec6-4c38-adee-672f4084adf3</string>
              <string>3f433a3e-e46d-440a-82c1-5490ada6b54e</string>
              <string>4d223d2f-d247-47da-b6e6-6d25e8a73775</string>
              <string>4b7abf79-011a-428e-96c9-040696a2869b</string>
              <string>72471096-425b-4750-81a4-123fca2e302c</string>
              <string>3558a098-5cbc-4e05-ae03-80b4aad20e53</string>
              <string>4a05dc00-9ad6-454a-b61b-ddd074bbb36c</string>
              <string>9d1c136c-3c94-43c3-b0f8-1c1551ac6987</string>
              <string>b2fdd8c2-f387-493b-ab35-e7e9e8ce056a</string>
              <string>930a4c9e-b458-4edf-92ff-3be07d68c28d</string>
              <string>8e046241-74a3-44e0-9bf9-f0b73a36717d</string>
              <string>0f0df6c9-1153-4e0b-800b-533492ba936c</string>
              <string>f016be9d-205d-4cdd-b4fb-e7139700dd22</string>
              <string>0801e501-57ac-4418-ac59-08e0edadabf3</string>
              <string>2607531a-4f9b-48ed-9ef4-b1b71b880864</string>
              <string>455c536f-d3fb-4832-941e-ef230b683590</string>
              <string>31b37e0b-cfbf-4787-b5d3-2082328fafd7</string>
              <string>21e47d6b-9863-4045-82af-8941087a4da1</string>
              <string>9ef7f26f-d3f7-420d-a30f-26f948be596d</string>
              <string>b3869a86-7d4f-4a10-b116-24b758a191b3</string>
              <string>a6825055-e697-487f-9add-560ad9567a60</string>
              <string>f7552865-32a0-4b5b-a5fd-9b0bddffddf9</string>
              <string>9f2bcd3c-8a74-49f1-b910-aa05c509c9cb</string>
              <string>bd270438-7262-47f8-8656-1baf51287078</string>
              <string>61b10ef9-baef-45e2-b747-a0987d851033</string>
              <string>aa5ba1e6-ab11-4a9a-a03c-e0fe58b49086</string>
              <string>ec653b8b-7362-4167-98ff-3845c7560d11</string>
              <string>1710d009-1bb2-4db6-a8d8-1493e6802c18</string>
              <string>25c5fbce-cb87-4ba9-a572-0be49242a0b2</string>
              <string>13738349-4cc4-43de-9365-a27ead17b524</string>
              <string>a43f7553-71de-41d3-aa16-93cc7a48bafc</string>
              <string>e7b4b295-2b47-4b4f-97b9-b9a9082bffb1</string>
              <string>854f78f8-4ebc-4c99-9a05-c26015671807</string>
              <string>e1900e14-c2a2-426e-86f0-971353d60cdd</string>
              <string>fd3b93dd-8b65-4b9f-a090-09bc7ec9aa12</string>
              <string>72c5d63d-a405-4ccf-b85e-dba740b14fdd</string>
              <string>f6efe381-7851-4bec-96c3-231b7baf666f</string>
              <string>2f3b524c-9d7b-43f7-b4ce-e84d27cc82ff</string>
              <string>99066deb-0d43-44f6-8823-b8cfe08e7185</string>
              <string>aa30f2b5-64cf-4396-b098-efeecb2224f2</string>
              <string>9fee4e0a-7a6d-4925-bc78-59df2c1f28af</string>
              <string>d23d6225-1145-484e-8164-f070fa1f2e8c</string>
              <string>57953b24-64cb-489d-9706-bf5dc1ef94ea</string>
              <string>08955a01-dda6-468b-a8cf-73586fe7d99f</string>
              <string>52d0a715-1be1-4fb2-8f3d-448c89c148f8</string>
              <string>4941f2fb-e641-4e0a-aba4-633ddf410760</string>
              <string>470c6c09-6850-4770-820c-bbfce54196bd</string>
              <string>21a820f0-205a-4046-8c4a-3788daca4d05</string>
              <string>5cee4e54-225f-43e4-830c-6dc3fb2826f2</string>
              <string>99643fbc-fa46-4c38-a7db-ac72833847f1</string>
              <string>9a44798a-871f-4402-9397-75241b18c6b0</string>
              <string>f1e2a84e-89e2-4ea0-8edd-4418f11b7eb7</string>
              <string>fe6275f5-4efa-4c86-90e2-8788c4f9c975</string>
              <string>081454ce-e155-45a1-bfc0-2297d6317259</string>
              <string>8b61cf50-9d95-43dd-b6ab-474e2a1d2d76</string>
              <string>5b245873-9491-4fa3-9bce-08c111cbe04f</string>
              <string>4041500f-7768-4011-b273-13fe61a2ebd6</string>
              <string>eaf28278-dd66-4bcc-b7e7-9a6c422db1ee</string>
              <string>0e0f63c0-5b51-4626-9a50-c0e2f5f94d37</string>
              <string>337347d0-d5f6-492c-9dc3-638a211132ff</string>
              <string>f836f593-4c61-49bd-be13-4cb3f9c6cffb</string>
              <string>0fec52ca-be59-47c9-85b1-700dc3b3dc2e</string>
              <string>a42ba030-2419-490c-8843-889e4197cf83</string>
              <string>4d75bdd7-6d1f-4db5-a7f8-4f63efa13197</string>
              <string>53d49d46-bd95-4ce5-8f98-7685217fedbf</string>
              <string>49a7b526-0577-4811-98c2-185bb6c22d91</string>
              <string>f8b35221-21af-4a86-9a4a-1b5657b5a029</string>
              <string>2f88fefe-6f80-46b6-a20a-04c29532073e</string>
              <string>8c637e01-95b0-4b11-a28f-4518b7f8d1ae</string>
              <string>7f5da166-70b8-48e0-9fa9-cf96fd867c30</string>
              <string>e3d85e42-6410-459f-95fc-2f98af8c0db9</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>bc768cd6-d735-40b1-9617-a3417481fe19</id>
                <name>Convert CSV to JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884963</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} csv - CSV string with column headers
	@return {String} return JSON object using column headers and field keys
*/
function convertCsvToJson(csv) {
	var textXML = SerializerFactory.getSerializer(&apos;DELIMITED&apos;).toXML(csv);
	var xml = new XML(textXML);
	var dataItems = [];
	for (var i = 1; i &lt;= xml[&apos;row&apos;].length() - 1; i++) {
		var jsonData = {};
		for (var j = 1; j &lt;= xml[&apos;row&apos;][0].children().length(); j++) {
			var column = &apos;column&apos; + j.toString();
			var header = xml[&apos;row&apos;][0][column].toString().replace(/\s/g, &apos;_&apos;).replace(/-/g, &apos;_&apos;).toLowerCase();
			var value = xml[&apos;row&apos;][i][column].toString();
			
			jsonData[header] = value;
			
		}
		dataItems.push(jsonData);
	}

	return JSON.stringify(dataItems);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>537d816c-81ff-4507-85c6-85e28b8c546c</id>
                <name>Convert JSON to CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885050</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts JSON to CSV.
**/
/*	@param {String} jsonData - JSON string with [0] index key as headers for csv
	@return {String} return csv
*/	

function convertJsonToCsv(data) {
	try{
		var json = JSON.parse(data);	
		var fields = Object.keys(json[0])
		var replacer = function(key, value) { return value === null ? &apos;&apos; : value } 
		var csv = json.map(function(row){
		  return fields.map(function(fieldName){
		    return JSON.stringify(row[fieldName], replacer)
		  }).join(&apos;,&apos;)
		})
		csv.unshift(fields.join(&apos;,&apos;)) // add header column
		csv = csv.join(&apos;\r\n&apos;);
		return csv;
	}catch(error){
		return error;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>ff3df0b8-cfa2-4ec9-82ac-37c9e4830e0c</id>
                <name>Generic - Send message to channel destination</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function sendMessageToChannelDestination(channelID, destinationID, map, data) {
	var msgMap;
	var outData = {};
	
	if (!map) {
		msgMap = Maps.map();
	} else {
		msgMap = Maps.map(map);
	}

	if (data == null || data == undefined) {
		data = &apos;&apos;;
	}

	if (msgMap.get(&apos;sourceChannelId&apos;) == null) {
		msgMap.add(&apos;sourceChannelId&apos;, channelId);
	}
	if (msgMap.get(&apos;sourceChannelName&apos;) == null) {
		msgMap.add(&apos;sourceChannelName&apos;, channelName);
	}

	// Dirty way to handle connector message not being defined. Handles cases where this function 
	// is used in a source js writer.
	try {
		if (msgMap.get(&apos;sourceMessageId&apos;) == null &amp;&amp; connectorMessage &amp;&amp; connectorMessage.getMessageId()) {
			msgMap.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString());
		}
	} catch(ex) {}

	var msgRequest = new RawMessage(data, [destinationID], msgMap);
	var msgResponse = router.routeMessageByChannelId(channelID, msgRequest);

	if (msgResponse == null) {
		// return;
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;; 
	}
	if (msgResponse.getStatus() == null) {
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;;
	}

	if (msgResponse.getStatus() == &apos;ERROR&apos;) {
		throw msgResponse.getMessage();
	}

	return msgResponse.getMessage();
	
	
	// var msgResponse;

	/*
	try {
		msgResponse = router.routeMessageByChannelId(channelID, msgRequest);
		outData.status = &apos;success&apos;;
		outData.status_message = &apos;message successfully sent to channel&apos;;
	} catch (ex) {
		outData.status = &apos;error&apos;;
		outData.status_message = ex.toString();
		return outData;
	}

	if (msgResponse.getStatus() == null) {
		outData.response_status = &apos;unknown&apos;;
		logger.error(&apos;Code Template &quot;Send message to channel by id&quot;: channel &quot;&apos; + ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;);
	}
	
	switch (String(msgResponse.getStatus())) {
		case &apos;ERROR&apos;:
			outData.response_status = &apos;error&apos;;
			break;
		case &apos;FILTERED&apos;:
			outData.response_status = &apos;filtered&apos;;
			break;
		case &apos;QUEUED&apos;:
			outData.response_status = &apos;queued&apos;;
			break;
		case &apos;RECEIVED&apos;:
			outData.response_status = &apos;received&apos;;
			break;
		case &apos;SENT&apos;:
			outData.response_status = &apos;sent&apos;;
			break;
	}

	outData.response_message = msgResponse.getMessage();

	return outData;
	*/
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>f4cd9e71-4f8d-4472-80a9-31b533f4d578</id>
                <name>Get bots DB connection to specified environment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884906</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get a new bots database connection. Be sure to wrap in try/finally block to close database connection.

	@param {String} environment - prod, staging, dev, local
	@return {String} return database connection
*/
function GetBotsDBConnection() {
	var username = configurationMap.get(&apos;bots-db-user&apos;);
	var password = configurationMap.get(&apos;bots-db-pass&apos;);
	var uri = configurationMap.get(&apos;bots-db-uri&apos;);	
	return DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, uri, username, password);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>554bd282-172b-43a0-8902-992baf63b04d</id>
                <name>Get DB connection to specified environment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885107</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get a new database connection. 

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetDBConnection(environment) {
	if (environment != &apos;prod&apos; &amp;&amp; environment != &apos;staging&apos; &amp;&amp; environment != &apos;dev&apos; &amp;&amp; environment != &apos;local&apos;) {
		return null;
	}
	
	var username = configurationMap.get(&apos;docsink-db-user-&apos; + environment);
	var password = configurationMap.get(&apos;docsink-db-pass-&apos; + environment);
	var uri = configurationMap.get(&apos;docsink-db-uri-&apos; + environment);

	return DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.cj.jdbc.Driver&apos;, uri, username, password);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>552a87ed-b5a0-4546-9e5c-0a768661a351</id>
                <name>Postprocessor - Generate channel response</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884842</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function generateChannelResponse() {
	// This script executes once after a message has been processed
	// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
	
	var destinations = sourceMap.get(&apos;destinationSet&apos;);
	var metadataIds = destinations.toArray();
	
	if (metadataIds.length == 0) {
		return ResponseFactory.getErrorResponse(&apos;invalid request&apos;);
	}
	
	var smsg = message.getConnectorMessages().get(0);
	if (smsg.getStatus() == &apos;ERROR&apos;) {
		if (smsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(smsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(smsg.getResponseData().getMessage());
	}
	
	var metadataID = metadataIds[0];
	var cmsg = message.getConnectorMessages().get(metadataID);

	if (cmsg.getStatus() == &apos;ERROR&apos;) {
		if (cmsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(cmsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;SENT&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;FILTERED&apos;) {
		return ResponseFactory.getFilteredResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;QUEUED&apos;) {
		return ResponseFactory.getQueuedResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;RECEIVED&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else {
		return cmsg;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>46188992-808e-4348-9541-4a97a861c28c</id>
            <name>Utilities</name>
            <revision>20</revision>
            <lastModified>
              <time>1690987302612</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>Conversion De-Identification HL7 Utilities</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>adb80ef5-a512-462d-bcb0-af03ed498ed6</id>
                <name>anonymize_hl7_message_header</name>
                <revision>16</revision>
                <lastModified>
                  <time>1670895747847</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** This script handles the transformation to update HL7 message header during anonymization

	@param {String} msg - provide the hl7 message to have the message header modified to reflect anonmymization
	@return {String} return description

	scriptName:	anonymize_hl7_message_header.js
	desc:		This script handles the modification message header modified to reflect anonmymization
	date:		2022-05-36 
	history:
	2022-08-12 19:50 JER - Modified to MSH-4 statically always set to QS1
	2022-07-18 19:07 JER - Modified to evaluate the segments length() to determine if children nodes
*/
function anonymize_hl7_message_header(msg) {

	var scriptName= &quot;anonymize_hl7_message_header&quot;;
	var debug= 0;
	var currentHeader= new Object();

	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg[MSH] length: &apos;+msg[&apos;MSH&apos;].length()); }

	if(msg[&apos;MSH&apos;].length()&gt;0) {
		
		// get MSH segment data
		var curSendingApplication= msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString();
		// 2022-08-12 JER - Modified to MSH-4 statically always set to QS1		
		// var curSendingFacility= &apos;QS1&apos;;
		var curSendingFacility= msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString();
		globalMap.put(&apos;gSendingFacility&apos;,curSendingFacility);
		var curReceivingApplication= msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString();
		var curReceivingFacility= msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;].toString();
		var messageDateTime= msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
		var curMessageType= msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString()+&apos;^&apos;+msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();
		var messageControlId= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
	
		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;: sendingApplication= &apos;+curSendingApplication+&apos; sendingFacility= &apos;+curSendingFacility+&apos; receivingApplication= &apos;+curReceivingApplication+&apos; receivingFacility= &apos;+curReceivingFacility+&apos; messageType= &apos;+curMessageType+&apos; messageDateTime= &apos;+messageDateTime+&apos; messageControlId= &apos;+messageControlId); }

		// collect the currentHeader Object Properties
		if(evaluate_defined_variable(curSendingApplication,&apos;msh-3&apos;)) 	{ currentHeader.sendingApplication= curSendingApplication; }
		if(evaluate_defined_variable(curSendingFacility,&apos;msh-4&apos;)) 		{ currentHeader.sendingFacility= curSendingFacility; }
		if(evaluate_defined_variable(curReceivingApplication,&apos;msh-5&apos;)) 	{ currentHeader.receivingApplication= curReceivingApplication; }
		if(evaluate_defined_variable(curReceivingFacility,&apos;msh-6&apos;)) 	{ currentHeader.receivingFacility= curReceivingFacility; }
		if(evaluate_defined_variable(curMessageType,&apos;msh-7&apos;)) 			{ currentHeader.messageType= curMessageType; }
		if(evaluate_defined_variable(messageDateTime,&apos;msh-9&apos;)) 		{ currentHeader.messageDateTime= messageDateTime; }
		if(evaluate_defined_variable(messageControlId,&apos;msh-10&apos;)) 		{ currentHeader.messageControlId= messageControlId; }
	
		channelMap.put(&apos;currentHeader&apos;,currentHeader);
		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; currentHeader: &apos;+JSON.stringify(currentHeader)); }
	} // end if 
	
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg[EVN] length: &apos;+msg[&apos;EVN&apos;].length()); }
	
	if(msg[&apos;EVN&apos;].length()&gt;0) {
		
		// get EVN segment data
		var curEventTypeCode= msg[&apos;EVN&apos;][&apos;EVN.1&apos;].toString();
		var eventDateTime= msg[&apos;EVN&apos;][&apos;EVN.2&apos;][&apos;EVN.2.1&apos;].toString();
	
		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;: eventTypeCode= &apos;+curEventTypeCode+&apos; eventDateTime= &apos;+eventDateTime); }

		// collect the currentHeader Object Properties
		if(evaluate_defined_variable(curEventTypeCode,&apos;evn-1&apos;))	{ currentHeader.eventTypeCode= curEventTypeCode; }
		if(evaluate_defined_variable(eventDateTime,&apos;evn-2&apos;)) 		{ currentHeader.eventDateTime= eventDateTime; }
		
		channelMap.put(&apos;currentHeader&apos;,currentHeader);
		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; currentHeader: &apos;+JSON.stringify(currentHeader)); }
	} // end if 
	
	// new Header
	var newHeader= new Object();
	
	// global channel Map configuration specific to this channel referenced across all messages
	// pull the global channel map variable: gcSendingApplication
	if(evaluate_defined_variable($gc(&apos;gcSendingApplication&apos;),&apos;gcSendingApplication&apos;)) { 
		var sendingApplication= $gc(&apos;gcSendingApplication&apos;);
	} else {
		var sendingApplication= curSendingApplication;
	}
	// pull the global channel map variable: gcSendingFacility
	if(evaluate_defined_variable($gc(&apos;gcSendingFacility&apos;),&apos;gcSendingFacility&apos;)) { 
		var sendingFacility= $gc(&apos;gcSendingFacility&apos;);
	} else {
		var sendingFacility= curSendingFacility;
	}
	// pull the global channel map variable: gcReceivingApplication
	if(evaluate_defined_variable($gc(&apos;gcReceivingApplication&apos;),&apos;gcReceivingApplication&apos;)) { 
		var receivingApplication= $gc(&apos;gcReceivingApplication&apos;);
	} else {
		var receivingApplication= curReceivingApplication;
	}
	// pull the global channel map variable: gcReceivingFacility
	if(evaluate_defined_variable($gc(&apos;gcReceivingFacility&apos;),&apos;gcReceivingFacility&apos;)) { 
		var receivingFacility= $gc(&apos;gcReceivingFacility&apos;);
	} else {
		var receivingFacility= curReceivingFacility;
	}
	// pull the global channel map variable: gcMessageType
	if(evaluate_defined_variable($gc(&apos;gcMessageType&apos;),&apos;gcMessageType&apos;)) { 
		var messageType= $gc(&apos;gcMessageType&apos;);
	} else {
		var messageType= curMessageType;
	}
	var messageDateTime=  current_date_get_hl7_formatted_datetime(&apos;datetime&apos;);
	var messageControlId= UUIDGenerator.getUUID();
	var eventMessageType= messageType.toString().split(&apos;^&apos;)[1];
	var eventDateTime=    messageDateTime;

	if(msg[&apos;MSH&apos;].length()&gt;0) {
		// set newPatient Object
		newHeader.sendingApplication= 	sendingApplication;
		newHeader.sendingFacility=    	sendingFacility;
		newHeader.receivingApplication= 	receivingApplication;
		newHeader.receivingFacility= 		receivingFacility;
		newHeader.messageType=    		messageType;
		newHeader.messageDateTime= 		messageDateTime;
		newHeader.messageControlId=		messageControlId;
	}
	
	if(msg[&apos;EVN&apos;].length()&gt;0) { 
		newHeader.eventMessageType=		eventMessageType;
		newHeader.eventDateTime=			eventDateTime;
	}
	
	channelMap.put(&apos;newHeader&apos;,newHeader);
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; newHeader: &apos;+JSON.stringify(newHeader)); }

	// Populate tmp outbound message
	var tmp= msg;

	if(msg[&apos;MSH&apos;].length()&gt;0) {
		// Modify MSH segment values 
		tmp[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;]=   sendingApplication;
		tmp[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;]=   sendingFacility;
		tmp[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;]=   receivingApplication;
		tmp[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;]=   receivingFacility;
		tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;]=   messageDateTime;
		tmp[&apos;MSH&apos;][&apos;MSH.9&apos;]=   messageType;
		tmp[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]= messageControlId;
	}
	
	if(msg[&apos;EVN&apos;].length()&gt;0) {
		// Modify EVN segment values 
		tmp[&apos;EVN&apos;][&apos;EVN.1&apos;]= eventMessageType;
		tmp[&apos;EVN&apos;][&apos;EVN.2&apos;][&apos;EVN.2.1&apos;]= eventDateTime;	
	}
	
	channelMap.put(&apos;anonymizedHeader&apos;,tmp);
	
	return tmp;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>18aafbe5-d45c-4a6c-a124-82883fa03475</id>
                <name>anonymize_hl7_patient_demographics</name>
                <revision>6</revision>
                <lastModified>
                  <time>1672776775880</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** This script handles the transformation to anonymize HL7 message patient demographics

	@param {String} msg - provide the hl7 message to have the patient demographics anonmymized
	@return {String} return description

	scriptName:	anonymize_hl7_patient_demographics.js
	desc:		This script handles the transformation to anonymize HL7 message patient demographics
	date:		2022-05-36 
	history:
	2023-01-03 JER - Modified from patient.encounter to patient.account
	2022-08-12 JER - Added the Alternate Patient Id PID-4
	2022-07-13 JER - Modified this script as a code_template function
	2022-04-15 JER - created from the convert_RDS_HL7_to_JSON script
*/
function anonymize_hl7_patient_demographics(msg) {

	var scriptName= &quot;anonymize_hl7_patient_demographics&quot;;
	var debug= 0;
	var currentPatient= new Object();
	var newPatient= new Object();

	var patientId= msg[&apos;PID&apos;][&apos;PID.3&apos;][0][&apos;PID.3.1&apos;].toString();
	// 2022-08-12 JER - Added the Alternate Patient Id PID-4
	var altPatientId= msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString();
	var lastName= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString();
	var firstName= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString();
	var dateOfBirth= msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();
	var gender= msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString();
	var account= msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();

	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;: patientId= &apos;+patientId+&apos; lastName= &apos;+lastName+&apos; firstName= &apos;+firstName+&apos; dateOfBirth= &apos;+dateOfBirth+&apos; gender=&apos;+gender+&apos; account= &apos;+account); }

	// collect the currentPatient Object Properties
	currentPatient.patientId= patientId;
	// 2022-08-12 JER - Added the Alternate Patient Id PID-4
	currentPatient.altPatientId= altPatientId;
	currentPatient.lastName= lastName;
	currentPatient.firstName= firstName;
	currentPatient.dateOfBirth= dateOfBirth;
	currentPatient.gender= gender;
	currentPatient.account= account;
	channelMap.put(&apos;currentPatient&apos;,currentPatient);
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; currentPatient: &apos;+JSON.stringify(currentPatient)); }

	// global channel Map configuration specific to this channel referenced across all messages
	var patientLastName= 	channelMap.get(&apos;lPatientLastName&apos;).toString();
	var patientFirstName=	channelMap.get(&apos;lPatientFirstName&apos;).toString();
	var patientDateOfBirth=	channelMap.get(&apos;lPatientDateOfBirth&apos;).toString();

	var patientId= 		channelMap.get(&apos;lPatientIdPrefix&apos;).toString()+random_generator(4);
	// 2022-08-12 JER - Added the Alternate Patient Id PID-4
	var altPatientId= 		patientId;
	var patientAccount= 	channelMap.get(&apos;lPatientIdPrefix&apos;).toString()+random_generator(8);
	var patientLastName= 	patientLastName+&apos;&apos;+random_generator(4);
	var patientFirstName= 	patientFirstName+&apos;&apos;+random_generator(4);

	// determine FullYear, Month and Day
	var strFullYear=		patientDateOfBirth.substring(0,4);
	var strMonth=			patientDateOfBirth.substring(4,6);
	var strDay=			patientDateOfBirth.substring(6,8);
	// randomDateAfterDate(new Date(2021, 4, 5), -365)
	var patientDateOfBirth= random_date_after_date(new Date (strFullYear, strMonth, strDay), 3650, scriptName);

	var patientGender= Math.random();
	if(patientGender&lt;0.5) { patientGender= &apos;M&apos;; } else { patientGender= &apos;F&apos;; }

	// set newPatient Object
	newPatient.patientId= patientId;
	// 2022-08-12 JER - Added the Alternate Patient Id PID-4
	newPatient.altPatientId= altPatientId;
	newPatient.lastName=  patientLastName;
	newPatient.firstName= patientFirstName;
	newPatient.dateOfBirth= patientDateOfBirth;
	newPatient.gender=    patientGender;
	newPatient.account= patientAccount;
	channelMap.put(&apos;newPatient&apos;,newPatient);
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; newPatient: &apos;+JSON.stringify(newPatient)); }

	var tmp= msg;

	// Modify PID segment values - Patient Id (PID.3.1)
	tmp[&apos;PID&apos;][&apos;PID.3&apos;][0][&apos;PID.3.1&apos;]= patientId;
	// 2022-08-12 JER - Added the Alternate Patient Id PID-4
	tmp[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;]= altPatientId;
	tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;]= patientLastName;
	tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;]= patientFirstName;
	tmp[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;]= patientDateOfBirth;
	tmp[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;]= patientGender;
	tmp[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;]= patientAccount;
	tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.9&apos;][&apos;PID.5.9.2&apos;]=&apos;ANONYMIZED&apos;;
	
	channelMap.put(&apos;anonymizedMessage&apos;,tmp);
	
	return tmp;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>26b03c12-8952-4f83-90ec-0983da5de727</id>
                <name>anonymize_hl7_patient_encounter</name>
                <revision>9</revision>
                <lastModified>
                  <time>1672776857338</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** This script handles the transformation to anonymize HL7 message patient encounter visit information
	@param {String} msg - provide the hl7 message to have the patient encounter anonmymized
	@return {String} return description

	scriptName:	anonymize_hl7_patient_encounter.js
	desc:		This script handles the transformation to anonymize HL7 message encounter visit information
	date:		2022-05-36 
	history:
	2023-01-03 JER - Modified to include the random_generator function for the encounter number
	2022-08-12 JER - Created from the anonmymize_hl7_patient_demographics function
*/
function anonymize_hl7_patient_encounter(msg) {

	var scriptName= &quot;anonymize_hl7_patient_encounter&quot;;
	var debug= 0;
	var currentEncounter= new Object();
	var newEncounter= new Object();
	
	for each(child in msg) {
		if(typeof(msg[&apos;encounter&apos;])!== &apos;undefined&apos;) {
			currentEncounter= msg[&apos;encounter&apos;];
		} // end if 
	} // end for each
	
	// get GlobalMap gLocationUnits (array)
	// gLocationUnits= [&apos;ABC&apos;,&apos;BCD&apos;,&apos;CDE&apos;,&apos;DEF&apos;,&apos;EFG&apos;,&apos;FGH&apos;,&apos;GHI&apos;,&apos;HIJ&apos;,&apos;IJK&apos;,&apos;JKL&apos;];
	var arrLocationUnits=  			$g(&apos;gLocationUnits&apos;);
	// if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; arrLocationUnits typeof:&apos;+typeof(arrLocationUnits)+&apos; length: &apos;+arrLocationUnits.length+&apos; valueOf: &apos;+arrLocationUnits.toString()+&apos; json: &apos;+JSON.stringify(arrLocationUnits)); 
	// } // end if 
 	var encounterCurrentUnit= 		arrLocationUnits[Math.floor(Math.random()*arrLocationUnits.length)];
	newEncounter.unit= encounterCurrentUnit;
	
	var encounterCurrentRoom= 		encounterCurrentUnit+&apos;&apos;+random_generator(4);
	newEncounter.room= 				encounterCurrentRoom;
	var encounterCurrentBed=   		random_generator(2);
	newEncounter.bed=  				encounterCurrentBed;
	var encounterCurrentFacility= 	$g(&apos;gSendingFacility&apos;);
	newEncounter.facility=			encounterCurrentFacility;
	
	if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;]) {
		if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.1&apos;]) { 
			var encounterPriorUnit= 		msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.1&apos;].toString(); 
			newEncounter.prior_unit=		encounterPriorUnit;
		}
		if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.2&apos;]) { 
			var encounterPriorRoom= 		msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.2&apos;].toString(); 
			newEncounter.prior_room=		encounterPriorRoom;
		}
		if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.3&apos;]) { 
			var encounterPriorBed= 			msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.3&apos;].toString();
			newEncounter.prior_bed=			encounterPriorBed;
		}
		if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.4&apos;]) { 
			var encounterPriorFacility= 	msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.4&apos;].toString(); 
			newEncounter.prior_facility=	encounterPriorFacility;
		}
	} // end if 

	// 2023-01-03 JER - Modified to include the random_generator function for the encounter number
	if(msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;]) { 
		var encounterVisitNumber= 		msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString().substring(0,5)+&apos;&apos;+random_generator(4); 
		newEncounter.encounter_identifier=	encounterVisitNumber;
	}

	if(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;]) { 
		var encounterAdmissionDate= 	msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString();
		// determine FullYear, Month and Day
		var strFullYear=				encounterAdmissionDate.substring(0,4);
		var strMonth=					encounterAdmissionDate.substring(4,6);
		var strDay=					encounterAdmissionDate.substring(6,8);
		// randomDateAfterDate(new Date(2021, 4, 5), -365)
		var encounterAdmissionDate= 		random_date_after_date(new Date (strFullYear, strMonth, strDay), 20, scriptName);
		newEncounter.admissionDate=		encounterAdmissionDate;
	} // end if
	
	channelMap.put(&apos;anonymizedVisit&apos;,newEncounter);
	
	var tmp= msg;

	// Modify PV1 segment values
	// Current Location PV1-3
	if(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;]= encounterCurrentUnit; }
	if(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;]= encounterCurrentRoom; }
	if(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.3&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.3&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.3&apos;]= encounterCurrentBed;  }
	if(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;]= encounterCurrentFacility; }
	
	// Prior Location PV1-6
	if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.1&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.1&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.1&apos;]= encounterPriorUnit; }
	if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.2&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.1&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.2&apos;]= encounterPriorRoom; }
	if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.3&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.3&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.3&apos;]= encounterPriorBed;  }
	if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.4&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.4&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.4&apos;]= encounterPriorFacility; }
	
	// Encounter/Visit Number  PV1-19
	if(msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;]= encounterVisitNumber; }

	// Admission Date  PV1-44
	if(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;]= encounterAdmissionDate; }
	
	channelMap.put(&apos;anonymizedEncounter&apos;,tmp);
	
	return tmp;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>89fd6e70-b6b2-4060-a02a-56d7b127ae0c</id>
                <name>anonymize_hl7_patient_orders</name>
                <revision>12</revision>
                <lastModified>
                  <time>1660259288379</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** This script handles the transformation to anonymize HL7 message patient orders

	@param {String} msg - provide the hl7 message to have the patient RDE orders anonmymized
	@return {String} return description

	scriptName:	anonymize_hl7_patient_orders.js
	desc:		This script handles the transformation to anonymize HL7 message patient orders
	date:		2022-05-36 
	history:
	2022-07-13 JER - Modified this script as a code_template function
	2022-04-15 JER - created from the convert_RDS_HL7_to_JSON script
*/
function anonymize_hl7_patient_orders(msg) {

	var scriptName= &quot;anonymize_hl7_patient_orders&quot;;
	var debug= 0;
	var currentOrder= new Object();
	var newOrder= new Object();

	// get newPatient Object
	var objPatient= channelMap.get(&apos;newPatient&apos;);
	var patientId= objPatient.patientId.toString();
	var patientName= objPatient.firstName.toString()+&apos; &apos;+objPatient.lastName.toString();

	// ORC
	if(msg[&apos;ORC&apos;]) { 
		var orderFillerNumber= random_generator(9);
		// var orderFillerNumber= msg[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;ORC.3.1&apos;].toString();
		var orderTransactionDateTime= (new Date()).toISOString().replace(/[^0-9]/g,&apos;&apos;).slice(0,-3);
		var orderEffectiveDateTime= orderTransactionDateTime;
		//var orderTransactionDateTime= msg[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;].toString();
		//var orderEffectiveDateTime= msg[&apos;ORC&apos;][&apos;ORC.15&apos;][&apos;ORC.15.1&apos;].toString();
	}
	// RXO
	if(msg[&apos;RXO&apos;]) {
		var requestTreatmentOrderIdentifier= random_generator(11);
		// var requestTreatmentOrderIdentifier= msg[&apos;RXO&apos;][&apos;RXO.1&apos;][&apos;RXO.1.1&apos;].toString();
	}
	// RXE
	if(msg[&apos;RXE&apos;]) { 
		// var encodedTreatmentOrderIdentifier= msg[&apos;RXE&apos;][&apos;RXE.2&apos;][&apos;RXE.2.1&apos;].toString();
		var encodedTreatmentOrderIdentifier= requestTreatmentOrderIdentifier;
		// var encodedAlternateTreatmentOrderIdentifier= msg[&apos;RXE&apos;][&apos;RXE.2&apos;][&apos;RXE.2.4&apos;].toString();
		var encodedAlternateTreatmentOrderIdentifier= requestTreatmentOrderIdentifier;
		// ((new Date())+1).toISOString().replace(/[^0-9]/g,&apos;&apos;).slice(0,-3);
		// var doseDispensedDateTime= msg[&apos;RXE&apos;][&apos;RXE.18&apos;][&apos;RXE.18.1&apos;].toString();
		var doseDispensedDateTime= ((new Date())+1).toISOString().replace(/[^0-9]/g,&apos;&apos;).slice(0,-3);
		// var originalOrderedDateTime= msg[&apos;RXE&apos;][&apos;RXE.32&apos;][&apos;RXE.32.1&apos;].toString();
		var originalOrderedDateTime= orderTransactionDateTime
	}
	// TQ1
	if(msg[&apos;TQ1&apos;].length()&gt;1) {
		var arrTQ1Segment= new Array();
		for each(tq1 in msg[&apos;TQ1&apos;]) {
			arrTQ1Segment.push(tq1[&apos;TQ1.8&apos;][&apos;TQ1.8.1&apos;].toString());&#xd;
		}
		var orderTimingEndDate= arrTQ1Segment;
	} else if(msg[&apos;TQ1&apos;]) { 
		var orderTimingEndDate= msg[&apos;TQ1&apos;][&apos;TQ1.8&apos;][&apos;TQ1.8.1&apos;].toString()
	}

	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos;: patientName: &apos;+patientName+&apos; patientId: &apos;+patientId+&apos; orderFillerNumber= &apos;+orderFillerNumber+&apos; orderTransactionDateTime= &apos;+orderTransactionDateTime+&apos; requestTreatmentOrderIdentifier= &apos;+requestTreatmentOrderIdentifier); 
	}

	// collect the currentPatient Object Properties
	currentOrder.orderFillerNumber= orderFillerNumber;
	currentOrder.requestTreatmentOrderIdentifier= requestTreatmentOrderIdentifier;
	currentOrder.encodedTreatmentOrderIdentifier= encodedTreatmentOrderIdentifier;
	currentOrder.encodedAlternateTreatmentOrderIdentifier= encodedAlternateTreatmentOrderIdentifier;
	//
	currentOrder.orderTransactionDateTime= orderTransactionDateTime;
	currentOrder.orderEffectiveDateTime= orderEffectiveDateTime;
	currentOrder.doseDispensedDateTime= doseDispensedDateTime;
	currentOrder.originalOrderedDateTime= originalOrderedDateTime;
	currentOrder.orderTimingEndDate= orderTimingEndDate;

	channelMap.put(&apos;currentOrder&apos;,currentOrder);
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; currentOrder: &apos;+JSON.stringify(currentOrder)); }

	// var newDate= new Date(new Date() - Math.random()*(1e+12));
	// determine FullYear, Month and Day
	var newDate= 			new Date();
	var strFullYear=		newDate.getFullYear();
	var strMonth=			newDate.getMonth();
	var strDay=			newDate.getDate();
	// randomDateAfterDate(new Date(2021, 4, 5), -365)
	var newRandomDate= random_date_after_date(new Date (strFullYear, strMonth, strDay), 3650, scriptName);
	
	var newOrderFillerNumber= 					newRandomDate.substring(0,8).toString()+random_generator(5);
	var newRequestTreatmentOrderIdentifier= 		random_generator(5)+newRandomDate.substring(0,8).toString();
	var newEncodedTreatmentOrderIdentifier= 		newRequestTreatmentOrderIdentifier;
	var newEncodedAlternateTreatmentOrderIdentifier= 	newRequestTreatmentOrderIdentifier;

	var newOrderTransactionDateTime= newRandomDate;
	var newOrderEffectiveDateTime= newRandomDate;
	var newDoseDispensedDateTime= newRandomDate;
	var newOriginalOrderedDateTime= newRandomDate;
	var newOrderTimingEndDate= newRandomDate;

	// set newPatient Object
	// newOrder.orderFillerNumber= newOrderFillerNumber;
	newOrder.orderFillerNumber= orderFillerNumber;
	//newOrder.requestTreatmentOrderIdentifier=  newRequestTreatmentOrderIdentifier;
	//newOrder.encodedTreatmentOrderIdentifier= newEncodedTreatmentOrderIdentifier;
	//newOrder.encodedAlternateTreatmentOrderIdentifier= newEncodedAlternateTreatmentOrderIdentifier;
	newOrder.requestTreatmentOrderIdentifier=  requestTreatmentOrderIdentifier;
	newOrder.encodedTreatmentOrderIdentifier= encodedTreatmentOrderIdentifier;
	newOrder.encodedAlternateTreatmentOrderIdentifier= encodedAlternateTreatmentOrderIdentifier;
	
	newOrder.orderTransactionDateTime= newOrderTransactionDateTime;
	newOrder.orderEffectiveDateTime= newOrderEffectiveDateTime;
	newOrder.doseDispensedDateTime= newDoseDispensedDateTime;
	newOrder.originalOrderedDateTime= newOriginalOrderedDateTime;
	newOrder.orderTimingEndDate= newOrderTimingEndDate;
	
	channelMap.put(&apos;newOrder&apos;,newOrder);
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; newOrder: &apos;+JSON.stringify(newOrder)); }

	var tmp= msg;

	// Modify PID segment values - Patient Id (PID.3.1)
	tmp[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;ORC.3.1&apos;]= newOrderFillerNumber;
	tmp[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;]= newOrderTransactionDateTime;
	tmp[&apos;ORC&apos;][&apos;ORC.15&apos;][&apos;ORC.15.1&apos;]= newOrderEffectiveDateTime= 
	// RXO
	tmp[&apos;RXO&apos;][&apos;RXO.1&apos;][&apos;RXO.1.1&apos;]= newRequestTreatmentOrderIdentifier;
	// RXE
	tmp[&apos;RXE&apos;][&apos;RXE.2&apos;][&apos;RXE.2.1&apos;]= newEncodedTreatmentOrderIdentifier;
	tmp[&apos;RXE&apos;][&apos;RXE.2&apos;][&apos;RXE.2.4&apos;]= newEncodedAlternateTreatmentOrderIdentifier; 
	tmp[&apos;RXE&apos;][&apos;RXE.18&apos;][&apos;RXE.18.1&apos;]= newDoseDispensedDateTime;
	tmp[&apos;RXE&apos;][&apos;RXE.32&apos;][&apos;RXE.32.1&apos;]= newOriginalOrderedDateTime;
	// TQ1
	// 2022-07-19 JER - handling multiple TQ1 segments
	if(typeof(orderTimingEndDate)== object) {
		if(orderTimingEndDate.length()&gt;1) {
			for each(var i= 0;i&lt;orderTimingEndDate.length();i++) {
				tmp[&apos;TQ1&apos;][&apos;TQ1.8&apos;][&apos;TQ1.8.1&apos;]= newOrderTimingEndDate;
			}
		}
	}
	tmp[&apos;TQ1&apos;][&apos;TQ1.8&apos;][&apos;TQ1.8.1&apos;]= newOrderTimingEndDate;
	tmp[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;ORC.2.1&apos;]=&apos;ANONYMIZED&apos;;
	
	channelMap.put(&apos;anonymizedOrder&apos;,tmp);
	
	return tmp;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>72074d1d-7b19-4ac5-b9fb-e0b5df689f09</id>
                <name>current_date_get_hl7_formatted_datetime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1658181750434</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function when called with the desired datetime type of either: DATE (YYYYMMDD), TIME (HHMMSS) or 
	DATETIME (YYYYMMDDHHMMSS) from the current Date() function
	scriptName - current_date_get_hl7_formatted_datetime.js
	
	@param {type} string - provided the desired type 
	@return {string} - return the new Date() string per the provided argument type
*/
function current_date_get_hl7_formatted_datetime(type) {
	// TODO: Enter code here

	if(typeof(type) !== &apos;undefined&apos;) {
		if(type.toString().toUpperCase()== &apos;DATE&apos;) {
			return new Date().toISOString().split(&apos;T&apos;)[0].replace(/-/g,&quot;&quot;);
		} else if (type.toString().toUpperCase()== &apos;TIME&apos;) {
			return new Date().toISOString().split(&apos;T&apos;)[1].substring(0,8).replace(/:/g,&quot;&quot;);
		} else if (type.toString().toUpperCase()== &apos;DATETIME&apos;) {
			return new Date().toISOString().split(&apos;T&apos;)[0].replace(/-/g,&quot;&quot;)+&apos;&apos;+new Date().toISOString().split(&apos;T&apos;)[1].substring(0,8).replace(/:/g,&quot;&quot;);;
		} else {
			return new Date().toISOString().split(&apos;T&apos;)[0].replace(/-/g,&quot;&quot;)+&apos;&apos;+new Date().toISOString().split(&apos;T&apos;)[1].substring(0,8).replace(/:/g,&quot;&quot;);;
		}
	} else {
		return new Date().toISOString().split(&apos;T&apos;)[0].replace(/-/g,&quot;&quot;)+&apos;&apos;+new Date().toISOString().split(&apos;T&apos;)[1].substring(0,8).replace(/:/g,&quot;&quot;);;
	}
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>ee6d8602-9775-4858-8960-ddc7acbd4a18</id>
                <name>evaluate_defined_variable</name>
                <revision>16</revision>
                <lastModified>
                  <time>1658190842389</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** This script handles the evaluate a variable to determine if defined or undefined for an Javascript object

	@param {String} msg - provide the hl7 message to have the patient demographics anonmymized
	@return {String} return description

	scriptName:	evaluate_defined_variable.js
	desc:		This script handles the evaluation of variables to determine the typeof and toString().length GT 0
	date:		2022-05-36 
	history:
	2022-07-13 JER - Modified this script as a code_template function
	2022-04-15 JER - created from the convert_RDS_HL7_to_JSON script
*/
function evaluate_defined_variable(element, elementName) {
	var scriptName= &apos;evaluate_defined_variable&apos;;
	var debug= 0;
	var definedResult= true;
	var debugStatement= &apos;DEBUG::&apos;+scriptName+&apos; evaluate of element &apos;+elementName+&apos; for typeof(element): &apos;+typeof(element); 
	if(debug&gt;0) { logger.info(&apos;DEBUG::&apos;+scriptName+&apos; evaluate element: &apos;+element); }
	
	
	if(typeof(element) !== &apos;undefined&apos;) {
		if(debug&gt;0) { logger.error(debugStatement); }
		if(typeof(element)== &apos;object&apos;) {
			
			if(debug&gt;0) { logger.error(debugStatement+&apos; A evaluate the current element value: &apos;+element+&apos; JSON: &apos;+JSON.stringify(element)+&apos; EQ null: &apos;+element=== null); }
			
			if(JSON.stringify(element).toString().length&lt;1) {
				if(debug&gt;0) { logger.error(debugStatement+&apos; B FAILS as JSON.stringify.length LT 1 &apos;+JSON.stringify(element).length); }
				definedResult= false;
			} else if(element=== null) {
				if(debug&gt;0) { logger.error(debugStatement+&apos; B1 FAILS as JSON.stringify EQ NULL &apos;+JSON.stringify(element).length); }
				definedResult= false;
			} else {
				if(debug&gt;0) { logger.error(debugStatement+&apos; C SUCCESS as JSON.stringify.length GT 0 &apos;+JSON.stringify(element).length); }
			}
		} else if(element.toString().length&lt;1) {
			if(debug&gt;0) { logger.error(debugStatement+&apos; D FAILS as toString.length LT 1 &apos;+element.toString().length); }
			definedResult= false;
		} else if(element=== null) {
			if(debug&gt;0) { logger.error(debugStatement+&apos; D1 FAILS as toString EQ NULL &apos;+element.toString()); }
			definedResult= false;
		} else {
			if(debug&gt;0) { logger.error(debugStatement+&apos; E SUCCESS as toString.length GT 0 &apos;+element.toString().length); }
		}
	} else {
		if(debug&gt;0) { logger.error(debugStatement+&apos; F FAILS with undefined value.&apos;); }
		definedResult= false;
	}
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; G definedResult for &apos;+elementName+&apos;= &apos;+definedResult); }
	
	return definedResult;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>3ccaaba3-264d-4b3d-88ec-897890c7a8b1</id>
                <name>random_date_after_date</name>
                <revision>7</revision>
                <lastModified>
                  <time>1658191300791</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function will produce a random date based on a provided date and number of days argument.

	@param {String} start - enter the starting date (&apos;YYYY&apos;, &apos;MM&apos;, &apos;DD&apos;) (e.g. &apos;2021&apos;, &apos;09&apos;, &apos;13&apos;)
	@param {String} days -  number of days (positive or negative) (e.g. 365, 3000, -365)
	@return {String} return description
*/
function random_date_after_date(start, days, inScriptName) {
	
	// randomDateAfterDate(new Date(2021, 4, 5), -365) 
	var scriptName= &apos;random_date_after_date&apos;;
	var debug= 0;
	
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; originating from: &apos;+inScriptName+&apos; typeof(start)= &apos;+typeof(start)+&apos; start= &apos;+start+&apos; number of days= &apos;+days+ &apos; typeof(days)= &apos;+typeof(days)); }

	var startDate= new Date(start);
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(startDate)= &apos;+typeof(startDate)+&apos; startDate= &apos;+startDate); }
	
	var strRandom= Math.random()*days*24*60*60*1000;
	var newDate= new Date(start.getTime() + strRandom);
	// Fri Jun 26 2020 08:59:35 GMT-0600 (GMT-06:00)
	var strDate= newDate.getFullYear() + &quot;&quot; + addLeadingZeros(newDate.getMonth() + 1) + &quot;&quot; + addLeadingZeros(newDate.getDate());
	
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; random date generated: &apos;+strDate); }

	return strDate;
}

function addLeadingZeros(n) {
  
  if (n &lt;= 9) {
    return &quot;0&quot; + n;
  }
  
  return n;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>cb5f5610-99ca-4709-9666-46f7c681afaa</id>
                <name>random_generator</name>
                <revision>1</revision>
                <lastModified>
                  <time>1657634910756</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function will produce a random number based on the number of characters provided into the numOfChars argument.

	@param {String} numOfChars - enter the number of random characters to be returned
	@return {String} return description
*/
function random_generator(numOfChars) {
	var scriptName= &apos;random_generator&apos;;
	var debug= 0;
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; evaluate number of characters: &apos;+numOfChars);
	}
	
	var strNumOfChars= &apos;&apos;+numOfChars+&apos;&apos;;
	var cntNumOfChars= strNumOfChars.padEnd(numOfChars,0);
	var strRandom= (Math.random()*cntNumOfChars).toFixed();
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; random number generated: &apos;+strRandom);
	}
	
	return strRandom;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
            <name>WebPT-Common</name>
            <revision>2</revision>
            <lastModified>
              <time>1678715257049</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
                <name>Check if String contains</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122790</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
                <name>Check if String contains HTTP code</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122593</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>8515e088-5c50-47ee-9e2f-9fad1ecf48bd</id>
                <name>Check if String is JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123309</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Added by Kirby Knight
	12/21/2020
	Test for JSON

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5f2f84ba-3e66-4be3-8260-8fbd8258bd92</id>
                <name>Check if the PDF is valid</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122055</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
//This function is used for checking the word &quot;PDF&quot; in inbound attachment.
function isValidBase64PDF(base64) {
	const ENCODED_PDF_SIGN = &quot;JVBERi&quot;; // %PDF sign
	const PDF_EOF = &quot;JSVFT0YNCg&quot;; // %EOF
	var pdfBase64Size = (base64.length() * (3 / 4)) - 1;
	
	return (base64.indexOf(ENCODED_PDF_SIGN) != -1 &amp;&amp; base64.indexOf(PDF_EOF) != -1 &amp;&amp; pdf_base64_size &gt; 36);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
                <name>Convert JSON date to HL7v2 date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122137</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
                <name>Convert JSON datetime to HL7v2 datetime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122430</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>bb21449a-df39-48c6-be52-24106c8df4c4</id>
                <name>Destination Formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Kirby Knight 03/10/2021
	
	This function will remove all other ROOT.Meta.Destinations nodes that are not passed in the
	destination variable and removes the ROOT.Meta.Destinations[x].Destination node

	@param {Any} destination - 
	@return {String} return description
*/
function formatDestinations(destination) {
var arrDestinations = msg[&apos;Meta&apos;][&apos;Destinations&apos;];
	//  Start at the end of the array because of the posibility of deleted array items 
	for (var i = arrDestinations.length - 1; i &gt;= 0; i--) {
		if (arrDestinations[i][&apos;Destination&apos;] == destination){
			delete arrDestinations[i][&apos;Destination&apos;]
		}else if (arrDestinations[i][&apos;Destination&apos;] != destination){
			arrDestinations.splice(i, 1);
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
                <name>Extract JSON node data</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121748</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7ed44f8a-fa40-4f3e-9426-3021604eabe0</id>
                <name>Get Feature Value by Name and Database</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123262</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns a string containing the feature value (system property) for a specific client database.

	@param {String} featureName - name of the feature, ie: &quot;BetterPTBidirectionalScheduling&quot;
	@param {String} databaseIdentifier - database name or databaseID / TenantID
	@param {String} databaseIdentifierType - what value is provided in databaseIdentifier. current options include &quot;ID&quot; or &quot;NAME&quot;
	@return {String} returns feature value
*/
function getFeatureValueByNameDatabase(featureName, databaseIdentifier, databaseIdentifierType) {
	var paramList = new Packages.java.util.ArrayList();
	paramList.add(featureName);
	paramList.add(databaseIdentifier);
	paramList.add(databaseIdentifierType);
	
	var sSQL = &apos;EXEC [dbo].[pr_FeatureValueByNameDatabase] ?, ?, ?&apos;;
	
	try {
		var result = executeSharedDBStatementFhirCh(sSQL, true, paramList);
		var featureValue ;
		if(result.next()){			//Added
		 featureValue = result.getString(1);
		}
		return featureValue;
	} catch (e) {
		logger.error(e);
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>9842be2c-c633-42ac-87f1-f91aca9e370f</id>
                <name>JSON Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121776</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function populates the MR and PI patient IDS to channelMap

	@return {String} return description
*/
function jsonPatientIds() {
	for each (patId in msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) {
	if (patId[&apos;IDType&apos;].toString() == &apos;MR&apos;){
		channelMap.put(&apos;extPatId&apos;, patId[&apos;ID&apos;].toString());
	}else if(patId[&apos;IDType&apos;].toString() == &apos;PI&apos;){
		channelMap.put(&apos;patId&apos;, patId[&apos;ID&apos;].toString());
	}
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
                <name>Verify JSON node for existance</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>394664c0-d536-4310-970e-181dc03ee7da</id>
            <name>WebPT-Conversions</name>
            <revision>2</revision>
            <lastModified>
              <time>1690140133427</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
                <name>Convert FHIR codes to HL7v2 codes</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122899</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>2fc8cbf3-0d92-4d1d-a3d6-136c09bd9f2a</id>
            <name>WebPT-Custom Database Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1703964939898</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>23c0b510-63e4-40fa-a4e1-7b2b92ce9a96</id>
                <name>Execute Statement Shared DB Conn clientDb Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122401</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Executes a SQL statement using a shared database connection stored in the Global Map. If the
connection does not exist, creates it.

@param {String} statement - The SQL statement to execute
@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
@param {List} paramList - A Java List object containing the parameters for the statement (optional)
 */
function executeSharedDBStatementclientDbCh(statement, isQuery, paramList) {
    var result;

    try {
        var dbConnclientDbCh = globalChannelMap.get(&quot;dbConnclientDbCh&quot;);

        if (dbConnclientDbCh == null || dbConnclientDbCh.getConnection().isClosed()) {
            dbConnclientDbCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;), $(&apos;dbClient&apos;), $(&apos;dbUserFhir&apos;), $(&apos;dbPwFhir&apos;));
            globalChannelMap.put(&quot;dbConnclientDbCh&quot;, dbConnclientDbCh);
        }

        if (paramList == undefined) {
            paramList = new Packages.java.util.ArrayList();
        }

        if (isQuery) {
            result = dbConnclientDbCh.executeCachedQuery(statement, paramList);
        } else {
            result = dbConnclientDbCh.executeUpdate(statement, paramList);
        }
    } catch (e) {
        logger.error(e);
    }
    finally {
        return result;
    }
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>4efb3110-a83f-48b5-93ad-79c847b51865</id>
                <name>Execute Statement Shared DB Conn clntAcl Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123455</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClntAclCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnClntAclCh = globalChannelMap.get(&quot;dbConnClntAclCh&quot;);

		if (dbConnClntAclCh == null || dbConnClntAclCh.getConnection().isClosed())
		{
			dbConnClntAclCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbClntAcl&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnClntAclCh&quot;, dbConnClntAclCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnClntAclCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnClntAclCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>d96d45dd-57f7-4aa9-9bf4-e464d31b94c6</id>
                <name>Execute Statement Shared DB Conn FHIR</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121922</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhir(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhir.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhir.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6014068e-c021-4a38-9fa6-6f38f6a2cdab</id>
                <name>Execute Statement Shared DB Conn FHIR Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123492</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhirCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhirCh = globalChannelMap.get(&quot;dbConnFhirCh&quot;);

		if (dbConnFhirCh == null || dbConnFhirCh.getConnection().isClosed())
		{
			dbConnFhirCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnFhirCh&quot;, dbConnFhirCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhirCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhirCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fbd5c4a1-b816-4496-acdf-067005f1d376</id>
                <name>Execute Statement Shared DB Conn Translations Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123008</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementTranslationsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnTranslationsCh = globalChannelMap.get(&quot;dbConnTranslationsCh&quot;);

		if (dbConnTranslationsCh == null || dbConnTranslationsCh.getConnection().isClosed())
		{
			dbConnTranslationsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlTranslations&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnTranslationsCh&quot;, dbConnTranslationsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnTranslationsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnTranslationsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5d1a5577-4ba4-4d1e-b6cd-e2d924164909</id>
                <name>Execute Statement with Shared DB Conn ODS Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122280</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdsCh = globalChannelMap.get(&quot;dbConnOdsCh&quot;);

		if (dbConnOdsCh == null || dbConnOdsCh.getConnection().isClosed())
		{
			dbConnOdsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOds&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdsCh&quot;, dbConnOdsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>3991db14-0c0b-4123-952c-5164c1ded501</id>
                <name>Execute Statement with Shared DB Conn ODW Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122960</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.  THis connects to the ODW db in Azure

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdwCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdwCh = globalChannelMap.get(&quot;dbConnOdwCh&quot;);

		if (dbConnOdwCh == null || dbConnOdwCh.getConnection().isClosed())
		{
			dbConnOdwCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOdw&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdwCh&quot;, dbConnOdwCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdwCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdwCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fae08c88-7550-479a-b8ed-ffef47e8eed9</id>
                <name>executeSharedDBStatementClient</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121956</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClient(statement, isQuery, paramList, dbname)
{
	var result;
 	var dburl= &apos;jdbc:sqlserver://AZW1DEV-SQL02.clinicient.com:1433;databaseName=&apos;+dbname+&apos;&apos;;
	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),dburl,$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			
			//globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		result = dbConnFhir.executeCachedQuery(statement);
	
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>ed20a457-5beb-4aea-9bb9-cf91112ccc56</id>
            <name>WebPT-Default Functions</name>
            <revision>10</revision>
            <lastModified>
              <time>1690140133487</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>a8a9a0c8-9322-46dc-bef8-011eb3d70291</id>
                <name>Create Header for CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121678</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This creates a header for csv files based on the contents of the header variable.  The header
	variable is populated in the channel from the outbound msg template

	@return {String} return description
*/
function createHeader() {
	//Destination transformer.  this creates the header for each new file

	var path = java.nio.file.Paths.get($(&apos;filePath&apos;)+$(&apos;fileName&apos;));
	var bytes = (new java.lang.String($(&apos;header&apos;))).getBytes(&quot;UTF-8&quot;);
	try {
	  java.nio.file.Files.write(path, bytes, java.nio.file.StandardOpenOption.CREATE_NEW);
	}
	catch (e) {
	  //logger.info(&quot; should throw IOException if file already exists&quot;);
	
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5a886a1f-dab1-41b5-94c6-1a639907d7da</id>
                <name>Filter Message Evaluate Received Checksum</name>
                <revision>33</revision>
                <lastModified>
                  <time>1678916806664</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating a checksum for each provided message.  We save off the most recent 100 unique checksum values in a global 
	array so if the current message has been recently received we are able to ignore it.
	
	@author:  	Jeffrey Ritz
	@scriptName: 	filterEvaluateReceivedChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {boolean} filter - return filter boolean (true= filter msg, false= do not filter msg)
		persist received_checksum global ChannelMap array
		persist filterMessage ChannelMap variable
	@history
*/
function filterEvaluateReceivedChecksum(msg) {	

	var scriptName= &apos;filterEvaluateReceivedChecksum&apos;
	var filter = false;
	var received_len_limit = 999;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B connectorMessage.getRawData() typeof: &apos;+typeof(connectorMessage.getRawData())+&apos; msg: &apos;+connectorMessage.getRawData());
	} // end if 
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	// var dataBytes = new java.lang.String(connectorMessage.getRawData()).getBytes(&apos;UTF-8&apos;);
	// message = new String(message.getBytes(&quot;utf-8&quot;), &quot;utf-8&quot;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	// var dataBytes = new java.lang.String(msg.getBytes(&apos;UTF-8&apos;));
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);

	// var messageObjectgetBytes= checksum.update(connectorMessage.getRawData().getBytes());
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 
	
	$c(&apos;checksum&apos;, checksum.getValue());
	
	//grab the global channel map variable holding the last X unique checksums that we&apos;ve received
	var received = $gc(&apos;received_checksums&apos;);
	
	if (received == undefined) {
		var received = new Array();
		received.push(checksum.getValue());
	} else {
		//check if we&apos;ve recently received this message, skip it if so
		if (received.indexOf(checksum.getValue()) &gt; -1) {
			filter = true;
		//we haven&apos;t seen it recently, so remember it and allow it through
		} else {
			var received_len = received.length;
			if (received_len &gt; received_len_limit) {
				//remove oldest/first entry, shift all entries forward, and add new entry to end
				received.shift();
				received[received_len_limit] = checksum.getValue();
			} else {
				//add new entry to end of array
				received[received_len] = checksum.getValue();
			} // end if 
		} // end if 
	} // end if 

	 //debug code
	/*for (x=0; x&lt;=received_len_limit; x++) {
		$c(&apos;received-&apos;+x, received[x]);
	} */

	$c(&apos;filterMessage&apos;,filter);
	$gc(&apos;received_checksums&apos;,received);

	return filter;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fbd0484d-74a2-48e4-aedd-f97c2fcefa16</id>
                <name>Get Message Checksum</name>
                <revision>12</revision>
                <lastModified>
                  <time>1678916806703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating and reutrning a checksum for each provided message
	
	@author:  	Jeffrey Ritz
	@scriptName: 	getMessageChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {object} result - return checksum value
	@history
	2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() to remove the exponential representation of the number value
*/
function getMessageChecksum(msg) {	

	var scriptName= &apos;getMessageChecksum&apos;;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	} // end if 
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 

	var checksumValue= checksum.getValue();
	// 2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() 
	var arrChecksumValue= new Array(); 
	arrChecksumValue.push(checksumValue);
	$c(&apos;checksum&apos;, arrChecksumValue);

	return checksumValue;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>91db9bd1-ca92-4dcc-bba4-e1ece603fc87</id>
                <name>Remove Child Object From Parent Object Json</name>
                <revision>22</revision>
                <lastModified>
                  <time>1678916845037</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON child object and it&apos;s descendents from a parent object JSON
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeChildObjectFromParentObjectJson.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
		{string} parentObject - place the name of the string to be designated as the parent object in the JSON
		{string} childObject  - place the name of the string to be designated as the child object to be deleted from the JSON
	@param {object} msg - return modified Json object msg excluding specified Json child object
	@history
*/
function removeChildObjectFromParentObjectJson(msg, parentObject, childObject) {
	
	var scriptName= &apos;removeChildObjectFromParentObjectJson&apos;;
	var debug= 0;

	//var strObjJson= JSON.parse(msg);
	var strObjJson= JSON.stringify(msg);
	
	//var objJson= JSON.parse(msg);
	var newParentObjects= new Object();
	var parentObjects= msg;
	var arrParentObjects= new Array();
	var arrTransactionObjects= new Array();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof parentObjects: &apos;+typeof(parentObjects));
	for (var key in parentObjects) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof key: &apos;+typeof(key)+&apos; key: &apos;+key);
		if(key== parentObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof objJson[key]: &apos;+typeof(parentObjects[key])+&apos; parentObjects[key]: &apos;+JSON.stringify(parentObjects[key]));
			
			var newChildObjects= new Object();
			var childObjects= parentObjects[key];
			var arrChildObjects= new Array();
			
			for(var key2 in childObjects) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key2: &apos;+typeof(key2)+&apos; key2: &apos;+key2+&apos; childObject: &apos;+childObject);
				for(var key3 in childObjects[key2]) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key3: &apos;+typeof(key3)+&apos; key3: &apos;+key3+&apos; childObject: &apos;+childObject);
					if(key3== childObject) {
						var transactionObject= new Object();
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; childObject typeof: &apos;+typeof(childObjects[key2][key3])+&apos; childObject: &apos;+JSON.stringify(childObjects[key2][key3]));
						transactionObject.key= key3;
						transactionObject.value= childObjects[key2][key3];
						delete childObjects[key2][key3];
						if(debug&gt;0) logger.info(&apos;DEBUG::&apos;+scriptName+&apos; DELETE childObject: &apos;+key3+&apos; of parentObject: &apos;+JSON.stringify(childObjects[key2]));
						arrTransactionObjects.push(transactionObject);
					} // end if
				} // end for 
				arrChildObjects.push(childObjects[key2]);
			} // end for
			newParentObjects[key]= arrChildObjects;
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add all child keys: &apos;+JSON.stringify(arrChildObjects)+&apos; into ParentObject[&apos;+key+&apos;]: &apos;+newParentObjects[key]);
		} else {
			newParentObjects[key]= parentObjects[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+parentObjects[key]+&apos; string: &apos;+JSON.stringify(parentObjects[key]));
		} // end if
		arrParentObjects.push(newParentObjects);
	} // end for 
	var newMsg= arrParentObjects;
	channelMap.put(&apos;removeChildObjectMsg&apos;,newMsg);
	channelMap.put(&apos;removedChildTransIds&apos;,arrTransactionObjects);
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));
	return newMsg;
	
} </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2ff28338-dfb6-445d-a04e-c74b5486a08c</id>
                <name>Remove Object From Json</name>
                <revision>26</revision>
                <lastModified>
                  <time>1703964988318</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  Desc: This function will remove a JSON object and it&apos;s descendents from the msg
	
	fileName: 	removeObjectFromJson.js
	name:		Remove Object From Json	
	Authored:  	Jeffrey Ritz
	Created: 		2023-03-09
	Details:
		@param IN {string} msg - provide parent JSON object (i.e. Inbound connectorMessage.getRawData() - msg)
		@param IN {string} removeObject - provide JSON object to evaluate and remove from parent JSON object (msg)
		OUT (object) newMsg - return JSON object from processing
	@history
	2023-03-15 JER - Modified to include removeObject function parameter to specify specific JSON object by referencing key to be removed
*/
function removeObjectFromJson(msg, removeObject) {
	
	var scriptName= &apos;removeObjectFromJson&apos;;
	var debug= 0;
	//var objJson= JSON.stringify(msg);
	var objJson= JSON.parse(msg);
	var newObjJson= new Object();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof objJson: &apos;+typeof(objJson)+&apos; objJSON: &apos;+JSON.stringify(objJson));
	for (var key in objJson) {
		if(key== removeObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; DELETE key: &apos;+key);
			// delete objJson[key];
		} else {
			newObjJson[key]= objJson[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+objJson[key]+&apos; string: &apos;+JSON.stringify(objJson[key]));
		} // end if 
	} // end for 
	var newMsg= newObjJson;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));

	// return JSON.stringify(newMsg);
	return newMsg;
} 
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>993a6fd8-454a-4133-ba32-dbcfea71582b</id>
                <name>Update EDITransactionLog</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123233</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	The purpose of this function is to update the status in Insight.
	Populate the channel map with the following variables functionalGroupControlNumber, status, eventDate

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateStatus () {

	//  Build the llst of paramters to pass to the database
	var paramList = new Packages.java.util.ArrayList();
	paramList.add($(&apos;functionalGroupControlNumber&apos;));
	paramList.add($(&apos;eventDate&apos;));  //dateTime in the acknoledged field in this format (&quot;2017-07-31 14:15:01.577&quot;)
	paramList.add(new java.lang.Integer(parseInt($(&apos;status&apos;), 10)));
	
//	logger.info(&quot;updateStatus &quot;+paramList);

	//  SQL Statement and paramters that will be sent to SQL
	var statement = &quot;EXEC dbo.pr_EDITransactionLog_Update ?, ?, ?&quot;;
	//  Code template used for establishiing connection and passing the sql statement and parameter list  
	var result = executeSharedDBStatementFhirCh(statement, false, paramList);
	return result;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>42cb290e-5fb0-46b8-82db-576ea1e1ba0d</id>
                <name>Update EDITransactionLog from responseStatus in the response transformer </name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123356</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Call this in the response transformer on the destination.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateReponseStatus() {
	var status = 0;
	if (responseStatus == SENT){
		var status = 1;
		channelMap.put(&apos;status&apos;,status);
	}

updateStatus()
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2223579b-f914-4be7-a575-f1a2a2aa1ae2</id>
                <name>ValidateToString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123044</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} mapping - 
	@param {Any} defaultValue - 
	@param {Any} replacement - 
	@return {String} return description
*/
function validateToString(mapping, defaultValue, replacement) {
    if (mapping == null) {
        mapping = &apos;&apos;;
    }
    return validate(mapping, defaultValue, replacement).toString() + &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>8c9a8268-4ef0-43e9-ae5b-bf8895f0b80c</id>
            <name>WebPT-FORMAT</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939902</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>Include any functions or codes with 
-date &amp; time formating related
-data type formatting</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>920c9ead-70a6-4168-9d95-89261b73ae44</id>
                <name>12digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123520</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Take any 12 digit string yyyyMMddHHmm and change to MM/dd/yyyy HH:mm 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm
*/
function yyyyMMddHHmm(string) {
	return DateUtil.convertDate(&quot;yyyyMMddHHmm&quot;, &quot;MM/dd/yyyy HH:mm&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fe2689ec-1946-46d5-8dd6-8fbbf106e1e6</id>
                <name>14digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122871</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Take 14 digit string yyyyMMddHHmmss and change to MM/dd/yyyy HH:mm:ss 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm:ss
*/
function yyyyMMddHHmmss(string) {
	if (string.length == 14) {
		  return DateUtil.convertDate(&quot;yyyyMMddHHmmss&quot;, &quot;MM/dd/yyyy HH:mm:ss&quot;, string);
	}
	else {
		return &quot;unregcognized string&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>b9db35e2-d5bd-48a1-8cc6-3475c698d7b4</id>
                <name>currentDT_yyyy-MM-dd HH:mm:ss.SSS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123114</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Kirby Knight
	Date Modified:  11/09/2020
	Retund the current date/time down to the millisecond

	@return {String} return description
*/
function currentDtToMilliseconds() {
	return DateUtil.getCurrentDate(&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7e747999-4bec-43fc-978d-7049d3543cf0</id>
                <name>fixHL7NodeOrder</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/

function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>dfedacf6-773b-413e-b78d-1bf16a92071d</id>
                <name>formatHL7Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121643</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Take any eight digit HL7 message data string (yyyyMMdd) and formats it human-readable format (MM/dd/yyyy)
	such as 20090612 -&gt; 06/12/2009

	@param {String} arg1 - 8 digit HL7 message data string yyyyMMdd
	@return {String} return date format as MM/dd/yyyy
*/
function formatHL7Date(string) {
	return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;MM/dd/yyyy&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>a8f54921-2cb6-4134-8806-3c4e10a757d9</id>
                <name>getCurrentLocalTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122014</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = getCurrentLocalTimestamp();

	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestamp() {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(&quot;EST&quot;)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6c5f1bd8-ebbf-4c8e-b465-0be8ccaba0d0</id>
                <name>getCurrentLocalTimeToMs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123077</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	Gets the current local date/time to the milliseconds
	Converts to the timezone that is passed in Examples (America/New_York, America/Chicago, America/Phoenix )

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestampToMs(timeZone) {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timeZone)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>78d74c5b-c881-404a-ad96-4e909e1a19f3</id>
                <name>phoneToE164</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121982</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Insight phone number to E164 format 5554446666 to +15554446666

	@param {Any} phoneIn - 
	@return {String} return description
*/
function phoneToE164(phoneIn) {
	logger.info(&apos;L1 &apos;+phoneIn);
	if(phoneIn != null ){
	//phoneIn = &apos;+1&apos; + phoneIn.toString(); 
	logger.info(&apos;L2 &apos;+phoneIn);
	return &apos;+1&apos; + phoneIn.toString(); 
	} else{
		return null;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>6a32d94d-408c-4e10-9799-e45e150b5c1f</id>
            <name>WebPT-MISC</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939909</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>miscellaneous javascript</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>84b4f1c7-f82d-4140-9fbd-98a95f68ff32</id>
                <name>getChannelState</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122648</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetChannelState(channel_id) {

    var channel_status = &quot;NA&quot;;

    var channel_count = parseInt(Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().size());

    for(var i=0;i&lt;channel_count;i++) {
        if (channel_id == Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getChannelId()) {
            channel_status = Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getState();
        }
    }

    return channel_status;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>715435a9-cb15-4e8f-bc5b-4249eaea6e17</id>
                <name>momentjs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122487</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Testing MIRTH-3794 using external JavaScript library &quot;moment.js&quot;
*/
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=b():&quot;function&quot;==typeof define&amp;&amp;define.amd?define(b):a.moment=b()}(this,function(){&quot;use strict&quot;;function a(){return Hc.apply(null,arguments)}function b(a){Hc=a}function c(a){return&quot;[object Array]&quot;===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||&quot;[object Date]&quot;===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c&lt;a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&amp;&amp;(a[c]=b[c]);return f(b,&quot;toString&quot;)&amp;&amp;(a.toString=b.toString),f(b,&quot;valueOf&quot;)&amp;&amp;(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ca(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&amp;&amp;(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow&lt;0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&amp;&amp;(a._isValid=a._isValid&amp;&amp;0===b.charsLeftOver&amp;&amp;0===b.unusedTokens.length&amp;&amp;void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if(&quot;undefined&quot;!=typeof b._isAMomentObject&amp;&amp;(a._isAMomentObject=b._isAMomentObject),&quot;undefined&quot;!=typeof b._i&amp;&amp;(a._i=b._i),&quot;undefined&quot;!=typeof b._f&amp;&amp;(a._f=b._f),&quot;undefined&quot;!=typeof b._l&amp;&amp;(a._l=b._l),&quot;undefined&quot;!=typeof b._strict&amp;&amp;(a._strict=b._strict),&quot;undefined&quot;!=typeof b._tzm&amp;&amp;(a._tzm=b._tzm),&quot;undefined&quot;!=typeof b._isUTC&amp;&amp;(a._isUTC=b._isUTC),&quot;undefined&quot;!=typeof b._offset&amp;&amp;(a._offset=b._offset),&quot;undefined&quot;!=typeof b._pf&amp;&amp;(a._pf=j(b)),&quot;undefined&quot;!=typeof b._locale&amp;&amp;(a._locale=b._locale),Jc.length&gt;0)for(c in Jc)d=Jc[c],e=b[d],&quot;undefined&quot;!=typeof e&amp;&amp;(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),Kc===!1&amp;&amp;(Kc=!0,a.updateOffset(this),Kc=!1)}function o(a){return a instanceof n||null!=a&amp;&amp;null!=a._isAMomentObject}function p(a){return 0&gt;a?Math.ceil(a):Math.floor(a)}function q(a){var b=+a,c=0;return 0!==b&amp;&amp;isFinite(b)&amp;&amp;(c=p(b)),c}function r(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e&gt;d;d++)(c&amp;&amp;a[d]!==b[d]||!c&amp;&amp;q(a[d])!==q(b[d]))&amp;&amp;g++;return g+f}function s(){}function t(a){return a?a.toLowerCase().replace(&quot;_&quot;,&quot;-&quot;):a}function u(a){for(var b,c,d,e,f=0;f&lt;a.length;){for(e=t(a[f]).split(&quot;-&quot;),b=e.length,c=t(a[f+1]),c=c?c.split(&quot;-&quot;):null;b&gt;0;){if(d=v(e.slice(0,b).join(&quot;-&quot;)))return d;if(c&amp;&amp;c.length&gt;=b&amp;&amp;r(e,c,!0)&gt;=b-1)break;b--}f++}return null}function v(a){var b=null;if(!Lc[a]&amp;&amp;&quot;undefined&quot;!=typeof module&amp;&amp;module&amp;&amp;module.exports)try{b=Ic._abbr,require(&quot;./locale/&quot;+a),w(b)}catch(c){}return Lc[a]}function w(a,b){var c;return a&amp;&amp;(c=&quot;undefined&quot;==typeof b?y(a):x(a,b),c&amp;&amp;(Ic=c)),Ic._abbr}function x(a,b){return null!==b?(b.abbr=a,Lc[a]=Lc[a]||new s,Lc[a].set(b),w(a),Lc[a]):(delete Lc[a],null)}function y(a){var b;if(a&amp;&amp;a._locale&amp;&amp;a._locale._abbr&amp;&amp;(a=a._locale._abbr),!a)return Ic;if(!c(a)){if(b=v(a))return b;a=[a]}return u(a)}function z(a,b){var c=a.toLowerCase();Mc[c]=Mc[c+&quot;s&quot;]=Mc[b]=a}function A(a){return&quot;string&quot;==typeof a?Mc[a]||Mc[a.toLowerCase()]:void 0}function B(a){var b,c,d={};for(c in a)f(a,c)&amp;&amp;(b=A(c),b&amp;&amp;(d[b]=a[c]));return d}function C(b,c){return function(d){return null!=d?(E(this,b,d),a.updateOffset(this,c),this):D(this,b)}}function D(a,b){return a._d[&quot;get&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b]()}function E(a,b,c){return a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b](c)}function F(a,b){var c;if(&quot;object&quot;==typeof a)for(c in a)this.set(c,a[c]);else if(a=A(a),&quot;function&quot;==typeof this[a])return this[a](b);return this}function G(a,b,c){var d=&quot;&quot;+Math.abs(a),e=b-d.length,f=a&gt;=0;return(f?c?&quot;+&quot;:&quot;&quot;:&quot;-&quot;)+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function H(a,b,c,d){var e=d;&quot;string&quot;==typeof d&amp;&amp;(e=function(){return this[d]()}),a&amp;&amp;(Qc[a]=e),b&amp;&amp;(Qc[b[0]]=function(){return G(e.apply(this,arguments),b[1],b[2])}),c&amp;&amp;(Qc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function I(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,&quot;&quot;):a.replace(/\\/g,&quot;&quot;)}function J(a){var b,c,d=a.match(Nc);for(b=0,c=d.length;c&gt;b;b++)Qc[d[b]]?d[b]=Qc[d[b]]:d[b]=I(d[b]);return function(e){var f=&quot;&quot;;for(b=0;c&gt;b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function K(a,b){return a.isValid()?(b=L(b,a.localeData()),Pc[b]=Pc[b]||J(b),Pc[b](a)):a.localeData().invalidDate()}function L(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Oc.lastIndex=0;d&gt;=0&amp;&amp;Oc.test(a);)a=a.replace(Oc,c),Oc.lastIndex=0,d-=1;return a}function M(a){return&quot;function&quot;==typeof a&amp;&amp;&quot;[object Function]&quot;===Object.prototype.toString.call(a)}function N(a,b,c){dd[a]=M(b)?b:function(a){return a&amp;&amp;c?c:b}}function O(a,b){return f(dd,a)?dd[a](b._strict,b._locale):new RegExp(P(a))}function P(a){return a.replace(&quot;\\&quot;,&quot;&quot;).replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,&quot;\\$&amp;&quot;)}function Q(a,b){var c,d=b;for(&quot;string&quot;==typeof a&amp;&amp;(a=[a]),&quot;number&quot;==typeof b&amp;&amp;(d=function(a,c){c[b]=q(a)}),c=0;c&lt;a.length;c++)ed[a[c]]=d}function R(a,b){Q(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function S(a,b,c){null!=b&amp;&amp;f(ed,a)&amp;&amp;ed[a](b,c._a,c,a)}function T(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function U(a){return this._months[a.month()]}function V(a){return this._monthsShort[a.month()]}function W(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12&gt;d;d++){if(e=h([2e3,d]),c&amp;&amp;!this._longMonthsParse[d]&amp;&amp;(this._longMonthsParse[d]=new RegExp(&quot;^&quot;+this.months(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;),this._shortMonthsParse[d]=new RegExp(&quot;^&quot;+this.monthsShort(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;)),c||this._monthsParse[d]||(f=&quot;^&quot;+this.months(e,&quot;&quot;)+&quot;|^&quot;+this.monthsShort(e,&quot;&quot;),this._monthsParse[d]=new RegExp(f.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),c&amp;&amp;&quot;MMMM&quot;===b&amp;&amp;this._longMonthsParse[d].test(a))return d;if(c&amp;&amp;&quot;MMM&quot;===b&amp;&amp;this._shortMonthsParse[d].test(a))return d;if(!c&amp;&amp;this._monthsParse[d].test(a))return d}}function X(a,b){var c;return&quot;string&quot;==typeof b&amp;&amp;(b=a.localeData().monthsParse(b),&quot;number&quot;!=typeof b)?a:(c=Math.min(a.date(),T(a.year(),b)),a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+&quot;Month&quot;](b,c),a)}function Y(b){return null!=b?(X(this,b),a.updateOffset(this,!0),this):D(this,&quot;Month&quot;)}function Z(){return T(this.year(),this.month())}function $(a){var b,c=a._a;return c&amp;&amp;-2===j(a).overflow&amp;&amp;(b=c[gd]&lt;0||c[gd]&gt;11?gd:c[hd]&lt;1||c[hd]&gt;T(c[fd],c[gd])?hd:c[id]&lt;0||c[id]&gt;24||24===c[id]&amp;&amp;(0!==c[jd]||0!==c[kd]||0!==c[ld])?id:c[jd]&lt;0||c[jd]&gt;59?jd:c[kd]&lt;0||c[kd]&gt;59?kd:c[ld]&lt;0||c[ld]&gt;999?ld:-1,j(a)._overflowDayOfYear&amp;&amp;(fd&gt;b||b&gt;hd)&amp;&amp;(b=hd),j(a).overflow=b),a}function _(b){a.suppressDeprecationWarnings===!1&amp;&amp;&quot;undefined&quot;!=typeof console&amp;&amp;console.warn&amp;&amp;console.warn(&quot;Deprecation warning: &quot;+b)}function aa(a,b){var c=!0;return g(function(){return c&amp;&amp;(_(a+&quot;\n&quot;+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function ba(a,b){od[a]||(_(b),od[a]=!0)}function ca(a){var b,c,d=a._i,e=pd.exec(d);if(e){for(j(a).iso=!0,b=0,c=qd.length;c&gt;b;b++)if(qd[b][1].exec(d)){a._f=qd[b][0];break}for(b=0,c=rd.length;c&gt;b;b++)if(rd[b][1].exec(d)){a._f+=(e[6]||&quot; &quot;)+rd[b][0];break}d.match(ad)&amp;&amp;(a._f+=&quot;Z&quot;),va(a)}else a._isValid=!1}function da(b){var c=sd.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ca(b),void(b._isValid===!1&amp;&amp;(delete b._isValid,a.createFromInputFallback(b))))}function ea(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970&gt;a&amp;&amp;h.setFullYear(a),h}function fa(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970&gt;a&amp;&amp;b.setUTCFullYear(a),b}function ga(a){return ha(a)?366:365}function ha(a){return a%4===0&amp;&amp;a%100!==0||a%400===0}function ia(){return ha(this.year())}function ja(a,b,c){var d,e=c-b,f=c-a.day();return f&gt;e&amp;&amp;(f-=7),e-7&gt;f&amp;&amp;(f+=7),d=Da(a).add(f,&quot;d&quot;),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ka(a){return ja(a,this._week.dow,this._week.doy).week}function la(){return this._week.dow}function ma(){return this._week.doy}function na(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function oa(a){var b=ja(this,1,4).week;return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function pa(a,b,c,d,e){var f,g=6+e-d,h=fa(a,0,1+g),i=h.getUTCDay();return e&gt;i&amp;&amp;(i+=7),c=null!=c?1*c:e,f=1+g+7*(b-1)-i+c,{year:f&gt;0?a:a-1,dayOfYear:f&gt;0?f:ga(a-1)+f}}function qa(a){var b=Math.round((this.clone().startOf(&quot;day&quot;)-this.clone().startOf(&quot;year&quot;))/864e5)+1;return null==a?b:this.add(a-b,&quot;d&quot;)}function ra(a,b,c){return null!=a?a:null!=b?b:c}function sa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ta(a){var b,c,d,e,f=[];if(!a._d){for(d=sa(a),a._w&amp;&amp;null==a._a[hd]&amp;&amp;null==a._a[gd]&amp;&amp;ua(a),a._dayOfYear&amp;&amp;(e=ra(a._a[fd],d[fd]),a._dayOfYear&gt;ga(e)&amp;&amp;(j(a)._overflowDayOfYear=!0),c=fa(e,0,a._dayOfYear),a._a[gd]=c.getUTCMonth(),a._a[hd]=c.getUTCDate()),b=0;3&gt;b&amp;&amp;null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7&gt;b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[id]&amp;&amp;0===a._a[jd]&amp;&amp;0===a._a[kd]&amp;&amp;0===a._a[ld]&amp;&amp;(a._nextDay=!0,a._a[id]=0),a._d=(a._useUTC?fa:ea).apply(null,f),null!=a._tzm&amp;&amp;a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&amp;&amp;(a._a[id]=24)}}function ua(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=ra(b.GG,a._a[fd],ja(Da(),1,4).year),d=ra(b.W,1),e=ra(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=ra(b.gg,a._a[fd],ja(Da(),f,g).year),d=ra(b.w,1),null!=b.d?(e=b.d,f&gt;e&amp;&amp;++d):e=null!=b.e?b.e+f:f),h=pa(c,d,e,g,f),a._a[fd]=h.year,a._dayOfYear=h.dayOfYear}function va(b){if(b._f===a.ISO_8601)return void ca(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=&quot;&quot;+b._i,i=h.length,k=0;for(e=L(b._f,b._locale).match(Nc)||[],c=0;c&lt;e.length;c++)f=e[c],d=(h.match(O(f,b))||[])[0],d&amp;&amp;(g=h.substr(0,h.indexOf(d)),g.length&gt;0&amp;&amp;j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Qc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),S(f,d,b)):b._strict&amp;&amp;!d&amp;&amp;j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length&gt;0&amp;&amp;j(b).unusedInput.push(h),j(b).bigHour===!0&amp;&amp;b._a[id]&lt;=12&amp;&amp;b._a[id]&gt;0&amp;&amp;(j(b).bigHour=void 0),b._a[id]=wa(b._locale,b._a[id],b._meridiem),ta(b),$(b)}function wa(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&amp;&amp;12&gt;b&amp;&amp;(b+=12),d||12!==b||(b=0),b):b}function xa(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e&lt;a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&amp;&amp;(b._useUTC=a._useUTC),b._f=a._f[e],va(b),k(b)&amp;&amp;(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d&gt;f)&amp;&amp;(d=f,c=b));g(a,c||b)}function ya(a){if(!a._d){var b=B(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ta(a)}}function za(a){var b=new n($(Aa(a)));return b._nextDay&amp;&amp;(b.add(1,&quot;d&quot;),b._nextDay=void 0),b}function Aa(a){var b=a._i,e=a._f;return a._locale=a._locale||y(a._l),null===b||void 0===e&amp;&amp;&quot;&quot;===b?l({nullInput:!0}):(&quot;string&quot;==typeof b&amp;&amp;(a._i=b=a._locale.preparse(b)),o(b)?new n($(b)):(c(e)?xa(a):e?va(a):d(b)?a._d=b:Ba(a),a))}function Ba(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):&quot;string&quot;==typeof f?da(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ta(b)):&quot;object&quot;==typeof f?ya(b):&quot;number&quot;==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ca(a,b,c,d,e){var f={};return&quot;boolean&quot;==typeof c&amp;&amp;(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,za(f)}function Da(a,b,c,d){return Ca(a,b,c,d,!1)}function Ea(a,b){var d,e;if(1===b.length&amp;&amp;c(b[0])&amp;&amp;(b=b[0]),!b.length)return Da();for(d=b[0],e=1;e&lt;b.length;++e)(!b[e].isValid()||b[e][a](d))&amp;&amp;(d=b[e]);return d}function Fa(){var a=[].slice.call(arguments,0);return Ea(&quot;isBefore&quot;,a)}function Ga(){var a=[].slice.call(arguments,0);return Ea(&quot;isAfter&quot;,a)}function Ha(a){var b=B(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=y(),this._bubble()}function Ia(a){return a instanceof Ha}function Ja(a,b){H(a,0,0,function(){var a=this.utcOffset(),c=&quot;+&quot;;return 0&gt;a&amp;&amp;(a=-a,c=&quot;-&quot;),c+G(~~(a/60),2)+b+G(~~a%60,2)})}function Ka(a){var b=(a||&quot;&quot;).match(ad)||[],c=b[b.length-1]||[],d=(c+&quot;&quot;).match(xd)||[&quot;-&quot;,0,0],e=+(60*d[1])+q(d[2]);return&quot;+&quot;===d[0]?e:-e}function La(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Da(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Da(b).local()}function Ma(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Na(b,c){var d,e=this._offset||0;return null!=b?(&quot;string&quot;==typeof b&amp;&amp;(b=Ka(b)),Math.abs(b)&lt;16&amp;&amp;(b=60*b),!this._isUTC&amp;&amp;c&amp;&amp;(d=Ma(this)),this._offset=b,this._isUTC=!0,null!=d&amp;&amp;this.add(d,&quot;m&quot;),e!==b&amp;&amp;(!c||this._changeInProgress?bb(this,Ya(b-e,&quot;m&quot;),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ma(this)}function Oa(a,b){return null!=a?(&quot;string&quot;!=typeof a&amp;&amp;(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Pa(a){return this.utcOffset(0,a)}function Qa(a){return this._isUTC&amp;&amp;(this.utcOffset(0,a),this._isUTC=!1,a&amp;&amp;this.subtract(Ma(this),&quot;m&quot;)),this}function Ra(){return this._tzm?this.utcOffset(this._tzm):&quot;string&quot;==typeof this._i&amp;&amp;this.utcOffset(Ka(this._i)),this}function Sa(a){return a=a?Da(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Ta(){return this.utcOffset()&gt;this.clone().month(0).utcOffset()||this.utcOffset()&gt;this.clone().month(5).utcOffset()}function Ua(){if(&quot;undefined&quot;!=typeof this._isDSTShifted)return this._isDSTShifted;var a={};if(m(a,this),a=Aa(a),a._a){var b=a._isUTC?h(a._a):Da(a._a);this._isDSTShifted=this.isValid()&amp;&amp;r(a._a,b.toArray())&gt;0}else this._isDSTShifted=!1;return this._isDSTShifted}function Va(){return!this._isUTC}function Wa(){return this._isUTC}function Xa(){return this._isUTC&amp;&amp;0===this._offset}function Ya(a,b){var c,d,e,g=a,h=null;return Ia(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:&quot;number&quot;==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=yd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:0,d:q(h[hd])*c,h:q(h[id])*c,m:q(h[jd])*c,s:q(h[kd])*c,ms:q(h[ld])*c}):(h=zd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:Za(h[2],c),M:Za(h[3],c),d:Za(h[4],c),h:Za(h[5],c),m:Za(h[6],c),s:Za(h[7],c),w:Za(h[8],c)}):null==g?g={}:&quot;object&quot;==typeof g&amp;&amp;(&quot;from&quot;in g||&quot;to&quot;in g)&amp;&amp;(e=_a(Da(g.from),Da(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ha(g),Ia(a)&amp;&amp;f(a,&quot;_locale&quot;)&amp;&amp;(d._locale=a._locale),d}function Za(a,b){var c=a&amp;&amp;parseFloat(a.replace(&quot;,&quot;,&quot;.&quot;));return(isNaN(c)?0:c)*b}function $a(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,&quot;M&quot;).isAfter(b)&amp;&amp;--c.months,c.milliseconds=+b-+a.clone().add(c.months,&quot;M&quot;),c}function _a(a,b){var c;return b=La(b,a),a.isBefore(b)?c=$a(a,b):(c=$a(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function ab(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(ba(b,&quot;moment().&quot;+b+&quot;(period, number) is deprecated. Please use moment().&quot;+b+&quot;(number, period).&quot;),f=c,c=d,d=f),c=&quot;string&quot;==typeof c?+c:c,e=Ya(c,d),bb(this,e,a),this}}function bb(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&amp;&amp;b._d.setTime(+b._d+f*d),g&amp;&amp;E(b,&quot;Date&quot;,D(b,&quot;Date&quot;)+g*d),h&amp;&amp;X(b,D(b,&quot;Month&quot;)+h*d),e&amp;&amp;a.updateOffset(b,g||h)}function cb(a,b){var c=a||Da(),d=La(c,this).startOf(&quot;day&quot;),e=this.diff(d,&quot;days&quot;,!0),f=-6&gt;e?&quot;sameElse&quot;:-1&gt;e?&quot;lastWeek&quot;:0&gt;e?&quot;lastDay&quot;:1&gt;e?&quot;sameDay&quot;:2&gt;e?&quot;nextDay&quot;:7&gt;e?&quot;nextWeek&quot;:&quot;sameElse&quot;;return this.format(b&amp;&amp;b[f]||this.localeData().calendar(f,this,Da(c)))}function db(){return new n(this)}function eb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this&gt;+a):(c=o(a)?+a:+Da(a),c&lt;+this.clone().startOf(b))}function fb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+a&gt;+this):(c=o(a)?+a:+Da(a),+this.clone().endOf(b)&lt;c)}function gb(a,b,c){return this.isAfter(a,c)&amp;&amp;this.isBefore(b,c)}function hb(a,b){var c;return b=A(b||&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this===+a):(c=+Da(a),+this.clone().startOf(b)&lt;=c&amp;&amp;c&lt;=+this.clone().endOf(b))}function ib(a,b,c){var d,e,f=La(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=A(b),&quot;year&quot;===b||&quot;month&quot;===b||&quot;quarter&quot;===b?(e=jb(this,f),&quot;quarter&quot;===b?e/=3:&quot;year&quot;===b&amp;&amp;(e/=12)):(d=this-f,e=&quot;second&quot;===b?d/1e3:&quot;minute&quot;===b?d/6e4:&quot;hour&quot;===b?d/36e5:&quot;day&quot;===b?(d-g)/864e5:&quot;week&quot;===b?(d-g)/6048e5:d),c?e:p(e)}function jb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,&quot;months&quot;);return 0&gt;b-f?(c=a.clone().add(e-1,&quot;months&quot;),d=(b-f)/(f-c)):(c=a.clone().add(e+1,&quot;months&quot;),d=(b-f)/(c-f)),-(e+d)}function kb(){return this.clone().locale(&quot;en&quot;).format(&quot;ddd MMM DD YYYY HH:mm:ss [GMT]ZZ&quot;)}function lb(){var a=this.clone().utc();return 0&lt;a.year()&amp;&amp;a.year()&lt;=9999?&quot;function&quot;==typeof Date.prototype.toISOString?this.toDate().toISOString():K(a,&quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;):K(a,&quot;YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;)}function mb(b){var c=K(this,b||a.defaultFormat);return this.localeData().postformat(c)}function nb(a,b){return this.isValid()?Ya({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.from(Da(),a)}function pb(a,b){return this.isValid()?Ya({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function qb(a){return this.to(Da(),a)}function rb(a){var b;return void 0===a?this._locale._abbr:(b=y(a),null!=b&amp;&amp;(this._locale=b),this)}function sb(){return this._locale}function tb(a){switch(a=A(a)){case&quot;year&quot;:this.month(0);case&quot;quarter&quot;:case&quot;month&quot;:this.date(1);case&quot;week&quot;:case&quot;isoWeek&quot;:case&quot;day&quot;:this.hours(0);case&quot;hour&quot;:this.minutes(0);case&quot;minute&quot;:this.seconds(0);case&quot;second&quot;:this.milliseconds(0)}return&quot;week&quot;===a&amp;&amp;this.weekday(0),&quot;isoWeek&quot;===a&amp;&amp;this.isoWeekday(1),&quot;quarter&quot;===a&amp;&amp;this.month(3*Math.floor(this.month()/3)),this}function ub(a){return a=A(a),void 0===a||&quot;millisecond&quot;===a?this:this.startOf(a).add(1,&quot;isoWeek&quot;===a?&quot;week&quot;:a).subtract(1,&quot;ms&quot;)}function vb(){return+this._d-6e4*(this._offset||0)}function wb(){return Math.floor(+this/1e3)}function xb(){return this._offset?new Date(+this):this._d}function yb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function zb(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Ab(){return k(this)}function Bb(){return g({},j(this))}function Cb(){return j(this).overflow}function Db(a,b){H(0,[a,a.length],0,b)}function Eb(a,b,c){return ja(Da([a,11,31+b-c]),b,c).week}function Fb(a){var b=ja(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Gb(a){var b=ja(this,1,4).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Hb(){return Eb(this.year(),1,4)}function Ib(){var a=this.localeData()._week;return Eb(this.year(),a.dow,a.doy)}function Jb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Kb(a,b){return&quot;string&quot;!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),&quot;number&quot;==typeof a?a:null):parseInt(a,10)}function Lb(a){return this._weekdays[a.day()]}function Mb(a){return this._weekdaysShort[a.day()]}function Nb(a){return this._weekdaysMin[a.day()]}function Ob(a){var b,c,d;for(this._weekdaysParse=this._weekdaysParse||[],b=0;7&gt;b;b++)if(this._weekdaysParse[b]||(c=Da([2e3,1]).day(b),d=&quot;^&quot;+this.weekdays(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysShort(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysMin(c,&quot;&quot;),this._weekdaysParse[b]=new RegExp(d.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),this._weekdaysParse[b].test(a))return b}function Pb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Kb(a,this.localeData()),this.add(a-b,&quot;d&quot;)):b}function Qb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,&quot;d&quot;)}function Rb(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Sb(a,b){H(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Tb(a,b){return b._meridiemParse}function Ub(a){return&quot;p&quot;===(a+&quot;&quot;).toLowerCase().charAt(0)}function Vb(a,b,c){return a&gt;11?c?&quot;pm&quot;:&quot;PM&quot;:c?&quot;am&quot;:&quot;AM&quot;}function Wb(a,b){b[ld]=q(1e3*(&quot;0.&quot;+a))}function Xb(){return this._isUTC?&quot;UTC&quot;:&quot;&quot;}function Yb(){return this._isUTC?&quot;Coordinated Universal Time&quot;:&quot;&quot;}function Zb(a){return Da(1e3*a)}function $b(){return Da.apply(null,arguments).parseZone()}function _b(a,b,c){var d=this._calendar[a];return&quot;function&quot;==typeof d?d.call(b,c):d}function ac(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function bc(){return this._invalidDate}function cc(a){return this._ordinal.replace(&quot;%d&quot;,a)}function dc(a){return a}function ec(a,b,c,d){var e=this._relativeTime[c];return&quot;function&quot;==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function fc(a,b){var c=this._relativeTime[a&gt;0?&quot;future&quot;:&quot;past&quot;];return&quot;function&quot;==typeof c?c(b):c.replace(/%s/i,b)}function gc(a){var b,c;for(c in a)b=a[c],&quot;function&quot;==typeof b?this[c]=b:this[&quot;_&quot;+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+&quot;|&quot;+/\d{1,2}/.source)}function hc(a,b,c,d){var e=y(),f=h().set(d,b);return e[c](f,a)}function ic(a,b,c,d,e){if(&quot;number&quot;==typeof a&amp;&amp;(b=a,a=void 0),a=a||&quot;&quot;,null!=b)return hc(a,b,c,e);var f,g=[];for(f=0;d&gt;f;f++)g[f]=hc(a,f,c,e);return g}function jc(a,b){return ic(a,b,&quot;months&quot;,12,&quot;month&quot;)}function kc(a,b){return ic(a,b,&quot;monthsShort&quot;,12,&quot;month&quot;)}function lc(a,b){return ic(a,b,&quot;weekdays&quot;,7,&quot;day&quot;)}function mc(a,b){return ic(a,b,&quot;weekdaysShort&quot;,7,&quot;day&quot;)}function nc(a,b){return ic(a,b,&quot;weekdaysMin&quot;,7,&quot;day&quot;)}function oc(){var a=this._data;return this._milliseconds=Wd(this._milliseconds),this._days=Wd(this._days),this._months=Wd(this._months),a.milliseconds=Wd(a.milliseconds),a.seconds=Wd(a.seconds),a.minutes=Wd(a.minutes),a.hours=Wd(a.hours),a.months=Wd(a.months),a.years=Wd(a.years),this}function pc(a,b,c,d){var e=Ya(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function qc(a,b){return pc(this,a,b,1)}function rc(a,b){return pc(this,a,b,-1)}function sc(a){return 0&gt;a?Math.floor(a):Math.ceil(a)}function tc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f&gt;=0&amp;&amp;g&gt;=0&amp;&amp;h&gt;=0||0&gt;=f&amp;&amp;0&gt;=g&amp;&amp;0&gt;=h||(f+=864e5*sc(vc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=p(f/1e3),i.seconds=a%60,b=p(a/60),i.minutes=b%60,c=p(b/60),i.hours=c%24,g+=p(c/24),e=p(uc(g)),h+=e,g-=sc(vc(e)),d=p(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function uc(a){return 4800*a/146097}function vc(a){return 146097*a/4800}function wc(a){var b,c,d=this._milliseconds;if(a=A(a),&quot;month&quot;===a||&quot;year&quot;===a)return b=this._days+d/864e5,c=this._months+uc(b),&quot;month&quot;===a?c:c/12;switch(b=this._days+Math.round(vc(this._months)),a){case&quot;week&quot;:return b/7+d/6048e5;case&quot;day&quot;:return b+d/864e5;case&quot;hour&quot;:return 24*b+d/36e5;case&quot;minute&quot;:return 1440*b+d/6e4;case&quot;second&quot;:return 86400*b+d/1e3;case&quot;millisecond&quot;:return Math.floor(864e5*b)+d;default:throw new Error(&quot;Unknown unit &quot;+a)}}function xc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*q(this._months/12)}function yc(a){return function(){return this.as(a)}}function zc(a){return a=A(a),this[a+&quot;s&quot;]()}function Ac(a){return function(){return this._data[a]}}function Bc(){return p(this.days()/7)}function Cc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Dc(a,b,c){var d=Ya(a).abs(),e=ke(d.as(&quot;s&quot;)),f=ke(d.as(&quot;m&quot;)),g=ke(d.as(&quot;h&quot;)),h=ke(d.as(&quot;d&quot;)),i=ke(d.as(&quot;M&quot;)),j=ke(d.as(&quot;y&quot;)),k=e&lt;le.s&amp;&amp;[&quot;s&quot;,e]||1===f&amp;&amp;[&quot;m&quot;]||f&lt;le.m&amp;&amp;[&quot;mm&quot;,f]||1===g&amp;&amp;[&quot;h&quot;]||g&lt;le.h&amp;&amp;[&quot;hh&quot;,g]||1===h&amp;&amp;[&quot;d&quot;]||h&lt;le.d&amp;&amp;[&quot;dd&quot;,h]||1===i&amp;&amp;[&quot;M&quot;]||i&lt;le.M&amp;&amp;[&quot;MM&quot;,i]||1===j&amp;&amp;[&quot;y&quot;]||[&quot;yy&quot;,j];return k[2]=b,k[3]=+a&gt;0,k[4]=c,Cc.apply(null,k)}function Ec(a,b){return void 0===le[a]?!1:void 0===b?le[a]:(le[a]=b,!0)}function Fc(a){var b=this.localeData(),c=Dc(this,!a,b);return a&amp;&amp;(c=b.pastFuture(+this,c)),b.postformat(c)}function Gc(){var a,b,c,d=me(this._milliseconds)/1e3,e=me(this._days),f=me(this._months);a=p(d/60),b=p(a/60),d%=60,a%=60,c=p(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0&gt;m?&quot;-&quot;:&quot;&quot;)+&quot;P&quot;+(g?g+&quot;Y&quot;:&quot;&quot;)+(h?h+&quot;M&quot;:&quot;&quot;)+(i?i+&quot;D&quot;:&quot;&quot;)+(j||k||l?&quot;T&quot;:&quot;&quot;)+(j?j+&quot;H&quot;:&quot;&quot;)+(k?k+&quot;M&quot;:&quot;&quot;)+(l?l+&quot;S&quot;:&quot;&quot;):&quot;P0D&quot;}var Hc,Ic,Jc=a.momentProperties=[],Kc=!1,Lc={},Mc={},Nc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Pc={},Qc={},Rc=/\d/,Sc=/\d\d/,Tc=/\d{3}/,Uc=/\d{4}/,Vc=/[+-]?\d{6}/,Wc=/\d\d?/,Xc=/\d{1,3}/,Yc=/\d{1,4}/,Zc=/[+-]?\d{1,6}/,$c=/\d+/,_c=/[+-]?\d+/,ad=/Z|[+-]\d\d:?\d\d/gi,bd=/[+-]?\d+(\.\d{1,3})?/,cd=/[0-9]*[&apos;a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,dd={},ed={},fd=0,gd=1,hd=2,id=3,jd=4,kd=5,ld=6;H(&quot;M&quot;,[&quot;MM&quot;,2],&quot;Mo&quot;,function(){return this.month()+1}),H(&quot;MMM&quot;,0,0,function(a){return this.localeData().monthsShort(this,a)}),H(&quot;MMMM&quot;,0,0,function(a){return this.localeData().months(this,a)}),z(&quot;month&quot;,&quot;M&quot;),N(&quot;M&quot;,Wc),N(&quot;MM&quot;,Wc,Sc),N(&quot;MMM&quot;,cd),N(&quot;MMMM&quot;,cd),Q([&quot;M&quot;,&quot;MM&quot;],function(a,b){b[gd]=q(a)-1}),Q([&quot;MMM&quot;,&quot;MMMM&quot;],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[gd]=e:j(c).invalidMonth=a});var md=&quot;January_February_March_April_May_June_July_August_September_October_November_December&quot;.split(&quot;_&quot;),nd=&quot;Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec&quot;.split(&quot;_&quot;),od={};a.suppressDeprecationWarnings=!1;var pd=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,qd=[[&quot;YYYYYY-MM-DD&quot;,/[+-]\d{6}-\d{2}-\d{2}/],[&quot;YYYY-MM-DD&quot;,/\d{4}-\d{2}-\d{2}/],[&quot;GGGG-[W]WW-E&quot;,/\d{4}-W\d{2}-\d/],[&quot;GGGG-[W]WW&quot;,/\d{4}-W\d{2}/],[&quot;YYYY-DDD&quot;,/\d{4}-\d{3}/]],rd=[[&quot;HH:mm:ss.SSSS&quot;,/(T| )\d\d:\d\d:\d\d\.\d+/],[&quot;HH:mm:ss&quot;,/(T| )\d\d:\d\d:\d\d/],[&quot;HH:mm&quot;,/(T| )\d\d:\d\d/],[&quot;HH&quot;,/(T| )\d\d/]],sd=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=aa(&quot;moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.&quot;,function(a){a._d=new Date(a._i+(a._useUTC?&quot; UTC&quot;:&quot;&quot;))}),H(0,[&quot;YY&quot;,2],0,function(){return this.year()%100}),H(0,[&quot;YYYY&quot;,4],0,&quot;year&quot;),H(0,[&quot;YYYYY&quot;,5],0,&quot;year&quot;),H(0,[&quot;YYYYYY&quot;,6,!0],0,&quot;year&quot;),z(&quot;year&quot;,&quot;y&quot;),N(&quot;Y&quot;,_c),N(&quot;YY&quot;,Wc,Sc),N(&quot;YYYY&quot;,Yc,Uc),N(&quot;YYYYY&quot;,Zc,Vc),N(&quot;YYYYYY&quot;,Zc,Vc),Q([&quot;YYYYY&quot;,&quot;YYYYYY&quot;],fd),Q(&quot;YYYY&quot;,function(b,c){c[fd]=2===b.length?a.parseTwoDigitYear(b):q(b)}),Q(&quot;YY&quot;,function(b,c){c[fd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return q(a)+(q(a)&gt;68?1900:2e3)};var td=C(&quot;FullYear&quot;,!1);H(&quot;w&quot;,[&quot;ww&quot;,2],&quot;wo&quot;,&quot;week&quot;),H(&quot;W&quot;,[&quot;WW&quot;,2],&quot;Wo&quot;,&quot;isoWeek&quot;),z(&quot;week&quot;,&quot;w&quot;),z(&quot;isoWeek&quot;,&quot;W&quot;),N(&quot;w&quot;,Wc),N(&quot;ww&quot;,Wc,Sc),N(&quot;W&quot;,Wc),N(&quot;WW&quot;,Wc,Sc),R([&quot;w&quot;,&quot;ww&quot;,&quot;W&quot;,&quot;WW&quot;],function(a,b,c,d){b[d.substr(0,1)]=q(a)});var ud={dow:0,doy:6};H(&quot;DDD&quot;,[&quot;DDDD&quot;,3],&quot;DDDo&quot;,&quot;dayOfYear&quot;),z(&quot;dayOfYear&quot;,&quot;DDD&quot;),N(&quot;DDD&quot;,Xc),N(&quot;DDDD&quot;,Tc),Q([&quot;DDD&quot;,&quot;DDDD&quot;],function(a,b,c){c._dayOfYear=q(a)}),a.ISO_8601=function(){};var vd=aa(&quot;moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return this&gt;a?this:a}),wd=aa(&quot;moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return a&gt;this?this:a});Ja(&quot;Z&quot;,&quot;:&quot;),Ja(&quot;ZZ&quot;,&quot;&quot;),N(&quot;Z&quot;,ad),N(&quot;ZZ&quot;,ad),Q([&quot;Z&quot;,&quot;ZZ&quot;],function(a,b,c){c._useUTC=!0,c._tzm=Ka(a)});var xd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var yd=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,zd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Ya.fn=Ha.prototype;var Ad=ab(1,&quot;add&quot;),Bd=ab(-1,&quot;subtract&quot;);a.defaultFormat=&quot;YYYY-MM-DDTHH:mm:ssZ&quot;;var Cd=aa(&quot;moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.&quot;,function(a){return void 0===a?this.localeData():this.locale(a)});H(0,[&quot;gg&quot;,2],0,function(){return this.weekYear()%100}),H(0,[&quot;GG&quot;,2],0,function(){return this.isoWeekYear()%100}),Db(&quot;gggg&quot;,&quot;weekYear&quot;),Db(&quot;ggggg&quot;,&quot;weekYear&quot;),Db(&quot;GGGG&quot;,&quot;isoWeekYear&quot;),Db(&quot;GGGGG&quot;,&quot;isoWeekYear&quot;),z(&quot;weekYear&quot;,&quot;gg&quot;),z(&quot;isoWeekYear&quot;,&quot;GG&quot;),N(&quot;G&quot;,_c),N(&quot;g&quot;,_c),N(&quot;GG&quot;,Wc,Sc),N(&quot;gg&quot;,Wc,Sc),N(&quot;GGGG&quot;,Yc,Uc),N(&quot;gggg&quot;,Yc,Uc),N(&quot;GGGGG&quot;,Zc,Vc),N(&quot;ggggg&quot;,Zc,Vc),R([&quot;gggg&quot;,&quot;ggggg&quot;,&quot;GGGG&quot;,&quot;GGGGG&quot;],function(a,b,c,d){b[d.substr(0,2)]=q(a)}),R([&quot;gg&quot;,&quot;GG&quot;],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),H(&quot;Q&quot;,0,0,&quot;quarter&quot;),z(&quot;quarter&quot;,&quot;Q&quot;),N(&quot;Q&quot;,Rc),Q(&quot;Q&quot;,function(a,b){b[gd]=3*(q(a)-1)}),H(&quot;D&quot;,[&quot;DD&quot;,2],&quot;Do&quot;,&quot;date&quot;),z(&quot;date&quot;,&quot;D&quot;),N(&quot;D&quot;,Wc),N(&quot;DD&quot;,Wc,Sc),N(&quot;Do&quot;,function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),Q([&quot;D&quot;,&quot;DD&quot;],hd),Q(&quot;Do&quot;,function(a,b){b[hd]=q(a.match(Wc)[0],10)});var Dd=C(&quot;Date&quot;,!0);H(&quot;d&quot;,0,&quot;do&quot;,&quot;day&quot;),H(&quot;dd&quot;,0,0,function(a){return this.localeData().weekdaysMin(this,a)}),H(&quot;ddd&quot;,0,0,function(a){return this.localeData().weekdaysShort(this,a)}),H(&quot;dddd&quot;,0,0,function(a){return this.localeData().weekdays(this,a)}),H(&quot;e&quot;,0,0,&quot;weekday&quot;),H(&quot;E&quot;,0,0,&quot;isoWeekday&quot;),z(&quot;day&quot;,&quot;d&quot;),z(&quot;weekday&quot;,&quot;e&quot;),z(&quot;isoWeekday&quot;,&quot;E&quot;),N(&quot;d&quot;,Wc),N(&quot;e&quot;,Wc),N(&quot;E&quot;,Wc),N(&quot;dd&quot;,cd),N(&quot;ddd&quot;,cd),N(&quot;dddd&quot;,cd),R([&quot;dd&quot;,&quot;ddd&quot;,&quot;dddd&quot;],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),R([&quot;d&quot;,&quot;e&quot;,&quot;E&quot;],function(a,b,c,d){b[d]=q(a)});var Ed=&quot;Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday&quot;.split(&quot;_&quot;),Fd=&quot;Sun_Mon_Tue_Wed_Thu_Fri_Sat&quot;.split(&quot;_&quot;),Gd=&quot;Su_Mo_Tu_We_Th_Fr_Sa&quot;.split(&quot;_&quot;);H(&quot;H&quot;,[&quot;HH&quot;,2],0,&quot;hour&quot;),H(&quot;h&quot;,[&quot;hh&quot;,2],0,function(){return this.hours()%12||12}),Sb(&quot;a&quot;,!0),Sb(&quot;A&quot;,!1),z(&quot;hour&quot;,&quot;h&quot;),N(&quot;a&quot;,Tb),N(&quot;A&quot;,Tb),N(&quot;H&quot;,Wc),N(&quot;h&quot;,Wc),N(&quot;HH&quot;,Wc,Sc),N(&quot;hh&quot;,Wc,Sc),Q([&quot;H&quot;,&quot;HH&quot;],id),Q([&quot;a&quot;,&quot;A&quot;],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),Q([&quot;h&quot;,&quot;hh&quot;],function(a,b,c){b[id]=q(a),j(c).bigHour=!0});var Hd=/[ap]\.?m?\.?/i,Id=C(&quot;Hours&quot;,!0);H(&quot;m&quot;,[&quot;mm&quot;,2],0,&quot;minute&quot;),z(&quot;minute&quot;,&quot;m&quot;),N(&quot;m&quot;,Wc),N(&quot;mm&quot;,Wc,Sc),Q([&quot;m&quot;,&quot;mm&quot;],jd);var Jd=C(&quot;Minutes&quot;,!1);H(&quot;s&quot;,[&quot;ss&quot;,2],0,&quot;second&quot;),z(&quot;second&quot;,&quot;s&quot;),N(&quot;s&quot;,Wc),N(&quot;ss&quot;,Wc,Sc),Q([&quot;s&quot;,&quot;ss&quot;],kd);var Kd=C(&quot;Seconds&quot;,!1);H(&quot;S&quot;,0,0,function(){return~~(this.millisecond()/100)}),H(0,[&quot;SS&quot;,2],0,function(){return~~(this.millisecond()/10)}),H(0,[&quot;SSS&quot;,3],0,&quot;millisecond&quot;),H(0,[&quot;SSSS&quot;,4],0,function(){return 10*this.millisecond()}),H(0,[&quot;SSSSS&quot;,5],0,function(){return 100*this.millisecond()}),H(0,[&quot;SSSSSS&quot;,6],0,function(){return 1e3*this.millisecond()}),H(0,[&quot;SSSSSSS&quot;,7],0,function(){return 1e4*this.millisecond()}),H(0,[&quot;SSSSSSSS&quot;,8],0,function(){return 1e5*this.millisecond()}),H(0,[&quot;SSSSSSSSS&quot;,9],0,function(){return 1e6*this.millisecond()}),z(&quot;millisecond&quot;,&quot;ms&quot;),N(&quot;S&quot;,Xc,Rc),N(&quot;SS&quot;,Xc,Sc),N(&quot;SSS&quot;,Xc,Tc);var Ld;for(Ld=&quot;SSSS&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)N(Ld,$c);for(Ld=&quot;S&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)Q(Ld,Wb);var Md=C(&quot;Milliseconds&quot;,!1);H(&quot;z&quot;,0,0,&quot;zoneAbbr&quot;),H(&quot;zz&quot;,0,0,&quot;zoneName&quot;);var Nd=n.prototype;Nd.add=Ad,Nd.calendar=cb,Nd.clone=db,Nd.diff=ib,Nd.endOf=ub,Nd.format=mb,Nd.from=nb,Nd.fromNow=ob,Nd.to=pb,Nd.toNow=qb,Nd.get=F,Nd.invalidAt=Cb,Nd.isAfter=eb,Nd.isBefore=fb,Nd.isBetween=gb,Nd.isSame=hb,Nd.isValid=Ab,Nd.lang=Cd,Nd.locale=rb,Nd.localeData=sb,Nd.max=wd,Nd.min=vd,Nd.parsingFlags=Bb,Nd.set=F,Nd.startOf=tb,Nd.subtract=Bd,Nd.toArray=yb,Nd.toObject=zb,Nd.toDate=xb,Nd.toISOString=lb,Nd.toJSON=lb,Nd.toString=kb,Nd.unix=wb,Nd.valueOf=vb,Nd.year=td,Nd.isLeapYear=ia,Nd.weekYear=Fb,Nd.isoWeekYear=Gb,Nd.quarter=Nd.quarters=Jb,Nd.month=Y,Nd.daysInMonth=Z,Nd.week=Nd.weeks=na,Nd.isoWeek=Nd.isoWeeks=oa,Nd.weeksInYear=Ib,Nd.isoWeeksInYear=Hb,Nd.date=Dd,Nd.day=Nd.days=Pb,Nd.weekday=Qb,Nd.isoWeekday=Rb,Nd.dayOfYear=qa,Nd.hour=Nd.hours=Id,Nd.minute=Nd.minutes=Jd,Nd.second=Nd.seconds=Kd,
Nd.millisecond=Nd.milliseconds=Md,Nd.utcOffset=Na,Nd.utc=Pa,Nd.local=Qa,Nd.parseZone=Ra,Nd.hasAlignedHourOffset=Sa,Nd.isDST=Ta,Nd.isDSTShifted=Ua,Nd.isLocal=Va,Nd.isUtcOffset=Wa,Nd.isUtc=Xa,Nd.isUTC=Xa,Nd.zoneAbbr=Xb,Nd.zoneName=Yb,Nd.dates=aa(&quot;dates accessor is deprecated. Use date instead.&quot;,Dd),Nd.months=aa(&quot;months accessor is deprecated. Use month instead&quot;,Y),Nd.years=aa(&quot;years accessor is deprecated. Use year instead&quot;,td),Nd.zone=aa(&quot;moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779&quot;,Oa);var Od=Nd,Pd={sameDay:&quot;[Today at] LT&quot;,nextDay:&quot;[Tomorrow at] LT&quot;,nextWeek:&quot;dddd [at] LT&quot;,lastDay:&quot;[Yesterday at] LT&quot;,lastWeek:&quot;[Last] dddd [at] LT&quot;,sameElse:&quot;L&quot;},Qd={LTS:&quot;h:mm:ss A&quot;,LT:&quot;h:mm A&quot;,L:&quot;MM/DD/YYYY&quot;,LL:&quot;MMMM D, YYYY&quot;,LLL:&quot;MMMM D, YYYY h:mm A&quot;,LLLL:&quot;dddd, MMMM D, YYYY h:mm A&quot;},Rd=&quot;Invalid date&quot;,Sd=&quot;%d&quot;,Td=/\d{1,2}/,Ud={future:&quot;in %s&quot;,past:&quot;%s ago&quot;,s:&quot;a few seconds&quot;,m:&quot;a minute&quot;,mm:&quot;%d minutes&quot;,h:&quot;an hour&quot;,hh:&quot;%d hours&quot;,d:&quot;a day&quot;,dd:&quot;%d days&quot;,M:&quot;a month&quot;,MM:&quot;%d months&quot;,y:&quot;a year&quot;,yy:&quot;%d years&quot;},Vd=s.prototype;Vd._calendar=Pd,Vd.calendar=_b,Vd._longDateFormat=Qd,Vd.longDateFormat=ac,Vd._invalidDate=Rd,Vd.invalidDate=bc,Vd._ordinal=Sd,Vd.ordinal=cc,Vd._ordinalParse=Td,Vd.preparse=dc,Vd.postformat=dc,Vd._relativeTime=Ud,Vd.relativeTime=ec,Vd.pastFuture=fc,Vd.set=gc,Vd.months=U,Vd._months=md,Vd.monthsShort=V,Vd._monthsShort=nd,Vd.monthsParse=W,Vd.week=ka,Vd._week=ud,Vd.firstDayOfYear=ma,Vd.firstDayOfWeek=la,Vd.weekdays=Lb,Vd._weekdays=Ed,Vd.weekdaysMin=Nb,Vd._weekdaysMin=Gd,Vd.weekdaysShort=Mb,Vd._weekdaysShort=Fd,Vd.weekdaysParse=Ob,Vd.isPM=Ub,Vd._meridiemParse=Hd,Vd.meridiem=Vb,w(&quot;en&quot;,{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===q(a%100/10)?&quot;th&quot;:1===b?&quot;st&quot;:2===b?&quot;nd&quot;:3===b?&quot;rd&quot;:&quot;th&quot;;return a+c}}),a.lang=aa(&quot;moment.lang is deprecated. Use moment.locale instead.&quot;,w),a.langData=aa(&quot;moment.langData is deprecated. Use moment.localeData instead.&quot;,y);var Wd=Math.abs,Xd=yc(&quot;ms&quot;),Yd=yc(&quot;s&quot;),Zd=yc(&quot;m&quot;),$d=yc(&quot;h&quot;),_d=yc(&quot;d&quot;),ae=yc(&quot;w&quot;),be=yc(&quot;M&quot;),ce=yc(&quot;y&quot;),de=Ac(&quot;milliseconds&quot;),ee=Ac(&quot;seconds&quot;),fe=Ac(&quot;minutes&quot;),ge=Ac(&quot;hours&quot;),he=Ac(&quot;days&quot;),ie=Ac(&quot;months&quot;),je=Ac(&quot;years&quot;),ke=Math.round,le={s:45,m:45,h:22,d:26,M:11},me=Math.abs,ne=Ha.prototype;ne.abs=oc,ne.add=qc,ne.subtract=rc,ne.as=wc,ne.asMilliseconds=Xd,ne.asSeconds=Yd,ne.asMinutes=Zd,ne.asHours=$d,ne.asDays=_d,ne.asWeeks=ae,ne.asMonths=be,ne.asYears=ce,ne.valueOf=xc,ne._bubble=tc,ne.get=zc,ne.milliseconds=de,ne.seconds=ee,ne.minutes=fe,ne.hours=ge,ne.days=he,ne.weeks=Bc,ne.months=ie,ne.years=je,ne.humanize=Fc,ne.toISOString=Gc,ne.toString=Gc,ne.toJSON=Gc,ne.locale=rb,ne.localeData=sb,ne.toIsoString=aa(&quot;toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)&quot;,Gc),ne.lang=Cd,H(&quot;X&quot;,0,0,&quot;unix&quot;),H(&quot;x&quot;,0,0,&quot;valueOf&quot;),N(&quot;x&quot;,_c),N(&quot;X&quot;,bd),Q(&quot;X&quot;,function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),Q(&quot;x&quot;,function(a,b,c){c._d=new Date(q(a))}),a.version=&quot;2.10.6&quot;,b(Da),a.fn=Od,a.min=Fa,a.max=Ga,a.utc=h,a.unix=Zb,a.months=jc,a.isDate=d,a.locale=w,a.invalid=l,a.duration=Ya,a.isMoment=o,a.weekdays=lc,a.parseZone=$b,a.localeData=y,a.isDuration=Ia,a.monthsShort=kc,a.weekdaysMin=nc,a.defineLocale=x,a.weekdaysShort=mc,a.normalizeUnits=A,a.relativeTimeThreshold=Ec;var oe=a;return oe});</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2c64669f-f07e-4365-bf64-c559ace83004</id>
                <name>stopOnErrorCount</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122375</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to Stop a channel if it reaches a particular error count. 
	Also sends an alert message via another channel (this sends a sms via our monitoring system).

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function stopOnErrorCount(cid, errorCount) {
	var channelStatisticsController = Packages.com.mirth.connect.server.controllers.ChannelStatisticsController.getInstance();
	var channelStatusController = Packages.com.mirth.connect.server.controllers.ChannelStatusController.getInstance();
	var stats = channelStatisticsController.getStatistics(cid);
	// var numOfQueued = stats.queued;
	var numOfErrors = stats.error;

	if(numOfErrors &gt; errorCount )
	{
		//Stop Me
		channelStatusController.stopChannel(cid);
		//Alert msg sent to _SVHALERT channel
		var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
		var channelName = channelController.getDeployedChannelById(cid).getName();
		var alertmsg = &apos;mirth01 mirth_channel_status codeTemplate_stopOnErrorCount 0 &apos; +
					   &apos;channel &apos; + channelName + &apos; stopped&apos;;
		router.routeMessage(&apos;_SVHALERT&apos;, alertmsg);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>08044817-3504-4fc1-80ee-404870195151</id>
                <name>test</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122745</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.
	searchword
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function testfunc(arg1) {
	return arg1;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
            <name>WebPT-Mirth</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121602</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
                <name>Fix HL7v2 Node Order</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121804</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>35f4c250-08b4-4e42-8e60-f85aa98dfe50</id>
            <name>WebPT-Translations</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939924</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>be8f057b-2640-4613-b2e7-83326c59169c</id>
                <name>AddZeros</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122826</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function addZeroes(num) {
   return num.toLocaleString(&quot;en&quot;, {useGrouping: false, minimumFractionDigits: 2})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>51913864-7702-489a-b7c6-54992c12b19d</id>
                <name>FindLookupValueWithDefault</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122218</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithDefault ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        //obj.LeftValue = LeftValue;
        //obj.RightValue1 = DefaultValue1;
        //obj.RightValue2   = DefaultValue2; 
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);
            var result = pattern.test(LeftValue );

            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>c276be9f-c8f1-4dea-8df0-e000c6745271</id>
                <name>FindLookupValueWithInsuranceId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122080</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithInsuranceId ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);             
            var result = pattern.test(LeftValue );
	
            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7d746da2-58c6-44eb-ad5c-c5bfd0a0c537</id>
                <name>UseExternalProblemID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122349</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalProblemID() {

if ([&apos;2804&apos;, &apos;2822&apos;].indexOf($(&apos;tenantId&apos;) + &apos;&apos;) &gt; -1) {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitexternalproblemid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitaccountnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>07730e85-7f30-4ddf-90a4-78183c896ab5</id>
                <name>UseExternalVisitID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122192</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalVisitID() {
	
if ($(&apos;tenantId&apos;)  == &apos;9999&apos; ) {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitexternalvisitid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitvisitnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
        <channelTags>
          <channelTag>
            <id>c1433831-1e9d-484f-96da-2cf13fd4d40f</id>
            <name>ADT</name>
            <channelIds>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>272250ac-d998-41dc-b01d-7721808b3ec6</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>b59b9f9f-5b73-4ca2-8f9a-e257c6dd5dd3</id>
            <name>Caregility</name>
            <channelIds>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>2de4d4da-f07a-4ec9-aa7a-be75a0cd9f6f</id>
            <name>Test</name>
            <channelIds>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>255</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>b3c02702-76b1-4d60-9266-f16ba39e343a</id>
            <name>Volume</name>
            <channelIds>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
            </channelIds>
            <backgroundColor>
              <red>128</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
        </channelTags>
      </exportData>
    </channel>
    <channel version="4.0.0">
      <id>c5aa527b-0e36-4790-8302-e1a6a472455e</id>
      <nextMetaDataId>4</nextMetaDataId>
      <name>Volume Test - CSV to HL7 ADT Interface</name>
      <description></description>
      <revision>7</revision>
      <sourceConnector version="4.0.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.file.FileReceiverProperties" version="4.0.0">
          <pluginProperties/>
          <pollConnectorProperties version="4.0.0">
            <pollingType>INTERVAL</pollingType>
            <pollOnStart>false</pollOnStart>
            <pollingFrequency>5000</pollingFrequency>
            <pollingHour>0</pollingHour>
            <pollingMinute>0</pollingMinute>
            <cronJobs/>
            <pollConnectorPropertiesAdvanced>
              <weekly>true</weekly>
              <inactiveDays>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
              </inactiveDays>
              <dayOfMonth>1</dayOfMonth>
              <allDay>true</allDay>
              <startingHour>8</startingHour>
              <startingMinute>0</startingMinute>
              <endingHour>17</endingHour>
              <endingMinute>0</endingMinute>
            </pollConnectorPropertiesAdvanced>
          </pollConnectorProperties>
          <sourceConnectorProperties version="4.0.0">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>true</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <scheme>FILE</scheme>
          <host>C:/HL7/IntegrateIT.us/in/adt</host>
          <fileFilter>*.csv</fileFilter>
          <regex>false</regex>
          <directoryRecursion>false</directoryRecursion>
          <ignoreDot>true</ignoreDot>
          <anonymous>true</anonymous>
          <username>anonymous</username>
          <password>anonymous</password>
          <timeout>10000</timeout>
          <secure>true</secure>
          <passive>true</passive>
          <validateConnection>true</validateConnection>
          <afterProcessingAction>DELETE</afterProcessingAction>
          <moveToDirectory></moveToDirectory>
          <moveToFileName></moveToFileName>
          <errorReadingAction>NONE</errorReadingAction>
          <errorResponseAction>AFTER_PROCESSING</errorResponseAction>
          <errorMoveToDirectory></errorMoveToDirectory>
          <errorMoveToFileName></errorMoveToFileName>
          <checkFileAge>true</checkFileAge>
          <fileAge>1000</fileAge>
          <fileSizeMinimum>0</fileSizeMinimum>
          <fileSizeMaximum></fileSizeMaximum>
          <ignoreFileSizeMaximum>true</ignoreFileSizeMaximum>
          <sortBy>date</sortBy>
          <binary>false</binary>
          <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        </properties>
        <transformer version="4.0.0">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
              <name>Populate ADT msgs from CSV file</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>// 2022-06-10 JER - Added field: batchId from column14

var date = new Date();
// var ts=new Timestamp(date.getTime());
var today = new Date();
var dd = String(today.getDate()).padStart(2,&apos;0&apos;);
var mm = String(today.getMonth() + 1).padStart(2,&apos;0&apos;); //January is 0!
var yyyy = today.getFullYear();
var hh= String(today.getHours()).padStart(2,&apos;0&apos;);
var MM= String(today.getMinutes()).padStart(2,&apos;0&apos;); 
var ss= String(today.getSeconds()).padStart(2,&apos;0&apos;);
var ts= yyyy+mm+dd+hh+MM+ss;
// message datetime
tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;]= ts;
// event recorded datetime
tmp[&apos;EVN&apos;][&apos;EVN.2&apos;][&apos;EVN.2.1&apos;]= ts;
// 2022-06-10 JER - Added field: batchId from column14 - record batch number (e.g. BATCH06301, etc.)
channelMap.put(&apos;batchId&apos;,msg[&apos;row1&apos;][&apos;column14&apos;].toString());
tmp[&apos;EVN&apos;][&apos;EVN.4&apos;][&apos;EVN.4.1&apos;]= msg[&apos;row1&apos;][&apos;column14&apos;].toString();
// event type
channelMap.put(&apos;eventType&apos;,tmp[&apos;EVN&apos;][&apos;EVN.1&apos;][&apos;EVN.1.1&apos;].toString());
// patientId
tmp[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;]= msg[&apos;row1&apos;][&apos;column1&apos;].toString();
channelMap.put(&apos;patientId&apos;,msg[&apos;row1&apos;][&apos;column1&apos;].toString());
// sending Application
tmp[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;]= $gc(&apos;gcSendingApplication&apos;);
// sending Facility
tmp[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;]= $gc(&apos;gcSendingFacility&apos;);
// receiving Application
tmp[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;]= $gc(&apos;gcReceivingApplication&apos;);
// receiving Facility
tmp[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;]= $gc(&apos;gcReceivingFacility&apos;);
// msgCtrlId
tmp[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]= msg[&apos;row1&apos;][&apos;column1&apos;].toString()+&quot;.&quot;+ts;
channelMap.put(&apos;msgCtrlId&apos;,msg[&apos;row1&apos;][&apos;column1&apos;].toString()+&quot;.&quot;+ts);
// firstName
tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;]= msg[&apos;row1&apos;][&apos;column2&apos;].toString();
// firstName
tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;]= msg[&apos;row1&apos;][&apos;column3&apos;].toString();
// middleName
tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;]= msg[&apos;row1&apos;][&apos;column4&apos;].toString();
// dateOfBirth
tmp[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;]= msg[&apos;row1&apos;][&apos;column5&apos;].toString();
// gender
tmp[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;]= msg[&apos;row1&apos;][&apos;column6&apos;].toString();
// local assigningAuthority
tmp[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;]= msg[&apos;row1&apos;][&apos;column7&apos;].toString();
channelMap.put(&apos;assigningAuthority&apos;,msg[&apos;row1&apos;][&apos;column7&apos;].toString());
// accountNumber
tmp[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;]= msg[&apos;row1&apos;][&apos;column13&apos;].toString();
// sendingFacility
tmp[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;]= msg[&apos;row1&apos;][&apos;column7&apos;].toString();
// unit
tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;]= msg[&apos;row1&apos;][&apos;column8&apos;].toString();
// room
tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;]= msg[&apos;row1&apos;][&apos;column9&apos;].toString();
// bed
tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.3&apos;]= msg[&apos;row1&apos;][&apos;column11&apos;].toString();
// deviceId
tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.9&apos;]= msg[&apos;row1&apos;][&apos;column12&apos;].toString();
channelMap.put(&apos;deviceId&apos;,msg[&apos;row1&apos;][&apos;column12&apos;].toString());

// admissionDateTime
// event recorded datetime
tmp[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;]= ts;</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
              <name>Get Global Channel Map Varibles for Local Instances Variables</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>/* 
Name: 	Get Global Channel Map Varibles for Local Instances Variables
Desc: 	Get Global Channel Map Variables for Local Channel Map variable instances
Created:	2020-12-01 
Modified:
2020-11-23 JER - Modified to match the provided HL7 msg file
*/

var scriptName= &quot;Get Global Channel Map Variables for Local Channel&quot;;
var debug= 0;

if(debug&gt;0) { 
	logger.error(&apos;DEBUG::&apos;+scriptName+&apos; patientIdPrefix: &apos;+globalMap.get(&apos;gPatientIdPrefix&apos;));
}

var patientIdPrefix= channelMap.put(&apos;lPatientIdPrefix&apos;,globalMap.get(&apos;gPatientIdPrefix&apos;));
var patientLastName= channelMap.put(&apos;lPatientLastName&apos;,globalMap.get(&apos;gPatientLastName&apos;));
var patientFirstName= channelMap.put(&apos;lPatientFirstName&apos;,globalMap.get(&apos;gPatientFirstName&apos;));
var patientDateOfBirth= channelMap.put(&apos;lPatientDateOfBirth&apos;,globalMap.get(&apos;gPatientDateOfBirth&apos;));
var patientGender= channelMap.put(&apos;lPatientGender&apos;,globalMap.get(&apos;gPatientGender&apos;));</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64">TVNIfF5+XCZ8UVMxUEhBUk1BQ1l8fFFTMVBIQVJNQUNZfHwyMDE0MDQxMDA5MTAyMnx8QURUXkEwOHwyMDE0MDQxMDA5MTAyMnxQfDIuNS4xfHx8DUVWTnxBMDh8MjAxNDA0MTAwOTEwMjJ8fHx8DVBJRHx8fDIwMTQwNDEwMDAxfENSVVpWfENSVVpeVkVSQV58fDE5MzMxMDEwfEZ8fHwxMjM0NSBXRVNUIE1BSU4gU1RSRUVUXl5DQVJNRUxeSU5eNDYwMzJ8fDAwMDAwMDAwMDB8MDAwMDAwMDAwMHxFfHx8MjAxNDA0MTAwMDF8fHx8fHx8fHx8DVBWMXx8T3xXXjEwOV5CXkFQRk18fHx8MzIxNDU2Nzg5M15QXnx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHwyMDE0MDQxMF4wNDEwMjAxNHx8DUdUMXwxfHxBUEZNIENFTlRFUnwNSU4xfDF8U0N8U0VOSU9SIENBUkUgUnh8fHx8fHx8fHwwMDAwMDAwMHwwMDAwMDAwMHx8fHwwfHx8Tnx8MXx8fHx8fHx8fHx8fHx8fHwN</outboundTemplate>
          <inboundDataType>DELIMITED</inboundDataType>
          <outboundDataType>HL7V2</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="4.0.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="4.0.0">
              <columnDelimiter>,</columnDelimiter>
              <recordDelimiter>\r\n</recordDelimiter>
              <quoteToken>&quot;</quoteToken>
              <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
              <quoteEscapeToken>\</quoteEscapeToken>
              <numberedRows>true</numberedRows>
              <ignoreCR>false</ignoreCR>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="4.0.0">
              <columnDelimiter>,</columnDelimiter>
              <recordDelimiter>\n</recordDelimiter>
              <quoteToken>&quot;</quoteToken>
              <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
              <quoteEscapeToken>\</quoteEscapeToken>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="4.0.0">
              <splitType>Record</splitType>
              <batchSkipRecords>1</batchSkipRecords>
              <batchMessageDelimiter></batchMessageDelimiter>
              <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
              <batchGroupingColumn></batchGroupingColumn>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
              <handleRepetitions>true</handleRepetitions>
              <handleSubcomponents>true</handleSubcomponents>
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <stripNamespaces>false</stripNamespaces>
              <segmentDelimiter>\r</segmentDelimiter>
              <convertLineBreaks>true</convertLineBreaks>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <segmentDelimiter>\r</segmentDelimiter>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
              <splitType>MSH_Segment</splitType>
              <batchScript></batchScript>
            </batchProperties>
            <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
              <segmentDelimiter>\r</segmentDelimiter>
              <successfulACKCode>AA</successfulACKCode>
              <successfulACKMessage></successfulACKMessage>
              <errorACKCode>AE</errorACKCode>
              <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
              <rejectedACKCode>AR</rejectedACKCode>
              <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
              <msh15ACKAccept>false</msh15ACKAccept>
              <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
            </responseGenerationProperties>
            <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
              <successfulACKCode>AA,CA</successfulACKCode>
              <errorACKCode>AE,CE</errorACKCode>
              <rejectedACKCode>AR,CR</rejectedACKCode>
              <validateMessageControlId>true</validateMessageControlId>
              <originalMessageControlId>Destination_Encoded</originalMessageControlId>
              <originalIdMapVariable></originalIdMapVariable>
            </responseValidationProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.0.0">
          <elements/>
        </filter>
        <transportName>File Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.0.0">
          <metaDataId>3</metaDataId>
          <name>TCP Sender - ADT Interface</name>
          <properties class="com.mirth.connect.connectors.tcp.TcpDispatcherProperties" version="4.0.0">
            <pluginProperties/>
            <destinationConnectorProperties version="4.0.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <transmissionModeProperties class="com.mirth.connect.plugins.mllpmode.MLLPModeProperties">
              <pluginPointName>MLLP</pluginPointName>
              <startOfMessageBytes>0B</startOfMessageBytes>
              <endOfMessageBytes>1C0D</endOfMessageBytes>
              <useMLLPv2>false</useMLLPv2>
              <ackBytes>06</ackBytes>
              <nackBytes>15</nackBytes>
              <maxRetries>2</maxRetries>
            </transmissionModeProperties>
            <serverMode>false</serverMode>
            <remoteAddress>127.0.0.1</remoteAddress>
            <remotePort>6662</remotePort>
            <overrideLocalBinding>false</overrideLocalBinding>
            <localAddress>0.0.0.0</localAddress>
            <localPort>0</localPort>
            <sendTimeout>5000</sendTimeout>
            <bufferSize>65536</bufferSize>
            <maxConnections>10</maxConnections>
            <keepConnectionOpen>false</keepConnectionOpen>
            <checkRemoteHost>false</checkRemoteHost>
            <responseTimeout>5000</responseTimeout>
            <ignoreResponse>false</ignoreResponse>
            <queueOnResponseTimeout>true</queueOnResponseTimeout>
            <dataTypeBinary>false</dataTypeBinary>
            <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
            <template>${message.encodedData}</template>
          </properties>
          <transformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>Call Anonymize HL7 Message Header</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>/*
	scriptName:	Call Anonymize HL7 Message Header
	scripFile:	call_anonymize_hl7_message_header.js
	desc:		This script handles the transformation to anonymize HL7 message header
	date:		2022-07-18 
	history:
	2022-04-15 JER - created from the call_anonymize_hl7_message_patient_demographics script
*/
var scriptName= &quot;call_anonymize_hl7_message_header&quot;;
var debug= 0;

var tmp= anonymize_hl7_message_header(msg);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>Call Anonymize HL7 Patient Demographics</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>/*
	scriptName:	Call Anonymize HL7 Patient Demographics
	scripFile:	call_anonymize_hl7_patient_demographics.js
	desc:		This script handles the transformation to anonymize HL7 message patient demographics
	date:		2022-05-36 
	history:
	2022-07-13 JER - moved the script to a code_template
	2022-04-15 JER - created from the convert_RDS_HL7_to_JSON script
*/
var scriptName= &quot;call_anonymize_hl7_patient_demographics&quot;;
var debug= 0;

var tmp= anonymize_hl7_patient_demographics(msg);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.0.0">
            <elements/>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.javascriptrule.JavaScriptRule version="4.0.0">
                <name>Filter Validation HL7 message - PID.3 &amp; PID.18</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>/* 
Name: 	filter_validation_hl7_message.js
Desc: 	Filter Incoming HL7v2 Message - ChannelMap
Created:	2021-02-12 
Modified:
*/
var scriptName= &quot;filter_validation_hl7_message&quot;;
var debug= 0;
var msgCtrlId= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
var msgDateTime= msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
if(msgCtrlId.toString().length&lt; 1) {
	msgCtrlId= msgDateTime;
}

if (debug&gt;0) { logger.debug(scriptName+&quot;::DEBUG received msg: &quot;+msg); }
// Verify PID-3 element value
if(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString().length &gt; 0) {
    if (debug&gt;0) { logger.debug(scriptName+&quot;::DEBUG message PASSED filter successfully&quot;); }
} else {
	var failureMessage= &apos;PID-3 Element: Missing Patient ID&apos;;
	logger.error(scriptName+&quot;::DEBUG message: &quot;+msgCtrlId+&quot; FILTERED msg: &quot;+failureMessage);
}
// Verify PID-18 element value
if(msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString().length &gt; 0) {
    if (debug&gt;0) { logger.debug(scriptName+&quot;::DEBUG message PASSED filter successfully&quot;); }
} else {
	var failureMessage= &apos;PID-18 Element: Missing Account Number&apos;;
	logger.error(scriptName+&quot;::DEBUG message: &quot;+msgCtrlId+&quot; FILTERED msg: &quot;+failureMessage);
}
/*
// Verify PV1-19 element value
if(tmp[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PID.19.1&apos;].toString().length &gt; 0) {
    if (debug&gt;0) { logger.debug(scriptName+&quot;::DEBUG message PASSED filter successfully&quot;); }
} else {
	var failureMessage= &apos;PV1-19 Element: Missing Visit Number&apos;;
	logger.error(scriptName+&quot;::DEBUG message: &quot;+msgCtrlId+&quot; FILTERED msg: &quot;+failureMessage);
}
*/
if(failureMessage) {
	$c(&apos;rejectMessage&apos;,failureMessage);
	$c(&apos;failureMessage&apos;,failureMessage);
	return false;
} else {
    return true;
}</script>
              </com.mirth.connect.plugins.javascriptrule.JavaScriptRule>
            </elements>
          </filter>
          <transportName>TCP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="4.0.0">
          <metaDataId>2</metaDataId>
          <name>Sent to outfile: C:\HL7\Caregility\out</name>
          <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="4.0.0">
            <pluginProperties/>
            <destinationConnectorProperties version="4.0.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <scheme>FILE</scheme>
            <host>C:/HL7/Caregility/out</host>
            <outputPattern>${msgCtrlId}_${assigningAuthority}.hl7</outputPattern>
            <anonymous>true</anonymous>
            <username>anonymous</username>
            <password>anonymous</password>
            <timeout>10000</timeout>
            <keepConnectionOpen>true</keepConnectionOpen>
            <maxIdleTime>0</maxIdleTime>
            <secure>true</secure>
            <passive>true</passive>
            <validateConnection>true</validateConnection>
            <outputAppend>false</outputAppend>
            <errorOnExists>false</errorOnExists>
            <temporary>false</temporary>
            <binary>false</binary>
            <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
            <template>${message.encodedData}</template>
          </properties>
          <transformer version="4.0.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>Call Anonymize HL7 Message Header</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>/*
	scriptName:	Call Anonymize HL7 Message Header
	scripFile:	call_anonymize_hl7_message_header.js
	desc:		This script handles the transformation to anonymize HL7 message header
	date:		2022-07-18 
	history:
	2022-04-15 JER - created from the call_anonymize_hl7_message_patient_demographics script
*/
var scriptName= &quot;call_anonymize_hl7_message_header&quot;;
var debug= 0;

var tmp= anonymize_hl7_message_header(msg);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
                <name>Call Anonymize HL7 Patient Demographics</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>/*
	scriptName:	Call Anonymize HL7 Patient Demographics
	scripFile:	call_anonymize_hl7_patient_demographics.js
	desc:		This script handles the transformation to anonymize HL7 message patient demographics
	date:		2022-05-36 
	history:
	2022-07-13 JER - moved the script to a code_template
	2022-04-15 JER - created from the convert_RDS_HL7_to_JSON script
*/
var scriptName= &quot;call_anonymize_hl7_patient_demographics&quot;;
var debug= 0;

var tmp= anonymize_hl7_patient_demographics(msg);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.0.0">
            <elements/>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.0.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.0.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.0.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.0.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.0.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.0.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.0.0">
            <elements/>
          </filter>
          <transportName>File Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
globalChannelMap.put(&apos;gcSendingApplication&apos;,&apos;QS1PHARMACY&apos;);
globalChannelMap.put(&apos;gcSendingFacility&apos;,&apos;9875&apos;);
globalChannelMap.put(&apos;gcReceivingApplication&apos;,&apos;QS1ORDERS&apos;);
globalChannelMap.put(&apos;gcReceivingFacility&apos;,&apos;APFM&apos;);

return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.0.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>true</removeAttachmentsOnCompletion>
        <initialState>STOPPED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>BATCHID</name>
            <type>STRING</type>
            <mappingName>batchId</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>EVENTTYPE</name>
            <type>STRING</type>
            <mappingName>eventType</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>MSGCTRLID</name>
            <type>STRING</type>
            <mappingName>msgCtrlId</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>PATIENTID</name>
            <type>STRING</type>
            <mappingName>patientId</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>DEVICEID</name>
            <type>STRING</type>
            <mappingName>deviceId</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.0.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1658530869809</time>
            <timezone>GMT-06:00</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>10</pruneMetaDataDays>
            <pruneContentDays>10</pruneContentDays>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="4.0.0">
            <id>d316c4bc-9e10-4162-b67c-e514afc59fa3</id>
            <name>Channel Helpers</name>
            <revision>1</revision>
            <lastModified>
              <time>1706120884823</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>1aca2a66-a83a-4703-9ec7-dfaa3a6ad5b2</string>
              <string>3e15b608-553f-45e7-a617-712d6b75ab4d</string>
              <string>f6d6aa80-d65f-4935-a267-d6bef39a7bdf</string>
              <string>edd93839-401c-4613-b696-6d4799ebc5af</string>
              <string>2f511815-92d1-4f0f-92e9-f4f8ae576b75</string>
              <string>b4a51816-0aad-444a-b1ce-f5c11f9961bc</string>
              <string>cb7f055d-45ae-43b7-ac7c-bb2b2db34ded</string>
              <string>139cdc6a-5f40-46bd-a246-2a9a1ef8ed10</string>
              <string>316c7826-a8ee-44b4-922c-8afe0daa2c72</string>
              <string>6ff8ca2b-c4e3-4e6f-897a-17f36ed63faa</string>
              <string>27aee1c0-8ed0-4062-89b5-1c7a69a946bc</string>
              <string>291b4847-a85d-41c6-bd4a-37f008b15ca8</string>
              <string>81c836fd-cbba-4247-b438-d4c9987ee75b</string>
              <string>4318de8e-4d7b-4885-9f11-8b2ac6f9c70a</string>
              <string>e983e439-461a-424f-8348-764b29e05ecb</string>
              <string>0763b542-8ed8-4a30-9c35-de3dbf030626</string>
              <string>75c150e0-fbc5-4eef-a856-bec6b3a39a24</string>
              <string>dd55a671-a099-4b29-bdbb-85c34050037a</string>
              <string>a08848df-6dcd-4c51-aa6d-d2f85edfdcf8</string>
              <string>ae504043-55f5-497e-ac87-33686e7569b2</string>
              <string>fef7c31a-61a4-43c8-bb15-79f51a36c882</string>
              <string>69f5ad2c-3bf4-4d55-8e4a-bd6faade202d</string>
              <string>39acd9f7-c975-4787-b31e-714f748a51a2</string>
              <string>a8bd6f50-894f-443f-b248-da3ebad3a748</string>
              <string>3c355935-e639-4517-b3b1-42c6564387f8</string>
              <string>1e45f5ac-6815-40a8-8fe9-15e98eb1d07b</string>
              <string>e695a1d8-2bde-4da3-a9a8-8cd6f81ca3c0</string>
              <string>3d95de17-a2ea-446c-be4c-36c32d8cda1c</string>
              <string>205385d0-06be-4baa-b072-9b431c315827</string>
              <string>a8ebde5a-16cb-407e-a8b4-fa8766d26c73</string>
              <string>fdcb1121-0d49-4ed8-b1a1-4f4482e1c20a</string>
              <string>b1842d23-059a-4e7e-b447-3b5f5ccf5c3a</string>
              <string>8c5d3887-bd22-4018-aeda-45e5c0f8d551</string>
              <string>a127fffb-1663-4206-b6d3-348aa228c999</string>
              <string>d70fc7fa-2005-4fc7-9222-dc8119346c6e</string>
              <string>2a2ad8a5-b961-4f4c-ac09-8abee2097972</string>
              <string>143b10e0-e01b-4942-9995-2d3b9a165d76</string>
              <string>a574bc8d-e82e-4ec6-9430-f3a37278e356</string>
              <string>f6e27b4e-dbbd-48c9-994f-55c3ac511fb9</string>
              <string>6060b76d-07c2-4f9f-bc71-d2e8c44d8271</string>
              <string>08536fee-6f99-4cc4-8958-f84daaee73d5</string>
              <string>dccd5a80-a385-482e-97e4-69340bce4522</string>
              <string>bfa0bc00-9ee1-4ba5-99de-9e46faffed6d</string>
              <string>183b6833-a563-42cb-8d4d-cdcb740aef30</string>
              <string>652e2cab-f748-41b4-ae8f-f0aae48e1fca</string>
              <string>bd81709b-2ef0-4760-aba9-f455fb338f37</string>
              <string>633e9341-a80b-4c11-a6a3-1d3942bb1782</string>
              <string>695c7ed6-252e-4229-83db-5571946a8b62</string>
              <string>df3f9b9f-e8e7-47a9-a33d-c9ec7d7820fd</string>
              <string>895ee0ef-745c-464d-a46c-e51331a01c3f</string>
              <string>50dcf6de-46b4-4de5-99c2-d341abb8a41a</string>
              <string>5e411c40-61f8-467e-b132-78e54e0b5f81</string>
              <string>ed4ef090-3f7e-442d-ad30-744e3a1313f2</string>
              <string>ed3e52dc-3023-4cc7-8cad-47e0d5df89c1</string>
              <string>ec29c308-0bc3-4eb0-a948-09c2c0747afa</string>
              <string>aeaba1c0-cef9-4ad8-82d7-76d66cc95562</string>
              <string>58f42d4f-22e1-4f7c-8acf-93a9fe92619c</string>
              <string>7a21d8ac-5afa-45b8-b136-5def45d811b4</string>
              <string>23ea2137-37b1-4b00-9fb0-c8889cd4bc97</string>
              <string>2a33ffd6-253d-402f-8fb6-93bd94f65dcd</string>
              <string>7445aaa5-ff13-4c08-a8b1-817cfed2692b</string>
              <string>3d290a27-5daf-4bb0-b3d8-90c9bb8afaeb</string>
              <string>e07b74b9-756e-4ca2-8be9-01bf7abfd817</string>
              <string>3ba1448a-d0b7-4478-bc57-f9cb8dab6de9</string>
              <string>dcaf136d-a3b8-47ed-aec7-d1619675ba2d</string>
              <string>285faf0d-523a-4c8e-92ec-4a0f3a89e048</string>
              <string>3263ad34-c86d-4481-b19f-4cd3d0d83d62</string>
              <string>e1af2369-c57e-4850-bc30-f79b6fe9fa66</string>
              <string>28ddc4f3-a96b-47db-b0e0-bcfcd825f48a</string>
              <string>90bc60ed-14c6-49db-b1e6-bb70d2b1d01d</string>
              <string>fd6b9376-0847-49d7-96c6-15c540a8e39a</string>
              <string>7ee4a47d-bdf3-473d-9da9-3a62c41037b1</string>
              <string>167ee803-661a-4e6e-ac6e-b84c057f7ca1</string>
              <string>a40e7657-c37a-4fb6-aa79-48a2ea16709c</string>
              <string>5d5e5835-8cd3-43af-ac82-ffe57439bfb5</string>
              <string>47f248b1-72d5-47dc-b0b3-6aa387e9e5d6</string>
              <string>d7c3e640-7850-4d70-bb1c-3289674bd609</string>
              <string>ae961745-fe19-46bd-b240-c82888091366</string>
              <string>68581957-7fba-421f-b063-941a804fcc46</string>
              <string>0056a8aa-7aa5-4047-a693-21bac64470aa</string>
              <string>2a637fa3-fb83-4666-abe0-c754924ff738</string>
              <string>8a08c578-68dd-4550-b178-eee13ade011e</string>
              <string>d448196a-4282-4d10-8c9a-7f1dfd19abea</string>
              <string>05759809-cfbd-4546-8b71-fd28c2499763</string>
              <string>1c01997f-00d1-4e40-9e63-da5706137cdd</string>
              <string>881db416-1776-4ab6-a3ce-5065ed11cdb5</string>
              <string>982b29a5-1743-4435-8842-9810e4e34926</string>
              <string>fe1bdd5e-cce0-4509-a09a-3545b69d3d7a</string>
              <string>1bff9775-2de8-4b51-bb6b-6aaa29c144bb</string>
              <string>5e97d36f-68fe-412d-a1df-3a25a07e5770</string>
              <string>9316c229-da47-49f8-a2c0-398ba155d370</string>
              <string>20524120-844c-4733-ac8a-b01f0e14a12f</string>
              <string>55ebb133-1e4d-4172-8718-301240e9518f</string>
              <string>b0dec3c0-01ca-45a6-b826-707b80644dff</string>
              <string>d1dd4342-0ad4-42cc-b708-f47e8c6621f8</string>
              <string>20d94501-cd46-41ce-9bf1-e34639074d16</string>
              <string>492a7c6c-4768-45e2-9f49-6c5488b0a2e5</string>
              <string>9f67f48f-ca64-4419-9101-05c39d7634fd</string>
              <string>14a2ad40-95bb-4ac9-a10e-d326537cc5a6</string>
              <string>6aa39894-bc9b-448c-aac6-b6967a0ce243</string>
              <string>4108a56a-b1a6-4d8c-9e8e-b065654860d0</string>
              <string>bdb4241f-2858-49da-8d4e-2f1579679620</string>
              <string>d56da279-9aa2-4b33-8913-bf0f37a046a0</string>
              <string>692365a7-9ec6-4c38-adee-672f4084adf3</string>
              <string>3f433a3e-e46d-440a-82c1-5490ada6b54e</string>
              <string>4d223d2f-d247-47da-b6e6-6d25e8a73775</string>
              <string>4b7abf79-011a-428e-96c9-040696a2869b</string>
              <string>72471096-425b-4750-81a4-123fca2e302c</string>
              <string>3558a098-5cbc-4e05-ae03-80b4aad20e53</string>
              <string>4a05dc00-9ad6-454a-b61b-ddd074bbb36c</string>
              <string>9d1c136c-3c94-43c3-b0f8-1c1551ac6987</string>
              <string>b2fdd8c2-f387-493b-ab35-e7e9e8ce056a</string>
              <string>930a4c9e-b458-4edf-92ff-3be07d68c28d</string>
              <string>8e046241-74a3-44e0-9bf9-f0b73a36717d</string>
              <string>0f0df6c9-1153-4e0b-800b-533492ba936c</string>
              <string>f016be9d-205d-4cdd-b4fb-e7139700dd22</string>
              <string>0801e501-57ac-4418-ac59-08e0edadabf3</string>
              <string>2607531a-4f9b-48ed-9ef4-b1b71b880864</string>
              <string>455c536f-d3fb-4832-941e-ef230b683590</string>
              <string>31b37e0b-cfbf-4787-b5d3-2082328fafd7</string>
              <string>21e47d6b-9863-4045-82af-8941087a4da1</string>
              <string>9ef7f26f-d3f7-420d-a30f-26f948be596d</string>
              <string>b3869a86-7d4f-4a10-b116-24b758a191b3</string>
              <string>a6825055-e697-487f-9add-560ad9567a60</string>
              <string>f7552865-32a0-4b5b-a5fd-9b0bddffddf9</string>
              <string>9f2bcd3c-8a74-49f1-b910-aa05c509c9cb</string>
              <string>bd270438-7262-47f8-8656-1baf51287078</string>
              <string>61b10ef9-baef-45e2-b747-a0987d851033</string>
              <string>aa5ba1e6-ab11-4a9a-a03c-e0fe58b49086</string>
              <string>ec653b8b-7362-4167-98ff-3845c7560d11</string>
              <string>1710d009-1bb2-4db6-a8d8-1493e6802c18</string>
              <string>25c5fbce-cb87-4ba9-a572-0be49242a0b2</string>
              <string>13738349-4cc4-43de-9365-a27ead17b524</string>
              <string>a43f7553-71de-41d3-aa16-93cc7a48bafc</string>
              <string>e7b4b295-2b47-4b4f-97b9-b9a9082bffb1</string>
              <string>854f78f8-4ebc-4c99-9a05-c26015671807</string>
              <string>e1900e14-c2a2-426e-86f0-971353d60cdd</string>
              <string>fd3b93dd-8b65-4b9f-a090-09bc7ec9aa12</string>
              <string>72c5d63d-a405-4ccf-b85e-dba740b14fdd</string>
              <string>f6efe381-7851-4bec-96c3-231b7baf666f</string>
              <string>2f3b524c-9d7b-43f7-b4ce-e84d27cc82ff</string>
              <string>99066deb-0d43-44f6-8823-b8cfe08e7185</string>
              <string>aa30f2b5-64cf-4396-b098-efeecb2224f2</string>
              <string>9fee4e0a-7a6d-4925-bc78-59df2c1f28af</string>
              <string>d23d6225-1145-484e-8164-f070fa1f2e8c</string>
              <string>57953b24-64cb-489d-9706-bf5dc1ef94ea</string>
              <string>08955a01-dda6-468b-a8cf-73586fe7d99f</string>
              <string>52d0a715-1be1-4fb2-8f3d-448c89c148f8</string>
              <string>4941f2fb-e641-4e0a-aba4-633ddf410760</string>
              <string>470c6c09-6850-4770-820c-bbfce54196bd</string>
              <string>21a820f0-205a-4046-8c4a-3788daca4d05</string>
              <string>5cee4e54-225f-43e4-830c-6dc3fb2826f2</string>
              <string>99643fbc-fa46-4c38-a7db-ac72833847f1</string>
              <string>9a44798a-871f-4402-9397-75241b18c6b0</string>
              <string>f1e2a84e-89e2-4ea0-8edd-4418f11b7eb7</string>
              <string>fe6275f5-4efa-4c86-90e2-8788c4f9c975</string>
              <string>081454ce-e155-45a1-bfc0-2297d6317259</string>
              <string>8b61cf50-9d95-43dd-b6ab-474e2a1d2d76</string>
              <string>5b245873-9491-4fa3-9bce-08c111cbe04f</string>
              <string>4041500f-7768-4011-b273-13fe61a2ebd6</string>
              <string>eaf28278-dd66-4bcc-b7e7-9a6c422db1ee</string>
              <string>0e0f63c0-5b51-4626-9a50-c0e2f5f94d37</string>
              <string>337347d0-d5f6-492c-9dc3-638a211132ff</string>
              <string>f836f593-4c61-49bd-be13-4cb3f9c6cffb</string>
              <string>0fec52ca-be59-47c9-85b1-700dc3b3dc2e</string>
              <string>a42ba030-2419-490c-8843-889e4197cf83</string>
              <string>4d75bdd7-6d1f-4db5-a7f8-4f63efa13197</string>
              <string>53d49d46-bd95-4ce5-8f98-7685217fedbf</string>
              <string>49a7b526-0577-4811-98c2-185bb6c22d91</string>
              <string>f8b35221-21af-4a86-9a4a-1b5657b5a029</string>
              <string>2f88fefe-6f80-46b6-a20a-04c29532073e</string>
              <string>8c637e01-95b0-4b11-a28f-4518b7f8d1ae</string>
              <string>7f5da166-70b8-48e0-9fa9-cf96fd867c30</string>
              <string>e3d85e42-6410-459f-95fc-2f98af8c0db9</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>bc768cd6-d735-40b1-9617-a3417481fe19</id>
                <name>Convert CSV to JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884963</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} csv - CSV string with column headers
	@return {String} return JSON object using column headers and field keys
*/
function convertCsvToJson(csv) {
	var textXML = SerializerFactory.getSerializer(&apos;DELIMITED&apos;).toXML(csv);
	var xml = new XML(textXML);
	var dataItems = [];
	for (var i = 1; i &lt;= xml[&apos;row&apos;].length() - 1; i++) {
		var jsonData = {};
		for (var j = 1; j &lt;= xml[&apos;row&apos;][0].children().length(); j++) {
			var column = &apos;column&apos; + j.toString();
			var header = xml[&apos;row&apos;][0][column].toString().replace(/\s/g, &apos;_&apos;).replace(/-/g, &apos;_&apos;).toLowerCase();
			var value = xml[&apos;row&apos;][i][column].toString();
			
			jsonData[header] = value;
			
		}
		dataItems.push(jsonData);
	}

	return JSON.stringify(dataItems);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>537d816c-81ff-4507-85c6-85e28b8c546c</id>
                <name>Convert JSON to CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885050</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts JSON to CSV.
**/
/*	@param {String} jsonData - JSON string with [0] index key as headers for csv
	@return {String} return csv
*/	

function convertJsonToCsv(data) {
	try{
		var json = JSON.parse(data);	
		var fields = Object.keys(json[0])
		var replacer = function(key, value) { return value === null ? &apos;&apos; : value } 
		var csv = json.map(function(row){
		  return fields.map(function(fieldName){
		    return JSON.stringify(row[fieldName], replacer)
		  }).join(&apos;,&apos;)
		})
		csv.unshift(fields.join(&apos;,&apos;)) // add header column
		csv = csv.join(&apos;\r\n&apos;);
		return csv;
	}catch(error){
		return error;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>ff3df0b8-cfa2-4ec9-82ac-37c9e4830e0c</id>
                <name>Generic - Send message to channel destination</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function sendMessageToChannelDestination(channelID, destinationID, map, data) {
	var msgMap;
	var outData = {};
	
	if (!map) {
		msgMap = Maps.map();
	} else {
		msgMap = Maps.map(map);
	}

	if (data == null || data == undefined) {
		data = &apos;&apos;;
	}

	if (msgMap.get(&apos;sourceChannelId&apos;) == null) {
		msgMap.add(&apos;sourceChannelId&apos;, channelId);
	}
	if (msgMap.get(&apos;sourceChannelName&apos;) == null) {
		msgMap.add(&apos;sourceChannelName&apos;, channelName);
	}

	// Dirty way to handle connector message not being defined. Handles cases where this function 
	// is used in a source js writer.
	try {
		if (msgMap.get(&apos;sourceMessageId&apos;) == null &amp;&amp; connectorMessage &amp;&amp; connectorMessage.getMessageId()) {
			msgMap.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString());
		}
	} catch(ex) {}

	var msgRequest = new RawMessage(data, [destinationID], msgMap);
	var msgResponse = router.routeMessageByChannelId(channelID, msgRequest);

	if (msgResponse == null) {
		// return;
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;; 
	}
	if (msgResponse.getStatus() == null) {
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;;
	}

	if (msgResponse.getStatus() == &apos;ERROR&apos;) {
		throw msgResponse.getMessage();
	}

	return msgResponse.getMessage();
	
	
	// var msgResponse;

	/*
	try {
		msgResponse = router.routeMessageByChannelId(channelID, msgRequest);
		outData.status = &apos;success&apos;;
		outData.status_message = &apos;message successfully sent to channel&apos;;
	} catch (ex) {
		outData.status = &apos;error&apos;;
		outData.status_message = ex.toString();
		return outData;
	}

	if (msgResponse.getStatus() == null) {
		outData.response_status = &apos;unknown&apos;;
		logger.error(&apos;Code Template &quot;Send message to channel by id&quot;: channel &quot;&apos; + ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;);
	}
	
	switch (String(msgResponse.getStatus())) {
		case &apos;ERROR&apos;:
			outData.response_status = &apos;error&apos;;
			break;
		case &apos;FILTERED&apos;:
			outData.response_status = &apos;filtered&apos;;
			break;
		case &apos;QUEUED&apos;:
			outData.response_status = &apos;queued&apos;;
			break;
		case &apos;RECEIVED&apos;:
			outData.response_status = &apos;received&apos;;
			break;
		case &apos;SENT&apos;:
			outData.response_status = &apos;sent&apos;;
			break;
	}

	outData.response_message = msgResponse.getMessage();

	return outData;
	*/
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>f4cd9e71-4f8d-4472-80a9-31b533f4d578</id>
                <name>Get bots DB connection to specified environment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884906</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get a new bots database connection. Be sure to wrap in try/finally block to close database connection.

	@param {String} environment - prod, staging, dev, local
	@return {String} return database connection
*/
function GetBotsDBConnection() {
	var username = configurationMap.get(&apos;bots-db-user&apos;);
	var password = configurationMap.get(&apos;bots-db-pass&apos;);
	var uri = configurationMap.get(&apos;bots-db-uri&apos;);	
	return DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, uri, username, password);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>554bd282-172b-43a0-8902-992baf63b04d</id>
                <name>Get DB connection to specified environment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120885107</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get a new database connection. 

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetDBConnection(environment) {
	if (environment != &apos;prod&apos; &amp;&amp; environment != &apos;staging&apos; &amp;&amp; environment != &apos;dev&apos; &amp;&amp; environment != &apos;local&apos;) {
		return null;
	}
	
	var username = configurationMap.get(&apos;docsink-db-user-&apos; + environment);
	var password = configurationMap.get(&apos;docsink-db-pass-&apos; + environment);
	var uri = configurationMap.get(&apos;docsink-db-uri-&apos; + environment);

	return DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.cj.jdbc.Driver&apos;, uri, username, password);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>552a87ed-b5a0-4546-9e5c-0a768661a351</id>
                <name>Postprocessor - Generate channel response</name>
                <revision>1</revision>
                <lastModified>
                  <time>1706120884842</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function generateChannelResponse() {
	// This script executes once after a message has been processed
	// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
	
	var destinations = sourceMap.get(&apos;destinationSet&apos;);
	var metadataIds = destinations.toArray();
	
	if (metadataIds.length == 0) {
		return ResponseFactory.getErrorResponse(&apos;invalid request&apos;);
	}
	
	var smsg = message.getConnectorMessages().get(0);
	if (smsg.getStatus() == &apos;ERROR&apos;) {
		if (smsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(smsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(smsg.getResponseData().getMessage());
	}
	
	var metadataID = metadataIds[0];
	var cmsg = message.getConnectorMessages().get(metadataID);

	if (cmsg.getStatus() == &apos;ERROR&apos;) {
		if (cmsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(cmsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;SENT&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;FILTERED&apos;) {
		return ResponseFactory.getFilteredResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;QUEUED&apos;) {
		return ResponseFactory.getQueuedResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;RECEIVED&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else {
		return cmsg;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>46188992-808e-4348-9541-4a97a861c28c</id>
            <name>Utilities</name>
            <revision>20</revision>
            <lastModified>
              <time>1690987302612</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>Conversion De-Identification HL7 Utilities</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>adb80ef5-a512-462d-bcb0-af03ed498ed6</id>
                <name>anonymize_hl7_message_header</name>
                <revision>16</revision>
                <lastModified>
                  <time>1670895747847</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** This script handles the transformation to update HL7 message header during anonymization

	@param {String} msg - provide the hl7 message to have the message header modified to reflect anonmymization
	@return {String} return description

	scriptName:	anonymize_hl7_message_header.js
	desc:		This script handles the modification message header modified to reflect anonmymization
	date:		2022-05-36 
	history:
	2022-08-12 19:50 JER - Modified to MSH-4 statically always set to QS1
	2022-07-18 19:07 JER - Modified to evaluate the segments length() to determine if children nodes
*/
function anonymize_hl7_message_header(msg) {

	var scriptName= &quot;anonymize_hl7_message_header&quot;;
	var debug= 0;
	var currentHeader= new Object();

	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg[MSH] length: &apos;+msg[&apos;MSH&apos;].length()); }

	if(msg[&apos;MSH&apos;].length()&gt;0) {
		
		// get MSH segment data
		var curSendingApplication= msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString();
		// 2022-08-12 JER - Modified to MSH-4 statically always set to QS1		
		// var curSendingFacility= &apos;QS1&apos;;
		var curSendingFacility= msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString();
		globalMap.put(&apos;gSendingFacility&apos;,curSendingFacility);
		var curReceivingApplication= msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString();
		var curReceivingFacility= msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;].toString();
		var messageDateTime= msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
		var curMessageType= msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString()+&apos;^&apos;+msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();
		var messageControlId= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
	
		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;: sendingApplication= &apos;+curSendingApplication+&apos; sendingFacility= &apos;+curSendingFacility+&apos; receivingApplication= &apos;+curReceivingApplication+&apos; receivingFacility= &apos;+curReceivingFacility+&apos; messageType= &apos;+curMessageType+&apos; messageDateTime= &apos;+messageDateTime+&apos; messageControlId= &apos;+messageControlId); }

		// collect the currentHeader Object Properties
		if(evaluate_defined_variable(curSendingApplication,&apos;msh-3&apos;)) 	{ currentHeader.sendingApplication= curSendingApplication; }
		if(evaluate_defined_variable(curSendingFacility,&apos;msh-4&apos;)) 		{ currentHeader.sendingFacility= curSendingFacility; }
		if(evaluate_defined_variable(curReceivingApplication,&apos;msh-5&apos;)) 	{ currentHeader.receivingApplication= curReceivingApplication; }
		if(evaluate_defined_variable(curReceivingFacility,&apos;msh-6&apos;)) 	{ currentHeader.receivingFacility= curReceivingFacility; }
		if(evaluate_defined_variable(curMessageType,&apos;msh-7&apos;)) 			{ currentHeader.messageType= curMessageType; }
		if(evaluate_defined_variable(messageDateTime,&apos;msh-9&apos;)) 		{ currentHeader.messageDateTime= messageDateTime; }
		if(evaluate_defined_variable(messageControlId,&apos;msh-10&apos;)) 		{ currentHeader.messageControlId= messageControlId; }
	
		channelMap.put(&apos;currentHeader&apos;,currentHeader);
		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; currentHeader: &apos;+JSON.stringify(currentHeader)); }
	} // end if 
	
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg[EVN] length: &apos;+msg[&apos;EVN&apos;].length()); }
	
	if(msg[&apos;EVN&apos;].length()&gt;0) {
		
		// get EVN segment data
		var curEventTypeCode= msg[&apos;EVN&apos;][&apos;EVN.1&apos;].toString();
		var eventDateTime= msg[&apos;EVN&apos;][&apos;EVN.2&apos;][&apos;EVN.2.1&apos;].toString();
	
		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;: eventTypeCode= &apos;+curEventTypeCode+&apos; eventDateTime= &apos;+eventDateTime); }

		// collect the currentHeader Object Properties
		if(evaluate_defined_variable(curEventTypeCode,&apos;evn-1&apos;))	{ currentHeader.eventTypeCode= curEventTypeCode; }
		if(evaluate_defined_variable(eventDateTime,&apos;evn-2&apos;)) 		{ currentHeader.eventDateTime= eventDateTime; }
		
		channelMap.put(&apos;currentHeader&apos;,currentHeader);
		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; currentHeader: &apos;+JSON.stringify(currentHeader)); }
	} // end if 
	
	// new Header
	var newHeader= new Object();
	
	// global channel Map configuration specific to this channel referenced across all messages
	// pull the global channel map variable: gcSendingApplication
	if(evaluate_defined_variable($gc(&apos;gcSendingApplication&apos;),&apos;gcSendingApplication&apos;)) { 
		var sendingApplication= $gc(&apos;gcSendingApplication&apos;);
	} else {
		var sendingApplication= curSendingApplication;
	}
	// pull the global channel map variable: gcSendingFacility
	if(evaluate_defined_variable($gc(&apos;gcSendingFacility&apos;),&apos;gcSendingFacility&apos;)) { 
		var sendingFacility= $gc(&apos;gcSendingFacility&apos;);
	} else {
		var sendingFacility= curSendingFacility;
	}
	// pull the global channel map variable: gcReceivingApplication
	if(evaluate_defined_variable($gc(&apos;gcReceivingApplication&apos;),&apos;gcReceivingApplication&apos;)) { 
		var receivingApplication= $gc(&apos;gcReceivingApplication&apos;);
	} else {
		var receivingApplication= curReceivingApplication;
	}
	// pull the global channel map variable: gcReceivingFacility
	if(evaluate_defined_variable($gc(&apos;gcReceivingFacility&apos;),&apos;gcReceivingFacility&apos;)) { 
		var receivingFacility= $gc(&apos;gcReceivingFacility&apos;);
	} else {
		var receivingFacility= curReceivingFacility;
	}
	// pull the global channel map variable: gcMessageType
	if(evaluate_defined_variable($gc(&apos;gcMessageType&apos;),&apos;gcMessageType&apos;)) { 
		var messageType= $gc(&apos;gcMessageType&apos;);
	} else {
		var messageType= curMessageType;
	}
	var messageDateTime=  current_date_get_hl7_formatted_datetime(&apos;datetime&apos;);
	var messageControlId= UUIDGenerator.getUUID();
	var eventMessageType= messageType.toString().split(&apos;^&apos;)[1];
	var eventDateTime=    messageDateTime;

	if(msg[&apos;MSH&apos;].length()&gt;0) {
		// set newPatient Object
		newHeader.sendingApplication= 	sendingApplication;
		newHeader.sendingFacility=    	sendingFacility;
		newHeader.receivingApplication= 	receivingApplication;
		newHeader.receivingFacility= 		receivingFacility;
		newHeader.messageType=    		messageType;
		newHeader.messageDateTime= 		messageDateTime;
		newHeader.messageControlId=		messageControlId;
	}
	
	if(msg[&apos;EVN&apos;].length()&gt;0) { 
		newHeader.eventMessageType=		eventMessageType;
		newHeader.eventDateTime=			eventDateTime;
	}
	
	channelMap.put(&apos;newHeader&apos;,newHeader);
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; newHeader: &apos;+JSON.stringify(newHeader)); }

	// Populate tmp outbound message
	var tmp= msg;

	if(msg[&apos;MSH&apos;].length()&gt;0) {
		// Modify MSH segment values 
		tmp[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;]=   sendingApplication;
		tmp[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;]=   sendingFacility;
		tmp[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;]=   receivingApplication;
		tmp[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;]=   receivingFacility;
		tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;]=   messageDateTime;
		tmp[&apos;MSH&apos;][&apos;MSH.9&apos;]=   messageType;
		tmp[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]= messageControlId;
	}
	
	if(msg[&apos;EVN&apos;].length()&gt;0) {
		// Modify EVN segment values 
		tmp[&apos;EVN&apos;][&apos;EVN.1&apos;]= eventMessageType;
		tmp[&apos;EVN&apos;][&apos;EVN.2&apos;][&apos;EVN.2.1&apos;]= eventDateTime;	
	}
	
	channelMap.put(&apos;anonymizedHeader&apos;,tmp);
	
	return tmp;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>18aafbe5-d45c-4a6c-a124-82883fa03475</id>
                <name>anonymize_hl7_patient_demographics</name>
                <revision>6</revision>
                <lastModified>
                  <time>1672776775880</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** This script handles the transformation to anonymize HL7 message patient demographics

	@param {String} msg - provide the hl7 message to have the patient demographics anonmymized
	@return {String} return description

	scriptName:	anonymize_hl7_patient_demographics.js
	desc:		This script handles the transformation to anonymize HL7 message patient demographics
	date:		2022-05-36 
	history:
	2023-01-03 JER - Modified from patient.encounter to patient.account
	2022-08-12 JER - Added the Alternate Patient Id PID-4
	2022-07-13 JER - Modified this script as a code_template function
	2022-04-15 JER - created from the convert_RDS_HL7_to_JSON script
*/
function anonymize_hl7_patient_demographics(msg) {

	var scriptName= &quot;anonymize_hl7_patient_demographics&quot;;
	var debug= 0;
	var currentPatient= new Object();
	var newPatient= new Object();

	var patientId= msg[&apos;PID&apos;][&apos;PID.3&apos;][0][&apos;PID.3.1&apos;].toString();
	// 2022-08-12 JER - Added the Alternate Patient Id PID-4
	var altPatientId= msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString();
	var lastName= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString();
	var firstName= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString();
	var dateOfBirth= msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();
	var gender= msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString();
	var account= msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();

	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;: patientId= &apos;+patientId+&apos; lastName= &apos;+lastName+&apos; firstName= &apos;+firstName+&apos; dateOfBirth= &apos;+dateOfBirth+&apos; gender=&apos;+gender+&apos; account= &apos;+account); }

	// collect the currentPatient Object Properties
	currentPatient.patientId= patientId;
	// 2022-08-12 JER - Added the Alternate Patient Id PID-4
	currentPatient.altPatientId= altPatientId;
	currentPatient.lastName= lastName;
	currentPatient.firstName= firstName;
	currentPatient.dateOfBirth= dateOfBirth;
	currentPatient.gender= gender;
	currentPatient.account= account;
	channelMap.put(&apos;currentPatient&apos;,currentPatient);
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; currentPatient: &apos;+JSON.stringify(currentPatient)); }

	// global channel Map configuration specific to this channel referenced across all messages
	var patientLastName= 	channelMap.get(&apos;lPatientLastName&apos;).toString();
	var patientFirstName=	channelMap.get(&apos;lPatientFirstName&apos;).toString();
	var patientDateOfBirth=	channelMap.get(&apos;lPatientDateOfBirth&apos;).toString();

	var patientId= 		channelMap.get(&apos;lPatientIdPrefix&apos;).toString()+random_generator(4);
	// 2022-08-12 JER - Added the Alternate Patient Id PID-4
	var altPatientId= 		patientId;
	var patientAccount= 	channelMap.get(&apos;lPatientIdPrefix&apos;).toString()+random_generator(8);
	var patientLastName= 	patientLastName+&apos;&apos;+random_generator(4);
	var patientFirstName= 	patientFirstName+&apos;&apos;+random_generator(4);

	// determine FullYear, Month and Day
	var strFullYear=		patientDateOfBirth.substring(0,4);
	var strMonth=			patientDateOfBirth.substring(4,6);
	var strDay=			patientDateOfBirth.substring(6,8);
	// randomDateAfterDate(new Date(2021, 4, 5), -365)
	var patientDateOfBirth= random_date_after_date(new Date (strFullYear, strMonth, strDay), 3650, scriptName);

	var patientGender= Math.random();
	if(patientGender&lt;0.5) { patientGender= &apos;M&apos;; } else { patientGender= &apos;F&apos;; }

	// set newPatient Object
	newPatient.patientId= patientId;
	// 2022-08-12 JER - Added the Alternate Patient Id PID-4
	newPatient.altPatientId= altPatientId;
	newPatient.lastName=  patientLastName;
	newPatient.firstName= patientFirstName;
	newPatient.dateOfBirth= patientDateOfBirth;
	newPatient.gender=    patientGender;
	newPatient.account= patientAccount;
	channelMap.put(&apos;newPatient&apos;,newPatient);
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; newPatient: &apos;+JSON.stringify(newPatient)); }

	var tmp= msg;

	// Modify PID segment values - Patient Id (PID.3.1)
	tmp[&apos;PID&apos;][&apos;PID.3&apos;][0][&apos;PID.3.1&apos;]= patientId;
	// 2022-08-12 JER - Added the Alternate Patient Id PID-4
	tmp[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;]= altPatientId;
	tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;]= patientLastName;
	tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;]= patientFirstName;
	tmp[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;]= patientDateOfBirth;
	tmp[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;]= patientGender;
	tmp[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;]= patientAccount;
	tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.9&apos;][&apos;PID.5.9.2&apos;]=&apos;ANONYMIZED&apos;;
	
	channelMap.put(&apos;anonymizedMessage&apos;,tmp);
	
	return tmp;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>26b03c12-8952-4f83-90ec-0983da5de727</id>
                <name>anonymize_hl7_patient_encounter</name>
                <revision>9</revision>
                <lastModified>
                  <time>1672776857338</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** This script handles the transformation to anonymize HL7 message patient encounter visit information
	@param {String} msg - provide the hl7 message to have the patient encounter anonmymized
	@return {String} return description

	scriptName:	anonymize_hl7_patient_encounter.js
	desc:		This script handles the transformation to anonymize HL7 message encounter visit information
	date:		2022-05-36 
	history:
	2023-01-03 JER - Modified to include the random_generator function for the encounter number
	2022-08-12 JER - Created from the anonmymize_hl7_patient_demographics function
*/
function anonymize_hl7_patient_encounter(msg) {

	var scriptName= &quot;anonymize_hl7_patient_encounter&quot;;
	var debug= 0;
	var currentEncounter= new Object();
	var newEncounter= new Object();
	
	for each(child in msg) {
		if(typeof(msg[&apos;encounter&apos;])!== &apos;undefined&apos;) {
			currentEncounter= msg[&apos;encounter&apos;];
		} // end if 
	} // end for each
	
	// get GlobalMap gLocationUnits (array)
	// gLocationUnits= [&apos;ABC&apos;,&apos;BCD&apos;,&apos;CDE&apos;,&apos;DEF&apos;,&apos;EFG&apos;,&apos;FGH&apos;,&apos;GHI&apos;,&apos;HIJ&apos;,&apos;IJK&apos;,&apos;JKL&apos;];
	var arrLocationUnits=  			$g(&apos;gLocationUnits&apos;);
	// if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; arrLocationUnits typeof:&apos;+typeof(arrLocationUnits)+&apos; length: &apos;+arrLocationUnits.length+&apos; valueOf: &apos;+arrLocationUnits.toString()+&apos; json: &apos;+JSON.stringify(arrLocationUnits)); 
	// } // end if 
 	var encounterCurrentUnit= 		arrLocationUnits[Math.floor(Math.random()*arrLocationUnits.length)];
	newEncounter.unit= encounterCurrentUnit;
	
	var encounterCurrentRoom= 		encounterCurrentUnit+&apos;&apos;+random_generator(4);
	newEncounter.room= 				encounterCurrentRoom;
	var encounterCurrentBed=   		random_generator(2);
	newEncounter.bed=  				encounterCurrentBed;
	var encounterCurrentFacility= 	$g(&apos;gSendingFacility&apos;);
	newEncounter.facility=			encounterCurrentFacility;
	
	if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;]) {
		if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.1&apos;]) { 
			var encounterPriorUnit= 		msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.1&apos;].toString(); 
			newEncounter.prior_unit=		encounterPriorUnit;
		}
		if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.2&apos;]) { 
			var encounterPriorRoom= 		msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.2&apos;].toString(); 
			newEncounter.prior_room=		encounterPriorRoom;
		}
		if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.3&apos;]) { 
			var encounterPriorBed= 			msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.3&apos;].toString();
			newEncounter.prior_bed=			encounterPriorBed;
		}
		if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.4&apos;]) { 
			var encounterPriorFacility= 	msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.4&apos;].toString(); 
			newEncounter.prior_facility=	encounterPriorFacility;
		}
	} // end if 

	// 2023-01-03 JER - Modified to include the random_generator function for the encounter number
	if(msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;]) { 
		var encounterVisitNumber= 		msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString().substring(0,5)+&apos;&apos;+random_generator(4); 
		newEncounter.encounter_identifier=	encounterVisitNumber;
	}

	if(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;]) { 
		var encounterAdmissionDate= 	msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString();
		// determine FullYear, Month and Day
		var strFullYear=				encounterAdmissionDate.substring(0,4);
		var strMonth=					encounterAdmissionDate.substring(4,6);
		var strDay=					encounterAdmissionDate.substring(6,8);
		// randomDateAfterDate(new Date(2021, 4, 5), -365)
		var encounterAdmissionDate= 		random_date_after_date(new Date (strFullYear, strMonth, strDay), 20, scriptName);
		newEncounter.admissionDate=		encounterAdmissionDate;
	} // end if
	
	channelMap.put(&apos;anonymizedVisit&apos;,newEncounter);
	
	var tmp= msg;

	// Modify PV1 segment values
	// Current Location PV1-3
	if(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;]= encounterCurrentUnit; }
	if(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;]= encounterCurrentRoom; }
	if(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.3&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.3&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.3&apos;]= encounterCurrentBed;  }
	if(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;]= encounterCurrentFacility; }
	
	// Prior Location PV1-6
	if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.1&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.1&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.1&apos;]= encounterPriorUnit; }
	if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.2&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.1&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.2&apos;]= encounterPriorRoom; }
	if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.3&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.3&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.3&apos;]= encounterPriorBed;  }
	if(msg[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.4&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.4&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.6&apos;][&apos;PV1.6.4&apos;]= encounterPriorFacility; }
	
	// Encounter/Visit Number  PV1-19
	if(msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;]= encounterVisitNumber; }

	// Admission Date  PV1-44
	if(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;]!== tmp[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;]) { tmp[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;]= encounterAdmissionDate; }
	
	channelMap.put(&apos;anonymizedEncounter&apos;,tmp);
	
	return tmp;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>89fd6e70-b6b2-4060-a02a-56d7b127ae0c</id>
                <name>anonymize_hl7_patient_orders</name>
                <revision>12</revision>
                <lastModified>
                  <time>1660259288379</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** This script handles the transformation to anonymize HL7 message patient orders

	@param {String} msg - provide the hl7 message to have the patient RDE orders anonmymized
	@return {String} return description

	scriptName:	anonymize_hl7_patient_orders.js
	desc:		This script handles the transformation to anonymize HL7 message patient orders
	date:		2022-05-36 
	history:
	2022-07-13 JER - Modified this script as a code_template function
	2022-04-15 JER - created from the convert_RDS_HL7_to_JSON script
*/
function anonymize_hl7_patient_orders(msg) {

	var scriptName= &quot;anonymize_hl7_patient_orders&quot;;
	var debug= 0;
	var currentOrder= new Object();
	var newOrder= new Object();

	// get newPatient Object
	var objPatient= channelMap.get(&apos;newPatient&apos;);
	var patientId= objPatient.patientId.toString();
	var patientName= objPatient.firstName.toString()+&apos; &apos;+objPatient.lastName.toString();

	// ORC
	if(msg[&apos;ORC&apos;]) { 
		var orderFillerNumber= random_generator(9);
		// var orderFillerNumber= msg[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;ORC.3.1&apos;].toString();
		var orderTransactionDateTime= (new Date()).toISOString().replace(/[^0-9]/g,&apos;&apos;).slice(0,-3);
		var orderEffectiveDateTime= orderTransactionDateTime;
		//var orderTransactionDateTime= msg[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;].toString();
		//var orderEffectiveDateTime= msg[&apos;ORC&apos;][&apos;ORC.15&apos;][&apos;ORC.15.1&apos;].toString();
	}
	// RXO
	if(msg[&apos;RXO&apos;]) {
		var requestTreatmentOrderIdentifier= random_generator(11);
		// var requestTreatmentOrderIdentifier= msg[&apos;RXO&apos;][&apos;RXO.1&apos;][&apos;RXO.1.1&apos;].toString();
	}
	// RXE
	if(msg[&apos;RXE&apos;]) { 
		// var encodedTreatmentOrderIdentifier= msg[&apos;RXE&apos;][&apos;RXE.2&apos;][&apos;RXE.2.1&apos;].toString();
		var encodedTreatmentOrderIdentifier= requestTreatmentOrderIdentifier;
		// var encodedAlternateTreatmentOrderIdentifier= msg[&apos;RXE&apos;][&apos;RXE.2&apos;][&apos;RXE.2.4&apos;].toString();
		var encodedAlternateTreatmentOrderIdentifier= requestTreatmentOrderIdentifier;
		// ((new Date())+1).toISOString().replace(/[^0-9]/g,&apos;&apos;).slice(0,-3);
		// var doseDispensedDateTime= msg[&apos;RXE&apos;][&apos;RXE.18&apos;][&apos;RXE.18.1&apos;].toString();
		var doseDispensedDateTime= ((new Date())+1).toISOString().replace(/[^0-9]/g,&apos;&apos;).slice(0,-3);
		// var originalOrderedDateTime= msg[&apos;RXE&apos;][&apos;RXE.32&apos;][&apos;RXE.32.1&apos;].toString();
		var originalOrderedDateTime= orderTransactionDateTime
	}
	// TQ1
	if(msg[&apos;TQ1&apos;].length()&gt;1) {
		var arrTQ1Segment= new Array();
		for each(tq1 in msg[&apos;TQ1&apos;]) {
			arrTQ1Segment.push(tq1[&apos;TQ1.8&apos;][&apos;TQ1.8.1&apos;].toString());&#xd;
		}
		var orderTimingEndDate= arrTQ1Segment;
	} else if(msg[&apos;TQ1&apos;]) { 
		var orderTimingEndDate= msg[&apos;TQ1&apos;][&apos;TQ1.8&apos;][&apos;TQ1.8.1&apos;].toString()
	}

	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos;: patientName: &apos;+patientName+&apos; patientId: &apos;+patientId+&apos; orderFillerNumber= &apos;+orderFillerNumber+&apos; orderTransactionDateTime= &apos;+orderTransactionDateTime+&apos; requestTreatmentOrderIdentifier= &apos;+requestTreatmentOrderIdentifier); 
	}

	// collect the currentPatient Object Properties
	currentOrder.orderFillerNumber= orderFillerNumber;
	currentOrder.requestTreatmentOrderIdentifier= requestTreatmentOrderIdentifier;
	currentOrder.encodedTreatmentOrderIdentifier= encodedTreatmentOrderIdentifier;
	currentOrder.encodedAlternateTreatmentOrderIdentifier= encodedAlternateTreatmentOrderIdentifier;
	//
	currentOrder.orderTransactionDateTime= orderTransactionDateTime;
	currentOrder.orderEffectiveDateTime= orderEffectiveDateTime;
	currentOrder.doseDispensedDateTime= doseDispensedDateTime;
	currentOrder.originalOrderedDateTime= originalOrderedDateTime;
	currentOrder.orderTimingEndDate= orderTimingEndDate;

	channelMap.put(&apos;currentOrder&apos;,currentOrder);
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; currentOrder: &apos;+JSON.stringify(currentOrder)); }

	// var newDate= new Date(new Date() - Math.random()*(1e+12));
	// determine FullYear, Month and Day
	var newDate= 			new Date();
	var strFullYear=		newDate.getFullYear();
	var strMonth=			newDate.getMonth();
	var strDay=			newDate.getDate();
	// randomDateAfterDate(new Date(2021, 4, 5), -365)
	var newRandomDate= random_date_after_date(new Date (strFullYear, strMonth, strDay), 3650, scriptName);
	
	var newOrderFillerNumber= 					newRandomDate.substring(0,8).toString()+random_generator(5);
	var newRequestTreatmentOrderIdentifier= 		random_generator(5)+newRandomDate.substring(0,8).toString();
	var newEncodedTreatmentOrderIdentifier= 		newRequestTreatmentOrderIdentifier;
	var newEncodedAlternateTreatmentOrderIdentifier= 	newRequestTreatmentOrderIdentifier;

	var newOrderTransactionDateTime= newRandomDate;
	var newOrderEffectiveDateTime= newRandomDate;
	var newDoseDispensedDateTime= newRandomDate;
	var newOriginalOrderedDateTime= newRandomDate;
	var newOrderTimingEndDate= newRandomDate;

	// set newPatient Object
	// newOrder.orderFillerNumber= newOrderFillerNumber;
	newOrder.orderFillerNumber= orderFillerNumber;
	//newOrder.requestTreatmentOrderIdentifier=  newRequestTreatmentOrderIdentifier;
	//newOrder.encodedTreatmentOrderIdentifier= newEncodedTreatmentOrderIdentifier;
	//newOrder.encodedAlternateTreatmentOrderIdentifier= newEncodedAlternateTreatmentOrderIdentifier;
	newOrder.requestTreatmentOrderIdentifier=  requestTreatmentOrderIdentifier;
	newOrder.encodedTreatmentOrderIdentifier= encodedTreatmentOrderIdentifier;
	newOrder.encodedAlternateTreatmentOrderIdentifier= encodedAlternateTreatmentOrderIdentifier;
	
	newOrder.orderTransactionDateTime= newOrderTransactionDateTime;
	newOrder.orderEffectiveDateTime= newOrderEffectiveDateTime;
	newOrder.doseDispensedDateTime= newDoseDispensedDateTime;
	newOrder.originalOrderedDateTime= newOriginalOrderedDateTime;
	newOrder.orderTimingEndDate= newOrderTimingEndDate;
	
	channelMap.put(&apos;newOrder&apos;,newOrder);
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; newOrder: &apos;+JSON.stringify(newOrder)); }

	var tmp= msg;

	// Modify PID segment values - Patient Id (PID.3.1)
	tmp[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;ORC.3.1&apos;]= newOrderFillerNumber;
	tmp[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;]= newOrderTransactionDateTime;
	tmp[&apos;ORC&apos;][&apos;ORC.15&apos;][&apos;ORC.15.1&apos;]= newOrderEffectiveDateTime= 
	// RXO
	tmp[&apos;RXO&apos;][&apos;RXO.1&apos;][&apos;RXO.1.1&apos;]= newRequestTreatmentOrderIdentifier;
	// RXE
	tmp[&apos;RXE&apos;][&apos;RXE.2&apos;][&apos;RXE.2.1&apos;]= newEncodedTreatmentOrderIdentifier;
	tmp[&apos;RXE&apos;][&apos;RXE.2&apos;][&apos;RXE.2.4&apos;]= newEncodedAlternateTreatmentOrderIdentifier; 
	tmp[&apos;RXE&apos;][&apos;RXE.18&apos;][&apos;RXE.18.1&apos;]= newDoseDispensedDateTime;
	tmp[&apos;RXE&apos;][&apos;RXE.32&apos;][&apos;RXE.32.1&apos;]= newOriginalOrderedDateTime;
	// TQ1
	// 2022-07-19 JER - handling multiple TQ1 segments
	if(typeof(orderTimingEndDate)== object) {
		if(orderTimingEndDate.length()&gt;1) {
			for each(var i= 0;i&lt;orderTimingEndDate.length();i++) {
				tmp[&apos;TQ1&apos;][&apos;TQ1.8&apos;][&apos;TQ1.8.1&apos;]= newOrderTimingEndDate;
			}
		}
	}
	tmp[&apos;TQ1&apos;][&apos;TQ1.8&apos;][&apos;TQ1.8.1&apos;]= newOrderTimingEndDate;
	tmp[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;ORC.2.1&apos;]=&apos;ANONYMIZED&apos;;
	
	channelMap.put(&apos;anonymizedOrder&apos;,tmp);
	
	return tmp;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>72074d1d-7b19-4ac5-b9fb-e0b5df689f09</id>
                <name>current_date_get_hl7_formatted_datetime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1658181750434</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function when called with the desired datetime type of either: DATE (YYYYMMDD), TIME (HHMMSS) or 
	DATETIME (YYYYMMDDHHMMSS) from the current Date() function
	scriptName - current_date_get_hl7_formatted_datetime.js
	
	@param {type} string - provided the desired type 
	@return {string} - return the new Date() string per the provided argument type
*/
function current_date_get_hl7_formatted_datetime(type) {
	// TODO: Enter code here

	if(typeof(type) !== &apos;undefined&apos;) {
		if(type.toString().toUpperCase()== &apos;DATE&apos;) {
			return new Date().toISOString().split(&apos;T&apos;)[0].replace(/-/g,&quot;&quot;);
		} else if (type.toString().toUpperCase()== &apos;TIME&apos;) {
			return new Date().toISOString().split(&apos;T&apos;)[1].substring(0,8).replace(/:/g,&quot;&quot;);
		} else if (type.toString().toUpperCase()== &apos;DATETIME&apos;) {
			return new Date().toISOString().split(&apos;T&apos;)[0].replace(/-/g,&quot;&quot;)+&apos;&apos;+new Date().toISOString().split(&apos;T&apos;)[1].substring(0,8).replace(/:/g,&quot;&quot;);;
		} else {
			return new Date().toISOString().split(&apos;T&apos;)[0].replace(/-/g,&quot;&quot;)+&apos;&apos;+new Date().toISOString().split(&apos;T&apos;)[1].substring(0,8).replace(/:/g,&quot;&quot;);;
		}
	} else {
		return new Date().toISOString().split(&apos;T&apos;)[0].replace(/-/g,&quot;&quot;)+&apos;&apos;+new Date().toISOString().split(&apos;T&apos;)[1].substring(0,8).replace(/:/g,&quot;&quot;);;
	}
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>ee6d8602-9775-4858-8960-ddc7acbd4a18</id>
                <name>evaluate_defined_variable</name>
                <revision>16</revision>
                <lastModified>
                  <time>1658190842389</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** This script handles the evaluate a variable to determine if defined or undefined for an Javascript object

	@param {String} msg - provide the hl7 message to have the patient demographics anonmymized
	@return {String} return description

	scriptName:	evaluate_defined_variable.js
	desc:		This script handles the evaluation of variables to determine the typeof and toString().length GT 0
	date:		2022-05-36 
	history:
	2022-07-13 JER - Modified this script as a code_template function
	2022-04-15 JER - created from the convert_RDS_HL7_to_JSON script
*/
function evaluate_defined_variable(element, elementName) {
	var scriptName= &apos;evaluate_defined_variable&apos;;
	var debug= 0;
	var definedResult= true;
	var debugStatement= &apos;DEBUG::&apos;+scriptName+&apos; evaluate of element &apos;+elementName+&apos; for typeof(element): &apos;+typeof(element); 
	if(debug&gt;0) { logger.info(&apos;DEBUG::&apos;+scriptName+&apos; evaluate element: &apos;+element); }
	
	
	if(typeof(element) !== &apos;undefined&apos;) {
		if(debug&gt;0) { logger.error(debugStatement); }
		if(typeof(element)== &apos;object&apos;) {
			
			if(debug&gt;0) { logger.error(debugStatement+&apos; A evaluate the current element value: &apos;+element+&apos; JSON: &apos;+JSON.stringify(element)+&apos; EQ null: &apos;+element=== null); }
			
			if(JSON.stringify(element).toString().length&lt;1) {
				if(debug&gt;0) { logger.error(debugStatement+&apos; B FAILS as JSON.stringify.length LT 1 &apos;+JSON.stringify(element).length); }
				definedResult= false;
			} else if(element=== null) {
				if(debug&gt;0) { logger.error(debugStatement+&apos; B1 FAILS as JSON.stringify EQ NULL &apos;+JSON.stringify(element).length); }
				definedResult= false;
			} else {
				if(debug&gt;0) { logger.error(debugStatement+&apos; C SUCCESS as JSON.stringify.length GT 0 &apos;+JSON.stringify(element).length); }
			}
		} else if(element.toString().length&lt;1) {
			if(debug&gt;0) { logger.error(debugStatement+&apos; D FAILS as toString.length LT 1 &apos;+element.toString().length); }
			definedResult= false;
		} else if(element=== null) {
			if(debug&gt;0) { logger.error(debugStatement+&apos; D1 FAILS as toString EQ NULL &apos;+element.toString()); }
			definedResult= false;
		} else {
			if(debug&gt;0) { logger.error(debugStatement+&apos; E SUCCESS as toString.length GT 0 &apos;+element.toString().length); }
		}
	} else {
		if(debug&gt;0) { logger.error(debugStatement+&apos; F FAILS with undefined value.&apos;); }
		definedResult= false;
	}
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; G definedResult for &apos;+elementName+&apos;= &apos;+definedResult); }
	
	return definedResult;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>3ccaaba3-264d-4b3d-88ec-897890c7a8b1</id>
                <name>random_date_after_date</name>
                <revision>7</revision>
                <lastModified>
                  <time>1658191300791</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function will produce a random date based on a provided date and number of days argument.

	@param {String} start - enter the starting date (&apos;YYYY&apos;, &apos;MM&apos;, &apos;DD&apos;) (e.g. &apos;2021&apos;, &apos;09&apos;, &apos;13&apos;)
	@param {String} days -  number of days (positive or negative) (e.g. 365, 3000, -365)
	@return {String} return description
*/
function random_date_after_date(start, days, inScriptName) {
	
	// randomDateAfterDate(new Date(2021, 4, 5), -365) 
	var scriptName= &apos;random_date_after_date&apos;;
	var debug= 0;
	
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; originating from: &apos;+inScriptName+&apos; typeof(start)= &apos;+typeof(start)+&apos; start= &apos;+start+&apos; number of days= &apos;+days+ &apos; typeof(days)= &apos;+typeof(days)); }

	var startDate= new Date(start);
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(startDate)= &apos;+typeof(startDate)+&apos; startDate= &apos;+startDate); }
	
	var strRandom= Math.random()*days*24*60*60*1000;
	var newDate= new Date(start.getTime() + strRandom);
	// Fri Jun 26 2020 08:59:35 GMT-0600 (GMT-06:00)
	var strDate= newDate.getFullYear() + &quot;&quot; + addLeadingZeros(newDate.getMonth() + 1) + &quot;&quot; + addLeadingZeros(newDate.getDate());
	
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; random date generated: &apos;+strDate); }

	return strDate;
}

function addLeadingZeros(n) {
  
  if (n &lt;= 9) {
    return &quot;0&quot; + n;
  }
  
  return n;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>cb5f5610-99ca-4709-9666-46f7c681afaa</id>
                <name>random_generator</name>
                <revision>1</revision>
                <lastModified>
                  <time>1657634910756</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function will produce a random number based on the number of characters provided into the numOfChars argument.

	@param {String} numOfChars - enter the number of random characters to be returned
	@return {String} return description
*/
function random_generator(numOfChars) {
	var scriptName= &apos;random_generator&apos;;
	var debug= 0;
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; evaluate number of characters: &apos;+numOfChars);
	}
	
	var strNumOfChars= &apos;&apos;+numOfChars+&apos;&apos;;
	var cntNumOfChars= strNumOfChars.padEnd(numOfChars,0);
	var strRandom= (Math.random()*cntNumOfChars).toFixed();
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; random number generated: &apos;+strRandom);
	}
	
	return strRandom;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
            <name>WebPT-Common</name>
            <revision>2</revision>
            <lastModified>
              <time>1678715257049</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
                <name>Check if String contains</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122790</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
                <name>Check if String contains HTTP code</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122593</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>8515e088-5c50-47ee-9e2f-9fad1ecf48bd</id>
                <name>Check if String is JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123309</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Added by Kirby Knight
	12/21/2020
	Test for JSON

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5f2f84ba-3e66-4be3-8260-8fbd8258bd92</id>
                <name>Check if the PDF is valid</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122055</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
//This function is used for checking the word &quot;PDF&quot; in inbound attachment.
function isValidBase64PDF(base64) {
	const ENCODED_PDF_SIGN = &quot;JVBERi&quot;; // %PDF sign
	const PDF_EOF = &quot;JSVFT0YNCg&quot;; // %EOF
	var pdfBase64Size = (base64.length() * (3 / 4)) - 1;
	
	return (base64.indexOf(ENCODED_PDF_SIGN) != -1 &amp;&amp; base64.indexOf(PDF_EOF) != -1 &amp;&amp; pdf_base64_size &gt; 36);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
                <name>Convert JSON date to HL7v2 date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122137</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
                <name>Convert JSON datetime to HL7v2 datetime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122430</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>bb21449a-df39-48c6-be52-24106c8df4c4</id>
                <name>Destination Formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Kirby Knight 03/10/2021
	
	This function will remove all other ROOT.Meta.Destinations nodes that are not passed in the
	destination variable and removes the ROOT.Meta.Destinations[x].Destination node

	@param {Any} destination - 
	@return {String} return description
*/
function formatDestinations(destination) {
var arrDestinations = msg[&apos;Meta&apos;][&apos;Destinations&apos;];
	//  Start at the end of the array because of the posibility of deleted array items 
	for (var i = arrDestinations.length - 1; i &gt;= 0; i--) {
		if (arrDestinations[i][&apos;Destination&apos;] == destination){
			delete arrDestinations[i][&apos;Destination&apos;]
		}else if (arrDestinations[i][&apos;Destination&apos;] != destination){
			arrDestinations.splice(i, 1);
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
                <name>Extract JSON node data</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121748</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7ed44f8a-fa40-4f3e-9426-3021604eabe0</id>
                <name>Get Feature Value by Name and Database</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123262</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns a string containing the feature value (system property) for a specific client database.

	@param {String} featureName - name of the feature, ie: &quot;BetterPTBidirectionalScheduling&quot;
	@param {String} databaseIdentifier - database name or databaseID / TenantID
	@param {String} databaseIdentifierType - what value is provided in databaseIdentifier. current options include &quot;ID&quot; or &quot;NAME&quot;
	@return {String} returns feature value
*/
function getFeatureValueByNameDatabase(featureName, databaseIdentifier, databaseIdentifierType) {
	var paramList = new Packages.java.util.ArrayList();
	paramList.add(featureName);
	paramList.add(databaseIdentifier);
	paramList.add(databaseIdentifierType);
	
	var sSQL = &apos;EXEC [dbo].[pr_FeatureValueByNameDatabase] ?, ?, ?&apos;;
	
	try {
		var result = executeSharedDBStatementFhirCh(sSQL, true, paramList);
		var featureValue ;
		if(result.next()){			//Added
		 featureValue = result.getString(1);
		}
		return featureValue;
	} catch (e) {
		logger.error(e);
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>9842be2c-c633-42ac-87f1-f91aca9e370f</id>
                <name>JSON Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121776</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function populates the MR and PI patient IDS to channelMap

	@return {String} return description
*/
function jsonPatientIds() {
	for each (patId in msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) {
	if (patId[&apos;IDType&apos;].toString() == &apos;MR&apos;){
		channelMap.put(&apos;extPatId&apos;, patId[&apos;ID&apos;].toString());
	}else if(patId[&apos;IDType&apos;].toString() == &apos;PI&apos;){
		channelMap.put(&apos;patId&apos;, patId[&apos;ID&apos;].toString());
	}
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
                <name>Verify JSON node for existance</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>394664c0-d536-4310-970e-181dc03ee7da</id>
            <name>WebPT-Conversions</name>
            <revision>2</revision>
            <lastModified>
              <time>1690140133427</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
                <name>Convert FHIR codes to HL7v2 codes</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122899</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>2fc8cbf3-0d92-4d1d-a3d6-136c09bd9f2a</id>
            <name>WebPT-Custom Database Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1703964939898</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>23c0b510-63e4-40fa-a4e1-7b2b92ce9a96</id>
                <name>Execute Statement Shared DB Conn clientDb Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122401</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Executes a SQL statement using a shared database connection stored in the Global Map. If the
connection does not exist, creates it.

@param {String} statement - The SQL statement to execute
@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
@param {List} paramList - A Java List object containing the parameters for the statement (optional)
 */
function executeSharedDBStatementclientDbCh(statement, isQuery, paramList) {
    var result;

    try {
        var dbConnclientDbCh = globalChannelMap.get(&quot;dbConnclientDbCh&quot;);

        if (dbConnclientDbCh == null || dbConnclientDbCh.getConnection().isClosed()) {
            dbConnclientDbCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;), $(&apos;dbClient&apos;), $(&apos;dbUserFhir&apos;), $(&apos;dbPwFhir&apos;));
            globalChannelMap.put(&quot;dbConnclientDbCh&quot;, dbConnclientDbCh);
        }

        if (paramList == undefined) {
            paramList = new Packages.java.util.ArrayList();
        }

        if (isQuery) {
            result = dbConnclientDbCh.executeCachedQuery(statement, paramList);
        } else {
            result = dbConnclientDbCh.executeUpdate(statement, paramList);
        }
    } catch (e) {
        logger.error(e);
    }
    finally {
        return result;
    }
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>4efb3110-a83f-48b5-93ad-79c847b51865</id>
                <name>Execute Statement Shared DB Conn clntAcl Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123455</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClntAclCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnClntAclCh = globalChannelMap.get(&quot;dbConnClntAclCh&quot;);

		if (dbConnClntAclCh == null || dbConnClntAclCh.getConnection().isClosed())
		{
			dbConnClntAclCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbClntAcl&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnClntAclCh&quot;, dbConnClntAclCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnClntAclCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnClntAclCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>d96d45dd-57f7-4aa9-9bf4-e464d31b94c6</id>
                <name>Execute Statement Shared DB Conn FHIR</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121922</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhir(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhir.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhir.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6014068e-c021-4a38-9fa6-6f38f6a2cdab</id>
                <name>Execute Statement Shared DB Conn FHIR Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123492</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhirCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhirCh = globalChannelMap.get(&quot;dbConnFhirCh&quot;);

		if (dbConnFhirCh == null || dbConnFhirCh.getConnection().isClosed())
		{
			dbConnFhirCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnFhirCh&quot;, dbConnFhirCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhirCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhirCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fbd5c4a1-b816-4496-acdf-067005f1d376</id>
                <name>Execute Statement Shared DB Conn Translations Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123008</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementTranslationsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnTranslationsCh = globalChannelMap.get(&quot;dbConnTranslationsCh&quot;);

		if (dbConnTranslationsCh == null || dbConnTranslationsCh.getConnection().isClosed())
		{
			dbConnTranslationsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlTranslations&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnTranslationsCh&quot;, dbConnTranslationsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnTranslationsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnTranslationsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5d1a5577-4ba4-4d1e-b6cd-e2d924164909</id>
                <name>Execute Statement with Shared DB Conn ODS Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122280</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdsCh = globalChannelMap.get(&quot;dbConnOdsCh&quot;);

		if (dbConnOdsCh == null || dbConnOdsCh.getConnection().isClosed())
		{
			dbConnOdsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOds&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdsCh&quot;, dbConnOdsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>3991db14-0c0b-4123-952c-5164c1ded501</id>
                <name>Execute Statement with Shared DB Conn ODW Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122960</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.  THis connects to the ODW db in Azure

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdwCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdwCh = globalChannelMap.get(&quot;dbConnOdwCh&quot;);

		if (dbConnOdwCh == null || dbConnOdwCh.getConnection().isClosed())
		{
			dbConnOdwCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOdw&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdwCh&quot;, dbConnOdwCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdwCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdwCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fae08c88-7550-479a-b8ed-ffef47e8eed9</id>
                <name>executeSharedDBStatementClient</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121956</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClient(statement, isQuery, paramList, dbname)
{
	var result;
 	var dburl= &apos;jdbc:sqlserver://AZW1DEV-SQL02.clinicient.com:1433;databaseName=&apos;+dbname+&apos;&apos;;
	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),dburl,$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			
			//globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		result = dbConnFhir.executeCachedQuery(statement);
	
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>ed20a457-5beb-4aea-9bb9-cf91112ccc56</id>
            <name>WebPT-Default Functions</name>
            <revision>10</revision>
            <lastModified>
              <time>1690140133487</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>a8a9a0c8-9322-46dc-bef8-011eb3d70291</id>
                <name>Create Header for CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121678</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This creates a header for csv files based on the contents of the header variable.  The header
	variable is populated in the channel from the outbound msg template

	@return {String} return description
*/
function createHeader() {
	//Destination transformer.  this creates the header for each new file

	var path = java.nio.file.Paths.get($(&apos;filePath&apos;)+$(&apos;fileName&apos;));
	var bytes = (new java.lang.String($(&apos;header&apos;))).getBytes(&quot;UTF-8&quot;);
	try {
	  java.nio.file.Files.write(path, bytes, java.nio.file.StandardOpenOption.CREATE_NEW);
	}
	catch (e) {
	  //logger.info(&quot; should throw IOException if file already exists&quot;);
	
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>5a886a1f-dab1-41b5-94c6-1a639907d7da</id>
                <name>Filter Message Evaluate Received Checksum</name>
                <revision>33</revision>
                <lastModified>
                  <time>1678916806664</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating a checksum for each provided message.  We save off the most recent 100 unique checksum values in a global 
	array so if the current message has been recently received we are able to ignore it.
	
	@author:  	Jeffrey Ritz
	@scriptName: 	filterEvaluateReceivedChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {boolean} filter - return filter boolean (true= filter msg, false= do not filter msg)
		persist received_checksum global ChannelMap array
		persist filterMessage ChannelMap variable
	@history
*/
function filterEvaluateReceivedChecksum(msg) {	

	var scriptName= &apos;filterEvaluateReceivedChecksum&apos;
	var filter = false;
	var received_len_limit = 999;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B connectorMessage.getRawData() typeof: &apos;+typeof(connectorMessage.getRawData())+&apos; msg: &apos;+connectorMessage.getRawData());
	} // end if 
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	// var dataBytes = new java.lang.String(connectorMessage.getRawData()).getBytes(&apos;UTF-8&apos;);
	// message = new String(message.getBytes(&quot;utf-8&quot;), &quot;utf-8&quot;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	// var dataBytes = new java.lang.String(msg.getBytes(&apos;UTF-8&apos;));
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);

	// var messageObjectgetBytes= checksum.update(connectorMessage.getRawData().getBytes());
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 
	
	$c(&apos;checksum&apos;, checksum.getValue());
	
	//grab the global channel map variable holding the last X unique checksums that we&apos;ve received
	var received = $gc(&apos;received_checksums&apos;);
	
	if (received == undefined) {
		var received = new Array();
		received.push(checksum.getValue());
	} else {
		//check if we&apos;ve recently received this message, skip it if so
		if (received.indexOf(checksum.getValue()) &gt; -1) {
			filter = true;
		//we haven&apos;t seen it recently, so remember it and allow it through
		} else {
			var received_len = received.length;
			if (received_len &gt; received_len_limit) {
				//remove oldest/first entry, shift all entries forward, and add new entry to end
				received.shift();
				received[received_len_limit] = checksum.getValue();
			} else {
				//add new entry to end of array
				received[received_len] = checksum.getValue();
			} // end if 
		} // end if 
	} // end if 

	 //debug code
	/*for (x=0; x&lt;=received_len_limit; x++) {
		$c(&apos;received-&apos;+x, received[x]);
	} */

	$c(&apos;filterMessage&apos;,filter);
	$gc(&apos;received_checksums&apos;,received);

	return filter;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fbd0484d-74a2-48e4-aedd-f97c2fcefa16</id>
                <name>Get Message Checksum</name>
                <revision>12</revision>
                <lastModified>
                  <time>1678916806703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating and reutrning a checksum for each provided message
	
	@author:  	Jeffrey Ritz
	@scriptName: 	getMessageChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {object} result - return checksum value
	@history
	2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() to remove the exponential representation of the number value
*/
function getMessageChecksum(msg) {	

	var scriptName= &apos;getMessageChecksum&apos;;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	} // end if 
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 

	var checksumValue= checksum.getValue();
	// 2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() 
	var arrChecksumValue= new Array(); 
	arrChecksumValue.push(checksumValue);
	$c(&apos;checksum&apos;, arrChecksumValue);

	return checksumValue;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>91db9bd1-ca92-4dcc-bba4-e1ece603fc87</id>
                <name>Remove Child Object From Parent Object Json</name>
                <revision>22</revision>
                <lastModified>
                  <time>1678916845037</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON child object and it&apos;s descendents from a parent object JSON
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeChildObjectFromParentObjectJson.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
		{string} parentObject - place the name of the string to be designated as the parent object in the JSON
		{string} childObject  - place the name of the string to be designated as the child object to be deleted from the JSON
	@param {object} msg - return modified Json object msg excluding specified Json child object
	@history
*/
function removeChildObjectFromParentObjectJson(msg, parentObject, childObject) {
	
	var scriptName= &apos;removeChildObjectFromParentObjectJson&apos;;
	var debug= 0;

	//var strObjJson= JSON.parse(msg);
	var strObjJson= JSON.stringify(msg);
	
	//var objJson= JSON.parse(msg);
	var newParentObjects= new Object();
	var parentObjects= msg;
	var arrParentObjects= new Array();
	var arrTransactionObjects= new Array();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof parentObjects: &apos;+typeof(parentObjects));
	for (var key in parentObjects) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof key: &apos;+typeof(key)+&apos; key: &apos;+key);
		if(key== parentObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof objJson[key]: &apos;+typeof(parentObjects[key])+&apos; parentObjects[key]: &apos;+JSON.stringify(parentObjects[key]));
			
			var newChildObjects= new Object();
			var childObjects= parentObjects[key];
			var arrChildObjects= new Array();
			
			for(var key2 in childObjects) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key2: &apos;+typeof(key2)+&apos; key2: &apos;+key2+&apos; childObject: &apos;+childObject);
				for(var key3 in childObjects[key2]) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key3: &apos;+typeof(key3)+&apos; key3: &apos;+key3+&apos; childObject: &apos;+childObject);
					if(key3== childObject) {
						var transactionObject= new Object();
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; childObject typeof: &apos;+typeof(childObjects[key2][key3])+&apos; childObject: &apos;+JSON.stringify(childObjects[key2][key3]));
						transactionObject.key= key3;
						transactionObject.value= childObjects[key2][key3];
						delete childObjects[key2][key3];
						if(debug&gt;0) logger.info(&apos;DEBUG::&apos;+scriptName+&apos; DELETE childObject: &apos;+key3+&apos; of parentObject: &apos;+JSON.stringify(childObjects[key2]));
						arrTransactionObjects.push(transactionObject);
					} // end if
				} // end for 
				arrChildObjects.push(childObjects[key2]);
			} // end for
			newParentObjects[key]= arrChildObjects;
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add all child keys: &apos;+JSON.stringify(arrChildObjects)+&apos; into ParentObject[&apos;+key+&apos;]: &apos;+newParentObjects[key]);
		} else {
			newParentObjects[key]= parentObjects[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+parentObjects[key]+&apos; string: &apos;+JSON.stringify(parentObjects[key]));
		} // end if
		arrParentObjects.push(newParentObjects);
	} // end for 
	var newMsg= arrParentObjects;
	channelMap.put(&apos;removeChildObjectMsg&apos;,newMsg);
	channelMap.put(&apos;removedChildTransIds&apos;,arrTransactionObjects);
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));
	return newMsg;
	
} </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2ff28338-dfb6-445d-a04e-c74b5486a08c</id>
                <name>Remove Object From Json</name>
                <revision>26</revision>
                <lastModified>
                  <time>1703964988318</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  Desc: This function will remove a JSON object and it&apos;s descendents from the msg
	
	fileName: 	removeObjectFromJson.js
	name:		Remove Object From Json	
	Authored:  	Jeffrey Ritz
	Created: 		2023-03-09
	Details:
		@param IN {string} msg - provide parent JSON object (i.e. Inbound connectorMessage.getRawData() - msg)
		@param IN {string} removeObject - provide JSON object to evaluate and remove from parent JSON object (msg)
		OUT (object) newMsg - return JSON object from processing
	@history
	2023-03-15 JER - Modified to include removeObject function parameter to specify specific JSON object by referencing key to be removed
*/
function removeObjectFromJson(msg, removeObject) {
	
	var scriptName= &apos;removeObjectFromJson&apos;;
	var debug= 0;
	//var objJson= JSON.stringify(msg);
	var objJson= JSON.parse(msg);
	var newObjJson= new Object();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof objJson: &apos;+typeof(objJson)+&apos; objJSON: &apos;+JSON.stringify(objJson));
	for (var key in objJson) {
		if(key== removeObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; DELETE key: &apos;+key);
			// delete objJson[key];
		} else {
			newObjJson[key]= objJson[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+objJson[key]+&apos; string: &apos;+JSON.stringify(objJson[key]));
		} // end if 
	} // end for 
	var newMsg= newObjJson;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));

	// return JSON.stringify(newMsg);
	return newMsg;
} 
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>993a6fd8-454a-4133-ba32-dbcfea71582b</id>
                <name>Update EDITransactionLog</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123233</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	The purpose of this function is to update the status in Insight.
	Populate the channel map with the following variables functionalGroupControlNumber, status, eventDate

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateStatus () {

	//  Build the llst of paramters to pass to the database
	var paramList = new Packages.java.util.ArrayList();
	paramList.add($(&apos;functionalGroupControlNumber&apos;));
	paramList.add($(&apos;eventDate&apos;));  //dateTime in the acknoledged field in this format (&quot;2017-07-31 14:15:01.577&quot;)
	paramList.add(new java.lang.Integer(parseInt($(&apos;status&apos;), 10)));
	
//	logger.info(&quot;updateStatus &quot;+paramList);

	//  SQL Statement and paramters that will be sent to SQL
	var statement = &quot;EXEC dbo.pr_EDITransactionLog_Update ?, ?, ?&quot;;
	//  Code template used for establishiing connection and passing the sql statement and parameter list  
	var result = executeSharedDBStatementFhirCh(statement, false, paramList);
	return result;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>42cb290e-5fb0-46b8-82db-576ea1e1ba0d</id>
                <name>Update EDITransactionLog from responseStatus in the response transformer </name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123356</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Call this in the response transformer on the destination.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateReponseStatus() {
	var status = 0;
	if (responseStatus == SENT){
		var status = 1;
		channelMap.put(&apos;status&apos;,status);
	}

updateStatus()
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2223579b-f914-4be7-a575-f1a2a2aa1ae2</id>
                <name>ValidateToString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123044</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} mapping - 
	@param {Any} defaultValue - 
	@param {Any} replacement - 
	@return {String} return description
*/
function validateToString(mapping, defaultValue, replacement) {
    if (mapping == null) {
        mapping = &apos;&apos;;
    }
    return validate(mapping, defaultValue, replacement).toString() + &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>8c9a8268-4ef0-43e9-ae5b-bf8895f0b80c</id>
            <name>WebPT-FORMAT</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939902</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>Include any functions or codes with 
-date &amp; time formating related
-data type formatting</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>920c9ead-70a6-4168-9d95-89261b73ae44</id>
                <name>12digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123520</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Take any 12 digit string yyyyMMddHHmm and change to MM/dd/yyyy HH:mm 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm
*/
function yyyyMMddHHmm(string) {
	return DateUtil.convertDate(&quot;yyyyMMddHHmm&quot;, &quot;MM/dd/yyyy HH:mm&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>fe2689ec-1946-46d5-8dd6-8fbbf106e1e6</id>
                <name>14digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122871</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Take 14 digit string yyyyMMddHHmmss and change to MM/dd/yyyy HH:mm:ss 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm:ss
*/
function yyyyMMddHHmmss(string) {
	if (string.length == 14) {
		  return DateUtil.convertDate(&quot;yyyyMMddHHmmss&quot;, &quot;MM/dd/yyyy HH:mm:ss&quot;, string);
	}
	else {
		return &quot;unregcognized string&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>b9db35e2-d5bd-48a1-8cc6-3475c698d7b4</id>
                <name>currentDT_yyyy-MM-dd HH:mm:ss.SSS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123114</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Kirby Knight
	Date Modified:  11/09/2020
	Retund the current date/time down to the millisecond

	@return {String} return description
*/
function currentDtToMilliseconds() {
	return DateUtil.getCurrentDate(&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7e747999-4bec-43fc-978d-7049d3543cf0</id>
                <name>fixHL7NodeOrder</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/

function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>dfedacf6-773b-413e-b78d-1bf16a92071d</id>
                <name>formatHL7Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121643</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Take any eight digit HL7 message data string (yyyyMMdd) and formats it human-readable format (MM/dd/yyyy)
	such as 20090612 -&gt; 06/12/2009

	@param {String} arg1 - 8 digit HL7 message data string yyyyMMdd
	@return {String} return date format as MM/dd/yyyy
*/
function formatHL7Date(string) {
	return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;MM/dd/yyyy&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>a8f54921-2cb6-4134-8806-3c4e10a757d9</id>
                <name>getCurrentLocalTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122014</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = getCurrentLocalTimestamp();

	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestamp() {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(&quot;EST&quot;)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>6c5f1bd8-ebbf-4c8e-b465-0be8ccaba0d0</id>
                <name>getCurrentLocalTimeToMs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123077</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	Gets the current local date/time to the milliseconds
	Converts to the timezone that is passed in Examples (America/New_York, America/Chicago, America/Phoenix )

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestampToMs(timeZone) {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timeZone)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>78d74c5b-c881-404a-ad96-4e909e1a19f3</id>
                <name>phoneToE164</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121982</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Insight phone number to E164 format 5554446666 to +15554446666

	@param {Any} phoneIn - 
	@return {String} return description
*/
function phoneToE164(phoneIn) {
	logger.info(&apos;L1 &apos;+phoneIn);
	if(phoneIn != null ){
	//phoneIn = &apos;+1&apos; + phoneIn.toString(); 
	logger.info(&apos;L2 &apos;+phoneIn);
	return &apos;+1&apos; + phoneIn.toString(); 
	} else{
		return null;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>6a32d94d-408c-4e10-9799-e45e150b5c1f</id>
            <name>WebPT-MISC</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939909</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>miscellaneous javascript</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>84b4f1c7-f82d-4140-9fbd-98a95f68ff32</id>
                <name>getChannelState</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122648</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetChannelState(channel_id) {

    var channel_status = &quot;NA&quot;;

    var channel_count = parseInt(Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().size());

    for(var i=0;i&lt;channel_count;i++) {
        if (channel_id == Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getChannelId()) {
            channel_status = Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getState();
        }
    }

    return channel_status;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>715435a9-cb15-4e8f-bc5b-4249eaea6e17</id>
                <name>momentjs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122487</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Testing MIRTH-3794 using external JavaScript library &quot;moment.js&quot;
*/
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=b():&quot;function&quot;==typeof define&amp;&amp;define.amd?define(b):a.moment=b()}(this,function(){&quot;use strict&quot;;function a(){return Hc.apply(null,arguments)}function b(a){Hc=a}function c(a){return&quot;[object Array]&quot;===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||&quot;[object Date]&quot;===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c&lt;a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&amp;&amp;(a[c]=b[c]);return f(b,&quot;toString&quot;)&amp;&amp;(a.toString=b.toString),f(b,&quot;valueOf&quot;)&amp;&amp;(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ca(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&amp;&amp;(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow&lt;0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&amp;&amp;(a._isValid=a._isValid&amp;&amp;0===b.charsLeftOver&amp;&amp;0===b.unusedTokens.length&amp;&amp;void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if(&quot;undefined&quot;!=typeof b._isAMomentObject&amp;&amp;(a._isAMomentObject=b._isAMomentObject),&quot;undefined&quot;!=typeof b._i&amp;&amp;(a._i=b._i),&quot;undefined&quot;!=typeof b._f&amp;&amp;(a._f=b._f),&quot;undefined&quot;!=typeof b._l&amp;&amp;(a._l=b._l),&quot;undefined&quot;!=typeof b._strict&amp;&amp;(a._strict=b._strict),&quot;undefined&quot;!=typeof b._tzm&amp;&amp;(a._tzm=b._tzm),&quot;undefined&quot;!=typeof b._isUTC&amp;&amp;(a._isUTC=b._isUTC),&quot;undefined&quot;!=typeof b._offset&amp;&amp;(a._offset=b._offset),&quot;undefined&quot;!=typeof b._pf&amp;&amp;(a._pf=j(b)),&quot;undefined&quot;!=typeof b._locale&amp;&amp;(a._locale=b._locale),Jc.length&gt;0)for(c in Jc)d=Jc[c],e=b[d],&quot;undefined&quot;!=typeof e&amp;&amp;(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),Kc===!1&amp;&amp;(Kc=!0,a.updateOffset(this),Kc=!1)}function o(a){return a instanceof n||null!=a&amp;&amp;null!=a._isAMomentObject}function p(a){return 0&gt;a?Math.ceil(a):Math.floor(a)}function q(a){var b=+a,c=0;return 0!==b&amp;&amp;isFinite(b)&amp;&amp;(c=p(b)),c}function r(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e&gt;d;d++)(c&amp;&amp;a[d]!==b[d]||!c&amp;&amp;q(a[d])!==q(b[d]))&amp;&amp;g++;return g+f}function s(){}function t(a){return a?a.toLowerCase().replace(&quot;_&quot;,&quot;-&quot;):a}function u(a){for(var b,c,d,e,f=0;f&lt;a.length;){for(e=t(a[f]).split(&quot;-&quot;),b=e.length,c=t(a[f+1]),c=c?c.split(&quot;-&quot;):null;b&gt;0;){if(d=v(e.slice(0,b).join(&quot;-&quot;)))return d;if(c&amp;&amp;c.length&gt;=b&amp;&amp;r(e,c,!0)&gt;=b-1)break;b--}f++}return null}function v(a){var b=null;if(!Lc[a]&amp;&amp;&quot;undefined&quot;!=typeof module&amp;&amp;module&amp;&amp;module.exports)try{b=Ic._abbr,require(&quot;./locale/&quot;+a),w(b)}catch(c){}return Lc[a]}function w(a,b){var c;return a&amp;&amp;(c=&quot;undefined&quot;==typeof b?y(a):x(a,b),c&amp;&amp;(Ic=c)),Ic._abbr}function x(a,b){return null!==b?(b.abbr=a,Lc[a]=Lc[a]||new s,Lc[a].set(b),w(a),Lc[a]):(delete Lc[a],null)}function y(a){var b;if(a&amp;&amp;a._locale&amp;&amp;a._locale._abbr&amp;&amp;(a=a._locale._abbr),!a)return Ic;if(!c(a)){if(b=v(a))return b;a=[a]}return u(a)}function z(a,b){var c=a.toLowerCase();Mc[c]=Mc[c+&quot;s&quot;]=Mc[b]=a}function A(a){return&quot;string&quot;==typeof a?Mc[a]||Mc[a.toLowerCase()]:void 0}function B(a){var b,c,d={};for(c in a)f(a,c)&amp;&amp;(b=A(c),b&amp;&amp;(d[b]=a[c]));return d}function C(b,c){return function(d){return null!=d?(E(this,b,d),a.updateOffset(this,c),this):D(this,b)}}function D(a,b){return a._d[&quot;get&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b]()}function E(a,b,c){return a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b](c)}function F(a,b){var c;if(&quot;object&quot;==typeof a)for(c in a)this.set(c,a[c]);else if(a=A(a),&quot;function&quot;==typeof this[a])return this[a](b);return this}function G(a,b,c){var d=&quot;&quot;+Math.abs(a),e=b-d.length,f=a&gt;=0;return(f?c?&quot;+&quot;:&quot;&quot;:&quot;-&quot;)+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function H(a,b,c,d){var e=d;&quot;string&quot;==typeof d&amp;&amp;(e=function(){return this[d]()}),a&amp;&amp;(Qc[a]=e),b&amp;&amp;(Qc[b[0]]=function(){return G(e.apply(this,arguments),b[1],b[2])}),c&amp;&amp;(Qc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function I(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,&quot;&quot;):a.replace(/\\/g,&quot;&quot;)}function J(a){var b,c,d=a.match(Nc);for(b=0,c=d.length;c&gt;b;b++)Qc[d[b]]?d[b]=Qc[d[b]]:d[b]=I(d[b]);return function(e){var f=&quot;&quot;;for(b=0;c&gt;b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function K(a,b){return a.isValid()?(b=L(b,a.localeData()),Pc[b]=Pc[b]||J(b),Pc[b](a)):a.localeData().invalidDate()}function L(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Oc.lastIndex=0;d&gt;=0&amp;&amp;Oc.test(a);)a=a.replace(Oc,c),Oc.lastIndex=0,d-=1;return a}function M(a){return&quot;function&quot;==typeof a&amp;&amp;&quot;[object Function]&quot;===Object.prototype.toString.call(a)}function N(a,b,c){dd[a]=M(b)?b:function(a){return a&amp;&amp;c?c:b}}function O(a,b){return f(dd,a)?dd[a](b._strict,b._locale):new RegExp(P(a))}function P(a){return a.replace(&quot;\\&quot;,&quot;&quot;).replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,&quot;\\$&amp;&quot;)}function Q(a,b){var c,d=b;for(&quot;string&quot;==typeof a&amp;&amp;(a=[a]),&quot;number&quot;==typeof b&amp;&amp;(d=function(a,c){c[b]=q(a)}),c=0;c&lt;a.length;c++)ed[a[c]]=d}function R(a,b){Q(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function S(a,b,c){null!=b&amp;&amp;f(ed,a)&amp;&amp;ed[a](b,c._a,c,a)}function T(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function U(a){return this._months[a.month()]}function V(a){return this._monthsShort[a.month()]}function W(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12&gt;d;d++){if(e=h([2e3,d]),c&amp;&amp;!this._longMonthsParse[d]&amp;&amp;(this._longMonthsParse[d]=new RegExp(&quot;^&quot;+this.months(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;),this._shortMonthsParse[d]=new RegExp(&quot;^&quot;+this.monthsShort(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;)),c||this._monthsParse[d]||(f=&quot;^&quot;+this.months(e,&quot;&quot;)+&quot;|^&quot;+this.monthsShort(e,&quot;&quot;),this._monthsParse[d]=new RegExp(f.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),c&amp;&amp;&quot;MMMM&quot;===b&amp;&amp;this._longMonthsParse[d].test(a))return d;if(c&amp;&amp;&quot;MMM&quot;===b&amp;&amp;this._shortMonthsParse[d].test(a))return d;if(!c&amp;&amp;this._monthsParse[d].test(a))return d}}function X(a,b){var c;return&quot;string&quot;==typeof b&amp;&amp;(b=a.localeData().monthsParse(b),&quot;number&quot;!=typeof b)?a:(c=Math.min(a.date(),T(a.year(),b)),a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+&quot;Month&quot;](b,c),a)}function Y(b){return null!=b?(X(this,b),a.updateOffset(this,!0),this):D(this,&quot;Month&quot;)}function Z(){return T(this.year(),this.month())}function $(a){var b,c=a._a;return c&amp;&amp;-2===j(a).overflow&amp;&amp;(b=c[gd]&lt;0||c[gd]&gt;11?gd:c[hd]&lt;1||c[hd]&gt;T(c[fd],c[gd])?hd:c[id]&lt;0||c[id]&gt;24||24===c[id]&amp;&amp;(0!==c[jd]||0!==c[kd]||0!==c[ld])?id:c[jd]&lt;0||c[jd]&gt;59?jd:c[kd]&lt;0||c[kd]&gt;59?kd:c[ld]&lt;0||c[ld]&gt;999?ld:-1,j(a)._overflowDayOfYear&amp;&amp;(fd&gt;b||b&gt;hd)&amp;&amp;(b=hd),j(a).overflow=b),a}function _(b){a.suppressDeprecationWarnings===!1&amp;&amp;&quot;undefined&quot;!=typeof console&amp;&amp;console.warn&amp;&amp;console.warn(&quot;Deprecation warning: &quot;+b)}function aa(a,b){var c=!0;return g(function(){return c&amp;&amp;(_(a+&quot;\n&quot;+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function ba(a,b){od[a]||(_(b),od[a]=!0)}function ca(a){var b,c,d=a._i,e=pd.exec(d);if(e){for(j(a).iso=!0,b=0,c=qd.length;c&gt;b;b++)if(qd[b][1].exec(d)){a._f=qd[b][0];break}for(b=0,c=rd.length;c&gt;b;b++)if(rd[b][1].exec(d)){a._f+=(e[6]||&quot; &quot;)+rd[b][0];break}d.match(ad)&amp;&amp;(a._f+=&quot;Z&quot;),va(a)}else a._isValid=!1}function da(b){var c=sd.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ca(b),void(b._isValid===!1&amp;&amp;(delete b._isValid,a.createFromInputFallback(b))))}function ea(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970&gt;a&amp;&amp;h.setFullYear(a),h}function fa(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970&gt;a&amp;&amp;b.setUTCFullYear(a),b}function ga(a){return ha(a)?366:365}function ha(a){return a%4===0&amp;&amp;a%100!==0||a%400===0}function ia(){return ha(this.year())}function ja(a,b,c){var d,e=c-b,f=c-a.day();return f&gt;e&amp;&amp;(f-=7),e-7&gt;f&amp;&amp;(f+=7),d=Da(a).add(f,&quot;d&quot;),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ka(a){return ja(a,this._week.dow,this._week.doy).week}function la(){return this._week.dow}function ma(){return this._week.doy}function na(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function oa(a){var b=ja(this,1,4).week;return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function pa(a,b,c,d,e){var f,g=6+e-d,h=fa(a,0,1+g),i=h.getUTCDay();return e&gt;i&amp;&amp;(i+=7),c=null!=c?1*c:e,f=1+g+7*(b-1)-i+c,{year:f&gt;0?a:a-1,dayOfYear:f&gt;0?f:ga(a-1)+f}}function qa(a){var b=Math.round((this.clone().startOf(&quot;day&quot;)-this.clone().startOf(&quot;year&quot;))/864e5)+1;return null==a?b:this.add(a-b,&quot;d&quot;)}function ra(a,b,c){return null!=a?a:null!=b?b:c}function sa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ta(a){var b,c,d,e,f=[];if(!a._d){for(d=sa(a),a._w&amp;&amp;null==a._a[hd]&amp;&amp;null==a._a[gd]&amp;&amp;ua(a),a._dayOfYear&amp;&amp;(e=ra(a._a[fd],d[fd]),a._dayOfYear&gt;ga(e)&amp;&amp;(j(a)._overflowDayOfYear=!0),c=fa(e,0,a._dayOfYear),a._a[gd]=c.getUTCMonth(),a._a[hd]=c.getUTCDate()),b=0;3&gt;b&amp;&amp;null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7&gt;b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[id]&amp;&amp;0===a._a[jd]&amp;&amp;0===a._a[kd]&amp;&amp;0===a._a[ld]&amp;&amp;(a._nextDay=!0,a._a[id]=0),a._d=(a._useUTC?fa:ea).apply(null,f),null!=a._tzm&amp;&amp;a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&amp;&amp;(a._a[id]=24)}}function ua(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=ra(b.GG,a._a[fd],ja(Da(),1,4).year),d=ra(b.W,1),e=ra(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=ra(b.gg,a._a[fd],ja(Da(),f,g).year),d=ra(b.w,1),null!=b.d?(e=b.d,f&gt;e&amp;&amp;++d):e=null!=b.e?b.e+f:f),h=pa(c,d,e,g,f),a._a[fd]=h.year,a._dayOfYear=h.dayOfYear}function va(b){if(b._f===a.ISO_8601)return void ca(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=&quot;&quot;+b._i,i=h.length,k=0;for(e=L(b._f,b._locale).match(Nc)||[],c=0;c&lt;e.length;c++)f=e[c],d=(h.match(O(f,b))||[])[0],d&amp;&amp;(g=h.substr(0,h.indexOf(d)),g.length&gt;0&amp;&amp;j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Qc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),S(f,d,b)):b._strict&amp;&amp;!d&amp;&amp;j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length&gt;0&amp;&amp;j(b).unusedInput.push(h),j(b).bigHour===!0&amp;&amp;b._a[id]&lt;=12&amp;&amp;b._a[id]&gt;0&amp;&amp;(j(b).bigHour=void 0),b._a[id]=wa(b._locale,b._a[id],b._meridiem),ta(b),$(b)}function wa(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&amp;&amp;12&gt;b&amp;&amp;(b+=12),d||12!==b||(b=0),b):b}function xa(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e&lt;a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&amp;&amp;(b._useUTC=a._useUTC),b._f=a._f[e],va(b),k(b)&amp;&amp;(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d&gt;f)&amp;&amp;(d=f,c=b));g(a,c||b)}function ya(a){if(!a._d){var b=B(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ta(a)}}function za(a){var b=new n($(Aa(a)));return b._nextDay&amp;&amp;(b.add(1,&quot;d&quot;),b._nextDay=void 0),b}function Aa(a){var b=a._i,e=a._f;return a._locale=a._locale||y(a._l),null===b||void 0===e&amp;&amp;&quot;&quot;===b?l({nullInput:!0}):(&quot;string&quot;==typeof b&amp;&amp;(a._i=b=a._locale.preparse(b)),o(b)?new n($(b)):(c(e)?xa(a):e?va(a):d(b)?a._d=b:Ba(a),a))}function Ba(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):&quot;string&quot;==typeof f?da(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ta(b)):&quot;object&quot;==typeof f?ya(b):&quot;number&quot;==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ca(a,b,c,d,e){var f={};return&quot;boolean&quot;==typeof c&amp;&amp;(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,za(f)}function Da(a,b,c,d){return Ca(a,b,c,d,!1)}function Ea(a,b){var d,e;if(1===b.length&amp;&amp;c(b[0])&amp;&amp;(b=b[0]),!b.length)return Da();for(d=b[0],e=1;e&lt;b.length;++e)(!b[e].isValid()||b[e][a](d))&amp;&amp;(d=b[e]);return d}function Fa(){var a=[].slice.call(arguments,0);return Ea(&quot;isBefore&quot;,a)}function Ga(){var a=[].slice.call(arguments,0);return Ea(&quot;isAfter&quot;,a)}function Ha(a){var b=B(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=y(),this._bubble()}function Ia(a){return a instanceof Ha}function Ja(a,b){H(a,0,0,function(){var a=this.utcOffset(),c=&quot;+&quot;;return 0&gt;a&amp;&amp;(a=-a,c=&quot;-&quot;),c+G(~~(a/60),2)+b+G(~~a%60,2)})}function Ka(a){var b=(a||&quot;&quot;).match(ad)||[],c=b[b.length-1]||[],d=(c+&quot;&quot;).match(xd)||[&quot;-&quot;,0,0],e=+(60*d[1])+q(d[2]);return&quot;+&quot;===d[0]?e:-e}function La(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Da(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Da(b).local()}function Ma(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Na(b,c){var d,e=this._offset||0;return null!=b?(&quot;string&quot;==typeof b&amp;&amp;(b=Ka(b)),Math.abs(b)&lt;16&amp;&amp;(b=60*b),!this._isUTC&amp;&amp;c&amp;&amp;(d=Ma(this)),this._offset=b,this._isUTC=!0,null!=d&amp;&amp;this.add(d,&quot;m&quot;),e!==b&amp;&amp;(!c||this._changeInProgress?bb(this,Ya(b-e,&quot;m&quot;),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ma(this)}function Oa(a,b){return null!=a?(&quot;string&quot;!=typeof a&amp;&amp;(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Pa(a){return this.utcOffset(0,a)}function Qa(a){return this._isUTC&amp;&amp;(this.utcOffset(0,a),this._isUTC=!1,a&amp;&amp;this.subtract(Ma(this),&quot;m&quot;)),this}function Ra(){return this._tzm?this.utcOffset(this._tzm):&quot;string&quot;==typeof this._i&amp;&amp;this.utcOffset(Ka(this._i)),this}function Sa(a){return a=a?Da(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Ta(){return this.utcOffset()&gt;this.clone().month(0).utcOffset()||this.utcOffset()&gt;this.clone().month(5).utcOffset()}function Ua(){if(&quot;undefined&quot;!=typeof this._isDSTShifted)return this._isDSTShifted;var a={};if(m(a,this),a=Aa(a),a._a){var b=a._isUTC?h(a._a):Da(a._a);this._isDSTShifted=this.isValid()&amp;&amp;r(a._a,b.toArray())&gt;0}else this._isDSTShifted=!1;return this._isDSTShifted}function Va(){return!this._isUTC}function Wa(){return this._isUTC}function Xa(){return this._isUTC&amp;&amp;0===this._offset}function Ya(a,b){var c,d,e,g=a,h=null;return Ia(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:&quot;number&quot;==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=yd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:0,d:q(h[hd])*c,h:q(h[id])*c,m:q(h[jd])*c,s:q(h[kd])*c,ms:q(h[ld])*c}):(h=zd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:Za(h[2],c),M:Za(h[3],c),d:Za(h[4],c),h:Za(h[5],c),m:Za(h[6],c),s:Za(h[7],c),w:Za(h[8],c)}):null==g?g={}:&quot;object&quot;==typeof g&amp;&amp;(&quot;from&quot;in g||&quot;to&quot;in g)&amp;&amp;(e=_a(Da(g.from),Da(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ha(g),Ia(a)&amp;&amp;f(a,&quot;_locale&quot;)&amp;&amp;(d._locale=a._locale),d}function Za(a,b){var c=a&amp;&amp;parseFloat(a.replace(&quot;,&quot;,&quot;.&quot;));return(isNaN(c)?0:c)*b}function $a(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,&quot;M&quot;).isAfter(b)&amp;&amp;--c.months,c.milliseconds=+b-+a.clone().add(c.months,&quot;M&quot;),c}function _a(a,b){var c;return b=La(b,a),a.isBefore(b)?c=$a(a,b):(c=$a(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function ab(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(ba(b,&quot;moment().&quot;+b+&quot;(period, number) is deprecated. Please use moment().&quot;+b+&quot;(number, period).&quot;),f=c,c=d,d=f),c=&quot;string&quot;==typeof c?+c:c,e=Ya(c,d),bb(this,e,a),this}}function bb(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&amp;&amp;b._d.setTime(+b._d+f*d),g&amp;&amp;E(b,&quot;Date&quot;,D(b,&quot;Date&quot;)+g*d),h&amp;&amp;X(b,D(b,&quot;Month&quot;)+h*d),e&amp;&amp;a.updateOffset(b,g||h)}function cb(a,b){var c=a||Da(),d=La(c,this).startOf(&quot;day&quot;),e=this.diff(d,&quot;days&quot;,!0),f=-6&gt;e?&quot;sameElse&quot;:-1&gt;e?&quot;lastWeek&quot;:0&gt;e?&quot;lastDay&quot;:1&gt;e?&quot;sameDay&quot;:2&gt;e?&quot;nextDay&quot;:7&gt;e?&quot;nextWeek&quot;:&quot;sameElse&quot;;return this.format(b&amp;&amp;b[f]||this.localeData().calendar(f,this,Da(c)))}function db(){return new n(this)}function eb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this&gt;+a):(c=o(a)?+a:+Da(a),c&lt;+this.clone().startOf(b))}function fb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+a&gt;+this):(c=o(a)?+a:+Da(a),+this.clone().endOf(b)&lt;c)}function gb(a,b,c){return this.isAfter(a,c)&amp;&amp;this.isBefore(b,c)}function hb(a,b){var c;return b=A(b||&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this===+a):(c=+Da(a),+this.clone().startOf(b)&lt;=c&amp;&amp;c&lt;=+this.clone().endOf(b))}function ib(a,b,c){var d,e,f=La(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=A(b),&quot;year&quot;===b||&quot;month&quot;===b||&quot;quarter&quot;===b?(e=jb(this,f),&quot;quarter&quot;===b?e/=3:&quot;year&quot;===b&amp;&amp;(e/=12)):(d=this-f,e=&quot;second&quot;===b?d/1e3:&quot;minute&quot;===b?d/6e4:&quot;hour&quot;===b?d/36e5:&quot;day&quot;===b?(d-g)/864e5:&quot;week&quot;===b?(d-g)/6048e5:d),c?e:p(e)}function jb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,&quot;months&quot;);return 0&gt;b-f?(c=a.clone().add(e-1,&quot;months&quot;),d=(b-f)/(f-c)):(c=a.clone().add(e+1,&quot;months&quot;),d=(b-f)/(c-f)),-(e+d)}function kb(){return this.clone().locale(&quot;en&quot;).format(&quot;ddd MMM DD YYYY HH:mm:ss [GMT]ZZ&quot;)}function lb(){var a=this.clone().utc();return 0&lt;a.year()&amp;&amp;a.year()&lt;=9999?&quot;function&quot;==typeof Date.prototype.toISOString?this.toDate().toISOString():K(a,&quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;):K(a,&quot;YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;)}function mb(b){var c=K(this,b||a.defaultFormat);return this.localeData().postformat(c)}function nb(a,b){return this.isValid()?Ya({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.from(Da(),a)}function pb(a,b){return this.isValid()?Ya({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function qb(a){return this.to(Da(),a)}function rb(a){var b;return void 0===a?this._locale._abbr:(b=y(a),null!=b&amp;&amp;(this._locale=b),this)}function sb(){return this._locale}function tb(a){switch(a=A(a)){case&quot;year&quot;:this.month(0);case&quot;quarter&quot;:case&quot;month&quot;:this.date(1);case&quot;week&quot;:case&quot;isoWeek&quot;:case&quot;day&quot;:this.hours(0);case&quot;hour&quot;:this.minutes(0);case&quot;minute&quot;:this.seconds(0);case&quot;second&quot;:this.milliseconds(0)}return&quot;week&quot;===a&amp;&amp;this.weekday(0),&quot;isoWeek&quot;===a&amp;&amp;this.isoWeekday(1),&quot;quarter&quot;===a&amp;&amp;this.month(3*Math.floor(this.month()/3)),this}function ub(a){return a=A(a),void 0===a||&quot;millisecond&quot;===a?this:this.startOf(a).add(1,&quot;isoWeek&quot;===a?&quot;week&quot;:a).subtract(1,&quot;ms&quot;)}function vb(){return+this._d-6e4*(this._offset||0)}function wb(){return Math.floor(+this/1e3)}function xb(){return this._offset?new Date(+this):this._d}function yb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function zb(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Ab(){return k(this)}function Bb(){return g({},j(this))}function Cb(){return j(this).overflow}function Db(a,b){H(0,[a,a.length],0,b)}function Eb(a,b,c){return ja(Da([a,11,31+b-c]),b,c).week}function Fb(a){var b=ja(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Gb(a){var b=ja(this,1,4).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Hb(){return Eb(this.year(),1,4)}function Ib(){var a=this.localeData()._week;return Eb(this.year(),a.dow,a.doy)}function Jb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Kb(a,b){return&quot;string&quot;!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),&quot;number&quot;==typeof a?a:null):parseInt(a,10)}function Lb(a){return this._weekdays[a.day()]}function Mb(a){return this._weekdaysShort[a.day()]}function Nb(a){return this._weekdaysMin[a.day()]}function Ob(a){var b,c,d;for(this._weekdaysParse=this._weekdaysParse||[],b=0;7&gt;b;b++)if(this._weekdaysParse[b]||(c=Da([2e3,1]).day(b),d=&quot;^&quot;+this.weekdays(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysShort(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysMin(c,&quot;&quot;),this._weekdaysParse[b]=new RegExp(d.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),this._weekdaysParse[b].test(a))return b}function Pb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Kb(a,this.localeData()),this.add(a-b,&quot;d&quot;)):b}function Qb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,&quot;d&quot;)}function Rb(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Sb(a,b){H(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Tb(a,b){return b._meridiemParse}function Ub(a){return&quot;p&quot;===(a+&quot;&quot;).toLowerCase().charAt(0)}function Vb(a,b,c){return a&gt;11?c?&quot;pm&quot;:&quot;PM&quot;:c?&quot;am&quot;:&quot;AM&quot;}function Wb(a,b){b[ld]=q(1e3*(&quot;0.&quot;+a))}function Xb(){return this._isUTC?&quot;UTC&quot;:&quot;&quot;}function Yb(){return this._isUTC?&quot;Coordinated Universal Time&quot;:&quot;&quot;}function Zb(a){return Da(1e3*a)}function $b(){return Da.apply(null,arguments).parseZone()}function _b(a,b,c){var d=this._calendar[a];return&quot;function&quot;==typeof d?d.call(b,c):d}function ac(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function bc(){return this._invalidDate}function cc(a){return this._ordinal.replace(&quot;%d&quot;,a)}function dc(a){return a}function ec(a,b,c,d){var e=this._relativeTime[c];return&quot;function&quot;==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function fc(a,b){var c=this._relativeTime[a&gt;0?&quot;future&quot;:&quot;past&quot;];return&quot;function&quot;==typeof c?c(b):c.replace(/%s/i,b)}function gc(a){var b,c;for(c in a)b=a[c],&quot;function&quot;==typeof b?this[c]=b:this[&quot;_&quot;+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+&quot;|&quot;+/\d{1,2}/.source)}function hc(a,b,c,d){var e=y(),f=h().set(d,b);return e[c](f,a)}function ic(a,b,c,d,e){if(&quot;number&quot;==typeof a&amp;&amp;(b=a,a=void 0),a=a||&quot;&quot;,null!=b)return hc(a,b,c,e);var f,g=[];for(f=0;d&gt;f;f++)g[f]=hc(a,f,c,e);return g}function jc(a,b){return ic(a,b,&quot;months&quot;,12,&quot;month&quot;)}function kc(a,b){return ic(a,b,&quot;monthsShort&quot;,12,&quot;month&quot;)}function lc(a,b){return ic(a,b,&quot;weekdays&quot;,7,&quot;day&quot;)}function mc(a,b){return ic(a,b,&quot;weekdaysShort&quot;,7,&quot;day&quot;)}function nc(a,b){return ic(a,b,&quot;weekdaysMin&quot;,7,&quot;day&quot;)}function oc(){var a=this._data;return this._milliseconds=Wd(this._milliseconds),this._days=Wd(this._days),this._months=Wd(this._months),a.milliseconds=Wd(a.milliseconds),a.seconds=Wd(a.seconds),a.minutes=Wd(a.minutes),a.hours=Wd(a.hours),a.months=Wd(a.months),a.years=Wd(a.years),this}function pc(a,b,c,d){var e=Ya(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function qc(a,b){return pc(this,a,b,1)}function rc(a,b){return pc(this,a,b,-1)}function sc(a){return 0&gt;a?Math.floor(a):Math.ceil(a)}function tc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f&gt;=0&amp;&amp;g&gt;=0&amp;&amp;h&gt;=0||0&gt;=f&amp;&amp;0&gt;=g&amp;&amp;0&gt;=h||(f+=864e5*sc(vc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=p(f/1e3),i.seconds=a%60,b=p(a/60),i.minutes=b%60,c=p(b/60),i.hours=c%24,g+=p(c/24),e=p(uc(g)),h+=e,g-=sc(vc(e)),d=p(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function uc(a){return 4800*a/146097}function vc(a){return 146097*a/4800}function wc(a){var b,c,d=this._milliseconds;if(a=A(a),&quot;month&quot;===a||&quot;year&quot;===a)return b=this._days+d/864e5,c=this._months+uc(b),&quot;month&quot;===a?c:c/12;switch(b=this._days+Math.round(vc(this._months)),a){case&quot;week&quot;:return b/7+d/6048e5;case&quot;day&quot;:return b+d/864e5;case&quot;hour&quot;:return 24*b+d/36e5;case&quot;minute&quot;:return 1440*b+d/6e4;case&quot;second&quot;:return 86400*b+d/1e3;case&quot;millisecond&quot;:return Math.floor(864e5*b)+d;default:throw new Error(&quot;Unknown unit &quot;+a)}}function xc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*q(this._months/12)}function yc(a){return function(){return this.as(a)}}function zc(a){return a=A(a),this[a+&quot;s&quot;]()}function Ac(a){return function(){return this._data[a]}}function Bc(){return p(this.days()/7)}function Cc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Dc(a,b,c){var d=Ya(a).abs(),e=ke(d.as(&quot;s&quot;)),f=ke(d.as(&quot;m&quot;)),g=ke(d.as(&quot;h&quot;)),h=ke(d.as(&quot;d&quot;)),i=ke(d.as(&quot;M&quot;)),j=ke(d.as(&quot;y&quot;)),k=e&lt;le.s&amp;&amp;[&quot;s&quot;,e]||1===f&amp;&amp;[&quot;m&quot;]||f&lt;le.m&amp;&amp;[&quot;mm&quot;,f]||1===g&amp;&amp;[&quot;h&quot;]||g&lt;le.h&amp;&amp;[&quot;hh&quot;,g]||1===h&amp;&amp;[&quot;d&quot;]||h&lt;le.d&amp;&amp;[&quot;dd&quot;,h]||1===i&amp;&amp;[&quot;M&quot;]||i&lt;le.M&amp;&amp;[&quot;MM&quot;,i]||1===j&amp;&amp;[&quot;y&quot;]||[&quot;yy&quot;,j];return k[2]=b,k[3]=+a&gt;0,k[4]=c,Cc.apply(null,k)}function Ec(a,b){return void 0===le[a]?!1:void 0===b?le[a]:(le[a]=b,!0)}function Fc(a){var b=this.localeData(),c=Dc(this,!a,b);return a&amp;&amp;(c=b.pastFuture(+this,c)),b.postformat(c)}function Gc(){var a,b,c,d=me(this._milliseconds)/1e3,e=me(this._days),f=me(this._months);a=p(d/60),b=p(a/60),d%=60,a%=60,c=p(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0&gt;m?&quot;-&quot;:&quot;&quot;)+&quot;P&quot;+(g?g+&quot;Y&quot;:&quot;&quot;)+(h?h+&quot;M&quot;:&quot;&quot;)+(i?i+&quot;D&quot;:&quot;&quot;)+(j||k||l?&quot;T&quot;:&quot;&quot;)+(j?j+&quot;H&quot;:&quot;&quot;)+(k?k+&quot;M&quot;:&quot;&quot;)+(l?l+&quot;S&quot;:&quot;&quot;):&quot;P0D&quot;}var Hc,Ic,Jc=a.momentProperties=[],Kc=!1,Lc={},Mc={},Nc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Pc={},Qc={},Rc=/\d/,Sc=/\d\d/,Tc=/\d{3}/,Uc=/\d{4}/,Vc=/[+-]?\d{6}/,Wc=/\d\d?/,Xc=/\d{1,3}/,Yc=/\d{1,4}/,Zc=/[+-]?\d{1,6}/,$c=/\d+/,_c=/[+-]?\d+/,ad=/Z|[+-]\d\d:?\d\d/gi,bd=/[+-]?\d+(\.\d{1,3})?/,cd=/[0-9]*[&apos;a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,dd={},ed={},fd=0,gd=1,hd=2,id=3,jd=4,kd=5,ld=6;H(&quot;M&quot;,[&quot;MM&quot;,2],&quot;Mo&quot;,function(){return this.month()+1}),H(&quot;MMM&quot;,0,0,function(a){return this.localeData().monthsShort(this,a)}),H(&quot;MMMM&quot;,0,0,function(a){return this.localeData().months(this,a)}),z(&quot;month&quot;,&quot;M&quot;),N(&quot;M&quot;,Wc),N(&quot;MM&quot;,Wc,Sc),N(&quot;MMM&quot;,cd),N(&quot;MMMM&quot;,cd),Q([&quot;M&quot;,&quot;MM&quot;],function(a,b){b[gd]=q(a)-1}),Q([&quot;MMM&quot;,&quot;MMMM&quot;],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[gd]=e:j(c).invalidMonth=a});var md=&quot;January_February_March_April_May_June_July_August_September_October_November_December&quot;.split(&quot;_&quot;),nd=&quot;Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec&quot;.split(&quot;_&quot;),od={};a.suppressDeprecationWarnings=!1;var pd=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,qd=[[&quot;YYYYYY-MM-DD&quot;,/[+-]\d{6}-\d{2}-\d{2}/],[&quot;YYYY-MM-DD&quot;,/\d{4}-\d{2}-\d{2}/],[&quot;GGGG-[W]WW-E&quot;,/\d{4}-W\d{2}-\d/],[&quot;GGGG-[W]WW&quot;,/\d{4}-W\d{2}/],[&quot;YYYY-DDD&quot;,/\d{4}-\d{3}/]],rd=[[&quot;HH:mm:ss.SSSS&quot;,/(T| )\d\d:\d\d:\d\d\.\d+/],[&quot;HH:mm:ss&quot;,/(T| )\d\d:\d\d:\d\d/],[&quot;HH:mm&quot;,/(T| )\d\d:\d\d/],[&quot;HH&quot;,/(T| )\d\d/]],sd=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=aa(&quot;moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.&quot;,function(a){a._d=new Date(a._i+(a._useUTC?&quot; UTC&quot;:&quot;&quot;))}),H(0,[&quot;YY&quot;,2],0,function(){return this.year()%100}),H(0,[&quot;YYYY&quot;,4],0,&quot;year&quot;),H(0,[&quot;YYYYY&quot;,5],0,&quot;year&quot;),H(0,[&quot;YYYYYY&quot;,6,!0],0,&quot;year&quot;),z(&quot;year&quot;,&quot;y&quot;),N(&quot;Y&quot;,_c),N(&quot;YY&quot;,Wc,Sc),N(&quot;YYYY&quot;,Yc,Uc),N(&quot;YYYYY&quot;,Zc,Vc),N(&quot;YYYYYY&quot;,Zc,Vc),Q([&quot;YYYYY&quot;,&quot;YYYYYY&quot;],fd),Q(&quot;YYYY&quot;,function(b,c){c[fd]=2===b.length?a.parseTwoDigitYear(b):q(b)}),Q(&quot;YY&quot;,function(b,c){c[fd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return q(a)+(q(a)&gt;68?1900:2e3)};var td=C(&quot;FullYear&quot;,!1);H(&quot;w&quot;,[&quot;ww&quot;,2],&quot;wo&quot;,&quot;week&quot;),H(&quot;W&quot;,[&quot;WW&quot;,2],&quot;Wo&quot;,&quot;isoWeek&quot;),z(&quot;week&quot;,&quot;w&quot;),z(&quot;isoWeek&quot;,&quot;W&quot;),N(&quot;w&quot;,Wc),N(&quot;ww&quot;,Wc,Sc),N(&quot;W&quot;,Wc),N(&quot;WW&quot;,Wc,Sc),R([&quot;w&quot;,&quot;ww&quot;,&quot;W&quot;,&quot;WW&quot;],function(a,b,c,d){b[d.substr(0,1)]=q(a)});var ud={dow:0,doy:6};H(&quot;DDD&quot;,[&quot;DDDD&quot;,3],&quot;DDDo&quot;,&quot;dayOfYear&quot;),z(&quot;dayOfYear&quot;,&quot;DDD&quot;),N(&quot;DDD&quot;,Xc),N(&quot;DDDD&quot;,Tc),Q([&quot;DDD&quot;,&quot;DDDD&quot;],function(a,b,c){c._dayOfYear=q(a)}),a.ISO_8601=function(){};var vd=aa(&quot;moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return this&gt;a?this:a}),wd=aa(&quot;moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return a&gt;this?this:a});Ja(&quot;Z&quot;,&quot;:&quot;),Ja(&quot;ZZ&quot;,&quot;&quot;),N(&quot;Z&quot;,ad),N(&quot;ZZ&quot;,ad),Q([&quot;Z&quot;,&quot;ZZ&quot;],function(a,b,c){c._useUTC=!0,c._tzm=Ka(a)});var xd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var yd=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,zd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Ya.fn=Ha.prototype;var Ad=ab(1,&quot;add&quot;),Bd=ab(-1,&quot;subtract&quot;);a.defaultFormat=&quot;YYYY-MM-DDTHH:mm:ssZ&quot;;var Cd=aa(&quot;moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.&quot;,function(a){return void 0===a?this.localeData():this.locale(a)});H(0,[&quot;gg&quot;,2],0,function(){return this.weekYear()%100}),H(0,[&quot;GG&quot;,2],0,function(){return this.isoWeekYear()%100}),Db(&quot;gggg&quot;,&quot;weekYear&quot;),Db(&quot;ggggg&quot;,&quot;weekYear&quot;),Db(&quot;GGGG&quot;,&quot;isoWeekYear&quot;),Db(&quot;GGGGG&quot;,&quot;isoWeekYear&quot;),z(&quot;weekYear&quot;,&quot;gg&quot;),z(&quot;isoWeekYear&quot;,&quot;GG&quot;),N(&quot;G&quot;,_c),N(&quot;g&quot;,_c),N(&quot;GG&quot;,Wc,Sc),N(&quot;gg&quot;,Wc,Sc),N(&quot;GGGG&quot;,Yc,Uc),N(&quot;gggg&quot;,Yc,Uc),N(&quot;GGGGG&quot;,Zc,Vc),N(&quot;ggggg&quot;,Zc,Vc),R([&quot;gggg&quot;,&quot;ggggg&quot;,&quot;GGGG&quot;,&quot;GGGGG&quot;],function(a,b,c,d){b[d.substr(0,2)]=q(a)}),R([&quot;gg&quot;,&quot;GG&quot;],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),H(&quot;Q&quot;,0,0,&quot;quarter&quot;),z(&quot;quarter&quot;,&quot;Q&quot;),N(&quot;Q&quot;,Rc),Q(&quot;Q&quot;,function(a,b){b[gd]=3*(q(a)-1)}),H(&quot;D&quot;,[&quot;DD&quot;,2],&quot;Do&quot;,&quot;date&quot;),z(&quot;date&quot;,&quot;D&quot;),N(&quot;D&quot;,Wc),N(&quot;DD&quot;,Wc,Sc),N(&quot;Do&quot;,function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),Q([&quot;D&quot;,&quot;DD&quot;],hd),Q(&quot;Do&quot;,function(a,b){b[hd]=q(a.match(Wc)[0],10)});var Dd=C(&quot;Date&quot;,!0);H(&quot;d&quot;,0,&quot;do&quot;,&quot;day&quot;),H(&quot;dd&quot;,0,0,function(a){return this.localeData().weekdaysMin(this,a)}),H(&quot;ddd&quot;,0,0,function(a){return this.localeData().weekdaysShort(this,a)}),H(&quot;dddd&quot;,0,0,function(a){return this.localeData().weekdays(this,a)}),H(&quot;e&quot;,0,0,&quot;weekday&quot;),H(&quot;E&quot;,0,0,&quot;isoWeekday&quot;),z(&quot;day&quot;,&quot;d&quot;),z(&quot;weekday&quot;,&quot;e&quot;),z(&quot;isoWeekday&quot;,&quot;E&quot;),N(&quot;d&quot;,Wc),N(&quot;e&quot;,Wc),N(&quot;E&quot;,Wc),N(&quot;dd&quot;,cd),N(&quot;ddd&quot;,cd),N(&quot;dddd&quot;,cd),R([&quot;dd&quot;,&quot;ddd&quot;,&quot;dddd&quot;],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),R([&quot;d&quot;,&quot;e&quot;,&quot;E&quot;],function(a,b,c,d){b[d]=q(a)});var Ed=&quot;Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday&quot;.split(&quot;_&quot;),Fd=&quot;Sun_Mon_Tue_Wed_Thu_Fri_Sat&quot;.split(&quot;_&quot;),Gd=&quot;Su_Mo_Tu_We_Th_Fr_Sa&quot;.split(&quot;_&quot;);H(&quot;H&quot;,[&quot;HH&quot;,2],0,&quot;hour&quot;),H(&quot;h&quot;,[&quot;hh&quot;,2],0,function(){return this.hours()%12||12}),Sb(&quot;a&quot;,!0),Sb(&quot;A&quot;,!1),z(&quot;hour&quot;,&quot;h&quot;),N(&quot;a&quot;,Tb),N(&quot;A&quot;,Tb),N(&quot;H&quot;,Wc),N(&quot;h&quot;,Wc),N(&quot;HH&quot;,Wc,Sc),N(&quot;hh&quot;,Wc,Sc),Q([&quot;H&quot;,&quot;HH&quot;],id),Q([&quot;a&quot;,&quot;A&quot;],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),Q([&quot;h&quot;,&quot;hh&quot;],function(a,b,c){b[id]=q(a),j(c).bigHour=!0});var Hd=/[ap]\.?m?\.?/i,Id=C(&quot;Hours&quot;,!0);H(&quot;m&quot;,[&quot;mm&quot;,2],0,&quot;minute&quot;),z(&quot;minute&quot;,&quot;m&quot;),N(&quot;m&quot;,Wc),N(&quot;mm&quot;,Wc,Sc),Q([&quot;m&quot;,&quot;mm&quot;],jd);var Jd=C(&quot;Minutes&quot;,!1);H(&quot;s&quot;,[&quot;ss&quot;,2],0,&quot;second&quot;),z(&quot;second&quot;,&quot;s&quot;),N(&quot;s&quot;,Wc),N(&quot;ss&quot;,Wc,Sc),Q([&quot;s&quot;,&quot;ss&quot;],kd);var Kd=C(&quot;Seconds&quot;,!1);H(&quot;S&quot;,0,0,function(){return~~(this.millisecond()/100)}),H(0,[&quot;SS&quot;,2],0,function(){return~~(this.millisecond()/10)}),H(0,[&quot;SSS&quot;,3],0,&quot;millisecond&quot;),H(0,[&quot;SSSS&quot;,4],0,function(){return 10*this.millisecond()}),H(0,[&quot;SSSSS&quot;,5],0,function(){return 100*this.millisecond()}),H(0,[&quot;SSSSSS&quot;,6],0,function(){return 1e3*this.millisecond()}),H(0,[&quot;SSSSSSS&quot;,7],0,function(){return 1e4*this.millisecond()}),H(0,[&quot;SSSSSSSS&quot;,8],0,function(){return 1e5*this.millisecond()}),H(0,[&quot;SSSSSSSSS&quot;,9],0,function(){return 1e6*this.millisecond()}),z(&quot;millisecond&quot;,&quot;ms&quot;),N(&quot;S&quot;,Xc,Rc),N(&quot;SS&quot;,Xc,Sc),N(&quot;SSS&quot;,Xc,Tc);var Ld;for(Ld=&quot;SSSS&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)N(Ld,$c);for(Ld=&quot;S&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)Q(Ld,Wb);var Md=C(&quot;Milliseconds&quot;,!1);H(&quot;z&quot;,0,0,&quot;zoneAbbr&quot;),H(&quot;zz&quot;,0,0,&quot;zoneName&quot;);var Nd=n.prototype;Nd.add=Ad,Nd.calendar=cb,Nd.clone=db,Nd.diff=ib,Nd.endOf=ub,Nd.format=mb,Nd.from=nb,Nd.fromNow=ob,Nd.to=pb,Nd.toNow=qb,Nd.get=F,Nd.invalidAt=Cb,Nd.isAfter=eb,Nd.isBefore=fb,Nd.isBetween=gb,Nd.isSame=hb,Nd.isValid=Ab,Nd.lang=Cd,Nd.locale=rb,Nd.localeData=sb,Nd.max=wd,Nd.min=vd,Nd.parsingFlags=Bb,Nd.set=F,Nd.startOf=tb,Nd.subtract=Bd,Nd.toArray=yb,Nd.toObject=zb,Nd.toDate=xb,Nd.toISOString=lb,Nd.toJSON=lb,Nd.toString=kb,Nd.unix=wb,Nd.valueOf=vb,Nd.year=td,Nd.isLeapYear=ia,Nd.weekYear=Fb,Nd.isoWeekYear=Gb,Nd.quarter=Nd.quarters=Jb,Nd.month=Y,Nd.daysInMonth=Z,Nd.week=Nd.weeks=na,Nd.isoWeek=Nd.isoWeeks=oa,Nd.weeksInYear=Ib,Nd.isoWeeksInYear=Hb,Nd.date=Dd,Nd.day=Nd.days=Pb,Nd.weekday=Qb,Nd.isoWeekday=Rb,Nd.dayOfYear=qa,Nd.hour=Nd.hours=Id,Nd.minute=Nd.minutes=Jd,Nd.second=Nd.seconds=Kd,
Nd.millisecond=Nd.milliseconds=Md,Nd.utcOffset=Na,Nd.utc=Pa,Nd.local=Qa,Nd.parseZone=Ra,Nd.hasAlignedHourOffset=Sa,Nd.isDST=Ta,Nd.isDSTShifted=Ua,Nd.isLocal=Va,Nd.isUtcOffset=Wa,Nd.isUtc=Xa,Nd.isUTC=Xa,Nd.zoneAbbr=Xb,Nd.zoneName=Yb,Nd.dates=aa(&quot;dates accessor is deprecated. Use date instead.&quot;,Dd),Nd.months=aa(&quot;months accessor is deprecated. Use month instead&quot;,Y),Nd.years=aa(&quot;years accessor is deprecated. Use year instead&quot;,td),Nd.zone=aa(&quot;moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779&quot;,Oa);var Od=Nd,Pd={sameDay:&quot;[Today at] LT&quot;,nextDay:&quot;[Tomorrow at] LT&quot;,nextWeek:&quot;dddd [at] LT&quot;,lastDay:&quot;[Yesterday at] LT&quot;,lastWeek:&quot;[Last] dddd [at] LT&quot;,sameElse:&quot;L&quot;},Qd={LTS:&quot;h:mm:ss A&quot;,LT:&quot;h:mm A&quot;,L:&quot;MM/DD/YYYY&quot;,LL:&quot;MMMM D, YYYY&quot;,LLL:&quot;MMMM D, YYYY h:mm A&quot;,LLLL:&quot;dddd, MMMM D, YYYY h:mm A&quot;},Rd=&quot;Invalid date&quot;,Sd=&quot;%d&quot;,Td=/\d{1,2}/,Ud={future:&quot;in %s&quot;,past:&quot;%s ago&quot;,s:&quot;a few seconds&quot;,m:&quot;a minute&quot;,mm:&quot;%d minutes&quot;,h:&quot;an hour&quot;,hh:&quot;%d hours&quot;,d:&quot;a day&quot;,dd:&quot;%d days&quot;,M:&quot;a month&quot;,MM:&quot;%d months&quot;,y:&quot;a year&quot;,yy:&quot;%d years&quot;},Vd=s.prototype;Vd._calendar=Pd,Vd.calendar=_b,Vd._longDateFormat=Qd,Vd.longDateFormat=ac,Vd._invalidDate=Rd,Vd.invalidDate=bc,Vd._ordinal=Sd,Vd.ordinal=cc,Vd._ordinalParse=Td,Vd.preparse=dc,Vd.postformat=dc,Vd._relativeTime=Ud,Vd.relativeTime=ec,Vd.pastFuture=fc,Vd.set=gc,Vd.months=U,Vd._months=md,Vd.monthsShort=V,Vd._monthsShort=nd,Vd.monthsParse=W,Vd.week=ka,Vd._week=ud,Vd.firstDayOfYear=ma,Vd.firstDayOfWeek=la,Vd.weekdays=Lb,Vd._weekdays=Ed,Vd.weekdaysMin=Nb,Vd._weekdaysMin=Gd,Vd.weekdaysShort=Mb,Vd._weekdaysShort=Fd,Vd.weekdaysParse=Ob,Vd.isPM=Ub,Vd._meridiemParse=Hd,Vd.meridiem=Vb,w(&quot;en&quot;,{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===q(a%100/10)?&quot;th&quot;:1===b?&quot;st&quot;:2===b?&quot;nd&quot;:3===b?&quot;rd&quot;:&quot;th&quot;;return a+c}}),a.lang=aa(&quot;moment.lang is deprecated. Use moment.locale instead.&quot;,w),a.langData=aa(&quot;moment.langData is deprecated. Use moment.localeData instead.&quot;,y);var Wd=Math.abs,Xd=yc(&quot;ms&quot;),Yd=yc(&quot;s&quot;),Zd=yc(&quot;m&quot;),$d=yc(&quot;h&quot;),_d=yc(&quot;d&quot;),ae=yc(&quot;w&quot;),be=yc(&quot;M&quot;),ce=yc(&quot;y&quot;),de=Ac(&quot;milliseconds&quot;),ee=Ac(&quot;seconds&quot;),fe=Ac(&quot;minutes&quot;),ge=Ac(&quot;hours&quot;),he=Ac(&quot;days&quot;),ie=Ac(&quot;months&quot;),je=Ac(&quot;years&quot;),ke=Math.round,le={s:45,m:45,h:22,d:26,M:11},me=Math.abs,ne=Ha.prototype;ne.abs=oc,ne.add=qc,ne.subtract=rc,ne.as=wc,ne.asMilliseconds=Xd,ne.asSeconds=Yd,ne.asMinutes=Zd,ne.asHours=$d,ne.asDays=_d,ne.asWeeks=ae,ne.asMonths=be,ne.asYears=ce,ne.valueOf=xc,ne._bubble=tc,ne.get=zc,ne.milliseconds=de,ne.seconds=ee,ne.minutes=fe,ne.hours=ge,ne.days=he,ne.weeks=Bc,ne.months=ie,ne.years=je,ne.humanize=Fc,ne.toISOString=Gc,ne.toString=Gc,ne.toJSON=Gc,ne.locale=rb,ne.localeData=sb,ne.toIsoString=aa(&quot;toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)&quot;,Gc),ne.lang=Cd,H(&quot;X&quot;,0,0,&quot;unix&quot;),H(&quot;x&quot;,0,0,&quot;valueOf&quot;),N(&quot;x&quot;,_c),N(&quot;X&quot;,bd),Q(&quot;X&quot;,function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),Q(&quot;x&quot;,function(a,b,c){c._d=new Date(q(a))}),a.version=&quot;2.10.6&quot;,b(Da),a.fn=Od,a.min=Fa,a.max=Ga,a.utc=h,a.unix=Zb,a.months=jc,a.isDate=d,a.locale=w,a.invalid=l,a.duration=Ya,a.isMoment=o,a.weekdays=lc,a.parseZone=$b,a.localeData=y,a.isDuration=Ia,a.monthsShort=kc,a.weekdaysMin=nc,a.defineLocale=x,a.weekdaysShort=mc,a.normalizeUnits=A,a.relativeTimeThreshold=Ec;var oe=a;return oe});</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>2c64669f-f07e-4365-bf64-c559ace83004</id>
                <name>stopOnErrorCount</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122375</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to Stop a channel if it reaches a particular error count. 
	Also sends an alert message via another channel (this sends a sms via our monitoring system).

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function stopOnErrorCount(cid, errorCount) {
	var channelStatisticsController = Packages.com.mirth.connect.server.controllers.ChannelStatisticsController.getInstance();
	var channelStatusController = Packages.com.mirth.connect.server.controllers.ChannelStatusController.getInstance();
	var stats = channelStatisticsController.getStatistics(cid);
	// var numOfQueued = stats.queued;
	var numOfErrors = stats.error;

	if(numOfErrors &gt; errorCount )
	{
		//Stop Me
		channelStatusController.stopChannel(cid);
		//Alert msg sent to _SVHALERT channel
		var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
		var channelName = channelController.getDeployedChannelById(cid).getName();
		var alertmsg = &apos;mirth01 mirth_channel_status codeTemplate_stopOnErrorCount 0 &apos; +
					   &apos;channel &apos; + channelName + &apos; stopped&apos;;
		router.routeMessage(&apos;_SVHALERT&apos;, alertmsg);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>08044817-3504-4fc1-80ee-404870195151</id>
                <name>test</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122745</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.
	searchword
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function testfunc(arg1) {
	return arg1;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
            <name>WebPT-Mirth</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121602</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
                <name>Fix HL7v2 Node Order</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121804</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="4.0.0">
            <id>35f4c250-08b4-4e42-8e60-f85aa98dfe50</id>
            <name>WebPT-Translations</name>
            <revision>4</revision>
            <lastModified>
              <time>1703964939924</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="4.0.0">
                <id>be8f057b-2640-4613-b2e7-83326c59169c</id>
                <name>AddZeros</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122826</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function addZeroes(num) {
   return num.toLocaleString(&quot;en&quot;, {useGrouping: false, minimumFractionDigits: 2})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>51913864-7702-489a-b7c6-54992c12b19d</id>
                <name>FindLookupValueWithDefault</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122218</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithDefault ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        //obj.LeftValue = LeftValue;
        //obj.RightValue1 = DefaultValue1;
        //obj.RightValue2   = DefaultValue2; 
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);
            var result = pattern.test(LeftValue );

            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>c276be9f-c8f1-4dea-8df0-e000c6745271</id>
                <name>FindLookupValueWithInsuranceId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122080</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithInsuranceId ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);             
            var result = pattern.test(LeftValue );
	
            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>7d746da2-58c6-44eb-ad5c-c5bfd0a0c537</id>
                <name>UseExternalProblemID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122349</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalProblemID() {

if ([&apos;2804&apos;, &apos;2822&apos;].indexOf($(&apos;tenantId&apos;) + &apos;&apos;) &gt; -1) {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitexternalproblemid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitaccountnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="4.0.0">
                <id>07730e85-7f30-4ddf-90a4-78183c896ab5</id>
                <name>UseExternalVisitID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122192</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalVisitID() {
	
if ($(&apos;tenantId&apos;)  == &apos;9999&apos; ) {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitexternalvisitid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitvisitnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
  </channels>
</channelGroup>