<channelGroup version="3.12.0">
  <id>d5eeeb71-6eec-427a-9653-dcd0424e33c5</id>
  <name>AristaMd - SANMATEO</name>
  <revision>1</revision>
  <lastModified>
    <time>1650911275045</time>
    <timezone>GMT-06:00</timezone>
  </lastModified>
  <description></description>
  <channels>
    <channel version="3.12.0">
      <id>71368dee-5964-4073-bab7-ae0fd3ae90b0</id>
      <nextMetaDataId>9</nextMetaDataId>
      <name>SANMATEO_OUT_HTTP_JSON_TCP_SIU</name>
      <description></description>
      <revision>1</revision>
      <sourceConnector version="3.12.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="3.12.0">
          <pluginProperties>
            <com.mirth.connect.plugins.httpauth.basic.BasicHttpAuthProperties version="3.12.0">
  <authType>BASIC</authType>
              <realm>My Realm</realm>
              <credentials class="linked-hash-map">
    <entry>
      <string>admin</string>
                  <string>admin</string>
                </entry>
              </credentials>
              <isUseCredentialsVariable>false</isUseCredentialsVariable>
            </com.mirth.connect.plugins.httpauth.basic.BasicHttpAuthProperties>
          </pluginProperties>
          <listenerConnectorProperties version="3.12.0">
            <host>0.0.0.0</host>
            <port>8182</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="3.12.0">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>false</xmlBody>
          <parseMultipart>true</parseMultipart>
          <includeMetadata>false</includeMetadata>
          <binaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</binaryMimeTypes>
          <binaryMimeTypesRegex>true</binaryMimeTypesRegex>
          <responseContentType>text/plain</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode></responseStatusCode>
          <responseHeaders class="linked-hash-map"/>
          <useResponseHeadersVariable>false</useResponseHeadersVariable>
          <charset>UTF-8</charset>
          <contextPath>/sanmateo</contextPath>
          <timeout>30000</timeout>
          <staticResources/>
        </properties>
        <transformer version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.12.0">
              <name>channelId</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <variable>channelId</variable>
              <mapping></mapping>
              <defaultValue>connectorMessage.getChannelId()</defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Convert JSON to HL7v2 XML</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>/* 
Name: 	Convert JSON to HL7v2
Desc: 	Convert Scheduling JSON to HL7v2 SIU^S17
Created:	2020-11-21
Modified:
2020-11-23 JER - Modified to match the provided JSON file
*/
var scriptName= &quot;Convert JSON to HL7v2&quot;;
var debug= 1;

channelMap.put(scriptName+&quot;_DEBUG_msg&quot;,msg);
var objjson = JSON.stringify(msg);
// msg= msg.toString().replace(null,&quot;&quot;);
// var objjson = JSON.stringify(msg);
//logger.info(scriptName+&quot;::DEBUG:msg= &quot;+objjson);
channelMap.put(scriptName+&quot;_DEBUG_JSON&quot;,objjson);
channelMap.put(&quot;EventType&quot;, msg[&apos;Meta&apos;][&apos;EventType&apos;].toString());
channelMap.put(&quot;Source&quot;, &quot;AristaMD&quot;);
channelMap.put(&quot;SourceApp&quot;,&quot;AristaMD&quot;);
channelMap.put(&quot;Destination&quot;,&quot;San Mateo&quot;);
channelMap.put(&quot;DestinationApp&quot;,&quot;eCW&quot;);
channelMap.put(&quot;MessageID&quot;, msg[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;].toString());
channelMap.put(&quot;PatientID&quot;, msg[&apos;Patient&apos;][&apos;Identifiers&apos;][0][&apos;ID&apos;].toString());
channelMap.put(&quot;VisitNumber&quot;, msg[&apos;Visit&apos;][&apos;VisitNumber&apos;].toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64">ewoJIk1ldGEiOiB7CgkJIkRhdGFNb2RlbCI6IG51bGwsCgkJIkV2ZW50VHlwZSI6IG51bGwsCgkJIkV2ZW50RGF0ZVRpbWUiOiBudWxsLAoJCSJUZXN0IjogbnVsbCwKCQkiU291cmNlIjogewoJCQkiSUQiOiBudWxsLAoJCQkiTmFtZSI6IG51bGwKCQl9LAoJCSJEZXN0aW5hdGlvbnMiOiBbCgkJCXsKCQkJCSJJRCI6IG51bGwsCgkJCQkiTmFtZSI6IG51bGwKCQkJfQoJCV0sCgkJIk1lc3NhZ2UiOiB7CgkJCSJJRCI6IG51bGwKCQl9LAoJCSJUcmFuc21pc3Npb24iOiB7CgkJCSJJRCI6IG51bGwKCQl9LAoJCSJGYWNpbGl0eUNvZGUiOiBudWxsCgl9LAoJIlBhdGllbnQiOiB7CgkJIklkZW50aWZpZXJzIjogWwoJCQl7CgkJCQkiSUQiOiBudWxsLAoJCQkJIklEVHlwZSI6IG51bGwKCQkJfQoJCV0sCgkJIkRlbW9ncmFwaGljcyI6IHsKCQkJIkZpcnN0TmFtZSI6IG51bGwsCgkJCSJNaWRkbGVOYW1lIjogbnVsbCwKCQkJIkxhc3ROYW1lIjogbnVsbCwKCQkJIkRPQiI6IG51bGwsCgkJCSJTU04iOiBudWxsLAoJCQkiU2V4IjogbnVsbCwKCQkJIlJhY2UiOiBudWxsLAoJCQkiSXNIaXNwYW5pYyI6IG51bGwsCgkJCSJNYXJpdGFsU3RhdHVzIjogbnVsbCwKCQkJIklzRGVjZWFzZWQiOiBudWxsLAoJCQkiRGVhdGhEYXRlVGltZSI6IG51bGwsCgkJCSJQaG9uZU51bWJlciI6IHsKCQkJCSJIb21lIjogbnVsbCwKCQkJCSJPZmZpY2UiOiBudWxsLAoJCQkJIk1vYmlsZSI6IG51bGwKCQkJfSwKCQkJIkVtYWlsQWRkcmVzc2VzIjogW10sCgkJCSJMYW5ndWFnZSI6IG51bGwsCgkJCSJDaXRpemVuc2hpcCI6IFtdLAoJCQkiQWRkcmVzcyI6IHsKCQkJCSJTdHJlZXRBZGRyZXNzIjogbnVsbCwKCQkJCSJDaXR5IjogbnVsbCwKCQkJCSJTdGF0ZSI6IG51bGwsCgkJCQkiWklQIjogbnVsbCwKCQkJCSJDb3VudHkiOiBudWxsLAoJCQkJIkNvdW50cnkiOiBudWxsCgkJCX0KCQl9LAoJCSJOb3RlcyI6IFtdCgl9LAoJIkFwcG9pbnRtZW50SW5mbyI6IFsKCQl7CgkJCSJDb2RlIjogbnVsbCwKCQkJIkNvZGVzZXQiOiBudWxsLAoJCQkiRGVzY3JpcHRpb24iOiBudWxsLAoJCQkiVmFsdWUiOiBudWxsCgkJfQoJXSwKCSJWaXNpdCI6IHsKCQkiVmlzaXROdW1iZXIiOiBudWxsLAoJCSJBY2NvdW50TnVtYmVyIjogbnVsbCwKCQkiVmlzaXREYXRlVGltZSI6IG51bGwsCgkJIlBhdGllbnRDbGFzcyI6IG51bGwsCgkJIlN0YXR1cyI6IG51bGwsCgkJIkR1cmF0aW9uIjogbnVsbCwKCQkiUmVhc29uIjogbnVsbCwKCQkiQ2FuY2VsUmVhc29uIjogbnVsbCwKCQkiVHlwZSI6IG51bGwsCgkJIkluc3RydWN0aW9ucyI6IFtdLAoJCSJBdHRlbmRpbmdQcm92aWRlciI6IHsKCQkJIklEIjogbnVsbCwKCQkJIklEVHlwZSI6IG51bGwsCgkJCSJGaXJzdE5hbWUiOiBudWxsLAoJCQkiTGFzdE5hbWUiOiBudWxsLAoJCQkiQ3JlZGVudGlhbHMiOiBbXSwKCQkJIkFkZHJlc3MiOiB7CgkJCQkiU3RyZWV0QWRkcmVzcyI6IG51bGwsCgkJCQkiQ2l0eSI6IG51bGwsCgkJCQkiU3RhdGUiOiBudWxsLAoJCQkJIlpJUCI6IG51bGwsCgkJCQkiQ291bnR5IjogbnVsbCwKCQkJCSJDb3VudHJ5IjogbnVsbAoJCQl9LAoJCQkiRW1haWxBZGRyZXNzZXMiOiBbXSwKCQkJIlBob25lTnVtYmVyIjogewoJCQkJIk9mZmljZSI6IG51bGwKCQkJfSwKCQkJIkxvY2F0aW9uIjogewoJCQkJIlR5cGUiOiBudWxsLAoJCQkJIkZhY2lsaXR5IjogbnVsbCwKCQkJCSJEZXBhcnRtZW50IjogbnVsbCwKCQkJCSJSb29tIjogbnVsbAoJCQl9CgkJfSwKCQkiQ29uc3VsdGluZ1Byb3ZpZGVyIjogewoJCQkiSUQiOiBudWxsLAoJCQkiSURUeXBlIjogbnVsbCwKCQkJIkZpcnN0TmFtZSI6IG51bGwsCgkJCSJMYXN0TmFtZSI6IG51bGwsCgkJCSJDcmVkZW50aWFscyI6IFtdLAoJCQkiQWRkcmVzcyI6IHsKCQkJCSJTdHJlZXRBZGRyZXNzIjogbnVsbCwKCQkJCSJDaXR5IjogbnVsbCwKCQkJCSJTdGF0ZSI6IG51bGwsCgkJCQkiWklQIjogbnVsbCwKCQkJCSJDb3VudHkiOiBudWxsLAoJCQkJIkNvdW50cnkiOiBudWxsCgkJCX0sCgkJCSJFbWFpbEFkZHJlc3NlcyI6IFtdLAoJCQkiUGhvbmVOdW1iZXIiOiB7CgkJCQkiT2ZmaWNlIjogbnVsbAoJCQl9LAoJCQkiTG9jYXRpb24iOiB7CgkJCQkiVHlwZSI6IG51bGwsCgkJCQkiRmFjaWxpdHkiOiBudWxsLAoJCQkJIkRlcGFydG1lbnQiOiBudWxsLAoJCQkJIlJvb20iOiBudWxsCgkJCX0KCQl9LAoJCSJSZWZlcnJpbmdQcm92aWRlciI6IHsKCQkJIklEIjogbnVsbCwKCQkJIklEVHlwZSI6IG51bGwsCgkJCSJGaXJzdE5hbWUiOiBudWxsLAoJCQkiTGFzdE5hbWUiOiBudWxsLAoJCQkiQ3JlZGVudGlhbHMiOiBbXSwKCQkJIkFkZHJlc3MiOiB7CgkJCQkiU3RyZWV0QWRkcmVzcyI6IG51bGwsCgkJCQkiQ2l0eSI6IG51bGwsCgkJCQkiU3RhdGUiOiBudWxsLAoJCQkJIlpJUCI6IG51bGwsCgkJCQkiQ291bnR5IjogbnVsbCwKCQkJCSJDb3VudHJ5IjogbnVsbAoJCQl9LAoJCQkiRW1haWxBZGRyZXNzZXMiOiBbXSwKCQkJIlBob25lTnVtYmVyIjogewoJCQkJIk9mZmljZSI6IG51bGwKCQkJfSwKCQkJIkxvY2F0aW9uIjogewoJCQkJIlR5cGUiOiBudWxsLAoJCQkJIkZhY2lsaXR5IjogbnVsbCwKCQkJCSJEZXBhcnRtZW50IjogbnVsbCwKCQkJCSJSb29tIjogbnVsbAoJCQl9CgkJfSwKCQkiVmlzaXRQcm92aWRlciI6IHsKCQkJIklEIjogbnVsbCwKCQkJIklEVHlwZSI6IG51bGwsCgkJCSJGaXJzdE5hbWUiOiBudWxsLAoJCQkiTGFzdE5hbWUiOiBudWxsLAoJCQkiQ3JlZGVudGlhbHMiOiBbXSwKCQkJIkFkZHJlc3MiOiB7CgkJCQkiU3RyZWV0QWRkcmVzcyI6IG51bGwsCgkJCQkiQ2l0eSI6IG51bGwsCgkJCQkiU3RhdGUiOiBudWxsLAoJCQkJIlpJUCI6IG51bGwsCgkJCQkiQ291bnR5IjogbnVsbCwKCQkJCSJDb3VudHJ5IjogbnVsbAoJCQl9LAoJCQkiRW1haWxBZGRyZXNzZXMiOiBbXSwKCQkJIlBob25lTnVtYmVyIjogewoJCQkJIk9mZmljZSI6IG51bGwKCQkJfSwKCQkJIkxvY2F0aW9uIjogewoJCQkJIlR5cGUiOiBudWxsLAoJCQkJIkZhY2lsaXR5IjogbnVsbCwKCQkJCSJEZXBhcnRtZW50IjogbnVsbCwKCQkJCSJSb29tIjogbnVsbAoJCQl9CgkJfSwKCQkiTG9jYXRpb24iOiB7CgkJCSJUeXBlIjogbnVsbCwKCQkJIkZhY2lsaXR5IjogbnVsbCwKCQkJIkRlcGFydG1lbnQiOiBudWxsLAoJCQkiUm9vbSI6IG51bGwKCQl9LAoJCSJBZGRpdGlvbmFsU3RhZmYiOiBbXSwKCQkiRGlhZ25vc2VzIjogW10sCgkJIkVxdWlwbWVudCI6IFtdCgl9Cn0=</inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.12.0">
          <elements/>
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.12.0">
          <metaDataId>5</metaDataId>
          <name>FileWriter - JSON to HL7 Scheduled Cancellation</name>
          <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <scheme>FILE</scheme>
            <host>C:/HL7/SIU/OUT</host>
            <outputPattern>SIU_${SYSTIME}.hl7</outputPattern>
            <anonymous>true</anonymous>
            <username>anonymous</username>
            <password>anonymous</password>
            <timeout>10000</timeout>
            <keepConnectionOpen>false</keepConnectionOpen>
            <maxIdleTime>0</maxIdleTime>
            <secure>true</secure>
            <passive>true</passive>
            <validateConnection>true</validateConnection>
            <outputAppend>false</outputAppend>
            <errorOnExists>false</errorOnExists>
            <temporary>false</temporary>
            <binary>false</binary>
            <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
            <template>${message.encodedData}</template>
          </properties>
          <transformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Convert Scheduling JSON to HL7v2 SIU^S17</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>/* 
Name: 	Convert JSON to HL7v2
Desc: 	Convert Scheduling JSON to HL7v2 SIU^S17
Created:	2020-11-21
Modified:
2020-12-13 jer - Modified to evaluate the PhoneNumber.Mobile object if undefined and if value is null
2020-12-13 jer - Modified Gender leveraging slice function to result single gender character
2020-12-13 jer - Commented out setting NTE.2.1 and NTE.2.2 sequence elements
2020-12-13 jer - Modified to pull from the VisitDateTime and reformat ISO datetime to datetime YYYYMMDDHHMMSS and not the appointment datetime from NTE segment
2020-12-13 jer - Modified SCH.3, SCH.4 element value to set static value of null transposed to &quot;&quot; blank value
2020-12-12 jer - Modified to evaluate list of patient identifiers
2020-11-23 JER - Modified to match the provided JSON file
*/
var scriptName= &quot;Convert JSON to HL7v2&quot;;
var debug= 0;

channelMap.put(scriptName+&quot;_DEBUG_msg&quot;,msg);
var objjson = JSON.stringify(msg);
channelMap.put(scriptName+&quot;_DEBUG_JSON&quot;,objjson);

// MSH Segment
/*
tmp[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;]= jsonNulltoEmptyString(&quot;SourceName&quot;, msg[&apos;Meta&apos;][&apos;Source&apos;][&apos;Name&apos;], debug);
tmp[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;]= jsonNulltoEmptyString(&quot;SourceID&quot;, msg[&apos;Meta&apos;][&apos;Source&apos;][&apos;ID&apos;], debug);
tmp[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;]= jsonNulltoEmptyString(&quot;DestinationName&quot;, msg[&apos;Meta&apos;][&apos;Destinations&apos;][0][&apos;Name&apos;], debug);
tmp[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;]= jsonNulltoEmptyString(&quot;DestinationID&quot;, msg[&apos;Meta&apos;][&apos;Destinations&apos;][0][&apos;ID&apos;], debug);
*/
tmp[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;]= $(&apos;Source&apos;);
tmp[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;]= $(&apos;SourceApp&apos;);
tmp[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;]= $(&apos;Destination&apos;);
tmp[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;]= $(&apos;DestinationApp&apos;);

// Message Date Time
var strMessageDateTime= jsonNulltoEmptyString(&quot;EventDateTime&quot;, msg[&apos;Meta&apos;][&apos;EventDateTime&apos;], debug);
if(strMessageDateTime.toString().indexOf(&quot;T&quot;)&gt;-1) {
	var strModifiedMessageDateTime = strMessageDateTime.toString().substr(0,19).replace(/[^0-9]/g, &quot;&quot;);
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strModifiedMessageDateTime: &quot;+strModifiedMessageDateTime); }
} else {
	var strModifiedMessageDateTime= strMessageDateTime;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strModifiedMessageDateTime: &quot;+strModifiedMessageDateTime); }
}
tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;]= strModifiedMessageDateTime;

// if(msg[&apos;Meta&apos;][&apos;DataModel&apos;].toString().indexOf(&quot;^&quot;)) {
msg[&apos;Meta&apos;][&apos;DataModel&apos;]= jsonNulltoEmptyString(&quot;DataModel&quot;, msg[&apos;Meta&apos;][&apos;DataModel&apos;], debug);
if(msg[&apos;Meta&apos;][&apos;DataModel&apos;].toString().indexOf(&quot;Scheduling&quot;)&gt;-1) {
	tmp[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;]= &quot;SIU&quot;;
}
msg[&apos;Meta&apos;][&apos;EventType&apos;]= jsonNulltoEmptyString(&quot;EventType&quot;, msg[&apos;Meta&apos;][&apos;EventType&apos;], debug);
if(msg[&apos;Meta&apos;][&apos;EventType&apos;].toString().indexOf(&quot;Cancel&quot;)&gt;-1) {
	tmp[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;]= &quot;S17&quot;;
}
//tmp[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]= UUIDGenerator.getUUID().toString();
var strMessageControlId= jsonNulltoEmptyString(&quot;MessageControlId&quot;, msg[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;], debug);
if((typeof(strMessageControlId) == &apos;undefined&apos;) || (strMessageControlId.length&lt;1)) {
	tmp[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]= UUIDGenerator.getUUID().toString();
} else {
	tmp[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]= jsonNulltoEmptyString(&quot;MessageControlId&quot;, msg[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;], debug);
}

var strProcessingId= jsonNulltoEmptyString(&quot;EventType&quot;, msg[&apos;Meta&apos;][&apos;EventType&apos;], debug);
if(strProcessingId== &quot;false&quot;) {
	tmp[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;]= &apos;P&apos;;
} else {
	tmp[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;]= &apos;T&apos;;
}
tmp[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;]= &quot;2.3&quot;;
channelMap.put(&apos;MSH&apos;,tmp[&apos;MSH&apos;]);

// SCH Segment
if(typeof(tmp[&apos;SCH&apos;]) == &apos;undefined&apos;) {
	var sch = new XML(&lt;SCH&gt;&lt;/SCH&gt;);
}
tmp.appendChild(sch);

tmp[&apos;SCH&apos;][&apos;SCH.2&apos;][&apos;SCH.2.1&apos;]= jsonNulltoEmptyString(&quot;VisitNumber&quot;, msg[&apos;Visit&apos;][&apos;VisitNumber&apos;], debug);
// 2020-12-13 jer - Modified SCH.3 element value to set static value of null
// tmp[&apos;SCH&apos;][&apos;SCH.3&apos;][&apos;SCH.3.1&apos;]= jsonNulltoEmptyString(&quot;OccurrenceNumber&quot;, msg[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;], debug);
tmp[&apos;SCH&apos;][&apos;SCH.3&apos;][&apos;SCH.3.1&apos;]= jsonNulltoEmptyString(&quot;OccurrenceNumber&quot;,null, debug);
// 2020-12-13 jer - Modified SCH.4 element value to set static value of null
// tmp[&apos;SCH&apos;][&apos;SCH.4&apos;][&apos;SCH.4.1&apos;]= jsonNulltoEmptyString(&quot;PlacerGroupNumber&quot;, msg[&apos;Meta&apos;][&apos;Transmission&apos;][&apos;ID&apos;], debug);
tmp[&apos;SCH&apos;][&apos;SCH.4&apos;][&apos;SCH.4.1&apos;]= jsonNulltoEmptyString(&quot;PlacerOrderNumber&quot;,null, debug);

tmp[&apos;SCH&apos;][&apos;SCH.7&apos;][&apos;SCH.7.2&apos;]= jsonNulltoEmptyString(&quot;AppointmentReason&quot;, msg[&apos;Visit&apos;][&apos;Reason&apos;], debug);
tmp[&apos;SCH&apos;][&apos;SCH.8&apos;][&apos;SCH.8.1&apos;]= jsonNulltoEmptyString(&quot;AppointmentType&quot;, msg[&apos;Visit&apos;][&apos;Reason&apos;], debug);
tmp[&apos;SCH&apos;][&apos;SCH.9&apos;][&apos;SCH.9.1&apos;]= jsonNulltoEmptyString(&quot;AppointmentDuration&quot;, msg[&apos;Visit&apos;][&apos;Duration&apos;], debug);
tmp[&apos;SCH&apos;][&apos;SCH.10&apos;][&apos;SCH.10.1&apos;]= &quot;MIN&quot;;

// 2020-12-13 jer - Modified to pull from the VisitDateTime and reformat ISO datetime to datetime YYYYMMDDHHMMSS
// Appointment DateTime pulling from the Visit DateTime or pull from the Appointment DateTime specified in the Appointment Note
var strVisitDateTime= jsonNulltoEmptyString(&quot;VisitDateTime&quot;, msg[&apos;Visit&apos;][&apos;VisitDateTime&apos;], debug);
if(strVisitDateTime.toString().indexOf(&quot;T&quot;)&gt;-1) {
	var strModifiedVisitDateTime = strVisitDateTime.toString().substr(0,19).replace(/[^0-9]/g, &quot;&quot;);
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strModifiedVisitDateTime: &quot;+strModifiedVisitDateTime); }
} else {
	var strModifiedVisitDateTime= strVisitDateTime;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strModifiedMessageDateTime: &quot;+strModifiedVisitDateTime); }
}
tmp[&apos;SCH&apos;][&apos;SCH.11&apos;][&apos;SCH.11.4&apos;][&apos;SCH.11.4.1&apos;]= strModifiedVisitDateTime;
// tmp[&apos;SCH&apos;][&apos;SCH.11&apos;][&apos;SCH.11.4&apos;][&apos;SCH.11.4.1&apos;]= convertMDYtoHL7DateTime(jsonNulltoEmptyString(&quot;VisitDateTime&quot;, msg[&apos;Visit&apos;][&apos;VisitDateTime&apos;], debug), debug);

tmp[&apos;SCH&apos;][&apos;SCH.20&apos;][&apos;SCH.20.1&apos;]= jsonNulltoEmptyString(&quot;Instructions&quot;,msg[&apos;Visit&apos;][&apos;Instructions&apos;][0], debug);
tmp[&apos;SCH&apos;][&apos;SCH.25&apos;][&apos;SCH.25.1&apos;]= &quot;CHK&quot;;
tmp[&apos;SCH&apos;][&apos;SCH.28&apos;][&apos;SCH.28.1&apos;]= 2;
channelMap.put(&apos;SCH&apos;,tmp[&apos;SCH&apos;]);

// NTE Segment - Appointment Information
var strNote= msg[&apos;AppointmentInfo&apos;][0][&apos;Value&apos;].toString();
// if(debug&gt;0) { logger.info(scriptName+&quot;:DEBUG:: strNote: &quot;+strNote); }

if(strNote.toString().indexOf(&apos;\n&apos;)&gt;-1) {
	strNote= strNote.replace(/[\n]/g,&quot;|&quot;);
	lstNote= strNote.split(&quot;|&quot;);
	if(debug&gt;0) { 
		for (i= 0; i&lt;lstNote.length; i++) {
			logger.info(scriptName+&quot;:DEBUG:: lstNote[&quot;+i+&quot;]: &quot;+lstNote[i].toString()); 
		}
	}
}

for (i= 0; i&lt;lstNote.length; i++) {
	if(debug&gt;0) { logger.info(scriptName+&quot;:DEBUG:: lstNote[&quot;+i+&quot;]: &quot;+lstNote[i]); }
	if(typeof(tmp[&apos;NTE&apos;][i]) == &apos;undefined&apos;) {
		var nte = new XML(&lt;NTE&gt;&lt;/NTE&gt;);
	}
	tmp.appendChild(nte);

	tmp[&apos;NTE&apos;][i][&apos;NTE.1&apos;]= i+1;
	// 2020-12-13 jer - Commented out setting NTE.2.1 and NTE.2.2 sequence elements
	// tmp[&apos;NTE&apos;][i][&apos;NTE.2&apos;][&apos;NTE.2.1&apos;]= jsonNulltoEmptyString(&quot;AppointmentCode&quot;, msg[&apos;AppointmentInfo&apos;][0][&apos;Code&apos;], debug);
	// tmp[&apos;NTE&apos;][i][&apos;NTE.2&apos;][&apos;NTE.2.2&apos;]= jsonNulltoEmptyString(&quot;AppointmentCodeSet&quot;, msg[&apos;AppointmentInfo&apos;][0][&apos;Codeset&apos;], debug);
	tmp[&apos;NTE&apos;][i][&apos;NTE.3&apos;][&apos;NTE.3.1&apos;]= lstNote[i];
	var element= lstNote[i];
	if(typeof(element) !== &apos;undefined&apos; || element.toString().length&gt;1) {
		if(element.toString().indexOf(&quot;Appointment Date:&quot;)&gt;-1) {
			var appointmentDateTime= element.split(&quot;: &quot;)[1];
			if(debug&gt;0) { logger.info(scriptName+&quot;:DEBUG:: appointmentDateTime: &quot;+appointmentDateTime); }
		} 
	}
}

/* 2020-12-13 jer - Commented out pulling the AppointmentDateTime from the NTE segment 
logger.info(scriptName+&quot;:DEBUG:: appointmentDateTime: &quot;+appointmentDateTime);
// set the SCH appointment DateTime with the DateTime from the Note NTE 
if(typeof(appointmentDateTime) !== &apos;undefined&apos; &amp;&amp; appointmentDateTime.toString().length&gt;0) { 
	appointmentDateTime= convertMDYtoHL7DateTime(appointmentDateTime, debug);
	logger.info(scriptName+&quot;:DEBUG:: appointmentDateTime: &quot;+appointmentDateTime);
	tmp[&apos;SCH&apos;][&apos;SCH.11&apos;][&apos;SCH.11.4&apos;][&apos;SCH.11.4.1&apos;]= appointmentDateTime;
}
*/

channelMap.put(&apos;NTE&apos;,tmp[&apos;NTE&apos;]);

// PID Segment
if(typeof(tmp[&apos;PID&apos;]) == &apos;undefined&apos;) {
	var pid = new XML(&lt;PID&gt;&lt;/PID&gt;);
}
tmp.appendChild(pid);

// 2020-12-10 jer - Modified to evaluate list of patient identifiers
// Declare Identifiers Array
var identifiers= [];
// Declare Identifier Object
var identifier= {};

if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG msg.Patient.Identifiers: &quot;+msg[&apos;Patient&apos;][&apos;Identifiers&apos;]+&quot; typeof: &quot;+typeof(msg[&apos;Patient&apos;][&apos;Identifiers&apos;])+&quot; string: &quot;+JSON.stringify(msg[&apos;Patient&apos;][&apos;Identifiers&apos;])+&quot; length: &quot;+msg[&apos;Patient&apos;][&apos;Identifiers&apos;].length); }

// Evaluate msg.Patient.Identifiers
if(typeof(msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) !== &apos;undefined&apos; || msg[&apos;Patient&apos;][&apos;Identifiers&apos;].length&gt;0) {
	var intIdentifiers= 0;
	for each(element in msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) {
		if (debug&gt;0) { logger.info(scriptName+&quot;::DEBUG element: &quot;+element+&quot; typeof: &quot;+typeof(element)+&quot; string: &quot;+JSON.stringify(element)); }
		if((element[&apos;IDType&apos;]) !== &apos;undefined&apos; || element[&apos;IDType&apos;].toString().length&gt;0) {
			var columnName= element[&apos;IDType&apos;];
		} else {
			if($(&apos;Source&apos;) !== &apos;undefined&apos;) {
				var columnName= $(&apos;Source&apos;);
			}
		} // end if
		identifier[columnName]= element[&apos;ID&apos;];
		// Add object to array
		identifiers.push(identifier);

		if(debug&gt;0) {
			logger.info(scriptName+&quot;::DEBUG PID3.1 Identifier[&quot;+intIdentifiers+&quot;]: &quot;+JSON.stringify(identifier));
			logger.info(scriptName+&quot;::DEBUG PID.3.1 Identifiers[&quot;+intIdentifiers+&quot;]: &quot;+JSON.stringify(identifiers));
		} // end if
		
		intIdentifiers++;
	} // end for each
} // end if

if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG identifiers: &quot;+identifiers+&quot; typeof: &quot;+typeof(identifiers)+&quot; string: &quot;+JSON.stringify(identifiers)+&quot; length: &quot;+identifiers.length); }

var strIdentifiers= &quot;&quot;;
for (var i= 1;i&lt;=identifiers.length;i++) {
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG identifiers: &quot;+JSON.stringify(identifiers)); }
	var strIdentifier= JSON.stringify(identifiers);
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strIdentifier[&quot;+i+&quot;]: &quot;+strIdentifier); }
	var lstIdentifier= strIdentifier.replace(/[^0-9a-zA-Z:_]/g,&quot;&quot;).split(&quot;:&quot;);
	
	if(i&lt;identifiers.length) {
		strIdentifiers+= lstIdentifier[1]+&quot;^^^&quot;+lstIdentifier[0]+&quot;~&quot;;
	} else {
		strIdentifiers+= lstIdentifier[i]+&quot;^^^&quot;+lstIdentifier[0];
	}
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strIdentifers[&quot;+i+&quot;]: &quot;+strIdentifiers); }
} // end for

// tmp[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;]= msg[&apos;Patient&apos;][&apos;Identifiers&apos;][0][&apos;ID&apos;].toString();
tmp[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;]= strIdentifiers;
tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;]= msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;FirstName&apos;].toString();
tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;]= msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;LastName&apos;].toString();
tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;]= jsonNulltoEmptyString(&quot;MiddleName&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;MiddleName&apos;], debug);
// tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;]= msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;MiddleName&apos;].toString();
tmp[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;]= msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;DOB&apos;].toString().replace(/[^0-9]/g, &quot;&quot;);
// 2020-12-13 jer - Modified Gender leveraging slice function to result single gender character
tmp[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;]= msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Sex&apos;].toString().slice(0,1);
tmp[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;]= jsonNulltoEmptyString(&quot;Race&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;], debug);
tmp[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;]= jsonNulltoEmptyString(&quot;StreetAddress&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;StreetAddress&apos;], debug);
tmp[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;]= jsonNulltoEmptyString(&quot;City&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;City&apos;], debug);
tmp[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.4&apos;]= jsonNulltoEmptyString(&quot;State&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;State&apos;], debug);
tmp[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;]= jsonNulltoEmptyString(&quot;ZipCode&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;ZIP&apos;], debug);
tmp[&apos;PID&apos;][&apos;PID.12&apos;][&apos;PID.12.1&apos;]= jsonNulltoEmptyString(&quot;County&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;County&apos;], debug);
tmp[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.6&apos;]= jsonNulltoEmptyString(&quot;Country&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;Country&apos;], debug);

// Home Phone and Email Address - PID.13[0] instance
tmp[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.1&apos;]= jsonNulltoEmptyString(&quot;Home PhoneNumber&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Home&apos;], debug);
tmp[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.4&apos;]= jsonNulltoEmptyString(&quot;Home EmailAddress&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;EmailAddresses&apos;], debug);

// Mobile Phone - PID.13[1] instance
if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG PhoneNumber.Mobile: &quot;+msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Mobile&apos;]+&quot; typeof: &quot;+typeof(msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Mobile&apos;])); }
// 2020-12-13 jer - Modified to evaluate the PhoneNumber.Mobile object if undefined and if value is null
if(typeof(msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Mobile&apos;]) !== &quot;undefined&quot; &amp;&amp; msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Mobile&apos;] !== null) {
	tmp[&apos;PID&apos;][&apos;PID.13&apos;][1][&apos;PID.13.1&apos;]= jsonNulltoEmptyString(&quot;Mobile PhoneNumber&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Mobile&apos;], debug);
}

// Office Phone
tmp[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.1&apos;]= jsonNulltoEmptyString(&quot;Office PhoneNumber&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Office&apos;], debug);
tmp[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.1&apos;]= jsonNulltoEmptyString(&quot;Language&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Language&apos;], debug);
tmp[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;]= jsonNulltoEmptyString(&quot;MartialStatus&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;MaritalStatus&apos;], debug);

// Account and Visit Numbers
var strAccountNumber= jsonNulltoEmptyString(&quot;AccountNumber&quot;, msg[&apos;Visit&apos;][&apos;AccountNumber&apos;], debug);
var strVisitNumber=  jsonNulltoEmptyString(&quot;VisitNumber&quot;, msg[&apos;Visit&apos;][&apos;VisitNumber&apos;], debug);

if(strAccountNumber.toString().length&lt;1 || strAccountNumber== null) {
	tmp[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;]= strVisitNumber;
	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG PID.18.1: &quot;+strVisitNumber+&quot; PID: &quot;+tmp[&apos;PID&apos;]);
	}
} else {
	tmp[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;]= strAccountNumber;
	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG PID.18.1: &quot;+strAccountNumber+&quot; PID: &quot;+tmp[&apos;PID&apos;]);
	}
}

tmp[&apos;PID&apos;][&apos;PID.26&apos;][&apos;PID.26.1&apos;]= jsonNulltoEmptyString(&quot;Citizenship&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Citizenship&apos;], debug);
channelMap.put(&apos;PID&apos;,tmp[&apos;PID&apos;]);

// PV1 Segment
//
//if(msg[&apos;Meta&apos;][&apos;EventType&apos;].toString().indexOf(&quot;Cancel&quot;)) {
//	var metaScheduleStatus= &quot;CA&quot;;
//} else {
//	var metaScheduleStatus= &quot;NW&quot;;
//}
if(typeof(tmp[&apos;PV1&apos;]) == &apos;undefined&apos;) {
	var pv1 = new XML(&lt;PV1&gt;&lt;/PV1&gt;);
}
tmp.appendChild(pv1);

msg[&apos;Visit&apos;][&apos;PatientClass&apos;]= jsonNulltoEmptyString(&quot;PatientClass&quot;, msg[&apos;Visit&apos;][&apos;PatientClass&apos;], debug); 
if(msg[&apos;Visit&apos;][&apos;PatientClass&apos;].toString().length&gt;0) {
	tmp[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;]= msg[&apos;Visit&apos;][&apos;PatientClass&apos;].toString();
} else {
	tmp[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;]= &quot;Outpatient&quot;;
}
tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;]= jsonNulltoEmptyString(&quot;Location Dept&quot;,msg[&apos;Visit&apos;][&apos;Location&apos;][&apos;Department&apos;], debug);
tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;]= jsonNulltoEmptyString(&quot;Location Room&quot;, msg[&apos;Visit&apos;][&apos;Location&apos;][&apos;Room&apos;], debug);
tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;]= jsonNulltoEmptyString(&quot;Location Facility&quot;,msg[&apos;Visit&apos;][&apos;Location&apos;][&apos;Facility&apos;], debug);
tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.6&apos;]= jsonNulltoEmptyString(&quot;Location Type&quot;,msg[&apos;Visit&apos;][&apos;Location&apos;][&apos;Type&apos;], debug);

// Evaluate msg.Visit.AttendingProvider - PV1.7
if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG AttendingProvider: &quot;+msg[&apos;Visit&apos;][&apos;AttendingProvider&apos;]+&quot; typeof: &quot;+typeof(msg[&apos;Visit&apos;][&apos;AttendingProvider&apos;])+&quot; string: &quot;+JSON.stringify(msg[&apos;Visit&apos;][&apos;AttendingProvider&apos;])+&quot; length: &quot;+msg[&apos;Visit&apos;][&apos;AttendingProvider&apos;].length); }
if(typeof(msg[&apos;Visit&apos;][&apos;AttendingProvider&apos;]) !== &apos;undefined&apos; &amp;&amp; msg[&apos;Visit&apos;][&apos;AttendingProvider&apos;] !== null) {

	var jsonAttendingProvider= msg[&apos;Visit&apos;][&apos;AttendingProvider&apos;];
	var attendingProvider= JSON.stringify(msg[&apos;Visit&apos;][&apos;AttendingProvider&apos;]);
	var strAttendingProvider= &quot;&quot;;

	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG JSON stringify JSON AttendingProvider Object: &quot;+jsonAttendingProvider+&quot; typeof: &quot;+typeof(jsonAttendingProvider)+&quot; length: &quot;+jsonAttendingProvider.length);
		logger.info(scriptName+&quot;::DEBUG JSON stringify JSON AttendingProvider string: &quot;+attendingProvider+&quot; typeof: &quot;+typeof(attendingProvider));
	}

	//  Redox: sjoseph^Joseph^Susan^^^^^^ecw_username^^^^^
	if(jsonAttendingProvider.ID !== null) { strAttendingProvider+= jsonAttendingProvider.ID+&quot;^&quot;; } else { strAttendingProvider+= &quot;^&quot;; } 
	if(jsonAttendingProvider.LastName !== null) { strAttendingProvider+= jsonAttendingProvider.LastName+&quot;^&quot;; } else { strAttendingProvider+= &quot;^&quot;; }
	if(jsonAttendingProvider.FirstName !== null) { strAttendingProvider+= jsonAttendingProvider.FirstName+&quot;^^^^^^&quot;; } else { strAttendingProvider+= &quot;^^^^^^&quot;; }
	if(jsonAttendingProvider.IDType !== null) { strAttendingProvider+= jsonAttendingProvider.IDType+&quot;^^^^^&quot;; } else { strAttendingProvider+= &quot;^^^^^&quot;; }

	if(debug&gt;0) { 
		logger.info(scriptName+&quot;::DEBUG strAttendingProvider: &quot;+strAttendingProvider); 
	}
	if(strAttendingProvider.toString().length&gt;13) {
		tmp[&apos;PV1&apos;][&apos;PV1.7&apos;]= checkElementIfUndefined(strAttendingProvider, debug);
	}
}

// Evaluate msg.Visit.ConsultingProvider - PV1.9
if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG ConsultingProvider: &quot;+msg[&apos;Visit&apos;][&apos;ConsultingProvider&apos;]+&quot; typeof: &quot;+typeof(msg[&apos;Visit&apos;][&apos;ConsultingProvider&apos;])+&quot; string: &quot;+JSON.stringify(msg[&apos;Visit&apos;][&apos;ConsultingProvider&apos;])+&quot; length: &quot;+msg[&apos;Visit&apos;][&apos;AttendingProvider&apos;].length); }
if(typeof(msg[&apos;Visit&apos;][&apos;ConsultingProvider&apos;]) !== &apos;undefined&apos; &amp;&amp; msg[&apos;Visit&apos;][&apos;ConsultingProvider&apos;] !== null) {
	var jsonConsultingProvider= msg[&apos;Visit&apos;][&apos;ConsultingProvider&apos;];
	var ConsultingProvider= JSON.stringify(msg[&apos;Visit&apos;][&apos;ConsultingProvider&apos;]);
	var strConsultingProvider= &quot;&quot;;

	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG JSON stringify JSON ConsultingProvider Object: &quot;+jsonConsultingProvider+&quot; typeof: &quot;+typeof(jsonConsultingProvider)+&quot; length: &quot;+jsonConsultingProvider.length);
		logger.info(scriptName+&quot;::DEBUG JSON stringify JSON ConsultingProvider string: &quot;+ConsultingProvider+&quot; typeof: &quot;+typeof(ConsultingProvider));
	}

	//  Redox: sjoseph^Joseph^Susan^^^^^^ecw_username^^^^^
	if(jsonConsultingProvider.ID !== null) { strConsultingProvider+= jsonConsultingProvider.ID+&quot;^&quot;; } else { strConsultingProvider+= &quot;^&quot;; } 
	if(jsonConsultingProvider.LastName !== null) { strConsultingProvider+= jsonConsultingProvider.LastName+&quot;^&quot;; } else { strConsultingProvider+= &quot;^&quot;; }
	if(jsonConsultingProvider.FirstName !== null) { strConsultingProvider+= jsonConsultingProvider.FirstName+&quot;^^^^^^&quot;; } else { strConsultingProvider+= &quot;^^^^^^&quot;; }
	if(jsonConsultingProvider.IDType !== null) { strConsultingProvider+= jsonConsultingProvider.IDType+&quot;^^^^^&quot;; } else { strConsultingProvider+= &quot;^^^^^&quot;; }

	if(debug&gt;0) { 
		logger.info(scriptName+&quot;::DEBUG strConsultingProvider: &quot;+strConsultingProvider); 
	}
	if(strConsultingProvider.toString().length&gt;13) {
		tmp[&apos;PV1&apos;][&apos;PV1.9&apos;]= checkElementIfUndefined(strConsultingProvider, debug);
	}
}

// Evaluate msg.Visit.ReferringProvider - PV1.8
if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG ReferringProvider: &quot;+msg[&apos;Visit&apos;][&apos;ReferringProvider&apos;]+&quot; typeof: &quot;+typeof(msg[&apos;Visit&apos;][&apos;ReferringProvider&apos;])+&quot; string: &quot;+JSON.stringify(msg[&apos;Visit&apos;][&apos;ReferringProvider&apos;])+&quot; length: &quot;+msg[&apos;Visit&apos;][&apos;AttendingProvider&apos;].length); }
if(typeof(msg[&apos;Visit&apos;][&apos;ReferringProvider&apos;]) !== &apos;undefined&apos; &amp;&amp; msg[&apos;Visit&apos;][&apos;ReferringProvider&apos;] !== null) {
	var jsonReferringProvider= msg[&apos;Visit&apos;][&apos;ReferringProvider&apos;];
	var referringProvider= JSON.stringify(msg[&apos;Visit&apos;][&apos;ReferringProvider&apos;]);
	var strReferringProvider= &quot;&quot;;

	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG JSON stringify JSON ReferringProvider Object: &quot;+jsonReferringProvider+&quot; typeof: &quot;+typeof(jsonReferringProvider)+&quot; length: &quot;+jsonReferringProvider.length);
		logger.info(scriptName+&quot;::DEBUG JSON stringify JSON ReferringProvider string: &quot;+referringProvider+&quot; typeof: &quot;+typeof(referringProvider));
	}

	//  Redox: sjoseph^Joseph^Susan^^^^^^ecw_username^^^^^
	if(jsonReferringProvider.ID !== null) { strReferringProvider+= jsonReferringProvider.ID+&quot;^&quot;; } else { strReferringProvider+= &quot;^&quot;; } 
	if(jsonReferringProvider.LastName !== null) { strReferringProvider+= jsonReferringProvider.LastName+&quot;^&quot;; } else { strReferringProvider+= &quot;^&quot;; }
	if(jsonReferringProvider.FirstName !== null) { strReferringProvider+= jsonReferringProvider.FirstName+&quot;^^^^^^&quot;; } else { strReferringProvider+= &quot;^^^^^^&quot;; }
	if(jsonReferringProvider.IDType !== null) { strReferringProvider+= jsonReferringProvider.IDType+&quot;^^^^^&quot;; } else { strReferringProvider+= &quot;^^^^^&quot;; }

	if(debug&gt;0) { 
		logger.info(scriptName+&quot;::DEBUG strReferringProvider: &quot;+strReferringProvider); 
	}
	if(strReferringProvider.toString().length&gt;13) {
		tmp[&apos;PV1&apos;][&apos;PV1.8&apos;]= checkElementIfUndefined(strReferringProvider, debug);
	}

}

tmp[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;]= strVisitNumber;
channelMap.put(&apos;PV1&apos;,tmp[&apos;PV1&apos;]);

// RGS Segment

if(typeof(tmp[&apos;RGS&apos;]) == &apos;undefined&apos;) {
	var rgs = new XML(&lt;RGS&gt;&lt;/RGS&gt;);
}
tmp.appendChild(rgs);

tmp[&apos;RGS&apos;][&apos;RGS.1&apos;][&apos;RGS.1.1&apos;]= &quot;1&quot;;
channelMap.put(&apos;RGS&apos;,tmp[&apos;RGS&apos;]);

channelMap.put(scriptName+&quot;_DEBUG_tmp&quot;,tmp);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">ewoJIk1ldGEiOiB7CgkJIkRhdGFNb2RlbCI6IG51bGwsCgkJIkV2ZW50VHlwZSI6IG51bGwsCgkJIkV2ZW50RGF0ZVRpbWUiOiBudWxsLAoJCSJUZXN0IjogbnVsbCwKCQkiU291cmNlIjogewoJCQkiSUQiOiBudWxsLAoJCQkiTmFtZSI6IG51bGwKCQl9LAoJCSJEZXN0aW5hdGlvbnMiOiBbCgkJCXsKCQkJCSJJRCI6IG51bGwsCgkJCQkiTmFtZSI6IG51bGwKCQkJfQoJCV0sCgkJIk1lc3NhZ2UiOiB7CgkJCSJJRCI6IG51bGwKCQl9LAoJCSJUcmFuc21pc3Npb24iOiB7CgkJCSJJRCI6IG51bGwKCQl9LAoJCSJGYWNpbGl0eUNvZGUiOiBudWxsCgl9LAoJIlBhdGllbnQiOiB7CgkJIklkZW50aWZpZXJzIjogWwoJCQl7CgkJCQkiSUQiOiBudWxsLAoJCQkJIklEVHlwZSI6IG51bGwKCQkJfQoJCV0sCgkJIkRlbW9ncmFwaGljcyI6IHsKCQkJIkZpcnN0TmFtZSI6IG51bGwsCgkJCSJNaWRkbGVOYW1lIjogbnVsbCwKCQkJIkxhc3ROYW1lIjogbnVsbCwKCQkJIkRPQiI6IG51bGwsCgkJCSJTU04iOiBudWxsLAoJCQkiU2V4IjogbnVsbCwKCQkJIlJhY2UiOiBudWxsLAoJCQkiSXNIaXNwYW5pYyI6IG51bGwsCgkJCSJNYXJpdGFsU3RhdHVzIjogbnVsbCwKCQkJIklzRGVjZWFzZWQiOiBudWxsLAoJCQkiRGVhdGhEYXRlVGltZSI6IG51bGwsCgkJCSJQaG9uZU51bWJlciI6IHsKCQkJCSJIb21lIjogbnVsbCwKCQkJCSJPZmZpY2UiOiBudWxsLAoJCQkJIk1vYmlsZSI6IG51bGwKCQkJfSwKCQkJIkVtYWlsQWRkcmVzc2VzIjogW10sCgkJCSJMYW5ndWFnZSI6IG51bGwsCgkJCSJDaXRpemVuc2hpcCI6IFtdLAoJCQkiQWRkcmVzcyI6IHsKCQkJCSJTdHJlZXRBZGRyZXNzIjogbnVsbCwKCQkJCSJDaXR5IjogbnVsbCwKCQkJCSJTdGF0ZSI6IG51bGwsCgkJCQkiWklQIjogbnVsbCwKCQkJCSJDb3VudHkiOiBudWxsLAoJCQkJIkNvdW50cnkiOiBudWxsCgkJCX0KCQl9LAoJCSJOb3RlcyI6IFtdCgl9LAoJIkFwcG9pbnRtZW50SW5mbyI6IFsKCQl7CgkJCSJDb2RlIjogbnVsbCwKCQkJIkNvZGVzZXQiOiBudWxsLAoJCQkiRGVzY3JpcHRpb24iOiBudWxsLAoJCQkiVmFsdWUiOiBudWxsCgkJfQoJXSwKCSJWaXNpdCI6IHsKCQkiVmlzaXROdW1iZXIiOiBudWxsLAoJCSJBY2NvdW50TnVtYmVyIjogbnVsbCwKCQkiVmlzaXREYXRlVGltZSI6IG51bGwsCgkJIlBhdGllbnRDbGFzcyI6IG51bGwsCgkJIlN0YXR1cyI6IG51bGwsCgkJIkR1cmF0aW9uIjogbnVsbCwKCQkiUmVhc29uIjogbnVsbCwKCQkiQ2FuY2VsUmVhc29uIjogbnVsbCwKCQkiVHlwZSI6IG51bGwsCgkJIkluc3RydWN0aW9ucyI6IFtdLAoJCSJBdHRlbmRpbmdQcm92aWRlciI6IHsKCQkJIklEIjogbnVsbCwKCQkJIklEVHlwZSI6IG51bGwsCgkJCSJGaXJzdE5hbWUiOiBudWxsLAoJCQkiTGFzdE5hbWUiOiBudWxsLAoJCQkiQ3JlZGVudGlhbHMiOiBbXSwKCQkJIkFkZHJlc3MiOiB7CgkJCQkiU3RyZWV0QWRkcmVzcyI6IG51bGwsCgkJCQkiQ2l0eSI6IG51bGwsCgkJCQkiU3RhdGUiOiBudWxsLAoJCQkJIlpJUCI6IG51bGwsCgkJCQkiQ291bnR5IjogbnVsbCwKCQkJCSJDb3VudHJ5IjogbnVsbAoJCQl9LAoJCQkiRW1haWxBZGRyZXNzZXMiOiBbXSwKCQkJIlBob25lTnVtYmVyIjogewoJCQkJIk9mZmljZSI6IG51bGwKCQkJfSwKCQkJIkxvY2F0aW9uIjogewoJCQkJIlR5cGUiOiBudWxsLAoJCQkJIkZhY2lsaXR5IjogbnVsbCwKCQkJCSJEZXBhcnRtZW50IjogbnVsbCwKCQkJCSJSb29tIjogbnVsbAoJCQl9CgkJfSwKCQkiQ29uc3VsdGluZ1Byb3ZpZGVyIjogewoJCQkiSUQiOiBudWxsLAoJCQkiSURUeXBlIjogbnVsbCwKCQkJIkZpcnN0TmFtZSI6IG51bGwsCgkJCSJMYXN0TmFtZSI6IG51bGwsCgkJCSJDcmVkZW50aWFscyI6IFtdLAoJCQkiQWRkcmVzcyI6IHsKCQkJCSJTdHJlZXRBZGRyZXNzIjogbnVsbCwKCQkJCSJDaXR5IjogbnVsbCwKCQkJCSJTdGF0ZSI6IG51bGwsCgkJCQkiWklQIjogbnVsbCwKCQkJCSJDb3VudHkiOiBudWxsLAoJCQkJIkNvdW50cnkiOiBudWxsCgkJCX0sCgkJCSJFbWFpbEFkZHJlc3NlcyI6IFtdLAoJCQkiUGhvbmVOdW1iZXIiOiB7CgkJCQkiT2ZmaWNlIjogbnVsbAoJCQl9LAoJCQkiTG9jYXRpb24iOiB7CgkJCQkiVHlwZSI6IG51bGwsCgkJCQkiRmFjaWxpdHkiOiBudWxsLAoJCQkJIkRlcGFydG1lbnQiOiBudWxsLAoJCQkJIlJvb20iOiBudWxsCgkJCX0KCQl9LAoJCSJSZWZlcnJpbmdQcm92aWRlciI6IHsKCQkJIklEIjogbnVsbCwKCQkJIklEVHlwZSI6IG51bGwsCgkJCSJGaXJzdE5hbWUiOiBudWxsLAoJCQkiTGFzdE5hbWUiOiBudWxsLAoJCQkiQ3JlZGVudGlhbHMiOiBbXSwKCQkJIkFkZHJlc3MiOiB7CgkJCQkiU3RyZWV0QWRkcmVzcyI6IG51bGwsCgkJCQkiQ2l0eSI6IG51bGwsCgkJCQkiU3RhdGUiOiBudWxsLAoJCQkJIlpJUCI6IG51bGwsCgkJCQkiQ291bnR5IjogbnVsbCwKCQkJCSJDb3VudHJ5IjogbnVsbAoJCQl9LAoJCQkiRW1haWxBZGRyZXNzZXMiOiBbXSwKCQkJIlBob25lTnVtYmVyIjogewoJCQkJIk9mZmljZSI6IG51bGwKCQkJfSwKCQkJIkxvY2F0aW9uIjogewoJCQkJIlR5cGUiOiBudWxsLAoJCQkJIkZhY2lsaXR5IjogbnVsbCwKCQkJCSJEZXBhcnRtZW50IjogbnVsbCwKCQkJCSJSb29tIjogbnVsbAoJCQl9CgkJfSwKCQkiVmlzaXRQcm92aWRlciI6IHsKCQkJIklEIjogbnVsbCwKCQkJIklEVHlwZSI6IG51bGwsCgkJCSJGaXJzdE5hbWUiOiBudWxsLAoJCQkiTGFzdE5hbWUiOiBudWxsLAoJCQkiQ3JlZGVudGlhbHMiOiBbXSwKCQkJIkFkZHJlc3MiOiB7CgkJCQkiU3RyZWV0QWRkcmVzcyI6IG51bGwsCgkJCQkiQ2l0eSI6IG51bGwsCgkJCQkiU3RhdGUiOiBudWxsLAoJCQkJIlpJUCI6IG51bGwsCgkJCQkiQ291bnR5IjogbnVsbCwKCQkJCSJDb3VudHJ5IjogbnVsbAoJCQl9LAoJCQkiRW1haWxBZGRyZXNzZXMiOiBbXSwKCQkJIlBob25lTnVtYmVyIjogewoJCQkJIk9mZmljZSI6IG51bGwKCQkJfSwKCQkJIkxvY2F0aW9uIjogewoJCQkJIlR5cGUiOiBudWxsLAoJCQkJIkZhY2lsaXR5IjogbnVsbCwKCQkJCSJEZXBhcnRtZW50IjogbnVsbCwKCQkJCSJSb29tIjogbnVsbAoJCQl9CgkJfSwKCQkiTG9jYXRpb24iOiB7CgkJCSJUeXBlIjogbnVsbCwKCQkJIkZhY2lsaXR5IjogbnVsbCwKCQkJIkRlcGFydG1lbnQiOiBudWxsLAoJCQkiUm9vbSI6IG51bGwKCQl9LAoJCSJBZGRpdGlvbmFsU3RhZmYiOiBbXSwKCQkiRGlhZ25vc2VzIjogW10sCgkJIkVxdWlwbWVudCI6IFtdCgl9Cn0=</inboundTemplate>
            <outboundTemplate encoding="base64">TVNIfF5+XCZ8fHx8fHx8fHx8fHx8fHx8fHx8Cg==</outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.12.0">
                <name>Accept message if &quot;msg[&apos;Meta&apos;][&apos;EventType&apos;].toString()&quot; equals &quot;Cancel&quot;</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <field>msg[&apos;Meta&apos;][&apos;EventType&apos;].toString()</field>
                <condition>EQUALS</condition>
                <values>
                  <string>&quot;Cancel&quot;</string>
                </values>
              </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
            </elements>
          </filter>
          <transportName>File Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>7</metaDataId>
          <name>TCP Sender Scheduled Cancellation</name>
          <properties class="com.mirth.connect.connectors.tcp.TcpDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <transmissionModeProperties class="com.mirth.connect.plugins.mllpmode.MLLPModeProperties">
              <pluginPointName>MLLP</pluginPointName>
              <startOfMessageBytes>0B</startOfMessageBytes>
              <endOfMessageBytes>1C0D</endOfMessageBytes>
              <useMLLPv2>false</useMLLPv2>
              <ackBytes>06</ackBytes>
              <nackBytes>15</nackBytes>
              <maxRetries>2</maxRetries>
            </transmissionModeProperties>
            <serverMode>false</serverMode>
            <remoteAddress>127.0.0.1</remoteAddress>
            <remotePort>6660</remotePort>
            <overrideLocalBinding>false</overrideLocalBinding>
            <localAddress>0.0.0.0</localAddress>
            <localPort>0</localPort>
            <sendTimeout>5000</sendTimeout>
            <bufferSize>65536</bufferSize>
            <keepConnectionOpen>false</keepConnectionOpen>
            <checkRemoteHost>false</checkRemoteHost>
            <responseTimeout>5000</responseTimeout>
            <ignoreResponse>false</ignoreResponse>
            <queueOnResponseTimeout>true</queueOnResponseTimeout>
            <dataTypeBinary>false</dataTypeBinary>
            <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
            <template>${message.encodedData}</template>
          </properties>
          <transformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Convert Cancel Scheduling JSON to HL7v2 SIU^S17</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>/* 
Name: 	Convert JSON to HL7v2
Desc: 	Convert Scheduling JSON to HL7v2 SIU^S17
Created:	2020-11-21
Modified:
2020-12-13 jer - Modified to evaluate the PhoneNumber.Mobile object if undefined and if value is null
2020-12-13 jer - Modified Gender leveraging slice function to result single gender character
2020-12-13 jer - Commented out setting NTE.2.1 and NTE.2.2 sequence elements
2020-12-13 jer - Modified to pull from the VisitDateTime and reformat ISO datetime to datetime YYYYMMDDHHMMSS and not the appointment datetime from NTE segment
2020-12-13 jer - Modified SCH.3, SCH.4 element value to set static value of null transposed to &quot;&quot; blank value
2020-12-12 jer - Modified to evaluate list of patient identifiers
2020-11-23 JER - Modified to match the provided JSON file
*/
var scriptName= &quot;Convert JSON to HL7v2&quot;;
var debug= 0;

channelMap.put(scriptName+&quot;_DEBUG_msg&quot;,msg);
var objjson = JSON.stringify(msg);
channelMap.put(scriptName+&quot;_DEBUG_JSON&quot;,objjson);

// MSH Segment
/*
tmp[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;]= jsonNulltoEmptyString(&quot;SourceName&quot;, msg[&apos;Meta&apos;][&apos;Source&apos;][&apos;Name&apos;], debug);
tmp[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;]= jsonNulltoEmptyString(&quot;SourceID&quot;, msg[&apos;Meta&apos;][&apos;Source&apos;][&apos;ID&apos;], debug);
tmp[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;]= jsonNulltoEmptyString(&quot;DestinationName&quot;, msg[&apos;Meta&apos;][&apos;Destinations&apos;][0][&apos;Name&apos;], debug);
tmp[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;]= jsonNulltoEmptyString(&quot;DestinationID&quot;, msg[&apos;Meta&apos;][&apos;Destinations&apos;][0][&apos;ID&apos;], debug);
*/
tmp[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;]= $(&apos;Source&apos;);
tmp[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;]= $(&apos;SourceApp&apos;);
tmp[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;]= $(&apos;Destination&apos;);
tmp[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;]= $(&apos;DestinationApp&apos;);

// Message Date Time
var strMessageDateTime= jsonNulltoEmptyString(&quot;EventDateTime&quot;, msg[&apos;Meta&apos;][&apos;EventDateTime&apos;], debug);
if(strMessageDateTime.toString().indexOf(&quot;T&quot;)&gt;-1) {
	var strModifiedMessageDateTime = strMessageDateTime.toString().substr(0,19).replace(/[^0-9]/g, &quot;&quot;);
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strModifiedMessageDateTime: &quot;+strModifiedMessageDateTime); }
} else {
	var strModifiedMessageDateTime= strMessageDateTime;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strModifiedMessageDateTime: &quot;+strModifiedMessageDateTime); }
}
tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;]= strModifiedMessageDateTime;

// if(msg[&apos;Meta&apos;][&apos;DataModel&apos;].toString().indexOf(&quot;^&quot;)) {
msg[&apos;Meta&apos;][&apos;DataModel&apos;]= jsonNulltoEmptyString(&quot;DataModel&quot;, msg[&apos;Meta&apos;][&apos;DataModel&apos;], debug);
if(msg[&apos;Meta&apos;][&apos;DataModel&apos;].toString().indexOf(&quot;Scheduling&quot;)&gt;-1) {
	tmp[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;]= &quot;SIU&quot;;
}
msg[&apos;Meta&apos;][&apos;EventType&apos;]= jsonNulltoEmptyString(&quot;EventType&quot;, msg[&apos;Meta&apos;][&apos;EventType&apos;], debug);
if(msg[&apos;Meta&apos;][&apos;EventType&apos;].toString().indexOf(&quot;Cancel&quot;)&gt;-1) {
	tmp[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;]= &quot;S17&quot;;
}
//tmp[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]= UUIDGenerator.getUUID().toString();
var strMessageControlId= jsonNulltoEmptyString(&quot;MessageControlId&quot;, msg[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;], debug);
if((typeof(strMessageControlId) == &apos;undefined&apos;) || (strMessageControlId.length&lt;1)) {
	tmp[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]= UUIDGenerator.getUUID().toString();
} else {
	tmp[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]= jsonNulltoEmptyString(&quot;MessageControlId&quot;, msg[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;], debug);
}

var strProcessingId= jsonNulltoEmptyString(&quot;EventType&quot;, msg[&apos;Meta&apos;][&apos;EventType&apos;], debug);
if(strProcessingId== &quot;false&quot;) {
	tmp[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;]= &apos;P&apos;;
} else {
	tmp[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;]= &apos;T&apos;;
}
tmp[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;]= &quot;2.3&quot;;
channelMap.put(&apos;MSH&apos;,tmp[&apos;MSH&apos;]);

// SCH Segment
if(typeof(tmp[&apos;SCH&apos;]) == &apos;undefined&apos;) {
	var sch = new XML(&lt;SCH&gt;&lt;/SCH&gt;);
}
tmp.appendChild(sch);

tmp[&apos;SCH&apos;][&apos;SCH.2&apos;][&apos;SCH.2.1&apos;]= jsonNulltoEmptyString(&quot;VisitNumber&quot;, msg[&apos;Visit&apos;][&apos;VisitNumber&apos;], debug);
// 2020-12-13 jer - Modified SCH.3 element value to set static value of null
// tmp[&apos;SCH&apos;][&apos;SCH.3&apos;][&apos;SCH.3.1&apos;]= jsonNulltoEmptyString(&quot;OccurrenceNumber&quot;, msg[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;], debug);
tmp[&apos;SCH&apos;][&apos;SCH.3&apos;][&apos;SCH.3.1&apos;]= jsonNulltoEmptyString(&quot;OccurrenceNumber&quot;,null, debug);
// 2020-12-13 jer - Modified SCH.4 element value to set static value of null
// tmp[&apos;SCH&apos;][&apos;SCH.4&apos;][&apos;SCH.4.1&apos;]= jsonNulltoEmptyString(&quot;PlacerGroupNumber&quot;, msg[&apos;Meta&apos;][&apos;Transmission&apos;][&apos;ID&apos;], debug);
tmp[&apos;SCH&apos;][&apos;SCH.4&apos;][&apos;SCH.4.1&apos;]= jsonNulltoEmptyString(&quot;PlacerOrderNumber&quot;,null, debug);

tmp[&apos;SCH&apos;][&apos;SCH.7&apos;][&apos;SCH.7.2&apos;]= jsonNulltoEmptyString(&quot;AppointmentReason&quot;, msg[&apos;Visit&apos;][&apos;Reason&apos;], debug);
tmp[&apos;SCH&apos;][&apos;SCH.8&apos;][&apos;SCH.8.1&apos;]= jsonNulltoEmptyString(&quot;AppointmentType&quot;, msg[&apos;Visit&apos;][&apos;Reason&apos;], debug);
tmp[&apos;SCH&apos;][&apos;SCH.9&apos;][&apos;SCH.9.1&apos;]= jsonNulltoEmptyString(&quot;AppointmentDuration&quot;, msg[&apos;Visit&apos;][&apos;Duration&apos;], debug);
tmp[&apos;SCH&apos;][&apos;SCH.10&apos;][&apos;SCH.10.1&apos;]= &quot;MIN&quot;;

// 2020-12-13 jer - Modified to pull from the VisitDateTime and reformat ISO datetime to datetime YYYYMMDDHHMMSS
// Appointment DateTime pulling from the Visit DateTime or pull from the Appointment DateTime specified in the Appointment Note
var strVisitDateTime= jsonNulltoEmptyString(&quot;VisitDateTime&quot;, msg[&apos;Visit&apos;][&apos;VisitDateTime&apos;], debug);
if(strVisitDateTime.toString().indexOf(&quot;T&quot;)&gt;-1) {
	var strModifiedVisitDateTime = strVisitDateTime.toString().substr(0,19).replace(/[^0-9]/g, &quot;&quot;);
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strModifiedVisitDateTime: &quot;+strModifiedVisitDateTime); }
} else {
	var strModifiedVisitDateTime= strVisitDateTime;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strModifiedMessageDateTime: &quot;+strModifiedVisitDateTime); }
}
tmp[&apos;SCH&apos;][&apos;SCH.11&apos;][&apos;SCH.11.4&apos;][&apos;SCH.11.4.1&apos;]= strModifiedVisitDateTime;
// tmp[&apos;SCH&apos;][&apos;SCH.11&apos;][&apos;SCH.11.4&apos;][&apos;SCH.11.4.1&apos;]= convertMDYtoHL7DateTime(jsonNulltoEmptyString(&quot;VisitDateTime&quot;, msg[&apos;Visit&apos;][&apos;VisitDateTime&apos;], debug), debug);

tmp[&apos;SCH&apos;][&apos;SCH.20&apos;][&apos;SCH.20.1&apos;]= jsonNulltoEmptyString(&quot;Instructions&quot;,msg[&apos;Visit&apos;][&apos;Instructions&apos;][0], debug);
tmp[&apos;SCH&apos;][&apos;SCH.25&apos;][&apos;SCH.25.1&apos;]= &quot;CHK&quot;;
tmp[&apos;SCH&apos;][&apos;SCH.28&apos;][&apos;SCH.28.1&apos;]= 2;
channelMap.put(&apos;SCH&apos;,tmp[&apos;SCH&apos;]);

// NTE Segment - Appointment Information
var strNote= msg[&apos;AppointmentInfo&apos;][0][&apos;Value&apos;].toString();
// if(debug&gt;0) { logger.info(scriptName+&quot;:DEBUG:: strNote: &quot;+strNote); }

if(strNote.toString().indexOf(&apos;\n&apos;)&gt;-1) {
	strNote= strNote.replace(/[\n]/g,&quot;|&quot;);
	lstNote= strNote.split(&quot;|&quot;);
	if(debug&gt;0) { 
		for (i= 0; i&lt;lstNote.length; i++) {
			logger.info(scriptName+&quot;:DEBUG:: lstNote[&quot;+i+&quot;]: &quot;+lstNote[i].toString()); 
		}
	}
}

for (i= 0; i&lt;lstNote.length; i++) {
	if(debug&gt;0) { logger.info(scriptName+&quot;:DEBUG:: lstNote[&quot;+i+&quot;]: &quot;+lstNote[i]); }
	if(typeof(tmp[&apos;NTE&apos;][i]) == &apos;undefined&apos;) {
		var nte = new XML(&lt;NTE&gt;&lt;/NTE&gt;);
	}
	tmp.appendChild(nte);

	tmp[&apos;NTE&apos;][i][&apos;NTE.1&apos;]= i+1;
	// 2020-12-13 jer - Commented out setting NTE.2.1 and NTE.2.2 sequence elements
	// tmp[&apos;NTE&apos;][i][&apos;NTE.2&apos;][&apos;NTE.2.1&apos;]= jsonNulltoEmptyString(&quot;AppointmentCode&quot;, msg[&apos;AppointmentInfo&apos;][0][&apos;Code&apos;], debug);
	// tmp[&apos;NTE&apos;][i][&apos;NTE.2&apos;][&apos;NTE.2.2&apos;]= jsonNulltoEmptyString(&quot;AppointmentCodeSet&quot;, msg[&apos;AppointmentInfo&apos;][0][&apos;Codeset&apos;], debug);
	tmp[&apos;NTE&apos;][i][&apos;NTE.3&apos;][&apos;NTE.3.1&apos;]= lstNote[i];
	var element= lstNote[i];
	if(typeof(element) !== &apos;undefined&apos; || element.toString().length&gt;1) {
		if(element.toString().indexOf(&quot;Appointment Date:&quot;)&gt;-1) {
			var appointmentDateTime= element.split(&quot;: &quot;)[1];
			if(debug&gt;0) { logger.info(scriptName+&quot;:DEBUG:: appointmentDateTime: &quot;+appointmentDateTime); }
		} 
	}
}

/* 2020-12-13 jer - Commented out pulling the AppointmentDateTime from the NTE segment 
logger.info(scriptName+&quot;:DEBUG:: appointmentDateTime: &quot;+appointmentDateTime);
// set the SCH appointment DateTime with the DateTime from the Note NTE 
if(typeof(appointmentDateTime) !== &apos;undefined&apos; &amp;&amp; appointmentDateTime.toString().length&gt;0) { 
	appointmentDateTime= convertMDYtoHL7DateTime(appointmentDateTime, debug);
	logger.info(scriptName+&quot;:DEBUG:: appointmentDateTime: &quot;+appointmentDateTime);
	tmp[&apos;SCH&apos;][&apos;SCH.11&apos;][&apos;SCH.11.4&apos;][&apos;SCH.11.4.1&apos;]= appointmentDateTime;
}
*/

channelMap.put(&apos;NTE&apos;,tmp[&apos;NTE&apos;]);

// PID Segment
if(typeof(tmp[&apos;PID&apos;]) == &apos;undefined&apos;) {
	var pid = new XML(&lt;PID&gt;&lt;/PID&gt;);
}
tmp.appendChild(pid);

// 2020-12-10 jer - Modified to evaluate list of patient identifiers
// Declare Identifiers Array
var identifiers= [];
// Declare Identifier Object
var identifier= {};

if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG msg.Patient.Identifiers: &quot;+msg[&apos;Patient&apos;][&apos;Identifiers&apos;]+&quot; typeof: &quot;+typeof(msg[&apos;Patient&apos;][&apos;Identifiers&apos;])+&quot; string: &quot;+JSON.stringify(msg[&apos;Patient&apos;][&apos;Identifiers&apos;])+&quot; length: &quot;+msg[&apos;Patient&apos;][&apos;Identifiers&apos;].length); }

// Evaluate msg.Patient.Identifiers
if(typeof(msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) !== &apos;undefined&apos; || msg[&apos;Patient&apos;][&apos;Identifiers&apos;].length&gt;0) {
	var intIdentifiers= 0;
	for each(element in msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) {
		if (debug&gt;0) { logger.info(scriptName+&quot;::DEBUG element: &quot;+element+&quot; typeof: &quot;+typeof(element)+&quot; string: &quot;+JSON.stringify(element)); }
		if((element[&apos;IDType&apos;]) !== &apos;undefined&apos; || element[&apos;IDType&apos;].toString().length&gt;0) {
			var columnName= element[&apos;IDType&apos;];
		} else {
			if($(&apos;Source&apos;) !== &apos;undefined&apos;) {
				var columnName= $(&apos;Source&apos;);
			}
		} // end if
		identifier[columnName]= element[&apos;ID&apos;];
		// Add object to array
		identifiers.push(identifier);

		if(debug&gt;0) {
			logger.info(scriptName+&quot;::DEBUG PID3.1 Identifier[&quot;+intIdentifiers+&quot;]: &quot;+JSON.stringify(identifier));
			logger.info(scriptName+&quot;::DEBUG PID.3.1 Identifiers[&quot;+intIdentifiers+&quot;]: &quot;+JSON.stringify(identifiers));
		} // end if
		
		intIdentifiers++;
	} // end for each
} // end if

if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG identifiers: &quot;+identifiers+&quot; typeof: &quot;+typeof(identifiers)+&quot; string: &quot;+JSON.stringify(identifiers)+&quot; length: &quot;+identifiers.length); }

var strIdentifiers= &quot;&quot;;
for (var i= 1;i&lt;=identifiers.length;i++) {
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG identifiers: &quot;+JSON.stringify(identifiers)); }
	var strIdentifier= JSON.stringify(identifiers);
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strIdentifier[&quot;+i+&quot;]: &quot;+strIdentifier); }
	var lstIdentifier= strIdentifier.replace(/[^0-9a-zA-Z:_]/g,&quot;&quot;).split(&quot;:&quot;);
	
	if(i&lt;identifiers.length) {
		strIdentifiers+= lstIdentifier[1]+&quot;^^^&quot;+lstIdentifier[0]+&quot;~&quot;;
	} else {
		strIdentifiers+= lstIdentifier[i]+&quot;^^^&quot;+lstIdentifier[0];
	}
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strIdentifers[&quot;+i+&quot;]: &quot;+strIdentifiers); }
} // end for

// tmp[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;]= msg[&apos;Patient&apos;][&apos;Identifiers&apos;][0][&apos;ID&apos;].toString();
tmp[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;]= strIdentifiers;
tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;]= msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;FirstName&apos;].toString();
tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;]= msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;LastName&apos;].toString();
tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;]= jsonNulltoEmptyString(&quot;MiddleName&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;MiddleName&apos;], debug);
// tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;]= msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;MiddleName&apos;].toString();
tmp[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;]= msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;DOB&apos;].toString().replace(/[^0-9]/g, &quot;&quot;);
// 2020-12-13 jer - Modified Gender leveraging slice function to result single gender character
tmp[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;]= msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Sex&apos;].toString().slice(0,1);
tmp[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;]= jsonNulltoEmptyString(&quot;Race&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;], debug);
tmp[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;]= jsonNulltoEmptyString(&quot;StreetAddress&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;StreetAddress&apos;], debug);
tmp[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;]= jsonNulltoEmptyString(&quot;City&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;City&apos;], debug);
tmp[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.4&apos;]= jsonNulltoEmptyString(&quot;State&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;State&apos;], debug);
tmp[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;]= jsonNulltoEmptyString(&quot;ZipCode&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;ZIP&apos;], debug);
tmp[&apos;PID&apos;][&apos;PID.12&apos;][&apos;PID.12.1&apos;]= jsonNulltoEmptyString(&quot;County&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;County&apos;], debug);
tmp[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.6&apos;]= jsonNulltoEmptyString(&quot;Country&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;Country&apos;], debug);

// Home Phone and Email Address - PID.13[0] instance
tmp[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.1&apos;]= jsonNulltoEmptyString(&quot;Home PhoneNumber&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Home&apos;], debug);
tmp[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.4&apos;]= jsonNulltoEmptyString(&quot;Home EmailAddress&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;EmailAddresses&apos;], debug);

// Mobile Phone - PID.13[1] instance
if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG PhoneNumber.Mobile: &quot;+msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Mobile&apos;]+&quot; typeof: &quot;+typeof(msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Mobile&apos;])); }
// 2020-12-13 jer - Modified to evaluate the PhoneNumber.Mobile object if undefined and if value is null
if(typeof(msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Mobile&apos;]) !== &quot;undefined&quot; &amp;&amp; msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Mobile&apos;] !== null) {
	tmp[&apos;PID&apos;][&apos;PID.13&apos;][1][&apos;PID.13.1&apos;]= jsonNulltoEmptyString(&quot;Mobile PhoneNumber&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Mobile&apos;], debug);
}

// Office Phone
tmp[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.1&apos;]= jsonNulltoEmptyString(&quot;Office PhoneNumber&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Office&apos;], debug);
tmp[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.1&apos;]= jsonNulltoEmptyString(&quot;Language&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Language&apos;], debug);
tmp[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;]= jsonNulltoEmptyString(&quot;MartialStatus&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;MaritalStatus&apos;], debug);

// Account and Visit Numbers
var strAccountNumber= jsonNulltoEmptyString(&quot;AccountNumber&quot;, msg[&apos;Visit&apos;][&apos;AccountNumber&apos;], debug);
var strVisitNumber=  jsonNulltoEmptyString(&quot;VisitNumber&quot;, msg[&apos;Visit&apos;][&apos;VisitNumber&apos;], debug);

if(strAccountNumber.toString().length&lt;1 || strAccountNumber== null) {
	tmp[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;]= strVisitNumber;
	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG PID.18.1: &quot;+strVisitNumber+&quot; PID: &quot;+tmp[&apos;PID&apos;]);
	}
} else {
	tmp[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;]= strAccountNumber;
	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG PID.18.1: &quot;+strAccountNumber+&quot; PID: &quot;+tmp[&apos;PID&apos;]);
	}
}

tmp[&apos;PID&apos;][&apos;PID.26&apos;][&apos;PID.26.1&apos;]= jsonNulltoEmptyString(&quot;Citizenship&quot;, msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Citizenship&apos;], debug);
channelMap.put(&apos;PID&apos;,tmp[&apos;PID&apos;]);

// PV1 Segment
//
//if(msg[&apos;Meta&apos;][&apos;EventType&apos;].toString().indexOf(&quot;Cancel&quot;)) {
//	var metaScheduleStatus= &quot;CA&quot;;
//} else {
//	var metaScheduleStatus= &quot;NW&quot;;
//}
if(typeof(tmp[&apos;PV1&apos;]) == &apos;undefined&apos;) {
	var pv1 = new XML(&lt;PV1&gt;&lt;/PV1&gt;);
}
tmp.appendChild(pv1);

msg[&apos;Visit&apos;][&apos;PatientClass&apos;]= jsonNulltoEmptyString(&quot;PatientClass&quot;, msg[&apos;Visit&apos;][&apos;PatientClass&apos;], debug); 
if(msg[&apos;Visit&apos;][&apos;PatientClass&apos;].toString().length&gt;0) {
	tmp[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;]= msg[&apos;Visit&apos;][&apos;PatientClass&apos;].toString();
} else {
	tmp[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;]= &quot;Outpatient&quot;;
}
tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;]= jsonNulltoEmptyString(&quot;Location Dept&quot;,msg[&apos;Visit&apos;][&apos;Location&apos;][&apos;Department&apos;], debug);
tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;]= jsonNulltoEmptyString(&quot;Location Room&quot;, msg[&apos;Visit&apos;][&apos;Location&apos;][&apos;Room&apos;], debug);
tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;]= jsonNulltoEmptyString(&quot;Location Facility&quot;,msg[&apos;Visit&apos;][&apos;Location&apos;][&apos;Facility&apos;], debug);
tmp[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.6&apos;]= jsonNulltoEmptyString(&quot;Location Type&quot;,msg[&apos;Visit&apos;][&apos;Location&apos;][&apos;Type&apos;], debug);

// Evaluate msg.Visit.AttendingProvider - PV1.7
if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG AttendingProvider: &quot;+msg[&apos;Visit&apos;][&apos;AttendingProvider&apos;]+&quot; typeof: &quot;+typeof(msg[&apos;Visit&apos;][&apos;AttendingProvider&apos;])+&quot; string: &quot;+JSON.stringify(msg[&apos;Visit&apos;][&apos;AttendingProvider&apos;])+&quot; length: &quot;+msg[&apos;Visit&apos;][&apos;AttendingProvider&apos;].length); }
if(typeof(msg[&apos;Visit&apos;][&apos;AttendingProvider&apos;]) !== &apos;undefined&apos; &amp;&amp; msg[&apos;Visit&apos;][&apos;AttendingProvider&apos;] !== null) {

	var jsonAttendingProvider= msg[&apos;Visit&apos;][&apos;AttendingProvider&apos;];
	var attendingProvider= JSON.stringify(msg[&apos;Visit&apos;][&apos;AttendingProvider&apos;]);
	var strAttendingProvider= &quot;&quot;;

	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG JSON stringify JSON AttendingProvider Object: &quot;+jsonAttendingProvider+&quot; typeof: &quot;+typeof(jsonAttendingProvider)+&quot; length: &quot;+jsonAttendingProvider.length);
		logger.info(scriptName+&quot;::DEBUG JSON stringify JSON AttendingProvider string: &quot;+attendingProvider+&quot; typeof: &quot;+typeof(attendingProvider));
	}

	//  Redox: sjoseph^Joseph^Susan^^^^^^ecw_username^^^^^
	if(jsonAttendingProvider.ID !== null) { strAttendingProvider+= jsonAttendingProvider.ID+&quot;^&quot;; } else { strAttendingProvider+= &quot;^&quot;; } 
	if(jsonAttendingProvider.LastName !== null) { strAttendingProvider+= jsonAttendingProvider.LastName+&quot;^&quot;; } else { strAttendingProvider+= &quot;^&quot;; }
	if(jsonAttendingProvider.FirstName !== null) { strAttendingProvider+= jsonAttendingProvider.FirstName+&quot;^^^^^^&quot;; } else { strAttendingProvider+= &quot;^^^^^^&quot;; }
	if(jsonAttendingProvider.IDType !== null) { strAttendingProvider+= jsonAttendingProvider.IDType+&quot;^^^^^&quot;; } else { strAttendingProvider+= &quot;^^^^^&quot;; }

	if(debug&gt;0) { 
		logger.info(scriptName+&quot;::DEBUG strAttendingProvider: &quot;+strAttendingProvider); 
	}
	if(strAttendingProvider.toString().length&gt;13) {
		tmp[&apos;PV1&apos;][&apos;PV1.7&apos;]= checkElementIfUndefined(strAttendingProvider, debug);
	}
}

// Evaluate msg.Visit.ConsultingProvider - PV1.9
if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG ConsultingProvider: &quot;+msg[&apos;Visit&apos;][&apos;ConsultingProvider&apos;]+&quot; typeof: &quot;+typeof(msg[&apos;Visit&apos;][&apos;ConsultingProvider&apos;])+&quot; string: &quot;+JSON.stringify(msg[&apos;Visit&apos;][&apos;ConsultingProvider&apos;])+&quot; length: &quot;+msg[&apos;Visit&apos;][&apos;AttendingProvider&apos;].length); }
if(typeof(msg[&apos;Visit&apos;][&apos;ConsultingProvider&apos;]) !== &apos;undefined&apos; &amp;&amp; msg[&apos;Visit&apos;][&apos;ConsultingProvider&apos;] !== null) {
	var jsonConsultingProvider= msg[&apos;Visit&apos;][&apos;ConsultingProvider&apos;];
	var ConsultingProvider= JSON.stringify(msg[&apos;Visit&apos;][&apos;ConsultingProvider&apos;]);
	var strConsultingProvider= &quot;&quot;;

	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG JSON stringify JSON ConsultingProvider Object: &quot;+jsonConsultingProvider+&quot; typeof: &quot;+typeof(jsonConsultingProvider)+&quot; length: &quot;+jsonConsultingProvider.length);
		logger.info(scriptName+&quot;::DEBUG JSON stringify JSON ConsultingProvider string: &quot;+ConsultingProvider+&quot; typeof: &quot;+typeof(ConsultingProvider));
	}

	//  Redox: sjoseph^Joseph^Susan^^^^^^ecw_username^^^^^
	if(jsonConsultingProvider.ID !== null) { strConsultingProvider+= jsonConsultingProvider.ID+&quot;^&quot;; } else { strConsultingProvider+= &quot;^&quot;; } 
	if(jsonConsultingProvider.LastName !== null) { strConsultingProvider+= jsonConsultingProvider.LastName+&quot;^&quot;; } else { strConsultingProvider+= &quot;^&quot;; }
	if(jsonConsultingProvider.FirstName !== null) { strConsultingProvider+= jsonConsultingProvider.FirstName+&quot;^^^^^^&quot;; } else { strConsultingProvider+= &quot;^^^^^^&quot;; }
	if(jsonConsultingProvider.IDType !== null) { strConsultingProvider+= jsonConsultingProvider.IDType+&quot;^^^^^&quot;; } else { strConsultingProvider+= &quot;^^^^^&quot;; }

	if(debug&gt;0) { 
		logger.info(scriptName+&quot;::DEBUG strConsultingProvider: &quot;+strConsultingProvider); 
	}
	if(strConsultingProvider.toString().length&gt;13) {
		tmp[&apos;PV1&apos;][&apos;PV1.9&apos;]= checkElementIfUndefined(strConsultingProvider, debug);
	}
}

// Evaluate msg.Visit.ReferringProvider - PV1.8
if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG ReferringProvider: &quot;+msg[&apos;Visit&apos;][&apos;ReferringProvider&apos;]+&quot; typeof: &quot;+typeof(msg[&apos;Visit&apos;][&apos;ReferringProvider&apos;])+&quot; string: &quot;+JSON.stringify(msg[&apos;Visit&apos;][&apos;ReferringProvider&apos;])+&quot; length: &quot;+msg[&apos;Visit&apos;][&apos;AttendingProvider&apos;].length); }
if(typeof(msg[&apos;Visit&apos;][&apos;ReferringProvider&apos;]) !== &apos;undefined&apos; &amp;&amp; msg[&apos;Visit&apos;][&apos;ReferringProvider&apos;] !== null) {
	var jsonReferringProvider= msg[&apos;Visit&apos;][&apos;ReferringProvider&apos;];
	var referringProvider= JSON.stringify(msg[&apos;Visit&apos;][&apos;ReferringProvider&apos;]);
	var strReferringProvider= &quot;&quot;;

	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG JSON stringify JSON ReferringProvider Object: &quot;+jsonReferringProvider+&quot; typeof: &quot;+typeof(jsonReferringProvider)+&quot; length: &quot;+jsonReferringProvider.length);
		logger.info(scriptName+&quot;::DEBUG JSON stringify JSON ReferringProvider string: &quot;+referringProvider+&quot; typeof: &quot;+typeof(referringProvider));
	}

	//  Redox: sjoseph^Joseph^Susan^^^^^^ecw_username^^^^^
	if(jsonReferringProvider.ID !== null) { strReferringProvider+= jsonReferringProvider.ID+&quot;^&quot;; } else { strReferringProvider+= &quot;^&quot;; } 
	if(jsonReferringProvider.LastName !== null) { strReferringProvider+= jsonReferringProvider.LastName+&quot;^&quot;; } else { strReferringProvider+= &quot;^&quot;; }
	if(jsonReferringProvider.FirstName !== null) { strReferringProvider+= jsonReferringProvider.FirstName+&quot;^^^^^^&quot;; } else { strReferringProvider+= &quot;^^^^^^&quot;; }
	if(jsonReferringProvider.IDType !== null) { strReferringProvider+= jsonReferringProvider.IDType+&quot;^^^^^&quot;; } else { strReferringProvider+= &quot;^^^^^&quot;; }

	if(debug&gt;0) { 
		logger.info(scriptName+&quot;::DEBUG strReferringProvider: &quot;+strReferringProvider); 
	}
	if(strReferringProvider.toString().length&gt;13) {
		tmp[&apos;PV1&apos;][&apos;PV1.8&apos;]= checkElementIfUndefined(strReferringProvider, debug);
	}

}

tmp[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;]= strVisitNumber;
channelMap.put(&apos;PV1&apos;,tmp[&apos;PV1&apos;]);

// RGS Segment

if(typeof(tmp[&apos;RGS&apos;]) == &apos;undefined&apos;) {
	var rgs = new XML(&lt;RGS&gt;&lt;/RGS&gt;);
}
tmp.appendChild(rgs);

tmp[&apos;RGS&apos;][&apos;RGS.1&apos;][&apos;RGS.1.1&apos;]= &quot;1&quot;;
channelMap.put(&apos;RGS&apos;,tmp[&apos;RGS&apos;]);

channelMap.put(scriptName+&quot;_DEBUG_tmp&quot;,tmp);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">ewoJIk1ldGEiOiB7CgkJIkRhdGFNb2RlbCI6IG51bGwsCgkJIkV2ZW50VHlwZSI6IG51bGwsCgkJIkV2ZW50RGF0ZVRpbWUiOiBudWxsLAoJCSJUZXN0IjogbnVsbCwKCQkiU291cmNlIjogewoJCQkiSUQiOiBudWxsLAoJCQkiTmFtZSI6IG51bGwKCQl9LAoJCSJEZXN0aW5hdGlvbnMiOiBbCgkJCXsKCQkJCSJJRCI6IG51bGwsCgkJCQkiTmFtZSI6IG51bGwKCQkJfQoJCV0sCgkJIk1lc3NhZ2UiOiB7CgkJCSJJRCI6IG51bGwKCQl9LAoJCSJUcmFuc21pc3Npb24iOiB7CgkJCSJJRCI6IG51bGwKCQl9LAoJCSJGYWNpbGl0eUNvZGUiOiBudWxsCgl9LAoJIlBhdGllbnQiOiB7CgkJIklkZW50aWZpZXJzIjogWwoJCQl7CgkJCQkiSUQiOiBudWxsLAoJCQkJIklEVHlwZSI6IG51bGwKCQkJfQoJCV0sCgkJIkRlbW9ncmFwaGljcyI6IHsKCQkJIkZpcnN0TmFtZSI6IG51bGwsCgkJCSJNaWRkbGVOYW1lIjogbnVsbCwKCQkJIkxhc3ROYW1lIjogbnVsbCwKCQkJIkRPQiI6IG51bGwsCgkJCSJTU04iOiBudWxsLAoJCQkiU2V4IjogbnVsbCwKCQkJIlJhY2UiOiBudWxsLAoJCQkiSXNIaXNwYW5pYyI6IG51bGwsCgkJCSJNYXJpdGFsU3RhdHVzIjogbnVsbCwKCQkJIklzRGVjZWFzZWQiOiBudWxsLAoJCQkiRGVhdGhEYXRlVGltZSI6IG51bGwsCgkJCSJQaG9uZU51bWJlciI6IHsKCQkJCSJIb21lIjogbnVsbCwKCQkJCSJPZmZpY2UiOiBudWxsLAoJCQkJIk1vYmlsZSI6IG51bGwKCQkJfSwKCQkJIkVtYWlsQWRkcmVzc2VzIjogW10sCgkJCSJMYW5ndWFnZSI6IG51bGwsCgkJCSJDaXRpemVuc2hpcCI6IFtdLAoJCQkiQWRkcmVzcyI6IHsKCQkJCSJTdHJlZXRBZGRyZXNzIjogbnVsbCwKCQkJCSJDaXR5IjogbnVsbCwKCQkJCSJTdGF0ZSI6IG51bGwsCgkJCQkiWklQIjogbnVsbCwKCQkJCSJDb3VudHkiOiBudWxsLAoJCQkJIkNvdW50cnkiOiBudWxsCgkJCX0KCQl9LAoJCSJOb3RlcyI6IFtdCgl9LAoJIkFwcG9pbnRtZW50SW5mbyI6IFsKCQl7CgkJCSJDb2RlIjogbnVsbCwKCQkJIkNvZGVzZXQiOiBudWxsLAoJCQkiRGVzY3JpcHRpb24iOiBudWxsLAoJCQkiVmFsdWUiOiBudWxsCgkJfQoJXSwKCSJWaXNpdCI6IHsKCQkiVmlzaXROdW1iZXIiOiBudWxsLAoJCSJBY2NvdW50TnVtYmVyIjogbnVsbCwKCQkiVmlzaXREYXRlVGltZSI6IG51bGwsCgkJIlBhdGllbnRDbGFzcyI6IG51bGwsCgkJIlN0YXR1cyI6IG51bGwsCgkJIkR1cmF0aW9uIjogbnVsbCwKCQkiUmVhc29uIjogbnVsbCwKCQkiQ2FuY2VsUmVhc29uIjogbnVsbCwKCQkiVHlwZSI6IG51bGwsCgkJIkluc3RydWN0aW9ucyI6IFtdLAoJCSJBdHRlbmRpbmdQcm92aWRlciI6IHsKCQkJIklEIjogbnVsbCwKCQkJIklEVHlwZSI6IG51bGwsCgkJCSJGaXJzdE5hbWUiOiBudWxsLAoJCQkiTGFzdE5hbWUiOiBudWxsLAoJCQkiQ3JlZGVudGlhbHMiOiBbXSwKCQkJIkFkZHJlc3MiOiB7CgkJCQkiU3RyZWV0QWRkcmVzcyI6IG51bGwsCgkJCQkiQ2l0eSI6IG51bGwsCgkJCQkiU3RhdGUiOiBudWxsLAoJCQkJIlpJUCI6IG51bGwsCgkJCQkiQ291bnR5IjogbnVsbCwKCQkJCSJDb3VudHJ5IjogbnVsbAoJCQl9LAoJCQkiRW1haWxBZGRyZXNzZXMiOiBbXSwKCQkJIlBob25lTnVtYmVyIjogewoJCQkJIk9mZmljZSI6IG51bGwKCQkJfSwKCQkJIkxvY2F0aW9uIjogewoJCQkJIlR5cGUiOiBudWxsLAoJCQkJIkZhY2lsaXR5IjogbnVsbCwKCQkJCSJEZXBhcnRtZW50IjogbnVsbCwKCQkJCSJSb29tIjogbnVsbAoJCQl9CgkJfSwKCQkiQ29uc3VsdGluZ1Byb3ZpZGVyIjogewoJCQkiSUQiOiBudWxsLAoJCQkiSURUeXBlIjogbnVsbCwKCQkJIkZpcnN0TmFtZSI6IG51bGwsCgkJCSJMYXN0TmFtZSI6IG51bGwsCgkJCSJDcmVkZW50aWFscyI6IFtdLAoJCQkiQWRkcmVzcyI6IHsKCQkJCSJTdHJlZXRBZGRyZXNzIjogbnVsbCwKCQkJCSJDaXR5IjogbnVsbCwKCQkJCSJTdGF0ZSI6IG51bGwsCgkJCQkiWklQIjogbnVsbCwKCQkJCSJDb3VudHkiOiBudWxsLAoJCQkJIkNvdW50cnkiOiBudWxsCgkJCX0sCgkJCSJFbWFpbEFkZHJlc3NlcyI6IFtdLAoJCQkiUGhvbmVOdW1iZXIiOiB7CgkJCQkiT2ZmaWNlIjogbnVsbAoJCQl9LAoJCQkiTG9jYXRpb24iOiB7CgkJCQkiVHlwZSI6IG51bGwsCgkJCQkiRmFjaWxpdHkiOiBudWxsLAoJCQkJIkRlcGFydG1lbnQiOiBudWxsLAoJCQkJIlJvb20iOiBudWxsCgkJCX0KCQl9LAoJCSJSZWZlcnJpbmdQcm92aWRlciI6IHsKCQkJIklEIjogbnVsbCwKCQkJIklEVHlwZSI6IG51bGwsCgkJCSJGaXJzdE5hbWUiOiBudWxsLAoJCQkiTGFzdE5hbWUiOiBudWxsLAoJCQkiQ3JlZGVudGlhbHMiOiBbXSwKCQkJIkFkZHJlc3MiOiB7CgkJCQkiU3RyZWV0QWRkcmVzcyI6IG51bGwsCgkJCQkiQ2l0eSI6IG51bGwsCgkJCQkiU3RhdGUiOiBudWxsLAoJCQkJIlpJUCI6IG51bGwsCgkJCQkiQ291bnR5IjogbnVsbCwKCQkJCSJDb3VudHJ5IjogbnVsbAoJCQl9LAoJCQkiRW1haWxBZGRyZXNzZXMiOiBbXSwKCQkJIlBob25lTnVtYmVyIjogewoJCQkJIk9mZmljZSI6IG51bGwKCQkJfSwKCQkJIkxvY2F0aW9uIjogewoJCQkJIlR5cGUiOiBudWxsLAoJCQkJIkZhY2lsaXR5IjogbnVsbCwKCQkJCSJEZXBhcnRtZW50IjogbnVsbCwKCQkJCSJSb29tIjogbnVsbAoJCQl9CgkJfSwKCQkiVmlzaXRQcm92aWRlciI6IHsKCQkJIklEIjogbnVsbCwKCQkJIklEVHlwZSI6IG51bGwsCgkJCSJGaXJzdE5hbWUiOiBudWxsLAoJCQkiTGFzdE5hbWUiOiBudWxsLAoJCQkiQ3JlZGVudGlhbHMiOiBbXSwKCQkJIkFkZHJlc3MiOiB7CgkJCQkiU3RyZWV0QWRkcmVzcyI6IG51bGwsCgkJCQkiQ2l0eSI6IG51bGwsCgkJCQkiU3RhdGUiOiBudWxsLAoJCQkJIlpJUCI6IG51bGwsCgkJCQkiQ291bnR5IjogbnVsbCwKCQkJCSJDb3VudHJ5IjogbnVsbAoJCQl9LAoJCQkiRW1haWxBZGRyZXNzZXMiOiBbXSwKCQkJIlBob25lTnVtYmVyIjogewoJCQkJIk9mZmljZSI6IG51bGwKCQkJfSwKCQkJIkxvY2F0aW9uIjogewoJCQkJIlR5cGUiOiBudWxsLAoJCQkJIkZhY2lsaXR5IjogbnVsbCwKCQkJCSJEZXBhcnRtZW50IjogbnVsbCwKCQkJCSJSb29tIjogbnVsbAoJCQl9CgkJfSwKCQkiTG9jYXRpb24iOiB7CgkJCSJUeXBlIjogbnVsbCwKCQkJIkZhY2lsaXR5IjogbnVsbCwKCQkJIkRlcGFydG1lbnQiOiBudWxsLAoJCQkiUm9vbSI6IG51bGwKCQl9LAoJCSJBZGRpdGlvbmFsU3RhZmYiOiBbXSwKCQkiRGlhZ25vc2VzIjogW10sCgkJIkVxdWlwbWVudCI6IFtdCgl9Cn0=</inboundTemplate>
            <outboundTemplate encoding="base64">TVNIfF5+XCZ8fHx8fHx8fHx8fHx8fHx8fHx8ClNDSHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHwKTlRFfHx8fA==</outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.12.0">
                <name>Accept message if &quot;msg[&apos;Meta&apos;][&apos;EventType&apos;].toString()&quot; equals &quot;Cancel&quot;</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <field>msg[&apos;Meta&apos;][&apos;EventType&apos;].toString()</field>
                <condition>EQUALS</condition>
                <values>
                  <string>&quot;Cancel&quot;</string>
                </values>
              </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
            </elements>
          </filter>
          <transportName>TCP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.12.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>EVENTTYPE</name>
            <type>STRING</type>
            <mappingName>EventType</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>SOURCENAME</name>
            <type>STRING</type>
            <mappingName>Source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>MESSAGEID</name>
            <type>STRING</type>
            <mappingName>MessageID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>VISITNUMBER</name>
            <type>STRING</type>
            <mappingName>VisitNumber</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.12.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1607985571402</time>
            <timezone>America/Chicago</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.12.0">
            <id>6975d386-da5e-4267-aa01-5d181743a931</id>
            <name>AristaMd-Utilities</name>
            <revision>22</revision>
            <lastModified>
              <time>1690987302603</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>This library was added upon migration to version 3.3.0. It includes all pre-existing
code templates, and is set to be included on all pre-existing and new channels.

You should create your own new libraries and assign code templates to them as you
see fit. You should also link libraries to specific channels, so that you&apos;re not
necessarily including all code templates on all channels all the time.</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>b484c4c9-6c84-4f8e-b2ec-9bff6a8cf7db</id>
                <name>checkHL7ElementIfUndefined</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262649</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	checkElementIfUndefined (element, debug)
	
	- Function to check provided Element if Undefined or length less than 1 character return null.

	@param {element} - XML object provided (e.g. msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.1&apos;]
	@return {String} return XML object or null object reference
*/
function checkElementIfUndefined (element, debug) {
	var scriptName= &apos;checkHL7ElementIfUndefined&apos;;

	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG element: &quot;+element+&quot; typeof: &quot;+typeof(element)+&quot; string: &quot;+element.toString()+&quot; length: &quot;+element.toString().length); }
	
	if(element == &apos;undefined&apos;) {
		return null;
	} else {
		if(element.toString().length&lt;1) {
			return null;
		} else {
			return element;
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b9651842-7ccb-4761-aedf-a9a1461dd5f7</id>
                <name>Convert HL7 Date Format to ISO</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262839</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts standard HL7 v2.x date format to human-readable ISO date format
*/

/*
	Author: IntegrateIT.us LLC
	toISODate: Returns an ISO-formatted date string with specified timezone offset

	Arguments
	---------
		Required
		--------
			hl7DateString:		An HL7-formatted date string (ex: &quot;yyyyMMddHHmmss&quot;

		Optional
		--------
			timezome:			A timezone identifier string corresponding to one of the java.util.TimeZone values (ex: &quot;US/Central&quot;)
*/

function toISODate( hl7DateString, timezone ) {
	var isoDate;
	var dateString;
	var hl7Formatter;
	var isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);

	if (timezone) {
		isoFormatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timezone));
	}
	
	if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString.substring(0,13)) &amp;&amp; hl7DateString.length &gt; 14 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmssZ&quot;);
	}
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 14 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
	} 
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 12 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);
	} 
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 8 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMdd&quot;);
	} 
	else dateString = hl7DateString;
	
	try {
		if (hl7Formatter) {
			isoDate = hl7Formatter.parse(hl7DateString);
			isoDate = isoFormatter.format(isoDate);
			dateString = new String(isoDate);
		}
	} catch (err) {
		dateString = hl7DateString;
	} finally {
		return dateString;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>95e528b7-1e7f-490e-86da-7c14b23ee4f3</id>
                <name>Convert ISO Date Format to HL7</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262912</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts ISO date format to HL7 v2 format - toHL7Date( isoDateString, timezone, debug )
*/

/*
	Author: IntegrateIT.us LLC
	toHL7Date: Returns an HL7-formatted date string with specified timezone offset

	Arguments
	---------
		Required
		--------
			isoDateString:		An ISO-formatted date string (ex: &quot;yyyy-MM-ddTHH:mm:ssZ&quot;

		Optional
		--------
			timezome:			A timezone identifier string corresponding to one of the java.util.TimeZone values (ex: &quot;US/Central&quot;)
*/

function toHL7Date( isoDateString, timezone, debug ) 
{
	var scriptName= &quot;toHL7Date&quot;;
	var hl7Date;
	var dateString;
	var isoFormatter;
	var hl7Formatter;

	// 2020-11-07T00:01:22+00:00
	var strTimeZone= &quot;GMT-8:00&quot;;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG:BEGIN isoDateString: &quot;+isoDateString+&quot;, timezone: &quot;+timezone+&quot;, strTimeZone: &quot;+strTimeZone); }

	// ISO Date Format: yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;
	if ( isoDateString != null &amp;&amp; isoDateString.length &lt;= 25 &amp;&amp; isoDateString.length &gt;= 22) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmssZ&quot;);
		if (timezone) {
			hl7Formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(strTimeZone));
		}
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG:UPDATE isoDateString: &quot;+isoDateString+&quot;, isoFormatter: &quot;+isoFormatter.toString()+&quot;, hl7Formatter: &quot;+hl7Formatter.toString()+&quot;, timezone: &quot;+timezone+&quot;, strTimeZone: &quot;+strTimeZone); }
	}
	// ISO Date Format: yyyy-MM-dd HH:mm:ss
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 19 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
	}
	// ISO Date Format: yyyy-MM-dd HH:mm
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 16 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);
	} 
	// ISO Date Format: yyyy-MM-dd
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 10 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMdd&quot;);	
	}
	// None of the above, return original date string.
	else dateString = isoDateString;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG:END isoDateString: &quot;+isoDateString+&quot;, isoFormatter: &quot;+isoFormatter.toString()+&quot;, hl7Formatter: &quot;+hl7Formatter.toString()+&quot;, timezone: &quot;+timezone+&quot;, strTimeZone: &quot;+strTimeZone); }

	try {
		if (isoFormatter) {
			hl7Date = isoFormatter.parse(isoDateString);
			hl7Date = hl7Formatter.format(hl7Date);
			dateString = new String(hl7Date);
		}
	} catch (err) {
		dateString = isoDateString;
	} finally {
		return dateString;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>41b1ac94-64c4-42ed-a501-a0caca7ae187</id>
                <name>convertMDYtoHL7DateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911263005</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	Convert MM-DD-YY HH:MM format to HL7 format
	
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function convertMDYtoHL7DateTime(eventDateTime, debug) {

	var scriptName= &apos;convertMDYtoHL7DateTime&apos;;
	if(typeof(debug) == &apos;undefined&apos;) { var debug= 0; }

	var lstEventDateTime= eventDateTime.toUpperCase().split(&quot; &quot;);
	var tEventDateTime= &quot;&quot;.concat(lstEventDateTime[0]).concat(&quot; &quot;).concat(lstEventDateTime[1]);

	var nEventDate= tEventDateTime.slice(6,8).concat(&quot;20&quot;).concat(tEventDateTime.slice(0,2)).concat(tEventDateTime.slice(3,5));
	var nEventTime= tEventDateTime.split(&quot; &quot;)[1];

	if(nEventTime.toString().indexOf(&quot;PM&quot;)&gt;-1) {
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG: eventTime contains PM: &quot; + nEventTime.toString().indexOf(&quot;PM&quot;)); }
		if(nEventTime.toString().length&lt;7) {
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG: eventTime length&lt;7 chars: &quot; + nEventTime.toString().length); } 
			var addLeadingZero= 12;
			var tHours= nEventTime.split(&quot;:&quot;)[0];
			var tMinutes= nEventTime.split(&quot;:&quot;)[1].replace(/[^0-9]/g, &quot;&quot;);
			var tHours= parseInt(addLeadingZero) + parseInt(tHours);
			var tEventTime= tHours.toString().concat(tMinutes.toString()).concat(&quot;00&quot;);
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG: new EventTime: &quot; + tEventTime.toString()); } 
		} else { 
			var tEventTime= nEventTime.toString().replace(/[^0-9]/g, &quot;&quot;) + &quot;00&quot;; 
		} 
	} else {
		var tEventTime= &quot;0&quot; + nEventTime.toString().replace(/[^0-9]/g, &quot;&quot;) + &quot;00&quot;; 
	}
	var nEventDateTime= nEventDate.toString().concat(tEventTime.toString());
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG datetime: &quot;+nEventDateTime); }

	return nEventDateTime;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>af95fd5e-8686-4b90-bd08-f11b4f5e78ee</id>
                <name>currentDate_yyyyMMddhhmmss</name>
                <revision>1</revision>
                <lastModified>
                  <time>1653055235571</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** currentDate_yyyyMMddhhmmss

  	- Desc: This function returns current DateTime only YYYYMMDDHHMMSS format

	@return {string} datetime - this string object contains the current DateTime only YYYYMMDDHHMMSS format
*/
function currentDate_yyyyMMddhhmmss() {
	var today = new Date();
	// set Date with leading zeros if needed
	var tMonth= today.getMonth()+1;
	if(tMonth.toString().length&lt;2) tMonth= &apos;0&apos;+tMonth;
	var tDay= today.getDate()
	if(tDay.toString().length&lt;2) tDay= &apos;0&apos;+tDay;
	var date = today.getFullYear()+&apos;&apos;+tMonth+&apos;&apos;+tDay;
	
	// set Time with leading zeros if needed
	var tHour= today.getHours();
	if(tHour.toString().length&lt;2) tHour= &apos;0&apos;+tHour;
	var tMinute= today.getMinutes();
	if(tMinute.toString().length&lt;2) tMinute= &apos;0&apos;+tMinute;
	var tSecond= today.getSeconds();
	if(tSecond.toString().length&lt;2) tSecond= &apos;0&apos;+tSecond;
	
	var time = tHour+&apos;&apos;+tMinute+&apos;&apos;+tSecond;
	var dateTime = date+&apos;&apos;+time;

	return dateTime;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>59ebad58-f839-4429-b9fb-175fb5a4d5ec</id>
                <name>getChannelId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262975</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	getChannelId(nameOfChannel) function
	DESC: This function takes the string nameOfChannel Object as a parameter and returns the string channelId

	PARAMETERS:
	@param	{string} - pass the string object of the channelName
	@return 	{string} - return the channelId

	MODIFIED:	

 	USAGE:								
	E.G 
	var arrElementObjects= setXMLElementsArrayWithDescendants(xmlElement, debug);
	
*/

function getChannelId(nameOfChannel){ 
    if (nameOfChannel === undefined || nameOfChannel.length == 0) return &quot;&quot;; 
     
    var listIDs = ChannelUtil.getChannelIds(); 
    if (listIDs.isEmpty()) return &quot;&quot;; 
     
    var nameFromList; 
    for (var i = 0; i &lt; listIDs.size();i++){ 
        nameFromList = ChannelUtil.getChannelName(listIDs.get(i)); 
        if(nameFromList == nameOfChannel) return listIDs.get(i); 
    } 
    return &quot;&quot;; 
}  </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>887718d9-8250-4b4e-9b81-4a02cc1bef45</id>
                <name>getHL7v2ACK</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262563</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	setHL7v2ACK(msg) - DEVELOPMENT
	
	- Desc: This function set and returns HL7v2 HAPI Acknowledgement (ACK) message based on evaluating conditions

	@param 
	sourceMsg {string} - source message
	responseCode {string} - Mirth Connect processing responseCode
	responseMsg {string} - response MSA message
	responseStatus {string} - Mirth Connect processing responseStatus
	
	@return {XML} - this returns the HL7 HAPI Ack message
*/
function setHL7v2ACK(sourceMsg,responseCode,responseMsg,responseStatus) {

	var scriptName= &apos;getHL7v2ACK&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG msg.MSH: &apos;+JSON.stringify(msg[&apos;MSH&apos;].toString())); }
	
	importPackage(com.mirth.connect.model);
	// responseStatus is an optional parameter
	if (!responseStatus)
		responseStatus = {&apos;AA&apos;:Response.Status.SUCCESS,&apos;AR&apos;:Response.Status.FILTERED,&apos;AE&apos;:Response.Status.FAILURE}[responseCode] || Response.Status.UNKNOWN;
	var ack = &lt;HL7Message/&gt;;
	
	ack.MSH[&apos;MSH.1&apos;] = sourceMsg.MSH[&apos;MSH.1&apos;].toString();
	ack.MSH[&apos;MSH.2&apos;] = sourceMsg.MSH[&apos;MSH.2&apos;].toString();
	ack.MSH[&apos;MSH.3&apos;] = sourceMsg.MSH[&apos;MSH.5&apos;].copy();
	ack.MSH[&apos;MSH.4&apos;] = sourceMsg.MSH[&apos;MSH.6&apos;].copy();
	ack.MSH[&apos;MSH.5&apos;] = sourceMsg.MSH[&apos;MSH.3&apos;].copy();
	ack.MSH[&apos;MSH.6&apos;] = sourceMsg.MSH[&apos;MSH.4&apos;].copy();
	ack.MSH[&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = DateUtil.getCurrentDate(&apos;yyyyMMddHHmmss&apos;);
	ack.MSH[&apos;MSH.9&apos;][&apos;MSH.9.1&apos;] = sourceMsg.MSH[&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString();
	ack.MSH[&apos;MSH.9&apos;][&apos;MSH.9.2&apos;] = sourceMsg.MSH[&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();
	ack.MSH[&apos;MSH.9&apos;][&apos;MSH.9.3&apos;] = &apos;ACK&apos;;
	ack.MSH[&apos;MSH.10&apos;] = sourceMsg.MSH[&apos;MSH.10&apos;].copy();
	ack.MSH[&apos;MSH.11&apos;] = sourceMsg.MSH[&apos;MSH.11&apos;].copy();
	ack.MSH[&apos;MSH.12&apos;] = sourceMsg.MSH[&apos;MSH.12&apos;].copy();
	ack.MSA[&apos;MSA.1&apos;][&apos;MSA.1.1&apos;] = responseCode;
	ack.MSA[&apos;MSA.2&apos;][&apos;MSA.2.1&apos;] = sourceMsg.MSH[&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
	ack.MSA[&apos;MSA.3&apos;][&apos;MSA.3.1&apos;] = responseMsg;
	
	responseMap.put(&apos;ACK&apos;,new Response(responseStatus,SerializerFactory.getHL7Serializer().fromXML(ack)));

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>9d1a5389-8d5f-4f98-923a-6e5570b4bdc3</id>
                <name>jsonNulltoEmptyString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262944</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts JSON Null Object values to empty string
*/

/*
	Author: IntegrateIT.us LLC
	toHL7Date: Returns an empty string

	Arguments
	---------
		Required
		--------
			JSON element:		A JSON element (e.g. &quot;MiddleName&quot;:null )

*/

function jsonNulltoEmptyString( strElement, jsonElement, debug ) 
{

	var scriptName= &quot;jsonNulltoEmptyString&quot;;
	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG jsonElement IN key:&quot;+strElement+&quot; value: &quot;+jsonElement); 
		logger.info(scriptName+&quot;::DEBUG typeof jsonElement IN: &quot;+typeof(jsonElement));
	}
	// try {
		if (typeof(jsonElement) !== &apos;undefined&apos;) {
			if (typeof(jsonElement) !== &apos;string&apos;) {
				if (typeof(jsonElement) == &apos;object&apos;) {
					var jsonElement= &quot;&quot;;
				} 
			} else {
				if (jsonElement.toString()== null) {
					var jsonElement= jsonElement.replace(null,&quot;&quot;);
				}
			}	
		} else {
			var jsonElement= &quot;&quot;;
		}
	/*
	} catch (err) {
		return jsonElement
	} finally {
		return newJsonElement;
	}
	*/
	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG jsonElement OUT key:&quot;+strElement+&quot; value: &quot;+jsonElement); 
		logger.info(scriptName+&quot;::DEBUG typeof jsonElement OUT: &quot;+typeof(jsonElement));
		logger.info(&quot;&quot;);
	}
	return jsonElement;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a53342c5-cb0d-47b5-b156-cd559fbd40ac</id>
                <name>random_date_after_date</name>
                <revision>7</revision>
                <lastModified>
                  <time>1658169955060</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function will produce a random date based on a provided date and number of days argument.

	@param {String} start - enter the starting date (&apos;YYYY&apos;, &apos;MM&apos;, &apos;DD&apos;) (e.g. &apos;2021&apos;, &apos;09&apos;, &apos;13&apos;)
	@param {String} days -  number of days (positive or negative) (e.g. 365, 3000, -365)
	@return {String} return description
*/
function random_date_after_date(start, days) {
	
	// randomDateAfterDate(new Date(2021, 4, 5), -365) 
	var scriptName= &apos;random_date_after_date&apos;;
	var debug= 1;
	
	// if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; start= &apos;+start+&apos; number of days: &apos;+days);
	// }
	
	var strRandom= Math.random()*days*10000;
	var strStringRandom= strRandom.toString();
	var strRandom= strStringRandom.substring(0,4);
	
	var newDate= new Date(start.getTime() + strRandom);
	// Fri Jun 26 2020 08:59:35 GMT-0600 (GMT-06:00)
	var strDate= newDate.getFullYear() + &quot;&quot; + addLeadingZeros(newDate.getMonth() + 1) + &quot;&quot; + addLeadingZeros(newDate.getDate());
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; random date generated: &apos;+strDate);
	}

	return strDate;
}

function addLeadingZeros(n) {
  
  if (n &lt;= 9) {
    return &quot;0&quot; + n;
  }
  
  return n;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b527f706-5c50-4f44-bee5-d16dd9edd8f0</id>
                <name>random_generator</name>
                <revision>3</revision>
                <lastModified>
                  <time>1653591827816</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function will produce a random number based on the number of characters provided into the numOfChars argument.

	@param {String} numOfChars - enter the number of random characters to be returned
	@return {String} return description
*/
function random_generator(numOfChars) {
	var scriptName= &apos;random_generator&apos;;
	var debug= 0;
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; evaluate number of characters: &apos;+numOfChars);
	}
	
	var strNumOfChars= &apos;&apos;+numOfChars+&apos;&apos;;
	var cntNumOfChars= strNumOfChars.padEnd(numOfChars,0);
	var strRandom= (Math.random()*cntNumOfChars).toFixed();
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; random number generated: &apos;+strRandom);
	}
	
	return strRandom;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fefafe84-cb17-415b-b96e-ff00063c267a</id>
                <name>sendHttpsPostClientCert</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262729</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	sendHttpsPostClientCert(state, url, certificatePath, certificatePassword) - Returns custom HTTP response
	
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} state - arg1 description
	@param {String} url - arg2 description
	@param {String} certificatePath - arg3 description
	@param {String} certificatePasswordte - arg4 description
	@return {String} return description
*/
function sendHttpsPostClientCert(state, url, certificatePath, certificatePassword) {
	// write code here.

	var scriptName= &quot;sendHttpsPostClientCert&quot;;
	var messageBody = messageObject.getEncodedData();
	var httpsSender = new Packages.com.xti.util.HTTPSSender(certificatePath, certificatePassword);

	// Set all the necessary parameters...
	httpsSender.setURL(url);
	httpsSender.setMessageBody(messageBody);

	logger.info(scriptName+&quot;::DEBUG Sending message to &quot; + url + &quot; - &quot; + messageBody);

	// Send the message to the URL...
	try {
		httpsSender.send();
		var retString = httpsSender.getReturnValue();
		retString = retString.substr(0, retString.indexOf(&quot;MSA&quot;)) + &quot;\r&quot; + retString.substr(retString.indexOf(&quot;MSA&quot;));
		var responseMessage = new Packages.com.mirth.connect.model.converters.SerializerFactory.getHL7Serializer().toXML(retString);
		channelMap.put(&apos;responseMessage&apos;,responseMessage);

		if (responseMessage[&apos;MSA&apos;][&apos;MSA.1&apos;][&apos;MSA.1.1&apos;].toString() == &apos;AA&apos;) {
			logger.info(scriptName+&quot;::DEBUG HTTPS send success. Return value= &quot; + retString);
		} else {
			logger.info(scriptName+&quot;::DEBUG HTTPS send failure. Return value= &quot; + retString);
			throw(&quot;HTTPS send failure. Return value=&quot; + retString);
		}
	} catch (e) {
		logger.info(scriptName+&quot;::DEBUG Error message= &quot; + e.message);
		throw(e.message);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>37fab7a4-d254-46f6-925b-1c4bd8bacc48</id>
                <name>set24Hrs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911263134</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	set24Hrs - Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function set24Hrs(d){

  if (d.slice(-2) === &quot;PM&quot;){
      var hrs = parseInt(d.slice(-7,-5))
      var mins = d.slice(-4,-2)
      hrs = hrs + 12
      var dd = d.slice(0,9) + &quot; &quot; + hrs + &quot;:&quot; + mins;
      return dd;
  } else if(d.slice(-2) === &quot;AM&quot;){
      return (d.slice(0, 16));
  } else {
      throw (&quot;UNRECOGNIZED_FORMAT&quot;,&quot;set24Hrs() Received Unrecognized Formatted String&quot;);
  }
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
            <name>WebPT-Common</name>
            <revision>2</revision>
            <lastModified>
              <time>1678715257049</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
                <name>Check if String contains</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122790</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
                <name>Check if String contains HTTP code</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122593</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8515e088-5c50-47ee-9e2f-9fad1ecf48bd</id>
                <name>Check if String is JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123309</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Added by Kirby Knight
	12/21/2020
	Test for JSON

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5f2f84ba-3e66-4be3-8260-8fbd8258bd92</id>
                <name>Check if the PDF is valid</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122055</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
//This function is used for checking the word &quot;PDF&quot; in inbound attachment.
function isValidBase64PDF(base64) {
	const ENCODED_PDF_SIGN = &quot;JVBERi&quot;; // %PDF sign
	const PDF_EOF = &quot;JSVFT0YNCg&quot;; // %EOF
	var pdfBase64Size = (base64.length() * (3 / 4)) - 1;
	
	return (base64.indexOf(ENCODED_PDF_SIGN) != -1 &amp;&amp; base64.indexOf(PDF_EOF) != -1 &amp;&amp; pdf_base64_size &gt; 36);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
                <name>Convert JSON date to HL7v2 date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122137</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
                <name>Convert JSON datetime to HL7v2 datetime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122430</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>bb21449a-df39-48c6-be52-24106c8df4c4</id>
                <name>Destination Formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Kirby Knight 03/10/2021
	
	This function will remove all other ROOT.Meta.Destinations nodes that are not passed in the
	destination variable and removes the ROOT.Meta.Destinations[x].Destination node

	@param {Any} destination - 
	@return {String} return description
*/
function formatDestinations(destination) {
var arrDestinations = msg[&apos;Meta&apos;][&apos;Destinations&apos;];
	//  Start at the end of the array because of the posibility of deleted array items 
	for (var i = arrDestinations.length - 1; i &gt;= 0; i--) {
		if (arrDestinations[i][&apos;Destination&apos;] == destination){
			delete arrDestinations[i][&apos;Destination&apos;]
		}else if (arrDestinations[i][&apos;Destination&apos;] != destination){
			arrDestinations.splice(i, 1);
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
                <name>Extract JSON node data</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121748</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7ed44f8a-fa40-4f3e-9426-3021604eabe0</id>
                <name>Get Feature Value by Name and Database</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123262</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns a string containing the feature value (system property) for a specific client database.

	@param {String} featureName - name of the feature, ie: &quot;BetterPTBidirectionalScheduling&quot;
	@param {String} databaseIdentifier - database name or databaseID / TenantID
	@param {String} databaseIdentifierType - what value is provided in databaseIdentifier. current options include &quot;ID&quot; or &quot;NAME&quot;
	@return {String} returns feature value
*/
function getFeatureValueByNameDatabase(featureName, databaseIdentifier, databaseIdentifierType) {
	var paramList = new Packages.java.util.ArrayList();
	paramList.add(featureName);
	paramList.add(databaseIdentifier);
	paramList.add(databaseIdentifierType);
	
	var sSQL = &apos;EXEC [dbo].[pr_FeatureValueByNameDatabase] ?, ?, ?&apos;;
	
	try {
		var result = executeSharedDBStatementFhirCh(sSQL, true, paramList);
		var featureValue ;
		if(result.next()){			//Added
		 featureValue = result.getString(1);
		}
		return featureValue;
	} catch (e) {
		logger.error(e);
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>9842be2c-c633-42ac-87f1-f91aca9e370f</id>
                <name>JSON Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121776</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function populates the MR and PI patient IDS to channelMap

	@return {String} return description
*/
function jsonPatientIds() {
	for each (patId in msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) {
	if (patId[&apos;IDType&apos;].toString() == &apos;MR&apos;){
		channelMap.put(&apos;extPatId&apos;, patId[&apos;ID&apos;].toString());
	}else if(patId[&apos;IDType&apos;].toString() == &apos;PI&apos;){
		channelMap.put(&apos;patId&apos;, patId[&apos;ID&apos;].toString());
	}
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
                <name>Verify JSON node for existance</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>394664c0-d536-4310-970e-181dc03ee7da</id>
            <name>WebPT-Conversions</name>
            <revision>2</revision>
            <lastModified>
              <time>1690140133427</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
                <name>Convert FHIR codes to HL7v2 codes</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122899</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>2fc8cbf3-0d92-4d1d-a3d6-136c09bd9f2a</id>
            <name>WebPT-Custom Database Functions</name>
            <revision>4</revision>
            <lastModified>
              <time>1690570753962</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>23c0b510-63e4-40fa-a4e1-7b2b92ce9a96</id>
                <name>Execute Statement Shared DB Conn clientDb Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122401</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Executes a SQL statement using a shared database connection stored in the Global Map. If the
connection does not exist, creates it.

@param {String} statement - The SQL statement to execute
@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
@param {List} paramList - A Java List object containing the parameters for the statement (optional)
 */
function executeSharedDBStatementclientDbCh(statement, isQuery, paramList) {
    var result;

    try {
        var dbConnclientDbCh = globalChannelMap.get(&quot;dbConnclientDbCh&quot;);

        if (dbConnclientDbCh == null || dbConnclientDbCh.getConnection().isClosed()) {
            dbConnclientDbCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;), $(&apos;dbClient&apos;), $(&apos;dbUserFhir&apos;), $(&apos;dbPwFhir&apos;));
            globalChannelMap.put(&quot;dbConnclientDbCh&quot;, dbConnclientDbCh);
        }

        if (paramList == undefined) {
            paramList = new Packages.java.util.ArrayList();
        }

        if (isQuery) {
            result = dbConnclientDbCh.executeCachedQuery(statement, paramList);
        } else {
            result = dbConnclientDbCh.executeUpdate(statement, paramList);
        }
    } catch (e) {
        logger.error(e);
    }
    finally {
        return result;
    }
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4efb3110-a83f-48b5-93ad-79c847b51865</id>
                <name>Execute Statement Shared DB Conn clntAcl Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123455</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClntAclCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnClntAclCh = globalChannelMap.get(&quot;dbConnClntAclCh&quot;);

		if (dbConnClntAclCh == null || dbConnClntAclCh.getConnection().isClosed())
		{
			dbConnClntAclCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbClntAcl&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnClntAclCh&quot;, dbConnClntAclCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnClntAclCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnClntAclCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>d96d45dd-57f7-4aa9-9bf4-e464d31b94c6</id>
                <name>Execute Statement Shared DB Conn FHIR</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121922</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhir(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhir.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhir.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6014068e-c021-4a38-9fa6-6f38f6a2cdab</id>
                <name>Execute Statement Shared DB Conn FHIR Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123492</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhirCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhirCh = globalChannelMap.get(&quot;dbConnFhirCh&quot;);

		if (dbConnFhirCh == null || dbConnFhirCh.getConnection().isClosed())
		{
			dbConnFhirCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnFhirCh&quot;, dbConnFhirCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhirCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhirCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fbd5c4a1-b816-4496-acdf-067005f1d376</id>
                <name>Execute Statement Shared DB Conn Translations Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123008</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementTranslationsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnTranslationsCh = globalChannelMap.get(&quot;dbConnTranslationsCh&quot;);

		if (dbConnTranslationsCh == null || dbConnTranslationsCh.getConnection().isClosed())
		{
			dbConnTranslationsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlTranslations&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnTranslationsCh&quot;, dbConnTranslationsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnTranslationsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnTranslationsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5d1a5577-4ba4-4d1e-b6cd-e2d924164909</id>
                <name>Execute Statement with Shared DB Conn ODS Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122280</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdsCh = globalChannelMap.get(&quot;dbConnOdsCh&quot;);

		if (dbConnOdsCh == null || dbConnOdsCh.getConnection().isClosed())
		{
			dbConnOdsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOds&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdsCh&quot;, dbConnOdsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>3991db14-0c0b-4123-952c-5164c1ded501</id>
                <name>Execute Statement with Shared DB Conn ODW Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122960</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.  THis connects to the ODW db in Azure

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdwCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdwCh = globalChannelMap.get(&quot;dbConnOdwCh&quot;);

		if (dbConnOdwCh == null || dbConnOdwCh.getConnection().isClosed())
		{
			dbConnOdwCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOdw&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdwCh&quot;, dbConnOdwCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdwCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdwCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fae08c88-7550-479a-b8ed-ffef47e8eed9</id>
                <name>executeSharedDBStatementClient</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121956</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClient(statement, isQuery, paramList, dbname)
{
	var result;
 	var dburl= &apos;jdbc:sqlserver://AZW1DEV-SQL02.clinicient.com:1433;databaseName=&apos;+dbname+&apos;&apos;;
	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),dburl,$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			
			//globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		result = dbConnFhir.executeCachedQuery(statement);
	
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>ed20a457-5beb-4aea-9bb9-cf91112ccc56</id>
            <name>WebPT-Default Functions</name>
            <revision>10</revision>
            <lastModified>
              <time>1690140133487</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>a8a9a0c8-9322-46dc-bef8-011eb3d70291</id>
                <name>Create Header for CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121678</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This creates a header for csv files based on the contents of the header variable.  The header
	variable is populated in the channel from the outbound msg template

	@return {String} return description
*/
function createHeader() {
	//Destination transformer.  this creates the header for each new file

	var path = java.nio.file.Paths.get($(&apos;filePath&apos;)+$(&apos;fileName&apos;));
	var bytes = (new java.lang.String($(&apos;header&apos;))).getBytes(&quot;UTF-8&quot;);
	try {
	  java.nio.file.Files.write(path, bytes, java.nio.file.StandardOpenOption.CREATE_NEW);
	}
	catch (e) {
	  //logger.info(&quot; should throw IOException if file already exists&quot;);
	
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5a886a1f-dab1-41b5-94c6-1a639907d7da</id>
                <name>Filter Message Evaluate Received Checksum</name>
                <revision>33</revision>
                <lastModified>
                  <time>1678916806664</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating a checksum for each provided message.  We save off the most recent 100 unique checksum values in a global 
	array so if the current message has been recently received we are able to ignore it.
	
	@author:  	Jeffrey Ritz
	@scriptName: 	filterEvaluateReceivedChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {boolean} filter - return filter boolean (true= filter msg, false= do not filter msg)
		persist received_checksum global ChannelMap array
		persist filterMessage ChannelMap variable
	@history
*/
function filterEvaluateReceivedChecksum(msg) {	

	var scriptName= &apos;filterEvaluateReceivedChecksum&apos;
	var filter = false;
	var received_len_limit = 999;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B connectorMessage.getRawData() typeof: &apos;+typeof(connectorMessage.getRawData())+&apos; msg: &apos;+connectorMessage.getRawData());
	} // end if 
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	// var dataBytes = new java.lang.String(connectorMessage.getRawData()).getBytes(&apos;UTF-8&apos;);
	// message = new String(message.getBytes(&quot;utf-8&quot;), &quot;utf-8&quot;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	// var dataBytes = new java.lang.String(msg.getBytes(&apos;UTF-8&apos;));
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);

	// var messageObjectgetBytes= checksum.update(connectorMessage.getRawData().getBytes());
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 
	
	$c(&apos;checksum&apos;, checksum.getValue());
	
	//grab the global channel map variable holding the last X unique checksums that we&apos;ve received
	var received = $gc(&apos;received_checksums&apos;);
	
	if (received == undefined) {
		var received = new Array();
		received.push(checksum.getValue());
	} else {
		//check if we&apos;ve recently received this message, skip it if so
		if (received.indexOf(checksum.getValue()) &gt; -1) {
			filter = true;
		//we haven&apos;t seen it recently, so remember it and allow it through
		} else {
			var received_len = received.length;
			if (received_len &gt; received_len_limit) {
				//remove oldest/first entry, shift all entries forward, and add new entry to end
				received.shift();
				received[received_len_limit] = checksum.getValue();
			} else {
				//add new entry to end of array
				received[received_len] = checksum.getValue();
			} // end if 
		} // end if 
	} // end if 

	 //debug code
	/*for (x=0; x&lt;=received_len_limit; x++) {
		$c(&apos;received-&apos;+x, received[x]);
	} */

	$c(&apos;filterMessage&apos;,filter);
	$gc(&apos;received_checksums&apos;,received);

	return filter;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fbd0484d-74a2-48e4-aedd-f97c2fcefa16</id>
                <name>Get Message Checksum</name>
                <revision>12</revision>
                <lastModified>
                  <time>1678916806703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating and reutrning a checksum for each provided message
	
	@author:  	Jeffrey Ritz
	@scriptName: 	getMessageChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {object} result - return checksum value
	@history
	2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() to remove the exponential representation of the number value
*/
function getMessageChecksum(msg) {	

	var scriptName= &apos;getMessageChecksum&apos;;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	} // end if 
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 

	var checksumValue= checksum.getValue();
	// 2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() 
	var arrChecksumValue= new Array(); 
	arrChecksumValue.push(checksumValue);
	$c(&apos;checksum&apos;, arrChecksumValue);

	return checksumValue;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>91db9bd1-ca92-4dcc-bba4-e1ece603fc87</id>
                <name>Remove Child Object From Parent Object Json</name>
                <revision>22</revision>
                <lastModified>
                  <time>1678916845037</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON child object and it&apos;s descendents from a parent object JSON
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeChildObjectFromParentObjectJson.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
		{string} parentObject - place the name of the string to be designated as the parent object in the JSON
		{string} childObject  - place the name of the string to be designated as the child object to be deleted from the JSON
	@param {object} msg - return modified Json object msg excluding specified Json child object
	@history
*/
function removeChildObjectFromParentObjectJson(msg, parentObject, childObject) {
	
	var scriptName= &apos;removeChildObjectFromParentObjectJson&apos;;
	var debug= 0;

	//var strObjJson= JSON.parse(msg);
	var strObjJson= JSON.stringify(msg);
	
	//var objJson= JSON.parse(msg);
	var newParentObjects= new Object();
	var parentObjects= msg;
	var arrParentObjects= new Array();
	var arrTransactionObjects= new Array();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof parentObjects: &apos;+typeof(parentObjects));
	for (var key in parentObjects) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof key: &apos;+typeof(key)+&apos; key: &apos;+key);
		if(key== parentObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof objJson[key]: &apos;+typeof(parentObjects[key])+&apos; parentObjects[key]: &apos;+JSON.stringify(parentObjects[key]));
			
			var newChildObjects= new Object();
			var childObjects= parentObjects[key];
			var arrChildObjects= new Array();
			
			for(var key2 in childObjects) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key2: &apos;+typeof(key2)+&apos; key2: &apos;+key2+&apos; childObject: &apos;+childObject);
				for(var key3 in childObjects[key2]) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key3: &apos;+typeof(key3)+&apos; key3: &apos;+key3+&apos; childObject: &apos;+childObject);
					if(key3== childObject) {
						var transactionObject= new Object();
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; childObject typeof: &apos;+typeof(childObjects[key2][key3])+&apos; childObject: &apos;+JSON.stringify(childObjects[key2][key3]));
						transactionObject.key= key3;
						transactionObject.value= childObjects[key2][key3];
						delete childObjects[key2][key3];
						if(debug&gt;0) logger.info(&apos;DEBUG::&apos;+scriptName+&apos; DELETE childObject: &apos;+key3+&apos; of parentObject: &apos;+JSON.stringify(childObjects[key2]));
						arrTransactionObjects.push(transactionObject);
					} // end if
				} // end for 
				arrChildObjects.push(childObjects[key2]);
			} // end for
			newParentObjects[key]= arrChildObjects;
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add all child keys: &apos;+JSON.stringify(arrChildObjects)+&apos; into ParentObject[&apos;+key+&apos;]: &apos;+newParentObjects[key]);
		} else {
			newParentObjects[key]= parentObjects[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+parentObjects[key]+&apos; string: &apos;+JSON.stringify(parentObjects[key]));
		} // end if
		arrParentObjects.push(newParentObjects);
	} // end for 
	var newMsg= arrParentObjects;
	channelMap.put(&apos;removeChildObjectMsg&apos;,newMsg);
	channelMap.put(&apos;removedChildTransIds&apos;,arrTransactionObjects);
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));
	return newMsg;
	
} </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2ff28338-dfb6-445d-a04e-c74b5486a08c</id>
                <name>Remove Object From Json</name>
                <revision>24</revision>
                <lastModified>
                  <time>1678915278542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON object and it&apos;s descendents from the msg
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeObjectFromJson.js
	@created: 	2023-03-09
	@param {string} msg - Inbound connectorMessage.getRawData()
	@param {string} msg - return modified msg excluding specified Json object from msg
	@history
	2023-03-15 JER - Modified to include removeObject function parameter to specify specific JSON object by referencing key to be removed
*/
function removeObjectFromJson(msg, removeObject) {
	
	var scriptName= &apos;removeObjectFromJson&apos;;
	var debug= 0;
	//var objJson= JSON.stringify(msg);
	var objJson= JSON.parse(msg);
	var newObjJson= new Object();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof objJson: &apos;+typeof(objJson)+&apos; objJSON: &apos;+JSON.stringify(objJson));
	for (var key in objJson) {
		if(key== removeObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; DELETE key: &apos;+key);
			// delete objJson[key];
		} else {
			newObjJson[key]= objJson[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+objJson[key]+&apos; string: &apos;+JSON.stringify(objJson[key]));
		} // end if 
	} // end for 
	var newMsg= newObjJson;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));

	// return JSON.stringify(newMsg);
	return newMsg;
} 
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>993a6fd8-454a-4133-ba32-dbcfea71582b</id>
                <name>Update EDITransactionLog</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123233</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	The purpose of this function is to update the status in Insight.
	Populate the channel map with the following variables functionalGroupControlNumber, status, eventDate

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateStatus () {

	//  Build the llst of paramters to pass to the database
	var paramList = new Packages.java.util.ArrayList();
	paramList.add($(&apos;functionalGroupControlNumber&apos;));
	paramList.add($(&apos;eventDate&apos;));  //dateTime in the acknoledged field in this format (&quot;2017-07-31 14:15:01.577&quot;)
	paramList.add(new java.lang.Integer(parseInt($(&apos;status&apos;), 10)));
	
//	logger.info(&quot;updateStatus &quot;+paramList);

	//  SQL Statement and paramters that will be sent to SQL
	var statement = &quot;EXEC dbo.pr_EDITransactionLog_Update ?, ?, ?&quot;;
	//  Code template used for establishiing connection and passing the sql statement and parameter list  
	var result = executeSharedDBStatementFhirCh(statement, false, paramList);
	return result;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>42cb290e-5fb0-46b8-82db-576ea1e1ba0d</id>
                <name>Update EDITransactionLog from responseStatus in the response transformer </name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123356</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Call this in the response transformer on the destination.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateReponseStatus() {
	var status = 0;
	if (responseStatus == SENT){
		var status = 1;
		channelMap.put(&apos;status&apos;,status);
	}

updateStatus()
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2223579b-f914-4be7-a575-f1a2a2aa1ae2</id>
                <name>ValidateToString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123044</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} mapping - 
	@param {Any} defaultValue - 
	@param {Any} replacement - 
	@return {String} return description
*/
function validateToString(mapping, defaultValue, replacement) {
    if (mapping == null) {
        mapping = &apos;&apos;;
    }
    return validate(mapping, defaultValue, replacement).toString() + &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>8c9a8268-4ef0-43e9-ae5b-bf8895f0b80c</id>
            <name>WebPT-FORMAT</name>
            <revision>3</revision>
            <lastModified>
              <time>1691001755225</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>Include any functions or codes with 
-date &amp; time formating related
-data type formatting</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>920c9ead-70a6-4168-9d95-89261b73ae44</id>
                <name>12digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123520</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Take any 12 digit string yyyyMMddHHmm and change to MM/dd/yyyy HH:mm 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm
*/
function yyyyMMddHHmm(string) {
	return DateUtil.convertDate(&quot;yyyyMMddHHmm&quot;, &quot;MM/dd/yyyy HH:mm&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fe2689ec-1946-46d5-8dd6-8fbbf106e1e6</id>
                <name>14digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122871</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Take 14 digit string yyyyMMddHHmmss and change to MM/dd/yyyy HH:mm:ss 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm:ss
*/
function yyyyMMddHHmmss(string) {
	if (string.length == 14) {
		  return DateUtil.convertDate(&quot;yyyyMMddHHmmss&quot;, &quot;MM/dd/yyyy HH:mm:ss&quot;, string);
	}
	else {
		return &quot;unregcognized string&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b9db35e2-d5bd-48a1-8cc6-3475c698d7b4</id>
                <name>currentDT_yyyy-MM-dd HH:mm:ss.SSS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123114</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Kirby Knight
	Date Modified:  11/09/2020
	Retund the current date/time down to the millisecond

	@return {String} return description
*/
function currentDtToMilliseconds() {
	return DateUtil.getCurrentDate(&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7e747999-4bec-43fc-978d-7049d3543cf0</id>
                <name>fixHL7NodeOrder</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/

function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>dfedacf6-773b-413e-b78d-1bf16a92071d</id>
                <name>formatHL7Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121643</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Take any eight digit HL7 message data string (yyyyMMdd) and formats it human-readable format (MM/dd/yyyy)
	such as 20090612 -&gt; 06/12/2009

	@param {String} arg1 - 8 digit HL7 message data string yyyyMMdd
	@return {String} return date format as MM/dd/yyyy
*/
function formatHL7Date(string) {
	return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;MM/dd/yyyy&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a8f54921-2cb6-4134-8806-3c4e10a757d9</id>
                <name>getCurrentLocalTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122014</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = getCurrentLocalTimestamp();

	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestamp() {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(&quot;EST&quot;)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6c5f1bd8-ebbf-4c8e-b465-0be8ccaba0d0</id>
                <name>getCurrentLocalTimeToMs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123077</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	Gets the current local date/time to the milliseconds
	Converts to the timezone that is passed in Examples (America/New_York, America/Chicago, America/Phoenix )

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestampToMs(timeZone) {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timeZone)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>78d74c5b-c881-404a-ad96-4e909e1a19f3</id>
                <name>phoneToE164</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121982</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Insight phone number to E164 format 5554446666 to +15554446666

	@param {Any} phoneIn - 
	@return {String} return description
*/
function phoneToE164(phoneIn) {
	logger.info(&apos;L1 &apos;+phoneIn);
	if(phoneIn != null ){
	//phoneIn = &apos;+1&apos; + phoneIn.toString(); 
	logger.info(&apos;L2 &apos;+phoneIn);
	return &apos;+1&apos; + phoneIn.toString(); 
	} else{
		return null;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>6a32d94d-408c-4e10-9799-e45e150b5c1f</id>
            <name>WebPT-MISC</name>
            <revision>3</revision>
            <lastModified>
              <time>1690987207668</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>miscellaneous javascript</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>84b4f1c7-f82d-4140-9fbd-98a95f68ff32</id>
                <name>getChannelState</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122648</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetChannelState(channel_id) {

    var channel_status = &quot;NA&quot;;

    var channel_count = parseInt(Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().size());

    for(var i=0;i&lt;channel_count;i++) {
        if (channel_id == Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getChannelId()) {
            channel_status = Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getState();
        }
    }

    return channel_status;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>715435a9-cb15-4e8f-bc5b-4249eaea6e17</id>
                <name>momentjs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122487</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Testing MIRTH-3794 using external JavaScript library &quot;moment.js&quot;
*/
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=b():&quot;function&quot;==typeof define&amp;&amp;define.amd?define(b):a.moment=b()}(this,function(){&quot;use strict&quot;;function a(){return Hc.apply(null,arguments)}function b(a){Hc=a}function c(a){return&quot;[object Array]&quot;===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||&quot;[object Date]&quot;===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c&lt;a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&amp;&amp;(a[c]=b[c]);return f(b,&quot;toString&quot;)&amp;&amp;(a.toString=b.toString),f(b,&quot;valueOf&quot;)&amp;&amp;(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ca(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&amp;&amp;(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow&lt;0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&amp;&amp;(a._isValid=a._isValid&amp;&amp;0===b.charsLeftOver&amp;&amp;0===b.unusedTokens.length&amp;&amp;void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if(&quot;undefined&quot;!=typeof b._isAMomentObject&amp;&amp;(a._isAMomentObject=b._isAMomentObject),&quot;undefined&quot;!=typeof b._i&amp;&amp;(a._i=b._i),&quot;undefined&quot;!=typeof b._f&amp;&amp;(a._f=b._f),&quot;undefined&quot;!=typeof b._l&amp;&amp;(a._l=b._l),&quot;undefined&quot;!=typeof b._strict&amp;&amp;(a._strict=b._strict),&quot;undefined&quot;!=typeof b._tzm&amp;&amp;(a._tzm=b._tzm),&quot;undefined&quot;!=typeof b._isUTC&amp;&amp;(a._isUTC=b._isUTC),&quot;undefined&quot;!=typeof b._offset&amp;&amp;(a._offset=b._offset),&quot;undefined&quot;!=typeof b._pf&amp;&amp;(a._pf=j(b)),&quot;undefined&quot;!=typeof b._locale&amp;&amp;(a._locale=b._locale),Jc.length&gt;0)for(c in Jc)d=Jc[c],e=b[d],&quot;undefined&quot;!=typeof e&amp;&amp;(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),Kc===!1&amp;&amp;(Kc=!0,a.updateOffset(this),Kc=!1)}function o(a){return a instanceof n||null!=a&amp;&amp;null!=a._isAMomentObject}function p(a){return 0&gt;a?Math.ceil(a):Math.floor(a)}function q(a){var b=+a,c=0;return 0!==b&amp;&amp;isFinite(b)&amp;&amp;(c=p(b)),c}function r(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e&gt;d;d++)(c&amp;&amp;a[d]!==b[d]||!c&amp;&amp;q(a[d])!==q(b[d]))&amp;&amp;g++;return g+f}function s(){}function t(a){return a?a.toLowerCase().replace(&quot;_&quot;,&quot;-&quot;):a}function u(a){for(var b,c,d,e,f=0;f&lt;a.length;){for(e=t(a[f]).split(&quot;-&quot;),b=e.length,c=t(a[f+1]),c=c?c.split(&quot;-&quot;):null;b&gt;0;){if(d=v(e.slice(0,b).join(&quot;-&quot;)))return d;if(c&amp;&amp;c.length&gt;=b&amp;&amp;r(e,c,!0)&gt;=b-1)break;b--}f++}return null}function v(a){var b=null;if(!Lc[a]&amp;&amp;&quot;undefined&quot;!=typeof module&amp;&amp;module&amp;&amp;module.exports)try{b=Ic._abbr,require(&quot;./locale/&quot;+a),w(b)}catch(c){}return Lc[a]}function w(a,b){var c;return a&amp;&amp;(c=&quot;undefined&quot;==typeof b?y(a):x(a,b),c&amp;&amp;(Ic=c)),Ic._abbr}function x(a,b){return null!==b?(b.abbr=a,Lc[a]=Lc[a]||new s,Lc[a].set(b),w(a),Lc[a]):(delete Lc[a],null)}function y(a){var b;if(a&amp;&amp;a._locale&amp;&amp;a._locale._abbr&amp;&amp;(a=a._locale._abbr),!a)return Ic;if(!c(a)){if(b=v(a))return b;a=[a]}return u(a)}function z(a,b){var c=a.toLowerCase();Mc[c]=Mc[c+&quot;s&quot;]=Mc[b]=a}function A(a){return&quot;string&quot;==typeof a?Mc[a]||Mc[a.toLowerCase()]:void 0}function B(a){var b,c,d={};for(c in a)f(a,c)&amp;&amp;(b=A(c),b&amp;&amp;(d[b]=a[c]));return d}function C(b,c){return function(d){return null!=d?(E(this,b,d),a.updateOffset(this,c),this):D(this,b)}}function D(a,b){return a._d[&quot;get&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b]()}function E(a,b,c){return a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b](c)}function F(a,b){var c;if(&quot;object&quot;==typeof a)for(c in a)this.set(c,a[c]);else if(a=A(a),&quot;function&quot;==typeof this[a])return this[a](b);return this}function G(a,b,c){var d=&quot;&quot;+Math.abs(a),e=b-d.length,f=a&gt;=0;return(f?c?&quot;+&quot;:&quot;&quot;:&quot;-&quot;)+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function H(a,b,c,d){var e=d;&quot;string&quot;==typeof d&amp;&amp;(e=function(){return this[d]()}),a&amp;&amp;(Qc[a]=e),b&amp;&amp;(Qc[b[0]]=function(){return G(e.apply(this,arguments),b[1],b[2])}),c&amp;&amp;(Qc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function I(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,&quot;&quot;):a.replace(/\\/g,&quot;&quot;)}function J(a){var b,c,d=a.match(Nc);for(b=0,c=d.length;c&gt;b;b++)Qc[d[b]]?d[b]=Qc[d[b]]:d[b]=I(d[b]);return function(e){var f=&quot;&quot;;for(b=0;c&gt;b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function K(a,b){return a.isValid()?(b=L(b,a.localeData()),Pc[b]=Pc[b]||J(b),Pc[b](a)):a.localeData().invalidDate()}function L(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Oc.lastIndex=0;d&gt;=0&amp;&amp;Oc.test(a);)a=a.replace(Oc,c),Oc.lastIndex=0,d-=1;return a}function M(a){return&quot;function&quot;==typeof a&amp;&amp;&quot;[object Function]&quot;===Object.prototype.toString.call(a)}function N(a,b,c){dd[a]=M(b)?b:function(a){return a&amp;&amp;c?c:b}}function O(a,b){return f(dd,a)?dd[a](b._strict,b._locale):new RegExp(P(a))}function P(a){return a.replace(&quot;\\&quot;,&quot;&quot;).replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,&quot;\\$&amp;&quot;)}function Q(a,b){var c,d=b;for(&quot;string&quot;==typeof a&amp;&amp;(a=[a]),&quot;number&quot;==typeof b&amp;&amp;(d=function(a,c){c[b]=q(a)}),c=0;c&lt;a.length;c++)ed[a[c]]=d}function R(a,b){Q(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function S(a,b,c){null!=b&amp;&amp;f(ed,a)&amp;&amp;ed[a](b,c._a,c,a)}function T(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function U(a){return this._months[a.month()]}function V(a){return this._monthsShort[a.month()]}function W(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12&gt;d;d++){if(e=h([2e3,d]),c&amp;&amp;!this._longMonthsParse[d]&amp;&amp;(this._longMonthsParse[d]=new RegExp(&quot;^&quot;+this.months(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;),this._shortMonthsParse[d]=new RegExp(&quot;^&quot;+this.monthsShort(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;)),c||this._monthsParse[d]||(f=&quot;^&quot;+this.months(e,&quot;&quot;)+&quot;|^&quot;+this.monthsShort(e,&quot;&quot;),this._monthsParse[d]=new RegExp(f.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),c&amp;&amp;&quot;MMMM&quot;===b&amp;&amp;this._longMonthsParse[d].test(a))return d;if(c&amp;&amp;&quot;MMM&quot;===b&amp;&amp;this._shortMonthsParse[d].test(a))return d;if(!c&amp;&amp;this._monthsParse[d].test(a))return d}}function X(a,b){var c;return&quot;string&quot;==typeof b&amp;&amp;(b=a.localeData().monthsParse(b),&quot;number&quot;!=typeof b)?a:(c=Math.min(a.date(),T(a.year(),b)),a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+&quot;Month&quot;](b,c),a)}function Y(b){return null!=b?(X(this,b),a.updateOffset(this,!0),this):D(this,&quot;Month&quot;)}function Z(){return T(this.year(),this.month())}function $(a){var b,c=a._a;return c&amp;&amp;-2===j(a).overflow&amp;&amp;(b=c[gd]&lt;0||c[gd]&gt;11?gd:c[hd]&lt;1||c[hd]&gt;T(c[fd],c[gd])?hd:c[id]&lt;0||c[id]&gt;24||24===c[id]&amp;&amp;(0!==c[jd]||0!==c[kd]||0!==c[ld])?id:c[jd]&lt;0||c[jd]&gt;59?jd:c[kd]&lt;0||c[kd]&gt;59?kd:c[ld]&lt;0||c[ld]&gt;999?ld:-1,j(a)._overflowDayOfYear&amp;&amp;(fd&gt;b||b&gt;hd)&amp;&amp;(b=hd),j(a).overflow=b),a}function _(b){a.suppressDeprecationWarnings===!1&amp;&amp;&quot;undefined&quot;!=typeof console&amp;&amp;console.warn&amp;&amp;console.warn(&quot;Deprecation warning: &quot;+b)}function aa(a,b){var c=!0;return g(function(){return c&amp;&amp;(_(a+&quot;\n&quot;+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function ba(a,b){od[a]||(_(b),od[a]=!0)}function ca(a){var b,c,d=a._i,e=pd.exec(d);if(e){for(j(a).iso=!0,b=0,c=qd.length;c&gt;b;b++)if(qd[b][1].exec(d)){a._f=qd[b][0];break}for(b=0,c=rd.length;c&gt;b;b++)if(rd[b][1].exec(d)){a._f+=(e[6]||&quot; &quot;)+rd[b][0];break}d.match(ad)&amp;&amp;(a._f+=&quot;Z&quot;),va(a)}else a._isValid=!1}function da(b){var c=sd.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ca(b),void(b._isValid===!1&amp;&amp;(delete b._isValid,a.createFromInputFallback(b))))}function ea(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970&gt;a&amp;&amp;h.setFullYear(a),h}function fa(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970&gt;a&amp;&amp;b.setUTCFullYear(a),b}function ga(a){return ha(a)?366:365}function ha(a){return a%4===0&amp;&amp;a%100!==0||a%400===0}function ia(){return ha(this.year())}function ja(a,b,c){var d,e=c-b,f=c-a.day();return f&gt;e&amp;&amp;(f-=7),e-7&gt;f&amp;&amp;(f+=7),d=Da(a).add(f,&quot;d&quot;),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ka(a){return ja(a,this._week.dow,this._week.doy).week}function la(){return this._week.dow}function ma(){return this._week.doy}function na(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function oa(a){var b=ja(this,1,4).week;return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function pa(a,b,c,d,e){var f,g=6+e-d,h=fa(a,0,1+g),i=h.getUTCDay();return e&gt;i&amp;&amp;(i+=7),c=null!=c?1*c:e,f=1+g+7*(b-1)-i+c,{year:f&gt;0?a:a-1,dayOfYear:f&gt;0?f:ga(a-1)+f}}function qa(a){var b=Math.round((this.clone().startOf(&quot;day&quot;)-this.clone().startOf(&quot;year&quot;))/864e5)+1;return null==a?b:this.add(a-b,&quot;d&quot;)}function ra(a,b,c){return null!=a?a:null!=b?b:c}function sa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ta(a){var b,c,d,e,f=[];if(!a._d){for(d=sa(a),a._w&amp;&amp;null==a._a[hd]&amp;&amp;null==a._a[gd]&amp;&amp;ua(a),a._dayOfYear&amp;&amp;(e=ra(a._a[fd],d[fd]),a._dayOfYear&gt;ga(e)&amp;&amp;(j(a)._overflowDayOfYear=!0),c=fa(e,0,a._dayOfYear),a._a[gd]=c.getUTCMonth(),a._a[hd]=c.getUTCDate()),b=0;3&gt;b&amp;&amp;null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7&gt;b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[id]&amp;&amp;0===a._a[jd]&amp;&amp;0===a._a[kd]&amp;&amp;0===a._a[ld]&amp;&amp;(a._nextDay=!0,a._a[id]=0),a._d=(a._useUTC?fa:ea).apply(null,f),null!=a._tzm&amp;&amp;a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&amp;&amp;(a._a[id]=24)}}function ua(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=ra(b.GG,a._a[fd],ja(Da(),1,4).year),d=ra(b.W,1),e=ra(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=ra(b.gg,a._a[fd],ja(Da(),f,g).year),d=ra(b.w,1),null!=b.d?(e=b.d,f&gt;e&amp;&amp;++d):e=null!=b.e?b.e+f:f),h=pa(c,d,e,g,f),a._a[fd]=h.year,a._dayOfYear=h.dayOfYear}function va(b){if(b._f===a.ISO_8601)return void ca(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=&quot;&quot;+b._i,i=h.length,k=0;for(e=L(b._f,b._locale).match(Nc)||[],c=0;c&lt;e.length;c++)f=e[c],d=(h.match(O(f,b))||[])[0],d&amp;&amp;(g=h.substr(0,h.indexOf(d)),g.length&gt;0&amp;&amp;j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Qc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),S(f,d,b)):b._strict&amp;&amp;!d&amp;&amp;j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length&gt;0&amp;&amp;j(b).unusedInput.push(h),j(b).bigHour===!0&amp;&amp;b._a[id]&lt;=12&amp;&amp;b._a[id]&gt;0&amp;&amp;(j(b).bigHour=void 0),b._a[id]=wa(b._locale,b._a[id],b._meridiem),ta(b),$(b)}function wa(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&amp;&amp;12&gt;b&amp;&amp;(b+=12),d||12!==b||(b=0),b):b}function xa(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e&lt;a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&amp;&amp;(b._useUTC=a._useUTC),b._f=a._f[e],va(b),k(b)&amp;&amp;(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d&gt;f)&amp;&amp;(d=f,c=b));g(a,c||b)}function ya(a){if(!a._d){var b=B(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ta(a)}}function za(a){var b=new n($(Aa(a)));return b._nextDay&amp;&amp;(b.add(1,&quot;d&quot;),b._nextDay=void 0),b}function Aa(a){var b=a._i,e=a._f;return a._locale=a._locale||y(a._l),null===b||void 0===e&amp;&amp;&quot;&quot;===b?l({nullInput:!0}):(&quot;string&quot;==typeof b&amp;&amp;(a._i=b=a._locale.preparse(b)),o(b)?new n($(b)):(c(e)?xa(a):e?va(a):d(b)?a._d=b:Ba(a),a))}function Ba(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):&quot;string&quot;==typeof f?da(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ta(b)):&quot;object&quot;==typeof f?ya(b):&quot;number&quot;==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ca(a,b,c,d,e){var f={};return&quot;boolean&quot;==typeof c&amp;&amp;(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,za(f)}function Da(a,b,c,d){return Ca(a,b,c,d,!1)}function Ea(a,b){var d,e;if(1===b.length&amp;&amp;c(b[0])&amp;&amp;(b=b[0]),!b.length)return Da();for(d=b[0],e=1;e&lt;b.length;++e)(!b[e].isValid()||b[e][a](d))&amp;&amp;(d=b[e]);return d}function Fa(){var a=[].slice.call(arguments,0);return Ea(&quot;isBefore&quot;,a)}function Ga(){var a=[].slice.call(arguments,0);return Ea(&quot;isAfter&quot;,a)}function Ha(a){var b=B(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=y(),this._bubble()}function Ia(a){return a instanceof Ha}function Ja(a,b){H(a,0,0,function(){var a=this.utcOffset(),c=&quot;+&quot;;return 0&gt;a&amp;&amp;(a=-a,c=&quot;-&quot;),c+G(~~(a/60),2)+b+G(~~a%60,2)})}function Ka(a){var b=(a||&quot;&quot;).match(ad)||[],c=b[b.length-1]||[],d=(c+&quot;&quot;).match(xd)||[&quot;-&quot;,0,0],e=+(60*d[1])+q(d[2]);return&quot;+&quot;===d[0]?e:-e}function La(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Da(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Da(b).local()}function Ma(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Na(b,c){var d,e=this._offset||0;return null!=b?(&quot;string&quot;==typeof b&amp;&amp;(b=Ka(b)),Math.abs(b)&lt;16&amp;&amp;(b=60*b),!this._isUTC&amp;&amp;c&amp;&amp;(d=Ma(this)),this._offset=b,this._isUTC=!0,null!=d&amp;&amp;this.add(d,&quot;m&quot;),e!==b&amp;&amp;(!c||this._changeInProgress?bb(this,Ya(b-e,&quot;m&quot;),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ma(this)}function Oa(a,b){return null!=a?(&quot;string&quot;!=typeof a&amp;&amp;(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Pa(a){return this.utcOffset(0,a)}function Qa(a){return this._isUTC&amp;&amp;(this.utcOffset(0,a),this._isUTC=!1,a&amp;&amp;this.subtract(Ma(this),&quot;m&quot;)),this}function Ra(){return this._tzm?this.utcOffset(this._tzm):&quot;string&quot;==typeof this._i&amp;&amp;this.utcOffset(Ka(this._i)),this}function Sa(a){return a=a?Da(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Ta(){return this.utcOffset()&gt;this.clone().month(0).utcOffset()||this.utcOffset()&gt;this.clone().month(5).utcOffset()}function Ua(){if(&quot;undefined&quot;!=typeof this._isDSTShifted)return this._isDSTShifted;var a={};if(m(a,this),a=Aa(a),a._a){var b=a._isUTC?h(a._a):Da(a._a);this._isDSTShifted=this.isValid()&amp;&amp;r(a._a,b.toArray())&gt;0}else this._isDSTShifted=!1;return this._isDSTShifted}function Va(){return!this._isUTC}function Wa(){return this._isUTC}function Xa(){return this._isUTC&amp;&amp;0===this._offset}function Ya(a,b){var c,d,e,g=a,h=null;return Ia(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:&quot;number&quot;==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=yd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:0,d:q(h[hd])*c,h:q(h[id])*c,m:q(h[jd])*c,s:q(h[kd])*c,ms:q(h[ld])*c}):(h=zd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:Za(h[2],c),M:Za(h[3],c),d:Za(h[4],c),h:Za(h[5],c),m:Za(h[6],c),s:Za(h[7],c),w:Za(h[8],c)}):null==g?g={}:&quot;object&quot;==typeof g&amp;&amp;(&quot;from&quot;in g||&quot;to&quot;in g)&amp;&amp;(e=_a(Da(g.from),Da(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ha(g),Ia(a)&amp;&amp;f(a,&quot;_locale&quot;)&amp;&amp;(d._locale=a._locale),d}function Za(a,b){var c=a&amp;&amp;parseFloat(a.replace(&quot;,&quot;,&quot;.&quot;));return(isNaN(c)?0:c)*b}function $a(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,&quot;M&quot;).isAfter(b)&amp;&amp;--c.months,c.milliseconds=+b-+a.clone().add(c.months,&quot;M&quot;),c}function _a(a,b){var c;return b=La(b,a),a.isBefore(b)?c=$a(a,b):(c=$a(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function ab(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(ba(b,&quot;moment().&quot;+b+&quot;(period, number) is deprecated. Please use moment().&quot;+b+&quot;(number, period).&quot;),f=c,c=d,d=f),c=&quot;string&quot;==typeof c?+c:c,e=Ya(c,d),bb(this,e,a),this}}function bb(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&amp;&amp;b._d.setTime(+b._d+f*d),g&amp;&amp;E(b,&quot;Date&quot;,D(b,&quot;Date&quot;)+g*d),h&amp;&amp;X(b,D(b,&quot;Month&quot;)+h*d),e&amp;&amp;a.updateOffset(b,g||h)}function cb(a,b){var c=a||Da(),d=La(c,this).startOf(&quot;day&quot;),e=this.diff(d,&quot;days&quot;,!0),f=-6&gt;e?&quot;sameElse&quot;:-1&gt;e?&quot;lastWeek&quot;:0&gt;e?&quot;lastDay&quot;:1&gt;e?&quot;sameDay&quot;:2&gt;e?&quot;nextDay&quot;:7&gt;e?&quot;nextWeek&quot;:&quot;sameElse&quot;;return this.format(b&amp;&amp;b[f]||this.localeData().calendar(f,this,Da(c)))}function db(){return new n(this)}function eb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this&gt;+a):(c=o(a)?+a:+Da(a),c&lt;+this.clone().startOf(b))}function fb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+a&gt;+this):(c=o(a)?+a:+Da(a),+this.clone().endOf(b)&lt;c)}function gb(a,b,c){return this.isAfter(a,c)&amp;&amp;this.isBefore(b,c)}function hb(a,b){var c;return b=A(b||&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this===+a):(c=+Da(a),+this.clone().startOf(b)&lt;=c&amp;&amp;c&lt;=+this.clone().endOf(b))}function ib(a,b,c){var d,e,f=La(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=A(b),&quot;year&quot;===b||&quot;month&quot;===b||&quot;quarter&quot;===b?(e=jb(this,f),&quot;quarter&quot;===b?e/=3:&quot;year&quot;===b&amp;&amp;(e/=12)):(d=this-f,e=&quot;second&quot;===b?d/1e3:&quot;minute&quot;===b?d/6e4:&quot;hour&quot;===b?d/36e5:&quot;day&quot;===b?(d-g)/864e5:&quot;week&quot;===b?(d-g)/6048e5:d),c?e:p(e)}function jb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,&quot;months&quot;);return 0&gt;b-f?(c=a.clone().add(e-1,&quot;months&quot;),d=(b-f)/(f-c)):(c=a.clone().add(e+1,&quot;months&quot;),d=(b-f)/(c-f)),-(e+d)}function kb(){return this.clone().locale(&quot;en&quot;).format(&quot;ddd MMM DD YYYY HH:mm:ss [GMT]ZZ&quot;)}function lb(){var a=this.clone().utc();return 0&lt;a.year()&amp;&amp;a.year()&lt;=9999?&quot;function&quot;==typeof Date.prototype.toISOString?this.toDate().toISOString():K(a,&quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;):K(a,&quot;YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;)}function mb(b){var c=K(this,b||a.defaultFormat);return this.localeData().postformat(c)}function nb(a,b){return this.isValid()?Ya({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.from(Da(),a)}function pb(a,b){return this.isValid()?Ya({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function qb(a){return this.to(Da(),a)}function rb(a){var b;return void 0===a?this._locale._abbr:(b=y(a),null!=b&amp;&amp;(this._locale=b),this)}function sb(){return this._locale}function tb(a){switch(a=A(a)){case&quot;year&quot;:this.month(0);case&quot;quarter&quot;:case&quot;month&quot;:this.date(1);case&quot;week&quot;:case&quot;isoWeek&quot;:case&quot;day&quot;:this.hours(0);case&quot;hour&quot;:this.minutes(0);case&quot;minute&quot;:this.seconds(0);case&quot;second&quot;:this.milliseconds(0)}return&quot;week&quot;===a&amp;&amp;this.weekday(0),&quot;isoWeek&quot;===a&amp;&amp;this.isoWeekday(1),&quot;quarter&quot;===a&amp;&amp;this.month(3*Math.floor(this.month()/3)),this}function ub(a){return a=A(a),void 0===a||&quot;millisecond&quot;===a?this:this.startOf(a).add(1,&quot;isoWeek&quot;===a?&quot;week&quot;:a).subtract(1,&quot;ms&quot;)}function vb(){return+this._d-6e4*(this._offset||0)}function wb(){return Math.floor(+this/1e3)}function xb(){return this._offset?new Date(+this):this._d}function yb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function zb(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Ab(){return k(this)}function Bb(){return g({},j(this))}function Cb(){return j(this).overflow}function Db(a,b){H(0,[a,a.length],0,b)}function Eb(a,b,c){return ja(Da([a,11,31+b-c]),b,c).week}function Fb(a){var b=ja(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Gb(a){var b=ja(this,1,4).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Hb(){return Eb(this.year(),1,4)}function Ib(){var a=this.localeData()._week;return Eb(this.year(),a.dow,a.doy)}function Jb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Kb(a,b){return&quot;string&quot;!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),&quot;number&quot;==typeof a?a:null):parseInt(a,10)}function Lb(a){return this._weekdays[a.day()]}function Mb(a){return this._weekdaysShort[a.day()]}function Nb(a){return this._weekdaysMin[a.day()]}function Ob(a){var b,c,d;for(this._weekdaysParse=this._weekdaysParse||[],b=0;7&gt;b;b++)if(this._weekdaysParse[b]||(c=Da([2e3,1]).day(b),d=&quot;^&quot;+this.weekdays(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysShort(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysMin(c,&quot;&quot;),this._weekdaysParse[b]=new RegExp(d.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),this._weekdaysParse[b].test(a))return b}function Pb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Kb(a,this.localeData()),this.add(a-b,&quot;d&quot;)):b}function Qb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,&quot;d&quot;)}function Rb(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Sb(a,b){H(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Tb(a,b){return b._meridiemParse}function Ub(a){return&quot;p&quot;===(a+&quot;&quot;).toLowerCase().charAt(0)}function Vb(a,b,c){return a&gt;11?c?&quot;pm&quot;:&quot;PM&quot;:c?&quot;am&quot;:&quot;AM&quot;}function Wb(a,b){b[ld]=q(1e3*(&quot;0.&quot;+a))}function Xb(){return this._isUTC?&quot;UTC&quot;:&quot;&quot;}function Yb(){return this._isUTC?&quot;Coordinated Universal Time&quot;:&quot;&quot;}function Zb(a){return Da(1e3*a)}function $b(){return Da.apply(null,arguments).parseZone()}function _b(a,b,c){var d=this._calendar[a];return&quot;function&quot;==typeof d?d.call(b,c):d}function ac(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function bc(){return this._invalidDate}function cc(a){return this._ordinal.replace(&quot;%d&quot;,a)}function dc(a){return a}function ec(a,b,c,d){var e=this._relativeTime[c];return&quot;function&quot;==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function fc(a,b){var c=this._relativeTime[a&gt;0?&quot;future&quot;:&quot;past&quot;];return&quot;function&quot;==typeof c?c(b):c.replace(/%s/i,b)}function gc(a){var b,c;for(c in a)b=a[c],&quot;function&quot;==typeof b?this[c]=b:this[&quot;_&quot;+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+&quot;|&quot;+/\d{1,2}/.source)}function hc(a,b,c,d){var e=y(),f=h().set(d,b);return e[c](f,a)}function ic(a,b,c,d,e){if(&quot;number&quot;==typeof a&amp;&amp;(b=a,a=void 0),a=a||&quot;&quot;,null!=b)return hc(a,b,c,e);var f,g=[];for(f=0;d&gt;f;f++)g[f]=hc(a,f,c,e);return g}function jc(a,b){return ic(a,b,&quot;months&quot;,12,&quot;month&quot;)}function kc(a,b){return ic(a,b,&quot;monthsShort&quot;,12,&quot;month&quot;)}function lc(a,b){return ic(a,b,&quot;weekdays&quot;,7,&quot;day&quot;)}function mc(a,b){return ic(a,b,&quot;weekdaysShort&quot;,7,&quot;day&quot;)}function nc(a,b){return ic(a,b,&quot;weekdaysMin&quot;,7,&quot;day&quot;)}function oc(){var a=this._data;return this._milliseconds=Wd(this._milliseconds),this._days=Wd(this._days),this._months=Wd(this._months),a.milliseconds=Wd(a.milliseconds),a.seconds=Wd(a.seconds),a.minutes=Wd(a.minutes),a.hours=Wd(a.hours),a.months=Wd(a.months),a.years=Wd(a.years),this}function pc(a,b,c,d){var e=Ya(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function qc(a,b){return pc(this,a,b,1)}function rc(a,b){return pc(this,a,b,-1)}function sc(a){return 0&gt;a?Math.floor(a):Math.ceil(a)}function tc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f&gt;=0&amp;&amp;g&gt;=0&amp;&amp;h&gt;=0||0&gt;=f&amp;&amp;0&gt;=g&amp;&amp;0&gt;=h||(f+=864e5*sc(vc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=p(f/1e3),i.seconds=a%60,b=p(a/60),i.minutes=b%60,c=p(b/60),i.hours=c%24,g+=p(c/24),e=p(uc(g)),h+=e,g-=sc(vc(e)),d=p(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function uc(a){return 4800*a/146097}function vc(a){return 146097*a/4800}function wc(a){var b,c,d=this._milliseconds;if(a=A(a),&quot;month&quot;===a||&quot;year&quot;===a)return b=this._days+d/864e5,c=this._months+uc(b),&quot;month&quot;===a?c:c/12;switch(b=this._days+Math.round(vc(this._months)),a){case&quot;week&quot;:return b/7+d/6048e5;case&quot;day&quot;:return b+d/864e5;case&quot;hour&quot;:return 24*b+d/36e5;case&quot;minute&quot;:return 1440*b+d/6e4;case&quot;second&quot;:return 86400*b+d/1e3;case&quot;millisecond&quot;:return Math.floor(864e5*b)+d;default:throw new Error(&quot;Unknown unit &quot;+a)}}function xc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*q(this._months/12)}function yc(a){return function(){return this.as(a)}}function zc(a){return a=A(a),this[a+&quot;s&quot;]()}function Ac(a){return function(){return this._data[a]}}function Bc(){return p(this.days()/7)}function Cc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Dc(a,b,c){var d=Ya(a).abs(),e=ke(d.as(&quot;s&quot;)),f=ke(d.as(&quot;m&quot;)),g=ke(d.as(&quot;h&quot;)),h=ke(d.as(&quot;d&quot;)),i=ke(d.as(&quot;M&quot;)),j=ke(d.as(&quot;y&quot;)),k=e&lt;le.s&amp;&amp;[&quot;s&quot;,e]||1===f&amp;&amp;[&quot;m&quot;]||f&lt;le.m&amp;&amp;[&quot;mm&quot;,f]||1===g&amp;&amp;[&quot;h&quot;]||g&lt;le.h&amp;&amp;[&quot;hh&quot;,g]||1===h&amp;&amp;[&quot;d&quot;]||h&lt;le.d&amp;&amp;[&quot;dd&quot;,h]||1===i&amp;&amp;[&quot;M&quot;]||i&lt;le.M&amp;&amp;[&quot;MM&quot;,i]||1===j&amp;&amp;[&quot;y&quot;]||[&quot;yy&quot;,j];return k[2]=b,k[3]=+a&gt;0,k[4]=c,Cc.apply(null,k)}function Ec(a,b){return void 0===le[a]?!1:void 0===b?le[a]:(le[a]=b,!0)}function Fc(a){var b=this.localeData(),c=Dc(this,!a,b);return a&amp;&amp;(c=b.pastFuture(+this,c)),b.postformat(c)}function Gc(){var a,b,c,d=me(this._milliseconds)/1e3,e=me(this._days),f=me(this._months);a=p(d/60),b=p(a/60),d%=60,a%=60,c=p(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0&gt;m?&quot;-&quot;:&quot;&quot;)+&quot;P&quot;+(g?g+&quot;Y&quot;:&quot;&quot;)+(h?h+&quot;M&quot;:&quot;&quot;)+(i?i+&quot;D&quot;:&quot;&quot;)+(j||k||l?&quot;T&quot;:&quot;&quot;)+(j?j+&quot;H&quot;:&quot;&quot;)+(k?k+&quot;M&quot;:&quot;&quot;)+(l?l+&quot;S&quot;:&quot;&quot;):&quot;P0D&quot;}var Hc,Ic,Jc=a.momentProperties=[],Kc=!1,Lc={},Mc={},Nc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Pc={},Qc={},Rc=/\d/,Sc=/\d\d/,Tc=/\d{3}/,Uc=/\d{4}/,Vc=/[+-]?\d{6}/,Wc=/\d\d?/,Xc=/\d{1,3}/,Yc=/\d{1,4}/,Zc=/[+-]?\d{1,6}/,$c=/\d+/,_c=/[+-]?\d+/,ad=/Z|[+-]\d\d:?\d\d/gi,bd=/[+-]?\d+(\.\d{1,3})?/,cd=/[0-9]*[&apos;a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,dd={},ed={},fd=0,gd=1,hd=2,id=3,jd=4,kd=5,ld=6;H(&quot;M&quot;,[&quot;MM&quot;,2],&quot;Mo&quot;,function(){return this.month()+1}),H(&quot;MMM&quot;,0,0,function(a){return this.localeData().monthsShort(this,a)}),H(&quot;MMMM&quot;,0,0,function(a){return this.localeData().months(this,a)}),z(&quot;month&quot;,&quot;M&quot;),N(&quot;M&quot;,Wc),N(&quot;MM&quot;,Wc,Sc),N(&quot;MMM&quot;,cd),N(&quot;MMMM&quot;,cd),Q([&quot;M&quot;,&quot;MM&quot;],function(a,b){b[gd]=q(a)-1}),Q([&quot;MMM&quot;,&quot;MMMM&quot;],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[gd]=e:j(c).invalidMonth=a});var md=&quot;January_February_March_April_May_June_July_August_September_October_November_December&quot;.split(&quot;_&quot;),nd=&quot;Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec&quot;.split(&quot;_&quot;),od={};a.suppressDeprecationWarnings=!1;var pd=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,qd=[[&quot;YYYYYY-MM-DD&quot;,/[+-]\d{6}-\d{2}-\d{2}/],[&quot;YYYY-MM-DD&quot;,/\d{4}-\d{2}-\d{2}/],[&quot;GGGG-[W]WW-E&quot;,/\d{4}-W\d{2}-\d/],[&quot;GGGG-[W]WW&quot;,/\d{4}-W\d{2}/],[&quot;YYYY-DDD&quot;,/\d{4}-\d{3}/]],rd=[[&quot;HH:mm:ss.SSSS&quot;,/(T| )\d\d:\d\d:\d\d\.\d+/],[&quot;HH:mm:ss&quot;,/(T| )\d\d:\d\d:\d\d/],[&quot;HH:mm&quot;,/(T| )\d\d:\d\d/],[&quot;HH&quot;,/(T| )\d\d/]],sd=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=aa(&quot;moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.&quot;,function(a){a._d=new Date(a._i+(a._useUTC?&quot; UTC&quot;:&quot;&quot;))}),H(0,[&quot;YY&quot;,2],0,function(){return this.year()%100}),H(0,[&quot;YYYY&quot;,4],0,&quot;year&quot;),H(0,[&quot;YYYYY&quot;,5],0,&quot;year&quot;),H(0,[&quot;YYYYYY&quot;,6,!0],0,&quot;year&quot;),z(&quot;year&quot;,&quot;y&quot;),N(&quot;Y&quot;,_c),N(&quot;YY&quot;,Wc,Sc),N(&quot;YYYY&quot;,Yc,Uc),N(&quot;YYYYY&quot;,Zc,Vc),N(&quot;YYYYYY&quot;,Zc,Vc),Q([&quot;YYYYY&quot;,&quot;YYYYYY&quot;],fd),Q(&quot;YYYY&quot;,function(b,c){c[fd]=2===b.length?a.parseTwoDigitYear(b):q(b)}),Q(&quot;YY&quot;,function(b,c){c[fd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return q(a)+(q(a)&gt;68?1900:2e3)};var td=C(&quot;FullYear&quot;,!1);H(&quot;w&quot;,[&quot;ww&quot;,2],&quot;wo&quot;,&quot;week&quot;),H(&quot;W&quot;,[&quot;WW&quot;,2],&quot;Wo&quot;,&quot;isoWeek&quot;),z(&quot;week&quot;,&quot;w&quot;),z(&quot;isoWeek&quot;,&quot;W&quot;),N(&quot;w&quot;,Wc),N(&quot;ww&quot;,Wc,Sc),N(&quot;W&quot;,Wc),N(&quot;WW&quot;,Wc,Sc),R([&quot;w&quot;,&quot;ww&quot;,&quot;W&quot;,&quot;WW&quot;],function(a,b,c,d){b[d.substr(0,1)]=q(a)});var ud={dow:0,doy:6};H(&quot;DDD&quot;,[&quot;DDDD&quot;,3],&quot;DDDo&quot;,&quot;dayOfYear&quot;),z(&quot;dayOfYear&quot;,&quot;DDD&quot;),N(&quot;DDD&quot;,Xc),N(&quot;DDDD&quot;,Tc),Q([&quot;DDD&quot;,&quot;DDDD&quot;],function(a,b,c){c._dayOfYear=q(a)}),a.ISO_8601=function(){};var vd=aa(&quot;moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return this&gt;a?this:a}),wd=aa(&quot;moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return a&gt;this?this:a});Ja(&quot;Z&quot;,&quot;:&quot;),Ja(&quot;ZZ&quot;,&quot;&quot;),N(&quot;Z&quot;,ad),N(&quot;ZZ&quot;,ad),Q([&quot;Z&quot;,&quot;ZZ&quot;],function(a,b,c){c._useUTC=!0,c._tzm=Ka(a)});var xd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var yd=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,zd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Ya.fn=Ha.prototype;var Ad=ab(1,&quot;add&quot;),Bd=ab(-1,&quot;subtract&quot;);a.defaultFormat=&quot;YYYY-MM-DDTHH:mm:ssZ&quot;;var Cd=aa(&quot;moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.&quot;,function(a){return void 0===a?this.localeData():this.locale(a)});H(0,[&quot;gg&quot;,2],0,function(){return this.weekYear()%100}),H(0,[&quot;GG&quot;,2],0,function(){return this.isoWeekYear()%100}),Db(&quot;gggg&quot;,&quot;weekYear&quot;),Db(&quot;ggggg&quot;,&quot;weekYear&quot;),Db(&quot;GGGG&quot;,&quot;isoWeekYear&quot;),Db(&quot;GGGGG&quot;,&quot;isoWeekYear&quot;),z(&quot;weekYear&quot;,&quot;gg&quot;),z(&quot;isoWeekYear&quot;,&quot;GG&quot;),N(&quot;G&quot;,_c),N(&quot;g&quot;,_c),N(&quot;GG&quot;,Wc,Sc),N(&quot;gg&quot;,Wc,Sc),N(&quot;GGGG&quot;,Yc,Uc),N(&quot;gggg&quot;,Yc,Uc),N(&quot;GGGGG&quot;,Zc,Vc),N(&quot;ggggg&quot;,Zc,Vc),R([&quot;gggg&quot;,&quot;ggggg&quot;,&quot;GGGG&quot;,&quot;GGGGG&quot;],function(a,b,c,d){b[d.substr(0,2)]=q(a)}),R([&quot;gg&quot;,&quot;GG&quot;],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),H(&quot;Q&quot;,0,0,&quot;quarter&quot;),z(&quot;quarter&quot;,&quot;Q&quot;),N(&quot;Q&quot;,Rc),Q(&quot;Q&quot;,function(a,b){b[gd]=3*(q(a)-1)}),H(&quot;D&quot;,[&quot;DD&quot;,2],&quot;Do&quot;,&quot;date&quot;),z(&quot;date&quot;,&quot;D&quot;),N(&quot;D&quot;,Wc),N(&quot;DD&quot;,Wc,Sc),N(&quot;Do&quot;,function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),Q([&quot;D&quot;,&quot;DD&quot;],hd),Q(&quot;Do&quot;,function(a,b){b[hd]=q(a.match(Wc)[0],10)});var Dd=C(&quot;Date&quot;,!0);H(&quot;d&quot;,0,&quot;do&quot;,&quot;day&quot;),H(&quot;dd&quot;,0,0,function(a){return this.localeData().weekdaysMin(this,a)}),H(&quot;ddd&quot;,0,0,function(a){return this.localeData().weekdaysShort(this,a)}),H(&quot;dddd&quot;,0,0,function(a){return this.localeData().weekdays(this,a)}),H(&quot;e&quot;,0,0,&quot;weekday&quot;),H(&quot;E&quot;,0,0,&quot;isoWeekday&quot;),z(&quot;day&quot;,&quot;d&quot;),z(&quot;weekday&quot;,&quot;e&quot;),z(&quot;isoWeekday&quot;,&quot;E&quot;),N(&quot;d&quot;,Wc),N(&quot;e&quot;,Wc),N(&quot;E&quot;,Wc),N(&quot;dd&quot;,cd),N(&quot;ddd&quot;,cd),N(&quot;dddd&quot;,cd),R([&quot;dd&quot;,&quot;ddd&quot;,&quot;dddd&quot;],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),R([&quot;d&quot;,&quot;e&quot;,&quot;E&quot;],function(a,b,c,d){b[d]=q(a)});var Ed=&quot;Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday&quot;.split(&quot;_&quot;),Fd=&quot;Sun_Mon_Tue_Wed_Thu_Fri_Sat&quot;.split(&quot;_&quot;),Gd=&quot;Su_Mo_Tu_We_Th_Fr_Sa&quot;.split(&quot;_&quot;);H(&quot;H&quot;,[&quot;HH&quot;,2],0,&quot;hour&quot;),H(&quot;h&quot;,[&quot;hh&quot;,2],0,function(){return this.hours()%12||12}),Sb(&quot;a&quot;,!0),Sb(&quot;A&quot;,!1),z(&quot;hour&quot;,&quot;h&quot;),N(&quot;a&quot;,Tb),N(&quot;A&quot;,Tb),N(&quot;H&quot;,Wc),N(&quot;h&quot;,Wc),N(&quot;HH&quot;,Wc,Sc),N(&quot;hh&quot;,Wc,Sc),Q([&quot;H&quot;,&quot;HH&quot;],id),Q([&quot;a&quot;,&quot;A&quot;],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),Q([&quot;h&quot;,&quot;hh&quot;],function(a,b,c){b[id]=q(a),j(c).bigHour=!0});var Hd=/[ap]\.?m?\.?/i,Id=C(&quot;Hours&quot;,!0);H(&quot;m&quot;,[&quot;mm&quot;,2],0,&quot;minute&quot;),z(&quot;minute&quot;,&quot;m&quot;),N(&quot;m&quot;,Wc),N(&quot;mm&quot;,Wc,Sc),Q([&quot;m&quot;,&quot;mm&quot;],jd);var Jd=C(&quot;Minutes&quot;,!1);H(&quot;s&quot;,[&quot;ss&quot;,2],0,&quot;second&quot;),z(&quot;second&quot;,&quot;s&quot;),N(&quot;s&quot;,Wc),N(&quot;ss&quot;,Wc,Sc),Q([&quot;s&quot;,&quot;ss&quot;],kd);var Kd=C(&quot;Seconds&quot;,!1);H(&quot;S&quot;,0,0,function(){return~~(this.millisecond()/100)}),H(0,[&quot;SS&quot;,2],0,function(){return~~(this.millisecond()/10)}),H(0,[&quot;SSS&quot;,3],0,&quot;millisecond&quot;),H(0,[&quot;SSSS&quot;,4],0,function(){return 10*this.millisecond()}),H(0,[&quot;SSSSS&quot;,5],0,function(){return 100*this.millisecond()}),H(0,[&quot;SSSSSS&quot;,6],0,function(){return 1e3*this.millisecond()}),H(0,[&quot;SSSSSSS&quot;,7],0,function(){return 1e4*this.millisecond()}),H(0,[&quot;SSSSSSSS&quot;,8],0,function(){return 1e5*this.millisecond()}),H(0,[&quot;SSSSSSSSS&quot;,9],0,function(){return 1e6*this.millisecond()}),z(&quot;millisecond&quot;,&quot;ms&quot;),N(&quot;S&quot;,Xc,Rc),N(&quot;SS&quot;,Xc,Sc),N(&quot;SSS&quot;,Xc,Tc);var Ld;for(Ld=&quot;SSSS&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)N(Ld,$c);for(Ld=&quot;S&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)Q(Ld,Wb);var Md=C(&quot;Milliseconds&quot;,!1);H(&quot;z&quot;,0,0,&quot;zoneAbbr&quot;),H(&quot;zz&quot;,0,0,&quot;zoneName&quot;);var Nd=n.prototype;Nd.add=Ad,Nd.calendar=cb,Nd.clone=db,Nd.diff=ib,Nd.endOf=ub,Nd.format=mb,Nd.from=nb,Nd.fromNow=ob,Nd.to=pb,Nd.toNow=qb,Nd.get=F,Nd.invalidAt=Cb,Nd.isAfter=eb,Nd.isBefore=fb,Nd.isBetween=gb,Nd.isSame=hb,Nd.isValid=Ab,Nd.lang=Cd,Nd.locale=rb,Nd.localeData=sb,Nd.max=wd,Nd.min=vd,Nd.parsingFlags=Bb,Nd.set=F,Nd.startOf=tb,Nd.subtract=Bd,Nd.toArray=yb,Nd.toObject=zb,Nd.toDate=xb,Nd.toISOString=lb,Nd.toJSON=lb,Nd.toString=kb,Nd.unix=wb,Nd.valueOf=vb,Nd.year=td,Nd.isLeapYear=ia,Nd.weekYear=Fb,Nd.isoWeekYear=Gb,Nd.quarter=Nd.quarters=Jb,Nd.month=Y,Nd.daysInMonth=Z,Nd.week=Nd.weeks=na,Nd.isoWeek=Nd.isoWeeks=oa,Nd.weeksInYear=Ib,Nd.isoWeeksInYear=Hb,Nd.date=Dd,Nd.day=Nd.days=Pb,Nd.weekday=Qb,Nd.isoWeekday=Rb,Nd.dayOfYear=qa,Nd.hour=Nd.hours=Id,Nd.minute=Nd.minutes=Jd,Nd.second=Nd.seconds=Kd,
Nd.millisecond=Nd.milliseconds=Md,Nd.utcOffset=Na,Nd.utc=Pa,Nd.local=Qa,Nd.parseZone=Ra,Nd.hasAlignedHourOffset=Sa,Nd.isDST=Ta,Nd.isDSTShifted=Ua,Nd.isLocal=Va,Nd.isUtcOffset=Wa,Nd.isUtc=Xa,Nd.isUTC=Xa,Nd.zoneAbbr=Xb,Nd.zoneName=Yb,Nd.dates=aa(&quot;dates accessor is deprecated. Use date instead.&quot;,Dd),Nd.months=aa(&quot;months accessor is deprecated. Use month instead&quot;,Y),Nd.years=aa(&quot;years accessor is deprecated. Use year instead&quot;,td),Nd.zone=aa(&quot;moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779&quot;,Oa);var Od=Nd,Pd={sameDay:&quot;[Today at] LT&quot;,nextDay:&quot;[Tomorrow at] LT&quot;,nextWeek:&quot;dddd [at] LT&quot;,lastDay:&quot;[Yesterday at] LT&quot;,lastWeek:&quot;[Last] dddd [at] LT&quot;,sameElse:&quot;L&quot;},Qd={LTS:&quot;h:mm:ss A&quot;,LT:&quot;h:mm A&quot;,L:&quot;MM/DD/YYYY&quot;,LL:&quot;MMMM D, YYYY&quot;,LLL:&quot;MMMM D, YYYY h:mm A&quot;,LLLL:&quot;dddd, MMMM D, YYYY h:mm A&quot;},Rd=&quot;Invalid date&quot;,Sd=&quot;%d&quot;,Td=/\d{1,2}/,Ud={future:&quot;in %s&quot;,past:&quot;%s ago&quot;,s:&quot;a few seconds&quot;,m:&quot;a minute&quot;,mm:&quot;%d minutes&quot;,h:&quot;an hour&quot;,hh:&quot;%d hours&quot;,d:&quot;a day&quot;,dd:&quot;%d days&quot;,M:&quot;a month&quot;,MM:&quot;%d months&quot;,y:&quot;a year&quot;,yy:&quot;%d years&quot;},Vd=s.prototype;Vd._calendar=Pd,Vd.calendar=_b,Vd._longDateFormat=Qd,Vd.longDateFormat=ac,Vd._invalidDate=Rd,Vd.invalidDate=bc,Vd._ordinal=Sd,Vd.ordinal=cc,Vd._ordinalParse=Td,Vd.preparse=dc,Vd.postformat=dc,Vd._relativeTime=Ud,Vd.relativeTime=ec,Vd.pastFuture=fc,Vd.set=gc,Vd.months=U,Vd._months=md,Vd.monthsShort=V,Vd._monthsShort=nd,Vd.monthsParse=W,Vd.week=ka,Vd._week=ud,Vd.firstDayOfYear=ma,Vd.firstDayOfWeek=la,Vd.weekdays=Lb,Vd._weekdays=Ed,Vd.weekdaysMin=Nb,Vd._weekdaysMin=Gd,Vd.weekdaysShort=Mb,Vd._weekdaysShort=Fd,Vd.weekdaysParse=Ob,Vd.isPM=Ub,Vd._meridiemParse=Hd,Vd.meridiem=Vb,w(&quot;en&quot;,{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===q(a%100/10)?&quot;th&quot;:1===b?&quot;st&quot;:2===b?&quot;nd&quot;:3===b?&quot;rd&quot;:&quot;th&quot;;return a+c}}),a.lang=aa(&quot;moment.lang is deprecated. Use moment.locale instead.&quot;,w),a.langData=aa(&quot;moment.langData is deprecated. Use moment.localeData instead.&quot;,y);var Wd=Math.abs,Xd=yc(&quot;ms&quot;),Yd=yc(&quot;s&quot;),Zd=yc(&quot;m&quot;),$d=yc(&quot;h&quot;),_d=yc(&quot;d&quot;),ae=yc(&quot;w&quot;),be=yc(&quot;M&quot;),ce=yc(&quot;y&quot;),de=Ac(&quot;milliseconds&quot;),ee=Ac(&quot;seconds&quot;),fe=Ac(&quot;minutes&quot;),ge=Ac(&quot;hours&quot;),he=Ac(&quot;days&quot;),ie=Ac(&quot;months&quot;),je=Ac(&quot;years&quot;),ke=Math.round,le={s:45,m:45,h:22,d:26,M:11},me=Math.abs,ne=Ha.prototype;ne.abs=oc,ne.add=qc,ne.subtract=rc,ne.as=wc,ne.asMilliseconds=Xd,ne.asSeconds=Yd,ne.asMinutes=Zd,ne.asHours=$d,ne.asDays=_d,ne.asWeeks=ae,ne.asMonths=be,ne.asYears=ce,ne.valueOf=xc,ne._bubble=tc,ne.get=zc,ne.milliseconds=de,ne.seconds=ee,ne.minutes=fe,ne.hours=ge,ne.days=he,ne.weeks=Bc,ne.months=ie,ne.years=je,ne.humanize=Fc,ne.toISOString=Gc,ne.toString=Gc,ne.toJSON=Gc,ne.locale=rb,ne.localeData=sb,ne.toIsoString=aa(&quot;toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)&quot;,Gc),ne.lang=Cd,H(&quot;X&quot;,0,0,&quot;unix&quot;),H(&quot;x&quot;,0,0,&quot;valueOf&quot;),N(&quot;x&quot;,_c),N(&quot;X&quot;,bd),Q(&quot;X&quot;,function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),Q(&quot;x&quot;,function(a,b,c){c._d=new Date(q(a))}),a.version=&quot;2.10.6&quot;,b(Da),a.fn=Od,a.min=Fa,a.max=Ga,a.utc=h,a.unix=Zb,a.months=jc,a.isDate=d,a.locale=w,a.invalid=l,a.duration=Ya,a.isMoment=o,a.weekdays=lc,a.parseZone=$b,a.localeData=y,a.isDuration=Ia,a.monthsShort=kc,a.weekdaysMin=nc,a.defineLocale=x,a.weekdaysShort=mc,a.normalizeUnits=A,a.relativeTimeThreshold=Ec;var oe=a;return oe});</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2c64669f-f07e-4365-bf64-c559ace83004</id>
                <name>stopOnErrorCount</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122375</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to Stop a channel if it reaches a particular error count. 
	Also sends an alert message via another channel (this sends a sms via our monitoring system).

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function stopOnErrorCount(cid, errorCount) {
	var channelStatisticsController = Packages.com.mirth.connect.server.controllers.ChannelStatisticsController.getInstance();
	var channelStatusController = Packages.com.mirth.connect.server.controllers.ChannelStatusController.getInstance();
	var stats = channelStatisticsController.getStatistics(cid);
	// var numOfQueued = stats.queued;
	var numOfErrors = stats.error;

	if(numOfErrors &gt; errorCount )
	{
		//Stop Me
		channelStatusController.stopChannel(cid);
		//Alert msg sent to _SVHALERT channel
		var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
		var channelName = channelController.getDeployedChannelById(cid).getName();
		var alertmsg = &apos;mirth01 mirth_channel_status codeTemplate_stopOnErrorCount 0 &apos; +
					   &apos;channel &apos; + channelName + &apos; stopped&apos;;
		router.routeMessage(&apos;_SVHALERT&apos;, alertmsg);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>08044817-3504-4fc1-80ee-404870195151</id>
                <name>test</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122745</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.
	searchword
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function testfunc(arg1) {
	return arg1;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
            <name>WebPT-Mirth</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121602</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
                <name>Fix HL7v2 Node Order</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121804</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>35f4c250-08b4-4e42-8e60-f85aa98dfe50</id>
            <name>WebPT-Translations</name>
            <revision>3</revision>
            <lastModified>
              <time>1690140133521</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>be8f057b-2640-4613-b2e7-83326c59169c</id>
                <name>AddZeros</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122826</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function addZeroes(num) {
   return num.toLocaleString(&quot;en&quot;, {useGrouping: false, minimumFractionDigits: 2})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>51913864-7702-489a-b7c6-54992c12b19d</id>
                <name>FindLookupValueWithDefault</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122218</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithDefault ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        //obj.LeftValue = LeftValue;
        //obj.RightValue1 = DefaultValue1;
        //obj.RightValue2   = DefaultValue2; 
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);
            var result = pattern.test(LeftValue );

            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c276be9f-c8f1-4dea-8df0-e000c6745271</id>
                <name>FindLookupValueWithInsuranceId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122080</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithInsuranceId ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);             
            var result = pattern.test(LeftValue );
	
            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7d746da2-58c6-44eb-ad5c-c5bfd0a0c537</id>
                <name>UseExternalProblemID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122349</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalProblemID() {

if ([&apos;2804&apos;, &apos;2822&apos;].indexOf($(&apos;tenantId&apos;) + &apos;&apos;) &gt; -1) {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitexternalproblemid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitaccountnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>07730e85-7f30-4ddf-90a4-78183c896ab5</id>
                <name>UseExternalVisitID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122192</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalVisitID() {
	
if ($(&apos;tenantId&apos;)  == &apos;9999&apos; ) {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitexternalvisitid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitvisitnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
        <channelTags>
          <channelTag>
            <id>e2256351-a12c-4e51-b138-af4985cb4c3e</id>
            <name>AristaMd</name>
            <channelIds>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>d3656e65-487a-4643-a59d-ac335ef7dc9c</id>
            <name>HTTP</name>
            <channelIds>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>c2d3f597-71a2-4dce-a15c-c0e4b81930d7</id>
            <name>JSON</name>
            <channelIds>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
            </channelIds>
            <backgroundColor>
              <red>128</red>
              <green>128</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>7822e1f8-3e89-4e46-8317-a1119bab773f</id>
            <name>SanMateo</name>
            <channelIds>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
            </channelIds>
            <backgroundColor>
              <red>128</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>14df0e38-e919-4ac0-a698-01dcd8f4a49e</id>
            <name>SIU</name>
            <channelIds>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>ab6ed6d3-3d63-447a-97ad-1c89cfee3e3f</id>
            <name>TCP</name>
            <channelIds>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
            </channelIds>
            <backgroundColor>
              <red>128</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
        </channelTags>
      </exportData>
    </channel>
    <channel version="3.12.0">
      <id>7a3b0715-12e0-4803-aa51-c1a947ef9b66</id>
      <nextMetaDataId>13</nextMetaDataId>
      <name>SANMATEO_SIU_OUT_JSON</name>
      <description>2020-12-07 jer - Created to receive San Mateo Scheduling SIU transactions converted from HL7 to JSON and sent/delivered to AristaMd RESTful HTTP receiver.</description>
      <revision>1</revision>
      <sourceConnector version="3.12.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.12.0">
          <pluginProperties/>
          <sourceConnectorProperties version="3.12.0">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.12.0">
              <name>channelId</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <variable>channelId</variable>
              <mapping></mapping>
              <defaultValue>connectorMessage.getChannelId()</defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Parse HL7v2 Message - ChannelMap</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>/* 
Name: 	Parse HL7v2 Message - ChannelMap
Desc: 	Parse HL7v2 Message - ChannelMap
Created:	2020-12-01 
Modified:
2020-11-23 JER - Modified to match the provided HL7 msg file
*/
var scriptName= &quot;Parse HL7v2 Message - ChannelMap&quot;;
var debug= 1;

if (debug&gt;0) { channelMap.put(scriptName+&quot;_DEBUG_msg&quot;,msg); }

channelMap.put(&quot;EventType&quot;, msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString()+&quot;^&quot;+msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString());
channelMap.put(&quot;Source&quot;, msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString()+&quot;:&quot;+msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString());
channelMap.put(&quot;VisitNumber&quot;, msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Convert HL7v2 to JSON</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <script>/* 
Name: 	Convert HL7v2 to JSON
Desc: 	Convert HL7v2 to JSON - Apply to the SANMATEO_SIU_OUT_JSON Source Transformer
Created:	2020-12-01
Modified:
2020-12-08 23:16 CST jer - Added to manage comparison against list of patient identifiers for the PID.3 sequence element
2020-12-08 14:49 CST jer - Added to manage list of patient identifiers patientIdentifiers array and if-then condition
2020-12-08 JER - Modified significant coding to handling multiple patient identifiers across PID.2-PID.4 elements
2020-11-23 JER - Modified to match the provided JSON file
*/
var scriptName= &quot;Convert HL7v2 to JSON&quot;;
var debug= 0;
var hl7json= {};
var columnName= &quot;Meta&quot;;

if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG msg: &quot;+msg); }

// Meta - MSH Segment
if(msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString().indexOf(&quot;SIU&quot;)&gt;-1) {
	tmp[&apos;Meta&apos;][&apos;DataModel&apos;]= &quot;Scheduling&quot;
} 

if(msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].indexOf(&quot;S12&quot;)&gt;-1) {
	tmp[&apos;Meta&apos;][&apos;EventType&apos;]= &quot;New&quot;
} else if(msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].indexOf(&quot;S14&quot;)&gt;-1) {
	tmp[&apos;Meta&apos;][&apos;EventType&apos;]= &quot;Notification&quot;
} else if(msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].indexOf(&quot;S15&quot;)&gt;-1) {
	tmp[&apos;Meta&apos;][&apos;EventType&apos;]= &quot;Cancellation&quot;
} else { 
	tmp[&apos;Meta&apos;][&apos;EventType&apos;]= &quot;New&quot;
}

// Message Date Time
var strMessageDateTime= msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
if(strMessageDateTime.indexOf(&quot;T&quot;)&lt;0) {
	// var strModifiedMessageDateTime = strMessageDateTime.toString().substr(0,19).replace(/[^0-9]/g, &quot;&quot;);
	var strModifiedMessageDateTime= toISODate(strMessageDateTime,&quot;America/Los_Angeles&quot;); 
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strModifiedMessageDateTime: &quot;+strModifiedMessageDateTime); }
} else {
	var strModifiedMessageDateTime= strMessageDateTime;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strModifiedMessageDateTime: &quot;+strModifiedMessageDateTime); }
}
tmp[&apos;Meta&apos;][&apos;EventDateTime&apos;]= strModifiedMessageDateTime;

tmp[&apos;Meta&apos;][&apos;Source&apos;][&apos;Name&apos;]= msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString();
channelMap.put(&apos;SourceName&apos;,tmp[&apos;Meta&apos;][&apos;Source&apos;][&apos;Name&apos;]);
tmp[&apos;Meta&apos;][&apos;Source&apos;][&apos;ID&apos;]= msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString();
tmp[&apos;Meta&apos;][&apos;Destinations&apos;][&apos;Name&apos;]= msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString();
tmp[&apos;Meta&apos;][&apos;Destinations&apos;][&apos;ID&apos;]= msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;].toString();

var strMessageControlId= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
if((typeof(msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]) == &apos;undefined&apos;) || (msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString().length&lt;1)) {
	strMessageControlId= UUIDGenerator.getUUID().toString();
	tmp[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;]= strMessageControlId;
} else {
	tmp[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;]= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
}
channelMap.put(&quot;MessageID&quot;, tmp[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;]);

var strProcessingId= msg[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;].toString();
if(strProcessingId== &quot;P&quot;) {
	tmp[&apos;Meta&apos;][&apos;Test&apos;]= &apos;false&apos;;
} else {
	tmp[&apos;Meta&apos;][&apos;Test&apos;]= &apos;true&apos;;
}

tmp[&apos;Meta&apos;][&apos;FacilityCode&apos;]= msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString();

// Patient - PID Segment
// Create identifiers array object
var identifiers= [];
// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
var patientIdentifiers= [];

// Evaluate PID.1
if(typeof(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;]) !== &apos;undefined&apos; || msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].length()&gt;0) {
	
	for(var i= 0; i&lt;msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].length();i++) {
		// 2020-12-09 01:03 CST jer - Moved the defined identifier to inside the for loop
		var identifier= {};
		var columnName= &apos;ID&apos;;

		// 2020-12-08 23:16 CST jer - Added to manage comparison against list of patient identifiers
		if(patientIdentifiers.indexOf(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;][i].toString())&lt;0) {
		
			identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;][i].toString();
		
			var columnName= &apos;IDType&apos;;
			if(typeof(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;][i]) !== &apos;undefined&apos;) {
				if(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;][i].toString();
				} 
			} else if (typeof($(&apos;SourceName&apos;)) !== &apos;undefined&apos;) {
				identifier[columnName]= $(&apos;SourceName&apos;);
			} else {	
				identifier[columnName]= null;
			}
			identifiers.push(identifier);
			// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
			patientIdentifiers.push(identifier[&apos;ID&apos;]);

			if(debug&gt;0) {
				logger.info(scriptName+&quot;::DEBUG PID3.1 identifiers[&quot;+i+&quot;]: &quot;+JSON.stringify(identifiers));
				logger.info(scriptName+&quot;::DEBUG PID.3.1 patientIdentifier[&quot;+i+&quot;]: &quot;+JSON.stringify(patientIdentifiers));
			}
		} // end if
	}

} 

// Evaluate PID.2
if(typeof(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;]) !== &apos;undefined&apos; || msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;].length()&gt;0) {

	for(var i= 0; i&lt;msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;].length();i++) {
		// 2020-12-09 01:03 CST jer - Moved the defined identifier to inside the for loop
		var identifier= {};
		var columnName= &apos;ID&apos;;

		// 2020-12-08 14:49 CST jer - Added to manage comparison against list of patient identifiers
		if(patientIdentifiers.indexOf(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;].toString())&lt;0) {
		
			identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;][i].toString();
			var columnName= &apos;IDType&apos;;
			if(typeof(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.4&apos;][i]) !== &apos;undefined&apos;) {
				if(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.4&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.4&apos;][i].toString();
				}
			} else if (typeof($(&apos;SourceName&apos;)) !== &apos;undefined&apos;) {
				identifier[columnName]= $(&apos;SourceName&apos;);
			} else {	
				identifier[columnName]= null;
				// tmp[&apos;Patient&apos;][&apos;Identifiers&apos;][i][&apos;IDType&apos;]= null;
			}
			identifiers.push(identifier);
			// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
			patientIdentifiers.push(identifier[&apos;ID&apos;]);

			if(debug&gt;0) {
				logger.info(scriptName+&quot;::DEBUG PID2.1 identifiers[&quot;+i+&quot;]: &quot;+JSON.stringify(identifiers));
				logger.info(scriptName+&quot;::DEBUG PID.2.1 patientIdentifier[&quot;+i+&quot;]: &quot;+JSON.stringify(patientIdentifiers));
			}
		}
	}
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG PID.2 identifiers: &quot;+JSON.stringify(identifiers)); }
}

// Evaluate PID.4
if(typeof(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;]) !== &apos;undefined&apos; || msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].length()&gt;0) {

	for(var i= 0; i&lt;msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].length();i++) {
		
		// 2020-12-09 01:03 CST jer - Moved the defined identifier to inside the for loop
		var identifier= {};
		var columnName= &apos;ID&apos;;

		// 2020-12-08 14:49 CST jer - Added to manage comparison against list of patient identifiers
		if(patientIdentifiers.indexOf(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString())&lt;0) {
			
			identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;][i].toString();
			var columnName= &apos;IDType&apos;;
			if(typeof(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.4&apos;][i]) !== &apos;undefined&apos;) {
				if(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.4&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.4&apos;][i].toString();
				}
			} else if (typeof($(&apos;SourceName&apos;)) !== &apos;undefined&apos;) {
				identifier[columnName]= $(&apos;SourceName&apos;);
			} else {	
				identifier[columnName]= null;
				// tmp[&apos;Patient&apos;][&apos;Identifiers&apos;][i][&apos;IDType&apos;]= null;
			}
			identifiers.push(identifier);
			// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
			patientIdentifiers.push(identifier[&apos;ID&apos;]);

			if(debug&gt;0) {
				logger.info(scriptName+&quot;::DEBUG PID4.1 identifiers[&quot;+i+&quot;]: &quot;+JSON.stringify(identifiers));
				logger.info(scriptName+&quot;::DEBUG PID.4.1 patientIdentifier[&quot;+i+&quot;]: &quot;+JSON.stringify(patientIdentifiers));
			}
		}
	}
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG PID.4 identifiers: &quot;+JSON.stringify(identifiers)); }
}

if(typeof(identifiers) !== &apos;undefined&apos; || identifiers.length&gt;0) {
	var columnName= &apos;Identifiers&apos;;
	// Create Identifiers JSON object
	var objIdentifiers= {};
	objIdentifiers[columnName]= identifiers;
	Object.assign(tmp[&apos;Patient&apos;], objIdentifiers);
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG objIdentifiers: &quot;+JSON.stringify(tmp[&apos;Patient&apos;][&apos;Identifiers&apos;])); }
}

if(debug&gt;0) {
	logger.info(scriptName+&quot;::DEBUG patientIdentifiers: &quot;+patientIdentifiers); 
	logger.info(scriptName+&quot;::DEBUG PatientID: &quot;+JSON.stringify(tmp[&apos;Patient&apos;][&apos;Identifiers&apos;])); 
}

channelMap.put(&apos;PatientID&apos;,JSON.stringify(tmp[&apos;Patient&apos;][&apos;Identifiers&apos;][0][&apos;ID&apos;]).replace(/[&apos;&quot;]+/g, &apos;&apos;));

tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;FirstName&apos;]= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString();
tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;LastName&apos;]= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString();
tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;MiddleName&apos;]= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString();

tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;DOB&apos;]= msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString().replace(/[^0-9]/g, &quot;&quot;);
tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Sex&apos;]= msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString();
tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= msg[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;].toString(); 

if(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;].toString().length&lt;1) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;StreetAddress&apos;]= null;
} else {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;StreetAddress&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;].toString();
}

tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;City&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;].toString();
tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;State&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.4&apos;].toString(); 
tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;ZIP&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;].toString();
tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;County&apos;]= msg[&apos;PID&apos;][&apos;PID.12&apos;][&apos;PID.12.1&apos;].toString();

if(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.6&apos;].toString().length&gt;1) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;Country&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.6&apos;].toString();
} else {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;Country&apos;]= null;
}
// Home Phone and Email Address - PID.13[0] instance
tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Home&apos;]= msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.1&apos;].toString();
tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;EmailAddresses&apos;]= msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.4&apos;].toString();
// Office Phone
tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Office&apos;]= msg[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.1&apos;].toString();

if(msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString().length&lt;1) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Citizenship&apos;]= null;
} else {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Citizenship&apos;]= msg[&apos;PID&apos;][&apos;PID.26&apos;][&apos;PID.26.1&apos;].toString();
}

if(msg[&apos;PV1&apos;][&apos;PV1.15&apos;][&apos;PV1.15.1&apos;].toString().length&lt;1) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Language&apos;]= null;
} else {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Language&apos;]= msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.1&apos;].toString();
}
tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;MaritalStatus&apos;]= msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;].toString();

// Account Number and Visit Number
if(msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString().length&lt;2) {
	if(msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString().length&lt;2) {
		tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;]= null;
	} else {
		tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;]= msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();
	}
} else {
	tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;]= msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString();
}
if(msg[&apos;PID&apos;][&apos;PID.30&apos;][&apos;PID.30.1&apos;].toString().length&lt;1) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;IsDeceased&apos;]= null;
} else {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;IsDeceased&apos;]= msg[&apos;PID&apos;][&apos;PID.30&apos;][&apos;PID.30.1&apos;].toString();
}
// Visit - PV1 Segment
if(msg[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString().length&gt;0) {
	if(msg[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString()== &apos;O&apos;) {
		tmp[&apos;Visit&apos;][&apos;PatientClass&apos;]= &quot;Outpatient&quot;;
	} else if(msg[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString()== &apos;I&apos;) {
		tmp[&apos;Visit&apos;][&apos;PatientClass&apos;]= &quot;Inpatient&quot;;
	} else {
		tmp[&apos;Visit&apos;][&apos;PatientClass&apos;]= &quot;Other&quot;;
	}
}

tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Department&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;].toString();
tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Room&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString();
tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Facility&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString();
tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Type&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.6&apos;].toString();

if(msg[&apos;SCH&apos;][&apos;SCH.11&apos;][&apos;SCH.11.4&apos;] !== &apos;undefined&apos;) {
	if(msg[&apos;SCH&apos;][&apos;SCH.11&apos;][&apos;SCH.11.4&apos;].toString().length&gt;0 &amp;&amp; (msg[&apos;SCH&apos;][&apos;SCH.11&apos;][&apos;SCH.11.4&apos;].toString().indexOf(&quot;T&quot;)&lt;0)) {
		var strModifiedVisitDateTime= toISODate(msg[&apos;SCH&apos;][&apos;SCH.11&apos;][&apos;SCH.11.4&apos;].toString(),&quot;America/Los_Angeles&quot;);
		tmp[&apos;Visit&apos;][&apos;VisitDateTime&apos;]= strModifiedVisitDateTime;
	} else {
		tmp[&apos;Visit&apos;][&apos;VisitDateTime&apos;]= msg[&apos;SCH&apos;][&apos;SCH.11&apos;][&apos;SCH.11.4&apos;].toString();
	}
}

tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;]= msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString();
tmp[&apos;Visit&apos;][&apos;Duration&apos;]= msg[&apos;SCH&apos;][&apos;SCH.9&apos;][&apos;SCH.9.1&apos;].toString();

// Visit Attending Provider - AIG
tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;ID&apos;]= msg[&apos;AIG&apos;][&apos;AIG.3&apos;][&apos;AIG.3.1&apos;].toString();
tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;LastName&apos;]= msg[&apos;AIG&apos;][&apos;AIG.3&apos;][&apos;AIG.3.2&apos;].toString();
tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;FirstName&apos;]= msg[&apos;AIG&apos;][&apos;AIG.3&apos;][&apos;AIG.3.3&apos;].toString();

// Visit Consulting Provider - AIP
tmp[&apos;Visit&apos;][&apos;ConsultingProvider&apos;][&apos;ID&apos;]= msg[&apos;AIP&apos;][&apos;AIP.3&apos;][&apos;AIP.3.1&apos;].toString();
tmp[&apos;Visit&apos;][&apos;ConsultingProvider&apos;][&apos;LastName&apos;]= msg[&apos;AIP&apos;][&apos;AIP.3&apos;][&apos;AIP.3.2&apos;].toString();
tmp[&apos;Visit&apos;][&apos;ConsultingProvider&apos;][&apos;FirstName&apos;]= msg[&apos;AIP&apos;][&apos;AIP.3&apos;][&apos;AIP.3.3&apos;].toString();

// Visit Location - AIL
tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Facility&apos;]= msg[&apos;AIL&apos;][&apos;AIL.3&apos;][&apos;AIL.3.1&apos;].toString();
tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Department&apos;]= msg[&apos;AIL&apos;][&apos;AIL.3&apos;][&apos;AIL.3.2&apos;].toString();
tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Room&apos;]= msg[&apos;AIL&apos;][&apos;AIL.4&apos;].toString();

channelMap.put(&apos;json_out&apos;,tmp);
return tmp;</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64">PEhMN01lc3NhZ2U+CiAgICA8TVNIPgogICAgICAgIDxNU0guMT58PC9NU0guMT4KICAgICAgICA8TVNILjI+Xn5cJmFtcDs8L01TSC4yPgogICAgICAgIDxNU0guMz4KICAgICAgICAgICAgPE1TSC4zLjE+RUNXPC9NU0guMy4xPgogICAgICAgIDwvTVNILjM+CiAgICAgICAgPE1TSC40PgogICAgICAgICAgICA8TVNILjQuMT5TTU1DPC9NU0guNC4xPgogICAgICAgIDwvTVNILjQ+CiAgICAgICAgPE1TSC41PgogICAgICAgICAgICA8TVNILjUuMT5TTUFSVFQ8L01TSC41LjE+CiAgICAgICAgPC9NU0guNT4KICAgICAgICA8TVNILjY+CiAgICAgICAgICAgIDxNU0guNi4xPlNNTUM8L01TSC42LjE+CiAgICAgICAgPC9NU0guNj4KICAgICAgICA8TVNILjc+CiAgICAgICAgICAgIDxNU0guNy4xPjIwMjAxMTE5MTYxMTAxPC9NU0guNy4xPgogICAgICAgIDwvTVNILjc+CiAgICAgICAgPE1TSC44Lz4KICAgICAgICA8TVNILjk+CiAgICAgICAgICAgIDxNU0guOS4xPlNJVTwvTVNILjkuMT4KICAgICAgICAgICAgPE1TSC45LjI+UzEyPC9NU0guOS4yPgogICAgICAgIDwvTVNILjk+CiAgICAgICAgPE1TSC4xMC8+CiAgICAgICAgPE1TSC4xMT4KICAgICAgICAgICAgPE1TSC4xMS4xPlA8L01TSC4xMS4xPgogICAgICAgIDwvTVNILjExPgogICAgICAgIDxNU0guMTI+CiAgICAgICAgICAgIDxNU0guMTIuMT4yLjQ8L01TSC4xMi4xPgogICAgICAgIDwvTVNILjEyPgogICAgPC9NU0g+CiAgICA8U0NIPgogICAgICAgIDxTQ0guMT4KICAgICAgICAgICAgPFNDSC4xLjE+MTwvU0NILjEuMT4KICAgICAgICA8L1NDSC4xPgogICAgICAgIDxTQ0guMj4KICAgICAgICAgICAgPFNDSC4yLjE+OTkzMDIyODwvU0NILjIuMT4KICAgICAgICA8L1NDSC4yPgogICAgICAgIDxTQ0guMy8+CiAgICAgICAgPFNDSC40Lz4KICAgICAgICA8U0NILjUvPgogICAgICAgIDxTQ0guNi8+CiAgICAgICAgPFNDSC43PgogICAgICAgICAgICA8U0NILjcuMT4xMiBXRUVLIEYvVTwvU0NILjcuMT4KICAgICAgICA8L1NDSC43PgogICAgICAgIDxTQ0guOD4KICAgICAgICAgICAgPFNDSC44LjE+VVYtNDhocnM8L1NDSC44LjE+CiAgICAgICAgPC9TQ0guOD4KICAgICAgICA8U0NILjk+CiAgICAgICAgICAgIDxTQ0guOS4xPjE1PC9TQ0guOS4xPgogICAgICAgIDwvU0NILjk+CiAgICAgICAgPFNDSC4xMC8+CiAgICAgICAgPFNDSC4xMT4KICAgICAgICAgICAgPFNDSC4xMS4xLz4KICAgICAgICAgICAgPFNDSC4xMS4yLz4KICAgICAgICAgICAgPFNDSC4xMS4zLz4KICAgICAgICAgICAgPFNDSC4xMS40PjIwMjEwMjExMTQzMDAwPC9TQ0guMTEuND4KICAgICAgICAgICAgPFNDSC4xMS41PjIwMjEwMjExMTQ0NTAwPC9TQ0guMTEuNT4KICAgICAgICA8L1NDSC4xMT4KICAgICAgICA8U0NILjEyLz4KICAgICAgICA8U0NILjEzLz4KICAgICAgICA8U0NILjE0Lz4KICAgICAgICA8U0NILjE1Lz4KICAgICAgICA8U0NILjE2Lz4KICAgICAgICA8U0NILjE3Lz4KICAgICAgICA8U0NILjE4Lz4KICAgICAgICA8U0NILjE5Lz4KICAgICAgICA8U0NILjIwLz4KICAgICAgICA8U0NILjIxLz4KICAgICAgICA8U0NILjIyLz4KICAgICAgICA8U0NILjIzLz4KICAgICAgICA8U0NILjI0Lz4KICAgICAgICA8U0NILjI1PgogICAgICAgICAgICA8U0NILjI1LjE+UEVOPC9TQ0guMjUuMT4KICAgICAgICA8L1NDSC4yNT4KICAgICAgICA8U0NILjI2PgogICAgICAgICAgICA8U0NILjI2LjE+MTkwMC0wMS0wMSAwMDowMDowMDwvU0NILjI2LjE+CiAgICAgICAgPC9TQ0guMjY+CiAgICAgICAgPFNDSC4yNy8+CiAgICA8L1NDSD4KICAgIDxQSUQ+CiAgICAgICAgPFBJRC4xPgogICAgICAgICAgICA8UElELjEuMT4xPC9QSUQuMS4xPgogICAgICAgIDwvUElELjE+CiAgICAgICAgPFBJRC4yPgogICAgICAgICAgICA8UElELjIuMT4xMTk0MDg4PC9QSUQuMi4xPgogICAgICAgIDwvUElELjI+CiAgICAgICAgPFBJRC4zPgogICAgICAgICAgICA8UElELjMuMT4xMTk0MDg4PC9QSUQuMy4xPgogICAgICAgIDwvUElELjM+CiAgICAgICAgPFBJRC40PgogICAgICAgICAgICA8UElELjQuMT4zNDc0NDc8L1BJRC40LjE+CiAgICAgICAgPC9QSUQuND4KICAgICAgICA8UElELjU+CiAgICAgICAgICAgIDxQSUQuNS4xPkxBU1ROQU1FPC9QSUQuNS4xPgogICAgICAgICAgICA8UElELjUuMj5GSVJTVE5BTUU8L1BJRC41LjI+CiAgICAgICAgICAgIDxQSUQuNS4zLz4KICAgICAgICA8L1BJRC41PgogICAgICAgIDxQSUQuNi8+CiAgICAgICAgPFBJRC43PgogICAgICAgICAgICA8UElELjcuMT4yMDA1MDUwNTwvUElELjcuMT4KICAgICAgICA8L1BJRC43PgogICAgICAgIDxQSUQuOD4KICAgICAgICAgICAgPFBJRC44LjE+TTwvUElELjguMT4KICAgICAgICA8L1BJRC44PgogICAgICAgIDxQSUQuOT4KICAgICAgICAgICAgPFBJRC45LjE+TTwvUElELjkuMT4KICAgICAgICA8L1BJRC45PgogICAgICAgIDxQSUQuMTA+CiAgICAgICAgICAgIDxQSUQuMTAuMT5PPC9QSUQuMTAuMT4KICAgICAgICA8L1BJRC4xMD4KICAgICAgICA8UElELjExPgogICAgICAgICAgICA8UElELjExLjE+MTIzIE1BSU4gU1Q8L1BJRC4xMS4xPgogICAgICAgICAgICA8UElELjExLjIvPgogICAgICAgICAgICA8UElELjExLjM+U09VVEggU0FOIEZSQU5DSVNDTzwvUElELjExLjM+CiAgICAgICAgICAgIDxQSUQuMTEuND5DQTwvUElELjExLjQ+CiAgICAgICAgICAgIDxQSUQuMTEuNT45NDA4MDwvUElELjExLjU+CiAgICAgICAgPC9QSUQuMTE+CiAgICAgICAgPFBJRC4xMj4KICAgICAgICAgICAgPFBJRC4xMi4xPjA8L1BJRC4xMi4xPgogICAgICAgIDwvUElELjEyPgogICAgICAgIDxQSUQuMTM+CiAgICAgICAgICAgIDxQSUQuMTMuMT42NTA5OTkxMjM0PC9QSUQuMTMuMT4KICAgICAgICA8L1BJRC4xMz4KICAgICAgICA8UElELjE0PgogICAgICAgICAgICA8UElELjE0LjE+NjUwOTk5MTIzNDwvUElELjE0LjE+CiAgICAgICAgPC9QSUQuMTQ+CiAgICAgICAgPFBJRC4xNS8+CiAgICAgICAgPFBJRC4xNj4KICAgICAgICAgICAgPFBJRC4xNi4xPlM8L1BJRC4xNi4xPgogICAgICAgIDwvUElELjE2PgogICAgICAgIDxQSUQuMTcvPgogICAgICAgIDxQSUQuMTg+CiAgICAgICAgICAgIDxQSUQuMTguMT4wPC9QSUQuMTguMT4KICAgICAgICA8L1BJRC4xOD4KICAgICAgICA8UElELjE5Lz4KICAgIDwvUElEPgogICAgPFBWMT4KICAgICAgICA8UFYxLjE+CiAgICAgICAgICAgIDxQVjEuMS4xPjE8L1BWMS4xLjE+CiAgICAgICAgPC9QVjEuMT4KICAgICAgICA8UFYxLjI+CiAgICAgICAgICAgIDxQVjEuMi4xPk88L1BWMS4yLjE+CiAgICAgICAgPC9QVjEuMj4KICAgICAgICA8UFYxLjM+CiAgICAgICAgICAgIDxQVjEuMy4xPlBFRDwvUFYxLjMuMT4KICAgICAgICAgICAgPFBWMS4zLjI+UGVkaWF0cmljcyBTTU1DPC9QVjEuMy4yPgogICAgICAgIDwvUFYxLjM+CiAgICAgICAgPFBWMS40Lz4KICAgICAgICA8UFYxLjUvPgogICAgICAgIDxQVjEuNi8+CiAgICAgICAgPFBWMS43PgogICAgICAgICAgICA8UFYxLjcuMT5QUlYwMDMwPC9QVjEuNy4xPgogICAgICAgICAgICA8UFYxLjcuMj5FbGRlcnM8L1BWMS43LjI+CiAgICAgICAgICAgIDxQVjEuNy4zPkpveWNlbHluPC9QVjEuNy4zPgogICAgICAgICAgICA8UFYxLjcuNC8+CiAgICAgICAgICAgIDxQVjEuNy41Lz4KICAgICAgICAgICAgPFBWMS43LjYvPgogICAgICAgIDwvUFYxLjc+CiAgICAgICAgPFBWMS44PgogICAgICAgICAgICA8UFYxLjguMS8+CiAgICAgICAgICAgIDxQVjEuOC4yLz4KICAgICAgICAgICAgPFBWMS44LjMvPgogICAgICAgIDwvUFYxLjg+CiAgICAgICAgPFBWMS45PgogICAgICAgICAgICA8UFYxLjkuMT5QUlYwMDMwPC9QVjEuOS4xPgogICAgICAgICAgICA8UFYxLjkuMj5FbGRlcnM8L1BWMS45LjI+CiAgICAgICAgICAgIDxQVjEuOS4zPkpveWNlbHluPC9QVjEuOS4zPgogICAgICAgIDwvUFYxLjk+CiAgICAgICAgPFBWMS4xMC8+CiAgICAgICAgPFBWMS4xMS8+CiAgICAgICAgPFBWMS4xMi8+CiAgICAgICAgPFBWMS4xMy8+CiAgICAgICAgPFBWMS4xNC8+CiAgICAgICAgPFBWMS4xNS8+CiAgICAgICAgPFBWMS4xNi8+CiAgICAgICAgPFBWMS4xNy8+CiAgICAgICAgPFBWMS4xOC8+CiAgICAgICAgPFBWMS4xOS8+CiAgICAgICAgPFBWMS4yMC8+CiAgICAgICAgPFBWMS4yMS8+CiAgICAgICAgPFBWMS4yMi8+CiAgICAgICAgPFBWMS4yMy8+CiAgICAgICAgPFBWMS4yNC8+CiAgICAgICAgPFBWMS4yNS8+CiAgICAgICAgPFBWMS4yNi8+CiAgICAgICAgPFBWMS4yNy8+CiAgICAgICAgPFBWMS4yOC8+CiAgICAgICAgPFBWMS4yOS8+CiAgICAgICAgPFBWMS4zMC8+CiAgICAgICAgPFBWMS4zMS8+CiAgICAgICAgPFBWMS4zMi8+CiAgICAgICAgPFBWMS4zMy8+CiAgICAgICAgPFBWMS4zNC8+CiAgICAgICAgPFBWMS4zNS8+CiAgICAgICAgPFBWMS4zNi8+CiAgICAgICAgPFBWMS4zNy8+CiAgICAgICAgPFBWMS4zOC8+CiAgICAgICAgPFBWMS4zOS8+CiAgICAgICAgPFBWMS40MC8+CiAgICAgICAgPFBWMS40MS8+CiAgICAgICAgPFBWMS40Mi8+CiAgICAgICAgPFBWMS40My8+CiAgICAgICAgPFBWMS40NC8+CiAgICAgICAgPFBWMS40NS8+CiAgICAgICAgPFBWMS40Ni8+CiAgICAgICAgPFBWMS40Ny8+CiAgICAgICAgPFBWMS40OC8+CiAgICAgICAgPFBWMS40OS8+CiAgICAgICAgPFBWMS41MC8+CiAgICAgICAgPFBWMS41MS8+CiAgICAgICAgPFBWMS41Mi8+CiAgICA8L1BWMT4KICAgIDxBSUc+CiAgICAgICAgPEFJRy4xPgogICAgICAgICAgICA8QUlHLjEuMT4xPC9BSUcuMS4xPgogICAgICAgIDwvQUlHLjE+CiAgICAgICAgPEFJRy4yLz4KICAgICAgICA8QUlHLjM+CiAgICAgICAgICAgIDxBSUcuMy4xPlBSVjAwMzA8L0FJRy4zLjE+CiAgICAgICAgICAgIDxBSUcuMy4yPkVsZGVyczwvQUlHLjMuMj4KICAgICAgICAgICAgPEFJRy4zLjM+Sm95Y2VseW48L0FJRy4zLjM+CiAgICAgICAgPC9BSUcuMz4KICAgICAgICA8QUlHLjQvPgogICAgPC9BSUc+CiAgICA8QUlMPgogICAgICAgIDxBSUwuMT4KICAgICAgICAgICAgPEFJTC4xLjE+MTwvQUlMLjEuMT4KICAgICAgICA8L0FJTC4xPgogICAgICAgIDxBSUwuMi8+CiAgICAgICAgPEFJTC4zPgogICAgICAgICAgICA8QUlMLjMuMT5QRUQ8L0FJTC4zLjE+CiAgICAgICAgICAgIDxBSUwuMy4yPlBlZGlhdHJpY3MgU01NQzwvQUlMLjMuMj4KICAgICAgICA8L0FJTC4zPgogICAgICAgIDxBSUwuNC8+CiAgICA8L0FJTD4KICAgIDxBSVA+CiAgICAgICAgPEFJUC4xPgogICAgICAgICAgICA8QUlQLjEuMT4xPC9BSVAuMS4xPgogICAgICAgIDwvQUlQLjE+CiAgICAgICAgPEFJUC4yLz4KICAgICAgICA8QUlQLjM+CiAgICAgICAgICAgIDxBSVAuMy4xPlBSVjAwMzA8L0FJUC4zLjE+CiAgICAgICAgICAgIDxBSVAuMy4yPkVsZGVyczwvQUlQLjMuMj4KICAgICAgICAgICAgPEFJUC4zLjM+Sm95Y2VseW48L0FJUC4zLjM+CiAgICAgICAgPC9BSVAuMz4KICAgICAgICA8QUlQLjQvPgogICAgPC9BSVA+CiAgICA8TksxPgogICAgICAgIDxOSzEuMT4KICAgICAgICAgICAgPE5LMS4xLjE+MTwvTksxLjEuMT4KICAgICAgICA8L05LMS4xPgogICAgICAgIDxOSzEuMj4KICAgICAgICAgICAgPE5LMS4yLjE+TEFTVE5BTUU8L05LMS4yLjE+CiAgICAgICAgICAgIDxOSzEuMi4yPkZJUlNUTkFNRUE8L05LMS4yLjI+CiAgICAgICAgPC9OSzEuMj4KICAgICAgICA8TksxLjM+CiAgICAgICAgICAgIDxOSzEuMy4xPk1vdGhlcjwvTksxLjMuMT4KICAgICAgICA8L05LMS4zPgogICAgICAgIDxOSzEuND4KICAgICAgICAgICAgPE5LMS40LjE+MTIzIE1BSU4gU1Q8L05LMS40LjE+CiAgICAgICAgICAgIDxOSzEuNC4yLz4KICAgICAgICAgICAgPE5LMS40LjM+U09VVEggU0FOIEZSQU5DSVNDTzwvTksxLjQuMz4KICAgICAgICAgICAgPE5LMS40LjQ+Q0E8L05LMS40LjQ+CiAgICAgICAgICAgIDxOSzEuNC41Pjk0MDgwPC9OSzEuNC41PgogICAgICAgIDwvTksxLjQ+CiAgICAgICAgPE5LMS41PgogICAgICAgICAgICA8TksxLjUuMT42NTA5OTkxMjM0PC9OSzEuNS4xPgogICAgICAgIDwvTksxLjU+CiAgICA8L05LMT4KICAgIDxHVDE+CiAgICAgICAgPEdUMS4xPgogICAgICAgICAgICA8R1QxLjEuMT4xPC9HVDEuMS4xPgogICAgICAgIDwvR1QxLjE+CiAgICAgICAgPEdUMS4yPgogICAgICAgICAgICA8R1QxLjIuMT4yNDg4MDEzPC9HVDEuMi4xPgogICAgICAgIDwvR1QxLjI+CiAgICAgICAgPEdUMS4zPgogICAgICAgICAgICA8R1QxLjMuMT5MQVNUTkFNRSBGSVJTVE5BTUVCPC9HVDEuMy4xPgogICAgICAgICAgICA8R1QxLjMuMj5NSURETEVOQU1FPC9HVDEuMy4yPgogICAgICAgICAgICA8R1QxLjMuMy8+CiAgICAgICAgPC9HVDEuMz4KICAgICAgICA8R1QxLjQvPgogICAgICAgIDxHVDEuNT4KICAgICAgICAgICAgPEdUMS41LjE+MTIzIE1BSU4gU1Q8L0dUMS41LjE+CiAgICAgICAgICAgIDxHVDEuNS4yLz4KICAgICAgICAgICAgPEdUMS41LjM+U09VVEggU0FOIEZSQU5DSVNDTzwvR1QxLjUuMz4KICAgICAgICAgICAgPEdUMS41LjQ+Q0E8L0dUMS41LjQ+CiAgICAgICAgICAgIDxHVDEuNS41Pjk0MDgwPC9HVDEuNS41PgogICAgICAgIDwvR1QxLjU+CiAgICAgICAgPEdUMS42PgogICAgICAgICAgICA8R1QxLjYuMT42NTA5OTkxMjM0PC9HVDEuNi4xPgogICAgICAgIDwvR1QxLjY+CiAgICAgICAgPEdUMS43Lz4KICAgICAgICA8R1QxLjg+CiAgICAgICAgICAgIDxHVDEuOC4xPjE5NzAwNTA1PC9HVDEuOC4xPgogICAgICAgIDwvR1QxLjg+CiAgICAgICAgPEdUMS45PgogICAgICAgICAgICA8R1QxLjkuMT5NPC9HVDEuOS4xPgogICAgICAgIDwvR1QxLjk+CiAgICAgICAgPEdUMS4xMC8+CiAgICAgICAgPEdUMS4xMT4KICAgICAgICAgICAgPEdUMS4xMS4xPkY8L0dUMS4xMS4xPgogICAgICAgIDwvR1QxLjExPgogICAgICAgIDxHVDEuMTIvPgogICAgICAgIDxHVDEuMTMvPgogICAgPC9HVDE+CiAgICA8SU4xPgogICAgICAgIDxJTjEuMT4KICAgICAgICAgICAgPElOMS4xLjE+MTwvSU4xLjEuMT4KICAgICAgICA8L0lOMS4xPgogICAgICAgIDxJTjEuMj4KICAgICAgICAgICAgPElOMS4yLjE+NzQ4PC9JTjEuMi4xPgogICAgICAgIDwvSU4xLjI+CiAgICAgICAgPElOMS4zPgogICAgICAgICAgICA8SU4xLjMuMT5DMjA8L0lOMS4zLjE+CiAgICAgICAgPC9JTjEuMz4KICAgICAgICA8SU4xLjQ+CiAgICAgICAgICAgIDxJTjEuNC4xPk1DQUwgSFBTTSBPUDwvSU4xLjQuMT4KICAgICAgICA8L0lOMS40PgogICAgICAgIDxJTjEuNT4KICAgICAgICAgICAgPElOMS41LjE+NzAxIEdhdGV3YXkgQmx2ZDwvSU4xLjUuMT4KICAgICAgICAgICAgPElOMS41LjI+U3VpdGUgNDAwPC9JTjEuNS4yPgogICAgICAgICAgICA8SU4xLjUuMz5TT1VUSCBTQU4gRlJBTkM8L0lOMS41LjM+CiAgICAgICAgICAgIDxJTjEuNS40PkNBPC9JTjEuNS40PgogICAgICAgICAgICA8SU4xLjUuNT45NDA4MDwvSU4xLjUuNT4KICAgICAgICA8L0lOMS41PgogICAgICAgIDxJTjEuNi8+CiAgICAgICAgPElOMS43Lz4KICAgICAgICA8SU4xLjgvPgogICAgICAgIDxJTjEuOS8+CiAgICAgICAgPElOMS4xMC8+CiAgICAgICAgPElOMS4xMS8+CiAgICAgICAgPElOMS4xMi8+CiAgICAgICAgPElOMS4xMy8+CiAgICAgICAgPElOMS4xNC8+CiAgICAgICAgPElOMS4xNS8+CiAgICAgICAgPElOMS4xNj4KICAgICAgICAgICAgPElOMS4xNi4xPkxBU1ROQU1FPC9JTjEuMTYuMT4KICAgICAgICAgICAgPElOMS4xNi4yPkZJUlNUTkFNRTwvSU4xLjE2LjI+CiAgICAgICAgPC9JTjEuMTY+CiAgICAgICAgPElOMS4xNz4KICAgICAgICAgICAgPElOMS4xNy4xPlM8L0lOMS4xNy4xPgogICAgICAgIDwvSU4xLjE3PgogICAgICAgIDxJTjEuMTg+CiAgICAgICAgICAgIDxJTjEuMTguMT4yMDA1MDUwNTwvSU4xLjE4LjE+CiAgICAgICAgPC9JTjEuMTg+CiAgICAgICAgPElOMS4xOT4KICAgICAgICAgICAgPElOMS4xOS4xPjEyMyBNQUlOIFNUPC9JTjEuMTkuMT4KICAgICAgICAgICAgPElOMS4xOS4yLz4KICAgICAgICAgICAgPElOMS4xOS4zPlNPVVRIIFNBTiBGUkFOQ0lTQ088L0lOMS4xOS4zPgogICAgICAgICAgICA8SU4xLjE5LjQ+Q0E8L0lOMS4xOS40PgogICAgICAgIDwvSU4xLjE5PgogICAgICAgIDxJTjEuMjAvPgogICAgICAgIDxJTjEuMjEvPgogICAgICAgIDxJTjEuMjIvPgogICAgICAgIDxJTjEuMjMvPgogICAgICAgIDxJTjEuMjQvPgogICAgICAgIDxJTjEuMjUvPgogICAgICAgIDxJTjEuMjYvPgogICAgICAgIDxJTjEuMjcvPgogICAgICAgIDxJTjEuMjgvPgogICAgICAgIDxJTjEuMjkvPgogICAgICAgIDxJTjEuMzAvPgogICAgICAgIDxJTjEuMzEvPgogICAgICAgIDxJTjEuMzIvPgogICAgICAgIDxJTjEuMzMvPgogICAgICAgIDxJTjEuMzQvPgogICAgICAgIDxJTjEuMzUvPgogICAgICAgIDxJTjEuMzY+CiAgICAgICAgICAgIDxJTjEuMzYuMT45OTk5OTk5OUY8L0lOMS4zNi4xPgogICAgICAgIDwvSU4xLjM2PgogICAgICAgIDxJTjEuMzcvPgogICAgPC9JTjE+CjwvSEw3TWVzc2FnZT4K</inboundTemplate>
          <outboundTemplate encoding="base64">ewoJIk1ldGEiOiB7CgkJIkRhdGFNb2RlbCI6IG51bGwsCgkJIkV2ZW50VHlwZSI6IG51bGwsCgkJIkV2ZW50RGF0ZVRpbWUiOiBudWxsLAoJCSJUZXN0IjogbnVsbCwKCQkiU291cmNlIjogewoJCQkiSUQiOiBudWxsLAoJCQkiTmFtZSI6IG51bGwKCQl9LAoJCSJEZXN0aW5hdGlvbnMiOiBbCgkJCXsKCQkJCSJJRCI6IG51bGwsCgkJCQkiTmFtZSI6IG51bGwKCQkJfQoJCV0sCgkJIk1lc3NhZ2UiOiB7CgkJCSJJRCI6IG51bGwKCQl9LAoJCSJUcmFuc21pc3Npb24iOiB7CgkJCSJJRCI6IG51bGwKCQl9LAoJCSJGYWNpbGl0eUNvZGUiOiBudWxsCgl9LAoJIlBhdGllbnQiOiB7CgkJIklkZW50aWZpZXJzIjogW10sCgkJIkRlbW9ncmFwaGljcyI6IHsKCQkJIkZpcnN0TmFtZSI6IG51bGwsCgkJCSJNaWRkbGVOYW1lIjogbnVsbCwKCQkJIkxhc3ROYW1lIjogbnVsbCwKCQkJIkRPQiI6IG51bGwsCgkJCSJTU04iOiBudWxsLAoJCQkiU2V4IjogbnVsbCwKCQkJIlJhY2UiOiBudWxsLAoJCQkiSXNIaXNwYW5pYyI6IG51bGwsCgkJCSJNYXJpdGFsU3RhdHVzIjogbnVsbCwKCQkJIklzRGVjZWFzZWQiOiBudWxsLAoJCQkiRGVhdGhEYXRlVGltZSI6IG51bGwsCgkJCSJQaG9uZU51bWJlciI6IHsKCQkJCSJIb21lIjogbnVsbCwKCQkJCSJPZmZpY2UiOiBudWxsLAoJCQkJIk1vYmlsZSI6IG51bGwKCQkJfSwKCQkJIkVtYWlsQWRkcmVzc2VzIjogW10sCgkJCSJMYW5ndWFnZSI6IG51bGwsCgkJCSJDaXRpemVuc2hpcCI6IFtdLAoJCQkiQWRkcmVzcyI6IHsKCQkJCSJTdHJlZXRBZGRyZXNzIjogbnVsbCwKCQkJCSJDaXR5IjogbnVsbCwKCQkJCSJTdGF0ZSI6IG51bGwsCgkJCQkiWklQIjogbnVsbCwKCQkJCSJDb3VudHkiOiBudWxsLAoJCQkJIkNvdW50cnkiOiBudWxsCgkJCX0KCQl9LAoJCSJOb3RlcyI6IFtdCgl9LAoJIkFwcG9pbnRtZW50SW5mbyI6IFtdLAoJIlZpc2l0IjogewoJCSJWaXNpdE51bWJlciI6IG51bGwsCgkJIkFjY291bnROdW1iZXIiOiBudWxsLAoJCSJWaXNpdERhdGVUaW1lIjogbnVsbCwKCQkiUGF0aWVudENsYXNzIjogbnVsbCwKCQkiU3RhdHVzIjogbnVsbCwKCQkiRHVyYXRpb24iOiBudWxsLAoJCSJSZWFzb24iOiBudWxsLAoJCSJUeXBlIjogbnVsbCwKCQkiSW5zdHJ1Y3Rpb25zIjogW10sCgkJIkF0dGVuZGluZ1Byb3ZpZGVyIjogewoJCQkiSUQiOiBudWxsLAoJCQkiSURUeXBlIjogbnVsbCwKCQkJIkZpcnN0TmFtZSI6IG51bGwsCgkJCSJMYXN0TmFtZSI6IG51bGwsCgkJCSJDcmVkZW50aWFscyI6IFtdLAoJCQkiQWRkcmVzcyI6IHsKCQkJCSJTdHJlZXRBZGRyZXNzIjogbnVsbCwKCQkJCSJDaXR5IjogbnVsbCwKCQkJCSJTdGF0ZSI6IG51bGwsCgkJCQkiWklQIjogbnVsbCwKCQkJCSJDb3VudHkiOiBudWxsLAoJCQkJIkNvdW50cnkiOiBudWxsCgkJCX0sCgkJCSJFbWFpbEFkZHJlc3NlcyI6IFtdLAoJCQkiUGhvbmVOdW1iZXIiOiB7CgkJCQkiT2ZmaWNlIjogbnVsbAoJCQl9LAoJCQkiTG9jYXRpb24iOiB7CgkJCQkiVHlwZSI6IG51bGwsCgkJCQkiRmFjaWxpdHkiOiBudWxsLAoJCQkJIkRlcGFydG1lbnQiOiBudWxsLAoJCQkJIlJvb20iOiBudWxsCgkJCX0KCQl9LAoJCSJDb25zdWx0aW5nUHJvdmlkZXIiOiB7CgkJCSJJRCI6IG51bGwsCgkJCSJJRFR5cGUiOiBudWxsLAoJCQkiRmlyc3ROYW1lIjogbnVsbCwKCQkJIkxhc3ROYW1lIjogbnVsbCwKCQkJIkNyZWRlbnRpYWxzIjogW10sCgkJCSJBZGRyZXNzIjogewoJCQkJIlN0cmVldEFkZHJlc3MiOiBudWxsLAoJCQkJIkNpdHkiOiBudWxsLAoJCQkJIlN0YXRlIjogbnVsbCwKCQkJCSJaSVAiOiBudWxsLAoJCQkJIkNvdW50eSI6IG51bGwsCgkJCQkiQ291bnRyeSI6IG51bGwKCQkJfSwKCQkJIkVtYWlsQWRkcmVzc2VzIjogW10sCgkJCSJQaG9uZU51bWJlciI6IHsKCQkJCSJPZmZpY2UiOiBudWxsCgkJCX0sCgkJCSJMb2NhdGlvbiI6IHsKCQkJCSJUeXBlIjogbnVsbCwKCQkJCSJGYWNpbGl0eSI6IG51bGwsCgkJCQkiRGVwYXJ0bWVudCI6IG51bGwsCgkJCQkiUm9vbSI6IG51bGwKCQkJfQoJCX0sCgkJIlJlZmVycmluZ1Byb3ZpZGVyIjogewoJCQkiSUQiOiBudWxsLAoJCQkiSURUeXBlIjogbnVsbCwKCQkJIkZpcnN0TmFtZSI6IG51bGwsCgkJCSJMYXN0TmFtZSI6IG51bGwsCgkJCSJDcmVkZW50aWFscyI6IFtdLAoJCQkiQWRkcmVzcyI6IHsKCQkJCSJTdHJlZXRBZGRyZXNzIjogbnVsbCwKCQkJCSJDaXR5IjogbnVsbCwKCQkJCSJTdGF0ZSI6IG51bGwsCgkJCQkiWklQIjogbnVsbCwKCQkJCSJDb3VudHkiOiBudWxsLAoJCQkJIkNvdW50cnkiOiBudWxsCgkJCX0sCgkJCSJFbWFpbEFkZHJlc3NlcyI6IFtdLAoJCQkiUGhvbmVOdW1iZXIiOiB7CgkJCQkiT2ZmaWNlIjogbnVsbAoJCQl9LAoJCQkiTG9jYXRpb24iOiB7CgkJCQkiVHlwZSI6IG51bGwsCgkJCQkiRmFjaWxpdHkiOiBudWxsLAoJCQkJIkRlcGFydG1lbnQiOiBudWxsLAoJCQkJIlJvb20iOiBudWxsCgkJCX0KCQl9LAoJCSJWaXNpdFByb3ZpZGVyIjogewoJCQkiSUQiOiBudWxsLAoJCQkiSURUeXBlIjogbnVsbCwKCQkJIkZpcnN0TmFtZSI6IG51bGwsCgkJCSJMYXN0TmFtZSI6IG51bGwsCgkJCSJDcmVkZW50aWFscyI6IFtdLAoJCQkiQWRkcmVzcyI6IHsKCQkJCSJTdHJlZXRBZGRyZXNzIjogbnVsbCwKCQkJCSJDaXR5IjogbnVsbCwKCQkJCSJTdGF0ZSI6IG51bGwsCgkJCQkiWklQIjogbnVsbCwKCQkJCSJDb3VudHkiOiBudWxsLAoJCQkJIkNvdW50cnkiOiBudWxsCgkJCX0sCgkJCSJFbWFpbEFkZHJlc3NlcyI6IFtdLAoJCQkiUGhvbmVOdW1iZXIiOiB7CgkJCQkiT2ZmaWNlIjogbnVsbAoJCQl9LAoJCQkiTG9jYXRpb24iOiB7CgkJCQkiVHlwZSI6IG51bGwsCgkJCQkiRmFjaWxpdHkiOiBudWxsLAoJCQkJIkRlcGFydG1lbnQiOiBudWxsLAoJCQkJIlJvb20iOiBudWxsCgkJCX0KCQl9LAoJCSJMb2NhdGlvbiI6IHsKCQkJIlR5cGUiOiBudWxsLAoJCQkiRmFjaWxpdHkiOiBudWxsLAoJCQkiRGVwYXJ0bWVudCI6IG51bGwsCgkJCSJSb29tIjogbnVsbAoJCX0sCgkJIkFkZGl0aW9uYWxTdGFmZiI6IFtdLAoJCSJEaWFnbm9zZXMiOiBbCgkJCXsKCQkJCSJDb2RlIjogbnVsbCwKCQkJCSJDb2Rlc2V0IjogbnVsbCwKCQkJCSJOYW1lIjogbnVsbCwKCQkJCSJUeXBlIjogbnVsbCwKCQkJCSJEb2N1bWVudGVkRGF0ZVRpbWUiOiBudWxsCgkJCX0KCQldLAoJCSJFcXVpcG1lbnQiOiBbXQoJfQp9</outboundTemplate>
          <inboundDataType>HL7V2</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
              <handleRepetitions>true</handleRepetitions>
              <handleSubcomponents>true</handleSubcomponents>
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <stripNamespaces>true</stripNamespaces>
              <segmentDelimiter>\r</segmentDelimiter>
              <convertLineBreaks>true</convertLineBreaks>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <segmentDelimiter>\r</segmentDelimiter>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
              <splitType>MSH_Segment</splitType>
              <batchScript></batchScript>
            </batchProperties>
            <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
              <segmentDelimiter>\r</segmentDelimiter>
              <successfulACKCode>AA</successfulACKCode>
              <successfulACKMessage></successfulACKMessage>
              <errorACKCode>AE</errorACKCode>
              <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
              <rejectedACKCode>AR</rejectedACKCode>
              <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
              <msh15ACKAccept>false</msh15ACKAccept>
              <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
            </responseGenerationProperties>
            <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
              <successfulACKCode>AA,CA</successfulACKCode>
              <errorACKCode>AE,CE</errorACKCode>
              <rejectedACKCode>AR,CR</rejectedACKCode>
              <validateMessageControlId>true</validateMessageControlId>
              <originalMessageControlId>Destination_Encoded</originalMessageControlId>
              <originalIdMapVariable></originalIdMapVariable>
            </responseValidationProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.12.0">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.12.0">
          <metaDataId>5</metaDataId>
          <name>FileWriter - All HL7 messages</name>
          <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <scheme>FILE</scheme>
            <host>C:/HL7/JSON/OUT</host>
            <outputPattern>${EventType}_${PatientID}_${MessageID}.json</outputPattern>
            <anonymous>true</anonymous>
            <username>anonymous</username>
            <password>anonymous</password>
            <timeout>10000</timeout>
            <keepConnectionOpen>false</keepConnectionOpen>
            <maxIdleTime>0</maxIdleTime>
            <secure>true</secure>
            <passive>true</passive>
            <validateConnection>true</validateConnection>
            <outputAppend>false</outputAppend>
            <errorOnExists>false</errorOnExists>
            <temporary>false</temporary>
            <binary>false</binary>
            <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
            <template>${message.encodedData}</template>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>File Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>7</metaDataId>
          <name>HTTP Sender - Scheduling Messages</name>
          <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <host></host>
            <useProxyServer>false</useProxyServer>
            <proxyAddress></proxyAddress>
            <proxyPort></proxyPort>
            <method>post</method>
            <headers class="linked-hash-map"/>
            <parameters class="linked-hash-map"/>
            <useHeadersVariable>false</useHeadersVariable>
            <useParametersVariable>false</useParametersVariable>
            <responseXmlBody>false</responseXmlBody>
            <responseParseMultipart>true</responseParseMultipart>
            <responseIncludeMetadata>false</responseIncludeMetadata>
            <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
            <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
            <multipart>false</multipart>
            <useAuthentication>false</useAuthentication>
            <authenticationType>Basic</authenticationType>
            <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
            <username></username>
            <password></password>
            <content></content>
            <contentType>text/plain</contentType>
            <dataTypeBinary>false</dataTypeBinary>
            <charset>NONE</charset>
            <socketTimeout>30000</socketTimeout>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.12.0">
                <name>Accept message if &quot;msg[&apos;Meta&apos;][&apos;EventType&apos;].toString()&quot; equals &quot;Cancel&quot;</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <field>msg[&apos;Meta&apos;][&apos;EventType&apos;].toString()</field>
                <condition>EQUALS</condition>
                <values>
                  <string>&quot;Cancel&quot;</string>
                </values>
              </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
            </elements>
          </filter>
          <transportName>HTTP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.12.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>EVENTTYPE</name>
            <type>STRING</type>
            <mappingName>EventType</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>SOURCENAME</name>
            <type>STRING</type>
            <mappingName>Source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>MESSAGEID</name>
            <type>STRING</type>
            <mappingName>MessageID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>VISITNUMBER</name>
            <type>STRING</type>
            <mappingName>VisitNumber</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.12.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1607497779694</time>
            <timezone>America/Chicago</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.12.0">
            <id>6975d386-da5e-4267-aa01-5d181743a931</id>
            <name>AristaMd-Utilities</name>
            <revision>22</revision>
            <lastModified>
              <time>1690987302603</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>This library was added upon migration to version 3.3.0. It includes all pre-existing
code templates, and is set to be included on all pre-existing and new channels.

You should create your own new libraries and assign code templates to them as you
see fit. You should also link libraries to specific channels, so that you&apos;re not
necessarily including all code templates on all channels all the time.</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>b484c4c9-6c84-4f8e-b2ec-9bff6a8cf7db</id>
                <name>checkHL7ElementIfUndefined</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262649</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	checkElementIfUndefined (element, debug)
	
	- Function to check provided Element if Undefined or length less than 1 character return null.

	@param {element} - XML object provided (e.g. msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.1&apos;]
	@return {String} return XML object or null object reference
*/
function checkElementIfUndefined (element, debug) {
	var scriptName= &apos;checkHL7ElementIfUndefined&apos;;

	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG element: &quot;+element+&quot; typeof: &quot;+typeof(element)+&quot; string: &quot;+element.toString()+&quot; length: &quot;+element.toString().length); }
	
	if(element == &apos;undefined&apos;) {
		return null;
	} else {
		if(element.toString().length&lt;1) {
			return null;
		} else {
			return element;
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b9651842-7ccb-4761-aedf-a9a1461dd5f7</id>
                <name>Convert HL7 Date Format to ISO</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262839</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts standard HL7 v2.x date format to human-readable ISO date format
*/

/*
	Author: IntegrateIT.us LLC
	toISODate: Returns an ISO-formatted date string with specified timezone offset

	Arguments
	---------
		Required
		--------
			hl7DateString:		An HL7-formatted date string (ex: &quot;yyyyMMddHHmmss&quot;

		Optional
		--------
			timezome:			A timezone identifier string corresponding to one of the java.util.TimeZone values (ex: &quot;US/Central&quot;)
*/

function toISODate( hl7DateString, timezone ) {
	var isoDate;
	var dateString;
	var hl7Formatter;
	var isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);

	if (timezone) {
		isoFormatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timezone));
	}
	
	if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString.substring(0,13)) &amp;&amp; hl7DateString.length &gt; 14 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmssZ&quot;);
	}
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 14 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
	} 
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 12 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);
	} 
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 8 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMdd&quot;);
	} 
	else dateString = hl7DateString;
	
	try {
		if (hl7Formatter) {
			isoDate = hl7Formatter.parse(hl7DateString);
			isoDate = isoFormatter.format(isoDate);
			dateString = new String(isoDate);
		}
	} catch (err) {
		dateString = hl7DateString;
	} finally {
		return dateString;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>95e528b7-1e7f-490e-86da-7c14b23ee4f3</id>
                <name>Convert ISO Date Format to HL7</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262912</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts ISO date format to HL7 v2 format - toHL7Date( isoDateString, timezone, debug )
*/

/*
	Author: IntegrateIT.us LLC
	toHL7Date: Returns an HL7-formatted date string with specified timezone offset

	Arguments
	---------
		Required
		--------
			isoDateString:		An ISO-formatted date string (ex: &quot;yyyy-MM-ddTHH:mm:ssZ&quot;

		Optional
		--------
			timezome:			A timezone identifier string corresponding to one of the java.util.TimeZone values (ex: &quot;US/Central&quot;)
*/

function toHL7Date( isoDateString, timezone, debug ) 
{
	var scriptName= &quot;toHL7Date&quot;;
	var hl7Date;
	var dateString;
	var isoFormatter;
	var hl7Formatter;

	// 2020-11-07T00:01:22+00:00
	var strTimeZone= &quot;GMT-8:00&quot;;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG:BEGIN isoDateString: &quot;+isoDateString+&quot;, timezone: &quot;+timezone+&quot;, strTimeZone: &quot;+strTimeZone); }

	// ISO Date Format: yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;
	if ( isoDateString != null &amp;&amp; isoDateString.length &lt;= 25 &amp;&amp; isoDateString.length &gt;= 22) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmssZ&quot;);
		if (timezone) {
			hl7Formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(strTimeZone));
		}
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG:UPDATE isoDateString: &quot;+isoDateString+&quot;, isoFormatter: &quot;+isoFormatter.toString()+&quot;, hl7Formatter: &quot;+hl7Formatter.toString()+&quot;, timezone: &quot;+timezone+&quot;, strTimeZone: &quot;+strTimeZone); }
	}
	// ISO Date Format: yyyy-MM-dd HH:mm:ss
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 19 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
	}
	// ISO Date Format: yyyy-MM-dd HH:mm
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 16 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);
	} 
	// ISO Date Format: yyyy-MM-dd
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 10 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMdd&quot;);	
	}
	// None of the above, return original date string.
	else dateString = isoDateString;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG:END isoDateString: &quot;+isoDateString+&quot;, isoFormatter: &quot;+isoFormatter.toString()+&quot;, hl7Formatter: &quot;+hl7Formatter.toString()+&quot;, timezone: &quot;+timezone+&quot;, strTimeZone: &quot;+strTimeZone); }

	try {
		if (isoFormatter) {
			hl7Date = isoFormatter.parse(isoDateString);
			hl7Date = hl7Formatter.format(hl7Date);
			dateString = new String(hl7Date);
		}
	} catch (err) {
		dateString = isoDateString;
	} finally {
		return dateString;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>41b1ac94-64c4-42ed-a501-a0caca7ae187</id>
                <name>convertMDYtoHL7DateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911263005</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	Convert MM-DD-YY HH:MM format to HL7 format
	
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function convertMDYtoHL7DateTime(eventDateTime, debug) {

	var scriptName= &apos;convertMDYtoHL7DateTime&apos;;
	if(typeof(debug) == &apos;undefined&apos;) { var debug= 0; }

	var lstEventDateTime= eventDateTime.toUpperCase().split(&quot; &quot;);
	var tEventDateTime= &quot;&quot;.concat(lstEventDateTime[0]).concat(&quot; &quot;).concat(lstEventDateTime[1]);

	var nEventDate= tEventDateTime.slice(6,8).concat(&quot;20&quot;).concat(tEventDateTime.slice(0,2)).concat(tEventDateTime.slice(3,5));
	var nEventTime= tEventDateTime.split(&quot; &quot;)[1];

	if(nEventTime.toString().indexOf(&quot;PM&quot;)&gt;-1) {
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG: eventTime contains PM: &quot; + nEventTime.toString().indexOf(&quot;PM&quot;)); }
		if(nEventTime.toString().length&lt;7) {
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG: eventTime length&lt;7 chars: &quot; + nEventTime.toString().length); } 
			var addLeadingZero= 12;
			var tHours= nEventTime.split(&quot;:&quot;)[0];
			var tMinutes= nEventTime.split(&quot;:&quot;)[1].replace(/[^0-9]/g, &quot;&quot;);
			var tHours= parseInt(addLeadingZero) + parseInt(tHours);
			var tEventTime= tHours.toString().concat(tMinutes.toString()).concat(&quot;00&quot;);
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG: new EventTime: &quot; + tEventTime.toString()); } 
		} else { 
			var tEventTime= nEventTime.toString().replace(/[^0-9]/g, &quot;&quot;) + &quot;00&quot;; 
		} 
	} else {
		var tEventTime= &quot;0&quot; + nEventTime.toString().replace(/[^0-9]/g, &quot;&quot;) + &quot;00&quot;; 
	}
	var nEventDateTime= nEventDate.toString().concat(tEventTime.toString());
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG datetime: &quot;+nEventDateTime); }

	return nEventDateTime;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>af95fd5e-8686-4b90-bd08-f11b4f5e78ee</id>
                <name>currentDate_yyyyMMddhhmmss</name>
                <revision>1</revision>
                <lastModified>
                  <time>1653055235571</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** currentDate_yyyyMMddhhmmss

  	- Desc: This function returns current DateTime only YYYYMMDDHHMMSS format

	@return {string} datetime - this string object contains the current DateTime only YYYYMMDDHHMMSS format
*/
function currentDate_yyyyMMddhhmmss() {
	var today = new Date();
	// set Date with leading zeros if needed
	var tMonth= today.getMonth()+1;
	if(tMonth.toString().length&lt;2) tMonth= &apos;0&apos;+tMonth;
	var tDay= today.getDate()
	if(tDay.toString().length&lt;2) tDay= &apos;0&apos;+tDay;
	var date = today.getFullYear()+&apos;&apos;+tMonth+&apos;&apos;+tDay;
	
	// set Time with leading zeros if needed
	var tHour= today.getHours();
	if(tHour.toString().length&lt;2) tHour= &apos;0&apos;+tHour;
	var tMinute= today.getMinutes();
	if(tMinute.toString().length&lt;2) tMinute= &apos;0&apos;+tMinute;
	var tSecond= today.getSeconds();
	if(tSecond.toString().length&lt;2) tSecond= &apos;0&apos;+tSecond;
	
	var time = tHour+&apos;&apos;+tMinute+&apos;&apos;+tSecond;
	var dateTime = date+&apos;&apos;+time;

	return dateTime;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>59ebad58-f839-4429-b9fb-175fb5a4d5ec</id>
                <name>getChannelId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262975</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	getChannelId(nameOfChannel) function
	DESC: This function takes the string nameOfChannel Object as a parameter and returns the string channelId

	PARAMETERS:
	@param	{string} - pass the string object of the channelName
	@return 	{string} - return the channelId

	MODIFIED:	

 	USAGE:								
	E.G 
	var arrElementObjects= setXMLElementsArrayWithDescendants(xmlElement, debug);
	
*/

function getChannelId(nameOfChannel){ 
    if (nameOfChannel === undefined || nameOfChannel.length == 0) return &quot;&quot;; 
     
    var listIDs = ChannelUtil.getChannelIds(); 
    if (listIDs.isEmpty()) return &quot;&quot;; 
     
    var nameFromList; 
    for (var i = 0; i &lt; listIDs.size();i++){ 
        nameFromList = ChannelUtil.getChannelName(listIDs.get(i)); 
        if(nameFromList == nameOfChannel) return listIDs.get(i); 
    } 
    return &quot;&quot;; 
}  </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>887718d9-8250-4b4e-9b81-4a02cc1bef45</id>
                <name>getHL7v2ACK</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262563</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	setHL7v2ACK(msg) - DEVELOPMENT
	
	- Desc: This function set and returns HL7v2 HAPI Acknowledgement (ACK) message based on evaluating conditions

	@param 
	sourceMsg {string} - source message
	responseCode {string} - Mirth Connect processing responseCode
	responseMsg {string} - response MSA message
	responseStatus {string} - Mirth Connect processing responseStatus
	
	@return {XML} - this returns the HL7 HAPI Ack message
*/
function setHL7v2ACK(sourceMsg,responseCode,responseMsg,responseStatus) {

	var scriptName= &apos;getHL7v2ACK&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG msg.MSH: &apos;+JSON.stringify(msg[&apos;MSH&apos;].toString())); }
	
	importPackage(com.mirth.connect.model);
	// responseStatus is an optional parameter
	if (!responseStatus)
		responseStatus = {&apos;AA&apos;:Response.Status.SUCCESS,&apos;AR&apos;:Response.Status.FILTERED,&apos;AE&apos;:Response.Status.FAILURE}[responseCode] || Response.Status.UNKNOWN;
	var ack = &lt;HL7Message/&gt;;
	
	ack.MSH[&apos;MSH.1&apos;] = sourceMsg.MSH[&apos;MSH.1&apos;].toString();
	ack.MSH[&apos;MSH.2&apos;] = sourceMsg.MSH[&apos;MSH.2&apos;].toString();
	ack.MSH[&apos;MSH.3&apos;] = sourceMsg.MSH[&apos;MSH.5&apos;].copy();
	ack.MSH[&apos;MSH.4&apos;] = sourceMsg.MSH[&apos;MSH.6&apos;].copy();
	ack.MSH[&apos;MSH.5&apos;] = sourceMsg.MSH[&apos;MSH.3&apos;].copy();
	ack.MSH[&apos;MSH.6&apos;] = sourceMsg.MSH[&apos;MSH.4&apos;].copy();
	ack.MSH[&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = DateUtil.getCurrentDate(&apos;yyyyMMddHHmmss&apos;);
	ack.MSH[&apos;MSH.9&apos;][&apos;MSH.9.1&apos;] = sourceMsg.MSH[&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString();
	ack.MSH[&apos;MSH.9&apos;][&apos;MSH.9.2&apos;] = sourceMsg.MSH[&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();
	ack.MSH[&apos;MSH.9&apos;][&apos;MSH.9.3&apos;] = &apos;ACK&apos;;
	ack.MSH[&apos;MSH.10&apos;] = sourceMsg.MSH[&apos;MSH.10&apos;].copy();
	ack.MSH[&apos;MSH.11&apos;] = sourceMsg.MSH[&apos;MSH.11&apos;].copy();
	ack.MSH[&apos;MSH.12&apos;] = sourceMsg.MSH[&apos;MSH.12&apos;].copy();
	ack.MSA[&apos;MSA.1&apos;][&apos;MSA.1.1&apos;] = responseCode;
	ack.MSA[&apos;MSA.2&apos;][&apos;MSA.2.1&apos;] = sourceMsg.MSH[&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
	ack.MSA[&apos;MSA.3&apos;][&apos;MSA.3.1&apos;] = responseMsg;
	
	responseMap.put(&apos;ACK&apos;,new Response(responseStatus,SerializerFactory.getHL7Serializer().fromXML(ack)));

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>9d1a5389-8d5f-4f98-923a-6e5570b4bdc3</id>
                <name>jsonNulltoEmptyString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262944</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts JSON Null Object values to empty string
*/

/*
	Author: IntegrateIT.us LLC
	toHL7Date: Returns an empty string

	Arguments
	---------
		Required
		--------
			JSON element:		A JSON element (e.g. &quot;MiddleName&quot;:null )

*/

function jsonNulltoEmptyString( strElement, jsonElement, debug ) 
{

	var scriptName= &quot;jsonNulltoEmptyString&quot;;
	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG jsonElement IN key:&quot;+strElement+&quot; value: &quot;+jsonElement); 
		logger.info(scriptName+&quot;::DEBUG typeof jsonElement IN: &quot;+typeof(jsonElement));
	}
	// try {
		if (typeof(jsonElement) !== &apos;undefined&apos;) {
			if (typeof(jsonElement) !== &apos;string&apos;) {
				if (typeof(jsonElement) == &apos;object&apos;) {
					var jsonElement= &quot;&quot;;
				} 
			} else {
				if (jsonElement.toString()== null) {
					var jsonElement= jsonElement.replace(null,&quot;&quot;);
				}
			}	
		} else {
			var jsonElement= &quot;&quot;;
		}
	/*
	} catch (err) {
		return jsonElement
	} finally {
		return newJsonElement;
	}
	*/
	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG jsonElement OUT key:&quot;+strElement+&quot; value: &quot;+jsonElement); 
		logger.info(scriptName+&quot;::DEBUG typeof jsonElement OUT: &quot;+typeof(jsonElement));
		logger.info(&quot;&quot;);
	}
	return jsonElement;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a53342c5-cb0d-47b5-b156-cd559fbd40ac</id>
                <name>random_date_after_date</name>
                <revision>7</revision>
                <lastModified>
                  <time>1658169955060</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function will produce a random date based on a provided date and number of days argument.

	@param {String} start - enter the starting date (&apos;YYYY&apos;, &apos;MM&apos;, &apos;DD&apos;) (e.g. &apos;2021&apos;, &apos;09&apos;, &apos;13&apos;)
	@param {String} days -  number of days (positive or negative) (e.g. 365, 3000, -365)
	@return {String} return description
*/
function random_date_after_date(start, days) {
	
	// randomDateAfterDate(new Date(2021, 4, 5), -365) 
	var scriptName= &apos;random_date_after_date&apos;;
	var debug= 1;
	
	// if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; start= &apos;+start+&apos; number of days: &apos;+days);
	// }
	
	var strRandom= Math.random()*days*10000;
	var strStringRandom= strRandom.toString();
	var strRandom= strStringRandom.substring(0,4);
	
	var newDate= new Date(start.getTime() + strRandom);
	// Fri Jun 26 2020 08:59:35 GMT-0600 (GMT-06:00)
	var strDate= newDate.getFullYear() + &quot;&quot; + addLeadingZeros(newDate.getMonth() + 1) + &quot;&quot; + addLeadingZeros(newDate.getDate());
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; random date generated: &apos;+strDate);
	}

	return strDate;
}

function addLeadingZeros(n) {
  
  if (n &lt;= 9) {
    return &quot;0&quot; + n;
  }
  
  return n;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b527f706-5c50-4f44-bee5-d16dd9edd8f0</id>
                <name>random_generator</name>
                <revision>3</revision>
                <lastModified>
                  <time>1653591827816</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function will produce a random number based on the number of characters provided into the numOfChars argument.

	@param {String} numOfChars - enter the number of random characters to be returned
	@return {String} return description
*/
function random_generator(numOfChars) {
	var scriptName= &apos;random_generator&apos;;
	var debug= 0;
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; evaluate number of characters: &apos;+numOfChars);
	}
	
	var strNumOfChars= &apos;&apos;+numOfChars+&apos;&apos;;
	var cntNumOfChars= strNumOfChars.padEnd(numOfChars,0);
	var strRandom= (Math.random()*cntNumOfChars).toFixed();
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; random number generated: &apos;+strRandom);
	}
	
	return strRandom;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fefafe84-cb17-415b-b96e-ff00063c267a</id>
                <name>sendHttpsPostClientCert</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262729</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	sendHttpsPostClientCert(state, url, certificatePath, certificatePassword) - Returns custom HTTP response
	
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} state - arg1 description
	@param {String} url - arg2 description
	@param {String} certificatePath - arg3 description
	@param {String} certificatePasswordte - arg4 description
	@return {String} return description
*/
function sendHttpsPostClientCert(state, url, certificatePath, certificatePassword) {
	// write code here.

	var scriptName= &quot;sendHttpsPostClientCert&quot;;
	var messageBody = messageObject.getEncodedData();
	var httpsSender = new Packages.com.xti.util.HTTPSSender(certificatePath, certificatePassword);

	// Set all the necessary parameters...
	httpsSender.setURL(url);
	httpsSender.setMessageBody(messageBody);

	logger.info(scriptName+&quot;::DEBUG Sending message to &quot; + url + &quot; - &quot; + messageBody);

	// Send the message to the URL...
	try {
		httpsSender.send();
		var retString = httpsSender.getReturnValue();
		retString = retString.substr(0, retString.indexOf(&quot;MSA&quot;)) + &quot;\r&quot; + retString.substr(retString.indexOf(&quot;MSA&quot;));
		var responseMessage = new Packages.com.mirth.connect.model.converters.SerializerFactory.getHL7Serializer().toXML(retString);
		channelMap.put(&apos;responseMessage&apos;,responseMessage);

		if (responseMessage[&apos;MSA&apos;][&apos;MSA.1&apos;][&apos;MSA.1.1&apos;].toString() == &apos;AA&apos;) {
			logger.info(scriptName+&quot;::DEBUG HTTPS send success. Return value= &quot; + retString);
		} else {
			logger.info(scriptName+&quot;::DEBUG HTTPS send failure. Return value= &quot; + retString);
			throw(&quot;HTTPS send failure. Return value=&quot; + retString);
		}
	} catch (e) {
		logger.info(scriptName+&quot;::DEBUG Error message= &quot; + e.message);
		throw(e.message);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>37fab7a4-d254-46f6-925b-1c4bd8bacc48</id>
                <name>set24Hrs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911263134</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	set24Hrs - Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function set24Hrs(d){

  if (d.slice(-2) === &quot;PM&quot;){
      var hrs = parseInt(d.slice(-7,-5))
      var mins = d.slice(-4,-2)
      hrs = hrs + 12
      var dd = d.slice(0,9) + &quot; &quot; + hrs + &quot;:&quot; + mins;
      return dd;
  } else if(d.slice(-2) === &quot;AM&quot;){
      return (d.slice(0, 16));
  } else {
      throw (&quot;UNRECOGNIZED_FORMAT&quot;,&quot;set24Hrs() Received Unrecognized Formatted String&quot;);
  }
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
            <name>WebPT-Common</name>
            <revision>2</revision>
            <lastModified>
              <time>1678715257049</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
                <name>Check if String contains</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122790</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
                <name>Check if String contains HTTP code</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122593</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8515e088-5c50-47ee-9e2f-9fad1ecf48bd</id>
                <name>Check if String is JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123309</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Added by Kirby Knight
	12/21/2020
	Test for JSON

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5f2f84ba-3e66-4be3-8260-8fbd8258bd92</id>
                <name>Check if the PDF is valid</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122055</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
//This function is used for checking the word &quot;PDF&quot; in inbound attachment.
function isValidBase64PDF(base64) {
	const ENCODED_PDF_SIGN = &quot;JVBERi&quot;; // %PDF sign
	const PDF_EOF = &quot;JSVFT0YNCg&quot;; // %EOF
	var pdfBase64Size = (base64.length() * (3 / 4)) - 1;
	
	return (base64.indexOf(ENCODED_PDF_SIGN) != -1 &amp;&amp; base64.indexOf(PDF_EOF) != -1 &amp;&amp; pdf_base64_size &gt; 36);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
                <name>Convert JSON date to HL7v2 date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122137</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
                <name>Convert JSON datetime to HL7v2 datetime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122430</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>bb21449a-df39-48c6-be52-24106c8df4c4</id>
                <name>Destination Formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Kirby Knight 03/10/2021
	
	This function will remove all other ROOT.Meta.Destinations nodes that are not passed in the
	destination variable and removes the ROOT.Meta.Destinations[x].Destination node

	@param {Any} destination - 
	@return {String} return description
*/
function formatDestinations(destination) {
var arrDestinations = msg[&apos;Meta&apos;][&apos;Destinations&apos;];
	//  Start at the end of the array because of the posibility of deleted array items 
	for (var i = arrDestinations.length - 1; i &gt;= 0; i--) {
		if (arrDestinations[i][&apos;Destination&apos;] == destination){
			delete arrDestinations[i][&apos;Destination&apos;]
		}else if (arrDestinations[i][&apos;Destination&apos;] != destination){
			arrDestinations.splice(i, 1);
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
                <name>Extract JSON node data</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121748</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7ed44f8a-fa40-4f3e-9426-3021604eabe0</id>
                <name>Get Feature Value by Name and Database</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123262</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns a string containing the feature value (system property) for a specific client database.

	@param {String} featureName - name of the feature, ie: &quot;BetterPTBidirectionalScheduling&quot;
	@param {String} databaseIdentifier - database name or databaseID / TenantID
	@param {String} databaseIdentifierType - what value is provided in databaseIdentifier. current options include &quot;ID&quot; or &quot;NAME&quot;
	@return {String} returns feature value
*/
function getFeatureValueByNameDatabase(featureName, databaseIdentifier, databaseIdentifierType) {
	var paramList = new Packages.java.util.ArrayList();
	paramList.add(featureName);
	paramList.add(databaseIdentifier);
	paramList.add(databaseIdentifierType);
	
	var sSQL = &apos;EXEC [dbo].[pr_FeatureValueByNameDatabase] ?, ?, ?&apos;;
	
	try {
		var result = executeSharedDBStatementFhirCh(sSQL, true, paramList);
		var featureValue ;
		if(result.next()){			//Added
		 featureValue = result.getString(1);
		}
		return featureValue;
	} catch (e) {
		logger.error(e);
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>9842be2c-c633-42ac-87f1-f91aca9e370f</id>
                <name>JSON Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121776</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function populates the MR and PI patient IDS to channelMap

	@return {String} return description
*/
function jsonPatientIds() {
	for each (patId in msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) {
	if (patId[&apos;IDType&apos;].toString() == &apos;MR&apos;){
		channelMap.put(&apos;extPatId&apos;, patId[&apos;ID&apos;].toString());
	}else if(patId[&apos;IDType&apos;].toString() == &apos;PI&apos;){
		channelMap.put(&apos;patId&apos;, patId[&apos;ID&apos;].toString());
	}
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
                <name>Verify JSON node for existance</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>394664c0-d536-4310-970e-181dc03ee7da</id>
            <name>WebPT-Conversions</name>
            <revision>2</revision>
            <lastModified>
              <time>1690140133427</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
                <name>Convert FHIR codes to HL7v2 codes</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122899</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>2fc8cbf3-0d92-4d1d-a3d6-136c09bd9f2a</id>
            <name>WebPT-Custom Database Functions</name>
            <revision>4</revision>
            <lastModified>
              <time>1690570753962</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>23c0b510-63e4-40fa-a4e1-7b2b92ce9a96</id>
                <name>Execute Statement Shared DB Conn clientDb Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122401</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Executes a SQL statement using a shared database connection stored in the Global Map. If the
connection does not exist, creates it.

@param {String} statement - The SQL statement to execute
@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
@param {List} paramList - A Java List object containing the parameters for the statement (optional)
 */
function executeSharedDBStatementclientDbCh(statement, isQuery, paramList) {
    var result;

    try {
        var dbConnclientDbCh = globalChannelMap.get(&quot;dbConnclientDbCh&quot;);

        if (dbConnclientDbCh == null || dbConnclientDbCh.getConnection().isClosed()) {
            dbConnclientDbCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;), $(&apos;dbClient&apos;), $(&apos;dbUserFhir&apos;), $(&apos;dbPwFhir&apos;));
            globalChannelMap.put(&quot;dbConnclientDbCh&quot;, dbConnclientDbCh);
        }

        if (paramList == undefined) {
            paramList = new Packages.java.util.ArrayList();
        }

        if (isQuery) {
            result = dbConnclientDbCh.executeCachedQuery(statement, paramList);
        } else {
            result = dbConnclientDbCh.executeUpdate(statement, paramList);
        }
    } catch (e) {
        logger.error(e);
    }
    finally {
        return result;
    }
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4efb3110-a83f-48b5-93ad-79c847b51865</id>
                <name>Execute Statement Shared DB Conn clntAcl Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123455</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClntAclCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnClntAclCh = globalChannelMap.get(&quot;dbConnClntAclCh&quot;);

		if (dbConnClntAclCh == null || dbConnClntAclCh.getConnection().isClosed())
		{
			dbConnClntAclCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbClntAcl&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnClntAclCh&quot;, dbConnClntAclCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnClntAclCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnClntAclCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>d96d45dd-57f7-4aa9-9bf4-e464d31b94c6</id>
                <name>Execute Statement Shared DB Conn FHIR</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121922</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhir(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhir.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhir.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6014068e-c021-4a38-9fa6-6f38f6a2cdab</id>
                <name>Execute Statement Shared DB Conn FHIR Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123492</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhirCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhirCh = globalChannelMap.get(&quot;dbConnFhirCh&quot;);

		if (dbConnFhirCh == null || dbConnFhirCh.getConnection().isClosed())
		{
			dbConnFhirCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnFhirCh&quot;, dbConnFhirCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhirCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhirCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fbd5c4a1-b816-4496-acdf-067005f1d376</id>
                <name>Execute Statement Shared DB Conn Translations Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123008</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementTranslationsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnTranslationsCh = globalChannelMap.get(&quot;dbConnTranslationsCh&quot;);

		if (dbConnTranslationsCh == null || dbConnTranslationsCh.getConnection().isClosed())
		{
			dbConnTranslationsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlTranslations&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnTranslationsCh&quot;, dbConnTranslationsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnTranslationsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnTranslationsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5d1a5577-4ba4-4d1e-b6cd-e2d924164909</id>
                <name>Execute Statement with Shared DB Conn ODS Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122280</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdsCh = globalChannelMap.get(&quot;dbConnOdsCh&quot;);

		if (dbConnOdsCh == null || dbConnOdsCh.getConnection().isClosed())
		{
			dbConnOdsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOds&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdsCh&quot;, dbConnOdsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>3991db14-0c0b-4123-952c-5164c1ded501</id>
                <name>Execute Statement with Shared DB Conn ODW Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122960</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.  THis connects to the ODW db in Azure

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdwCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdwCh = globalChannelMap.get(&quot;dbConnOdwCh&quot;);

		if (dbConnOdwCh == null || dbConnOdwCh.getConnection().isClosed())
		{
			dbConnOdwCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOdw&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdwCh&quot;, dbConnOdwCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdwCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdwCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fae08c88-7550-479a-b8ed-ffef47e8eed9</id>
                <name>executeSharedDBStatementClient</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121956</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClient(statement, isQuery, paramList, dbname)
{
	var result;
 	var dburl= &apos;jdbc:sqlserver://AZW1DEV-SQL02.clinicient.com:1433;databaseName=&apos;+dbname+&apos;&apos;;
	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),dburl,$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			
			//globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		result = dbConnFhir.executeCachedQuery(statement);
	
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>ed20a457-5beb-4aea-9bb9-cf91112ccc56</id>
            <name>WebPT-Default Functions</name>
            <revision>10</revision>
            <lastModified>
              <time>1690140133487</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>a8a9a0c8-9322-46dc-bef8-011eb3d70291</id>
                <name>Create Header for CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121678</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This creates a header for csv files based on the contents of the header variable.  The header
	variable is populated in the channel from the outbound msg template

	@return {String} return description
*/
function createHeader() {
	//Destination transformer.  this creates the header for each new file

	var path = java.nio.file.Paths.get($(&apos;filePath&apos;)+$(&apos;fileName&apos;));
	var bytes = (new java.lang.String($(&apos;header&apos;))).getBytes(&quot;UTF-8&quot;);
	try {
	  java.nio.file.Files.write(path, bytes, java.nio.file.StandardOpenOption.CREATE_NEW);
	}
	catch (e) {
	  //logger.info(&quot; should throw IOException if file already exists&quot;);
	
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5a886a1f-dab1-41b5-94c6-1a639907d7da</id>
                <name>Filter Message Evaluate Received Checksum</name>
                <revision>33</revision>
                <lastModified>
                  <time>1678916806664</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating a checksum for each provided message.  We save off the most recent 100 unique checksum values in a global 
	array so if the current message has been recently received we are able to ignore it.
	
	@author:  	Jeffrey Ritz
	@scriptName: 	filterEvaluateReceivedChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {boolean} filter - return filter boolean (true= filter msg, false= do not filter msg)
		persist received_checksum global ChannelMap array
		persist filterMessage ChannelMap variable
	@history
*/
function filterEvaluateReceivedChecksum(msg) {	

	var scriptName= &apos;filterEvaluateReceivedChecksum&apos;
	var filter = false;
	var received_len_limit = 999;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B connectorMessage.getRawData() typeof: &apos;+typeof(connectorMessage.getRawData())+&apos; msg: &apos;+connectorMessage.getRawData());
	} // end if 
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	// var dataBytes = new java.lang.String(connectorMessage.getRawData()).getBytes(&apos;UTF-8&apos;);
	// message = new String(message.getBytes(&quot;utf-8&quot;), &quot;utf-8&quot;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	// var dataBytes = new java.lang.String(msg.getBytes(&apos;UTF-8&apos;));
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);

	// var messageObjectgetBytes= checksum.update(connectorMessage.getRawData().getBytes());
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 
	
	$c(&apos;checksum&apos;, checksum.getValue());
	
	//grab the global channel map variable holding the last X unique checksums that we&apos;ve received
	var received = $gc(&apos;received_checksums&apos;);
	
	if (received == undefined) {
		var received = new Array();
		received.push(checksum.getValue());
	} else {
		//check if we&apos;ve recently received this message, skip it if so
		if (received.indexOf(checksum.getValue()) &gt; -1) {
			filter = true;
		//we haven&apos;t seen it recently, so remember it and allow it through
		} else {
			var received_len = received.length;
			if (received_len &gt; received_len_limit) {
				//remove oldest/first entry, shift all entries forward, and add new entry to end
				received.shift();
				received[received_len_limit] = checksum.getValue();
			} else {
				//add new entry to end of array
				received[received_len] = checksum.getValue();
			} // end if 
		} // end if 
	} // end if 

	 //debug code
	/*for (x=0; x&lt;=received_len_limit; x++) {
		$c(&apos;received-&apos;+x, received[x]);
	} */

	$c(&apos;filterMessage&apos;,filter);
	$gc(&apos;received_checksums&apos;,received);

	return filter;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fbd0484d-74a2-48e4-aedd-f97c2fcefa16</id>
                <name>Get Message Checksum</name>
                <revision>12</revision>
                <lastModified>
                  <time>1678916806703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating and reutrning a checksum for each provided message
	
	@author:  	Jeffrey Ritz
	@scriptName: 	getMessageChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {object} result - return checksum value
	@history
	2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() to remove the exponential representation of the number value
*/
function getMessageChecksum(msg) {	

	var scriptName= &apos;getMessageChecksum&apos;;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	} // end if 
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 

	var checksumValue= checksum.getValue();
	// 2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() 
	var arrChecksumValue= new Array(); 
	arrChecksumValue.push(checksumValue);
	$c(&apos;checksum&apos;, arrChecksumValue);

	return checksumValue;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>91db9bd1-ca92-4dcc-bba4-e1ece603fc87</id>
                <name>Remove Child Object From Parent Object Json</name>
                <revision>22</revision>
                <lastModified>
                  <time>1678916845037</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON child object and it&apos;s descendents from a parent object JSON
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeChildObjectFromParentObjectJson.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
		{string} parentObject - place the name of the string to be designated as the parent object in the JSON
		{string} childObject  - place the name of the string to be designated as the child object to be deleted from the JSON
	@param {object} msg - return modified Json object msg excluding specified Json child object
	@history
*/
function removeChildObjectFromParentObjectJson(msg, parentObject, childObject) {
	
	var scriptName= &apos;removeChildObjectFromParentObjectJson&apos;;
	var debug= 0;

	//var strObjJson= JSON.parse(msg);
	var strObjJson= JSON.stringify(msg);
	
	//var objJson= JSON.parse(msg);
	var newParentObjects= new Object();
	var parentObjects= msg;
	var arrParentObjects= new Array();
	var arrTransactionObjects= new Array();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof parentObjects: &apos;+typeof(parentObjects));
	for (var key in parentObjects) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof key: &apos;+typeof(key)+&apos; key: &apos;+key);
		if(key== parentObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof objJson[key]: &apos;+typeof(parentObjects[key])+&apos; parentObjects[key]: &apos;+JSON.stringify(parentObjects[key]));
			
			var newChildObjects= new Object();
			var childObjects= parentObjects[key];
			var arrChildObjects= new Array();
			
			for(var key2 in childObjects) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key2: &apos;+typeof(key2)+&apos; key2: &apos;+key2+&apos; childObject: &apos;+childObject);
				for(var key3 in childObjects[key2]) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key3: &apos;+typeof(key3)+&apos; key3: &apos;+key3+&apos; childObject: &apos;+childObject);
					if(key3== childObject) {
						var transactionObject= new Object();
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; childObject typeof: &apos;+typeof(childObjects[key2][key3])+&apos; childObject: &apos;+JSON.stringify(childObjects[key2][key3]));
						transactionObject.key= key3;
						transactionObject.value= childObjects[key2][key3];
						delete childObjects[key2][key3];
						if(debug&gt;0) logger.info(&apos;DEBUG::&apos;+scriptName+&apos; DELETE childObject: &apos;+key3+&apos; of parentObject: &apos;+JSON.stringify(childObjects[key2]));
						arrTransactionObjects.push(transactionObject);
					} // end if
				} // end for 
				arrChildObjects.push(childObjects[key2]);
			} // end for
			newParentObjects[key]= arrChildObjects;
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add all child keys: &apos;+JSON.stringify(arrChildObjects)+&apos; into ParentObject[&apos;+key+&apos;]: &apos;+newParentObjects[key]);
		} else {
			newParentObjects[key]= parentObjects[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+parentObjects[key]+&apos; string: &apos;+JSON.stringify(parentObjects[key]));
		} // end if
		arrParentObjects.push(newParentObjects);
	} // end for 
	var newMsg= arrParentObjects;
	channelMap.put(&apos;removeChildObjectMsg&apos;,newMsg);
	channelMap.put(&apos;removedChildTransIds&apos;,arrTransactionObjects);
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));
	return newMsg;
	
} </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2ff28338-dfb6-445d-a04e-c74b5486a08c</id>
                <name>Remove Object From Json</name>
                <revision>24</revision>
                <lastModified>
                  <time>1678915278542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON object and it&apos;s descendents from the msg
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeObjectFromJson.js
	@created: 	2023-03-09
	@param {string} msg - Inbound connectorMessage.getRawData()
	@param {string} msg - return modified msg excluding specified Json object from msg
	@history
	2023-03-15 JER - Modified to include removeObject function parameter to specify specific JSON object by referencing key to be removed
*/
function removeObjectFromJson(msg, removeObject) {
	
	var scriptName= &apos;removeObjectFromJson&apos;;
	var debug= 0;
	//var objJson= JSON.stringify(msg);
	var objJson= JSON.parse(msg);
	var newObjJson= new Object();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof objJson: &apos;+typeof(objJson)+&apos; objJSON: &apos;+JSON.stringify(objJson));
	for (var key in objJson) {
		if(key== removeObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; DELETE key: &apos;+key);
			// delete objJson[key];
		} else {
			newObjJson[key]= objJson[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+objJson[key]+&apos; string: &apos;+JSON.stringify(objJson[key]));
		} // end if 
	} // end for 
	var newMsg= newObjJson;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));

	// return JSON.stringify(newMsg);
	return newMsg;
} 
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>993a6fd8-454a-4133-ba32-dbcfea71582b</id>
                <name>Update EDITransactionLog</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123233</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	The purpose of this function is to update the status in Insight.
	Populate the channel map with the following variables functionalGroupControlNumber, status, eventDate

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateStatus () {

	//  Build the llst of paramters to pass to the database
	var paramList = new Packages.java.util.ArrayList();
	paramList.add($(&apos;functionalGroupControlNumber&apos;));
	paramList.add($(&apos;eventDate&apos;));  //dateTime in the acknoledged field in this format (&quot;2017-07-31 14:15:01.577&quot;)
	paramList.add(new java.lang.Integer(parseInt($(&apos;status&apos;), 10)));
	
//	logger.info(&quot;updateStatus &quot;+paramList);

	//  SQL Statement and paramters that will be sent to SQL
	var statement = &quot;EXEC dbo.pr_EDITransactionLog_Update ?, ?, ?&quot;;
	//  Code template used for establishiing connection and passing the sql statement and parameter list  
	var result = executeSharedDBStatementFhirCh(statement, false, paramList);
	return result;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>42cb290e-5fb0-46b8-82db-576ea1e1ba0d</id>
                <name>Update EDITransactionLog from responseStatus in the response transformer </name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123356</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Call this in the response transformer on the destination.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateReponseStatus() {
	var status = 0;
	if (responseStatus == SENT){
		var status = 1;
		channelMap.put(&apos;status&apos;,status);
	}

updateStatus()
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2223579b-f914-4be7-a575-f1a2a2aa1ae2</id>
                <name>ValidateToString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123044</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} mapping - 
	@param {Any} defaultValue - 
	@param {Any} replacement - 
	@return {String} return description
*/
function validateToString(mapping, defaultValue, replacement) {
    if (mapping == null) {
        mapping = &apos;&apos;;
    }
    return validate(mapping, defaultValue, replacement).toString() + &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>8c9a8268-4ef0-43e9-ae5b-bf8895f0b80c</id>
            <name>WebPT-FORMAT</name>
            <revision>3</revision>
            <lastModified>
              <time>1691001755225</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>Include any functions or codes with 
-date &amp; time formating related
-data type formatting</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>920c9ead-70a6-4168-9d95-89261b73ae44</id>
                <name>12digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123520</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Take any 12 digit string yyyyMMddHHmm and change to MM/dd/yyyy HH:mm 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm
*/
function yyyyMMddHHmm(string) {
	return DateUtil.convertDate(&quot;yyyyMMddHHmm&quot;, &quot;MM/dd/yyyy HH:mm&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fe2689ec-1946-46d5-8dd6-8fbbf106e1e6</id>
                <name>14digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122871</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Take 14 digit string yyyyMMddHHmmss and change to MM/dd/yyyy HH:mm:ss 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm:ss
*/
function yyyyMMddHHmmss(string) {
	if (string.length == 14) {
		  return DateUtil.convertDate(&quot;yyyyMMddHHmmss&quot;, &quot;MM/dd/yyyy HH:mm:ss&quot;, string);
	}
	else {
		return &quot;unregcognized string&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b9db35e2-d5bd-48a1-8cc6-3475c698d7b4</id>
                <name>currentDT_yyyy-MM-dd HH:mm:ss.SSS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123114</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Kirby Knight
	Date Modified:  11/09/2020
	Retund the current date/time down to the millisecond

	@return {String} return description
*/
function currentDtToMilliseconds() {
	return DateUtil.getCurrentDate(&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7e747999-4bec-43fc-978d-7049d3543cf0</id>
                <name>fixHL7NodeOrder</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/

function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>dfedacf6-773b-413e-b78d-1bf16a92071d</id>
                <name>formatHL7Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121643</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Take any eight digit HL7 message data string (yyyyMMdd) and formats it human-readable format (MM/dd/yyyy)
	such as 20090612 -&gt; 06/12/2009

	@param {String} arg1 - 8 digit HL7 message data string yyyyMMdd
	@return {String} return date format as MM/dd/yyyy
*/
function formatHL7Date(string) {
	return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;MM/dd/yyyy&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a8f54921-2cb6-4134-8806-3c4e10a757d9</id>
                <name>getCurrentLocalTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122014</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = getCurrentLocalTimestamp();

	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestamp() {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(&quot;EST&quot;)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6c5f1bd8-ebbf-4c8e-b465-0be8ccaba0d0</id>
                <name>getCurrentLocalTimeToMs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123077</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	Gets the current local date/time to the milliseconds
	Converts to the timezone that is passed in Examples (America/New_York, America/Chicago, America/Phoenix )

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestampToMs(timeZone) {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timeZone)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>78d74c5b-c881-404a-ad96-4e909e1a19f3</id>
                <name>phoneToE164</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121982</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Insight phone number to E164 format 5554446666 to +15554446666

	@param {Any} phoneIn - 
	@return {String} return description
*/
function phoneToE164(phoneIn) {
	logger.info(&apos;L1 &apos;+phoneIn);
	if(phoneIn != null ){
	//phoneIn = &apos;+1&apos; + phoneIn.toString(); 
	logger.info(&apos;L2 &apos;+phoneIn);
	return &apos;+1&apos; + phoneIn.toString(); 
	} else{
		return null;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>6a32d94d-408c-4e10-9799-e45e150b5c1f</id>
            <name>WebPT-MISC</name>
            <revision>3</revision>
            <lastModified>
              <time>1690987207668</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>miscellaneous javascript</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>84b4f1c7-f82d-4140-9fbd-98a95f68ff32</id>
                <name>getChannelState</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122648</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetChannelState(channel_id) {

    var channel_status = &quot;NA&quot;;

    var channel_count = parseInt(Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().size());

    for(var i=0;i&lt;channel_count;i++) {
        if (channel_id == Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getChannelId()) {
            channel_status = Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getState();
        }
    }

    return channel_status;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>715435a9-cb15-4e8f-bc5b-4249eaea6e17</id>
                <name>momentjs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122487</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Testing MIRTH-3794 using external JavaScript library &quot;moment.js&quot;
*/
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=b():&quot;function&quot;==typeof define&amp;&amp;define.amd?define(b):a.moment=b()}(this,function(){&quot;use strict&quot;;function a(){return Hc.apply(null,arguments)}function b(a){Hc=a}function c(a){return&quot;[object Array]&quot;===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||&quot;[object Date]&quot;===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c&lt;a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&amp;&amp;(a[c]=b[c]);return f(b,&quot;toString&quot;)&amp;&amp;(a.toString=b.toString),f(b,&quot;valueOf&quot;)&amp;&amp;(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ca(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&amp;&amp;(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow&lt;0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&amp;&amp;(a._isValid=a._isValid&amp;&amp;0===b.charsLeftOver&amp;&amp;0===b.unusedTokens.length&amp;&amp;void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if(&quot;undefined&quot;!=typeof b._isAMomentObject&amp;&amp;(a._isAMomentObject=b._isAMomentObject),&quot;undefined&quot;!=typeof b._i&amp;&amp;(a._i=b._i),&quot;undefined&quot;!=typeof b._f&amp;&amp;(a._f=b._f),&quot;undefined&quot;!=typeof b._l&amp;&amp;(a._l=b._l),&quot;undefined&quot;!=typeof b._strict&amp;&amp;(a._strict=b._strict),&quot;undefined&quot;!=typeof b._tzm&amp;&amp;(a._tzm=b._tzm),&quot;undefined&quot;!=typeof b._isUTC&amp;&amp;(a._isUTC=b._isUTC),&quot;undefined&quot;!=typeof b._offset&amp;&amp;(a._offset=b._offset),&quot;undefined&quot;!=typeof b._pf&amp;&amp;(a._pf=j(b)),&quot;undefined&quot;!=typeof b._locale&amp;&amp;(a._locale=b._locale),Jc.length&gt;0)for(c in Jc)d=Jc[c],e=b[d],&quot;undefined&quot;!=typeof e&amp;&amp;(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),Kc===!1&amp;&amp;(Kc=!0,a.updateOffset(this),Kc=!1)}function o(a){return a instanceof n||null!=a&amp;&amp;null!=a._isAMomentObject}function p(a){return 0&gt;a?Math.ceil(a):Math.floor(a)}function q(a){var b=+a,c=0;return 0!==b&amp;&amp;isFinite(b)&amp;&amp;(c=p(b)),c}function r(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e&gt;d;d++)(c&amp;&amp;a[d]!==b[d]||!c&amp;&amp;q(a[d])!==q(b[d]))&amp;&amp;g++;return g+f}function s(){}function t(a){return a?a.toLowerCase().replace(&quot;_&quot;,&quot;-&quot;):a}function u(a){for(var b,c,d,e,f=0;f&lt;a.length;){for(e=t(a[f]).split(&quot;-&quot;),b=e.length,c=t(a[f+1]),c=c?c.split(&quot;-&quot;):null;b&gt;0;){if(d=v(e.slice(0,b).join(&quot;-&quot;)))return d;if(c&amp;&amp;c.length&gt;=b&amp;&amp;r(e,c,!0)&gt;=b-1)break;b--}f++}return null}function v(a){var b=null;if(!Lc[a]&amp;&amp;&quot;undefined&quot;!=typeof module&amp;&amp;module&amp;&amp;module.exports)try{b=Ic._abbr,require(&quot;./locale/&quot;+a),w(b)}catch(c){}return Lc[a]}function w(a,b){var c;return a&amp;&amp;(c=&quot;undefined&quot;==typeof b?y(a):x(a,b),c&amp;&amp;(Ic=c)),Ic._abbr}function x(a,b){return null!==b?(b.abbr=a,Lc[a]=Lc[a]||new s,Lc[a].set(b),w(a),Lc[a]):(delete Lc[a],null)}function y(a){var b;if(a&amp;&amp;a._locale&amp;&amp;a._locale._abbr&amp;&amp;(a=a._locale._abbr),!a)return Ic;if(!c(a)){if(b=v(a))return b;a=[a]}return u(a)}function z(a,b){var c=a.toLowerCase();Mc[c]=Mc[c+&quot;s&quot;]=Mc[b]=a}function A(a){return&quot;string&quot;==typeof a?Mc[a]||Mc[a.toLowerCase()]:void 0}function B(a){var b,c,d={};for(c in a)f(a,c)&amp;&amp;(b=A(c),b&amp;&amp;(d[b]=a[c]));return d}function C(b,c){return function(d){return null!=d?(E(this,b,d),a.updateOffset(this,c),this):D(this,b)}}function D(a,b){return a._d[&quot;get&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b]()}function E(a,b,c){return a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b](c)}function F(a,b){var c;if(&quot;object&quot;==typeof a)for(c in a)this.set(c,a[c]);else if(a=A(a),&quot;function&quot;==typeof this[a])return this[a](b);return this}function G(a,b,c){var d=&quot;&quot;+Math.abs(a),e=b-d.length,f=a&gt;=0;return(f?c?&quot;+&quot;:&quot;&quot;:&quot;-&quot;)+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function H(a,b,c,d){var e=d;&quot;string&quot;==typeof d&amp;&amp;(e=function(){return this[d]()}),a&amp;&amp;(Qc[a]=e),b&amp;&amp;(Qc[b[0]]=function(){return G(e.apply(this,arguments),b[1],b[2])}),c&amp;&amp;(Qc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function I(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,&quot;&quot;):a.replace(/\\/g,&quot;&quot;)}function J(a){var b,c,d=a.match(Nc);for(b=0,c=d.length;c&gt;b;b++)Qc[d[b]]?d[b]=Qc[d[b]]:d[b]=I(d[b]);return function(e){var f=&quot;&quot;;for(b=0;c&gt;b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function K(a,b){return a.isValid()?(b=L(b,a.localeData()),Pc[b]=Pc[b]||J(b),Pc[b](a)):a.localeData().invalidDate()}function L(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Oc.lastIndex=0;d&gt;=0&amp;&amp;Oc.test(a);)a=a.replace(Oc,c),Oc.lastIndex=0,d-=1;return a}function M(a){return&quot;function&quot;==typeof a&amp;&amp;&quot;[object Function]&quot;===Object.prototype.toString.call(a)}function N(a,b,c){dd[a]=M(b)?b:function(a){return a&amp;&amp;c?c:b}}function O(a,b){return f(dd,a)?dd[a](b._strict,b._locale):new RegExp(P(a))}function P(a){return a.replace(&quot;\\&quot;,&quot;&quot;).replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,&quot;\\$&amp;&quot;)}function Q(a,b){var c,d=b;for(&quot;string&quot;==typeof a&amp;&amp;(a=[a]),&quot;number&quot;==typeof b&amp;&amp;(d=function(a,c){c[b]=q(a)}),c=0;c&lt;a.length;c++)ed[a[c]]=d}function R(a,b){Q(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function S(a,b,c){null!=b&amp;&amp;f(ed,a)&amp;&amp;ed[a](b,c._a,c,a)}function T(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function U(a){return this._months[a.month()]}function V(a){return this._monthsShort[a.month()]}function W(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12&gt;d;d++){if(e=h([2e3,d]),c&amp;&amp;!this._longMonthsParse[d]&amp;&amp;(this._longMonthsParse[d]=new RegExp(&quot;^&quot;+this.months(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;),this._shortMonthsParse[d]=new RegExp(&quot;^&quot;+this.monthsShort(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;)),c||this._monthsParse[d]||(f=&quot;^&quot;+this.months(e,&quot;&quot;)+&quot;|^&quot;+this.monthsShort(e,&quot;&quot;),this._monthsParse[d]=new RegExp(f.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),c&amp;&amp;&quot;MMMM&quot;===b&amp;&amp;this._longMonthsParse[d].test(a))return d;if(c&amp;&amp;&quot;MMM&quot;===b&amp;&amp;this._shortMonthsParse[d].test(a))return d;if(!c&amp;&amp;this._monthsParse[d].test(a))return d}}function X(a,b){var c;return&quot;string&quot;==typeof b&amp;&amp;(b=a.localeData().monthsParse(b),&quot;number&quot;!=typeof b)?a:(c=Math.min(a.date(),T(a.year(),b)),a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+&quot;Month&quot;](b,c),a)}function Y(b){return null!=b?(X(this,b),a.updateOffset(this,!0),this):D(this,&quot;Month&quot;)}function Z(){return T(this.year(),this.month())}function $(a){var b,c=a._a;return c&amp;&amp;-2===j(a).overflow&amp;&amp;(b=c[gd]&lt;0||c[gd]&gt;11?gd:c[hd]&lt;1||c[hd]&gt;T(c[fd],c[gd])?hd:c[id]&lt;0||c[id]&gt;24||24===c[id]&amp;&amp;(0!==c[jd]||0!==c[kd]||0!==c[ld])?id:c[jd]&lt;0||c[jd]&gt;59?jd:c[kd]&lt;0||c[kd]&gt;59?kd:c[ld]&lt;0||c[ld]&gt;999?ld:-1,j(a)._overflowDayOfYear&amp;&amp;(fd&gt;b||b&gt;hd)&amp;&amp;(b=hd),j(a).overflow=b),a}function _(b){a.suppressDeprecationWarnings===!1&amp;&amp;&quot;undefined&quot;!=typeof console&amp;&amp;console.warn&amp;&amp;console.warn(&quot;Deprecation warning: &quot;+b)}function aa(a,b){var c=!0;return g(function(){return c&amp;&amp;(_(a+&quot;\n&quot;+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function ba(a,b){od[a]||(_(b),od[a]=!0)}function ca(a){var b,c,d=a._i,e=pd.exec(d);if(e){for(j(a).iso=!0,b=0,c=qd.length;c&gt;b;b++)if(qd[b][1].exec(d)){a._f=qd[b][0];break}for(b=0,c=rd.length;c&gt;b;b++)if(rd[b][1].exec(d)){a._f+=(e[6]||&quot; &quot;)+rd[b][0];break}d.match(ad)&amp;&amp;(a._f+=&quot;Z&quot;),va(a)}else a._isValid=!1}function da(b){var c=sd.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ca(b),void(b._isValid===!1&amp;&amp;(delete b._isValid,a.createFromInputFallback(b))))}function ea(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970&gt;a&amp;&amp;h.setFullYear(a),h}function fa(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970&gt;a&amp;&amp;b.setUTCFullYear(a),b}function ga(a){return ha(a)?366:365}function ha(a){return a%4===0&amp;&amp;a%100!==0||a%400===0}function ia(){return ha(this.year())}function ja(a,b,c){var d,e=c-b,f=c-a.day();return f&gt;e&amp;&amp;(f-=7),e-7&gt;f&amp;&amp;(f+=7),d=Da(a).add(f,&quot;d&quot;),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ka(a){return ja(a,this._week.dow,this._week.doy).week}function la(){return this._week.dow}function ma(){return this._week.doy}function na(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function oa(a){var b=ja(this,1,4).week;return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function pa(a,b,c,d,e){var f,g=6+e-d,h=fa(a,0,1+g),i=h.getUTCDay();return e&gt;i&amp;&amp;(i+=7),c=null!=c?1*c:e,f=1+g+7*(b-1)-i+c,{year:f&gt;0?a:a-1,dayOfYear:f&gt;0?f:ga(a-1)+f}}function qa(a){var b=Math.round((this.clone().startOf(&quot;day&quot;)-this.clone().startOf(&quot;year&quot;))/864e5)+1;return null==a?b:this.add(a-b,&quot;d&quot;)}function ra(a,b,c){return null!=a?a:null!=b?b:c}function sa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ta(a){var b,c,d,e,f=[];if(!a._d){for(d=sa(a),a._w&amp;&amp;null==a._a[hd]&amp;&amp;null==a._a[gd]&amp;&amp;ua(a),a._dayOfYear&amp;&amp;(e=ra(a._a[fd],d[fd]),a._dayOfYear&gt;ga(e)&amp;&amp;(j(a)._overflowDayOfYear=!0),c=fa(e,0,a._dayOfYear),a._a[gd]=c.getUTCMonth(),a._a[hd]=c.getUTCDate()),b=0;3&gt;b&amp;&amp;null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7&gt;b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[id]&amp;&amp;0===a._a[jd]&amp;&amp;0===a._a[kd]&amp;&amp;0===a._a[ld]&amp;&amp;(a._nextDay=!0,a._a[id]=0),a._d=(a._useUTC?fa:ea).apply(null,f),null!=a._tzm&amp;&amp;a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&amp;&amp;(a._a[id]=24)}}function ua(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=ra(b.GG,a._a[fd],ja(Da(),1,4).year),d=ra(b.W,1),e=ra(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=ra(b.gg,a._a[fd],ja(Da(),f,g).year),d=ra(b.w,1),null!=b.d?(e=b.d,f&gt;e&amp;&amp;++d):e=null!=b.e?b.e+f:f),h=pa(c,d,e,g,f),a._a[fd]=h.year,a._dayOfYear=h.dayOfYear}function va(b){if(b._f===a.ISO_8601)return void ca(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=&quot;&quot;+b._i,i=h.length,k=0;for(e=L(b._f,b._locale).match(Nc)||[],c=0;c&lt;e.length;c++)f=e[c],d=(h.match(O(f,b))||[])[0],d&amp;&amp;(g=h.substr(0,h.indexOf(d)),g.length&gt;0&amp;&amp;j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Qc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),S(f,d,b)):b._strict&amp;&amp;!d&amp;&amp;j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length&gt;0&amp;&amp;j(b).unusedInput.push(h),j(b).bigHour===!0&amp;&amp;b._a[id]&lt;=12&amp;&amp;b._a[id]&gt;0&amp;&amp;(j(b).bigHour=void 0),b._a[id]=wa(b._locale,b._a[id],b._meridiem),ta(b),$(b)}function wa(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&amp;&amp;12&gt;b&amp;&amp;(b+=12),d||12!==b||(b=0),b):b}function xa(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e&lt;a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&amp;&amp;(b._useUTC=a._useUTC),b._f=a._f[e],va(b),k(b)&amp;&amp;(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d&gt;f)&amp;&amp;(d=f,c=b));g(a,c||b)}function ya(a){if(!a._d){var b=B(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ta(a)}}function za(a){var b=new n($(Aa(a)));return b._nextDay&amp;&amp;(b.add(1,&quot;d&quot;),b._nextDay=void 0),b}function Aa(a){var b=a._i,e=a._f;return a._locale=a._locale||y(a._l),null===b||void 0===e&amp;&amp;&quot;&quot;===b?l({nullInput:!0}):(&quot;string&quot;==typeof b&amp;&amp;(a._i=b=a._locale.preparse(b)),o(b)?new n($(b)):(c(e)?xa(a):e?va(a):d(b)?a._d=b:Ba(a),a))}function Ba(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):&quot;string&quot;==typeof f?da(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ta(b)):&quot;object&quot;==typeof f?ya(b):&quot;number&quot;==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ca(a,b,c,d,e){var f={};return&quot;boolean&quot;==typeof c&amp;&amp;(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,za(f)}function Da(a,b,c,d){return Ca(a,b,c,d,!1)}function Ea(a,b){var d,e;if(1===b.length&amp;&amp;c(b[0])&amp;&amp;(b=b[0]),!b.length)return Da();for(d=b[0],e=1;e&lt;b.length;++e)(!b[e].isValid()||b[e][a](d))&amp;&amp;(d=b[e]);return d}function Fa(){var a=[].slice.call(arguments,0);return Ea(&quot;isBefore&quot;,a)}function Ga(){var a=[].slice.call(arguments,0);return Ea(&quot;isAfter&quot;,a)}function Ha(a){var b=B(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=y(),this._bubble()}function Ia(a){return a instanceof Ha}function Ja(a,b){H(a,0,0,function(){var a=this.utcOffset(),c=&quot;+&quot;;return 0&gt;a&amp;&amp;(a=-a,c=&quot;-&quot;),c+G(~~(a/60),2)+b+G(~~a%60,2)})}function Ka(a){var b=(a||&quot;&quot;).match(ad)||[],c=b[b.length-1]||[],d=(c+&quot;&quot;).match(xd)||[&quot;-&quot;,0,0],e=+(60*d[1])+q(d[2]);return&quot;+&quot;===d[0]?e:-e}function La(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Da(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Da(b).local()}function Ma(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Na(b,c){var d,e=this._offset||0;return null!=b?(&quot;string&quot;==typeof b&amp;&amp;(b=Ka(b)),Math.abs(b)&lt;16&amp;&amp;(b=60*b),!this._isUTC&amp;&amp;c&amp;&amp;(d=Ma(this)),this._offset=b,this._isUTC=!0,null!=d&amp;&amp;this.add(d,&quot;m&quot;),e!==b&amp;&amp;(!c||this._changeInProgress?bb(this,Ya(b-e,&quot;m&quot;),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ma(this)}function Oa(a,b){return null!=a?(&quot;string&quot;!=typeof a&amp;&amp;(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Pa(a){return this.utcOffset(0,a)}function Qa(a){return this._isUTC&amp;&amp;(this.utcOffset(0,a),this._isUTC=!1,a&amp;&amp;this.subtract(Ma(this),&quot;m&quot;)),this}function Ra(){return this._tzm?this.utcOffset(this._tzm):&quot;string&quot;==typeof this._i&amp;&amp;this.utcOffset(Ka(this._i)),this}function Sa(a){return a=a?Da(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Ta(){return this.utcOffset()&gt;this.clone().month(0).utcOffset()||this.utcOffset()&gt;this.clone().month(5).utcOffset()}function Ua(){if(&quot;undefined&quot;!=typeof this._isDSTShifted)return this._isDSTShifted;var a={};if(m(a,this),a=Aa(a),a._a){var b=a._isUTC?h(a._a):Da(a._a);this._isDSTShifted=this.isValid()&amp;&amp;r(a._a,b.toArray())&gt;0}else this._isDSTShifted=!1;return this._isDSTShifted}function Va(){return!this._isUTC}function Wa(){return this._isUTC}function Xa(){return this._isUTC&amp;&amp;0===this._offset}function Ya(a,b){var c,d,e,g=a,h=null;return Ia(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:&quot;number&quot;==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=yd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:0,d:q(h[hd])*c,h:q(h[id])*c,m:q(h[jd])*c,s:q(h[kd])*c,ms:q(h[ld])*c}):(h=zd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:Za(h[2],c),M:Za(h[3],c),d:Za(h[4],c),h:Za(h[5],c),m:Za(h[6],c),s:Za(h[7],c),w:Za(h[8],c)}):null==g?g={}:&quot;object&quot;==typeof g&amp;&amp;(&quot;from&quot;in g||&quot;to&quot;in g)&amp;&amp;(e=_a(Da(g.from),Da(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ha(g),Ia(a)&amp;&amp;f(a,&quot;_locale&quot;)&amp;&amp;(d._locale=a._locale),d}function Za(a,b){var c=a&amp;&amp;parseFloat(a.replace(&quot;,&quot;,&quot;.&quot;));return(isNaN(c)?0:c)*b}function $a(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,&quot;M&quot;).isAfter(b)&amp;&amp;--c.months,c.milliseconds=+b-+a.clone().add(c.months,&quot;M&quot;),c}function _a(a,b){var c;return b=La(b,a),a.isBefore(b)?c=$a(a,b):(c=$a(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function ab(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(ba(b,&quot;moment().&quot;+b+&quot;(period, number) is deprecated. Please use moment().&quot;+b+&quot;(number, period).&quot;),f=c,c=d,d=f),c=&quot;string&quot;==typeof c?+c:c,e=Ya(c,d),bb(this,e,a),this}}function bb(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&amp;&amp;b._d.setTime(+b._d+f*d),g&amp;&amp;E(b,&quot;Date&quot;,D(b,&quot;Date&quot;)+g*d),h&amp;&amp;X(b,D(b,&quot;Month&quot;)+h*d),e&amp;&amp;a.updateOffset(b,g||h)}function cb(a,b){var c=a||Da(),d=La(c,this).startOf(&quot;day&quot;),e=this.diff(d,&quot;days&quot;,!0),f=-6&gt;e?&quot;sameElse&quot;:-1&gt;e?&quot;lastWeek&quot;:0&gt;e?&quot;lastDay&quot;:1&gt;e?&quot;sameDay&quot;:2&gt;e?&quot;nextDay&quot;:7&gt;e?&quot;nextWeek&quot;:&quot;sameElse&quot;;return this.format(b&amp;&amp;b[f]||this.localeData().calendar(f,this,Da(c)))}function db(){return new n(this)}function eb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this&gt;+a):(c=o(a)?+a:+Da(a),c&lt;+this.clone().startOf(b))}function fb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+a&gt;+this):(c=o(a)?+a:+Da(a),+this.clone().endOf(b)&lt;c)}function gb(a,b,c){return this.isAfter(a,c)&amp;&amp;this.isBefore(b,c)}function hb(a,b){var c;return b=A(b||&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this===+a):(c=+Da(a),+this.clone().startOf(b)&lt;=c&amp;&amp;c&lt;=+this.clone().endOf(b))}function ib(a,b,c){var d,e,f=La(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=A(b),&quot;year&quot;===b||&quot;month&quot;===b||&quot;quarter&quot;===b?(e=jb(this,f),&quot;quarter&quot;===b?e/=3:&quot;year&quot;===b&amp;&amp;(e/=12)):(d=this-f,e=&quot;second&quot;===b?d/1e3:&quot;minute&quot;===b?d/6e4:&quot;hour&quot;===b?d/36e5:&quot;day&quot;===b?(d-g)/864e5:&quot;week&quot;===b?(d-g)/6048e5:d),c?e:p(e)}function jb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,&quot;months&quot;);return 0&gt;b-f?(c=a.clone().add(e-1,&quot;months&quot;),d=(b-f)/(f-c)):(c=a.clone().add(e+1,&quot;months&quot;),d=(b-f)/(c-f)),-(e+d)}function kb(){return this.clone().locale(&quot;en&quot;).format(&quot;ddd MMM DD YYYY HH:mm:ss [GMT]ZZ&quot;)}function lb(){var a=this.clone().utc();return 0&lt;a.year()&amp;&amp;a.year()&lt;=9999?&quot;function&quot;==typeof Date.prototype.toISOString?this.toDate().toISOString():K(a,&quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;):K(a,&quot;YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;)}function mb(b){var c=K(this,b||a.defaultFormat);return this.localeData().postformat(c)}function nb(a,b){return this.isValid()?Ya({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.from(Da(),a)}function pb(a,b){return this.isValid()?Ya({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function qb(a){return this.to(Da(),a)}function rb(a){var b;return void 0===a?this._locale._abbr:(b=y(a),null!=b&amp;&amp;(this._locale=b),this)}function sb(){return this._locale}function tb(a){switch(a=A(a)){case&quot;year&quot;:this.month(0);case&quot;quarter&quot;:case&quot;month&quot;:this.date(1);case&quot;week&quot;:case&quot;isoWeek&quot;:case&quot;day&quot;:this.hours(0);case&quot;hour&quot;:this.minutes(0);case&quot;minute&quot;:this.seconds(0);case&quot;second&quot;:this.milliseconds(0)}return&quot;week&quot;===a&amp;&amp;this.weekday(0),&quot;isoWeek&quot;===a&amp;&amp;this.isoWeekday(1),&quot;quarter&quot;===a&amp;&amp;this.month(3*Math.floor(this.month()/3)),this}function ub(a){return a=A(a),void 0===a||&quot;millisecond&quot;===a?this:this.startOf(a).add(1,&quot;isoWeek&quot;===a?&quot;week&quot;:a).subtract(1,&quot;ms&quot;)}function vb(){return+this._d-6e4*(this._offset||0)}function wb(){return Math.floor(+this/1e3)}function xb(){return this._offset?new Date(+this):this._d}function yb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function zb(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Ab(){return k(this)}function Bb(){return g({},j(this))}function Cb(){return j(this).overflow}function Db(a,b){H(0,[a,a.length],0,b)}function Eb(a,b,c){return ja(Da([a,11,31+b-c]),b,c).week}function Fb(a){var b=ja(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Gb(a){var b=ja(this,1,4).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Hb(){return Eb(this.year(),1,4)}function Ib(){var a=this.localeData()._week;return Eb(this.year(),a.dow,a.doy)}function Jb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Kb(a,b){return&quot;string&quot;!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),&quot;number&quot;==typeof a?a:null):parseInt(a,10)}function Lb(a){return this._weekdays[a.day()]}function Mb(a){return this._weekdaysShort[a.day()]}function Nb(a){return this._weekdaysMin[a.day()]}function Ob(a){var b,c,d;for(this._weekdaysParse=this._weekdaysParse||[],b=0;7&gt;b;b++)if(this._weekdaysParse[b]||(c=Da([2e3,1]).day(b),d=&quot;^&quot;+this.weekdays(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysShort(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysMin(c,&quot;&quot;),this._weekdaysParse[b]=new RegExp(d.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),this._weekdaysParse[b].test(a))return b}function Pb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Kb(a,this.localeData()),this.add(a-b,&quot;d&quot;)):b}function Qb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,&quot;d&quot;)}function Rb(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Sb(a,b){H(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Tb(a,b){return b._meridiemParse}function Ub(a){return&quot;p&quot;===(a+&quot;&quot;).toLowerCase().charAt(0)}function Vb(a,b,c){return a&gt;11?c?&quot;pm&quot;:&quot;PM&quot;:c?&quot;am&quot;:&quot;AM&quot;}function Wb(a,b){b[ld]=q(1e3*(&quot;0.&quot;+a))}function Xb(){return this._isUTC?&quot;UTC&quot;:&quot;&quot;}function Yb(){return this._isUTC?&quot;Coordinated Universal Time&quot;:&quot;&quot;}function Zb(a){return Da(1e3*a)}function $b(){return Da.apply(null,arguments).parseZone()}function _b(a,b,c){var d=this._calendar[a];return&quot;function&quot;==typeof d?d.call(b,c):d}function ac(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function bc(){return this._invalidDate}function cc(a){return this._ordinal.replace(&quot;%d&quot;,a)}function dc(a){return a}function ec(a,b,c,d){var e=this._relativeTime[c];return&quot;function&quot;==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function fc(a,b){var c=this._relativeTime[a&gt;0?&quot;future&quot;:&quot;past&quot;];return&quot;function&quot;==typeof c?c(b):c.replace(/%s/i,b)}function gc(a){var b,c;for(c in a)b=a[c],&quot;function&quot;==typeof b?this[c]=b:this[&quot;_&quot;+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+&quot;|&quot;+/\d{1,2}/.source)}function hc(a,b,c,d){var e=y(),f=h().set(d,b);return e[c](f,a)}function ic(a,b,c,d,e){if(&quot;number&quot;==typeof a&amp;&amp;(b=a,a=void 0),a=a||&quot;&quot;,null!=b)return hc(a,b,c,e);var f,g=[];for(f=0;d&gt;f;f++)g[f]=hc(a,f,c,e);return g}function jc(a,b){return ic(a,b,&quot;months&quot;,12,&quot;month&quot;)}function kc(a,b){return ic(a,b,&quot;monthsShort&quot;,12,&quot;month&quot;)}function lc(a,b){return ic(a,b,&quot;weekdays&quot;,7,&quot;day&quot;)}function mc(a,b){return ic(a,b,&quot;weekdaysShort&quot;,7,&quot;day&quot;)}function nc(a,b){return ic(a,b,&quot;weekdaysMin&quot;,7,&quot;day&quot;)}function oc(){var a=this._data;return this._milliseconds=Wd(this._milliseconds),this._days=Wd(this._days),this._months=Wd(this._months),a.milliseconds=Wd(a.milliseconds),a.seconds=Wd(a.seconds),a.minutes=Wd(a.minutes),a.hours=Wd(a.hours),a.months=Wd(a.months),a.years=Wd(a.years),this}function pc(a,b,c,d){var e=Ya(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function qc(a,b){return pc(this,a,b,1)}function rc(a,b){return pc(this,a,b,-1)}function sc(a){return 0&gt;a?Math.floor(a):Math.ceil(a)}function tc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f&gt;=0&amp;&amp;g&gt;=0&amp;&amp;h&gt;=0||0&gt;=f&amp;&amp;0&gt;=g&amp;&amp;0&gt;=h||(f+=864e5*sc(vc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=p(f/1e3),i.seconds=a%60,b=p(a/60),i.minutes=b%60,c=p(b/60),i.hours=c%24,g+=p(c/24),e=p(uc(g)),h+=e,g-=sc(vc(e)),d=p(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function uc(a){return 4800*a/146097}function vc(a){return 146097*a/4800}function wc(a){var b,c,d=this._milliseconds;if(a=A(a),&quot;month&quot;===a||&quot;year&quot;===a)return b=this._days+d/864e5,c=this._months+uc(b),&quot;month&quot;===a?c:c/12;switch(b=this._days+Math.round(vc(this._months)),a){case&quot;week&quot;:return b/7+d/6048e5;case&quot;day&quot;:return b+d/864e5;case&quot;hour&quot;:return 24*b+d/36e5;case&quot;minute&quot;:return 1440*b+d/6e4;case&quot;second&quot;:return 86400*b+d/1e3;case&quot;millisecond&quot;:return Math.floor(864e5*b)+d;default:throw new Error(&quot;Unknown unit &quot;+a)}}function xc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*q(this._months/12)}function yc(a){return function(){return this.as(a)}}function zc(a){return a=A(a),this[a+&quot;s&quot;]()}function Ac(a){return function(){return this._data[a]}}function Bc(){return p(this.days()/7)}function Cc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Dc(a,b,c){var d=Ya(a).abs(),e=ke(d.as(&quot;s&quot;)),f=ke(d.as(&quot;m&quot;)),g=ke(d.as(&quot;h&quot;)),h=ke(d.as(&quot;d&quot;)),i=ke(d.as(&quot;M&quot;)),j=ke(d.as(&quot;y&quot;)),k=e&lt;le.s&amp;&amp;[&quot;s&quot;,e]||1===f&amp;&amp;[&quot;m&quot;]||f&lt;le.m&amp;&amp;[&quot;mm&quot;,f]||1===g&amp;&amp;[&quot;h&quot;]||g&lt;le.h&amp;&amp;[&quot;hh&quot;,g]||1===h&amp;&amp;[&quot;d&quot;]||h&lt;le.d&amp;&amp;[&quot;dd&quot;,h]||1===i&amp;&amp;[&quot;M&quot;]||i&lt;le.M&amp;&amp;[&quot;MM&quot;,i]||1===j&amp;&amp;[&quot;y&quot;]||[&quot;yy&quot;,j];return k[2]=b,k[3]=+a&gt;0,k[4]=c,Cc.apply(null,k)}function Ec(a,b){return void 0===le[a]?!1:void 0===b?le[a]:(le[a]=b,!0)}function Fc(a){var b=this.localeData(),c=Dc(this,!a,b);return a&amp;&amp;(c=b.pastFuture(+this,c)),b.postformat(c)}function Gc(){var a,b,c,d=me(this._milliseconds)/1e3,e=me(this._days),f=me(this._months);a=p(d/60),b=p(a/60),d%=60,a%=60,c=p(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0&gt;m?&quot;-&quot;:&quot;&quot;)+&quot;P&quot;+(g?g+&quot;Y&quot;:&quot;&quot;)+(h?h+&quot;M&quot;:&quot;&quot;)+(i?i+&quot;D&quot;:&quot;&quot;)+(j||k||l?&quot;T&quot;:&quot;&quot;)+(j?j+&quot;H&quot;:&quot;&quot;)+(k?k+&quot;M&quot;:&quot;&quot;)+(l?l+&quot;S&quot;:&quot;&quot;):&quot;P0D&quot;}var Hc,Ic,Jc=a.momentProperties=[],Kc=!1,Lc={},Mc={},Nc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Pc={},Qc={},Rc=/\d/,Sc=/\d\d/,Tc=/\d{3}/,Uc=/\d{4}/,Vc=/[+-]?\d{6}/,Wc=/\d\d?/,Xc=/\d{1,3}/,Yc=/\d{1,4}/,Zc=/[+-]?\d{1,6}/,$c=/\d+/,_c=/[+-]?\d+/,ad=/Z|[+-]\d\d:?\d\d/gi,bd=/[+-]?\d+(\.\d{1,3})?/,cd=/[0-9]*[&apos;a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,dd={},ed={},fd=0,gd=1,hd=2,id=3,jd=4,kd=5,ld=6;H(&quot;M&quot;,[&quot;MM&quot;,2],&quot;Mo&quot;,function(){return this.month()+1}),H(&quot;MMM&quot;,0,0,function(a){return this.localeData().monthsShort(this,a)}),H(&quot;MMMM&quot;,0,0,function(a){return this.localeData().months(this,a)}),z(&quot;month&quot;,&quot;M&quot;),N(&quot;M&quot;,Wc),N(&quot;MM&quot;,Wc,Sc),N(&quot;MMM&quot;,cd),N(&quot;MMMM&quot;,cd),Q([&quot;M&quot;,&quot;MM&quot;],function(a,b){b[gd]=q(a)-1}),Q([&quot;MMM&quot;,&quot;MMMM&quot;],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[gd]=e:j(c).invalidMonth=a});var md=&quot;January_February_March_April_May_June_July_August_September_October_November_December&quot;.split(&quot;_&quot;),nd=&quot;Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec&quot;.split(&quot;_&quot;),od={};a.suppressDeprecationWarnings=!1;var pd=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,qd=[[&quot;YYYYYY-MM-DD&quot;,/[+-]\d{6}-\d{2}-\d{2}/],[&quot;YYYY-MM-DD&quot;,/\d{4}-\d{2}-\d{2}/],[&quot;GGGG-[W]WW-E&quot;,/\d{4}-W\d{2}-\d/],[&quot;GGGG-[W]WW&quot;,/\d{4}-W\d{2}/],[&quot;YYYY-DDD&quot;,/\d{4}-\d{3}/]],rd=[[&quot;HH:mm:ss.SSSS&quot;,/(T| )\d\d:\d\d:\d\d\.\d+/],[&quot;HH:mm:ss&quot;,/(T| )\d\d:\d\d:\d\d/],[&quot;HH:mm&quot;,/(T| )\d\d:\d\d/],[&quot;HH&quot;,/(T| )\d\d/]],sd=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=aa(&quot;moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.&quot;,function(a){a._d=new Date(a._i+(a._useUTC?&quot; UTC&quot;:&quot;&quot;))}),H(0,[&quot;YY&quot;,2],0,function(){return this.year()%100}),H(0,[&quot;YYYY&quot;,4],0,&quot;year&quot;),H(0,[&quot;YYYYY&quot;,5],0,&quot;year&quot;),H(0,[&quot;YYYYYY&quot;,6,!0],0,&quot;year&quot;),z(&quot;year&quot;,&quot;y&quot;),N(&quot;Y&quot;,_c),N(&quot;YY&quot;,Wc,Sc),N(&quot;YYYY&quot;,Yc,Uc),N(&quot;YYYYY&quot;,Zc,Vc),N(&quot;YYYYYY&quot;,Zc,Vc),Q([&quot;YYYYY&quot;,&quot;YYYYYY&quot;],fd),Q(&quot;YYYY&quot;,function(b,c){c[fd]=2===b.length?a.parseTwoDigitYear(b):q(b)}),Q(&quot;YY&quot;,function(b,c){c[fd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return q(a)+(q(a)&gt;68?1900:2e3)};var td=C(&quot;FullYear&quot;,!1);H(&quot;w&quot;,[&quot;ww&quot;,2],&quot;wo&quot;,&quot;week&quot;),H(&quot;W&quot;,[&quot;WW&quot;,2],&quot;Wo&quot;,&quot;isoWeek&quot;),z(&quot;week&quot;,&quot;w&quot;),z(&quot;isoWeek&quot;,&quot;W&quot;),N(&quot;w&quot;,Wc),N(&quot;ww&quot;,Wc,Sc),N(&quot;W&quot;,Wc),N(&quot;WW&quot;,Wc,Sc),R([&quot;w&quot;,&quot;ww&quot;,&quot;W&quot;,&quot;WW&quot;],function(a,b,c,d){b[d.substr(0,1)]=q(a)});var ud={dow:0,doy:6};H(&quot;DDD&quot;,[&quot;DDDD&quot;,3],&quot;DDDo&quot;,&quot;dayOfYear&quot;),z(&quot;dayOfYear&quot;,&quot;DDD&quot;),N(&quot;DDD&quot;,Xc),N(&quot;DDDD&quot;,Tc),Q([&quot;DDD&quot;,&quot;DDDD&quot;],function(a,b,c){c._dayOfYear=q(a)}),a.ISO_8601=function(){};var vd=aa(&quot;moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return this&gt;a?this:a}),wd=aa(&quot;moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return a&gt;this?this:a});Ja(&quot;Z&quot;,&quot;:&quot;),Ja(&quot;ZZ&quot;,&quot;&quot;),N(&quot;Z&quot;,ad),N(&quot;ZZ&quot;,ad),Q([&quot;Z&quot;,&quot;ZZ&quot;],function(a,b,c){c._useUTC=!0,c._tzm=Ka(a)});var xd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var yd=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,zd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Ya.fn=Ha.prototype;var Ad=ab(1,&quot;add&quot;),Bd=ab(-1,&quot;subtract&quot;);a.defaultFormat=&quot;YYYY-MM-DDTHH:mm:ssZ&quot;;var Cd=aa(&quot;moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.&quot;,function(a){return void 0===a?this.localeData():this.locale(a)});H(0,[&quot;gg&quot;,2],0,function(){return this.weekYear()%100}),H(0,[&quot;GG&quot;,2],0,function(){return this.isoWeekYear()%100}),Db(&quot;gggg&quot;,&quot;weekYear&quot;),Db(&quot;ggggg&quot;,&quot;weekYear&quot;),Db(&quot;GGGG&quot;,&quot;isoWeekYear&quot;),Db(&quot;GGGGG&quot;,&quot;isoWeekYear&quot;),z(&quot;weekYear&quot;,&quot;gg&quot;),z(&quot;isoWeekYear&quot;,&quot;GG&quot;),N(&quot;G&quot;,_c),N(&quot;g&quot;,_c),N(&quot;GG&quot;,Wc,Sc),N(&quot;gg&quot;,Wc,Sc),N(&quot;GGGG&quot;,Yc,Uc),N(&quot;gggg&quot;,Yc,Uc),N(&quot;GGGGG&quot;,Zc,Vc),N(&quot;ggggg&quot;,Zc,Vc),R([&quot;gggg&quot;,&quot;ggggg&quot;,&quot;GGGG&quot;,&quot;GGGGG&quot;],function(a,b,c,d){b[d.substr(0,2)]=q(a)}),R([&quot;gg&quot;,&quot;GG&quot;],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),H(&quot;Q&quot;,0,0,&quot;quarter&quot;),z(&quot;quarter&quot;,&quot;Q&quot;),N(&quot;Q&quot;,Rc),Q(&quot;Q&quot;,function(a,b){b[gd]=3*(q(a)-1)}),H(&quot;D&quot;,[&quot;DD&quot;,2],&quot;Do&quot;,&quot;date&quot;),z(&quot;date&quot;,&quot;D&quot;),N(&quot;D&quot;,Wc),N(&quot;DD&quot;,Wc,Sc),N(&quot;Do&quot;,function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),Q([&quot;D&quot;,&quot;DD&quot;],hd),Q(&quot;Do&quot;,function(a,b){b[hd]=q(a.match(Wc)[0],10)});var Dd=C(&quot;Date&quot;,!0);H(&quot;d&quot;,0,&quot;do&quot;,&quot;day&quot;),H(&quot;dd&quot;,0,0,function(a){return this.localeData().weekdaysMin(this,a)}),H(&quot;ddd&quot;,0,0,function(a){return this.localeData().weekdaysShort(this,a)}),H(&quot;dddd&quot;,0,0,function(a){return this.localeData().weekdays(this,a)}),H(&quot;e&quot;,0,0,&quot;weekday&quot;),H(&quot;E&quot;,0,0,&quot;isoWeekday&quot;),z(&quot;day&quot;,&quot;d&quot;),z(&quot;weekday&quot;,&quot;e&quot;),z(&quot;isoWeekday&quot;,&quot;E&quot;),N(&quot;d&quot;,Wc),N(&quot;e&quot;,Wc),N(&quot;E&quot;,Wc),N(&quot;dd&quot;,cd),N(&quot;ddd&quot;,cd),N(&quot;dddd&quot;,cd),R([&quot;dd&quot;,&quot;ddd&quot;,&quot;dddd&quot;],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),R([&quot;d&quot;,&quot;e&quot;,&quot;E&quot;],function(a,b,c,d){b[d]=q(a)});var Ed=&quot;Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday&quot;.split(&quot;_&quot;),Fd=&quot;Sun_Mon_Tue_Wed_Thu_Fri_Sat&quot;.split(&quot;_&quot;),Gd=&quot;Su_Mo_Tu_We_Th_Fr_Sa&quot;.split(&quot;_&quot;);H(&quot;H&quot;,[&quot;HH&quot;,2],0,&quot;hour&quot;),H(&quot;h&quot;,[&quot;hh&quot;,2],0,function(){return this.hours()%12||12}),Sb(&quot;a&quot;,!0),Sb(&quot;A&quot;,!1),z(&quot;hour&quot;,&quot;h&quot;),N(&quot;a&quot;,Tb),N(&quot;A&quot;,Tb),N(&quot;H&quot;,Wc),N(&quot;h&quot;,Wc),N(&quot;HH&quot;,Wc,Sc),N(&quot;hh&quot;,Wc,Sc),Q([&quot;H&quot;,&quot;HH&quot;],id),Q([&quot;a&quot;,&quot;A&quot;],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),Q([&quot;h&quot;,&quot;hh&quot;],function(a,b,c){b[id]=q(a),j(c).bigHour=!0});var Hd=/[ap]\.?m?\.?/i,Id=C(&quot;Hours&quot;,!0);H(&quot;m&quot;,[&quot;mm&quot;,2],0,&quot;minute&quot;),z(&quot;minute&quot;,&quot;m&quot;),N(&quot;m&quot;,Wc),N(&quot;mm&quot;,Wc,Sc),Q([&quot;m&quot;,&quot;mm&quot;],jd);var Jd=C(&quot;Minutes&quot;,!1);H(&quot;s&quot;,[&quot;ss&quot;,2],0,&quot;second&quot;),z(&quot;second&quot;,&quot;s&quot;),N(&quot;s&quot;,Wc),N(&quot;ss&quot;,Wc,Sc),Q([&quot;s&quot;,&quot;ss&quot;],kd);var Kd=C(&quot;Seconds&quot;,!1);H(&quot;S&quot;,0,0,function(){return~~(this.millisecond()/100)}),H(0,[&quot;SS&quot;,2],0,function(){return~~(this.millisecond()/10)}),H(0,[&quot;SSS&quot;,3],0,&quot;millisecond&quot;),H(0,[&quot;SSSS&quot;,4],0,function(){return 10*this.millisecond()}),H(0,[&quot;SSSSS&quot;,5],0,function(){return 100*this.millisecond()}),H(0,[&quot;SSSSSS&quot;,6],0,function(){return 1e3*this.millisecond()}),H(0,[&quot;SSSSSSS&quot;,7],0,function(){return 1e4*this.millisecond()}),H(0,[&quot;SSSSSSSS&quot;,8],0,function(){return 1e5*this.millisecond()}),H(0,[&quot;SSSSSSSSS&quot;,9],0,function(){return 1e6*this.millisecond()}),z(&quot;millisecond&quot;,&quot;ms&quot;),N(&quot;S&quot;,Xc,Rc),N(&quot;SS&quot;,Xc,Sc),N(&quot;SSS&quot;,Xc,Tc);var Ld;for(Ld=&quot;SSSS&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)N(Ld,$c);for(Ld=&quot;S&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)Q(Ld,Wb);var Md=C(&quot;Milliseconds&quot;,!1);H(&quot;z&quot;,0,0,&quot;zoneAbbr&quot;),H(&quot;zz&quot;,0,0,&quot;zoneName&quot;);var Nd=n.prototype;Nd.add=Ad,Nd.calendar=cb,Nd.clone=db,Nd.diff=ib,Nd.endOf=ub,Nd.format=mb,Nd.from=nb,Nd.fromNow=ob,Nd.to=pb,Nd.toNow=qb,Nd.get=F,Nd.invalidAt=Cb,Nd.isAfter=eb,Nd.isBefore=fb,Nd.isBetween=gb,Nd.isSame=hb,Nd.isValid=Ab,Nd.lang=Cd,Nd.locale=rb,Nd.localeData=sb,Nd.max=wd,Nd.min=vd,Nd.parsingFlags=Bb,Nd.set=F,Nd.startOf=tb,Nd.subtract=Bd,Nd.toArray=yb,Nd.toObject=zb,Nd.toDate=xb,Nd.toISOString=lb,Nd.toJSON=lb,Nd.toString=kb,Nd.unix=wb,Nd.valueOf=vb,Nd.year=td,Nd.isLeapYear=ia,Nd.weekYear=Fb,Nd.isoWeekYear=Gb,Nd.quarter=Nd.quarters=Jb,Nd.month=Y,Nd.daysInMonth=Z,Nd.week=Nd.weeks=na,Nd.isoWeek=Nd.isoWeeks=oa,Nd.weeksInYear=Ib,Nd.isoWeeksInYear=Hb,Nd.date=Dd,Nd.day=Nd.days=Pb,Nd.weekday=Qb,Nd.isoWeekday=Rb,Nd.dayOfYear=qa,Nd.hour=Nd.hours=Id,Nd.minute=Nd.minutes=Jd,Nd.second=Nd.seconds=Kd,
Nd.millisecond=Nd.milliseconds=Md,Nd.utcOffset=Na,Nd.utc=Pa,Nd.local=Qa,Nd.parseZone=Ra,Nd.hasAlignedHourOffset=Sa,Nd.isDST=Ta,Nd.isDSTShifted=Ua,Nd.isLocal=Va,Nd.isUtcOffset=Wa,Nd.isUtc=Xa,Nd.isUTC=Xa,Nd.zoneAbbr=Xb,Nd.zoneName=Yb,Nd.dates=aa(&quot;dates accessor is deprecated. Use date instead.&quot;,Dd),Nd.months=aa(&quot;months accessor is deprecated. Use month instead&quot;,Y),Nd.years=aa(&quot;years accessor is deprecated. Use year instead&quot;,td),Nd.zone=aa(&quot;moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779&quot;,Oa);var Od=Nd,Pd={sameDay:&quot;[Today at] LT&quot;,nextDay:&quot;[Tomorrow at] LT&quot;,nextWeek:&quot;dddd [at] LT&quot;,lastDay:&quot;[Yesterday at] LT&quot;,lastWeek:&quot;[Last] dddd [at] LT&quot;,sameElse:&quot;L&quot;},Qd={LTS:&quot;h:mm:ss A&quot;,LT:&quot;h:mm A&quot;,L:&quot;MM/DD/YYYY&quot;,LL:&quot;MMMM D, YYYY&quot;,LLL:&quot;MMMM D, YYYY h:mm A&quot;,LLLL:&quot;dddd, MMMM D, YYYY h:mm A&quot;},Rd=&quot;Invalid date&quot;,Sd=&quot;%d&quot;,Td=/\d{1,2}/,Ud={future:&quot;in %s&quot;,past:&quot;%s ago&quot;,s:&quot;a few seconds&quot;,m:&quot;a minute&quot;,mm:&quot;%d minutes&quot;,h:&quot;an hour&quot;,hh:&quot;%d hours&quot;,d:&quot;a day&quot;,dd:&quot;%d days&quot;,M:&quot;a month&quot;,MM:&quot;%d months&quot;,y:&quot;a year&quot;,yy:&quot;%d years&quot;},Vd=s.prototype;Vd._calendar=Pd,Vd.calendar=_b,Vd._longDateFormat=Qd,Vd.longDateFormat=ac,Vd._invalidDate=Rd,Vd.invalidDate=bc,Vd._ordinal=Sd,Vd.ordinal=cc,Vd._ordinalParse=Td,Vd.preparse=dc,Vd.postformat=dc,Vd._relativeTime=Ud,Vd.relativeTime=ec,Vd.pastFuture=fc,Vd.set=gc,Vd.months=U,Vd._months=md,Vd.monthsShort=V,Vd._monthsShort=nd,Vd.monthsParse=W,Vd.week=ka,Vd._week=ud,Vd.firstDayOfYear=ma,Vd.firstDayOfWeek=la,Vd.weekdays=Lb,Vd._weekdays=Ed,Vd.weekdaysMin=Nb,Vd._weekdaysMin=Gd,Vd.weekdaysShort=Mb,Vd._weekdaysShort=Fd,Vd.weekdaysParse=Ob,Vd.isPM=Ub,Vd._meridiemParse=Hd,Vd.meridiem=Vb,w(&quot;en&quot;,{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===q(a%100/10)?&quot;th&quot;:1===b?&quot;st&quot;:2===b?&quot;nd&quot;:3===b?&quot;rd&quot;:&quot;th&quot;;return a+c}}),a.lang=aa(&quot;moment.lang is deprecated. Use moment.locale instead.&quot;,w),a.langData=aa(&quot;moment.langData is deprecated. Use moment.localeData instead.&quot;,y);var Wd=Math.abs,Xd=yc(&quot;ms&quot;),Yd=yc(&quot;s&quot;),Zd=yc(&quot;m&quot;),$d=yc(&quot;h&quot;),_d=yc(&quot;d&quot;),ae=yc(&quot;w&quot;),be=yc(&quot;M&quot;),ce=yc(&quot;y&quot;),de=Ac(&quot;milliseconds&quot;),ee=Ac(&quot;seconds&quot;),fe=Ac(&quot;minutes&quot;),ge=Ac(&quot;hours&quot;),he=Ac(&quot;days&quot;),ie=Ac(&quot;months&quot;),je=Ac(&quot;years&quot;),ke=Math.round,le={s:45,m:45,h:22,d:26,M:11},me=Math.abs,ne=Ha.prototype;ne.abs=oc,ne.add=qc,ne.subtract=rc,ne.as=wc,ne.asMilliseconds=Xd,ne.asSeconds=Yd,ne.asMinutes=Zd,ne.asHours=$d,ne.asDays=_d,ne.asWeeks=ae,ne.asMonths=be,ne.asYears=ce,ne.valueOf=xc,ne._bubble=tc,ne.get=zc,ne.milliseconds=de,ne.seconds=ee,ne.minutes=fe,ne.hours=ge,ne.days=he,ne.weeks=Bc,ne.months=ie,ne.years=je,ne.humanize=Fc,ne.toISOString=Gc,ne.toString=Gc,ne.toJSON=Gc,ne.locale=rb,ne.localeData=sb,ne.toIsoString=aa(&quot;toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)&quot;,Gc),ne.lang=Cd,H(&quot;X&quot;,0,0,&quot;unix&quot;),H(&quot;x&quot;,0,0,&quot;valueOf&quot;),N(&quot;x&quot;,_c),N(&quot;X&quot;,bd),Q(&quot;X&quot;,function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),Q(&quot;x&quot;,function(a,b,c){c._d=new Date(q(a))}),a.version=&quot;2.10.6&quot;,b(Da),a.fn=Od,a.min=Fa,a.max=Ga,a.utc=h,a.unix=Zb,a.months=jc,a.isDate=d,a.locale=w,a.invalid=l,a.duration=Ya,a.isMoment=o,a.weekdays=lc,a.parseZone=$b,a.localeData=y,a.isDuration=Ia,a.monthsShort=kc,a.weekdaysMin=nc,a.defineLocale=x,a.weekdaysShort=mc,a.normalizeUnits=A,a.relativeTimeThreshold=Ec;var oe=a;return oe});</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2c64669f-f07e-4365-bf64-c559ace83004</id>
                <name>stopOnErrorCount</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122375</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to Stop a channel if it reaches a particular error count. 
	Also sends an alert message via another channel (this sends a sms via our monitoring system).

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function stopOnErrorCount(cid, errorCount) {
	var channelStatisticsController = Packages.com.mirth.connect.server.controllers.ChannelStatisticsController.getInstance();
	var channelStatusController = Packages.com.mirth.connect.server.controllers.ChannelStatusController.getInstance();
	var stats = channelStatisticsController.getStatistics(cid);
	// var numOfQueued = stats.queued;
	var numOfErrors = stats.error;

	if(numOfErrors &gt; errorCount )
	{
		//Stop Me
		channelStatusController.stopChannel(cid);
		//Alert msg sent to _SVHALERT channel
		var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
		var channelName = channelController.getDeployedChannelById(cid).getName();
		var alertmsg = &apos;mirth01 mirth_channel_status codeTemplate_stopOnErrorCount 0 &apos; +
					   &apos;channel &apos; + channelName + &apos; stopped&apos;;
		router.routeMessage(&apos;_SVHALERT&apos;, alertmsg);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>08044817-3504-4fc1-80ee-404870195151</id>
                <name>test</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122745</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.
	searchword
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function testfunc(arg1) {
	return arg1;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
            <name>WebPT-Mirth</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121602</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
                <name>Fix HL7v2 Node Order</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121804</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>35f4c250-08b4-4e42-8e60-f85aa98dfe50</id>
            <name>WebPT-Translations</name>
            <revision>3</revision>
            <lastModified>
              <time>1690140133521</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>be8f057b-2640-4613-b2e7-83326c59169c</id>
                <name>AddZeros</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122826</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function addZeroes(num) {
   return num.toLocaleString(&quot;en&quot;, {useGrouping: false, minimumFractionDigits: 2})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>51913864-7702-489a-b7c6-54992c12b19d</id>
                <name>FindLookupValueWithDefault</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122218</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithDefault ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        //obj.LeftValue = LeftValue;
        //obj.RightValue1 = DefaultValue1;
        //obj.RightValue2   = DefaultValue2; 
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);
            var result = pattern.test(LeftValue );

            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c276be9f-c8f1-4dea-8df0-e000c6745271</id>
                <name>FindLookupValueWithInsuranceId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122080</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithInsuranceId ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);             
            var result = pattern.test(LeftValue );
	
            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7d746da2-58c6-44eb-ad5c-c5bfd0a0c537</id>
                <name>UseExternalProblemID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122349</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalProblemID() {

if ([&apos;2804&apos;, &apos;2822&apos;].indexOf($(&apos;tenantId&apos;) + &apos;&apos;) &gt; -1) {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitexternalproblemid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitaccountnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>07730e85-7f30-4ddf-90a4-78183c896ab5</id>
                <name>UseExternalVisitID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122192</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalVisitID() {
	
if ($(&apos;tenantId&apos;)  == &apos;9999&apos; ) {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitexternalvisitid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitvisitnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
        <channelTags>
          <channelTag>
            <id>e2256351-a12c-4e51-b138-af4985cb4c3e</id>
            <name>AristaMd</name>
            <channelIds>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>28cdc2db-4028-4249-b1b8-c2ba3961a137</id>
            <name>HL7</name>
            <channelIds>
              <string>6a2a6c33-33da-4783-b823-bd95bf387981</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>5beae4c2-e7f8-4ae3-9fca-703dea9233a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>1ae4e7ac-e62f-468c-aa2a-99cbd6139838</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>0638775c-6c87-4a71-b4b3-7ae52be05c1b</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
            </channelIds>
            <backgroundColor>
              <red>128</red>
              <green>128</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>d3656e65-487a-4643-a59d-ac335ef7dc9c</id>
            <name>HTTP</name>
            <channelIds>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>44a77229-9cad-4709-8b43-0b6ea153a792</id>
            <name>OUT</name>
            <channelIds>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>255</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>7822e1f8-3e89-4e46-8317-a1119bab773f</id>
            <name>SanMateo</name>
            <channelIds>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
            </channelIds>
            <backgroundColor>
              <red>128</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>14df0e38-e919-4ac0-a698-01dcd8f4a49e</id>
            <name>SIU</name>
            <channelIds>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
        </channelTags>
      </exportData>
    </channel>
    <channel version="3.12.0">
      <id>a757905f-315a-43be-a624-38780a3d7574</id>
      <nextMetaDataId>15</nextMetaDataId>
      <name>SANMATEO_ORU_OUT_JSON</name>
      <description>2020-12-07 jer - Created to receive San Mateo Observation Results transactions converted from HL7 to JSON and sent/delivered to AristaMd RESTful HTTP receiver.</description>
      <revision>1</revision>
      <sourceConnector version="3.12.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.12.0">
          <pluginProperties/>
          <sourceConnectorProperties version="3.12.0">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.12.0">
              <name>channelId</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <variable>channelId</variable>
              <mapping></mapping>
              <defaultValue>connectorMessage.getChannelId()</defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Parse HL7v2 Message - ChannelMap</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>/* 
Name: 	Parse HL7v2 Message - ChannelMap
Desc: 	Parse HL7v2 Message - ChannelMap
Created:	2020-12-01 
Modified:
2020-11-23 JER - Modified to match the provided HL7 msg file
*/
var scriptName= &quot;Parse HL7v2 Message - ChannelMap&quot;;
var debug= 1;

if (debug&gt;0) { channelMap.put(scriptName+&quot;_DEBUG_msg&quot;,msg); }
channelMap.put(&quot;MessageType&quot;,msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString());
channelMap.put(&quot;EventType&quot;, msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString()+&quot;^&quot;+msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString());
channelMap.put(&quot;VisitNumber&quot;, msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>HL7V2</inboundDataType>
          <outboundDataType>HL7V2</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
              <handleRepetitions>true</handleRepetitions>
              <handleSubcomponents>true</handleSubcomponents>
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <stripNamespaces>true</stripNamespaces>
              <segmentDelimiter>\r</segmentDelimiter>
              <convertLineBreaks>true</convertLineBreaks>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <segmentDelimiter>\r</segmentDelimiter>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
              <splitType>MSH_Segment</splitType>
              <batchScript></batchScript>
            </batchProperties>
            <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
              <segmentDelimiter>\r</segmentDelimiter>
              <successfulACKCode>AA</successfulACKCode>
              <successfulACKMessage></successfulACKMessage>
              <errorACKCode>AE</errorACKCode>
              <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
              <rejectedACKCode>AR</rejectedACKCode>
              <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
              <msh15ACKAccept>false</msh15ACKAccept>
              <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
            </responseGenerationProperties>
            <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
              <successfulACKCode>AA,CA</successfulACKCode>
              <errorACKCode>AE,CE</errorACKCode>
              <rejectedACKCode>AR,CR</rejectedACKCode>
              <validateMessageControlId>true</validateMessageControlId>
              <originalMessageControlId>Destination_Encoded</originalMessageControlId>
              <originalIdMapVariable></originalIdMapVariable>
            </responseValidationProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
              <handleRepetitions>true</handleRepetitions>
              <handleSubcomponents>true</handleSubcomponents>
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <stripNamespaces>true</stripNamespaces>
              <segmentDelimiter>\r</segmentDelimiter>
              <convertLineBreaks>true</convertLineBreaks>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <segmentDelimiter>\r</segmentDelimiter>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
              <splitType>MSH_Segment</splitType>
              <batchScript></batchScript>
            </batchProperties>
            <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
              <segmentDelimiter>\r</segmentDelimiter>
              <successfulACKCode>AA</successfulACKCode>
              <successfulACKMessage></successfulACKMessage>
              <errorACKCode>AE</errorACKCode>
              <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
              <rejectedACKCode>AR</rejectedACKCode>
              <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
              <msh15ACKAccept>false</msh15ACKAccept>
              <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
            </responseGenerationProperties>
            <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
              <successfulACKCode>AA,CA</successfulACKCode>
              <errorACKCode>AE,CE</errorACKCode>
              <rejectedACKCode>AR,CR</rejectedACKCode>
              <validateMessageControlId>true</validateMessageControlId>
              <originalMessageControlId>Destination_Encoded</originalMessageControlId>
              <originalIdMapVariable></originalIdMapVariable>
            </responseValidationProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.12.0">
              <name>Accept message if &quot;msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString()&quot; contains &quot;ORU&quot;</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <field>msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString()</field>
              <condition>CONTAINS</condition>
              <values>
                <string>&quot;ORU&quot;</string>
              </values>
            </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
            <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.12.0">
              <name>Accept message if &quot;msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString()&quot; equals R01</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <operator>AND</operator>
              <field>msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString()</field>
              <condition>EQUALS</condition>
              <values>
                <string>&quot;R01&quot;</string>
              </values>
            </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
          </elements>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.12.0">
          <metaDataId>14</metaDataId>
          <name>FileWriter - HL7 Messages - eCW Visit Notes</name>
          <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <scheme>FILE</scheme>
            <host>C:/HL7/JSON/OUT</host>
            <outputPattern>${MessageType}_${EventType}_${PatientID}_${MessageID}.json</outputPattern>
            <anonymous>true</anonymous>
            <username>anonymous</username>
            <password>anonymous</password>
            <timeout>10000</timeout>
            <keepConnectionOpen>false</keepConnectionOpen>
            <maxIdleTime>0</maxIdleTime>
            <secure>true</secure>
            <passive>true</passive>
            <validateConnection>true</validateConnection>
            <outputAppend>false</outputAppend>
            <errorOnExists>false</errorOnExists>
            <temporary>false</temporary>
            <binary>false</binary>
            <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
            <template>${message.encodedData}</template>
          </properties>
          <transformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Convert HL7v2 ORU eCW Visit Note to JSON</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>/* 
Name: 	Convert HL7v2 ORU eCW Visit Note to JSON
Desc: 	Convert HL7v2 ORU eCW Visit Note to JSON - Apply to the SANMATEO_ORU_OUT_JSON Source Transformer
Created:	2020-12-15 jer
Modified:
2020-12-17 jer - Modified to use checkElementIfUndefined code template to check if blank or null value for DateofBirth
2020-12-17 jer - Modified MSH.9.1 to tmp.Meta.DataModel JSON accommodate both Laboratory and eCW Visit Notes
*/
var scriptName= &quot;Convert HL7v2 ORU eCW Visit Note to JSON&quot;;
var debug= 0;
var hl7json= {};
var columnName= &quot;Meta&quot;;

if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG msg: &quot;+msg); }

// Meta - MSH Segment
// 2020-12-17 jer - Modified MSH.9.1 to tmp.Meta.DataModel JSON accommodate both Laboratory and eCW Visit Notes
if(msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString().indexOf(&quot;ORU&quot;)&gt;-1 &amp;&amp; msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString().indexOf(&quot;ECW&quot;)&gt;-1) {
	tmp[&apos;Meta&apos;][&apos;DataModel&apos;]= &quot;Notes&quot;
} else {
	tmp[&apos;Meta&apos;][&apos;DataModel&apos;]= &quot;Results&quot;
}

if(msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].indexOf(&quot;R01&quot;)&gt;-1) {
	tmp[&apos;Meta&apos;][&apos;EventType&apos;]= &quot;New&quot;
} else { 
	tmp[&apos;Meta&apos;][&apos;EventType&apos;]= &quot;New&quot;
}

// Message Date Time
var strMessageDateTime= msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
if(strMessageDateTime.indexOf(&quot;T&quot;)&lt;0) {
	// var strModifiedMessageDateTime = strMessageDateTime.toString().substr(0,19).replace(/[^0-9]/g, &quot;&quot;);
	var strModifiedMessageDateTime= toISODate(strMessageDateTime,&quot;America/Los_Angeles&quot;); 
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strModifiedMessageDateTime: &quot;+strModifiedMessageDateTime); }
} else {
	var strModifiedMessageDateTime= strMessageDateTime;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strModifiedMessageDateTime: &quot;+strModifiedMessageDateTime); }
}
tmp[&apos;Meta&apos;][&apos;EventDateTime&apos;]= strModifiedMessageDateTime;
// Sending Application
tmp[&apos;Meta&apos;][&apos;Source&apos;][&apos;Name&apos;]= &quot;San Mateo eCW Production (p)&quot;;
channelMap.put(&apos;SourceName&apos;,tmp[&apos;Meta&apos;][&apos;Source&apos;][&apos;Name&apos;]);
tmp[&apos;Meta&apos;][&apos;Source&apos;][&apos;ID&apos;]= UUIDGenerator.getUUID().toString();
// Receiving Application
tmp[&apos;Meta&apos;][&apos;Destinations&apos;][&apos;Name&apos;]= &quot;AristaMD Production (p)&quot;;
tmp[&apos;Meta&apos;][&apos;Destinations&apos;][&apos;ID&apos;]= UUIDGenerator.getUUID().toString();

if(checkElementIfUndefined(msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;], debug)!== null) {
	var strFacilityDomain= msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString();
}

var strMessageControlId= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
if((typeof(msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]) == &apos;undefined&apos;) || (msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString().length&lt;1)) {
	tmp[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;]= UUIDGenerator.getUUID().toString();
} else {
	tmp[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;]= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
}
channelMap.put(&quot;MessageID&quot;, tmp[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;]);

var strProcessingId= msg[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;].toString();
if(strProcessingId== &quot;P&quot;) {
	tmp[&apos;Meta&apos;][&apos;Test&apos;]= &apos;false&apos;;
} else {
	tmp[&apos;Meta&apos;][&apos;Test&apos;]= &apos;true&apos;;
}

if(checkElementIfUndefined(msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;], debug)!== null) {
	tmp[&apos;Meta&apos;][&apos;FacilityCode&apos;]= msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString();
}
channelMap.put(&apos;Meta&apos;,JSON.stringify(tmp[&apos;Meta&apos;]));

// Patient - PID Segment
// Create identifiers array object
var identifiers= [];
// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
var patientIdentifiers= [];

// Evaluate PID.1
if(typeof(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;]) !== &apos;undefined&apos; || msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].length()&gt;0) {
	
	for(var i= 0; i&lt;msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].length();i++) {
		// 2020-12-09 01:03 CST jer - Moved the defined identifier to inside the for loop
		var identifier= {};
		var columnName= &apos;ID&apos;;

		// 2020-12-08 23:16 CST jer - Added to manage comparison against list of patient identifiers
		if(patientIdentifiers.indexOf(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;][i].toString())&lt;0) {
		
			identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;][i].toString();
		
			var columnName= &apos;IDType&apos;;
			if(typeof(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;][i]) !== &apos;undefined&apos;) {
				if(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;][i].toString();
				} else if(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.5&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.5&apos;][i].toString();
				}
			} else if (typeof(strFacilityDomain) !== &apos;undefined&apos;) {
				identifier[columnName]= strFacilityDomain;
			} else {	
				identifier[columnName]= null;
			}
			identifiers.push(identifier);
			// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
			patientIdentifiers.push(identifier[&apos;ID&apos;]);

			if(debug&gt;0) {
				logger.info(scriptName+&quot;::DEBUG PID3.1 identifiers[&quot;+i+&quot;]: &quot;+JSON.stringify(identifiers));
				logger.info(scriptName+&quot;::DEBUG PID.3.1 patientIdentifier[&quot;+i+&quot;]: &quot;+JSON.stringify(patientIdentifiers));
			}
		} // end if
	}

} 

// Evaluate PID.2
if(typeof(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;]) !== &apos;undefined&apos; || msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;].length()&gt;0) {

	for(var i= 0; i&lt;msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;].length();i++) {
		// 2020-12-09 01:03 CST jer - Moved the defined identifier to inside the for loop
		var identifier= {};
		var columnName= &apos;ID&apos;;

		// 2020-12-08 14:49 CST jer - Added to manage comparison against list of patient identifiers
		if(patientIdentifiers.indexOf(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;].toString())&lt;0) {
		
			identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;][i].toString();
			var columnName= &apos;IDType&apos;;
			if(typeof(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.4&apos;][i]) !== &apos;undefined&apos;) {
				if(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.4&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.4&apos;][i].toString();
				}
			} else if (typeof(strFacilityDomain) !== &apos;undefined&apos;) {
				identifier[columnName]= strFacilityDomain;
			} else {	
				identifier[columnName]= null;
				// tmp[&apos;Patient&apos;][&apos;Identifiers&apos;][i][&apos;IDType&apos;]= null;
			}
			identifiers.push(identifier);
			// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
			patientIdentifiers.push(identifier[&apos;ID&apos;]);

			if(debug&gt;0) {
				logger.info(scriptName+&quot;::DEBUG PID2.1 identifiers[&quot;+i+&quot;]: &quot;+JSON.stringify(identifiers));
				logger.info(scriptName+&quot;::DEBUG PID.2.1 patientIdentifier[&quot;+i+&quot;]: &quot;+JSON.stringify(patientIdentifiers));
			}
		}
	}
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG PID.2 identifiers: &quot;+JSON.stringify(identifiers)); }
}

// Evaluate PID.4
if(typeof(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;]) !== &apos;undefined&apos; || msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].length()&gt;0) {

	for(var i= 0; i&lt;msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].length();i++) {
		
		// 2020-12-09 01:03 CST jer - Moved the defined identifier to inside the for loop
		var identifier= {};
		var columnName= &apos;ID&apos;;

		// 2020-12-08 14:49 CST jer - Added to manage comparison against list of patient identifiers
		if(patientIdentifiers.indexOf(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString())&lt;0) {
			
			identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;][i].toString();
			var columnName= &apos;IDType&apos;;
			if(typeof(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.4&apos;][i]) !== &apos;undefined&apos;) {
				if(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.4&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.4&apos;][i].toString();
				}
			} else if (typeof(strFacilityDomain) !== &apos;undefined&apos;) {
				identifier[columnName]= strFacilityDomain;
			} else {	
				identifier[columnName]= null;
				// tmp[&apos;Patient&apos;][&apos;Identifiers&apos;][i][&apos;IDType&apos;]= null;
			}
			identifiers.push(identifier);
			// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
			patientIdentifiers.push(identifier[&apos;ID&apos;]);

			if(debug&gt;0) {
				logger.info(scriptName+&quot;::DEBUG PID4.1 identifiers[&quot;+i+&quot;]: &quot;+JSON.stringify(identifiers));
				logger.info(scriptName+&quot;::DEBUG PID.4.1 patientIdentifier[&quot;+i+&quot;]: &quot;+JSON.stringify(patientIdentifiers));
			}
		}
	}
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG PID.4 identifiers: &quot;+JSON.stringify(identifiers)); }
}

if(typeof(identifiers) !== &apos;undefined&apos; || identifiers.length&gt;0) {
	var columnName= &apos;Identifiers&apos;;
	channelMap.put(&apos;PatientID&apos;,identifiers);
	// Create Identifiers JSON object
	var objIdentifiers= {};
	objIdentifiers[columnName]= identifiers;
	Object.assign(tmp[&apos;Patient&apos;], objIdentifiers);
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG objIdentifiers: &quot;+JSON.stringify(tmp[&apos;Patient&apos;][&apos;Identifiers&apos;])); }
}

if(debug&gt;0) {
	logger.info(scriptName+&quot;::DEBUG patientIdentifiers: &quot;+patientIdentifiers); 
	logger.info(scriptName+&quot;::DEBUG PatientID: &quot;+JSON.stringify(tmp[&apos;Patient&apos;][&apos;Identifiers&apos;])); 
}

channelMap.put(&apos;PatientID&apos;,JSON.stringify(tmp[&apos;Patient&apos;][&apos;Identifiers&apos;][0][&apos;ID&apos;]).replace(/[&apos;&quot;]+/g, &apos;&apos;));

tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;FirstName&apos;]= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString();
tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;LastName&apos;]= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString();
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;MiddleName&apos;]= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString();
}

// Patient Demographics DOB - PID.7.1
// 2020-12-17 jer - Modified to use checkElementIfUndefined code template to check if blank or null value for DateofBirth
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;], debug)!== null) {
	var strDateOfBirth= msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString().replace(/[^0-9]/g, &quot;&quot;).slice(0,8);
	var strModifiedDateOfBirth = strDateOfBirth.slice(0,4)+&quot;-&quot;+strDateOfBirth.slice(4,6)+&quot;-&quot;+strDateOfBirth.slice(6,8);
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;DOB&apos;]= strModifiedDateOfBirth;
}

// 2020-12-10 jer - Modified to use slice method for PID.8.1 to only return first character of sex
// Patient Demographics Sex - PID.8.1
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;], debug)!== null) {
	switch(msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString()) {
   		case &quot;M&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Sex&apos;]= &quot;Male&quot;; break;
      	case &quot;F&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Sex&apos;]= &quot;Female&quot;; break;
      	case &quot;O&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Sex&apos;]= &quot;Other&quot;; break;
	}
}

// Patient Demographics Race - PID.10.1
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;], debug)!== null) {
	switch(msg[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;].toString()) {
   		case &quot;W&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;White&quot;; break;
      	case &quot;A&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Asian&quot;; break;
      	case &quot;AA&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Black or African American&quot;; break;
      	case &quot;AI&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;American Indian or Alaska Native&quot;; break;
      	case &quot;B&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Black or African American&quot;; break;
      	case &quot;NH&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Native Hawaiian or Other Pacific Islander&quot;; break;
      	case &quot;PI&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Native Hawaiian or Other Pacific Islander&quot;; break;
       	case &quot;O&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Other Race&quot;; break;
	} 
}

if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;], debug)!== null) {
	// tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;StreetAddress&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;].toString();
	tmp[&apos;Note&apos;][&apos;Provider&apos;][&apos;Location&apos;][&apos;Department&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;].toString();
}

// Home Phone and Email Address - PID.13[0] instance
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Home&apos;]= msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.4&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;EmailAddresses&apos;]= msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.4&apos;].toString();
}
// Office Phone
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Office&apos;]= msg[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.26&apos;][&apos;PID.26.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Citizenship&apos;]= msg[&apos;PID&apos;][&apos;PID.26&apos;][&apos;PID.26.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Language&apos;]= msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.1&apos;].toString();
}
// Martial Status
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;MaritalStatus&apos;]= msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;].toString();
}

if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.30&apos;][&apos;PID.30.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;IsDeceased&apos;]= msg[&apos;PID&apos;][&apos;PID.30&apos;][&apos;PID.30.1&apos;].toString();
}
channelMap.put(&apos;Patient&apos;,JSON.stringify(tmp[&apos;Patient&apos;]));

// Account Number and Visit Number
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;]= msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();
	var strAccountNumber= msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();
}

// 2020-12-18 jer - Modified to pull the Account Number to populate the tmp[Visit][VisitNumber]
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;], debug)!== null) {
	// tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;]= msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString();
	tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;]= msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();
}

// 2020-12-18 jer - Comment out the usage of the PV1.2 Patient Class element 
// Visit - PV1 Segment

if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Department&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Room&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Facility&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.6&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Type&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.6&apos;].toString();
}

// 2020-12-19 jer - Modified to evaluate using toISODate
// Set VisitDateTime from PV1.44
if(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString() !== &apos;undefined&apos; &amp;&amp; msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString().length&gt;0) {
	if(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString().indexOf(&quot;T&quot;)&lt;0) {
		var strModifiedVisitDateTime= toISODate(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString(),&quot;America/Los_Angeles&quot;);
		tmp[&apos;Visit&apos;][&apos;VisitDateTime&apos;]= strModifiedVisitDateTime;
	} else {
		tmp[&apos;Visit&apos;][&apos;VisitDateTime&apos;]= msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString();
	}
} else if(msg[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString() !== &apos;undefined&apos; &amp;&amp; msg[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString().length&gt;0) {
	if(msg[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString().indexOf(&quot;T&quot;)&lt;0) {
		var strModifiedVisitDateTime= toISODate(msg[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString(),&quot;America/Los_Angeles&quot;);
		tmp[&apos;Visit&apos;][&apos;VisitDateTime&apos;]= strModifiedVisitDateTime;
	} else {
		tmp[&apos;Visit&apos;][&apos;VisitDateTime&apos;]= msg[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString();
	} 
}

if(debug&gt;0) { 
	logger.info(scriptName+&quot;::DEBUG msg.PV1: &quot;+msg[&apos;PV1&apos;]);
	logger.info(scriptName+&quot;::DEBUG tmp.Visit: &quot;+JSON.stringify(tmp[&apos;Visit&apos;]));
}

// 2020-12-18 jer - Commented out the PV1.7 and subsequent Visit elements
/* Attending Provider PV1.7
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.1&apos;], debug)!== null) {
	var attendingProviderId= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.1&apos;].toString();
	// tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;ID&apos;]= attendingProviderId;
}
*/

// 2020-12-20 jer - Modified to set the Attending Provider elements
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.1&apos;], debug)!== null) {
	var attendingProviderLastName= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.1&apos;].toString();
	// tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;LastName&apos;]= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.2&apos;], debug)!== null) {
	var attendingProviderFirstName= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.2&apos;].toString();
	// tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;FirstName&apos;]= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.4&apos;], debug)!== null) {
	var attendingProviderIDType= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.4&apos;].toString();
	// tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;IDType&apos;]= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.4&apos;].toString();
}

channelMap.put(&apos;Visit&apos;,JSON.stringify(tmp[&apos;Visit&apos;]));

var objNotes= {};
var strFileContents= &quot;&quot;;
if(msg[&apos;OBX&apos;] !== &apos;undefined&apos;) {
	for each(segment in msg[&apos;OBX&apos;]) {
		var strOBX5= segment[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;];
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG OBX5 typeof :&quot;+typeof(strOBX5)+&quot; length: &quot;+strOBX5.length()+&quot; children length: &quot;+strOBX5.children().length()+&quot; string: &quot;+strOBX5); }
		if(strOBX5.children().length()&gt;1) {
			var strCombinedOBX5= &quot;&quot;;
			for each (child in strOBX5.children()) {
				strCombinedOBX5+= child.toString()+&quot; &quot;;
			}
			strFileContents+= strCombinedOBX5+&quot;/n&quot;;
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG OBX strOBX5 :&quot;+typeof(strOBX5)+&quot; string: &quot;+strOBX5.toString()+&quot; strFileContents: &quot;+strFileContents.toString()); }
		} else {
			strFileContents+= segment[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString().replace(/[&amp;]/g,&quot;\&amp;&quot;)+&quot;/n&quot;;
			var obxContents=  segment[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString().replace(/[&amp;]/g,&quot;\&amp;&quot;);
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG OBX obxContents :&quot;+typeof(obxContents)+&quot; string: &quot;+obxContents.toString()); }
		} // end if
		if(debug&gt;0) { 
			logger.info(scriptName+&quot;::DEBUG tmp[Note] FileContents :&quot;+typeof(strFileContents)+&quot; length: &quot;+strFileContents.toString().length+&quot; string: &quot;+strFileContents.toString()); 
		} // end if 
	}
	// Set objNotes[ContentType]
	var columnName= &quot;ContentType&quot;;
	objNotes[columnName]= &quot;Plain Text&quot;;
	// Set objNotes[FileContents]
	if(checkElementIfUndefined(strFileContents, debug)!== null) {
		var columnName= &quot;FileContents&quot;;
		objNotes[columnName]= strFileContents;
	}
	// Set objNotes[DocumentType]
	var columnName= &quot;DocumentType&quot;;
	objNotes[columnName]= &quot;Patient Progress Note&quot;;
	// Set objNotes[DocumentID]
	if(checkElementIfUndefined(strAccountNumber, debug)!== null) {
		var columnName= &quot;DocumentID&quot;;
		objNotes[columnName]= strAccountNumber;
	}
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG objNotes: &quot;+JSON.stringify(objNotes)); }
}

if((checkElementIfUndefined(attendingProviderLastName, debug)!== null) &amp;&amp; (checkElementIfUndefined(attendingProviderFirstName, debug)!== null)
) {
	// Evaluate Attending Provider
	var provider= {};
	if(checkElementIfUndefined(attendingProviderLastName, debug)!== null) {
		// var columnName= &apos;LastName&apos;;
		// provider[columnName]= attendingProviderLastName;
		tmp[&apos;Note&apos;][&apos;Provider&apos;][&apos;LastName&apos;]= attendingProviderLastName;
	}
	if(checkElementIfUndefined(attendingProviderFirstName, debug)!== null) {
		// var columnName= &apos;FirstName&apos;;
		// provider[columnName]= attendingProviderFirstName;
		tmp[&apos;Note&apos;][&apos;Provider&apos;][&apos;FirstName&apos;]= attendingProviderFirstName;
	}
	if(checkElementIfUndefined(attendingProviderIDType, debug)!== null) {
		// var columnName= &apos;IDType&apos;;
		// provider[columnName]= attendingProviderIDType;
		tmp[&apos;Note&apos;][&apos;Provider&apos;][&apos;IDType&apos;]= attendingProviderIDType;
	}

	if(debug&gt;0) { 
		logger.info(scriptName+&quot;::DEBUG objProviders included in objNotes: &quot;+JSON.stringify(objNotes)); 
	}
}

Object.assign(tmp[&apos;Note&apos;], objNotes);
channelMap.put(&apos;Note&apos;,JSON.stringify(tmp[&apos;Note&apos;]));

if(debug&gt;0) {
	logger.info(scriptName+&quot;::DEBUG tmp[Note] typeof: &quot;+typeof(tmp[&apos;Note&apos;])+&quot; string: &quot;+tmp[&apos;Note&apos;]);
}

channelMap.put(&apos;json_out&apos;,tmp);
return tmp;</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">TVNIfF5+XCZ8fHx8fHx8fHx8ClBJRHx8fHx8fHx8fHx8fHx8fHx8fApQVjF8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHwKT0JSfHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8Ck9CWHx8fHx8fHx8fHx8fHx8fHx8Cg==</inboundTemplate>
            <outboundTemplate encoding="base64">ewoJIk1ldGEiOiB7CgkJIkRhdGFNb2RlbCI6IG51bGwsCgkJIkV2ZW50VHlwZSI6IG51bGwsCgkJIkV2ZW50RGF0ZVRpbWUiOiBudWxsLAoJCSJUZXN0IjogbnVsbCwKCQkiU291cmNlIjogewoJCQkiSUQiOiBudWxsLAoJCQkiTmFtZSI6IG51bGwKCQl9LAoJCSJEZXN0aW5hdGlvbnMiOiB7CgkJCSJJRCI6IG51bGwsCgkJCSJOYW1lIjogbnVsbAoJCX0sCgkJIk1lc3NhZ2UiOiB7CgkJCSJJRCI6IG51bGwKCQl9LAoJCSJUcmFuc21pc3Npb24iOiB7CgkJCSJJRCI6IG51bGwKCQl9LAoJCSJGYWNpbGl0eUNvZGUiOiBudWxsCgl9LAoJIlBhdGllbnQiOiB7CgkJIklkZW50aWZpZXJzIjogWwoJCQl7CgkJCQkiSUQiOiBudWxsLAoJCQkJIklEVHlwZSI6IG51bGwKCQkJfQoJCV0sCgkJIkRlbW9ncmFwaGljcyI6IHsKCQkJIkZpcnN0TmFtZSI6IG51bGwsCgkJCSJNaWRkbGVOYW1lIjogbnVsbCwKCQkJIkxhc3ROYW1lIjogbnVsbCwKCQkJIkRPQiI6IG51bGwsCgkJCSJTU04iOiBudWxsLAoJCQkiU2V4IjogbnVsbCwKCQkJIlJhY2UiOiBudWxsLAoJCQkiSXNIaXNwYW5pYyI6IG51bGwsCgkJCSJNYXJpdGFsU3RhdHVzIjogbnVsbCwKCQkJIklzRGVjZWFzZWQiOiBudWxsLAoJCQkiRGVhdGhEYXRlVGltZSI6IG51bGwsCgkJCSJQaG9uZU51bWJlciI6IHsKCQkJCSJIb21lIjogbnVsbCwKCQkJCSJPZmZpY2UiOiBudWxsLAoJCQkJIk1vYmlsZSI6IG51bGwKCQkJfSwKCQkJIkVtYWlsQWRkcmVzc2VzIjogW10sCgkJCSJMYW5ndWFnZSI6IG51bGwsCgkJCSJDaXRpemVuc2hpcCI6IFtdLAoJCQkiQWRkcmVzcyI6IHsKCQkJCSJTdHJlZXRBZGRyZXNzIjogbnVsbCwKCQkJCSJDaXR5IjogbnVsbCwKCQkJCSJTdGF0ZSI6IG51bGwsCgkJCQkiWklQIjogbnVsbCwKCQkJCSJDb3VudHkiOiBudWxsLAoJCQkJIkNvdW50cnkiOiBudWxsCgkJCX0KCQl9LAoJCSJOb3RlcyI6IFtdCgl9LAoJIlZpc2l0IjogewoJCSJWaXNpdE51bWJlciI6IG51bGwsCgkJIkFjY291bnROdW1iZXIiOiBudWxsLAoJCSJWaXNpdERhdGVUaW1lIjogbnVsbAoJfSwKCSJOb3RlIjogewoJCSJDb250ZW50VHlwZSI6IG51bGwsCgkJIkZpbGVOYW1lIjogbnVsbCwKCQkiRmlsZUNvbnRlbnRzIjogbnVsbCwKCQkiQ29tcG9uZW50cyI6IFtdLAoJCSJEb2N1bWVudFR5cGUiOiBudWxsLAoJCSJEb2N1bWVudElEIjogbnVsbCwKCQkiU2VydmljZURhdGVUaW1lIjogbnVsbCwKCQkiRG9jdW1lbnRhdGlvbkRhdGVUaW1lIjogbnVsbCwKCQkiUHJvdmlkZXIiOiB7CgkJCSJJRCI6IG51bGwsCgkJCSJJRFR5cGUiOiBudWxsLAoJCQkiRmlyc3ROYW1lIjogbnVsbCwKCQkJIkxhc3ROYW1lIjogbnVsbCwKCQkJIkNyZWRlbnRpYWxzIjogW10sCgkJCSJBZGRyZXNzIjogewoJCQkJIlN0cmVldEFkZHJlc3MiOiBudWxsLAoJCQkJIkNpdHkiOiBudWxsLAoJCQkJIlN0YXRlIjogbnVsbCwKCQkJCSJaSVAiOiBudWxsLAoJCQkJIkNvdW50eSI6IG51bGwsCgkJCQkiQ291bnRyeSI6IG51bGwKCQkJfSwKCQkJIkVtYWlsQWRkcmVzc2VzIjogW10sCgkJCSJQaG9uZU51bWJlciI6IHsKCQkJCSJPZmZpY2UiOiBudWxsCgkJCX0sCgkJCSJMb2NhdGlvbiI6IHsKCQkJCSJUeXBlIjogbnVsbCwKCQkJCSJGYWNpbGl0eSI6IG51bGwsCgkJCQkiRGVwYXJ0bWVudCI6IG51bGwsCgkJCQkiUm9vbSI6IG51bGwKCQkJfQoJCX0sCgkJIlN0YXR1cyI6IG51bGwsCgkJIkF1dGhlbnRpY2F0b3IiOiB7CgkJCSJJRCI6IG51bGwsCgkJCSJJRFR5cGUiOiBudWxsLAoJCQkiRmlyc3ROYW1lIjogbnVsbCwKCQkJIkxhc3ROYW1lIjogbnVsbCwKCQkJIkNyZWRlbnRpYWxzIjogW10sCgkJCSJBZGRyZXNzIjogewoJCQkJIlN0cmVldEFkZHJlc3MiOiBudWxsLAoJCQkJIkNpdHkiOiBudWxsLAoJCQkJIlN0YXRlIjogbnVsbCwKCQkJCSJaSVAiOiBudWxsLAoJCQkJIkNvdW50eSI6IG51bGwsCgkJCQkiQ291bnRyeSI6IG51bGwKCQkJfSwKCQkJIkVtYWlsQWRkcmVzc2VzIjogW10sCgkJCSJQaG9uZU51bWJlciI6IHsKCQkJCSJPZmZpY2UiOiBudWxsCgkJCX0sCgkJCSJMb2NhdGlvbiI6IHsKCQkJCSJUeXBlIjogbnVsbCwKCQkJCSJGYWNpbGl0eSI6IG51bGwsCgkJCQkiRGVwYXJ0bWVudCI6IG51bGwsCgkJCQkiUm9vbSI6IG51bGwKCQkJfQoJCX0sCgkJIkF2YWlsYWJpbGl0eSI6IG51bGwsCgkJIk5vdGlmaWNhdGlvbnMiOiBbXQoJfSwKCSJPcmRlcnMiOiBbXQp9</outboundTemplate>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.12.0">
                <name>Accept message if &quot;msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString()&quot; equals &quot;ECW&quot;</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <field>msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString()</field>
                <condition>EQUALS</condition>
                <values>
                  <string>&quot;ECW&quot;</string>
                </values>
              </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
            </elements>
          </filter>
          <transportName>File Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>5</metaDataId>
          <name>FileWriter - HL7 messages - Lab Observations</name>
          <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <scheme>FILE</scheme>
            <host>C:/HL7/JSON/OUT</host>
            <outputPattern>${MessageType}_${EventType}_${PatientID}_${MessageID}.json</outputPattern>
            <anonymous>true</anonymous>
            <username>anonymous</username>
            <password>anonymous</password>
            <timeout>10000</timeout>
            <keepConnectionOpen>false</keepConnectionOpen>
            <maxIdleTime>0</maxIdleTime>
            <secure>true</secure>
            <passive>true</passive>
            <validateConnection>true</validateConnection>
            <outputAppend>false</outputAppend>
            <errorOnExists>false</errorOnExists>
            <temporary>false</temporary>
            <binary>false</binary>
            <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
            <template>${message.encodedData}</template>
          </properties>
          <transformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Convert HL7v2 ORU Lab Results to JSON</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>/* 
Name: 	Convert HL7v2 ORU Lab Results to JSON
Desc: 	Convert HL7v2 ORU Lab Results to JSON - Apply to the SANMATEO_ORU_OUT_JSON Source Transformer
Created:	2020-12-08 jer
Modified:
2020-12-17 jer - Modified to use checkElementIfUndefined code template to check if blank or null value for DateofBirth
2020-12-17 jer - Modified MSH.9.1 to tmp.Meta.DataModel JSON accommodate both Laboratory and eCW Visit Notes
2020-12-16 jer - Modified to evaluate the OBX segments to msg[&apos;Orders&apos;][&apos;Results&apos;] JSON instances 
2020-12-13 jer - Applied Switch statements across a few coded valued fields
2020-12-10 jer - Modified to use slice method for PID.8.1 to only return first character of sex
2020-12-09 jer - Modified to introduce the usage of the code template checkElementIfUndefined to check if undefined or no value if either then pull from the Outbound Message template (e.g. &quot;Abbrevation&quot;: null)
*/
var scriptName= &quot;Convert HL7v2 ORU to JSON &quot;;
var debug= 0;
var hl7json= {};
var columnName= &quot;Meta&quot;;

if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG msg: &quot;+msg); }

// Meta - MSH Segment
// 2020-12-17 jer - Modified MSH.9.1 to tmp.Meta.DataModel JSON accommodate both Laboratory and eCW Visit Notes
if(msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString().indexOf(&quot;ORU&quot;)&gt;-1 &amp;&amp; msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString().indexOf(&quot;ECW&quot;)&gt;-1) {
	tmp[&apos;Meta&apos;][&apos;DataModel&apos;]= &quot;Notes&quot;
} else {
	tmp[&apos;Meta&apos;][&apos;DataModel&apos;]= &quot;Results&quot;
}

if(msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].indexOf(&quot;R01&quot;)&gt;-1) {
	tmp[&apos;Meta&apos;][&apos;EventType&apos;]= &quot;New&quot;
} else { 
	tmp[&apos;Meta&apos;][&apos;EventType&apos;]= &quot;New&quot;
}

// Message Date Time
var strMessageDateTime= msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
if(strMessageDateTime.indexOf(&quot;T&quot;)&lt;0) {
	// var strModifiedMessageDateTime = strMessageDateTime.toString().substr(0,19).replace(/[^0-9]/g, &quot;&quot;);
	var strModifiedMessageDateTime= toISODate(strMessageDateTime,&quot;America/Los_Angeles&quot;); 
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strModifiedMessageDateTime: &quot;+strModifiedMessageDateTime); }
} else {
	var strModifiedMessageDateTime= strMessageDateTime;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strModifiedMessageDateTime: &quot;+strModifiedMessageDateTime); }
}
tmp[&apos;Meta&apos;][&apos;EventDateTime&apos;]= strModifiedMessageDateTime;
// Sending Application
tmp[&apos;Meta&apos;][&apos;Source&apos;][&apos;Name&apos;]= &quot;San Mateo eCW Production (p)&quot;;
channelMap.put(&apos;SourceName&apos;,tmp[&apos;Meta&apos;][&apos;Source&apos;][&apos;Name&apos;]);
tmp[&apos;Meta&apos;][&apos;Source&apos;][&apos;ID&apos;]= UUIDGenerator.getUUID().toString();
// Receiving Application
tmp[&apos;Meta&apos;][&apos;Destinations&apos;][&apos;Name&apos;]= &quot;AristaMD Production (p)&quot;;
tmp[&apos;Meta&apos;][&apos;Destinations&apos;][&apos;ID&apos;]= UUIDGenerator.getUUID().toString();

if(checkElementIfUndefined(msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;], debug)!== null) {
	var strFacilityDomain= msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString();
}

var strMessageControlId= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
if((typeof(msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]) == &apos;undefined&apos;) || (msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString().length&lt;1)) {
	tmp[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;]= UUIDGenerator.getUUID().toString();
} else {
	tmp[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;]= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
}
channelMap.put(&quot;MessageID&quot;, tmp[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;]);

var strProcessingId= msg[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;].toString();
if(strProcessingId== &quot;P&quot;) {
	tmp[&apos;Meta&apos;][&apos;Test&apos;]= &apos;false&apos;;
} else {
	tmp[&apos;Meta&apos;][&apos;Test&apos;]= &apos;true&apos;;
}

if(checkElementIfUndefined(msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;], debug)!== null) {
	tmp[&apos;Meta&apos;][&apos;FacilityCode&apos;]= msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString();
}
channelMap.put(&apos;Meta&apos;,JSON.stringify(tmp[&apos;Meta&apos;]));

// Patient - PID Segment
// Create identifiers array object
var identifiers= [];
// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
var patientIdentifiers= [];

// Evaluate PID.1
if(typeof(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;]) !== &apos;undefined&apos; || msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].length()&gt;0) {
	
	for(var i= 0; i&lt;msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].length();i++) {
		// 2020-12-09 01:03 CST jer - Moved the defined identifier to inside the for loop
		var identifier= {};
		var columnName= &apos;ID&apos;;

		// 2020-12-08 23:16 CST jer - Added to manage comparison against list of patient identifiers
		if(patientIdentifiers.indexOf(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;][i].toString())&lt;0) {
		
			identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;][i].toString();
		
			var columnName= &apos;IDType&apos;;
			if(typeof(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;][i]) !== &apos;undefined&apos;) {
				if(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;][i].toString();
				} else if(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.5&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.5&apos;][i].toString();
				}
			} else if (typeof(strFacilityDomain) !== &apos;undefined&apos;) {
				identifier[columnName]= strFacilityDomain;
			} else {	
				identifier[columnName]= null;
			}
			identifiers.push(identifier);
			// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
			patientIdentifiers.push(identifier[&apos;ID&apos;]);

			if(debug&gt;0) {
				logger.info(scriptName+&quot;::DEBUG PID3.1 identifiers[&quot;+i+&quot;]: &quot;+JSON.stringify(identifiers));
				logger.info(scriptName+&quot;::DEBUG PID.3.1 patientIdentifier[&quot;+i+&quot;]: &quot;+JSON.stringify(patientIdentifiers));
			}
		} // end if
	}

} 

// Evaluate PID.2
if(typeof(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;]) !== &apos;undefined&apos; || msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;].length()&gt;0) {

	for(var i= 0; i&lt;msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;].length();i++) {
		// 2020-12-09 01:03 CST jer - Moved the defined identifier to inside the for loop
		var identifier= {};
		var columnName= &apos;ID&apos;;

		// 2020-12-08 14:49 CST jer - Added to manage comparison against list of patient identifiers
		if(patientIdentifiers.indexOf(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;].toString())&lt;0) {
		
			identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;][i].toString();
			var columnName= &apos;IDType&apos;;
			if(typeof(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.4&apos;][i]) !== &apos;undefined&apos;) {
				if(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.4&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.4&apos;][i].toString();
				}
			} else if (typeof(strFacilityDomain) !== &apos;undefined&apos;) {
				identifier[columnName]= strFacilityDomain;
			} else {	
				identifier[columnName]= null;
				// tmp[&apos;Patient&apos;][&apos;Identifiers&apos;][i][&apos;IDType&apos;]= null;
			}
			identifiers.push(identifier);
			// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
			patientIdentifiers.push(identifier[&apos;ID&apos;]);

			if(debug&gt;0) {
				logger.info(scriptName+&quot;::DEBUG PID2.1 identifiers[&quot;+i+&quot;]: &quot;+JSON.stringify(identifiers));
				logger.info(scriptName+&quot;::DEBUG PID.2.1 patientIdentifier[&quot;+i+&quot;]: &quot;+JSON.stringify(patientIdentifiers));
			}
		}
	}
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG PID.2 identifiers: &quot;+JSON.stringify(identifiers)); }
}

// Evaluate PID.4
if(typeof(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;]) !== &apos;undefined&apos; || msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].length()&gt;0) {

	for(var i= 0; i&lt;msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].length();i++) {
		
		// 2020-12-09 01:03 CST jer - Moved the defined identifier to inside the for loop
		var identifier= {};
		var columnName= &apos;ID&apos;;

		// 2020-12-08 14:49 CST jer - Added to manage comparison against list of patient identifiers
		if(patientIdentifiers.indexOf(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString())&lt;0) {
			
			identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;][i].toString();
			var columnName= &apos;IDType&apos;;
			if(typeof(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.4&apos;][i]) !== &apos;undefined&apos;) {
				if(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.4&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.4&apos;][i].toString();
				}
			} else if (typeof(strFacilityDomain) !== &apos;undefined&apos;) {
				identifier[columnName]= strFacilityDomain;
			} else {	
				identifier[columnName]= null;
				// tmp[&apos;Patient&apos;][&apos;Identifiers&apos;][i][&apos;IDType&apos;]= null;
			}
			identifiers.push(identifier);
			// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
			patientIdentifiers.push(identifier[&apos;ID&apos;]);

			if(debug&gt;0) {
				logger.info(scriptName+&quot;::DEBUG PID4.1 identifiers[&quot;+i+&quot;]: &quot;+JSON.stringify(identifiers));
				logger.info(scriptName+&quot;::DEBUG PID.4.1 patientIdentifier[&quot;+i+&quot;]: &quot;+JSON.stringify(patientIdentifiers));
			}
		}
	}
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG PID.4 identifiers: &quot;+JSON.stringify(identifiers)); }
}

if(typeof(identifiers) !== &apos;undefined&apos; || identifiers.length&gt;0) {
	var columnName= &apos;Identifiers&apos;;
	channelMap.put(&apos;PatientID&apos;,identifiers);
	// Create Identifiers JSON object
	var objIdentifiers= {};
	objIdentifiers[columnName]= identifiers;
	Object.assign(tmp[&apos;Patient&apos;], objIdentifiers);
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG objIdentifiers: &quot;+JSON.stringify(tmp[&apos;Patient&apos;][&apos;Identifiers&apos;])); }
}

if(debug&gt;0) {
	logger.info(scriptName+&quot;::DEBUG patientIdentifiers: &quot;+patientIdentifiers); 
	logger.info(scriptName+&quot;::DEBUG PatientID: &quot;+JSON.stringify(tmp[&apos;Patient&apos;][&apos;Identifiers&apos;])); 
}

channelMap.put(&apos;PatientID&apos;,JSON.stringify(tmp[&apos;Patient&apos;][&apos;Identifiers&apos;][0][&apos;ID&apos;]).replace(/[&apos;&quot;]+/g, &apos;&apos;));

tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;FirstName&apos;]= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString();
tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;LastName&apos;]= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString();
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;MiddleName&apos;]= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString();
}
// Patient Demographics DOB - PID.7.1
// 2020-12-17 jer - Modified to use checkElementIfUndefined code template to check if blank or null value for DateofBirth
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;], debug)!== null) {
	var strDateOfBirth= msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString().replace(/[^0-9]/g, &quot;&quot;).slice(0,8);
	var strModifiedDateOfBirth = strDateOfBirth.slice(0,4)+&quot;-&quot;+strDateOfBirth.slice(4,6)+&quot;-&quot;+strDateOfBirth.slice(6,8);
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;DOB&apos;]= strModifiedDateOfBirth;
}

// 2020-12-10 jer - Modified to use slice method for PID.8.1 to only return first character of sex
// Patient Demographics Sex - PID.8.1
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;], debug)!== null) {
	switch(msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString()) {
   		case &quot;M&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Sex&apos;]= &quot;Male&quot;; break;
      	case &quot;F&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Sex&apos;]= &quot;Female&quot;; break;
      	case &quot;O&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Sex&apos;]= &quot;Other&quot;; break;
	}
}

// Patient Demographics Race - PID.10.1
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;], debug)!== null) {
	switch(msg[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;].toString()) {
   		case &quot;W&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;White&quot;; break;
      	case &quot;A&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Asian&quot;; break;
      	case &quot;AA&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Black or African American&quot;; break;
      	case &quot;AI&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;American Indian or Alaska Native&quot;; break;
      	case &quot;B&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Black or African American&quot;; break;
      	case &quot;NH&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Native Hawaiian or Other Pacific Islander&quot;; break;
      	case &quot;PI&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Native Hawaiian or Other Pacific Islander&quot;; break;
       	case &quot;O&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Other Race&quot;; break;
	} 
}

if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;StreetAddress&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;City&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.4&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;State&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.4&apos;].toString(); 
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;ZIP&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.12&apos;][&apos;PID.12.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;County&apos;]= msg[&apos;PID&apos;][&apos;PID.12&apos;][&apos;PID.12.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.6&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;Country&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.6&apos;].toString();
}
// Home Phone and Email Address - PID.13[0] instance
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Home&apos;]= msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.4&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;EmailAddresses&apos;]= msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.4&apos;].toString();
}
// Office Phone
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Office&apos;]= msg[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.26&apos;][&apos;PID.26.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Citizenship&apos;]= msg[&apos;PID&apos;][&apos;PID.26&apos;][&apos;PID.26.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Language&apos;]= msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.1&apos;].toString();
}
// Martial Status
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;MaritalStatus&apos;]= msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;].toString();
}

if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.30&apos;][&apos;PID.30.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;IsDeceased&apos;]= msg[&apos;PID&apos;][&apos;PID.30&apos;][&apos;PID.30.1&apos;].toString();
}
channelMap.put(&apos;Patient&apos;,JSON.stringify(tmp[&apos;Patient&apos;]));

if(debug&gt;0) {
	logger.info(scriptName+&quot;::DEBUG XML msg.orc: &quot;+msg[&apos;ORC&apos;]+&quot; typeof: &quot;+typeof(msg[&apos;ORC&apos;])+&quot; string: &quot;+JSON.stringify(msg[&apos;ORC&apos;])+&quot; length: &quot;+msg[&apos;ORC&apos;].length);
	logger.info(scriptName+&quot;::DEBUG JSON msg.Orders: &quot;+tmp[&apos;Orders&apos;]+&quot; typeof: &quot;+typeof(tmp[&apos;Orders&apos;])+&quot; string: &quot;+JSON.stringify(tmp[&apos;Orders&apos;])+&quot; length: &quot;+tmp[&apos;Orders&apos;].length);
}

// Order Id ORC.2
tmp[&apos;Orders&apos;][&apos;ID&apos;]= msg[&apos;ORC&apos;][&apos;ORC.8&apos;][&apos;ORC.8.1&apos;].toString();

tmp[&apos;Orders&apos;][&apos;ApplicationOrderID&apos;]= msg[&apos;OBR&apos;][&apos;OBR.3&apos;][&apos;OBR.3.1&apos;].toString();

// General Order Control ORC
if(msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString().indexOf(&quot;NW&quot;)&gt;-1) {
	tmp[&apos;Orders&apos;][&apos;Status&apos;]= &quot;New&quot;;
} else if(msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString().indexOf(&quot;CA&quot;)&gt;-1) {
	tmp[&apos;Orders&apos;][&apos;Status&apos;]= &quot;Cancelled&quot;;
} else if(msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString().indexOf(&quot;CM&quot;)&gt;-1) {
	tmp[&apos;Orders&apos;][&apos;Status&apos;]= &quot;Completed&quot;;
} else if(msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString().indexOf(&quot;DC&quot;)&gt;-1) {
	tmp[&apos;Orders&apos;][&apos;Status&apos;]= &quot;Discontinued&quot;;
} else if(msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString().indexOf(&quot;IP&quot;)&gt;-1) {
	tmp[&apos;Orders&apos;][&apos;Status&apos;]= &quot;In-Process&quot;;
} else if(msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString().indexOf(&quot;RE&quot;)&gt;-1) {
	tmp[&apos;Orders&apos;][&apos;Status&apos;]= &quot;Resulted&quot;;
} else {
	tmp[&apos;Orders&apos;][&apos;Status&apos;]= &quot;New&quot;;
}
channelMap.put(&apos;OrderStatus&apos;,tmp[&apos;Orders&apos;][&apos;Status&apos;]);

// Order Priority ORC.7
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.6&apos;], debug)!== null) {
	switch(msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.6&apos;].toString()) {
   		case &quot;Urgent&quot; : tmp[&apos;Orders&apos;][&apos;Priority&apos;]= &quot;ASAP&quot;;
      	case &quot;UR&quot; : tmp[&apos;Orders&apos;][&apos;Priority&apos;]= &quot;UR&quot;;
      	break;
	}
}

// Transaction DateTime from ORC.9.1
if(msg[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;].toString() !== &apos;undefined&apos;) {
	if(msg[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;].toString().length&gt;0 &amp;&amp; (msg[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;].toString().indexOf(&quot;T&quot;)&lt;0)) {
		var strModifiedTransactionDateTime= toISODate(msg[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;].toString(),&quot;America/Los_Angeles&quot;);
		tmp[&apos;Orders&apos;][&apos;TransactionDateTime&apos;]= strModifiedTransactionDateTime;
	} else {
		tmp[&apos;Orders&apos;][&apos;TransactionDateTime&apos;]= msg[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;].toString();
	}
}

// Collection DateTime from ORC.7.4
if(msg[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString() !== &apos;undefined&apos;) {
	if(msg[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString().length&gt;0 &amp;&amp; (msg[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString().indexOf(&quot;T&quot;)&lt;0)) {
		var strModifiedCollectionDateTime= toISODate(msg[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString(),&quot;America/Los_Angeles&quot;);
		tmp[&apos;Orders&apos;][&apos;CollectionDateTime&apos;]= strModifiedCollectionDateTime;
	} else {
		tmp[&apos;Orders&apos;][&apos;CollectionDateTime&apos;]= msg[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString();
	}
}

// Completion DateTime from OBR.15.1
if(msg[&apos;ORC&apos;][&apos;ORC.15&apos;][&apos;ORC.15.1&apos;].toString() !== &apos;undefined&apos;) {
	if(msg[&apos;ORC&apos;][&apos;ORC.15&apos;][&apos;ORC.15.1&apos;].toString().length&gt;0 &amp;&amp; (msg[&apos;ORC&apos;][&apos;ORC.15&apos;][&apos;ORC.15.1&apos;].toString().indexOf(&quot;T&quot;)&lt;0)) {
		var strModifiedCompletionDateTime= toISODate(msg[&apos;ORC&apos;][&apos;ORC.15&apos;][&apos;ORC.15.1&apos;].toString(),&quot;America/Los_Angeles&quot;);
		tmp[&apos;Orders&apos;][&apos;CompletionDateTime&apos;]= strModifiedCompletionDateTime;
	} else {
		tmp[&apos;Orders&apos;][&apos;CompletionDateTime&apos;]= msg[&apos;ORC&apos;][&apos;ORC.15&apos;][&apos;ORC.15.1&apos;].toString();
	}
}

// Ordering Provider ORC.10
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.1&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;NPI&apos;]= msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.13&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;IDType&apos;]= msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.13&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.3&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;FirstName&apos;]= msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.3&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.2&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;LastName&apos;]= msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.2&apos;].toString();
}

// VerifiedBy Provider ORC.11
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.11&apos;][&apos;ORC.11.1&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;NPI&apos;]= msg[&apos;ORC&apos;][&apos;ORC.11&apos;][&apos;ORC.11.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.11&apos;][&apos;ORC.11.3&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;IDType&apos;]= msg[&apos;ORC&apos;][&apos;ORC.11&apos;][&apos;ORC.11.13&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.11&apos;][&apos;ORC.11.3&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;FirstName&apos;]= msg[&apos;ORC&apos;][&apos;ORC.11&apos;][&apos;ORC.11.3&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.11&apos;][&apos;ORC.11.2&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;LastName&apos;]= msg[&apos;ORC&apos;][&apos;ORC.11&apos;][&apos;ORC.11.2&apos;].toString();
}

// OBR segment -&gt; Order
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.1&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Procedure&apos;][&apos;Code&apos;]= msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.2&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Procedure&apos;][&apos;Description&apos;]= msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.2&apos;].toString();
	channelMap.put(&apos;OrderDescription&apos;,msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.2&apos;].toString());
}

// OBR Segment -&gt; Ordering Provider
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.1&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;NPI&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.1&apos;].toString();
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;ID&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.2&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;LastName&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.3&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;FirstName&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.3&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.13&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;IDType&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.13&apos;].toString();
}

tmp[&apos;Orders&apos;][&apos;Procedure&apos;][&apos;Code&apos;]= msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.1&apos;].toString()
tmp[&apos;Orders&apos;][&apos;Procedure&apos;][&apos;Description&apos;]= msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.2&apos;].toString()

if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.15&apos;][&apos;OBR.15.1&apos;][&apos;OBR.15.1.1&apos;], debug)!== null) {
	var specimenId= msg[&apos;OBR&apos;][&apos;OBR.15&apos;][&apos;OBR.15.1&apos;][&apos;OBR.15.1.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.15&apos;][&apos;OBR.15.1&apos;][&apos;OBR.15.1.2&apos;], debug)!== null) {
	var specimenText= msg[&apos;OBR&apos;][&apos;OBR.15&apos;][&apos;OBR.15.1&apos;][&apos;OBR.15.1.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.15&apos;][&apos;OBR.15.2&apos;], debug)!== null) {
	var specimenCodingSystem= msg[&apos;OBR&apos;][&apos;OBR.15&apos;][&apos;OBR.15.2&apos;].toString();
}

// Ordering Provider -&gt; Order.Provider
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.1&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;NPI&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.1&apos;].toString();
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;ID&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.2&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;LastName&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.3&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;FirstName&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.3&apos;].toString();
}

// logger.info(scriptName+&quot;::DEBUG msg.OBX typeof: &quot;+typeof(msg[&apos;OBX&apos;])+&quot; length: &quot;+msg[&apos;OBX&apos;].length());

if(msg[&apos;OBX&apos;] !== &apos;undefined&apos; || msg[&apos;OBX&apos;].length()&gt;0) {
	// create parent Results object
	var results= [];
	for (i= 0;i&lt;msg[&apos;OBX&apos;].length();i++) {
		var result= {};
		// logger.info(scriptName+&quot;::DEBUG msg.OBX[&quot;+i+&quot;] typeof: &quot;+typeof(msg[&apos;OBX&apos;][i])+&quot; length: &quot;+msg[&apos;OBX&apos;][i].toString().length+&quot; msg.OBX: &quot;+msg[&apos;OBX&apos;][i].toString());
		// Result Code Description - OBX.3.2
		if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.2&apos;], debug)!== null) {
			// tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;Description&apos;]= msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
			var columnName= &quot;Description&quot;;
			result[columnName]= msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
		}
		// Result Code (e.g. LOINC Code=50553-7)
		if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.4&apos;], debug)!== null) {
			// tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;Code&apos;]= msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.4&apos;].toString();
			var columnName= &quot;Code&quot;;
			result[columnName]= msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.4&apos;].toString();
		}
		// CodeSet Code (e.g. LOINC)
		if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.6&apos;], debug)!== null) {
			// tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;Codeset&apos;]= msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.6&apos;].toString();
			var columnName= &quot;Codeset&quot;;
			result[columnName]= msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.6&apos;].toString();
		}

		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG result[&quot;+i+&quot;] specimenId: &quot;+specimenId+&quot; specimenText: &quot;+specimenText); }

		// Speciment object containing specimen.ID and specimen.Source
		if(specimenText.toString().length&gt;0 || specimenId.toString().length&gt;0) {
		
			var objSpecimen= {};
			// Specimen Source -&gt; specimenText
			if(checkElementIfUndefined(specimenText, debug)!== null) { 
				// tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;Specimen&apos;][&apos;Source&apos;]= specimenText;
				var columnName= &quot;Source&quot;;
				objSpecimen[columnName]= specimenText;
			}
			// Specimen ID -&gt; specimenId
			if(checkElementIfUndefined(specimenId, debug)!== null) { 
				// tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;Specimen&apos;][&apos;ID&apos;]= specimenId;
				var columnName= &quot;ID&quot;;
				objSpecimen[columnName]= specimenId;
			}
			var columnName= &quot;Specimen&quot;;
			result[columnName]= objSpecimen;
		}
		
		// Result Value -&gt; OBX.5.1
		if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString(), debug)!== null) { 
			// tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;Value&apos;]= msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
			var columnName= &quot;Value&quot;;
			result[columnName]= msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
		}
		// Result Valuetype -&gt; OBX.2.1
		if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.2&apos;][&apos;OBX.2.1&apos;], debug)!== null) {
			var strValueType= &quot;&quot;;
			switch(msg[&apos;OBX&apos;][i][&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString()) {
   				case &quot;NM&quot;: strValueType+= &quot;Numeric&quot;; break;
   				case &quot;TX&quot;: strValueType+= &quot;String&quot;; break;
      			default: strValueType+= &quot;String&quot;; break;
			}
			var columnName= &quot;ValueType&quot;;
			result[columnName]= strValueType;
		}

		// Result Units -&gt; OBX.6.2
		if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;][&apos;OBX.6.2&apos;].toString(), debug)!== null) { 
			// tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;Units&apos;]= msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;][&apos;OBX.6.2&apos;].toString();
			var columnName= &quot;Units&quot;;
			result[columnName]= msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;][&apos;OBX.6.2&apos;].toString();
		}
		// Result ReferenceRange -&gt; OBX.7.1
		if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString(), debug)!== null) { 
			
			/*
			tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;ReferenceRange&apos;][&apos;Low&apos;]= msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString().split(&apos;-&apos;)[0];
			tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;ReferenceRange&apos;][&apos;High&apos;]= msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString().split(&apos;-&apos;)[1];
			*/

			var objReferenceRange= {};
			// Reference Range Low - OBX.7.1 split[0]
			if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString(), debug)!== null) { 
				// tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;ReferenceRange&apos;][&apos;Low&apos;]= msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString().split(&apos;-&apos;)[0];
				var columnName= &quot;Low&quot;;
				if(msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString().indexOf(&apos;-&apos;)&gt;-1) {
					objReferenceRange[columnName]= msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString().split(&apos;-&apos;)[0];
				} else {
					objReferenceRange[columnName]= msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString();
				}
			}
			// Reference Range High - OBX.7.1 split[1]
			if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString(), debug)!== null) { 
				// tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;ReferenceRange&apos;][&apos;High&apos;]= msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString().split(&apos;-&apos;)[1];
				var columnName= &quot;High&quot;;
				if(msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString().indexOf(&apos;-&apos;)&gt;-1) {
					objReferenceRange[columnName]= msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString().split(&apos;-&apos;)[1];
				} else {
					objReferenceRange[columnName]= msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString();
				}
			}
			var columnName= &quot;ReferenceRange&quot;;
			result[columnName]= objReferenceRange;
		}
		
		// Result AbnormalFlag -&gt; OBX.8.2
		if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.8&apos;][&apos;OBX.8.2&apos;], debug)!== null) {
			var strAbnormalFlag= &quot;&quot;;
			switch(msg[&apos;OBX&apos;][i][&apos;OBX.8&apos;][&apos;OBX.8.2&apos;].toString()) {
				// http://www.hl7.eu/refactored/tab0078.html
				case &quot;A&quot; : strAbnormalFlag+= &quot;Abnormal&quot;; break;
				case &quot;AA&quot; : strAbnormalFlag+= &quot;Critically Abnormal&quot;; break;
   				case &quot;DET&quot; : strAbnormalFlag+= &quot;Detected&quot;; break;
   				case &quot;IE&quot; : strAbnormalFlag+=  &quot;Insufficient Evidence&quot;; break;
   				case &quot;N&quot; : strAbnormalFlag+= &quot;Normal&quot;; break;
   				case &quot;ND&quot; : strAbnormalFlag+= &quot;Not Detected&quot;; break;
   				case &quot;NEG&quot; : strAbnormalFlag+= &quot;Negative&quot;; break;
   				case &quot;POS&quot; : strAbnormalFlag+= &quot;Positive&quot;; break;
   				default: strAbnormalFlag+= &quot;Positive&quot;; break;
			}
			var columnName= &quot;AbnormalFlag&quot;;
			result[columnName]= strAbnormalFlag;
		}
		// Result Status -&gt; OBX.11.1
		if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.11&apos;][&apos;OBX.11.1&apos;], debug)!== null) {
			var strResultStatus= &quot;&quot;;
			switch(msg[&apos;OBX&apos;][i][&apos;OBX.11&apos;][&apos;OBX.11.1&apos;].toString()) {
				// http://www.hl7.eu/refactored/tab0085.html
				case &quot;D&quot; : strResultStatus+= &quot;Delete&quot;; break;
				case &quot;F&quot; : strResultStatus+= &quot;Final&quot;; break;
				case &quot;P&quot; : strResultStatus+= &quot;Preliminary&quot;; break;
				case &quot;V&quot; : strResultStatus+= &quot;Verified&quot;; break;
      			default: strResultStatus+= &quot;Final&quot;; break;
			}
			var columnName= &quot;Status&quot;;
			result[columnName]= strResultStatus;
		}
		// Result Completion DateTime from OBR.14.1
		if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.14&apos;][&apos;OBX.14.1&apos;], debug)!== null) {
			var strCompletionDateTime= &quot;&quot;;
			if(msg[&apos;OBX&apos;][i][&apos;OBX.14&apos;][&apos;OBX.14.1&apos;].toString().length&gt;0 &amp;&amp; (msg[&apos;OBX&apos;][i][&apos;OBX.14&apos;][&apos;OBX.14.1&apos;].toString().indexOf(&quot;T&quot;)&lt;0)) {
				strCompletionDateTime+= toISODate(msg[&apos;OBX&apos;][i][&apos;OBX.14&apos;][&apos;OBX.14.1&apos;].toString(),&quot;America/Los_Angeles&quot;);
			} else {
				strCompletionDateTime+= msg[&apos;OBX&apos;][i][&apos;OBX.14&apos;][&apos;OBX.14.1&apos;].toString();
			}
			var columnName= &quot;CompletionDateTime&quot;;
			result[&apos;CompletionDateTime&apos;]= strCompletionDateTime;
		}
		// Result Producer ID -&gt; OBX.15.1
		if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.1&apos;], debug)!== null) {
			var objProducer= {};
			if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.1&apos;], debug)!== null) {
				// tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;Producer&apos;][&apos;ID&apos;]= msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.1&apos;].toString();
				var columnName= &quot;ID&quot;;
				objProducer[columnName]= msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.1&apos;].toString();
			}
			var columnName= &quot;Producer&quot;;
			result[columnName]= objProducer;
		}
		
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG result[&quot;+i+&quot;] typeof: &quot;+typeof(result)+&quot; string: &quot;+JSON.stringify(result)); }
		results.push(result);
	} // end for

	if(typeof(results) !== &apos;undefined&apos; || results.length&gt;0) {
		var columnName= &apos;Results&apos;;
		// Create Identifiers JSON object
		var objIdentifiers= {};
		objIdentifiers[columnName]= results;
		Object.assign(tmp[&apos;Orders&apos;], objIdentifiers);
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG objIdentifiers: &quot;+JSON.stringify(tmp[&apos;Orders&apos;][&apos;Results&apos;])); }
	}
	
} // end if
channelMap.put(&apos;Orders&apos;,msg[&apos;Orders&apos;]);

// Account Number and Visit Number
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;]= msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;]= msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString();
}

// Visit - PV1 Segment
if(msg[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString().length&gt;0) {
	if(msg[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString()== &apos;O&apos;) {
		tmp[&apos;Visit&apos;][&apos;PatientClass&apos;]= &quot;Outpatient&quot;;
	} else if(msg[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString()== &apos;I&apos;) {
		tmp[&apos;Visit&apos;][&apos;PatientClass&apos;]= &quot;Inpatient&quot;;
	} else if(msg[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString()== &apos;E&apos;) {
		tmp[&apos;Visit&apos;][&apos;PatientClass&apos;]= &quot;Emergency&quot;;
	} else {
		tmp[&apos;Visit&apos;][&apos;PatientClass&apos;]= &quot;Other&quot;;
	}
}

if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Department&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Room&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Facility&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.6&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Type&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.6&apos;].toString();
}

// Set VisitDateTime from PV1.44
if(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString() !== &apos;undefined&apos;) {
	if(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString().length&gt;0 &amp;&amp; (msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString().indexOf(&quot;T&quot;)&lt;0)) {
		var strModifiedVisitDateTime= toISODate(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString(),&quot;America/Los_Angeles&quot;);
		tmp[&apos;Visit&apos;][&apos;VisitDateTime&apos;]= strModifiedVisitDateTime;
	} else {
		tmp[&apos;Visit&apos;][&apos;VisitDateTime&apos;]= msg[&apos;SCH&apos;][&apos;SCH.11&apos;][&apos;SCH.11.4&apos;].toString();
	}
}

// Attending Provider PV1.7
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;ID&apos;]= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.2&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;LastName&apos;]= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.3&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;FirstName&apos;]= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.3&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.13&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;IDType&apos;]= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.13&apos;].toString();
}

//  Referring Provider PV1.8
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ReferringProvider&apos;][&apos;ID&apos;]= msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.2&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ReferringProvider&apos;][&apos;LastName&apos;]= msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.3&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ReferringProvider&apos;][&apos;FirstName&apos;]= msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.3&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.13&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ReferringProvider&apos;][&apos;IDType&apos;]= msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.13&apos;].toString();
}

//  Consulting Provider PV1.9
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ConsultingProvider&apos;][&apos;ID&apos;]= msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.1&apos;].toString()
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.2&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ConsultingProvider&apos;][&apos;LastName&apos;]= msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.2&apos;].toString()
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.3&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ConsultingProvider&apos;][&apos;FirstName&apos;]= msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.3&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.13&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ConsultingProvider&apos;][&apos;IDType&apos;]= msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.13&apos;].toString();
}
// logger.info(scriptName+&quot;::DEBUG checkElementIfUndefined PV1.3.4: &quot;+msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;]+&quot; typeof: &quot;+typeof(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;])+&quot; string: &quot;+msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString()+&quot; length: &quot;+msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString().length);

// Visit Location PV1.3
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.6&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Type&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.6&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Facility&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;][&apos;PV1.3.4.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Department&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Room&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.3&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Bed&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.3&apos;].toString();
}
channelMap.put(&apos;Visit&apos;,JSON.stringify(tmp[&apos;Visit&apos;]));

channelMap.put(&apos;json_out&apos;,tmp);
return tmp;</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">TVNIfEB+XCZ8fHx8fHx8fHx8ClBJRHx8fHx8fHx8fHx8fHx8fHx8fApQVjF8fHx8fHx8fHx8fHx8fHx8fHx8fApPUkN8fHx8fHx8fHx8fHx8fHwKT0JSfHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHwKT0JYfHx8fHx8fHx8fHx8fHx8Ck5URXx8fA==</inboundTemplate>
            <outboundTemplate encoding="base64">ewoJIk1ldGEiOiB7CgkJIkRhdGFNb2RlbCI6IG51bGwsCgkJIkV2ZW50VHlwZSI6IG51bGwsCgkJIkV2ZW50RGF0ZVRpbWUiOiBudWxsLAoJCSJUZXN0IjogbnVsbCwKCQkiU291cmNlIjogewoJCQkiSUQiOiBudWxsLAoJCQkiTmFtZSI6IG51bGwKCQl9LAoJCSJEZXN0aW5hdGlvbnMiOiB7CgkJCSJJRCI6IG51bGwsCgkJCSJOYW1lIjogbnVsbAoJCX0sCgkJIk1lc3NhZ2UiOiB7CgkJCSJJRCI6IG51bGwKCQl9LAoJCSJUcmFuc21pc3Npb24iOiB7CgkJCSJJRCI6IG51bGwKCQl9LAoJCSJGYWNpbGl0eUNvZGUiOiBudWxsCgl9LAoJIlBhdGllbnQiOiB7CgkJIklkZW50aWZpZXJzIjogWwoJCQl7CgkJCQkiSUQiOiBudWxsLAoJCQkJIklEVHlwZSI6IG51bGwKCQkJfQoJCV0sCgkJIkRlbW9ncmFwaGljcyI6IHsKCQkJIkZpcnN0TmFtZSI6IG51bGwsCgkJCSJNaWRkbGVOYW1lIjogbnVsbCwKCQkJIkxhc3ROYW1lIjogbnVsbCwKCQkJIkRPQiI6IG51bGwsCgkJCSJTU04iOiBudWxsLAoJCQkiU2V4IjogbnVsbCwKCQkJIlJhY2UiOiBudWxsLAoJCQkiSXNIaXNwYW5pYyI6IG51bGwsCgkJCSJNYXJpdGFsU3RhdHVzIjogbnVsbCwKCQkJIklzRGVjZWFzZWQiOiBudWxsLAoJCQkiRGVhdGhEYXRlVGltZSI6IG51bGwsCgkJCSJQaG9uZU51bWJlciI6IHsKCQkJCSJIb21lIjogbnVsbCwKCQkJCSJPZmZpY2UiOiBudWxsLAoJCQkJIk1vYmlsZSI6IG51bGwKCQkJfSwKCQkJIkVtYWlsQWRkcmVzc2VzIjogW10sCgkJCSJMYW5ndWFnZSI6IG51bGwsCgkJCSJDaXRpemVuc2hpcCI6IFtdLAoJCQkiQWRkcmVzcyI6IHsKCQkJCSJTdHJlZXRBZGRyZXNzIjogbnVsbCwKCQkJCSJDaXR5IjogbnVsbCwKCQkJCSJTdGF0ZSI6IG51bGwsCgkJCQkiWklQIjogbnVsbCwKCQkJCSJDb3VudHkiOiBudWxsLAoJCQkJIkNvdW50cnkiOiBudWxsCgkJCX0KCQl9LAoJCSJOb3RlcyI6IFtdLAoJCSJDb250YWN0cyI6IFtdCgl9LAoJIk9yZGVycyI6IHsKCQkiSUQiOiBudWxsLAoJCSJBcHBsaWNhdGlvbk9yZGVySUQiOiBudWxsLAoJCSJUcmFuc2FjdGlvbkRhdGVUaW1lIjogbnVsbCwKCQkiQ29sbGVjdGlvbkRhdGVUaW1lIjogbnVsbCwKCQkiQ29tcGxldGlvbkRhdGVUaW1lIjogbnVsbCwKCQkiTm90ZXMiOiBbXSwKCQkiUmVzdWx0c1N0YXR1cyI6IG51bGwsCgkJIlByb2NlZHVyZSI6IHsKCQkJIkNvZGUiOiBudWxsLAoJCQkiQ29kZXNldCI6IG51bGwsCgkJCSJEZXNjcmlwdGlvbiI6IG51bGwKCQl9LAoJCSJQcm92aWRlciI6IHsKCQkJIk5QSSI6IG51bGwsCgkJCSJJRCI6IG51bGwsCgkJCSJJRFR5cGUiOiBudWxsLAoJCQkiRmlyc3ROYW1lIjogbnVsbCwKCQkJIkxhc3ROYW1lIjogbnVsbCwKCQkJIkNyZWRlbnRpYWxzIjogW10sCgkJCSJBZGRyZXNzIjogewoJCQkJIlN0cmVldEFkZHJlc3MiOiBudWxsLAoJCQkJIkNpdHkiOiBudWxsLAoJCQkJIlN0YXRlIjogbnVsbCwKCQkJCSJaSVAiOiBudWxsLAoJCQkJIkNvdW50eSI6IG51bGwsCgkJCQkiQ291bnRyeSI6IG51bGwKCQkJfSwKCQkJIkVtYWlsQWRkcmVzc2VzIjogW10sCgkJCSJQaG9uZU51bWJlciI6IHsKCQkJCSJPZmZpY2UiOiBudWxsCgkJCX0sCgkJCSJMb2NhdGlvbiI6IHsKCQkJCSJUeXBlIjogbnVsbCwKCQkJCSJGYWNpbGl0eSI6IG51bGwsCgkJCQkiRGVwYXJ0bWVudCI6IG51bGwsCgkJCQkiUm9vbSI6IG51bGwKCQkJfQoJCX0sCgkJIlJlc3VsdENvcHlQcm92aWRlcnMiOiBbXSwKCQkiU3RhdHVzIjogbnVsbCwKCQkiUmVzcG9uc2VGbGFnIjogbnVsbCwKCQkiUHJpb3JpdHkiOiBudWxsLAoJCSJSZXN1bHRzIjogWwoJCQl7CgkJCQkiQ29kZSI6ICI1MDU1My03IiwKCQkJCSJDb2Rlc2V0IjogIkxPSU5DIiwKCQkJCSJEZXNjcmlwdGlvbiI6ICJDb2xvciIsCgkJCQkiUmVsYXRlZEdyb3VwSUQiOiBudWxsLAoJCQkJIlNwZWNpbWVuIjogewoJCQkJCSJTb3VyY2UiOiAiVVJJTkUiLAoJCQkJCSJCb2R5U2l0ZSI6IG51bGwsCgkJCQkJIklEIjogbnVsbAoJCQkJfSwKCQkJCSJWYWx1ZSI6ICJZRUxMT1ciLAoJCQkJIlZhbHVlVHlwZSI6ICJTdHJpbmciLAoJCQkJIkNvbXBsZXRpb25EYXRlVGltZSI6IG51bGwsCgkJCQkiRmlsZVR5cGUiOiBudWxsLAoJCQkJIlVuaXRzIjogbnVsbCwKCQkJCSJOb3RlcyI6IFtdLAoJCQkJIkFibm9ybWFsRmxhZyI6ICJOb3JtYWwiLAoJCQkJIlN0YXR1cyI6ICJGaW5hbCIsCgkJCQkiUHJpbWFyeVJlc3VsdHNJbnRlcnByZXRlciI6IHsKCQkJCQkiTlBJIjogbnVsbCwKCQkJCQkiSUQiOiBudWxsLAoJCQkJCSJJRFR5cGUiOiBudWxsLAoJCQkJCSJGaXJzdE5hbWUiOiBudWxsLAoJCQkJCSJMYXN0TmFtZSI6IG51bGwsCgkJCQkJIkNyZWRlbnRpYWxzIjogW10sCgkJCQkJIkFkZHJlc3MiOiB7CgkJCQkJCSJTdHJlZXRBZGRyZXNzIjogbnVsbCwKCQkJCQkJIkNpdHkiOiBudWxsLAoJCQkJCQkiU3RhdGUiOiBudWxsLAoJCQkJCQkiWklQIjogbnVsbCwKCQkJCQkJIkNvdW50eSI6IG51bGwsCgkJCQkJCSJDb3VudHJ5IjogbnVsbAoJCQkJCX0sCgkJCQkJIkVtYWlsQWRkcmVzc2VzIjogW10sCgkJCQkJIlBob25lTnVtYmVyIjogewoJCQkJCQkiT2ZmaWNlIjogbnVsbAoJCQkJCX0sCgkJCQkJIkxvY2F0aW9uIjogewoJCQkJCQkiVHlwZSI6IG51bGwsCgkJCQkJCSJGYWNpbGl0eSI6IG51bGwsCgkJCQkJCSJEZXBhcnRtZW50IjogbnVsbCwKCQkJCQkJIlJvb20iOiBudWxsCgkJCQkJfQoJCQkJfSwKCQkJCSJQcm9kdWNlciI6IHsKCQkJCQkiSUQiOiAiR0giLAoJCQkJCSJOYW1lIjogbnVsbCwKCQkJCQkiSURUeXBlIjogbnVsbCwKCQkJCQkiQWRkcmVzcyI6IHsKCQkJCQkJIlN0cmVldEFkZHJlc3MiOiBudWxsLAoJCQkJCQkiQ2l0eSI6IG51bGwsCgkJCQkJCSJTdGF0ZSI6IG51bGwsCgkJCQkJCSJaSVAiOiBudWxsLAoJCQkJCQkiQ291bnR5IjogbnVsbCwKCQkJCQkJIkNvdW50cnkiOiBudWxsCgkJCQkJfQoJCQkJfSwKCQkJCSJQZXJmb3JtZXIiOiB7CgkJCQkJIklEIjogbnVsbCwKCQkJCQkiSURUeXBlIjogbnVsbCwKCQkJCQkiRmlyc3ROYW1lIjogbnVsbCwKCQkJCQkiTGFzdE5hbWUiOiBudWxsLAoJCQkJCSJDcmVkZW50aWFscyI6IFtdLAoJCQkJCSJBZGRyZXNzIjogewoJCQkJCQkiU3RyZWV0QWRkcmVzcyI6IG51bGwsCgkJCQkJCSJDaXR5IjogbnVsbCwKCQkJCQkJIlN0YXRlIjogbnVsbCwKCQkJCQkJIlpJUCI6IG51bGwsCgkJCQkJCSJDb3VudHkiOiBudWxsLAoJCQkJCQkiQ291bnRyeSI6IG51bGwKCQkJCQl9LAoJCQkJCSJFbWFpbEFkZHJlc3NlcyI6IFtdLAoJCQkJCSJQaG9uZU51bWJlciI6IHsKCQkJCQkJIk9mZmljZSI6IG51bGwKCQkJCQl9LAoJCQkJCSJMb2NhdGlvbiI6IHsKCQkJCQkJIlR5cGUiOiBudWxsLAoJCQkJCQkiRmFjaWxpdHkiOiBudWxsLAoJCQkJCQkiRGVwYXJ0bWVudCI6IG51bGwsCgkJCQkJCSJSb29tIjogbnVsbAoJCQkJCX0KCQkJCX0sCgkJCQkiUmVmZXJlbmNlUmFuZ2UiOiB7CgkJCQkJIkxvdyI6IG51bGwsCgkJCQkJIkhpZ2giOiBudWxsLAoJCQkJCSJUZXh0IjogbnVsbAoJCQkJfSwKCQkJCSJPYnNlcnZhdGlvbk1ldGhvZCI6IHsKCQkJCQkiQ29kZSI6IG51bGwsCgkJCQkJIkNvZGVzZXQiOiBudWxsLAoJCQkJCSJEZXNjcmlwdGlvbiI6IG51bGwKCQkJCX0KCQkJfQoJCV0KCX0sCgkiVmlzaXQiOiB7CgkJIlZpc2l0RGF0ZVRpbWUiOiBudWxsLAoJCSJWaXNpdE51bWJlciI6IG51bGwsCgkJIkFjY291bnROdW1iZXIiOiBudWxsLAoJCSJQYXRpZW50Q2xhc3MiOiBudWxsLAoJCSJMb2NhdGlvbiI6IHsKCQkJIlR5cGUiOiBudWxsLAoJCQkiRmFjaWxpdHkiOiBudWxsLAoJCQkiRGVwYXJ0bWVudCI6IG51bGwsCgkJCSJSb29tIjogbnVsbCwKCQkJIkJlZCI6IG51bGwKCQl9LAoJCSJBdHRlbmRpbmdQcm92aWRlciI6IHsKCQkJIklEIjogbnVsbCwKCQkJIklEVHlwZSI6IG51bGwsCgkJCSJGaXJzdE5hbWUiOiBudWxsLAoJCQkiTGFzdE5hbWUiOiBudWxsLAoJCQkiQ3JlZGVudGlhbHMiOiBbXSwKCQkJIkFkZHJlc3MiOiB7CgkJCQkiU3RyZWV0QWRkcmVzcyI6IG51bGwsCgkJCQkiQ2l0eSI6IG51bGwsCgkJCQkiU3RhdGUiOiBudWxsLAoJCQkJIlpJUCI6IG51bGwsCgkJCQkiQ291bnR5IjogbnVsbCwKCQkJCSJDb3VudHJ5IjogbnVsbAoJCQl9LAoJCQkiRW1haWxBZGRyZXNzZXMiOiBbXSwKCQkJIlBob25lTnVtYmVyIjogewoJCQkJIk9mZmljZSI6IG51bGwKCQkJfSwKCQkJIkxvY2F0aW9uIjogewoJCQkJIlR5cGUiOiBudWxsLAoJCQkJIkZhY2lsaXR5IjogbnVsbCwKCQkJCSJEZXBhcnRtZW50IjogbnVsbCwKCQkJCSJSb29tIjogbnVsbAoJCQl9CgkJfSwKCQkiUmVmZXJyaW5nUHJvdmlkZXIiOiB7CgkJCSJJRCI6IG51bGwsCgkJCSJJRFR5cGUiOiBudWxsLAoJCQkiRmlyc3ROYW1lIjogbnVsbCwKCQkJIkxhc3ROYW1lIjogbnVsbCwKCQkJIkNyZWRlbnRpYWxzIjogW10sCgkJCSJBZGRyZXNzIjogewoJCQkJIlN0cmVldEFkZHJlc3MiOiBudWxsLAoJCQkJIkNpdHkiOiBudWxsLAoJCQkJIlN0YXRlIjogbnVsbCwKCQkJCSJaSVAiOiBudWxsLAoJCQkJIkNvdW50eSI6IG51bGwsCgkJCQkiQ291bnRyeSI6IG51bGwKCQkJfSwKCQkJIkVtYWlsQWRkcmVzc2VzIjogW10sCgkJCSJQaG9uZU51bWJlciI6IHsKCQkJCSJPZmZpY2UiOiBudWxsCgkJCX0sCgkJCSJMb2NhdGlvbiI6IHsKCQkJCSJUeXBlIjogbnVsbCwKCQkJCSJGYWNpbGl0eSI6IG51bGwsCgkJCQkiRGVwYXJ0bWVudCI6IG51bGwsCgkJCQkiUm9vbSI6IG51bGwKCQkJfQoJCX0KCX0KfQ==</outboundTemplate>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.12.0">
                <name>Accept message if &quot;msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString()&quot; equals &quot;LAB&quot;</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <field>msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString()</field>
                <condition>EQUALS</condition>
                <values>
                  <string>&quot;LAB&quot;</string>
                </values>
              </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
              <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.12.0">
                <name>Accept message if &quot;msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString()&quot; equals &quot;SOARC&quot;</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <operator>AND</operator>
                <field>msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString()</field>
                <condition>EQUALS</condition>
                <values>
                  <string>&quot;SOARC&quot;</string>
                </values>
              </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
            </elements>
          </filter>
          <transportName>File Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>12</metaDataId>
          <name>HTTP Sender - Lab Results Observations</name>
          <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <host></host>
            <useProxyServer>false</useProxyServer>
            <proxyAddress></proxyAddress>
            <proxyPort></proxyPort>
            <method>post</method>
            <headers class="linked-hash-map"/>
            <parameters class="linked-hash-map"/>
            <useHeadersVariable>false</useHeadersVariable>
            <useParametersVariable>false</useParametersVariable>
            <responseXmlBody>false</responseXmlBody>
            <responseParseMultipart>true</responseParseMultipart>
            <responseIncludeMetadata>false</responseIncludeMetadata>
            <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
            <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
            <multipart>false</multipart>
            <useAuthentication>false</useAuthentication>
            <authenticationType>Basic</authenticationType>
            <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
            <username></username>
            <password></password>
            <content></content>
            <contentType>text/plain</contentType>
            <dataTypeBinary>false</dataTypeBinary>
            <charset>NONE</charset>
            <socketTimeout>30000</socketTimeout>
          </properties>
          <transformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Convert HL7v2 ORU Lab Results to JSON</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>/* 
Name: 	Convert HL7v2 ORU Lab Results to JSON
Desc: 	Convert HL7v2 ORU Lab Results to JSON - Apply to the SANMATEO_ORU_OUT_JSON Source Transformer
Created:	2020-12-08 jer
Modified:
2020-12-17 jer - Modified to use checkElementIfUndefined code template to check if blank or null value for DateofBirth
2020-12-17 jer - Modified MSH.9.1 to tmp.Meta.DataModel JSON accommodate both Laboratory and eCW Visit Notes
2020-12-16 jer - Modified to evaluate the OBX segments to msg[&apos;Orders&apos;][&apos;Results&apos;] JSON instances 
2020-12-13 jer - Applied Switch statements across a few coded valued fields
2020-12-10 jer - Modified to use slice method for PID.8.1 to only return first character of sex
2020-12-09 jer - Modified to introduce the usage of the code template checkElementIfUndefined to check if undefined or no value if either then pull from the Outbound Message template (e.g. &quot;Abbrevation&quot;: null)
*/
var scriptName= &quot;Convert HL7v2 ORU to JSON &quot;;
var debug= 0;
var hl7json= {};
var columnName= &quot;Meta&quot;;

if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG msg: &quot;+msg); }

// Meta - MSH Segment
// 2020-12-17 jer - Modified MSH.9.1 to tmp.Meta.DataModel JSON accommodate both Laboratory and eCW Visit Notes
if(msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString().indexOf(&quot;ORU&quot;)&gt;-1 &amp;&amp; msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString().indexOf(&quot;ECW&quot;)&gt;-1) {
	tmp[&apos;Meta&apos;][&apos;DataModel&apos;]= &quot;Notes&quot;
} else {
	tmp[&apos;Meta&apos;][&apos;DataModel&apos;]= &quot;Results&quot;
}

if(msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].indexOf(&quot;R01&quot;)&gt;-1) {
	tmp[&apos;Meta&apos;][&apos;EventType&apos;]= &quot;New&quot;
} else { 
	tmp[&apos;Meta&apos;][&apos;EventType&apos;]= &quot;New&quot;
}

// Message Date Time
var strMessageDateTime= msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
if(strMessageDateTime.indexOf(&quot;T&quot;)&lt;0) {
	// var strModifiedMessageDateTime = strMessageDateTime.toString().substr(0,19).replace(/[^0-9]/g, &quot;&quot;);
	var strModifiedMessageDateTime= toISODate(strMessageDateTime,&quot;America/Los_Angeles&quot;); 
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strModifiedMessageDateTime: &quot;+strModifiedMessageDateTime); }
} else {
	var strModifiedMessageDateTime= strMessageDateTime;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strModifiedMessageDateTime: &quot;+strModifiedMessageDateTime); }
}
tmp[&apos;Meta&apos;][&apos;EventDateTime&apos;]= strModifiedMessageDateTime;
// Sending Application
tmp[&apos;Meta&apos;][&apos;Source&apos;][&apos;Name&apos;]= &quot;San Mateo eCW Production (p)&quot;;
channelMap.put(&apos;SourceName&apos;,tmp[&apos;Meta&apos;][&apos;Source&apos;][&apos;Name&apos;]);
tmp[&apos;Meta&apos;][&apos;Source&apos;][&apos;ID&apos;]= UUIDGenerator.getUUID().toString();
// Receiving Application
tmp[&apos;Meta&apos;][&apos;Destinations&apos;][&apos;Name&apos;]= &quot;AristaMD Production (p)&quot;;
tmp[&apos;Meta&apos;][&apos;Destinations&apos;][&apos;ID&apos;]= UUIDGenerator.getUUID().toString();

if(checkElementIfUndefined(msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;], debug)!== null) {
	var strFacilityDomain= msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString();
}

var strMessageControlId= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
if((typeof(msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]) == &apos;undefined&apos;) || (msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString().length&lt;1)) {
	tmp[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;]= UUIDGenerator.getUUID().toString();
} else {
	tmp[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;]= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
}
channelMap.put(&quot;MessageID&quot;, tmp[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;]);

var strProcessingId= msg[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;].toString();
if(strProcessingId== &quot;P&quot;) {
	tmp[&apos;Meta&apos;][&apos;Test&apos;]= &apos;false&apos;;
} else {
	tmp[&apos;Meta&apos;][&apos;Test&apos;]= &apos;true&apos;;
}

if(checkElementIfUndefined(msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;], debug)!== null) {
	tmp[&apos;Meta&apos;][&apos;FacilityCode&apos;]= msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString();
}
channelMap.put(&apos;Meta&apos;,JSON.stringify(tmp[&apos;Meta&apos;]));

// Patient - PID Segment
// Create identifiers array object
var identifiers= [];
// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
var patientIdentifiers= [];

// Evaluate PID.1
if(typeof(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;]) !== &apos;undefined&apos; || msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].length()&gt;0) {
	
	for(var i= 0; i&lt;msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].length();i++) {
		// 2020-12-09 01:03 CST jer - Moved the defined identifier to inside the for loop
		var identifier= {};
		var columnName= &apos;ID&apos;;

		// 2020-12-08 23:16 CST jer - Added to manage comparison against list of patient identifiers
		if(patientIdentifiers.indexOf(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;][i].toString())&lt;0) {
		
			identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;][i].toString();
		
			var columnName= &apos;IDType&apos;;
			if(typeof(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;][i]) !== &apos;undefined&apos;) {
				if(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;][i].toString();
				} else if(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.5&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.5&apos;][i].toString();
				}
			} else if (typeof(strFacilityDomain) !== &apos;undefined&apos;) {
				identifier[columnName]= strFacilityDomain;
			} else {	
				identifier[columnName]= null;
			}
			identifiers.push(identifier);
			// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
			patientIdentifiers.push(identifier[&apos;ID&apos;]);

			if(debug&gt;0) {
				logger.info(scriptName+&quot;::DEBUG PID3.1 identifiers[&quot;+i+&quot;]: &quot;+JSON.stringify(identifiers));
				logger.info(scriptName+&quot;::DEBUG PID.3.1 patientIdentifier[&quot;+i+&quot;]: &quot;+JSON.stringify(patientIdentifiers));
			}
		} // end if
	}

} 

// Evaluate PID.2
if(typeof(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;]) !== &apos;undefined&apos; || msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;].length()&gt;0) {

	for(var i= 0; i&lt;msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;].length();i++) {
		// 2020-12-09 01:03 CST jer - Moved the defined identifier to inside the for loop
		var identifier= {};
		var columnName= &apos;ID&apos;;

		// 2020-12-08 14:49 CST jer - Added to manage comparison against list of patient identifiers
		if(patientIdentifiers.indexOf(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;].toString())&lt;0) {
		
			identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;][i].toString();
			var columnName= &apos;IDType&apos;;
			if(typeof(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.4&apos;][i]) !== &apos;undefined&apos;) {
				if(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.4&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.4&apos;][i].toString();
				}
			} else if (typeof(strFacilityDomain) !== &apos;undefined&apos;) {
				identifier[columnName]= strFacilityDomain;
			} else {	
				identifier[columnName]= null;
				// tmp[&apos;Patient&apos;][&apos;Identifiers&apos;][i][&apos;IDType&apos;]= null;
			}
			identifiers.push(identifier);
			// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
			patientIdentifiers.push(identifier[&apos;ID&apos;]);

			if(debug&gt;0) {
				logger.info(scriptName+&quot;::DEBUG PID2.1 identifiers[&quot;+i+&quot;]: &quot;+JSON.stringify(identifiers));
				logger.info(scriptName+&quot;::DEBUG PID.2.1 patientIdentifier[&quot;+i+&quot;]: &quot;+JSON.stringify(patientIdentifiers));
			}
		}
	}
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG PID.2 identifiers: &quot;+JSON.stringify(identifiers)); }
}

// Evaluate PID.4
if(typeof(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;]) !== &apos;undefined&apos; || msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].length()&gt;0) {

	for(var i= 0; i&lt;msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].length();i++) {
		
		// 2020-12-09 01:03 CST jer - Moved the defined identifier to inside the for loop
		var identifier= {};
		var columnName= &apos;ID&apos;;

		// 2020-12-08 14:49 CST jer - Added to manage comparison against list of patient identifiers
		if(patientIdentifiers.indexOf(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString())&lt;0) {
			
			identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;][i].toString();
			var columnName= &apos;IDType&apos;;
			if(typeof(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.4&apos;][i]) !== &apos;undefined&apos;) {
				if(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.4&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.4&apos;][i].toString();
				}
			} else if (typeof(strFacilityDomain) !== &apos;undefined&apos;) {
				identifier[columnName]= strFacilityDomain;
			} else {	
				identifier[columnName]= null;
				// tmp[&apos;Patient&apos;][&apos;Identifiers&apos;][i][&apos;IDType&apos;]= null;
			}
			identifiers.push(identifier);
			// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
			patientIdentifiers.push(identifier[&apos;ID&apos;]);

			if(debug&gt;0) {
				logger.info(scriptName+&quot;::DEBUG PID4.1 identifiers[&quot;+i+&quot;]: &quot;+JSON.stringify(identifiers));
				logger.info(scriptName+&quot;::DEBUG PID.4.1 patientIdentifier[&quot;+i+&quot;]: &quot;+JSON.stringify(patientIdentifiers));
			}
		}
	}
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG PID.4 identifiers: &quot;+JSON.stringify(identifiers)); }
}

if(typeof(identifiers) !== &apos;undefined&apos; || identifiers.length&gt;0) {
	var columnName= &apos;Identifiers&apos;;
	channelMap.put(&apos;PatientID&apos;,identifiers);
	// Create Identifiers JSON object
	var objIdentifiers= {};
	objIdentifiers[columnName]= identifiers;
	Object.assign(tmp[&apos;Patient&apos;], objIdentifiers);
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG objIdentifiers: &quot;+JSON.stringify(tmp[&apos;Patient&apos;][&apos;Identifiers&apos;])); }
}

if(debug&gt;0) {
	logger.info(scriptName+&quot;::DEBUG patientIdentifiers: &quot;+patientIdentifiers); 
	logger.info(scriptName+&quot;::DEBUG PatientID: &quot;+JSON.stringify(tmp[&apos;Patient&apos;][&apos;Identifiers&apos;])); 
}

channelMap.put(&apos;PatientID&apos;,JSON.stringify(tmp[&apos;Patient&apos;][&apos;Identifiers&apos;][0][&apos;ID&apos;]).replace(/[&apos;&quot;]+/g, &apos;&apos;));

tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;FirstName&apos;]= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString();
tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;LastName&apos;]= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString();
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;MiddleName&apos;]= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString();
}
// Patient Demographics DOB - PID.7.1
// 2020-12-17 jer - Modified to use checkElementIfUndefined code template to check if blank or null value for DateofBirth
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;], debug)!== null) {
	var strDateOfBirth= msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString().replace(/[^0-9]/g, &quot;&quot;).slice(0,8);
	var strModifiedDateOfBirth = strDateOfBirth.slice(0,4)+&quot;-&quot;+strDateOfBirth.slice(4,6)+&quot;-&quot;+strDateOfBirth.slice(6,8);
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;DOB&apos;]= strModifiedDateOfBirth;
}

// 2020-12-10 jer - Modified to use slice method for PID.8.1 to only return first character of sex
// Patient Demographics Sex - PID.8.1
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;], debug)!== null) {
	switch(msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString()) {
   		case &quot;M&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Sex&apos;]= &quot;Male&quot;; break;
      	case &quot;F&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Sex&apos;]= &quot;Female&quot;; break;
      	case &quot;O&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Sex&apos;]= &quot;Other&quot;; break;
	}
}

// Patient Demographics Race - PID.10.1
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;], debug)!== null) {
	switch(msg[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;].toString()) {
   		case &quot;W&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;White&quot;; break;
      	case &quot;A&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Asian&quot;; break;
      	case &quot;AA&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Black or African American&quot;; break;
      	case &quot;AI&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;American Indian or Alaska Native&quot;; break;
      	case &quot;B&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Black or African American&quot;; break;
      	case &quot;NH&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Native Hawaiian or Other Pacific Islander&quot;; break;
      	case &quot;PI&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Native Hawaiian or Other Pacific Islander&quot;; break;
       	case &quot;O&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Other Race&quot;; break;
	} 
}

if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;StreetAddress&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;City&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.4&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;State&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.4&apos;].toString(); 
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;ZIP&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.12&apos;][&apos;PID.12.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;County&apos;]= msg[&apos;PID&apos;][&apos;PID.12&apos;][&apos;PID.12.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.6&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;Country&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.6&apos;].toString();
}
// Home Phone and Email Address - PID.13[0] instance
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Home&apos;]= msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.4&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;EmailAddresses&apos;]= msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.4&apos;].toString();
}
// Office Phone
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Office&apos;]= msg[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.26&apos;][&apos;PID.26.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Citizenship&apos;]= msg[&apos;PID&apos;][&apos;PID.26&apos;][&apos;PID.26.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Language&apos;]= msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.1&apos;].toString();
}
// Martial Status
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;MaritalStatus&apos;]= msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;].toString();
}

if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.30&apos;][&apos;PID.30.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;IsDeceased&apos;]= msg[&apos;PID&apos;][&apos;PID.30&apos;][&apos;PID.30.1&apos;].toString();
}
channelMap.put(&apos;Patient&apos;,JSON.stringify(tmp[&apos;Patient&apos;]));

if(debug&gt;0) {
	logger.info(scriptName+&quot;::DEBUG XML msg.orc: &quot;+msg[&apos;ORC&apos;]+&quot; typeof: &quot;+typeof(msg[&apos;ORC&apos;])+&quot; string: &quot;+JSON.stringify(msg[&apos;ORC&apos;])+&quot; length: &quot;+msg[&apos;ORC&apos;].length);
	logger.info(scriptName+&quot;::DEBUG JSON msg.Orders: &quot;+tmp[&apos;Orders&apos;]+&quot; typeof: &quot;+typeof(tmp[&apos;Orders&apos;])+&quot; string: &quot;+JSON.stringify(tmp[&apos;Orders&apos;])+&quot; length: &quot;+tmp[&apos;Orders&apos;].length);
}

// Order Id ORC.2
tmp[&apos;Orders&apos;][&apos;ID&apos;]= msg[&apos;ORC&apos;][&apos;ORC.8&apos;][&apos;ORC.8.1&apos;].toString();

tmp[&apos;Orders&apos;][&apos;ApplicationOrderID&apos;]= msg[&apos;OBR&apos;][&apos;OBR.3&apos;][&apos;OBR.3.1&apos;].toString();

// General Order Control ORC
if(msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString().indexOf(&quot;NW&quot;)&gt;-1) {
	tmp[&apos;Orders&apos;][&apos;Status&apos;]= &quot;New&quot;;
} else if(msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString().indexOf(&quot;CA&quot;)&gt;-1) {
	tmp[&apos;Orders&apos;][&apos;Status&apos;]= &quot;Cancelled&quot;;
} else if(msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString().indexOf(&quot;CM&quot;)&gt;-1) {
	tmp[&apos;Orders&apos;][&apos;Status&apos;]= &quot;Completed&quot;;
} else if(msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString().indexOf(&quot;DC&quot;)&gt;-1) {
	tmp[&apos;Orders&apos;][&apos;Status&apos;]= &quot;Discontinued&quot;;
} else if(msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString().indexOf(&quot;IP&quot;)&gt;-1) {
	tmp[&apos;Orders&apos;][&apos;Status&apos;]= &quot;In-Process&quot;;
} else if(msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString().indexOf(&quot;RE&quot;)&gt;-1) {
	tmp[&apos;Orders&apos;][&apos;Status&apos;]= &quot;Resulted&quot;;
} else {
	tmp[&apos;Orders&apos;][&apos;Status&apos;]= &quot;New&quot;;
}
channelMap.put(&apos;OrderStatus&apos;,tmp[&apos;Orders&apos;][&apos;Status&apos;]);

// Order Priority ORC.7
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.6&apos;], debug)!== null) {
	switch(msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.6&apos;].toString()) {
   		case &quot;Urgent&quot; : tmp[&apos;Orders&apos;][&apos;Priority&apos;]= &quot;ASAP&quot;;
      	case &quot;UR&quot; : tmp[&apos;Orders&apos;][&apos;Priority&apos;]= &quot;UR&quot;;
      	break;
	}
}

// Transaction DateTime from ORC.9.1
if(msg[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;].toString() !== &apos;undefined&apos;) {
	if(msg[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;].toString().length&gt;0 &amp;&amp; (msg[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;].toString().indexOf(&quot;T&quot;)&lt;0)) {
		var strModifiedTransactionDateTime= toISODate(msg[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;].toString(),&quot;America/Los_Angeles&quot;);
		tmp[&apos;Orders&apos;][&apos;TransactionDateTime&apos;]= strModifiedTransactionDateTime;
	} else {
		tmp[&apos;Orders&apos;][&apos;TransactionDateTime&apos;]= msg[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;].toString();
	}
}

// Collection DateTime from ORC.7.4
if(msg[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString() !== &apos;undefined&apos;) {
	if(msg[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString().length&gt;0 &amp;&amp; (msg[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString().indexOf(&quot;T&quot;)&lt;0)) {
		var strModifiedCollectionDateTime= toISODate(msg[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString(),&quot;America/Los_Angeles&quot;);
		tmp[&apos;Orders&apos;][&apos;CollectionDateTime&apos;]= strModifiedCollectionDateTime;
	} else {
		tmp[&apos;Orders&apos;][&apos;CollectionDateTime&apos;]= msg[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString();
	}
}

// Completion DateTime from OBR.15.1
if(msg[&apos;ORC&apos;][&apos;ORC.15&apos;][&apos;ORC.15.1&apos;].toString() !== &apos;undefined&apos;) {
	if(msg[&apos;ORC&apos;][&apos;ORC.15&apos;][&apos;ORC.15.1&apos;].toString().length&gt;0 &amp;&amp; (msg[&apos;ORC&apos;][&apos;ORC.15&apos;][&apos;ORC.15.1&apos;].toString().indexOf(&quot;T&quot;)&lt;0)) {
		var strModifiedCompletionDateTime= toISODate(msg[&apos;ORC&apos;][&apos;ORC.15&apos;][&apos;ORC.15.1&apos;].toString(),&quot;America/Los_Angeles&quot;);
		tmp[&apos;Orders&apos;][&apos;CompletionDateTime&apos;]= strModifiedCompletionDateTime;
	} else {
		tmp[&apos;Orders&apos;][&apos;CompletionDateTime&apos;]= msg[&apos;ORC&apos;][&apos;ORC.15&apos;][&apos;ORC.15.1&apos;].toString();
	}
}

// Ordering Provider ORC.10
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.1&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;NPI&apos;]= msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.13&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;IDType&apos;]= msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.13&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.3&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;FirstName&apos;]= msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.3&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.2&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;LastName&apos;]= msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.2&apos;].toString();
}

// VerifiedBy Provider ORC.11
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.11&apos;][&apos;ORC.11.1&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;NPI&apos;]= msg[&apos;ORC&apos;][&apos;ORC.11&apos;][&apos;ORC.11.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.11&apos;][&apos;ORC.11.3&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;IDType&apos;]= msg[&apos;ORC&apos;][&apos;ORC.11&apos;][&apos;ORC.11.13&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.11&apos;][&apos;ORC.11.3&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;FirstName&apos;]= msg[&apos;ORC&apos;][&apos;ORC.11&apos;][&apos;ORC.11.3&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.11&apos;][&apos;ORC.11.2&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;LastName&apos;]= msg[&apos;ORC&apos;][&apos;ORC.11&apos;][&apos;ORC.11.2&apos;].toString();
}

// OBR segment -&gt; Order
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.1&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Procedure&apos;][&apos;Code&apos;]= msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.2&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Procedure&apos;][&apos;Description&apos;]= msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.2&apos;].toString();
	channelMap.put(&apos;OrderDescription&apos;,msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.2&apos;].toString());
}

// OBR Segment -&gt; Ordering Provider
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.1&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;NPI&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.1&apos;].toString();
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;ID&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.2&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;LastName&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.3&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;FirstName&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.3&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.13&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;IDType&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.13&apos;].toString();
}

tmp[&apos;Orders&apos;][&apos;Procedure&apos;][&apos;Code&apos;]= msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.1&apos;].toString()
tmp[&apos;Orders&apos;][&apos;Procedure&apos;][&apos;Description&apos;]= msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.2&apos;].toString()

if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.15&apos;][&apos;OBR.15.1&apos;][&apos;OBR.15.1.1&apos;], debug)!== null) {
	var specimenId= msg[&apos;OBR&apos;][&apos;OBR.15&apos;][&apos;OBR.15.1&apos;][&apos;OBR.15.1.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.15&apos;][&apos;OBR.15.1&apos;][&apos;OBR.15.1.2&apos;], debug)!== null) {
	var specimenText= msg[&apos;OBR&apos;][&apos;OBR.15&apos;][&apos;OBR.15.1&apos;][&apos;OBR.15.1.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.15&apos;][&apos;OBR.15.2&apos;], debug)!== null) {
	var specimenCodingSystem= msg[&apos;OBR&apos;][&apos;OBR.15&apos;][&apos;OBR.15.2&apos;].toString();
}

// Ordering Provider -&gt; Order.Provider
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.1&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;NPI&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.1&apos;].toString();
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;ID&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.2&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;LastName&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.3&apos;], debug)!== null) {
	tmp[&apos;Orders&apos;][&apos;Provider&apos;][&apos;FirstName&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.3&apos;].toString();
}

// logger.info(scriptName+&quot;::DEBUG msg.OBX typeof: &quot;+typeof(msg[&apos;OBX&apos;])+&quot; length: &quot;+msg[&apos;OBX&apos;].length());

if(msg[&apos;OBX&apos;] !== &apos;undefined&apos; || msg[&apos;OBX&apos;].length()&gt;0) {
	// create parent Results object
	var results= [];
	for (i= 0;i&lt;msg[&apos;OBX&apos;].length();i++) {
		var result= {};
		// logger.info(scriptName+&quot;::DEBUG msg.OBX[&quot;+i+&quot;] typeof: &quot;+typeof(msg[&apos;OBX&apos;][i])+&quot; length: &quot;+msg[&apos;OBX&apos;][i].toString().length+&quot; msg.OBX: &quot;+msg[&apos;OBX&apos;][i].toString());
		// Result Code Description - OBX.3.2
		if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.2&apos;], debug)!== null) {
			// tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;Description&apos;]= msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
			var columnName= &quot;Description&quot;;
			result[columnName]= msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
		}
		// Result Code (e.g. LOINC Code=50553-7)
		if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.4&apos;], debug)!== null) {
			// tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;Code&apos;]= msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.4&apos;].toString();
			var columnName= &quot;Code&quot;;
			result[columnName]= msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.4&apos;].toString();
		}
		// CodeSet Code (e.g. LOINC)
		if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.6&apos;], debug)!== null) {
			// tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;Codeset&apos;]= msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.6&apos;].toString();
			var columnName= &quot;Codeset&quot;;
			result[columnName]= msg[&apos;OBX&apos;][i][&apos;OBX.3&apos;][&apos;OBX.3.6&apos;].toString();
		}

		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG result[&quot;+i+&quot;] specimenId: &quot;+specimenId+&quot; specimenText: &quot;+specimenText); }

		// Speciment object containing specimen.ID and specimen.Source
		if(specimenText.toString().length&gt;0 || specimenId.toString().length&gt;0) {
		
			var objSpecimen= {};
			// Specimen Source -&gt; specimenText
			if(checkElementIfUndefined(specimenText, debug)!== null) { 
				// tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;Specimen&apos;][&apos;Source&apos;]= specimenText;
				var columnName= &quot;Source&quot;;
				objSpecimen[columnName]= specimenText;
			}
			// Specimen ID -&gt; specimenId
			if(checkElementIfUndefined(specimenId, debug)!== null) { 
				// tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;Specimen&apos;][&apos;ID&apos;]= specimenId;
				var columnName= &quot;ID&quot;;
				objSpecimen[columnName]= specimenId;
			}
			var columnName= &quot;Specimen&quot;;
			result[columnName]= objSpecimen;
		}
		
		// Result Value -&gt; OBX.5.1
		if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString(), debug)!== null) { 
			// tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;Value&apos;]= msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
			var columnName= &quot;Value&quot;;
			result[columnName]= msg[&apos;OBX&apos;][i][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
		}
		// Result Valuetype -&gt; OBX.2.1
		if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.2&apos;][&apos;OBX.2.1&apos;], debug)!== null) {
			var strValueType= &quot;&quot;;
			switch(msg[&apos;OBX&apos;][i][&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString()) {
   				case &quot;NM&quot;: strValueType+= &quot;Numeric&quot;; break;
   				case &quot;TX&quot;: strValueType+= &quot;String&quot;; break;
      			default: strValueType+= &quot;String&quot;; break;
			}
			var columnName= &quot;ValueType&quot;;
			result[columnName]= strValueType;
		}

		// Result Units -&gt; OBX.6.2
		if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;][&apos;OBX.6.2&apos;].toString(), debug)!== null) { 
			// tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;Units&apos;]= msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;][&apos;OBX.6.2&apos;].toString();
			var columnName= &quot;Units&quot;;
			result[columnName]= msg[&apos;OBX&apos;][i][&apos;OBX.6&apos;][&apos;OBX.6.2&apos;].toString();
		}
		// Result ReferenceRange -&gt; OBX.7.1
		if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString(), debug)!== null) { 
			
			/*
			tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;ReferenceRange&apos;][&apos;Low&apos;]= msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString().split(&apos;-&apos;)[0];
			tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;ReferenceRange&apos;][&apos;High&apos;]= msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString().split(&apos;-&apos;)[1];
			*/

			var objReferenceRange= {};
			// Reference Range Low - OBX.7.1 split[0]
			if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString(), debug)!== null) { 
				// tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;ReferenceRange&apos;][&apos;Low&apos;]= msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString().split(&apos;-&apos;)[0];
				var columnName= &quot;Low&quot;;
				if(msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString().indexOf(&apos;-&apos;)&gt;-1) {
					objReferenceRange[columnName]= msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString().split(&apos;-&apos;)[0];
				} else {
					objReferenceRange[columnName]= msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString();
				}
			}
			// Reference Range High - OBX.7.1 split[1]
			if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString(), debug)!== null) { 
				// tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;ReferenceRange&apos;][&apos;High&apos;]= msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString().split(&apos;-&apos;)[1];
				var columnName= &quot;High&quot;;
				if(msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString().indexOf(&apos;-&apos;)&gt;-1) {
					objReferenceRange[columnName]= msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString().split(&apos;-&apos;)[1];
				} else {
					objReferenceRange[columnName]= msg[&apos;OBX&apos;][i][&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString();
				}
			}
			var columnName= &quot;ReferenceRange&quot;;
			result[columnName]= objReferenceRange;
		}
		
		// Result AbnormalFlag -&gt; OBX.8.2
		if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.8&apos;][&apos;OBX.8.2&apos;], debug)!== null) {
			var strAbnormalFlag= &quot;&quot;;
			switch(msg[&apos;OBX&apos;][i][&apos;OBX.8&apos;][&apos;OBX.8.2&apos;].toString()) {
				// http://www.hl7.eu/refactored/tab0078.html
				case &quot;A&quot; : strAbnormalFlag+= &quot;Abnormal&quot;; break;
				case &quot;AA&quot; : strAbnormalFlag+= &quot;Critically Abnormal&quot;; break;
   				case &quot;DET&quot; : strAbnormalFlag+= &quot;Detected&quot;; break;
   				case &quot;IE&quot; : strAbnormalFlag+=  &quot;Insufficient Evidence&quot;; break;
   				case &quot;N&quot; : strAbnormalFlag+= &quot;Normal&quot;; break;
   				case &quot;ND&quot; : strAbnormalFlag+= &quot;Not Detected&quot;; break;
   				case &quot;NEG&quot; : strAbnormalFlag+= &quot;Negative&quot;; break;
   				case &quot;POS&quot; : strAbnormalFlag+= &quot;Positive&quot;; break;
   				default: strAbnormalFlag+= &quot;Positive&quot;; break;
			}
			var columnName= &quot;AbnormalFlag&quot;;
			result[columnName]= strAbnormalFlag;
		}
		// Result Status -&gt; OBX.11.1
		if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.11&apos;][&apos;OBX.11.1&apos;], debug)!== null) {
			var strResultStatus= &quot;&quot;;
			switch(msg[&apos;OBX&apos;][i][&apos;OBX.11&apos;][&apos;OBX.11.1&apos;].toString()) {
				// http://www.hl7.eu/refactored/tab0085.html
				case &quot;D&quot; : strResultStatus+= &quot;Delete&quot;; break;
				case &quot;F&quot; : strResultStatus+= &quot;Final&quot;; break;
				case &quot;P&quot; : strResultStatus+= &quot;Preliminary&quot;; break;
				case &quot;V&quot; : strResultStatus+= &quot;Verified&quot;; break;
      			default: strResultStatus+= &quot;Final&quot;; break;
			}
			var columnName= &quot;Status&quot;;
			result[columnName]= strResultStatus;
		}
		// Result Completion DateTime from OBR.14.1
		if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.14&apos;][&apos;OBX.14.1&apos;], debug)!== null) {
			var strCompletionDateTime= &quot;&quot;;
			if(msg[&apos;OBX&apos;][i][&apos;OBX.14&apos;][&apos;OBX.14.1&apos;].toString().length&gt;0 &amp;&amp; (msg[&apos;OBX&apos;][i][&apos;OBX.14&apos;][&apos;OBX.14.1&apos;].toString().indexOf(&quot;T&quot;)&lt;0)) {
				strCompletionDateTime+= toISODate(msg[&apos;OBX&apos;][i][&apos;OBX.14&apos;][&apos;OBX.14.1&apos;].toString(),&quot;America/Los_Angeles&quot;);
			} else {
				strCompletionDateTime+= msg[&apos;OBX&apos;][i][&apos;OBX.14&apos;][&apos;OBX.14.1&apos;].toString();
			}
			var columnName= &quot;CompletionDateTime&quot;;
			result[&apos;CompletionDateTime&apos;]= strCompletionDateTime;
		}
		// Result Producer ID -&gt; OBX.15.1
		if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.1&apos;], debug)!== null) {
			var objProducer= {};
			if(checkElementIfUndefined(msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.1&apos;], debug)!== null) {
				// tmp[&apos;Orders&apos;][&apos;Results&apos;][i][&apos;Producer&apos;][&apos;ID&apos;]= msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.1&apos;].toString();
				var columnName= &quot;ID&quot;;
				objProducer[columnName]= msg[&apos;OBX&apos;][i][&apos;OBX.15&apos;][&apos;OBX.15.1&apos;].toString();
			}
			var columnName= &quot;Producer&quot;;
			result[columnName]= objProducer;
		}
		
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG result[&quot;+i+&quot;] typeof: &quot;+typeof(result)+&quot; string: &quot;+JSON.stringify(result)); }
		results.push(result);
	} // end for

	if(typeof(results) !== &apos;undefined&apos; || results.length&gt;0) {
		var columnName= &apos;Results&apos;;
		// Create Identifiers JSON object
		var objIdentifiers= {};
		objIdentifiers[columnName]= results;
		Object.assign(tmp[&apos;Orders&apos;], objIdentifiers);
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG objIdentifiers: &quot;+JSON.stringify(tmp[&apos;Orders&apos;][&apos;Results&apos;])); }
	}
	
} // end if
channelMap.put(&apos;Orders&apos;,msg[&apos;Orders&apos;]);

// Account Number and Visit Number
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;]= msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;]= msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString();
}

// Visit - PV1 Segment
if(msg[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString().length&gt;0) {
	if(msg[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString()== &apos;O&apos;) {
		tmp[&apos;Visit&apos;][&apos;PatientClass&apos;]= &quot;Outpatient&quot;;
	} else if(msg[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString()== &apos;I&apos;) {
		tmp[&apos;Visit&apos;][&apos;PatientClass&apos;]= &quot;Inpatient&quot;;
	} else if(msg[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString()== &apos;E&apos;) {
		tmp[&apos;Visit&apos;][&apos;PatientClass&apos;]= &quot;Emergency&quot;;
	} else {
		tmp[&apos;Visit&apos;][&apos;PatientClass&apos;]= &quot;Other&quot;;
	}
}

if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Department&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Room&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Facility&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.6&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Type&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.6&apos;].toString();
}

// Set VisitDateTime from PV1.44
if(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString() !== &apos;undefined&apos;) {
	if(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString().length&gt;0 &amp;&amp; (msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString().indexOf(&quot;T&quot;)&lt;0)) {
		var strModifiedVisitDateTime= toISODate(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString(),&quot;America/Los_Angeles&quot;);
		tmp[&apos;Visit&apos;][&apos;VisitDateTime&apos;]= strModifiedVisitDateTime;
	} else {
		tmp[&apos;Visit&apos;][&apos;VisitDateTime&apos;]= msg[&apos;SCH&apos;][&apos;SCH.11&apos;][&apos;SCH.11.4&apos;].toString();
	}
}

// Attending Provider PV1.7
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;ID&apos;]= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.2&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;LastName&apos;]= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.3&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;FirstName&apos;]= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.3&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.13&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;IDType&apos;]= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.13&apos;].toString();
}

//  Referring Provider PV1.8
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ReferringProvider&apos;][&apos;ID&apos;]= msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.2&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ReferringProvider&apos;][&apos;LastName&apos;]= msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.3&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ReferringProvider&apos;][&apos;FirstName&apos;]= msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.3&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.13&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ReferringProvider&apos;][&apos;IDType&apos;]= msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.13&apos;].toString();
}

//  Consulting Provider PV1.9
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ConsultingProvider&apos;][&apos;ID&apos;]= msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.1&apos;].toString()
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.2&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ConsultingProvider&apos;][&apos;LastName&apos;]= msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.2&apos;].toString()
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.3&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ConsultingProvider&apos;][&apos;FirstName&apos;]= msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.3&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.13&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ConsultingProvider&apos;][&apos;IDType&apos;]= msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.13&apos;].toString();
}
// logger.info(scriptName+&quot;::DEBUG checkElementIfUndefined PV1.3.4: &quot;+msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;]+&quot; typeof: &quot;+typeof(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;])+&quot; string: &quot;+msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString()+&quot; length: &quot;+msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString().length);

// Visit Location PV1.3
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.6&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Type&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.6&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Facility&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;][&apos;PV1.3.4.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Department&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Room&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.3&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Bed&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.3&apos;].toString();
}
channelMap.put(&apos;Visit&apos;,JSON.stringify(tmp[&apos;Visit&apos;]));

channelMap.put(&apos;json_out&apos;,tmp);
return tmp;</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">TVNIfEB+XCZ8fHx8fHx8fHx8ClBJRHx8fHx8fHx8fHx8fHx8fHx8fApQVjF8fHx8fHx8fHx8fHx8fHx8fHx8fApPUkN8fHx8fHx8fHx8fHx8fHwKT0JSfHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHwKT0JYfHx8fHx8fHx8fHx8fHx8Ck5URXx8fA==</inboundTemplate>
            <outboundTemplate encoding="base64">ewoJIk1ldGEiOiB7CgkJIkRhdGFNb2RlbCI6IG51bGwsCgkJIkV2ZW50VHlwZSI6IG51bGwsCgkJIkV2ZW50RGF0ZVRpbWUiOiBudWxsLAoJCSJUZXN0IjogbnVsbCwKCQkiU291cmNlIjogewoJCQkiSUQiOiBudWxsLAoJCQkiTmFtZSI6IG51bGwKCQl9LAoJCSJEZXN0aW5hdGlvbnMiOiB7CgkJCSJJRCI6IG51bGwsCgkJCSJOYW1lIjogbnVsbAoJCX0sCgkJIk1lc3NhZ2UiOiB7CgkJCSJJRCI6IG51bGwKCQl9LAoJCSJUcmFuc21pc3Npb24iOiB7CgkJCSJJRCI6IG51bGwKCQl9LAoJCSJGYWNpbGl0eUNvZGUiOiBudWxsCgl9LAoJIlBhdGllbnQiOiB7CgkJIklkZW50aWZpZXJzIjogWwoJCQl7CgkJCQkiSUQiOiBudWxsLAoJCQkJIklEVHlwZSI6IG51bGwKCQkJfQoJCV0sCgkJIkRlbW9ncmFwaGljcyI6IHsKCQkJIkZpcnN0TmFtZSI6IG51bGwsCgkJCSJNaWRkbGVOYW1lIjogbnVsbCwKCQkJIkxhc3ROYW1lIjogbnVsbCwKCQkJIkRPQiI6IG51bGwsCgkJCSJTU04iOiBudWxsLAoJCQkiU2V4IjogbnVsbCwKCQkJIlJhY2UiOiBudWxsLAoJCQkiSXNIaXNwYW5pYyI6IG51bGwsCgkJCSJNYXJpdGFsU3RhdHVzIjogbnVsbCwKCQkJIklzRGVjZWFzZWQiOiBudWxsLAoJCQkiRGVhdGhEYXRlVGltZSI6IG51bGwsCgkJCSJQaG9uZU51bWJlciI6IHsKCQkJCSJIb21lIjogbnVsbCwKCQkJCSJPZmZpY2UiOiBudWxsLAoJCQkJIk1vYmlsZSI6IG51bGwKCQkJfSwKCQkJIkVtYWlsQWRkcmVzc2VzIjogW10sCgkJCSJMYW5ndWFnZSI6IG51bGwsCgkJCSJDaXRpemVuc2hpcCI6IFtdLAoJCQkiQWRkcmVzcyI6IHsKCQkJCSJTdHJlZXRBZGRyZXNzIjogbnVsbCwKCQkJCSJDaXR5IjogbnVsbCwKCQkJCSJTdGF0ZSI6IG51bGwsCgkJCQkiWklQIjogbnVsbCwKCQkJCSJDb3VudHkiOiBudWxsLAoJCQkJIkNvdW50cnkiOiBudWxsCgkJCX0KCQl9LAoJCSJOb3RlcyI6IFtdLAoJCSJDb250YWN0cyI6IFtdCgl9LAoJIk9yZGVycyI6IHsKCQkiSUQiOiBudWxsLAoJCSJBcHBsaWNhdGlvbk9yZGVySUQiOiBudWxsLAoJCSJUcmFuc2FjdGlvbkRhdGVUaW1lIjogbnVsbCwKCQkiQ29sbGVjdGlvbkRhdGVUaW1lIjogbnVsbCwKCQkiQ29tcGxldGlvbkRhdGVUaW1lIjogbnVsbCwKCQkiTm90ZXMiOiBbXSwKCQkiUmVzdWx0c1N0YXR1cyI6IG51bGwsCgkJIlByb2NlZHVyZSI6IHsKCQkJIkNvZGUiOiBudWxsLAoJCQkiQ29kZXNldCI6IG51bGwsCgkJCSJEZXNjcmlwdGlvbiI6IG51bGwKCQl9LAoJCSJQcm92aWRlciI6IHsKCQkJIk5QSSI6IG51bGwsCgkJCSJJRCI6IG51bGwsCgkJCSJJRFR5cGUiOiBudWxsLAoJCQkiRmlyc3ROYW1lIjogbnVsbCwKCQkJIkxhc3ROYW1lIjogbnVsbCwKCQkJIkNyZWRlbnRpYWxzIjogW10sCgkJCSJBZGRyZXNzIjogewoJCQkJIlN0cmVldEFkZHJlc3MiOiBudWxsLAoJCQkJIkNpdHkiOiBudWxsLAoJCQkJIlN0YXRlIjogbnVsbCwKCQkJCSJaSVAiOiBudWxsLAoJCQkJIkNvdW50eSI6IG51bGwsCgkJCQkiQ291bnRyeSI6IG51bGwKCQkJfSwKCQkJIkVtYWlsQWRkcmVzc2VzIjogW10sCgkJCSJQaG9uZU51bWJlciI6IHsKCQkJCSJPZmZpY2UiOiBudWxsCgkJCX0sCgkJCSJMb2NhdGlvbiI6IHsKCQkJCSJUeXBlIjogbnVsbCwKCQkJCSJGYWNpbGl0eSI6IG51bGwsCgkJCQkiRGVwYXJ0bWVudCI6IG51bGwsCgkJCQkiUm9vbSI6IG51bGwKCQkJfQoJCX0sCgkJIlJlc3VsdENvcHlQcm92aWRlcnMiOiBbXSwKCQkiU3RhdHVzIjogbnVsbCwKCQkiUmVzcG9uc2VGbGFnIjogbnVsbCwKCQkiUHJpb3JpdHkiOiBudWxsLAoJCSJSZXN1bHRzIjogWwoJCQl7CgkJCQkiQ29kZSI6ICI1MDU1My03IiwKCQkJCSJDb2Rlc2V0IjogIkxPSU5DIiwKCQkJCSJEZXNjcmlwdGlvbiI6ICJDb2xvciIsCgkJCQkiUmVsYXRlZEdyb3VwSUQiOiBudWxsLAoJCQkJIlNwZWNpbWVuIjogewoJCQkJCSJTb3VyY2UiOiAiVVJJTkUiLAoJCQkJCSJCb2R5U2l0ZSI6IG51bGwsCgkJCQkJIklEIjogbnVsbAoJCQkJfSwKCQkJCSJWYWx1ZSI6ICJZRUxMT1ciLAoJCQkJIlZhbHVlVHlwZSI6ICJTdHJpbmciLAoJCQkJIkNvbXBsZXRpb25EYXRlVGltZSI6IG51bGwsCgkJCQkiRmlsZVR5cGUiOiBudWxsLAoJCQkJIlVuaXRzIjogbnVsbCwKCQkJCSJOb3RlcyI6IFtdLAoJCQkJIkFibm9ybWFsRmxhZyI6ICJOb3JtYWwiLAoJCQkJIlN0YXR1cyI6ICJGaW5hbCIsCgkJCQkiUHJpbWFyeVJlc3VsdHNJbnRlcnByZXRlciI6IHsKCQkJCQkiTlBJIjogbnVsbCwKCQkJCQkiSUQiOiBudWxsLAoJCQkJCSJJRFR5cGUiOiBudWxsLAoJCQkJCSJGaXJzdE5hbWUiOiBudWxsLAoJCQkJCSJMYXN0TmFtZSI6IG51bGwsCgkJCQkJIkNyZWRlbnRpYWxzIjogW10sCgkJCQkJIkFkZHJlc3MiOiB7CgkJCQkJCSJTdHJlZXRBZGRyZXNzIjogbnVsbCwKCQkJCQkJIkNpdHkiOiBudWxsLAoJCQkJCQkiU3RhdGUiOiBudWxsLAoJCQkJCQkiWklQIjogbnVsbCwKCQkJCQkJIkNvdW50eSI6IG51bGwsCgkJCQkJCSJDb3VudHJ5IjogbnVsbAoJCQkJCX0sCgkJCQkJIkVtYWlsQWRkcmVzc2VzIjogW10sCgkJCQkJIlBob25lTnVtYmVyIjogewoJCQkJCQkiT2ZmaWNlIjogbnVsbAoJCQkJCX0sCgkJCQkJIkxvY2F0aW9uIjogewoJCQkJCQkiVHlwZSI6IG51bGwsCgkJCQkJCSJGYWNpbGl0eSI6IG51bGwsCgkJCQkJCSJEZXBhcnRtZW50IjogbnVsbCwKCQkJCQkJIlJvb20iOiBudWxsCgkJCQkJfQoJCQkJfSwKCQkJCSJQcm9kdWNlciI6IHsKCQkJCQkiSUQiOiAiR0giLAoJCQkJCSJOYW1lIjogbnVsbCwKCQkJCQkiSURUeXBlIjogbnVsbCwKCQkJCQkiQWRkcmVzcyI6IHsKCQkJCQkJIlN0cmVldEFkZHJlc3MiOiBudWxsLAoJCQkJCQkiQ2l0eSI6IG51bGwsCgkJCQkJCSJTdGF0ZSI6IG51bGwsCgkJCQkJCSJaSVAiOiBudWxsLAoJCQkJCQkiQ291bnR5IjogbnVsbCwKCQkJCQkJIkNvdW50cnkiOiBudWxsCgkJCQkJfQoJCQkJfSwKCQkJCSJQZXJmb3JtZXIiOiB7CgkJCQkJIklEIjogbnVsbCwKCQkJCQkiSURUeXBlIjogbnVsbCwKCQkJCQkiRmlyc3ROYW1lIjogbnVsbCwKCQkJCQkiTGFzdE5hbWUiOiBudWxsLAoJCQkJCSJDcmVkZW50aWFscyI6IFtdLAoJCQkJCSJBZGRyZXNzIjogewoJCQkJCQkiU3RyZWV0QWRkcmVzcyI6IG51bGwsCgkJCQkJCSJDaXR5IjogbnVsbCwKCQkJCQkJIlN0YXRlIjogbnVsbCwKCQkJCQkJIlpJUCI6IG51bGwsCgkJCQkJCSJDb3VudHkiOiBudWxsLAoJCQkJCQkiQ291bnRyeSI6IG51bGwKCQkJCQl9LAoJCQkJCSJFbWFpbEFkZHJlc3NlcyI6IFtdLAoJCQkJCSJQaG9uZU51bWJlciI6IHsKCQkJCQkJIk9mZmljZSI6IG51bGwKCQkJCQl9LAoJCQkJCSJMb2NhdGlvbiI6IHsKCQkJCQkJIlR5cGUiOiBudWxsLAoJCQkJCQkiRmFjaWxpdHkiOiBudWxsLAoJCQkJCQkiRGVwYXJ0bWVudCI6IG51bGwsCgkJCQkJCSJSb29tIjogbnVsbAoJCQkJCX0KCQkJCX0sCgkJCQkiUmVmZXJlbmNlUmFuZ2UiOiB7CgkJCQkJIkxvdyI6IG51bGwsCgkJCQkJIkhpZ2giOiBudWxsLAoJCQkJCSJUZXh0IjogbnVsbAoJCQkJfSwKCQkJCSJPYnNlcnZhdGlvbk1ldGhvZCI6IHsKCQkJCQkiQ29kZSI6IG51bGwsCgkJCQkJIkNvZGVzZXQiOiBudWxsLAoJCQkJCSJEZXNjcmlwdGlvbiI6IG51bGwKCQkJCX0KCQkJfQoJCV0KCX0sCgkiVmlzaXQiOiB7CgkJIlZpc2l0RGF0ZVRpbWUiOiBudWxsLAoJCSJWaXNpdE51bWJlciI6IG51bGwsCgkJIkFjY291bnROdW1iZXIiOiBudWxsLAoJCSJQYXRpZW50Q2xhc3MiOiBudWxsLAoJCSJMb2NhdGlvbiI6IHsKCQkJIlR5cGUiOiBudWxsLAoJCQkiRmFjaWxpdHkiOiBudWxsLAoJCQkiRGVwYXJ0bWVudCI6IG51bGwsCgkJCSJSb29tIjogbnVsbCwKCQkJIkJlZCI6IG51bGwKCQl9LAoJCSJBdHRlbmRpbmdQcm92aWRlciI6IHsKCQkJIklEIjogbnVsbCwKCQkJIklEVHlwZSI6IG51bGwsCgkJCSJGaXJzdE5hbWUiOiBudWxsLAoJCQkiTGFzdE5hbWUiOiBudWxsLAoJCQkiQ3JlZGVudGlhbHMiOiBbXSwKCQkJIkFkZHJlc3MiOiB7CgkJCQkiU3RyZWV0QWRkcmVzcyI6IG51bGwsCgkJCQkiQ2l0eSI6IG51bGwsCgkJCQkiU3RhdGUiOiBudWxsLAoJCQkJIlpJUCI6IG51bGwsCgkJCQkiQ291bnR5IjogbnVsbCwKCQkJCSJDb3VudHJ5IjogbnVsbAoJCQl9LAoJCQkiRW1haWxBZGRyZXNzZXMiOiBbXSwKCQkJIlBob25lTnVtYmVyIjogewoJCQkJIk9mZmljZSI6IG51bGwKCQkJfSwKCQkJIkxvY2F0aW9uIjogewoJCQkJIlR5cGUiOiBudWxsLAoJCQkJIkZhY2lsaXR5IjogbnVsbCwKCQkJCSJEZXBhcnRtZW50IjogbnVsbCwKCQkJCSJSb29tIjogbnVsbAoJCQl9CgkJfSwKCQkiUmVmZXJyaW5nUHJvdmlkZXIiOiB7CgkJCSJJRCI6IG51bGwsCgkJCSJJRFR5cGUiOiBudWxsLAoJCQkiRmlyc3ROYW1lIjogbnVsbCwKCQkJIkxhc3ROYW1lIjogbnVsbCwKCQkJIkNyZWRlbnRpYWxzIjogW10sCgkJCSJBZGRyZXNzIjogewoJCQkJIlN0cmVldEFkZHJlc3MiOiBudWxsLAoJCQkJIkNpdHkiOiBudWxsLAoJCQkJIlN0YXRlIjogbnVsbCwKCQkJCSJaSVAiOiBudWxsLAoJCQkJIkNvdW50eSI6IG51bGwsCgkJCQkiQ291bnRyeSI6IG51bGwKCQkJfSwKCQkJIkVtYWlsQWRkcmVzc2VzIjogW10sCgkJCSJQaG9uZU51bWJlciI6IHsKCQkJCSJPZmZpY2UiOiBudWxsCgkJCX0sCgkJCSJMb2NhdGlvbiI6IHsKCQkJCSJUeXBlIjogbnVsbCwKCQkJCSJGYWNpbGl0eSI6IG51bGwsCgkJCQkiRGVwYXJ0bWVudCI6IG51bGwsCgkJCQkiUm9vbSI6IG51bGwKCQkJfQoJCX0KCX0KfQ==</outboundTemplate>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.12.0">
                <name>Accept message if &quot;msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString()&quot; equals &quot;LAB&quot;</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <field>msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString()</field>
                <condition>EQUALS</condition>
                <values>
                  <string>&quot;LAB&quot;</string>
                </values>
              </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
              <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.12.0">
                <name>Accept message if &quot;msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString()&quot; equals &quot;SOARC&quot;</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <operator>AND</operator>
                <field>msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString()</field>
                <condition>EQUALS</condition>
                <values>
                  <string>&quot;SOARC&quot;</string>
                </values>
              </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
            </elements>
          </filter>
          <transportName>HTTP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>13</metaDataId>
          <name>HTTP Sender - eCW Visit Notes</name>
          <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <host></host>
            <useProxyServer>false</useProxyServer>
            <proxyAddress></proxyAddress>
            <proxyPort></proxyPort>
            <method>post</method>
            <headers class="linked-hash-map"/>
            <parameters class="linked-hash-map"/>
            <useHeadersVariable>false</useHeadersVariable>
            <useParametersVariable>false</useParametersVariable>
            <responseXmlBody>false</responseXmlBody>
            <responseParseMultipart>true</responseParseMultipart>
            <responseIncludeMetadata>false</responseIncludeMetadata>
            <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
            <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
            <multipart>false</multipart>
            <useAuthentication>false</useAuthentication>
            <authenticationType>Basic</authenticationType>
            <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
            <username></username>
            <password></password>
            <content></content>
            <contentType>text/plain</contentType>
            <dataTypeBinary>false</dataTypeBinary>
            <charset>NONE</charset>
            <socketTimeout>30000</socketTimeout>
          </properties>
          <transformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Convert HL7v2 ORU eCW Visit Note to JSON</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>/* 
Name: 	Convert HL7v2 ORU eCW Visit Note to JSON
Desc: 	Convert HL7v2 ORU eCW Visit Note to JSON - Apply to the SANMATEO_ORU_OUT_JSON Source Transformer
Created:	2020-12-15 jer
Modified:
2020-12-21 jer - Modified to leverage to pull the OBX.5 values into the tmp[&apos;Note&apos;][&apos;FileContents&apos;]
2020-12-17 jer - Modified to use checkElementIfUndefined code template to check if blank or null value for DateofBirth
2020-12-17 jer - Modified MSH.9.1 to tmp.Meta.DataModel JSON accommodate both Laboratory and eCW Visit Notes
*/
var scriptName= &quot;Convert HL7v2 ORU eCW Visit Note to JSON&quot;;
var debug= 0;
var hl7json= {};
var columnName= &quot;Meta&quot;;

if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG msg: &quot;+msg); }

// Meta - MSH Segment
// 2020-12-17 jer - Modified MSH.9.1 to tmp.Meta.DataModel JSON accommodate both Laboratory and eCW Visit Notes
if(msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString().indexOf(&quot;ORU&quot;)&gt;-1 &amp;&amp; msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString().indexOf(&quot;ECW&quot;)&gt;-1) {
	tmp[&apos;Meta&apos;][&apos;DataModel&apos;]= &quot;Notes&quot;
} else {
	tmp[&apos;Meta&apos;][&apos;DataModel&apos;]= &quot;Results&quot;
}

if(msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].indexOf(&quot;R01&quot;)&gt;-1) {
	tmp[&apos;Meta&apos;][&apos;EventType&apos;]= &quot;New&quot;
} else { 
	tmp[&apos;Meta&apos;][&apos;EventType&apos;]= &quot;New&quot;
}

// Message Date Time
var strMessageDateTime= msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
if(strMessageDateTime.indexOf(&quot;T&quot;)&lt;0) {
	// var strModifiedMessageDateTime = strMessageDateTime.toString().substr(0,19).replace(/[^0-9]/g, &quot;&quot;);
	var strModifiedMessageDateTime= toISODate(strMessageDateTime,&quot;America/Los_Angeles&quot;); 
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strModifiedMessageDateTime: &quot;+strModifiedMessageDateTime); }
} else {
	var strModifiedMessageDateTime= strMessageDateTime;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strModifiedMessageDateTime: &quot;+strModifiedMessageDateTime); }
}
tmp[&apos;Meta&apos;][&apos;EventDateTime&apos;]= strModifiedMessageDateTime;
// Sending Application
tmp[&apos;Meta&apos;][&apos;Source&apos;][&apos;Name&apos;]= &quot;San Mateo eCW Production (p)&quot;;
channelMap.put(&apos;SourceName&apos;,tmp[&apos;Meta&apos;][&apos;Source&apos;][&apos;Name&apos;]);
tmp[&apos;Meta&apos;][&apos;Source&apos;][&apos;ID&apos;]= UUIDGenerator.getUUID().toString();
// Receiving Application
tmp[&apos;Meta&apos;][&apos;Destinations&apos;][&apos;Name&apos;]= &quot;AristaMD Production (p)&quot;;
tmp[&apos;Meta&apos;][&apos;Destinations&apos;][&apos;ID&apos;]= UUIDGenerator.getUUID().toString();

if(checkElementIfUndefined(msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;], debug)!== null) {
	var strFacilityDomain= msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString();
}

var strMessageControlId= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
if((typeof(msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]) == &apos;undefined&apos;) || (msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString().length&lt;1)) {
	tmp[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;]= UUIDGenerator.getUUID().toString();
} else {
	tmp[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;]= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
}
channelMap.put(&quot;MessageID&quot;, tmp[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;]);

var strProcessingId= msg[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;].toString();
if(strProcessingId== &quot;P&quot;) {
	tmp[&apos;Meta&apos;][&apos;Test&apos;]= &apos;false&apos;;
} else {
	tmp[&apos;Meta&apos;][&apos;Test&apos;]= &apos;true&apos;;
}

if(checkElementIfUndefined(msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;], debug)!== null) {
	tmp[&apos;Meta&apos;][&apos;FacilityCode&apos;]= msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString();
}
channelMap.put(&apos;Meta&apos;,JSON.stringify(tmp[&apos;Meta&apos;]));

// Patient - PID Segment
// Create identifiers array object
var identifiers= [];
// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
var patientIdentifiers= [];

// Evaluate PID.1
if(typeof(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;]) !== &apos;undefined&apos; || msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].length()&gt;0) {
	
	for(var i= 0; i&lt;msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].length();i++) {
		// 2020-12-09 01:03 CST jer - Moved the defined identifier to inside the for loop
		var identifier= {};
		var columnName= &apos;ID&apos;;

		// 2020-12-08 23:16 CST jer - Added to manage comparison against list of patient identifiers
		if(patientIdentifiers.indexOf(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;][i].toString())&lt;0) {
		
			identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;][i].toString();
		
			var columnName= &apos;IDType&apos;;
			if(typeof(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;][i]) !== &apos;undefined&apos;) {
				if(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;][i].toString();
				} else if(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.5&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.5&apos;][i].toString();
				}
			} else if (typeof(strFacilityDomain) !== &apos;undefined&apos;) {
				identifier[columnName]= strFacilityDomain;
			} else {	
				identifier[columnName]= null;
			}
			identifiers.push(identifier);
			// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
			patientIdentifiers.push(identifier[&apos;ID&apos;]);

			if(debug&gt;0) {
				logger.info(scriptName+&quot;::DEBUG PID3.1 identifiers[&quot;+i+&quot;]: &quot;+JSON.stringify(identifiers));
				logger.info(scriptName+&quot;::DEBUG PID.3.1 patientIdentifier[&quot;+i+&quot;]: &quot;+JSON.stringify(patientIdentifiers));
			}
		} // end if
	}

} 

// Evaluate PID.2
if(typeof(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;]) !== &apos;undefined&apos; || msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;].length()&gt;0) {

	for(var i= 0; i&lt;msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;].length();i++) {
		// 2020-12-09 01:03 CST jer - Moved the defined identifier to inside the for loop
		var identifier= {};
		var columnName= &apos;ID&apos;;

		// 2020-12-08 14:49 CST jer - Added to manage comparison against list of patient identifiers
		if(patientIdentifiers.indexOf(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;].toString())&lt;0) {
		
			identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;][i].toString();
			var columnName= &apos;IDType&apos;;
			if(typeof(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.4&apos;][i]) !== &apos;undefined&apos;) {
				if(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.4&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.4&apos;][i].toString();
				}
			} else if (typeof(strFacilityDomain) !== &apos;undefined&apos;) {
				identifier[columnName]= strFacilityDomain;
			} else {	
				identifier[columnName]= null;
				// tmp[&apos;Patient&apos;][&apos;Identifiers&apos;][i][&apos;IDType&apos;]= null;
			}
			identifiers.push(identifier);
			// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
			patientIdentifiers.push(identifier[&apos;ID&apos;]);

			if(debug&gt;0) {
				logger.info(scriptName+&quot;::DEBUG PID2.1 identifiers[&quot;+i+&quot;]: &quot;+JSON.stringify(identifiers));
				logger.info(scriptName+&quot;::DEBUG PID.2.1 patientIdentifier[&quot;+i+&quot;]: &quot;+JSON.stringify(patientIdentifiers));
			}
		}
	}
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG PID.2 identifiers: &quot;+JSON.stringify(identifiers)); }
}

// Evaluate PID.4
if(typeof(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;]) !== &apos;undefined&apos; || msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].length()&gt;0) {

	for(var i= 0; i&lt;msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].length();i++) {
		
		// 2020-12-09 01:03 CST jer - Moved the defined identifier to inside the for loop
		var identifier= {};
		var columnName= &apos;ID&apos;;

		// 2020-12-08 14:49 CST jer - Added to manage comparison against list of patient identifiers
		if(patientIdentifiers.indexOf(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString())&lt;0) {
			
			identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;][i].toString();
			var columnName= &apos;IDType&apos;;
			if(typeof(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.4&apos;][i]) !== &apos;undefined&apos;) {
				if(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.4&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.4&apos;][i].toString();
				}
			} else if (typeof(strFacilityDomain) !== &apos;undefined&apos;) {
				identifier[columnName]= strFacilityDomain;
			} else {	
				identifier[columnName]= null;
				// tmp[&apos;Patient&apos;][&apos;Identifiers&apos;][i][&apos;IDType&apos;]= null;
			}
			identifiers.push(identifier);
			// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
			patientIdentifiers.push(identifier[&apos;ID&apos;]);

			if(debug&gt;0) {
				logger.info(scriptName+&quot;::DEBUG PID4.1 identifiers[&quot;+i+&quot;]: &quot;+JSON.stringify(identifiers));
				logger.info(scriptName+&quot;::DEBUG PID.4.1 patientIdentifier[&quot;+i+&quot;]: &quot;+JSON.stringify(patientIdentifiers));
			}
		}
	}
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG PID.4 identifiers: &quot;+JSON.stringify(identifiers)); }
}

if(typeof(identifiers) !== &apos;undefined&apos; || identifiers.length&gt;0) {
	var columnName= &apos;Identifiers&apos;;
	channelMap.put(&apos;PatientID&apos;,identifiers);
	// Create Identifiers JSON object
	var objIdentifiers= {};
	objIdentifiers[columnName]= identifiers;
	Object.assign(tmp[&apos;Patient&apos;], objIdentifiers);
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG objIdentifiers: &quot;+JSON.stringify(tmp[&apos;Patient&apos;][&apos;Identifiers&apos;])); }
}

if(debug&gt;0) {
	logger.info(scriptName+&quot;::DEBUG patientIdentifiers: &quot;+patientIdentifiers); 
	logger.info(scriptName+&quot;::DEBUG PatientID: &quot;+JSON.stringify(tmp[&apos;Patient&apos;][&apos;Identifiers&apos;])); 
}

channelMap.put(&apos;PatientID&apos;,JSON.stringify(tmp[&apos;Patient&apos;][&apos;Identifiers&apos;][0][&apos;ID&apos;]).replace(/[&apos;&quot;]+/g, &apos;&apos;));

tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;FirstName&apos;]= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString();
tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;LastName&apos;]= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString();
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;MiddleName&apos;]= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString();
}

// Patient Demographics DOB - PID.7.1
// 2020-12-17 jer - Modified to use checkElementIfUndefined code template to check if blank or null value for DateofBirth
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;], debug)!== null) {
	var strDateOfBirth= msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString().replace(/[^0-9]/g, &quot;&quot;).slice(0,8);
	var strModifiedDateOfBirth = strDateOfBirth.slice(0,4)+&quot;-&quot;+strDateOfBirth.slice(4,6)+&quot;-&quot;+strDateOfBirth.slice(6,8);
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;DOB&apos;]= strModifiedDateOfBirth;
}

// 2020-12-10 jer - Modified to use slice method for PID.8.1 to only return first character of sex
// Patient Demographics Sex - PID.8.1
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;], debug)!== null) {
	switch(msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString()) {
   		case &quot;M&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Sex&apos;]= &quot;Male&quot;; break;
      	case &quot;F&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Sex&apos;]= &quot;Female&quot;; break;
      	case &quot;O&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Sex&apos;]= &quot;Other&quot;; break;
	}
}

// Patient Demographics Race - PID.10.1
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;], debug)!== null) {
	switch(msg[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;].toString()) {
   		case &quot;W&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;White&quot;; break;
      	case &quot;A&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Asian&quot;; break;
      	case &quot;AA&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Black or African American&quot;; break;
      	case &quot;AI&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;American Indian or Alaska Native&quot;; break;
      	case &quot;B&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Black or African American&quot;; break;
      	case &quot;NH&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Native Hawaiian or Other Pacific Islander&quot;; break;
      	case &quot;PI&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Native Hawaiian or Other Pacific Islander&quot;; break;
       	case &quot;O&quot; : tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= &quot;Other Race&quot;; break;
	} 
}

if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;], debug)!== null) {
	// tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;StreetAddress&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;].toString();
	tmp[&apos;Note&apos;][&apos;Provider&apos;][&apos;Location&apos;][&apos;Department&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;].toString();
}

// Home Phone and Email Address - PID.13[0] instance
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Home&apos;]= msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.4&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;EmailAddresses&apos;]= msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.4&apos;].toString();
}
// Office Phone
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Office&apos;]= msg[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.26&apos;][&apos;PID.26.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Citizenship&apos;]= msg[&apos;PID&apos;][&apos;PID.26&apos;][&apos;PID.26.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Language&apos;]= msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.1&apos;].toString();
}
// Martial Status
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;MaritalStatus&apos;]= msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;].toString();
}

if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.30&apos;][&apos;PID.30.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;IsDeceased&apos;]= msg[&apos;PID&apos;][&apos;PID.30&apos;][&apos;PID.30.1&apos;].toString();
}
channelMap.put(&apos;Patient&apos;,JSON.stringify(tmp[&apos;Patient&apos;]));

// Account Number and Visit Number
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;]= msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();
	var strAccountNumber= msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();
}

// 2020-12-18 jer - Modified to pull the Account Number to populate the tmp[Visit][VisitNumber]
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;], debug)!== null) {
	// tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;]= msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString();
	tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;]= msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();
}

// 2020-12-18 jer - Comment out the usage of the PV1.2 Patient Class element 
// Visit - PV1 Segment

if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Department&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Room&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Facility&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.6&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Type&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.6&apos;].toString();
}

// 2020-12-19 jer - Modified to evaluate using toISODate
// Set VisitDateTime from PV1.44
if(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString() !== &apos;undefined&apos; &amp;&amp; msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString().length&gt;0) {
	if(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString().indexOf(&quot;T&quot;)&lt;0) {
		var strModifiedVisitDateTime= toISODate(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString(),&quot;America/Los_Angeles&quot;);
		tmp[&apos;Visit&apos;][&apos;VisitDateTime&apos;]= strModifiedVisitDateTime;
	} else {
		tmp[&apos;Visit&apos;][&apos;VisitDateTime&apos;]= msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString();
	}
} else if(msg[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString() !== &apos;undefined&apos; &amp;&amp; msg[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString().length&gt;0) {
	if(msg[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString().indexOf(&quot;T&quot;)&lt;0) {
		var strModifiedVisitDateTime= toISODate(msg[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString(),&quot;America/Los_Angeles&quot;);
		tmp[&apos;Visit&apos;][&apos;VisitDateTime&apos;]= strModifiedVisitDateTime;
	} else {
		tmp[&apos;Visit&apos;][&apos;VisitDateTime&apos;]= msg[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;].toString();
	} 
}

if(debug&gt;0) { 
	logger.info(scriptName+&quot;::DEBUG msg.PV1: &quot;+msg[&apos;PV1&apos;]);
	logger.info(scriptName+&quot;::DEBUG tmp.Visit: &quot;+JSON.stringify(tmp[&apos;Visit&apos;]));
}

// 2020-12-18 jer - Commented out the PV1.7 and subsequent Visit elements
/* Attending Provider PV1.7
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.1&apos;], debug)!== null) {
	var attendingProviderId= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.1&apos;].toString();
	// tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;ID&apos;]= attendingProviderId;
}
*/

// 2020-12-20 jer - Modified to set the Attending Provider elements
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.1&apos;], debug)!== null) {
	var attendingProviderLastName= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.1&apos;].toString();
	// tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;LastName&apos;]= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.2&apos;], debug)!== null) {
	var attendingProviderFirstName= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.2&apos;].toString();
	// tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;FirstName&apos;]= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.4&apos;], debug)!== null) {
	var attendingProviderIDType= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.4&apos;].toString();
	// tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;IDType&apos;]= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.4&apos;].toString();
}

channelMap.put(&apos;Visit&apos;,JSON.stringify(tmp[&apos;Visit&apos;]));

var objNotes= {};
var strFileContents= &quot;&quot;;
if(msg[&apos;OBX&apos;] !== &apos;undefined&apos;) {
	for each(segment in msg[&apos;OBX&apos;]) {
		var strOBX5= segment[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;];
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG OBX5 typeof :&quot;+typeof(strOBX5)+&quot; length: &quot;+strOBX5.length()+&quot; children length: &quot;+strOBX5.children().length()+&quot; string: &quot;+strOBX5); }
		if(strOBX5.children().length()&gt;1) {
			var strCombinedOBX5= &quot;&quot;;
			for each (child in strOBX5.children()) {
				strCombinedOBX5+= child.toString()+&quot; &quot;;
			}
			strFileContents+= strCombinedOBX5+&quot;/n&quot;;
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG OBX strOBX5 :&quot;+typeof(strOBX5)+&quot; string: &quot;+strOBX5.toString()+&quot; strFileContents: &quot;+strFileContents.toString()); }
		} else {
			strFileContents+= segment[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString().replace(/[&amp;]/g,&quot;\&amp;&quot;)+&quot;/n&quot;;
			var obxContents=  segment[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString().replace(/[&amp;]/g,&quot;\&amp;&quot;);
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG OBX obxContents :&quot;+typeof(obxContents)+&quot; string: &quot;+obxContents.toString()); }
		} // end if
		if(debug&gt;0) { 
			logger.info(scriptName+&quot;::DEBUG tmp[Note] FileContents :&quot;+typeof(strFileContents)+&quot; length: &quot;+strFileContents.toString().length+&quot; string: &quot;+strFileContents.toString()); 
		} // end if 
	}
	// Set objNotes[ContentType]
	var columnName= &quot;ContentType&quot;;
	objNotes[columnName]= &quot;Plain Text&quot;;
	// Set objNotes[FileContents]
	if(checkElementIfUndefined(strFileContents, debug)!== null) {
		var columnName= &quot;FileContents&quot;;
		objNotes[columnName]= strFileContents;
	}
	// Set objNotes[DocumentType]
	var columnName= &quot;DocumentType&quot;;
	objNotes[columnName]= &quot;Patient Progress Note&quot;;
	// Set objNotes[DocumentID]
	if(checkElementIfUndefined(strAccountNumber, debug)!== null) {
		var columnName= &quot;DocumentID&quot;;
		objNotes[columnName]= strAccountNumber;
	}
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG objNotes: &quot;+JSON.stringify(objNotes)); }
}

if((checkElementIfUndefined(attendingProviderLastName, debug)!== null) &amp;&amp; (checkElementIfUndefined(attendingProviderFirstName, debug)!== null)
) {
	// Evaluate Attending Provider
	var provider= {};
	if(checkElementIfUndefined(attendingProviderLastName, debug)!== null) {
		// var columnName= &apos;LastName&apos;;
		// provider[columnName]= attendingProviderLastName;
		tmp[&apos;Note&apos;][&apos;Provider&apos;][&apos;LastName&apos;]= attendingProviderLastName;
	}
	if(checkElementIfUndefined(attendingProviderFirstName, debug)!== null) {
		// var columnName= &apos;FirstName&apos;;
		// provider[columnName]= attendingProviderFirstName;
		tmp[&apos;Note&apos;][&apos;Provider&apos;][&apos;FirstName&apos;]= attendingProviderFirstName;
	}
	if(checkElementIfUndefined(attendingProviderIDType, debug)!== null) {
		// var columnName= &apos;IDType&apos;;
		// provider[columnName]= attendingProviderIDType;
		tmp[&apos;Note&apos;][&apos;Provider&apos;][&apos;IDType&apos;]= attendingProviderIDType;
	}

	if(debug&gt;0) { 
		logger.info(scriptName+&quot;::DEBUG objProviders included in objNotes: &quot;+JSON.stringify(objNotes)); 
	}
}

Object.assign(tmp[&apos;Note&apos;], objNotes);
channelMap.put(&apos;Note&apos;,JSON.stringify(tmp[&apos;Note&apos;]));

if(debug&gt;0) {
	logger.info(scriptName+&quot;::DEBUG tmp[Note] typeof: &quot;+typeof(tmp[&apos;Note&apos;])+&quot; string: &quot;+tmp[&apos;Note&apos;]);
}

channelMap.put(&apos;json_out&apos;,tmp);
return tmp;</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">TVNIfF5+XCZ8fHx8fHx8fHx8ClBJRHx8fHx8fHx8fHx8fHx8fHx8fApQVjF8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHwKT0JSfHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8Ck9CWHx8fHx8fHx8fHx8fHx8fHx8</inboundTemplate>
            <outboundTemplate encoding="base64">ewoJIk1ldGEiOiB7CgkJIkRhdGFNb2RlbCI6IG51bGwsCgkJIkV2ZW50VHlwZSI6IG51bGwsCgkJIkV2ZW50RGF0ZVRpbWUiOiBudWxsLAoJCSJUZXN0IjogbnVsbCwKCQkiU291cmNlIjogewoJCQkiSUQiOiBudWxsLAoJCQkiTmFtZSI6IG51bGwKCQl9LAoJCSJEZXN0aW5hdGlvbnMiOiB7CgkJCSJJRCI6IG51bGwsCgkJCSJOYW1lIjogbnVsbAoJCX0sCgkJIk1lc3NhZ2UiOiB7CgkJCSJJRCI6IG51bGwKCQl9LAoJCSJUcmFuc21pc3Npb24iOiB7CgkJCSJJRCI6IG51bGwKCQl9LAoJCSJGYWNpbGl0eUNvZGUiOiBudWxsCgl9LAoJIlBhdGllbnQiOiB7CgkJIklkZW50aWZpZXJzIjogWwoJCQl7CgkJCQkiSUQiOiBudWxsLAoJCQkJIklEVHlwZSI6IG51bGwKCQkJfQoJCV0sCgkJIkRlbW9ncmFwaGljcyI6IHsKCQkJIkZpcnN0TmFtZSI6IG51bGwsCgkJCSJNaWRkbGVOYW1lIjogbnVsbCwKCQkJIkxhc3ROYW1lIjogbnVsbCwKCQkJIkRPQiI6IG51bGwsCgkJCSJTU04iOiBudWxsLAoJCQkiU2V4IjogbnVsbCwKCQkJIlJhY2UiOiBudWxsLAoJCQkiSXNIaXNwYW5pYyI6IG51bGwsCgkJCSJNYXJpdGFsU3RhdHVzIjogbnVsbCwKCQkJIklzRGVjZWFzZWQiOiBudWxsLAoJCQkiRGVhdGhEYXRlVGltZSI6IG51bGwsCgkJCSJQaG9uZU51bWJlciI6IHsKCQkJCSJIb21lIjogbnVsbCwKCQkJCSJPZmZpY2UiOiBudWxsLAoJCQkJIk1vYmlsZSI6IG51bGwKCQkJfSwKCQkJIkVtYWlsQWRkcmVzc2VzIjogW10sCgkJCSJMYW5ndWFnZSI6IG51bGwsCgkJCSJDaXRpemVuc2hpcCI6IFtdLAoJCQkiQWRkcmVzcyI6IHsKCQkJCSJTdHJlZXRBZGRyZXNzIjogbnVsbCwKCQkJCSJDaXR5IjogbnVsbCwKCQkJCSJTdGF0ZSI6IG51bGwsCgkJCQkiWklQIjogbnVsbCwKCQkJCSJDb3VudHkiOiBudWxsLAoJCQkJIkNvdW50cnkiOiBudWxsCgkJCX0KCQl9LAoJCSJOb3RlcyI6IFtdCgl9LAoJIlZpc2l0IjogewoJCSJWaXNpdE51bWJlciI6IG51bGwsCgkJIkFjY291bnROdW1iZXIiOiBudWxsLAoJCSJWaXNpdERhdGVUaW1lIjogbnVsbAoJfSwKCSJOb3RlIjogewoJCSJDb250ZW50VHlwZSI6IG51bGwsCgkJIkZpbGVOYW1lIjogbnVsbCwKCQkiRmlsZUNvbnRlbnRzIjogbnVsbCwKCQkiQ29tcG9uZW50cyI6IFtdLAoJCSJEb2N1bWVudFR5cGUiOiBudWxsLAoJCSJEb2N1bWVudElEIjogbnVsbCwKCQkiU2VydmljZURhdGVUaW1lIjogbnVsbCwKCQkiRG9jdW1lbnRhdGlvbkRhdGVUaW1lIjogbnVsbCwKCQkiUHJvdmlkZXIiOiB7CgkJCSJJRCI6IG51bGwsCgkJCSJJRFR5cGUiOiBudWxsLAoJCQkiRmlyc3ROYW1lIjogbnVsbCwKCQkJIkxhc3ROYW1lIjogbnVsbCwKCQkJIkNyZWRlbnRpYWxzIjogW10sCgkJCSJBZGRyZXNzIjogewoJCQkJIlN0cmVldEFkZHJlc3MiOiBudWxsLAoJCQkJIkNpdHkiOiBudWxsLAoJCQkJIlN0YXRlIjogbnVsbCwKCQkJCSJaSVAiOiBudWxsLAoJCQkJIkNvdW50eSI6IG51bGwsCgkJCQkiQ291bnRyeSI6IG51bGwKCQkJfSwKCQkJIkVtYWlsQWRkcmVzc2VzIjogW10sCgkJCSJQaG9uZU51bWJlciI6IHsKCQkJCSJPZmZpY2UiOiBudWxsCgkJCX0sCgkJCSJMb2NhdGlvbiI6IHsKCQkJCSJUeXBlIjogbnVsbCwKCQkJCSJGYWNpbGl0eSI6IG51bGwsCgkJCQkiRGVwYXJ0bWVudCI6IG51bGwsCgkJCQkiUm9vbSI6IG51bGwKCQkJfQoJCX0sCgkJIlN0YXR1cyI6IG51bGwsCgkJIkF1dGhlbnRpY2F0b3IiOiB7CgkJCSJJRCI6IG51bGwsCgkJCSJJRFR5cGUiOiBudWxsLAoJCQkiRmlyc3ROYW1lIjogbnVsbCwKCQkJIkxhc3ROYW1lIjogbnVsbCwKCQkJIkNyZWRlbnRpYWxzIjogW10sCgkJCSJBZGRyZXNzIjogewoJCQkJIlN0cmVldEFkZHJlc3MiOiBudWxsLAoJCQkJIkNpdHkiOiBudWxsLAoJCQkJIlN0YXRlIjogbnVsbCwKCQkJCSJaSVAiOiBudWxsLAoJCQkJIkNvdW50eSI6IG51bGwsCgkJCQkiQ291bnRyeSI6IG51bGwKCQkJfSwKCQkJIkVtYWlsQWRkcmVzc2VzIjogW10sCgkJCSJQaG9uZU51bWJlciI6IHsKCQkJCSJPZmZpY2UiOiBudWxsCgkJCX0sCgkJCSJMb2NhdGlvbiI6IHsKCQkJCSJUeXBlIjogbnVsbCwKCQkJCSJGYWNpbGl0eSI6IG51bGwsCgkJCQkiRGVwYXJ0bWVudCI6IG51bGwsCgkJCQkiUm9vbSI6IG51bGwKCQkJfQoJCX0sCgkJIkF2YWlsYWJpbGl0eSI6IG51bGwsCgkJIk5vdGlmaWNhdGlvbnMiOiBbXQoJfQp9</outboundTemplate>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.12.0">
                <name>Accept message if &quot;msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString()&quot; equals &quot;ECW&quot;</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <field>msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString()</field>
                <condition>EQUALS</condition>
                <values>
                  <string>&quot;ECW&quot;</string>
                </values>
              </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
            </elements>
          </filter>
          <transportName>HTTP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.12.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>SOURCENAME</name>
            <type>STRING</type>
            <mappingName>SourceName</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>MESSAGEID</name>
            <type>STRING</type>
            <mappingName>MessageID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>PATIENTID</name>
            <type>STRING</type>
            <mappingName>PatientID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ORDERSTATUS</name>
            <type>STRING</type>
            <mappingName>OrderStatus</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ORDERDESC</name>
            <type>STRING</type>
            <mappingName>OrderDescription</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.12.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1608611703219</time>
            <timezone>America/Chicago</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.12.0">
            <id>6975d386-da5e-4267-aa01-5d181743a931</id>
            <name>AristaMd-Utilities</name>
            <revision>22</revision>
            <lastModified>
              <time>1690987302603</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>This library was added upon migration to version 3.3.0. It includes all pre-existing
code templates, and is set to be included on all pre-existing and new channels.

You should create your own new libraries and assign code templates to them as you
see fit. You should also link libraries to specific channels, so that you&apos;re not
necessarily including all code templates on all channels all the time.</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>b484c4c9-6c84-4f8e-b2ec-9bff6a8cf7db</id>
                <name>checkHL7ElementIfUndefined</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262649</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	checkElementIfUndefined (element, debug)
	
	- Function to check provided Element if Undefined or length less than 1 character return null.

	@param {element} - XML object provided (e.g. msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.1&apos;]
	@return {String} return XML object or null object reference
*/
function checkElementIfUndefined (element, debug) {
	var scriptName= &apos;checkHL7ElementIfUndefined&apos;;

	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG element: &quot;+element+&quot; typeof: &quot;+typeof(element)+&quot; string: &quot;+element.toString()+&quot; length: &quot;+element.toString().length); }
	
	if(element == &apos;undefined&apos;) {
		return null;
	} else {
		if(element.toString().length&lt;1) {
			return null;
		} else {
			return element;
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b9651842-7ccb-4761-aedf-a9a1461dd5f7</id>
                <name>Convert HL7 Date Format to ISO</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262839</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts standard HL7 v2.x date format to human-readable ISO date format
*/

/*
	Author: IntegrateIT.us LLC
	toISODate: Returns an ISO-formatted date string with specified timezone offset

	Arguments
	---------
		Required
		--------
			hl7DateString:		An HL7-formatted date string (ex: &quot;yyyyMMddHHmmss&quot;

		Optional
		--------
			timezome:			A timezone identifier string corresponding to one of the java.util.TimeZone values (ex: &quot;US/Central&quot;)
*/

function toISODate( hl7DateString, timezone ) {
	var isoDate;
	var dateString;
	var hl7Formatter;
	var isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);

	if (timezone) {
		isoFormatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timezone));
	}
	
	if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString.substring(0,13)) &amp;&amp; hl7DateString.length &gt; 14 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmssZ&quot;);
	}
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 14 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
	} 
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 12 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);
	} 
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 8 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMdd&quot;);
	} 
	else dateString = hl7DateString;
	
	try {
		if (hl7Formatter) {
			isoDate = hl7Formatter.parse(hl7DateString);
			isoDate = isoFormatter.format(isoDate);
			dateString = new String(isoDate);
		}
	} catch (err) {
		dateString = hl7DateString;
	} finally {
		return dateString;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>95e528b7-1e7f-490e-86da-7c14b23ee4f3</id>
                <name>Convert ISO Date Format to HL7</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262912</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts ISO date format to HL7 v2 format - toHL7Date( isoDateString, timezone, debug )
*/

/*
	Author: IntegrateIT.us LLC
	toHL7Date: Returns an HL7-formatted date string with specified timezone offset

	Arguments
	---------
		Required
		--------
			isoDateString:		An ISO-formatted date string (ex: &quot;yyyy-MM-ddTHH:mm:ssZ&quot;

		Optional
		--------
			timezome:			A timezone identifier string corresponding to one of the java.util.TimeZone values (ex: &quot;US/Central&quot;)
*/

function toHL7Date( isoDateString, timezone, debug ) 
{
	var scriptName= &quot;toHL7Date&quot;;
	var hl7Date;
	var dateString;
	var isoFormatter;
	var hl7Formatter;

	// 2020-11-07T00:01:22+00:00
	var strTimeZone= &quot;GMT-8:00&quot;;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG:BEGIN isoDateString: &quot;+isoDateString+&quot;, timezone: &quot;+timezone+&quot;, strTimeZone: &quot;+strTimeZone); }

	// ISO Date Format: yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;
	if ( isoDateString != null &amp;&amp; isoDateString.length &lt;= 25 &amp;&amp; isoDateString.length &gt;= 22) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmssZ&quot;);
		if (timezone) {
			hl7Formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(strTimeZone));
		}
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG:UPDATE isoDateString: &quot;+isoDateString+&quot;, isoFormatter: &quot;+isoFormatter.toString()+&quot;, hl7Formatter: &quot;+hl7Formatter.toString()+&quot;, timezone: &quot;+timezone+&quot;, strTimeZone: &quot;+strTimeZone); }
	}
	// ISO Date Format: yyyy-MM-dd HH:mm:ss
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 19 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
	}
	// ISO Date Format: yyyy-MM-dd HH:mm
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 16 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);
	} 
	// ISO Date Format: yyyy-MM-dd
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 10 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMdd&quot;);	
	}
	// None of the above, return original date string.
	else dateString = isoDateString;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG:END isoDateString: &quot;+isoDateString+&quot;, isoFormatter: &quot;+isoFormatter.toString()+&quot;, hl7Formatter: &quot;+hl7Formatter.toString()+&quot;, timezone: &quot;+timezone+&quot;, strTimeZone: &quot;+strTimeZone); }

	try {
		if (isoFormatter) {
			hl7Date = isoFormatter.parse(isoDateString);
			hl7Date = hl7Formatter.format(hl7Date);
			dateString = new String(hl7Date);
		}
	} catch (err) {
		dateString = isoDateString;
	} finally {
		return dateString;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>41b1ac94-64c4-42ed-a501-a0caca7ae187</id>
                <name>convertMDYtoHL7DateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911263005</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	Convert MM-DD-YY HH:MM format to HL7 format
	
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function convertMDYtoHL7DateTime(eventDateTime, debug) {

	var scriptName= &apos;convertMDYtoHL7DateTime&apos;;
	if(typeof(debug) == &apos;undefined&apos;) { var debug= 0; }

	var lstEventDateTime= eventDateTime.toUpperCase().split(&quot; &quot;);
	var tEventDateTime= &quot;&quot;.concat(lstEventDateTime[0]).concat(&quot; &quot;).concat(lstEventDateTime[1]);

	var nEventDate= tEventDateTime.slice(6,8).concat(&quot;20&quot;).concat(tEventDateTime.slice(0,2)).concat(tEventDateTime.slice(3,5));
	var nEventTime= tEventDateTime.split(&quot; &quot;)[1];

	if(nEventTime.toString().indexOf(&quot;PM&quot;)&gt;-1) {
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG: eventTime contains PM: &quot; + nEventTime.toString().indexOf(&quot;PM&quot;)); }
		if(nEventTime.toString().length&lt;7) {
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG: eventTime length&lt;7 chars: &quot; + nEventTime.toString().length); } 
			var addLeadingZero= 12;
			var tHours= nEventTime.split(&quot;:&quot;)[0];
			var tMinutes= nEventTime.split(&quot;:&quot;)[1].replace(/[^0-9]/g, &quot;&quot;);
			var tHours= parseInt(addLeadingZero) + parseInt(tHours);
			var tEventTime= tHours.toString().concat(tMinutes.toString()).concat(&quot;00&quot;);
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG: new EventTime: &quot; + tEventTime.toString()); } 
		} else { 
			var tEventTime= nEventTime.toString().replace(/[^0-9]/g, &quot;&quot;) + &quot;00&quot;; 
		} 
	} else {
		var tEventTime= &quot;0&quot; + nEventTime.toString().replace(/[^0-9]/g, &quot;&quot;) + &quot;00&quot;; 
	}
	var nEventDateTime= nEventDate.toString().concat(tEventTime.toString());
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG datetime: &quot;+nEventDateTime); }

	return nEventDateTime;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>af95fd5e-8686-4b90-bd08-f11b4f5e78ee</id>
                <name>currentDate_yyyyMMddhhmmss</name>
                <revision>1</revision>
                <lastModified>
                  <time>1653055235571</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** currentDate_yyyyMMddhhmmss

  	- Desc: This function returns current DateTime only YYYYMMDDHHMMSS format

	@return {string} datetime - this string object contains the current DateTime only YYYYMMDDHHMMSS format
*/
function currentDate_yyyyMMddhhmmss() {
	var today = new Date();
	// set Date with leading zeros if needed
	var tMonth= today.getMonth()+1;
	if(tMonth.toString().length&lt;2) tMonth= &apos;0&apos;+tMonth;
	var tDay= today.getDate()
	if(tDay.toString().length&lt;2) tDay= &apos;0&apos;+tDay;
	var date = today.getFullYear()+&apos;&apos;+tMonth+&apos;&apos;+tDay;
	
	// set Time with leading zeros if needed
	var tHour= today.getHours();
	if(tHour.toString().length&lt;2) tHour= &apos;0&apos;+tHour;
	var tMinute= today.getMinutes();
	if(tMinute.toString().length&lt;2) tMinute= &apos;0&apos;+tMinute;
	var tSecond= today.getSeconds();
	if(tSecond.toString().length&lt;2) tSecond= &apos;0&apos;+tSecond;
	
	var time = tHour+&apos;&apos;+tMinute+&apos;&apos;+tSecond;
	var dateTime = date+&apos;&apos;+time;

	return dateTime;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>59ebad58-f839-4429-b9fb-175fb5a4d5ec</id>
                <name>getChannelId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262975</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	getChannelId(nameOfChannel) function
	DESC: This function takes the string nameOfChannel Object as a parameter and returns the string channelId

	PARAMETERS:
	@param	{string} - pass the string object of the channelName
	@return 	{string} - return the channelId

	MODIFIED:	

 	USAGE:								
	E.G 
	var arrElementObjects= setXMLElementsArrayWithDescendants(xmlElement, debug);
	
*/

function getChannelId(nameOfChannel){ 
    if (nameOfChannel === undefined || nameOfChannel.length == 0) return &quot;&quot;; 
     
    var listIDs = ChannelUtil.getChannelIds(); 
    if (listIDs.isEmpty()) return &quot;&quot;; 
     
    var nameFromList; 
    for (var i = 0; i &lt; listIDs.size();i++){ 
        nameFromList = ChannelUtil.getChannelName(listIDs.get(i)); 
        if(nameFromList == nameOfChannel) return listIDs.get(i); 
    } 
    return &quot;&quot;; 
}  </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>887718d9-8250-4b4e-9b81-4a02cc1bef45</id>
                <name>getHL7v2ACK</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262563</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	setHL7v2ACK(msg) - DEVELOPMENT
	
	- Desc: This function set and returns HL7v2 HAPI Acknowledgement (ACK) message based on evaluating conditions

	@param 
	sourceMsg {string} - source message
	responseCode {string} - Mirth Connect processing responseCode
	responseMsg {string} - response MSA message
	responseStatus {string} - Mirth Connect processing responseStatus
	
	@return {XML} - this returns the HL7 HAPI Ack message
*/
function setHL7v2ACK(sourceMsg,responseCode,responseMsg,responseStatus) {

	var scriptName= &apos;getHL7v2ACK&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG msg.MSH: &apos;+JSON.stringify(msg[&apos;MSH&apos;].toString())); }
	
	importPackage(com.mirth.connect.model);
	// responseStatus is an optional parameter
	if (!responseStatus)
		responseStatus = {&apos;AA&apos;:Response.Status.SUCCESS,&apos;AR&apos;:Response.Status.FILTERED,&apos;AE&apos;:Response.Status.FAILURE}[responseCode] || Response.Status.UNKNOWN;
	var ack = &lt;HL7Message/&gt;;
	
	ack.MSH[&apos;MSH.1&apos;] = sourceMsg.MSH[&apos;MSH.1&apos;].toString();
	ack.MSH[&apos;MSH.2&apos;] = sourceMsg.MSH[&apos;MSH.2&apos;].toString();
	ack.MSH[&apos;MSH.3&apos;] = sourceMsg.MSH[&apos;MSH.5&apos;].copy();
	ack.MSH[&apos;MSH.4&apos;] = sourceMsg.MSH[&apos;MSH.6&apos;].copy();
	ack.MSH[&apos;MSH.5&apos;] = sourceMsg.MSH[&apos;MSH.3&apos;].copy();
	ack.MSH[&apos;MSH.6&apos;] = sourceMsg.MSH[&apos;MSH.4&apos;].copy();
	ack.MSH[&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = DateUtil.getCurrentDate(&apos;yyyyMMddHHmmss&apos;);
	ack.MSH[&apos;MSH.9&apos;][&apos;MSH.9.1&apos;] = sourceMsg.MSH[&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString();
	ack.MSH[&apos;MSH.9&apos;][&apos;MSH.9.2&apos;] = sourceMsg.MSH[&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();
	ack.MSH[&apos;MSH.9&apos;][&apos;MSH.9.3&apos;] = &apos;ACK&apos;;
	ack.MSH[&apos;MSH.10&apos;] = sourceMsg.MSH[&apos;MSH.10&apos;].copy();
	ack.MSH[&apos;MSH.11&apos;] = sourceMsg.MSH[&apos;MSH.11&apos;].copy();
	ack.MSH[&apos;MSH.12&apos;] = sourceMsg.MSH[&apos;MSH.12&apos;].copy();
	ack.MSA[&apos;MSA.1&apos;][&apos;MSA.1.1&apos;] = responseCode;
	ack.MSA[&apos;MSA.2&apos;][&apos;MSA.2.1&apos;] = sourceMsg.MSH[&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
	ack.MSA[&apos;MSA.3&apos;][&apos;MSA.3.1&apos;] = responseMsg;
	
	responseMap.put(&apos;ACK&apos;,new Response(responseStatus,SerializerFactory.getHL7Serializer().fromXML(ack)));

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>9d1a5389-8d5f-4f98-923a-6e5570b4bdc3</id>
                <name>jsonNulltoEmptyString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262944</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts JSON Null Object values to empty string
*/

/*
	Author: IntegrateIT.us LLC
	toHL7Date: Returns an empty string

	Arguments
	---------
		Required
		--------
			JSON element:		A JSON element (e.g. &quot;MiddleName&quot;:null )

*/

function jsonNulltoEmptyString( strElement, jsonElement, debug ) 
{

	var scriptName= &quot;jsonNulltoEmptyString&quot;;
	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG jsonElement IN key:&quot;+strElement+&quot; value: &quot;+jsonElement); 
		logger.info(scriptName+&quot;::DEBUG typeof jsonElement IN: &quot;+typeof(jsonElement));
	}
	// try {
		if (typeof(jsonElement) !== &apos;undefined&apos;) {
			if (typeof(jsonElement) !== &apos;string&apos;) {
				if (typeof(jsonElement) == &apos;object&apos;) {
					var jsonElement= &quot;&quot;;
				} 
			} else {
				if (jsonElement.toString()== null) {
					var jsonElement= jsonElement.replace(null,&quot;&quot;);
				}
			}	
		} else {
			var jsonElement= &quot;&quot;;
		}
	/*
	} catch (err) {
		return jsonElement
	} finally {
		return newJsonElement;
	}
	*/
	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG jsonElement OUT key:&quot;+strElement+&quot; value: &quot;+jsonElement); 
		logger.info(scriptName+&quot;::DEBUG typeof jsonElement OUT: &quot;+typeof(jsonElement));
		logger.info(&quot;&quot;);
	}
	return jsonElement;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a53342c5-cb0d-47b5-b156-cd559fbd40ac</id>
                <name>random_date_after_date</name>
                <revision>7</revision>
                <lastModified>
                  <time>1658169955060</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function will produce a random date based on a provided date and number of days argument.

	@param {String} start - enter the starting date (&apos;YYYY&apos;, &apos;MM&apos;, &apos;DD&apos;) (e.g. &apos;2021&apos;, &apos;09&apos;, &apos;13&apos;)
	@param {String} days -  number of days (positive or negative) (e.g. 365, 3000, -365)
	@return {String} return description
*/
function random_date_after_date(start, days) {
	
	// randomDateAfterDate(new Date(2021, 4, 5), -365) 
	var scriptName= &apos;random_date_after_date&apos;;
	var debug= 1;
	
	// if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; start= &apos;+start+&apos; number of days: &apos;+days);
	// }
	
	var strRandom= Math.random()*days*10000;
	var strStringRandom= strRandom.toString();
	var strRandom= strStringRandom.substring(0,4);
	
	var newDate= new Date(start.getTime() + strRandom);
	// Fri Jun 26 2020 08:59:35 GMT-0600 (GMT-06:00)
	var strDate= newDate.getFullYear() + &quot;&quot; + addLeadingZeros(newDate.getMonth() + 1) + &quot;&quot; + addLeadingZeros(newDate.getDate());
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; random date generated: &apos;+strDate);
	}

	return strDate;
}

function addLeadingZeros(n) {
  
  if (n &lt;= 9) {
    return &quot;0&quot; + n;
  }
  
  return n;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b527f706-5c50-4f44-bee5-d16dd9edd8f0</id>
                <name>random_generator</name>
                <revision>3</revision>
                <lastModified>
                  <time>1653591827816</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function will produce a random number based on the number of characters provided into the numOfChars argument.

	@param {String} numOfChars - enter the number of random characters to be returned
	@return {String} return description
*/
function random_generator(numOfChars) {
	var scriptName= &apos;random_generator&apos;;
	var debug= 0;
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; evaluate number of characters: &apos;+numOfChars);
	}
	
	var strNumOfChars= &apos;&apos;+numOfChars+&apos;&apos;;
	var cntNumOfChars= strNumOfChars.padEnd(numOfChars,0);
	var strRandom= (Math.random()*cntNumOfChars).toFixed();
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; random number generated: &apos;+strRandom);
	}
	
	return strRandom;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fefafe84-cb17-415b-b96e-ff00063c267a</id>
                <name>sendHttpsPostClientCert</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262729</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	sendHttpsPostClientCert(state, url, certificatePath, certificatePassword) - Returns custom HTTP response
	
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} state - arg1 description
	@param {String} url - arg2 description
	@param {String} certificatePath - arg3 description
	@param {String} certificatePasswordte - arg4 description
	@return {String} return description
*/
function sendHttpsPostClientCert(state, url, certificatePath, certificatePassword) {
	// write code here.

	var scriptName= &quot;sendHttpsPostClientCert&quot;;
	var messageBody = messageObject.getEncodedData();
	var httpsSender = new Packages.com.xti.util.HTTPSSender(certificatePath, certificatePassword);

	// Set all the necessary parameters...
	httpsSender.setURL(url);
	httpsSender.setMessageBody(messageBody);

	logger.info(scriptName+&quot;::DEBUG Sending message to &quot; + url + &quot; - &quot; + messageBody);

	// Send the message to the URL...
	try {
		httpsSender.send();
		var retString = httpsSender.getReturnValue();
		retString = retString.substr(0, retString.indexOf(&quot;MSA&quot;)) + &quot;\r&quot; + retString.substr(retString.indexOf(&quot;MSA&quot;));
		var responseMessage = new Packages.com.mirth.connect.model.converters.SerializerFactory.getHL7Serializer().toXML(retString);
		channelMap.put(&apos;responseMessage&apos;,responseMessage);

		if (responseMessage[&apos;MSA&apos;][&apos;MSA.1&apos;][&apos;MSA.1.1&apos;].toString() == &apos;AA&apos;) {
			logger.info(scriptName+&quot;::DEBUG HTTPS send success. Return value= &quot; + retString);
		} else {
			logger.info(scriptName+&quot;::DEBUG HTTPS send failure. Return value= &quot; + retString);
			throw(&quot;HTTPS send failure. Return value=&quot; + retString);
		}
	} catch (e) {
		logger.info(scriptName+&quot;::DEBUG Error message= &quot; + e.message);
		throw(e.message);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>37fab7a4-d254-46f6-925b-1c4bd8bacc48</id>
                <name>set24Hrs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911263134</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	set24Hrs - Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function set24Hrs(d){

  if (d.slice(-2) === &quot;PM&quot;){
      var hrs = parseInt(d.slice(-7,-5))
      var mins = d.slice(-4,-2)
      hrs = hrs + 12
      var dd = d.slice(0,9) + &quot; &quot; + hrs + &quot;:&quot; + mins;
      return dd;
  } else if(d.slice(-2) === &quot;AM&quot;){
      return (d.slice(0, 16));
  } else {
      throw (&quot;UNRECOGNIZED_FORMAT&quot;,&quot;set24Hrs() Received Unrecognized Formatted String&quot;);
  }
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
            <name>WebPT-Common</name>
            <revision>2</revision>
            <lastModified>
              <time>1678715257049</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
                <name>Check if String contains</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122790</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
                <name>Check if String contains HTTP code</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122593</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8515e088-5c50-47ee-9e2f-9fad1ecf48bd</id>
                <name>Check if String is JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123309</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Added by Kirby Knight
	12/21/2020
	Test for JSON

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5f2f84ba-3e66-4be3-8260-8fbd8258bd92</id>
                <name>Check if the PDF is valid</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122055</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
//This function is used for checking the word &quot;PDF&quot; in inbound attachment.
function isValidBase64PDF(base64) {
	const ENCODED_PDF_SIGN = &quot;JVBERi&quot;; // %PDF sign
	const PDF_EOF = &quot;JSVFT0YNCg&quot;; // %EOF
	var pdfBase64Size = (base64.length() * (3 / 4)) - 1;
	
	return (base64.indexOf(ENCODED_PDF_SIGN) != -1 &amp;&amp; base64.indexOf(PDF_EOF) != -1 &amp;&amp; pdf_base64_size &gt; 36);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
                <name>Convert JSON date to HL7v2 date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122137</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
                <name>Convert JSON datetime to HL7v2 datetime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122430</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>bb21449a-df39-48c6-be52-24106c8df4c4</id>
                <name>Destination Formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Kirby Knight 03/10/2021
	
	This function will remove all other ROOT.Meta.Destinations nodes that are not passed in the
	destination variable and removes the ROOT.Meta.Destinations[x].Destination node

	@param {Any} destination - 
	@return {String} return description
*/
function formatDestinations(destination) {
var arrDestinations = msg[&apos;Meta&apos;][&apos;Destinations&apos;];
	//  Start at the end of the array because of the posibility of deleted array items 
	for (var i = arrDestinations.length - 1; i &gt;= 0; i--) {
		if (arrDestinations[i][&apos;Destination&apos;] == destination){
			delete arrDestinations[i][&apos;Destination&apos;]
		}else if (arrDestinations[i][&apos;Destination&apos;] != destination){
			arrDestinations.splice(i, 1);
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
                <name>Extract JSON node data</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121748</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7ed44f8a-fa40-4f3e-9426-3021604eabe0</id>
                <name>Get Feature Value by Name and Database</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123262</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns a string containing the feature value (system property) for a specific client database.

	@param {String} featureName - name of the feature, ie: &quot;BetterPTBidirectionalScheduling&quot;
	@param {String} databaseIdentifier - database name or databaseID / TenantID
	@param {String} databaseIdentifierType - what value is provided in databaseIdentifier. current options include &quot;ID&quot; or &quot;NAME&quot;
	@return {String} returns feature value
*/
function getFeatureValueByNameDatabase(featureName, databaseIdentifier, databaseIdentifierType) {
	var paramList = new Packages.java.util.ArrayList();
	paramList.add(featureName);
	paramList.add(databaseIdentifier);
	paramList.add(databaseIdentifierType);
	
	var sSQL = &apos;EXEC [dbo].[pr_FeatureValueByNameDatabase] ?, ?, ?&apos;;
	
	try {
		var result = executeSharedDBStatementFhirCh(sSQL, true, paramList);
		var featureValue ;
		if(result.next()){			//Added
		 featureValue = result.getString(1);
		}
		return featureValue;
	} catch (e) {
		logger.error(e);
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>9842be2c-c633-42ac-87f1-f91aca9e370f</id>
                <name>JSON Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121776</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function populates the MR and PI patient IDS to channelMap

	@return {String} return description
*/
function jsonPatientIds() {
	for each (patId in msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) {
	if (patId[&apos;IDType&apos;].toString() == &apos;MR&apos;){
		channelMap.put(&apos;extPatId&apos;, patId[&apos;ID&apos;].toString());
	}else if(patId[&apos;IDType&apos;].toString() == &apos;PI&apos;){
		channelMap.put(&apos;patId&apos;, patId[&apos;ID&apos;].toString());
	}
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
                <name>Verify JSON node for existance</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>394664c0-d536-4310-970e-181dc03ee7da</id>
            <name>WebPT-Conversions</name>
            <revision>2</revision>
            <lastModified>
              <time>1690140133427</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
                <name>Convert FHIR codes to HL7v2 codes</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122899</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>2fc8cbf3-0d92-4d1d-a3d6-136c09bd9f2a</id>
            <name>WebPT-Custom Database Functions</name>
            <revision>4</revision>
            <lastModified>
              <time>1690570753962</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>23c0b510-63e4-40fa-a4e1-7b2b92ce9a96</id>
                <name>Execute Statement Shared DB Conn clientDb Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122401</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Executes a SQL statement using a shared database connection stored in the Global Map. If the
connection does not exist, creates it.

@param {String} statement - The SQL statement to execute
@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
@param {List} paramList - A Java List object containing the parameters for the statement (optional)
 */
function executeSharedDBStatementclientDbCh(statement, isQuery, paramList) {
    var result;

    try {
        var dbConnclientDbCh = globalChannelMap.get(&quot;dbConnclientDbCh&quot;);

        if (dbConnclientDbCh == null || dbConnclientDbCh.getConnection().isClosed()) {
            dbConnclientDbCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;), $(&apos;dbClient&apos;), $(&apos;dbUserFhir&apos;), $(&apos;dbPwFhir&apos;));
            globalChannelMap.put(&quot;dbConnclientDbCh&quot;, dbConnclientDbCh);
        }

        if (paramList == undefined) {
            paramList = new Packages.java.util.ArrayList();
        }

        if (isQuery) {
            result = dbConnclientDbCh.executeCachedQuery(statement, paramList);
        } else {
            result = dbConnclientDbCh.executeUpdate(statement, paramList);
        }
    } catch (e) {
        logger.error(e);
    }
    finally {
        return result;
    }
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4efb3110-a83f-48b5-93ad-79c847b51865</id>
                <name>Execute Statement Shared DB Conn clntAcl Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123455</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClntAclCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnClntAclCh = globalChannelMap.get(&quot;dbConnClntAclCh&quot;);

		if (dbConnClntAclCh == null || dbConnClntAclCh.getConnection().isClosed())
		{
			dbConnClntAclCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbClntAcl&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnClntAclCh&quot;, dbConnClntAclCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnClntAclCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnClntAclCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>d96d45dd-57f7-4aa9-9bf4-e464d31b94c6</id>
                <name>Execute Statement Shared DB Conn FHIR</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121922</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhir(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhir.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhir.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6014068e-c021-4a38-9fa6-6f38f6a2cdab</id>
                <name>Execute Statement Shared DB Conn FHIR Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123492</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhirCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhirCh = globalChannelMap.get(&quot;dbConnFhirCh&quot;);

		if (dbConnFhirCh == null || dbConnFhirCh.getConnection().isClosed())
		{
			dbConnFhirCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnFhirCh&quot;, dbConnFhirCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhirCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhirCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fbd5c4a1-b816-4496-acdf-067005f1d376</id>
                <name>Execute Statement Shared DB Conn Translations Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123008</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementTranslationsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnTranslationsCh = globalChannelMap.get(&quot;dbConnTranslationsCh&quot;);

		if (dbConnTranslationsCh == null || dbConnTranslationsCh.getConnection().isClosed())
		{
			dbConnTranslationsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlTranslations&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnTranslationsCh&quot;, dbConnTranslationsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnTranslationsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnTranslationsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5d1a5577-4ba4-4d1e-b6cd-e2d924164909</id>
                <name>Execute Statement with Shared DB Conn ODS Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122280</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdsCh = globalChannelMap.get(&quot;dbConnOdsCh&quot;);

		if (dbConnOdsCh == null || dbConnOdsCh.getConnection().isClosed())
		{
			dbConnOdsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOds&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdsCh&quot;, dbConnOdsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>3991db14-0c0b-4123-952c-5164c1ded501</id>
                <name>Execute Statement with Shared DB Conn ODW Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122960</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.  THis connects to the ODW db in Azure

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdwCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdwCh = globalChannelMap.get(&quot;dbConnOdwCh&quot;);

		if (dbConnOdwCh == null || dbConnOdwCh.getConnection().isClosed())
		{
			dbConnOdwCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOdw&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdwCh&quot;, dbConnOdwCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdwCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdwCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fae08c88-7550-479a-b8ed-ffef47e8eed9</id>
                <name>executeSharedDBStatementClient</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121956</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClient(statement, isQuery, paramList, dbname)
{
	var result;
 	var dburl= &apos;jdbc:sqlserver://AZW1DEV-SQL02.clinicient.com:1433;databaseName=&apos;+dbname+&apos;&apos;;
	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),dburl,$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			
			//globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		result = dbConnFhir.executeCachedQuery(statement);
	
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>ed20a457-5beb-4aea-9bb9-cf91112ccc56</id>
            <name>WebPT-Default Functions</name>
            <revision>10</revision>
            <lastModified>
              <time>1690140133487</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>a8a9a0c8-9322-46dc-bef8-011eb3d70291</id>
                <name>Create Header for CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121678</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This creates a header for csv files based on the contents of the header variable.  The header
	variable is populated in the channel from the outbound msg template

	@return {String} return description
*/
function createHeader() {
	//Destination transformer.  this creates the header for each new file

	var path = java.nio.file.Paths.get($(&apos;filePath&apos;)+$(&apos;fileName&apos;));
	var bytes = (new java.lang.String($(&apos;header&apos;))).getBytes(&quot;UTF-8&quot;);
	try {
	  java.nio.file.Files.write(path, bytes, java.nio.file.StandardOpenOption.CREATE_NEW);
	}
	catch (e) {
	  //logger.info(&quot; should throw IOException if file already exists&quot;);
	
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5a886a1f-dab1-41b5-94c6-1a639907d7da</id>
                <name>Filter Message Evaluate Received Checksum</name>
                <revision>33</revision>
                <lastModified>
                  <time>1678916806664</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating a checksum for each provided message.  We save off the most recent 100 unique checksum values in a global 
	array so if the current message has been recently received we are able to ignore it.
	
	@author:  	Jeffrey Ritz
	@scriptName: 	filterEvaluateReceivedChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {boolean} filter - return filter boolean (true= filter msg, false= do not filter msg)
		persist received_checksum global ChannelMap array
		persist filterMessage ChannelMap variable
	@history
*/
function filterEvaluateReceivedChecksum(msg) {	

	var scriptName= &apos;filterEvaluateReceivedChecksum&apos;
	var filter = false;
	var received_len_limit = 999;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B connectorMessage.getRawData() typeof: &apos;+typeof(connectorMessage.getRawData())+&apos; msg: &apos;+connectorMessage.getRawData());
	} // end if 
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	// var dataBytes = new java.lang.String(connectorMessage.getRawData()).getBytes(&apos;UTF-8&apos;);
	// message = new String(message.getBytes(&quot;utf-8&quot;), &quot;utf-8&quot;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	// var dataBytes = new java.lang.String(msg.getBytes(&apos;UTF-8&apos;));
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);

	// var messageObjectgetBytes= checksum.update(connectorMessage.getRawData().getBytes());
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 
	
	$c(&apos;checksum&apos;, checksum.getValue());
	
	//grab the global channel map variable holding the last X unique checksums that we&apos;ve received
	var received = $gc(&apos;received_checksums&apos;);
	
	if (received == undefined) {
		var received = new Array();
		received.push(checksum.getValue());
	} else {
		//check if we&apos;ve recently received this message, skip it if so
		if (received.indexOf(checksum.getValue()) &gt; -1) {
			filter = true;
		//we haven&apos;t seen it recently, so remember it and allow it through
		} else {
			var received_len = received.length;
			if (received_len &gt; received_len_limit) {
				//remove oldest/first entry, shift all entries forward, and add new entry to end
				received.shift();
				received[received_len_limit] = checksum.getValue();
			} else {
				//add new entry to end of array
				received[received_len] = checksum.getValue();
			} // end if 
		} // end if 
	} // end if 

	 //debug code
	/*for (x=0; x&lt;=received_len_limit; x++) {
		$c(&apos;received-&apos;+x, received[x]);
	} */

	$c(&apos;filterMessage&apos;,filter);
	$gc(&apos;received_checksums&apos;,received);

	return filter;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fbd0484d-74a2-48e4-aedd-f97c2fcefa16</id>
                <name>Get Message Checksum</name>
                <revision>12</revision>
                <lastModified>
                  <time>1678916806703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating and reutrning a checksum for each provided message
	
	@author:  	Jeffrey Ritz
	@scriptName: 	getMessageChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {object} result - return checksum value
	@history
	2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() to remove the exponential representation of the number value
*/
function getMessageChecksum(msg) {	

	var scriptName= &apos;getMessageChecksum&apos;;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	} // end if 
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 

	var checksumValue= checksum.getValue();
	// 2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() 
	var arrChecksumValue= new Array(); 
	arrChecksumValue.push(checksumValue);
	$c(&apos;checksum&apos;, arrChecksumValue);

	return checksumValue;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>91db9bd1-ca92-4dcc-bba4-e1ece603fc87</id>
                <name>Remove Child Object From Parent Object Json</name>
                <revision>22</revision>
                <lastModified>
                  <time>1678916845037</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON child object and it&apos;s descendents from a parent object JSON
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeChildObjectFromParentObjectJson.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
		{string} parentObject - place the name of the string to be designated as the parent object in the JSON
		{string} childObject  - place the name of the string to be designated as the child object to be deleted from the JSON
	@param {object} msg - return modified Json object msg excluding specified Json child object
	@history
*/
function removeChildObjectFromParentObjectJson(msg, parentObject, childObject) {
	
	var scriptName= &apos;removeChildObjectFromParentObjectJson&apos;;
	var debug= 0;

	//var strObjJson= JSON.parse(msg);
	var strObjJson= JSON.stringify(msg);
	
	//var objJson= JSON.parse(msg);
	var newParentObjects= new Object();
	var parentObjects= msg;
	var arrParentObjects= new Array();
	var arrTransactionObjects= new Array();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof parentObjects: &apos;+typeof(parentObjects));
	for (var key in parentObjects) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof key: &apos;+typeof(key)+&apos; key: &apos;+key);
		if(key== parentObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof objJson[key]: &apos;+typeof(parentObjects[key])+&apos; parentObjects[key]: &apos;+JSON.stringify(parentObjects[key]));
			
			var newChildObjects= new Object();
			var childObjects= parentObjects[key];
			var arrChildObjects= new Array();
			
			for(var key2 in childObjects) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key2: &apos;+typeof(key2)+&apos; key2: &apos;+key2+&apos; childObject: &apos;+childObject);
				for(var key3 in childObjects[key2]) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key3: &apos;+typeof(key3)+&apos; key3: &apos;+key3+&apos; childObject: &apos;+childObject);
					if(key3== childObject) {
						var transactionObject= new Object();
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; childObject typeof: &apos;+typeof(childObjects[key2][key3])+&apos; childObject: &apos;+JSON.stringify(childObjects[key2][key3]));
						transactionObject.key= key3;
						transactionObject.value= childObjects[key2][key3];
						delete childObjects[key2][key3];
						if(debug&gt;0) logger.info(&apos;DEBUG::&apos;+scriptName+&apos; DELETE childObject: &apos;+key3+&apos; of parentObject: &apos;+JSON.stringify(childObjects[key2]));
						arrTransactionObjects.push(transactionObject);
					} // end if
				} // end for 
				arrChildObjects.push(childObjects[key2]);
			} // end for
			newParentObjects[key]= arrChildObjects;
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add all child keys: &apos;+JSON.stringify(arrChildObjects)+&apos; into ParentObject[&apos;+key+&apos;]: &apos;+newParentObjects[key]);
		} else {
			newParentObjects[key]= parentObjects[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+parentObjects[key]+&apos; string: &apos;+JSON.stringify(parentObjects[key]));
		} // end if
		arrParentObjects.push(newParentObjects);
	} // end for 
	var newMsg= arrParentObjects;
	channelMap.put(&apos;removeChildObjectMsg&apos;,newMsg);
	channelMap.put(&apos;removedChildTransIds&apos;,arrTransactionObjects);
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));
	return newMsg;
	
} </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2ff28338-dfb6-445d-a04e-c74b5486a08c</id>
                <name>Remove Object From Json</name>
                <revision>24</revision>
                <lastModified>
                  <time>1678915278542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON object and it&apos;s descendents from the msg
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeObjectFromJson.js
	@created: 	2023-03-09
	@param {string} msg - Inbound connectorMessage.getRawData()
	@param {string} msg - return modified msg excluding specified Json object from msg
	@history
	2023-03-15 JER - Modified to include removeObject function parameter to specify specific JSON object by referencing key to be removed
*/
function removeObjectFromJson(msg, removeObject) {
	
	var scriptName= &apos;removeObjectFromJson&apos;;
	var debug= 0;
	//var objJson= JSON.stringify(msg);
	var objJson= JSON.parse(msg);
	var newObjJson= new Object();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof objJson: &apos;+typeof(objJson)+&apos; objJSON: &apos;+JSON.stringify(objJson));
	for (var key in objJson) {
		if(key== removeObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; DELETE key: &apos;+key);
			// delete objJson[key];
		} else {
			newObjJson[key]= objJson[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+objJson[key]+&apos; string: &apos;+JSON.stringify(objJson[key]));
		} // end if 
	} // end for 
	var newMsg= newObjJson;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));

	// return JSON.stringify(newMsg);
	return newMsg;
} 
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>993a6fd8-454a-4133-ba32-dbcfea71582b</id>
                <name>Update EDITransactionLog</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123233</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	The purpose of this function is to update the status in Insight.
	Populate the channel map with the following variables functionalGroupControlNumber, status, eventDate

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateStatus () {

	//  Build the llst of paramters to pass to the database
	var paramList = new Packages.java.util.ArrayList();
	paramList.add($(&apos;functionalGroupControlNumber&apos;));
	paramList.add($(&apos;eventDate&apos;));  //dateTime in the acknoledged field in this format (&quot;2017-07-31 14:15:01.577&quot;)
	paramList.add(new java.lang.Integer(parseInt($(&apos;status&apos;), 10)));
	
//	logger.info(&quot;updateStatus &quot;+paramList);

	//  SQL Statement and paramters that will be sent to SQL
	var statement = &quot;EXEC dbo.pr_EDITransactionLog_Update ?, ?, ?&quot;;
	//  Code template used for establishiing connection and passing the sql statement and parameter list  
	var result = executeSharedDBStatementFhirCh(statement, false, paramList);
	return result;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>42cb290e-5fb0-46b8-82db-576ea1e1ba0d</id>
                <name>Update EDITransactionLog from responseStatus in the response transformer </name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123356</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Call this in the response transformer on the destination.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateReponseStatus() {
	var status = 0;
	if (responseStatus == SENT){
		var status = 1;
		channelMap.put(&apos;status&apos;,status);
	}

updateStatus()
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2223579b-f914-4be7-a575-f1a2a2aa1ae2</id>
                <name>ValidateToString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123044</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} mapping - 
	@param {Any} defaultValue - 
	@param {Any} replacement - 
	@return {String} return description
*/
function validateToString(mapping, defaultValue, replacement) {
    if (mapping == null) {
        mapping = &apos;&apos;;
    }
    return validate(mapping, defaultValue, replacement).toString() + &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>8c9a8268-4ef0-43e9-ae5b-bf8895f0b80c</id>
            <name>WebPT-FORMAT</name>
            <revision>3</revision>
            <lastModified>
              <time>1691001755225</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>Include any functions or codes with 
-date &amp; time formating related
-data type formatting</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>920c9ead-70a6-4168-9d95-89261b73ae44</id>
                <name>12digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123520</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Take any 12 digit string yyyyMMddHHmm and change to MM/dd/yyyy HH:mm 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm
*/
function yyyyMMddHHmm(string) {
	return DateUtil.convertDate(&quot;yyyyMMddHHmm&quot;, &quot;MM/dd/yyyy HH:mm&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fe2689ec-1946-46d5-8dd6-8fbbf106e1e6</id>
                <name>14digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122871</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Take 14 digit string yyyyMMddHHmmss and change to MM/dd/yyyy HH:mm:ss 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm:ss
*/
function yyyyMMddHHmmss(string) {
	if (string.length == 14) {
		  return DateUtil.convertDate(&quot;yyyyMMddHHmmss&quot;, &quot;MM/dd/yyyy HH:mm:ss&quot;, string);
	}
	else {
		return &quot;unregcognized string&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b9db35e2-d5bd-48a1-8cc6-3475c698d7b4</id>
                <name>currentDT_yyyy-MM-dd HH:mm:ss.SSS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123114</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Kirby Knight
	Date Modified:  11/09/2020
	Retund the current date/time down to the millisecond

	@return {String} return description
*/
function currentDtToMilliseconds() {
	return DateUtil.getCurrentDate(&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7e747999-4bec-43fc-978d-7049d3543cf0</id>
                <name>fixHL7NodeOrder</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/

function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>dfedacf6-773b-413e-b78d-1bf16a92071d</id>
                <name>formatHL7Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121643</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Take any eight digit HL7 message data string (yyyyMMdd) and formats it human-readable format (MM/dd/yyyy)
	such as 20090612 -&gt; 06/12/2009

	@param {String} arg1 - 8 digit HL7 message data string yyyyMMdd
	@return {String} return date format as MM/dd/yyyy
*/
function formatHL7Date(string) {
	return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;MM/dd/yyyy&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a8f54921-2cb6-4134-8806-3c4e10a757d9</id>
                <name>getCurrentLocalTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122014</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = getCurrentLocalTimestamp();

	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestamp() {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(&quot;EST&quot;)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6c5f1bd8-ebbf-4c8e-b465-0be8ccaba0d0</id>
                <name>getCurrentLocalTimeToMs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123077</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	Gets the current local date/time to the milliseconds
	Converts to the timezone that is passed in Examples (America/New_York, America/Chicago, America/Phoenix )

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestampToMs(timeZone) {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timeZone)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>78d74c5b-c881-404a-ad96-4e909e1a19f3</id>
                <name>phoneToE164</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121982</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Insight phone number to E164 format 5554446666 to +15554446666

	@param {Any} phoneIn - 
	@return {String} return description
*/
function phoneToE164(phoneIn) {
	logger.info(&apos;L1 &apos;+phoneIn);
	if(phoneIn != null ){
	//phoneIn = &apos;+1&apos; + phoneIn.toString(); 
	logger.info(&apos;L2 &apos;+phoneIn);
	return &apos;+1&apos; + phoneIn.toString(); 
	} else{
		return null;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>6a32d94d-408c-4e10-9799-e45e150b5c1f</id>
            <name>WebPT-MISC</name>
            <revision>3</revision>
            <lastModified>
              <time>1690987207668</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>miscellaneous javascript</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>84b4f1c7-f82d-4140-9fbd-98a95f68ff32</id>
                <name>getChannelState</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122648</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetChannelState(channel_id) {

    var channel_status = &quot;NA&quot;;

    var channel_count = parseInt(Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().size());

    for(var i=0;i&lt;channel_count;i++) {
        if (channel_id == Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getChannelId()) {
            channel_status = Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getState();
        }
    }

    return channel_status;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>715435a9-cb15-4e8f-bc5b-4249eaea6e17</id>
                <name>momentjs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122487</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Testing MIRTH-3794 using external JavaScript library &quot;moment.js&quot;
*/
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=b():&quot;function&quot;==typeof define&amp;&amp;define.amd?define(b):a.moment=b()}(this,function(){&quot;use strict&quot;;function a(){return Hc.apply(null,arguments)}function b(a){Hc=a}function c(a){return&quot;[object Array]&quot;===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||&quot;[object Date]&quot;===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c&lt;a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&amp;&amp;(a[c]=b[c]);return f(b,&quot;toString&quot;)&amp;&amp;(a.toString=b.toString),f(b,&quot;valueOf&quot;)&amp;&amp;(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ca(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&amp;&amp;(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow&lt;0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&amp;&amp;(a._isValid=a._isValid&amp;&amp;0===b.charsLeftOver&amp;&amp;0===b.unusedTokens.length&amp;&amp;void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if(&quot;undefined&quot;!=typeof b._isAMomentObject&amp;&amp;(a._isAMomentObject=b._isAMomentObject),&quot;undefined&quot;!=typeof b._i&amp;&amp;(a._i=b._i),&quot;undefined&quot;!=typeof b._f&amp;&amp;(a._f=b._f),&quot;undefined&quot;!=typeof b._l&amp;&amp;(a._l=b._l),&quot;undefined&quot;!=typeof b._strict&amp;&amp;(a._strict=b._strict),&quot;undefined&quot;!=typeof b._tzm&amp;&amp;(a._tzm=b._tzm),&quot;undefined&quot;!=typeof b._isUTC&amp;&amp;(a._isUTC=b._isUTC),&quot;undefined&quot;!=typeof b._offset&amp;&amp;(a._offset=b._offset),&quot;undefined&quot;!=typeof b._pf&amp;&amp;(a._pf=j(b)),&quot;undefined&quot;!=typeof b._locale&amp;&amp;(a._locale=b._locale),Jc.length&gt;0)for(c in Jc)d=Jc[c],e=b[d],&quot;undefined&quot;!=typeof e&amp;&amp;(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),Kc===!1&amp;&amp;(Kc=!0,a.updateOffset(this),Kc=!1)}function o(a){return a instanceof n||null!=a&amp;&amp;null!=a._isAMomentObject}function p(a){return 0&gt;a?Math.ceil(a):Math.floor(a)}function q(a){var b=+a,c=0;return 0!==b&amp;&amp;isFinite(b)&amp;&amp;(c=p(b)),c}function r(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e&gt;d;d++)(c&amp;&amp;a[d]!==b[d]||!c&amp;&amp;q(a[d])!==q(b[d]))&amp;&amp;g++;return g+f}function s(){}function t(a){return a?a.toLowerCase().replace(&quot;_&quot;,&quot;-&quot;):a}function u(a){for(var b,c,d,e,f=0;f&lt;a.length;){for(e=t(a[f]).split(&quot;-&quot;),b=e.length,c=t(a[f+1]),c=c?c.split(&quot;-&quot;):null;b&gt;0;){if(d=v(e.slice(0,b).join(&quot;-&quot;)))return d;if(c&amp;&amp;c.length&gt;=b&amp;&amp;r(e,c,!0)&gt;=b-1)break;b--}f++}return null}function v(a){var b=null;if(!Lc[a]&amp;&amp;&quot;undefined&quot;!=typeof module&amp;&amp;module&amp;&amp;module.exports)try{b=Ic._abbr,require(&quot;./locale/&quot;+a),w(b)}catch(c){}return Lc[a]}function w(a,b){var c;return a&amp;&amp;(c=&quot;undefined&quot;==typeof b?y(a):x(a,b),c&amp;&amp;(Ic=c)),Ic._abbr}function x(a,b){return null!==b?(b.abbr=a,Lc[a]=Lc[a]||new s,Lc[a].set(b),w(a),Lc[a]):(delete Lc[a],null)}function y(a){var b;if(a&amp;&amp;a._locale&amp;&amp;a._locale._abbr&amp;&amp;(a=a._locale._abbr),!a)return Ic;if(!c(a)){if(b=v(a))return b;a=[a]}return u(a)}function z(a,b){var c=a.toLowerCase();Mc[c]=Mc[c+&quot;s&quot;]=Mc[b]=a}function A(a){return&quot;string&quot;==typeof a?Mc[a]||Mc[a.toLowerCase()]:void 0}function B(a){var b,c,d={};for(c in a)f(a,c)&amp;&amp;(b=A(c),b&amp;&amp;(d[b]=a[c]));return d}function C(b,c){return function(d){return null!=d?(E(this,b,d),a.updateOffset(this,c),this):D(this,b)}}function D(a,b){return a._d[&quot;get&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b]()}function E(a,b,c){return a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b](c)}function F(a,b){var c;if(&quot;object&quot;==typeof a)for(c in a)this.set(c,a[c]);else if(a=A(a),&quot;function&quot;==typeof this[a])return this[a](b);return this}function G(a,b,c){var d=&quot;&quot;+Math.abs(a),e=b-d.length,f=a&gt;=0;return(f?c?&quot;+&quot;:&quot;&quot;:&quot;-&quot;)+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function H(a,b,c,d){var e=d;&quot;string&quot;==typeof d&amp;&amp;(e=function(){return this[d]()}),a&amp;&amp;(Qc[a]=e),b&amp;&amp;(Qc[b[0]]=function(){return G(e.apply(this,arguments),b[1],b[2])}),c&amp;&amp;(Qc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function I(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,&quot;&quot;):a.replace(/\\/g,&quot;&quot;)}function J(a){var b,c,d=a.match(Nc);for(b=0,c=d.length;c&gt;b;b++)Qc[d[b]]?d[b]=Qc[d[b]]:d[b]=I(d[b]);return function(e){var f=&quot;&quot;;for(b=0;c&gt;b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function K(a,b){return a.isValid()?(b=L(b,a.localeData()),Pc[b]=Pc[b]||J(b),Pc[b](a)):a.localeData().invalidDate()}function L(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Oc.lastIndex=0;d&gt;=0&amp;&amp;Oc.test(a);)a=a.replace(Oc,c),Oc.lastIndex=0,d-=1;return a}function M(a){return&quot;function&quot;==typeof a&amp;&amp;&quot;[object Function]&quot;===Object.prototype.toString.call(a)}function N(a,b,c){dd[a]=M(b)?b:function(a){return a&amp;&amp;c?c:b}}function O(a,b){return f(dd,a)?dd[a](b._strict,b._locale):new RegExp(P(a))}function P(a){return a.replace(&quot;\\&quot;,&quot;&quot;).replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,&quot;\\$&amp;&quot;)}function Q(a,b){var c,d=b;for(&quot;string&quot;==typeof a&amp;&amp;(a=[a]),&quot;number&quot;==typeof b&amp;&amp;(d=function(a,c){c[b]=q(a)}),c=0;c&lt;a.length;c++)ed[a[c]]=d}function R(a,b){Q(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function S(a,b,c){null!=b&amp;&amp;f(ed,a)&amp;&amp;ed[a](b,c._a,c,a)}function T(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function U(a){return this._months[a.month()]}function V(a){return this._monthsShort[a.month()]}function W(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12&gt;d;d++){if(e=h([2e3,d]),c&amp;&amp;!this._longMonthsParse[d]&amp;&amp;(this._longMonthsParse[d]=new RegExp(&quot;^&quot;+this.months(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;),this._shortMonthsParse[d]=new RegExp(&quot;^&quot;+this.monthsShort(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;)),c||this._monthsParse[d]||(f=&quot;^&quot;+this.months(e,&quot;&quot;)+&quot;|^&quot;+this.monthsShort(e,&quot;&quot;),this._monthsParse[d]=new RegExp(f.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),c&amp;&amp;&quot;MMMM&quot;===b&amp;&amp;this._longMonthsParse[d].test(a))return d;if(c&amp;&amp;&quot;MMM&quot;===b&amp;&amp;this._shortMonthsParse[d].test(a))return d;if(!c&amp;&amp;this._monthsParse[d].test(a))return d}}function X(a,b){var c;return&quot;string&quot;==typeof b&amp;&amp;(b=a.localeData().monthsParse(b),&quot;number&quot;!=typeof b)?a:(c=Math.min(a.date(),T(a.year(),b)),a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+&quot;Month&quot;](b,c),a)}function Y(b){return null!=b?(X(this,b),a.updateOffset(this,!0),this):D(this,&quot;Month&quot;)}function Z(){return T(this.year(),this.month())}function $(a){var b,c=a._a;return c&amp;&amp;-2===j(a).overflow&amp;&amp;(b=c[gd]&lt;0||c[gd]&gt;11?gd:c[hd]&lt;1||c[hd]&gt;T(c[fd],c[gd])?hd:c[id]&lt;0||c[id]&gt;24||24===c[id]&amp;&amp;(0!==c[jd]||0!==c[kd]||0!==c[ld])?id:c[jd]&lt;0||c[jd]&gt;59?jd:c[kd]&lt;0||c[kd]&gt;59?kd:c[ld]&lt;0||c[ld]&gt;999?ld:-1,j(a)._overflowDayOfYear&amp;&amp;(fd&gt;b||b&gt;hd)&amp;&amp;(b=hd),j(a).overflow=b),a}function _(b){a.suppressDeprecationWarnings===!1&amp;&amp;&quot;undefined&quot;!=typeof console&amp;&amp;console.warn&amp;&amp;console.warn(&quot;Deprecation warning: &quot;+b)}function aa(a,b){var c=!0;return g(function(){return c&amp;&amp;(_(a+&quot;\n&quot;+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function ba(a,b){od[a]||(_(b),od[a]=!0)}function ca(a){var b,c,d=a._i,e=pd.exec(d);if(e){for(j(a).iso=!0,b=0,c=qd.length;c&gt;b;b++)if(qd[b][1].exec(d)){a._f=qd[b][0];break}for(b=0,c=rd.length;c&gt;b;b++)if(rd[b][1].exec(d)){a._f+=(e[6]||&quot; &quot;)+rd[b][0];break}d.match(ad)&amp;&amp;(a._f+=&quot;Z&quot;),va(a)}else a._isValid=!1}function da(b){var c=sd.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ca(b),void(b._isValid===!1&amp;&amp;(delete b._isValid,a.createFromInputFallback(b))))}function ea(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970&gt;a&amp;&amp;h.setFullYear(a),h}function fa(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970&gt;a&amp;&amp;b.setUTCFullYear(a),b}function ga(a){return ha(a)?366:365}function ha(a){return a%4===0&amp;&amp;a%100!==0||a%400===0}function ia(){return ha(this.year())}function ja(a,b,c){var d,e=c-b,f=c-a.day();return f&gt;e&amp;&amp;(f-=7),e-7&gt;f&amp;&amp;(f+=7),d=Da(a).add(f,&quot;d&quot;),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ka(a){return ja(a,this._week.dow,this._week.doy).week}function la(){return this._week.dow}function ma(){return this._week.doy}function na(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function oa(a){var b=ja(this,1,4).week;return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function pa(a,b,c,d,e){var f,g=6+e-d,h=fa(a,0,1+g),i=h.getUTCDay();return e&gt;i&amp;&amp;(i+=7),c=null!=c?1*c:e,f=1+g+7*(b-1)-i+c,{year:f&gt;0?a:a-1,dayOfYear:f&gt;0?f:ga(a-1)+f}}function qa(a){var b=Math.round((this.clone().startOf(&quot;day&quot;)-this.clone().startOf(&quot;year&quot;))/864e5)+1;return null==a?b:this.add(a-b,&quot;d&quot;)}function ra(a,b,c){return null!=a?a:null!=b?b:c}function sa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ta(a){var b,c,d,e,f=[];if(!a._d){for(d=sa(a),a._w&amp;&amp;null==a._a[hd]&amp;&amp;null==a._a[gd]&amp;&amp;ua(a),a._dayOfYear&amp;&amp;(e=ra(a._a[fd],d[fd]),a._dayOfYear&gt;ga(e)&amp;&amp;(j(a)._overflowDayOfYear=!0),c=fa(e,0,a._dayOfYear),a._a[gd]=c.getUTCMonth(),a._a[hd]=c.getUTCDate()),b=0;3&gt;b&amp;&amp;null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7&gt;b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[id]&amp;&amp;0===a._a[jd]&amp;&amp;0===a._a[kd]&amp;&amp;0===a._a[ld]&amp;&amp;(a._nextDay=!0,a._a[id]=0),a._d=(a._useUTC?fa:ea).apply(null,f),null!=a._tzm&amp;&amp;a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&amp;&amp;(a._a[id]=24)}}function ua(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=ra(b.GG,a._a[fd],ja(Da(),1,4).year),d=ra(b.W,1),e=ra(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=ra(b.gg,a._a[fd],ja(Da(),f,g).year),d=ra(b.w,1),null!=b.d?(e=b.d,f&gt;e&amp;&amp;++d):e=null!=b.e?b.e+f:f),h=pa(c,d,e,g,f),a._a[fd]=h.year,a._dayOfYear=h.dayOfYear}function va(b){if(b._f===a.ISO_8601)return void ca(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=&quot;&quot;+b._i,i=h.length,k=0;for(e=L(b._f,b._locale).match(Nc)||[],c=0;c&lt;e.length;c++)f=e[c],d=(h.match(O(f,b))||[])[0],d&amp;&amp;(g=h.substr(0,h.indexOf(d)),g.length&gt;0&amp;&amp;j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Qc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),S(f,d,b)):b._strict&amp;&amp;!d&amp;&amp;j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length&gt;0&amp;&amp;j(b).unusedInput.push(h),j(b).bigHour===!0&amp;&amp;b._a[id]&lt;=12&amp;&amp;b._a[id]&gt;0&amp;&amp;(j(b).bigHour=void 0),b._a[id]=wa(b._locale,b._a[id],b._meridiem),ta(b),$(b)}function wa(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&amp;&amp;12&gt;b&amp;&amp;(b+=12),d||12!==b||(b=0),b):b}function xa(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e&lt;a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&amp;&amp;(b._useUTC=a._useUTC),b._f=a._f[e],va(b),k(b)&amp;&amp;(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d&gt;f)&amp;&amp;(d=f,c=b));g(a,c||b)}function ya(a){if(!a._d){var b=B(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ta(a)}}function za(a){var b=new n($(Aa(a)));return b._nextDay&amp;&amp;(b.add(1,&quot;d&quot;),b._nextDay=void 0),b}function Aa(a){var b=a._i,e=a._f;return a._locale=a._locale||y(a._l),null===b||void 0===e&amp;&amp;&quot;&quot;===b?l({nullInput:!0}):(&quot;string&quot;==typeof b&amp;&amp;(a._i=b=a._locale.preparse(b)),o(b)?new n($(b)):(c(e)?xa(a):e?va(a):d(b)?a._d=b:Ba(a),a))}function Ba(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):&quot;string&quot;==typeof f?da(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ta(b)):&quot;object&quot;==typeof f?ya(b):&quot;number&quot;==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ca(a,b,c,d,e){var f={};return&quot;boolean&quot;==typeof c&amp;&amp;(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,za(f)}function Da(a,b,c,d){return Ca(a,b,c,d,!1)}function Ea(a,b){var d,e;if(1===b.length&amp;&amp;c(b[0])&amp;&amp;(b=b[0]),!b.length)return Da();for(d=b[0],e=1;e&lt;b.length;++e)(!b[e].isValid()||b[e][a](d))&amp;&amp;(d=b[e]);return d}function Fa(){var a=[].slice.call(arguments,0);return Ea(&quot;isBefore&quot;,a)}function Ga(){var a=[].slice.call(arguments,0);return Ea(&quot;isAfter&quot;,a)}function Ha(a){var b=B(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=y(),this._bubble()}function Ia(a){return a instanceof Ha}function Ja(a,b){H(a,0,0,function(){var a=this.utcOffset(),c=&quot;+&quot;;return 0&gt;a&amp;&amp;(a=-a,c=&quot;-&quot;),c+G(~~(a/60),2)+b+G(~~a%60,2)})}function Ka(a){var b=(a||&quot;&quot;).match(ad)||[],c=b[b.length-1]||[],d=(c+&quot;&quot;).match(xd)||[&quot;-&quot;,0,0],e=+(60*d[1])+q(d[2]);return&quot;+&quot;===d[0]?e:-e}function La(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Da(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Da(b).local()}function Ma(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Na(b,c){var d,e=this._offset||0;return null!=b?(&quot;string&quot;==typeof b&amp;&amp;(b=Ka(b)),Math.abs(b)&lt;16&amp;&amp;(b=60*b),!this._isUTC&amp;&amp;c&amp;&amp;(d=Ma(this)),this._offset=b,this._isUTC=!0,null!=d&amp;&amp;this.add(d,&quot;m&quot;),e!==b&amp;&amp;(!c||this._changeInProgress?bb(this,Ya(b-e,&quot;m&quot;),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ma(this)}function Oa(a,b){return null!=a?(&quot;string&quot;!=typeof a&amp;&amp;(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Pa(a){return this.utcOffset(0,a)}function Qa(a){return this._isUTC&amp;&amp;(this.utcOffset(0,a),this._isUTC=!1,a&amp;&amp;this.subtract(Ma(this),&quot;m&quot;)),this}function Ra(){return this._tzm?this.utcOffset(this._tzm):&quot;string&quot;==typeof this._i&amp;&amp;this.utcOffset(Ka(this._i)),this}function Sa(a){return a=a?Da(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Ta(){return this.utcOffset()&gt;this.clone().month(0).utcOffset()||this.utcOffset()&gt;this.clone().month(5).utcOffset()}function Ua(){if(&quot;undefined&quot;!=typeof this._isDSTShifted)return this._isDSTShifted;var a={};if(m(a,this),a=Aa(a),a._a){var b=a._isUTC?h(a._a):Da(a._a);this._isDSTShifted=this.isValid()&amp;&amp;r(a._a,b.toArray())&gt;0}else this._isDSTShifted=!1;return this._isDSTShifted}function Va(){return!this._isUTC}function Wa(){return this._isUTC}function Xa(){return this._isUTC&amp;&amp;0===this._offset}function Ya(a,b){var c,d,e,g=a,h=null;return Ia(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:&quot;number&quot;==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=yd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:0,d:q(h[hd])*c,h:q(h[id])*c,m:q(h[jd])*c,s:q(h[kd])*c,ms:q(h[ld])*c}):(h=zd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:Za(h[2],c),M:Za(h[3],c),d:Za(h[4],c),h:Za(h[5],c),m:Za(h[6],c),s:Za(h[7],c),w:Za(h[8],c)}):null==g?g={}:&quot;object&quot;==typeof g&amp;&amp;(&quot;from&quot;in g||&quot;to&quot;in g)&amp;&amp;(e=_a(Da(g.from),Da(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ha(g),Ia(a)&amp;&amp;f(a,&quot;_locale&quot;)&amp;&amp;(d._locale=a._locale),d}function Za(a,b){var c=a&amp;&amp;parseFloat(a.replace(&quot;,&quot;,&quot;.&quot;));return(isNaN(c)?0:c)*b}function $a(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,&quot;M&quot;).isAfter(b)&amp;&amp;--c.months,c.milliseconds=+b-+a.clone().add(c.months,&quot;M&quot;),c}function _a(a,b){var c;return b=La(b,a),a.isBefore(b)?c=$a(a,b):(c=$a(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function ab(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(ba(b,&quot;moment().&quot;+b+&quot;(period, number) is deprecated. Please use moment().&quot;+b+&quot;(number, period).&quot;),f=c,c=d,d=f),c=&quot;string&quot;==typeof c?+c:c,e=Ya(c,d),bb(this,e,a),this}}function bb(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&amp;&amp;b._d.setTime(+b._d+f*d),g&amp;&amp;E(b,&quot;Date&quot;,D(b,&quot;Date&quot;)+g*d),h&amp;&amp;X(b,D(b,&quot;Month&quot;)+h*d),e&amp;&amp;a.updateOffset(b,g||h)}function cb(a,b){var c=a||Da(),d=La(c,this).startOf(&quot;day&quot;),e=this.diff(d,&quot;days&quot;,!0),f=-6&gt;e?&quot;sameElse&quot;:-1&gt;e?&quot;lastWeek&quot;:0&gt;e?&quot;lastDay&quot;:1&gt;e?&quot;sameDay&quot;:2&gt;e?&quot;nextDay&quot;:7&gt;e?&quot;nextWeek&quot;:&quot;sameElse&quot;;return this.format(b&amp;&amp;b[f]||this.localeData().calendar(f,this,Da(c)))}function db(){return new n(this)}function eb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this&gt;+a):(c=o(a)?+a:+Da(a),c&lt;+this.clone().startOf(b))}function fb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+a&gt;+this):(c=o(a)?+a:+Da(a),+this.clone().endOf(b)&lt;c)}function gb(a,b,c){return this.isAfter(a,c)&amp;&amp;this.isBefore(b,c)}function hb(a,b){var c;return b=A(b||&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this===+a):(c=+Da(a),+this.clone().startOf(b)&lt;=c&amp;&amp;c&lt;=+this.clone().endOf(b))}function ib(a,b,c){var d,e,f=La(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=A(b),&quot;year&quot;===b||&quot;month&quot;===b||&quot;quarter&quot;===b?(e=jb(this,f),&quot;quarter&quot;===b?e/=3:&quot;year&quot;===b&amp;&amp;(e/=12)):(d=this-f,e=&quot;second&quot;===b?d/1e3:&quot;minute&quot;===b?d/6e4:&quot;hour&quot;===b?d/36e5:&quot;day&quot;===b?(d-g)/864e5:&quot;week&quot;===b?(d-g)/6048e5:d),c?e:p(e)}function jb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,&quot;months&quot;);return 0&gt;b-f?(c=a.clone().add(e-1,&quot;months&quot;),d=(b-f)/(f-c)):(c=a.clone().add(e+1,&quot;months&quot;),d=(b-f)/(c-f)),-(e+d)}function kb(){return this.clone().locale(&quot;en&quot;).format(&quot;ddd MMM DD YYYY HH:mm:ss [GMT]ZZ&quot;)}function lb(){var a=this.clone().utc();return 0&lt;a.year()&amp;&amp;a.year()&lt;=9999?&quot;function&quot;==typeof Date.prototype.toISOString?this.toDate().toISOString():K(a,&quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;):K(a,&quot;YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;)}function mb(b){var c=K(this,b||a.defaultFormat);return this.localeData().postformat(c)}function nb(a,b){return this.isValid()?Ya({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.from(Da(),a)}function pb(a,b){return this.isValid()?Ya({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function qb(a){return this.to(Da(),a)}function rb(a){var b;return void 0===a?this._locale._abbr:(b=y(a),null!=b&amp;&amp;(this._locale=b),this)}function sb(){return this._locale}function tb(a){switch(a=A(a)){case&quot;year&quot;:this.month(0);case&quot;quarter&quot;:case&quot;month&quot;:this.date(1);case&quot;week&quot;:case&quot;isoWeek&quot;:case&quot;day&quot;:this.hours(0);case&quot;hour&quot;:this.minutes(0);case&quot;minute&quot;:this.seconds(0);case&quot;second&quot;:this.milliseconds(0)}return&quot;week&quot;===a&amp;&amp;this.weekday(0),&quot;isoWeek&quot;===a&amp;&amp;this.isoWeekday(1),&quot;quarter&quot;===a&amp;&amp;this.month(3*Math.floor(this.month()/3)),this}function ub(a){return a=A(a),void 0===a||&quot;millisecond&quot;===a?this:this.startOf(a).add(1,&quot;isoWeek&quot;===a?&quot;week&quot;:a).subtract(1,&quot;ms&quot;)}function vb(){return+this._d-6e4*(this._offset||0)}function wb(){return Math.floor(+this/1e3)}function xb(){return this._offset?new Date(+this):this._d}function yb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function zb(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Ab(){return k(this)}function Bb(){return g({},j(this))}function Cb(){return j(this).overflow}function Db(a,b){H(0,[a,a.length],0,b)}function Eb(a,b,c){return ja(Da([a,11,31+b-c]),b,c).week}function Fb(a){var b=ja(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Gb(a){var b=ja(this,1,4).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Hb(){return Eb(this.year(),1,4)}function Ib(){var a=this.localeData()._week;return Eb(this.year(),a.dow,a.doy)}function Jb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Kb(a,b){return&quot;string&quot;!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),&quot;number&quot;==typeof a?a:null):parseInt(a,10)}function Lb(a){return this._weekdays[a.day()]}function Mb(a){return this._weekdaysShort[a.day()]}function Nb(a){return this._weekdaysMin[a.day()]}function Ob(a){var b,c,d;for(this._weekdaysParse=this._weekdaysParse||[],b=0;7&gt;b;b++)if(this._weekdaysParse[b]||(c=Da([2e3,1]).day(b),d=&quot;^&quot;+this.weekdays(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysShort(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysMin(c,&quot;&quot;),this._weekdaysParse[b]=new RegExp(d.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),this._weekdaysParse[b].test(a))return b}function Pb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Kb(a,this.localeData()),this.add(a-b,&quot;d&quot;)):b}function Qb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,&quot;d&quot;)}function Rb(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Sb(a,b){H(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Tb(a,b){return b._meridiemParse}function Ub(a){return&quot;p&quot;===(a+&quot;&quot;).toLowerCase().charAt(0)}function Vb(a,b,c){return a&gt;11?c?&quot;pm&quot;:&quot;PM&quot;:c?&quot;am&quot;:&quot;AM&quot;}function Wb(a,b){b[ld]=q(1e3*(&quot;0.&quot;+a))}function Xb(){return this._isUTC?&quot;UTC&quot;:&quot;&quot;}function Yb(){return this._isUTC?&quot;Coordinated Universal Time&quot;:&quot;&quot;}function Zb(a){return Da(1e3*a)}function $b(){return Da.apply(null,arguments).parseZone()}function _b(a,b,c){var d=this._calendar[a];return&quot;function&quot;==typeof d?d.call(b,c):d}function ac(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function bc(){return this._invalidDate}function cc(a){return this._ordinal.replace(&quot;%d&quot;,a)}function dc(a){return a}function ec(a,b,c,d){var e=this._relativeTime[c];return&quot;function&quot;==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function fc(a,b){var c=this._relativeTime[a&gt;0?&quot;future&quot;:&quot;past&quot;];return&quot;function&quot;==typeof c?c(b):c.replace(/%s/i,b)}function gc(a){var b,c;for(c in a)b=a[c],&quot;function&quot;==typeof b?this[c]=b:this[&quot;_&quot;+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+&quot;|&quot;+/\d{1,2}/.source)}function hc(a,b,c,d){var e=y(),f=h().set(d,b);return e[c](f,a)}function ic(a,b,c,d,e){if(&quot;number&quot;==typeof a&amp;&amp;(b=a,a=void 0),a=a||&quot;&quot;,null!=b)return hc(a,b,c,e);var f,g=[];for(f=0;d&gt;f;f++)g[f]=hc(a,f,c,e);return g}function jc(a,b){return ic(a,b,&quot;months&quot;,12,&quot;month&quot;)}function kc(a,b){return ic(a,b,&quot;monthsShort&quot;,12,&quot;month&quot;)}function lc(a,b){return ic(a,b,&quot;weekdays&quot;,7,&quot;day&quot;)}function mc(a,b){return ic(a,b,&quot;weekdaysShort&quot;,7,&quot;day&quot;)}function nc(a,b){return ic(a,b,&quot;weekdaysMin&quot;,7,&quot;day&quot;)}function oc(){var a=this._data;return this._milliseconds=Wd(this._milliseconds),this._days=Wd(this._days),this._months=Wd(this._months),a.milliseconds=Wd(a.milliseconds),a.seconds=Wd(a.seconds),a.minutes=Wd(a.minutes),a.hours=Wd(a.hours),a.months=Wd(a.months),a.years=Wd(a.years),this}function pc(a,b,c,d){var e=Ya(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function qc(a,b){return pc(this,a,b,1)}function rc(a,b){return pc(this,a,b,-1)}function sc(a){return 0&gt;a?Math.floor(a):Math.ceil(a)}function tc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f&gt;=0&amp;&amp;g&gt;=0&amp;&amp;h&gt;=0||0&gt;=f&amp;&amp;0&gt;=g&amp;&amp;0&gt;=h||(f+=864e5*sc(vc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=p(f/1e3),i.seconds=a%60,b=p(a/60),i.minutes=b%60,c=p(b/60),i.hours=c%24,g+=p(c/24),e=p(uc(g)),h+=e,g-=sc(vc(e)),d=p(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function uc(a){return 4800*a/146097}function vc(a){return 146097*a/4800}function wc(a){var b,c,d=this._milliseconds;if(a=A(a),&quot;month&quot;===a||&quot;year&quot;===a)return b=this._days+d/864e5,c=this._months+uc(b),&quot;month&quot;===a?c:c/12;switch(b=this._days+Math.round(vc(this._months)),a){case&quot;week&quot;:return b/7+d/6048e5;case&quot;day&quot;:return b+d/864e5;case&quot;hour&quot;:return 24*b+d/36e5;case&quot;minute&quot;:return 1440*b+d/6e4;case&quot;second&quot;:return 86400*b+d/1e3;case&quot;millisecond&quot;:return Math.floor(864e5*b)+d;default:throw new Error(&quot;Unknown unit &quot;+a)}}function xc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*q(this._months/12)}function yc(a){return function(){return this.as(a)}}function zc(a){return a=A(a),this[a+&quot;s&quot;]()}function Ac(a){return function(){return this._data[a]}}function Bc(){return p(this.days()/7)}function Cc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Dc(a,b,c){var d=Ya(a).abs(),e=ke(d.as(&quot;s&quot;)),f=ke(d.as(&quot;m&quot;)),g=ke(d.as(&quot;h&quot;)),h=ke(d.as(&quot;d&quot;)),i=ke(d.as(&quot;M&quot;)),j=ke(d.as(&quot;y&quot;)),k=e&lt;le.s&amp;&amp;[&quot;s&quot;,e]||1===f&amp;&amp;[&quot;m&quot;]||f&lt;le.m&amp;&amp;[&quot;mm&quot;,f]||1===g&amp;&amp;[&quot;h&quot;]||g&lt;le.h&amp;&amp;[&quot;hh&quot;,g]||1===h&amp;&amp;[&quot;d&quot;]||h&lt;le.d&amp;&amp;[&quot;dd&quot;,h]||1===i&amp;&amp;[&quot;M&quot;]||i&lt;le.M&amp;&amp;[&quot;MM&quot;,i]||1===j&amp;&amp;[&quot;y&quot;]||[&quot;yy&quot;,j];return k[2]=b,k[3]=+a&gt;0,k[4]=c,Cc.apply(null,k)}function Ec(a,b){return void 0===le[a]?!1:void 0===b?le[a]:(le[a]=b,!0)}function Fc(a){var b=this.localeData(),c=Dc(this,!a,b);return a&amp;&amp;(c=b.pastFuture(+this,c)),b.postformat(c)}function Gc(){var a,b,c,d=me(this._milliseconds)/1e3,e=me(this._days),f=me(this._months);a=p(d/60),b=p(a/60),d%=60,a%=60,c=p(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0&gt;m?&quot;-&quot;:&quot;&quot;)+&quot;P&quot;+(g?g+&quot;Y&quot;:&quot;&quot;)+(h?h+&quot;M&quot;:&quot;&quot;)+(i?i+&quot;D&quot;:&quot;&quot;)+(j||k||l?&quot;T&quot;:&quot;&quot;)+(j?j+&quot;H&quot;:&quot;&quot;)+(k?k+&quot;M&quot;:&quot;&quot;)+(l?l+&quot;S&quot;:&quot;&quot;):&quot;P0D&quot;}var Hc,Ic,Jc=a.momentProperties=[],Kc=!1,Lc={},Mc={},Nc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Pc={},Qc={},Rc=/\d/,Sc=/\d\d/,Tc=/\d{3}/,Uc=/\d{4}/,Vc=/[+-]?\d{6}/,Wc=/\d\d?/,Xc=/\d{1,3}/,Yc=/\d{1,4}/,Zc=/[+-]?\d{1,6}/,$c=/\d+/,_c=/[+-]?\d+/,ad=/Z|[+-]\d\d:?\d\d/gi,bd=/[+-]?\d+(\.\d{1,3})?/,cd=/[0-9]*[&apos;a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,dd={},ed={},fd=0,gd=1,hd=2,id=3,jd=4,kd=5,ld=6;H(&quot;M&quot;,[&quot;MM&quot;,2],&quot;Mo&quot;,function(){return this.month()+1}),H(&quot;MMM&quot;,0,0,function(a){return this.localeData().monthsShort(this,a)}),H(&quot;MMMM&quot;,0,0,function(a){return this.localeData().months(this,a)}),z(&quot;month&quot;,&quot;M&quot;),N(&quot;M&quot;,Wc),N(&quot;MM&quot;,Wc,Sc),N(&quot;MMM&quot;,cd),N(&quot;MMMM&quot;,cd),Q([&quot;M&quot;,&quot;MM&quot;],function(a,b){b[gd]=q(a)-1}),Q([&quot;MMM&quot;,&quot;MMMM&quot;],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[gd]=e:j(c).invalidMonth=a});var md=&quot;January_February_March_April_May_June_July_August_September_October_November_December&quot;.split(&quot;_&quot;),nd=&quot;Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec&quot;.split(&quot;_&quot;),od={};a.suppressDeprecationWarnings=!1;var pd=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,qd=[[&quot;YYYYYY-MM-DD&quot;,/[+-]\d{6}-\d{2}-\d{2}/],[&quot;YYYY-MM-DD&quot;,/\d{4}-\d{2}-\d{2}/],[&quot;GGGG-[W]WW-E&quot;,/\d{4}-W\d{2}-\d/],[&quot;GGGG-[W]WW&quot;,/\d{4}-W\d{2}/],[&quot;YYYY-DDD&quot;,/\d{4}-\d{3}/]],rd=[[&quot;HH:mm:ss.SSSS&quot;,/(T| )\d\d:\d\d:\d\d\.\d+/],[&quot;HH:mm:ss&quot;,/(T| )\d\d:\d\d:\d\d/],[&quot;HH:mm&quot;,/(T| )\d\d:\d\d/],[&quot;HH&quot;,/(T| )\d\d/]],sd=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=aa(&quot;moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.&quot;,function(a){a._d=new Date(a._i+(a._useUTC?&quot; UTC&quot;:&quot;&quot;))}),H(0,[&quot;YY&quot;,2],0,function(){return this.year()%100}),H(0,[&quot;YYYY&quot;,4],0,&quot;year&quot;),H(0,[&quot;YYYYY&quot;,5],0,&quot;year&quot;),H(0,[&quot;YYYYYY&quot;,6,!0],0,&quot;year&quot;),z(&quot;year&quot;,&quot;y&quot;),N(&quot;Y&quot;,_c),N(&quot;YY&quot;,Wc,Sc),N(&quot;YYYY&quot;,Yc,Uc),N(&quot;YYYYY&quot;,Zc,Vc),N(&quot;YYYYYY&quot;,Zc,Vc),Q([&quot;YYYYY&quot;,&quot;YYYYYY&quot;],fd),Q(&quot;YYYY&quot;,function(b,c){c[fd]=2===b.length?a.parseTwoDigitYear(b):q(b)}),Q(&quot;YY&quot;,function(b,c){c[fd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return q(a)+(q(a)&gt;68?1900:2e3)};var td=C(&quot;FullYear&quot;,!1);H(&quot;w&quot;,[&quot;ww&quot;,2],&quot;wo&quot;,&quot;week&quot;),H(&quot;W&quot;,[&quot;WW&quot;,2],&quot;Wo&quot;,&quot;isoWeek&quot;),z(&quot;week&quot;,&quot;w&quot;),z(&quot;isoWeek&quot;,&quot;W&quot;),N(&quot;w&quot;,Wc),N(&quot;ww&quot;,Wc,Sc),N(&quot;W&quot;,Wc),N(&quot;WW&quot;,Wc,Sc),R([&quot;w&quot;,&quot;ww&quot;,&quot;W&quot;,&quot;WW&quot;],function(a,b,c,d){b[d.substr(0,1)]=q(a)});var ud={dow:0,doy:6};H(&quot;DDD&quot;,[&quot;DDDD&quot;,3],&quot;DDDo&quot;,&quot;dayOfYear&quot;),z(&quot;dayOfYear&quot;,&quot;DDD&quot;),N(&quot;DDD&quot;,Xc),N(&quot;DDDD&quot;,Tc),Q([&quot;DDD&quot;,&quot;DDDD&quot;],function(a,b,c){c._dayOfYear=q(a)}),a.ISO_8601=function(){};var vd=aa(&quot;moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return this&gt;a?this:a}),wd=aa(&quot;moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return a&gt;this?this:a});Ja(&quot;Z&quot;,&quot;:&quot;),Ja(&quot;ZZ&quot;,&quot;&quot;),N(&quot;Z&quot;,ad),N(&quot;ZZ&quot;,ad),Q([&quot;Z&quot;,&quot;ZZ&quot;],function(a,b,c){c._useUTC=!0,c._tzm=Ka(a)});var xd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var yd=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,zd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Ya.fn=Ha.prototype;var Ad=ab(1,&quot;add&quot;),Bd=ab(-1,&quot;subtract&quot;);a.defaultFormat=&quot;YYYY-MM-DDTHH:mm:ssZ&quot;;var Cd=aa(&quot;moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.&quot;,function(a){return void 0===a?this.localeData():this.locale(a)});H(0,[&quot;gg&quot;,2],0,function(){return this.weekYear()%100}),H(0,[&quot;GG&quot;,2],0,function(){return this.isoWeekYear()%100}),Db(&quot;gggg&quot;,&quot;weekYear&quot;),Db(&quot;ggggg&quot;,&quot;weekYear&quot;),Db(&quot;GGGG&quot;,&quot;isoWeekYear&quot;),Db(&quot;GGGGG&quot;,&quot;isoWeekYear&quot;),z(&quot;weekYear&quot;,&quot;gg&quot;),z(&quot;isoWeekYear&quot;,&quot;GG&quot;),N(&quot;G&quot;,_c),N(&quot;g&quot;,_c),N(&quot;GG&quot;,Wc,Sc),N(&quot;gg&quot;,Wc,Sc),N(&quot;GGGG&quot;,Yc,Uc),N(&quot;gggg&quot;,Yc,Uc),N(&quot;GGGGG&quot;,Zc,Vc),N(&quot;ggggg&quot;,Zc,Vc),R([&quot;gggg&quot;,&quot;ggggg&quot;,&quot;GGGG&quot;,&quot;GGGGG&quot;],function(a,b,c,d){b[d.substr(0,2)]=q(a)}),R([&quot;gg&quot;,&quot;GG&quot;],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),H(&quot;Q&quot;,0,0,&quot;quarter&quot;),z(&quot;quarter&quot;,&quot;Q&quot;),N(&quot;Q&quot;,Rc),Q(&quot;Q&quot;,function(a,b){b[gd]=3*(q(a)-1)}),H(&quot;D&quot;,[&quot;DD&quot;,2],&quot;Do&quot;,&quot;date&quot;),z(&quot;date&quot;,&quot;D&quot;),N(&quot;D&quot;,Wc),N(&quot;DD&quot;,Wc,Sc),N(&quot;Do&quot;,function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),Q([&quot;D&quot;,&quot;DD&quot;],hd),Q(&quot;Do&quot;,function(a,b){b[hd]=q(a.match(Wc)[0],10)});var Dd=C(&quot;Date&quot;,!0);H(&quot;d&quot;,0,&quot;do&quot;,&quot;day&quot;),H(&quot;dd&quot;,0,0,function(a){return this.localeData().weekdaysMin(this,a)}),H(&quot;ddd&quot;,0,0,function(a){return this.localeData().weekdaysShort(this,a)}),H(&quot;dddd&quot;,0,0,function(a){return this.localeData().weekdays(this,a)}),H(&quot;e&quot;,0,0,&quot;weekday&quot;),H(&quot;E&quot;,0,0,&quot;isoWeekday&quot;),z(&quot;day&quot;,&quot;d&quot;),z(&quot;weekday&quot;,&quot;e&quot;),z(&quot;isoWeekday&quot;,&quot;E&quot;),N(&quot;d&quot;,Wc),N(&quot;e&quot;,Wc),N(&quot;E&quot;,Wc),N(&quot;dd&quot;,cd),N(&quot;ddd&quot;,cd),N(&quot;dddd&quot;,cd),R([&quot;dd&quot;,&quot;ddd&quot;,&quot;dddd&quot;],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),R([&quot;d&quot;,&quot;e&quot;,&quot;E&quot;],function(a,b,c,d){b[d]=q(a)});var Ed=&quot;Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday&quot;.split(&quot;_&quot;),Fd=&quot;Sun_Mon_Tue_Wed_Thu_Fri_Sat&quot;.split(&quot;_&quot;),Gd=&quot;Su_Mo_Tu_We_Th_Fr_Sa&quot;.split(&quot;_&quot;);H(&quot;H&quot;,[&quot;HH&quot;,2],0,&quot;hour&quot;),H(&quot;h&quot;,[&quot;hh&quot;,2],0,function(){return this.hours()%12||12}),Sb(&quot;a&quot;,!0),Sb(&quot;A&quot;,!1),z(&quot;hour&quot;,&quot;h&quot;),N(&quot;a&quot;,Tb),N(&quot;A&quot;,Tb),N(&quot;H&quot;,Wc),N(&quot;h&quot;,Wc),N(&quot;HH&quot;,Wc,Sc),N(&quot;hh&quot;,Wc,Sc),Q([&quot;H&quot;,&quot;HH&quot;],id),Q([&quot;a&quot;,&quot;A&quot;],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),Q([&quot;h&quot;,&quot;hh&quot;],function(a,b,c){b[id]=q(a),j(c).bigHour=!0});var Hd=/[ap]\.?m?\.?/i,Id=C(&quot;Hours&quot;,!0);H(&quot;m&quot;,[&quot;mm&quot;,2],0,&quot;minute&quot;),z(&quot;minute&quot;,&quot;m&quot;),N(&quot;m&quot;,Wc),N(&quot;mm&quot;,Wc,Sc),Q([&quot;m&quot;,&quot;mm&quot;],jd);var Jd=C(&quot;Minutes&quot;,!1);H(&quot;s&quot;,[&quot;ss&quot;,2],0,&quot;second&quot;),z(&quot;second&quot;,&quot;s&quot;),N(&quot;s&quot;,Wc),N(&quot;ss&quot;,Wc,Sc),Q([&quot;s&quot;,&quot;ss&quot;],kd);var Kd=C(&quot;Seconds&quot;,!1);H(&quot;S&quot;,0,0,function(){return~~(this.millisecond()/100)}),H(0,[&quot;SS&quot;,2],0,function(){return~~(this.millisecond()/10)}),H(0,[&quot;SSS&quot;,3],0,&quot;millisecond&quot;),H(0,[&quot;SSSS&quot;,4],0,function(){return 10*this.millisecond()}),H(0,[&quot;SSSSS&quot;,5],0,function(){return 100*this.millisecond()}),H(0,[&quot;SSSSSS&quot;,6],0,function(){return 1e3*this.millisecond()}),H(0,[&quot;SSSSSSS&quot;,7],0,function(){return 1e4*this.millisecond()}),H(0,[&quot;SSSSSSSS&quot;,8],0,function(){return 1e5*this.millisecond()}),H(0,[&quot;SSSSSSSSS&quot;,9],0,function(){return 1e6*this.millisecond()}),z(&quot;millisecond&quot;,&quot;ms&quot;),N(&quot;S&quot;,Xc,Rc),N(&quot;SS&quot;,Xc,Sc),N(&quot;SSS&quot;,Xc,Tc);var Ld;for(Ld=&quot;SSSS&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)N(Ld,$c);for(Ld=&quot;S&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)Q(Ld,Wb);var Md=C(&quot;Milliseconds&quot;,!1);H(&quot;z&quot;,0,0,&quot;zoneAbbr&quot;),H(&quot;zz&quot;,0,0,&quot;zoneName&quot;);var Nd=n.prototype;Nd.add=Ad,Nd.calendar=cb,Nd.clone=db,Nd.diff=ib,Nd.endOf=ub,Nd.format=mb,Nd.from=nb,Nd.fromNow=ob,Nd.to=pb,Nd.toNow=qb,Nd.get=F,Nd.invalidAt=Cb,Nd.isAfter=eb,Nd.isBefore=fb,Nd.isBetween=gb,Nd.isSame=hb,Nd.isValid=Ab,Nd.lang=Cd,Nd.locale=rb,Nd.localeData=sb,Nd.max=wd,Nd.min=vd,Nd.parsingFlags=Bb,Nd.set=F,Nd.startOf=tb,Nd.subtract=Bd,Nd.toArray=yb,Nd.toObject=zb,Nd.toDate=xb,Nd.toISOString=lb,Nd.toJSON=lb,Nd.toString=kb,Nd.unix=wb,Nd.valueOf=vb,Nd.year=td,Nd.isLeapYear=ia,Nd.weekYear=Fb,Nd.isoWeekYear=Gb,Nd.quarter=Nd.quarters=Jb,Nd.month=Y,Nd.daysInMonth=Z,Nd.week=Nd.weeks=na,Nd.isoWeek=Nd.isoWeeks=oa,Nd.weeksInYear=Ib,Nd.isoWeeksInYear=Hb,Nd.date=Dd,Nd.day=Nd.days=Pb,Nd.weekday=Qb,Nd.isoWeekday=Rb,Nd.dayOfYear=qa,Nd.hour=Nd.hours=Id,Nd.minute=Nd.minutes=Jd,Nd.second=Nd.seconds=Kd,
Nd.millisecond=Nd.milliseconds=Md,Nd.utcOffset=Na,Nd.utc=Pa,Nd.local=Qa,Nd.parseZone=Ra,Nd.hasAlignedHourOffset=Sa,Nd.isDST=Ta,Nd.isDSTShifted=Ua,Nd.isLocal=Va,Nd.isUtcOffset=Wa,Nd.isUtc=Xa,Nd.isUTC=Xa,Nd.zoneAbbr=Xb,Nd.zoneName=Yb,Nd.dates=aa(&quot;dates accessor is deprecated. Use date instead.&quot;,Dd),Nd.months=aa(&quot;months accessor is deprecated. Use month instead&quot;,Y),Nd.years=aa(&quot;years accessor is deprecated. Use year instead&quot;,td),Nd.zone=aa(&quot;moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779&quot;,Oa);var Od=Nd,Pd={sameDay:&quot;[Today at] LT&quot;,nextDay:&quot;[Tomorrow at] LT&quot;,nextWeek:&quot;dddd [at] LT&quot;,lastDay:&quot;[Yesterday at] LT&quot;,lastWeek:&quot;[Last] dddd [at] LT&quot;,sameElse:&quot;L&quot;},Qd={LTS:&quot;h:mm:ss A&quot;,LT:&quot;h:mm A&quot;,L:&quot;MM/DD/YYYY&quot;,LL:&quot;MMMM D, YYYY&quot;,LLL:&quot;MMMM D, YYYY h:mm A&quot;,LLLL:&quot;dddd, MMMM D, YYYY h:mm A&quot;},Rd=&quot;Invalid date&quot;,Sd=&quot;%d&quot;,Td=/\d{1,2}/,Ud={future:&quot;in %s&quot;,past:&quot;%s ago&quot;,s:&quot;a few seconds&quot;,m:&quot;a minute&quot;,mm:&quot;%d minutes&quot;,h:&quot;an hour&quot;,hh:&quot;%d hours&quot;,d:&quot;a day&quot;,dd:&quot;%d days&quot;,M:&quot;a month&quot;,MM:&quot;%d months&quot;,y:&quot;a year&quot;,yy:&quot;%d years&quot;},Vd=s.prototype;Vd._calendar=Pd,Vd.calendar=_b,Vd._longDateFormat=Qd,Vd.longDateFormat=ac,Vd._invalidDate=Rd,Vd.invalidDate=bc,Vd._ordinal=Sd,Vd.ordinal=cc,Vd._ordinalParse=Td,Vd.preparse=dc,Vd.postformat=dc,Vd._relativeTime=Ud,Vd.relativeTime=ec,Vd.pastFuture=fc,Vd.set=gc,Vd.months=U,Vd._months=md,Vd.monthsShort=V,Vd._monthsShort=nd,Vd.monthsParse=W,Vd.week=ka,Vd._week=ud,Vd.firstDayOfYear=ma,Vd.firstDayOfWeek=la,Vd.weekdays=Lb,Vd._weekdays=Ed,Vd.weekdaysMin=Nb,Vd._weekdaysMin=Gd,Vd.weekdaysShort=Mb,Vd._weekdaysShort=Fd,Vd.weekdaysParse=Ob,Vd.isPM=Ub,Vd._meridiemParse=Hd,Vd.meridiem=Vb,w(&quot;en&quot;,{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===q(a%100/10)?&quot;th&quot;:1===b?&quot;st&quot;:2===b?&quot;nd&quot;:3===b?&quot;rd&quot;:&quot;th&quot;;return a+c}}),a.lang=aa(&quot;moment.lang is deprecated. Use moment.locale instead.&quot;,w),a.langData=aa(&quot;moment.langData is deprecated. Use moment.localeData instead.&quot;,y);var Wd=Math.abs,Xd=yc(&quot;ms&quot;),Yd=yc(&quot;s&quot;),Zd=yc(&quot;m&quot;),$d=yc(&quot;h&quot;),_d=yc(&quot;d&quot;),ae=yc(&quot;w&quot;),be=yc(&quot;M&quot;),ce=yc(&quot;y&quot;),de=Ac(&quot;milliseconds&quot;),ee=Ac(&quot;seconds&quot;),fe=Ac(&quot;minutes&quot;),ge=Ac(&quot;hours&quot;),he=Ac(&quot;days&quot;),ie=Ac(&quot;months&quot;),je=Ac(&quot;years&quot;),ke=Math.round,le={s:45,m:45,h:22,d:26,M:11},me=Math.abs,ne=Ha.prototype;ne.abs=oc,ne.add=qc,ne.subtract=rc,ne.as=wc,ne.asMilliseconds=Xd,ne.asSeconds=Yd,ne.asMinutes=Zd,ne.asHours=$d,ne.asDays=_d,ne.asWeeks=ae,ne.asMonths=be,ne.asYears=ce,ne.valueOf=xc,ne._bubble=tc,ne.get=zc,ne.milliseconds=de,ne.seconds=ee,ne.minutes=fe,ne.hours=ge,ne.days=he,ne.weeks=Bc,ne.months=ie,ne.years=je,ne.humanize=Fc,ne.toISOString=Gc,ne.toString=Gc,ne.toJSON=Gc,ne.locale=rb,ne.localeData=sb,ne.toIsoString=aa(&quot;toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)&quot;,Gc),ne.lang=Cd,H(&quot;X&quot;,0,0,&quot;unix&quot;),H(&quot;x&quot;,0,0,&quot;valueOf&quot;),N(&quot;x&quot;,_c),N(&quot;X&quot;,bd),Q(&quot;X&quot;,function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),Q(&quot;x&quot;,function(a,b,c){c._d=new Date(q(a))}),a.version=&quot;2.10.6&quot;,b(Da),a.fn=Od,a.min=Fa,a.max=Ga,a.utc=h,a.unix=Zb,a.months=jc,a.isDate=d,a.locale=w,a.invalid=l,a.duration=Ya,a.isMoment=o,a.weekdays=lc,a.parseZone=$b,a.localeData=y,a.isDuration=Ia,a.monthsShort=kc,a.weekdaysMin=nc,a.defineLocale=x,a.weekdaysShort=mc,a.normalizeUnits=A,a.relativeTimeThreshold=Ec;var oe=a;return oe});</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2c64669f-f07e-4365-bf64-c559ace83004</id>
                <name>stopOnErrorCount</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122375</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to Stop a channel if it reaches a particular error count. 
	Also sends an alert message via another channel (this sends a sms via our monitoring system).

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function stopOnErrorCount(cid, errorCount) {
	var channelStatisticsController = Packages.com.mirth.connect.server.controllers.ChannelStatisticsController.getInstance();
	var channelStatusController = Packages.com.mirth.connect.server.controllers.ChannelStatusController.getInstance();
	var stats = channelStatisticsController.getStatistics(cid);
	// var numOfQueued = stats.queued;
	var numOfErrors = stats.error;

	if(numOfErrors &gt; errorCount )
	{
		//Stop Me
		channelStatusController.stopChannel(cid);
		//Alert msg sent to _SVHALERT channel
		var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
		var channelName = channelController.getDeployedChannelById(cid).getName();
		var alertmsg = &apos;mirth01 mirth_channel_status codeTemplate_stopOnErrorCount 0 &apos; +
					   &apos;channel &apos; + channelName + &apos; stopped&apos;;
		router.routeMessage(&apos;_SVHALERT&apos;, alertmsg);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>08044817-3504-4fc1-80ee-404870195151</id>
                <name>test</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122745</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.
	searchword
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function testfunc(arg1) {
	return arg1;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
            <name>WebPT-Mirth</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121602</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
                <name>Fix HL7v2 Node Order</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121804</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>35f4c250-08b4-4e42-8e60-f85aa98dfe50</id>
            <name>WebPT-Translations</name>
            <revision>3</revision>
            <lastModified>
              <time>1690140133521</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>be8f057b-2640-4613-b2e7-83326c59169c</id>
                <name>AddZeros</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122826</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function addZeroes(num) {
   return num.toLocaleString(&quot;en&quot;, {useGrouping: false, minimumFractionDigits: 2})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>51913864-7702-489a-b7c6-54992c12b19d</id>
                <name>FindLookupValueWithDefault</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122218</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithDefault ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        //obj.LeftValue = LeftValue;
        //obj.RightValue1 = DefaultValue1;
        //obj.RightValue2   = DefaultValue2; 
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);
            var result = pattern.test(LeftValue );

            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c276be9f-c8f1-4dea-8df0-e000c6745271</id>
                <name>FindLookupValueWithInsuranceId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122080</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithInsuranceId ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);             
            var result = pattern.test(LeftValue );
	
            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7d746da2-58c6-44eb-ad5c-c5bfd0a0c537</id>
                <name>UseExternalProblemID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122349</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalProblemID() {

if ([&apos;2804&apos;, &apos;2822&apos;].indexOf($(&apos;tenantId&apos;) + &apos;&apos;) &gt; -1) {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitexternalproblemid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitaccountnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>07730e85-7f30-4ddf-90a4-78183c896ab5</id>
                <name>UseExternalVisitID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122192</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalVisitID() {
	
if ($(&apos;tenantId&apos;)  == &apos;9999&apos; ) {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitexternalvisitid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitvisitnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
        <channelTags>
          <channelTag>
            <id>e2256351-a12c-4e51-b138-af4985cb4c3e</id>
            <name>AristaMd</name>
            <channelIds>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>28cdc2db-4028-4249-b1b8-c2ba3961a137</id>
            <name>HL7</name>
            <channelIds>
              <string>6a2a6c33-33da-4783-b823-bd95bf387981</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>5beae4c2-e7f8-4ae3-9fca-703dea9233a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>1ae4e7ac-e62f-468c-aa2a-99cbd6139838</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>0638775c-6c87-4a71-b4b3-7ae52be05c1b</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
            </channelIds>
            <backgroundColor>
              <red>128</red>
              <green>128</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>d3656e65-487a-4643-a59d-ac335ef7dc9c</id>
            <name>HTTP</name>
            <channelIds>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>a727d6e7-ed41-4197-bed5-16af58ab6813</id>
            <name>ORU</name>
            <channelIds>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>1ae4e7ac-e62f-468c-aa2a-99cbd6139838</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
            </channelIds>
            <backgroundColor>
              <red>0</red>
              <green>128</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>44a77229-9cad-4709-8b43-0b6ea153a792</id>
            <name>OUT</name>
            <channelIds>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>255</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>7822e1f8-3e89-4e46-8317-a1119bab773f</id>
            <name>SanMateo</name>
            <channelIds>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
            </channelIds>
            <backgroundColor>
              <red>128</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
        </channelTags>
      </exportData>
    </channel>
    <channel version="3.12.0">
      <id>1c6037e0-7bf9-41ae-b896-5be7b77e711f</id>
      <nextMetaDataId>13</nextMetaDataId>
      <name>SANMATEO_OMG_OUT_JSON</name>
      <description></description>
      <revision>1</revision>
      <sourceConnector version="3.12.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.12.0">
          <pluginProperties/>
          <sourceConnectorProperties version="3.12.0">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.12.0">
              <name>channelId</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <variable>channelId</variable>
              <mapping></mapping>
              <defaultValue>connectorMessage.getChannelId()</defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Parse HL7v2 Message - ChannelMap</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>/* 
Name: 	Parse HL7v2 Message - ChannelMap
Desc: 	Parse HL7v2 Message - ChannelMap
Created:	2020-12-01 
Modified:
2020-11-23 JER - Modified to match the provided HL7 msg file
*/
var scriptName= &quot;Parse HL7v2 Message - ChannelMap&quot;;
var debug= 1;

if (debug&gt;0) { channelMap.put(scriptName+&quot;_DEBUG_msg&quot;,msg); }

channelMap.put(&quot;EventType&quot;, msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString()+&quot;^&quot;+msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString());
channelMap.put(&quot;Source&quot;, msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString()+&quot;:&quot;+msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString());
channelMap.put(&quot;VisitNumber&quot;, msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Convert HL7v2 OMG to JSON</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <script>/* 
Name: 	Convert HL7v2 OMG to JSON 
Desc: 	Convert HL7v2 OMG to JSON - Apply to the SANMATEO_OMG_OUT_JSON Source Transformer
Created:	2020-12-08 jer
Modified:
2020-12-10 jer - Modified to use slice method for PID.8.1 to only return first character of sex
2020-12-09 jer - Modified to introduce the usage of the code template checkElementIfUndefined to check if undefined or no value if either then pull from the Outbound Message template (e.g. &quot;Abbrevation&quot;: null)

*/
var scriptName= &quot;Convert HL7v2 OMG to JSON &quot;;
var debug= 0;
var hl7json= {};
var columnName= &quot;Meta&quot;;

if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG msg: &quot;+msg); }

// Meta - MSH Segment
if(msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString().indexOf(&quot;OMG&quot;)&gt;-1) {
	tmp[&apos;Meta&apos;][&apos;DataModel&apos;]= &quot;Order&quot;
} 

if(msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].indexOf(&quot;O19&quot;)&gt;-1) {
	tmp[&apos;Meta&apos;][&apos;EventType&apos;]= &quot;New&quot;
} else { 
	tmp[&apos;Meta&apos;][&apos;EventType&apos;]= &quot;New&quot;
}

// Message Date Time
var strMessageDateTime= msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
if(strMessageDateTime.indexOf(&quot;T&quot;)&lt;0) {
	// var strModifiedMessageDateTime = strMessageDateTime.toString().substr(0,19).replace(/[^0-9]/g, &quot;&quot;);
	var strModifiedMessageDateTime= toISODate(strMessageDateTime,&quot;America/Los_Angeles&quot;); 
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strModifiedMessageDateTime: &quot;+strModifiedMessageDateTime); }
} else {
	var strModifiedMessageDateTime= strMessageDateTime;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG strModifiedMessageDateTime: &quot;+strModifiedMessageDateTime); }
}
tmp[&apos;Meta&apos;][&apos;EventDateTime&apos;]= strModifiedMessageDateTime;

tmp[&apos;Meta&apos;][&apos;Source&apos;][&apos;Name&apos;]= msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString();
channelMap.put(&apos;SourceName&apos;,tmp[&apos;Meta&apos;][&apos;Source&apos;][&apos;Name&apos;]);
tmp[&apos;Meta&apos;][&apos;Source&apos;][&apos;ID&apos;]= msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString();
tmp[&apos;Meta&apos;][&apos;Destinations&apos;][&apos;Name&apos;]= msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString();
tmp[&apos;Meta&apos;][&apos;Destinations&apos;][&apos;ID&apos;]= msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;].toString();

var strMessageControlId= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
if((typeof(msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]) == &apos;undefined&apos;) || (msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString().length&lt;1)) {
	strMessageControlId= UUIDGenerator.getUUID().toString();
	tmp[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;]= strMessageControlId;
} else {
	tmp[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;]= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
}
channelMap.put(&quot;MessageID&quot;, tmp[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;]);

var strProcessingId= msg[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;].toString();
if(strProcessingId== &quot;P&quot;) {
	tmp[&apos;Meta&apos;][&apos;Test&apos;]= &apos;false&apos;;
} else {
	tmp[&apos;Meta&apos;][&apos;Test&apos;]= &apos;true&apos;;
}

tmp[&apos;Meta&apos;][&apos;FacilityCode&apos;]= msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString();

// Patient - PID Segment
// Create identifiers array object
var identifiers= [];
// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
var patientIdentifiers= [];

// Evaluate PID.1
if(typeof(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;]) !== &apos;undefined&apos; || msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].length()&gt;0) {
	
	for(var i= 0; i&lt;msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].length();i++) {
		// 2020-12-09 01:03 CST jer - Moved the defined identifier to inside the for loop
		var identifier= {};
		var columnName= &apos;ID&apos;;

		// 2020-12-08 23:16 CST jer - Added to manage comparison against list of patient identifiers
		if(patientIdentifiers.indexOf(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;][i].toString())&lt;0) {
		
			identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;][i].toString();
		
			var columnName= &apos;IDType&apos;;
			if(typeof(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;][i]) !== &apos;undefined&apos;) {
				if(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.4&apos;][i].toString();
				} else if(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.5&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.5&apos;][i].toString();
				}
			} else if (typeof($(&apos;SourceName&apos;)) !== &apos;undefined&apos;) {
				identifier[columnName]= $(&apos;SourceName&apos;);
			} else {	
				identifier[columnName]= null;
			}
			identifiers.push(identifier);
			// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
			patientIdentifiers.push(identifier[&apos;ID&apos;]);

			if(debug&gt;0) {
				logger.info(scriptName+&quot;::DEBUG PID3.1 identifiers[&quot;+i+&quot;]: &quot;+JSON.stringify(identifiers));
				logger.info(scriptName+&quot;::DEBUG PID.3.1 patientIdentifier[&quot;+i+&quot;]: &quot;+JSON.stringify(patientIdentifiers));
			}
		} // end if
	}

} 

// Evaluate PID.2
if(typeof(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;]) !== &apos;undefined&apos; || msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;].length()&gt;0) {

	for(var i= 0; i&lt;msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;].length();i++) {
		// 2020-12-09 01:03 CST jer - Moved the defined identifier to inside the for loop
		var identifier= {};
		var columnName= &apos;ID&apos;;

		// 2020-12-08 14:49 CST jer - Added to manage comparison against list of patient identifiers
		if(patientIdentifiers.indexOf(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;].toString())&lt;0) {
		
			identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.1&apos;][i].toString();
			var columnName= &apos;IDType&apos;;
			if(typeof(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.4&apos;][i]) !== &apos;undefined&apos;) {
				if(msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.4&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.2&apos;][&apos;PID.2.4&apos;][i].toString();
				}
			} else if (typeof($(&apos;SourceName&apos;)) !== &apos;undefined&apos;) {
				identifier[columnName]= $(&apos;SourceName&apos;);
			} else {	
				identifier[columnName]= null;
				// tmp[&apos;Patient&apos;][&apos;Identifiers&apos;][i][&apos;IDType&apos;]= null;
			}
			identifiers.push(identifier);
			// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
			patientIdentifiers.push(identifier[&apos;ID&apos;]);

			if(debug&gt;0) {
				logger.info(scriptName+&quot;::DEBUG PID2.1 identifiers[&quot;+i+&quot;]: &quot;+JSON.stringify(identifiers));
				logger.info(scriptName+&quot;::DEBUG PID.2.1 patientIdentifier[&quot;+i+&quot;]: &quot;+JSON.stringify(patientIdentifiers));
			}
		}
	}
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG PID.2 identifiers: &quot;+JSON.stringify(identifiers)); }
}

// Evaluate PID.4
if(typeof(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;]) !== &apos;undefined&apos; || msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].length()&gt;0) {

	for(var i= 0; i&lt;msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].length();i++) {
		
		// 2020-12-09 01:03 CST jer - Moved the defined identifier to inside the for loop
		var identifier= {};
		var columnName= &apos;ID&apos;;

		// 2020-12-08 14:49 CST jer - Added to manage comparison against list of patient identifiers
		if(patientIdentifiers.indexOf(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString())&lt;0) {
			
			identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.1&apos;][i].toString();
			var columnName= &apos;IDType&apos;;
			if(typeof(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.4&apos;][i]) !== &apos;undefined&apos;) {
				if(msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.4&apos;][i].toString().length&gt;1) {
					identifier[columnName]= msg[&apos;PID&apos;][&apos;PID.4&apos;][&apos;PID.4.4&apos;][i].toString();
				}
			} else if (typeof($(&apos;SourceName&apos;)) !== &apos;undefined&apos;) {
				identifier[columnName]= $(&apos;SourceName&apos;);
			} else {	
				identifier[columnName]= null;
				// tmp[&apos;Patient&apos;][&apos;Identifiers&apos;][i][&apos;IDType&apos;]= null;
			}
			identifiers.push(identifier);
			// 2020-12-08 14:49 CST jer - Added to manage list of patient identifiers
			patientIdentifiers.push(identifier[&apos;ID&apos;]);

			if(debug&gt;0) {
				logger.info(scriptName+&quot;::DEBUG PID4.1 identifiers[&quot;+i+&quot;]: &quot;+JSON.stringify(identifiers));
				logger.info(scriptName+&quot;::DEBUG PID.4.1 patientIdentifier[&quot;+i+&quot;]: &quot;+JSON.stringify(patientIdentifiers));
			}
		}
	}
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG PID.4 identifiers: &quot;+JSON.stringify(identifiers)); }
}

if(typeof(identifiers) !== &apos;undefined&apos; || identifiers.length&gt;0) {
	var columnName= &apos;Identifiers&apos;;
	// Create Identifiers JSON object
	var objIdentifiers= {};
	objIdentifiers[columnName]= identifiers;
	Object.assign(tmp[&apos;Patient&apos;], objIdentifiers);
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG objIdentifiers: &quot;+JSON.stringify(tmp[&apos;Patient&apos;][&apos;Identifiers&apos;])); }
}

if(debug&gt;0) {
	logger.info(scriptName+&quot;::DEBUG patientIdentifiers: &quot;+patientIdentifiers); 
	logger.info(scriptName+&quot;::DEBUG PatientID: &quot;+JSON.stringify(tmp[&apos;Patient&apos;][&apos;Identifiers&apos;])); 
}

channelMap.put(&apos;PatientID&apos;,JSON.stringify(tmp[&apos;Patient&apos;][&apos;Identifiers&apos;][0][&apos;ID&apos;]).replace(/[&apos;&quot;]+/g, &apos;&apos;));

tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;FirstName&apos;]= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString();
tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;LastName&apos;]= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString();
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;MiddleName&apos;]= msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString();
}
tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;DOB&apos;]= msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString().replace(/[^0-9]/g, &quot;&quot;).slice(0,6);
// 2020-12-10 jer - Modified to use slice method for PID.8.1 to only return first character of sex
tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Sex&apos;]= msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString().slice(0,1);
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Race&apos;]= msg[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;].toString(); 
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;StreetAddress&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;City&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.4&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;State&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.4&apos;].toString(); 
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;ZIP&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.12&apos;][&apos;PID.12.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;County&apos;]= msg[&apos;PID&apos;][&apos;PID.12&apos;][&apos;PID.12.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.6&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Address&apos;][&apos;Country&apos;]= msg[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.6&apos;].toString();
}
// Home Phone and Email Address - PID.13[0] instance
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Home&apos;]= msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.4&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;EmailAddresses&apos;]= msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.4&apos;].toString();
}
// Office Phone
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;PhoneNumber&apos;][&apos;Office&apos;]= msg[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.26&apos;][&apos;PID.26.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Citizenship&apos;]= msg[&apos;PID&apos;][&apos;PID.26&apos;][&apos;PID.26.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;Language&apos;]= msg[&apos;PID&apos;][&apos;PID.15&apos;][&apos;PID.15.1&apos;].toString();
}
// Martial Status
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;MaritalStatus&apos;]= msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;].toString();
} 
// Account Number and Visit Number
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;]= msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;]= msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PID&apos;][&apos;PID.30&apos;][&apos;PID.30.1&apos;], debug)!== null) {
	tmp[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;IsDeceased&apos;]= msg[&apos;PID&apos;][&apos;PID.30&apos;][&apos;PID.30.1&apos;].toString();
}

// Visit - PV1 Segment
if(msg[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString().length&gt;0) {
	if(msg[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString()== &apos;O&apos;) {
		tmp[&apos;Visit&apos;][&apos;PatientClass&apos;]= &quot;Outpatient&quot;;
	} else if(msg[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString()== &apos;I&apos;) {
		tmp[&apos;Visit&apos;][&apos;PatientClass&apos;]= &quot;Inpatient&quot;;
	} else if(msg[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString()== &apos;E&apos;) {
		tmp[&apos;Visit&apos;][&apos;PatientClass&apos;]= &quot;Emergency&quot;;
	} else {
		tmp[&apos;Visit&apos;][&apos;PatientClass&apos;]= &quot;Other&quot;;
	}
}

if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Department&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Room&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Facility&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.6&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Type&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.6&apos;].toString();
}

// Set VisitDateTime from PV1.44
if(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString() !== &apos;undefined&apos;) {
	if(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString().length&gt;0 &amp;&amp; (msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString().indexOf(&quot;T&quot;)&lt;0)) {
		var strModifiedVisitDateTime= toISODate(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString(),&quot;America/Los_Angeles&quot;);
		tmp[&apos;Visit&apos;][&apos;VisitDateTime&apos;]= strModifiedVisitDateTime;
	} else {
		tmp[&apos;Visit&apos;][&apos;VisitDateTime&apos;]= msg[&apos;SCH&apos;][&apos;SCH.11&apos;][&apos;SCH.11.4&apos;].toString();
	}
}

// Attending Provider PV1.7
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;ID&apos;]= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.2&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;LastName&apos;]= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.3&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;FirstName&apos;]= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.3&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.13&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;AttendingProvider&apos;][&apos;IDType&apos;]= msg[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.13&apos;].toString();
}

//  Referring Provider PV1.8
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ReferringProvider&apos;][&apos;ID&apos;]= msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.2&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ReferringProvider&apos;][&apos;LastName&apos;]= msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.3&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ReferringProvider&apos;][&apos;FirstName&apos;]= msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.3&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.13&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ReferringProvider&apos;][&apos;IDType&apos;]= msg[&apos;PV1&apos;][&apos;PV1.8&apos;][&apos;PV1.8.13&apos;].toString();
}

//  Consulting Provider PV1.9
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ConsultingProvider&apos;][&apos;ID&apos;]= msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.1&apos;].toString()
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.2&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ConsultingProvider&apos;][&apos;LastName&apos;]= msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.2&apos;].toString()
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.3&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ConsultingProvider&apos;][&apos;FirstName&apos;]= msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.3&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.13&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;ConsultingProvider&apos;][&apos;IDType&apos;]= msg[&apos;PV1&apos;][&apos;PV1.9&apos;][&apos;PV1.9.13&apos;].toString();
}
// logger.info(scriptName+&quot;::DEBUG checkElementIfUndefined PV1.3.4: &quot;+msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;]+&quot; typeof: &quot;+typeof(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;])+&quot; string: &quot;+msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString()+&quot; length: &quot;+msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString().length);

// Visit Location PV1.3
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.6&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Type&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.6&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Facility&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.4&apos;][&apos;PV1.3.4.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Department&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Room&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.3&apos;], debug)!== null) {
	tmp[&apos;Visit&apos;][&apos;Location&apos;][&apos;Bed&apos;]= msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.3&apos;].toString();
}

// General Order Control ORC
if(msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString().indexOf(&quot;NW&quot;)&gt;-1) {
	tmp[&apos;Order&apos;][&apos;Status&apos;]= &quot;New&quot;;
} else if(msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString().indexOf(&quot;CA&quot;)&gt;-1) {
	tmp[&apos;Order&apos;][&apos;Status&apos;]= &quot;Cancelled&quot;;
} else if(msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString().indexOf(&quot;CM&quot;)&gt;-1) {
	tmp[&apos;Order&apos;][&apos;Status&apos;]= &quot;Completed&quot;;
} else if(msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString().indexOf(&quot;DC&quot;)&gt;-1) {
	tmp[&apos;Order&apos;][&apos;Status&apos;]= &quot;Discontinued&quot;;
} else if(msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString().indexOf(&quot;IP&quot;)&gt;-1) {
	tmp[&apos;Order&apos;][&apos;Status&apos;]= &quot;In-Process&quot;;
} else {
	tmp[&apos;Order&apos;][&apos;Status&apos;]= &quot;New&quot;;
}

// Order Id ORC.2
tmp[&apos;Order&apos;][&apos;ID&apos;]= msg[&apos;ORC&apos;][&apos;ORC.2&apos;][0][&apos;ORC.2.1&apos;].toString();

// Order Priority ORC.7
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.6&apos;], debug)!== null) {
	switch(msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.6&apos;].toString()) {
   		case &quot;Urgent&quot; : tmp[&apos;Order&apos;][&apos;Priority&apos;]= &quot;ASAP&quot;;
      	break;
	}
}

// Transaction DateTime from ORC.9.1
if(msg[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;].toString() !== &apos;undefined&apos;) {
	if(msg[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;].toString().length&gt;0 &amp;&amp; (msg[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;].toString().indexOf(&quot;T&quot;)&lt;0)) {
		var strModifiedTransactionDateTime= toISODate(msg[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;].toString(),&quot;America/Los_Angeles&quot;);
		tmp[&apos;Order&apos;][&apos;TransactionDateTime&apos;]= strModifiedTransactionDateTime;
	} else {
		tmp[&apos;Order&apos;][&apos;TransactionDateTime&apos;]= msg[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;].toString();
	}
}

// Collection DateTime from ORC.7.4
if(msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.4&apos;].toString() !== &apos;undefined&apos;) {
	if(msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.4&apos;].toString().length&gt;0 &amp;&amp; (msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.4&apos;].toString().indexOf(&quot;T&quot;)&lt;0)) {
		var strModifiedCollectionDateTime= toISODate(msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.4&apos;].toString(),&quot;America/Los_Angeles&quot;);
		tmp[&apos;Order&apos;][&apos;CollectionDateTime&apos;]= strModifiedCollectionDateTime;
	} else {
		tmp[&apos;Order&apos;][&apos;CollectionDateTime&apos;]= msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.4&apos;].toString();
	}
}

// Ordering Provider ORC.10
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.1&apos;], debug)!== null) {
	tmp[&apos;Order&apos;][&apos;Provider&apos;][&apos;NPI&apos;]= msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.13&apos;], debug)!== null) {
	tmp[&apos;Order&apos;][&apos;Provider&apos;][&apos;IDType&apos;]= msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.13&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.3&apos;], debug)!== null) {
	tmp[&apos;Order&apos;][&apos;Provider&apos;][&apos;FirstName&apos;]= msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.3&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.2&apos;], debug)!== null) {
	tmp[&apos;Order&apos;][&apos;Provider&apos;][&apos;LastName&apos;]= msg[&apos;ORC&apos;][&apos;ORC.10&apos;][&apos;ORC.10.2&apos;].toString();
}

// OBR segment -&gt; Order
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.1&apos;], debug)!== null) {
	tmp[&apos;Order&apos;][&apos;Procedure&apos;][&apos;Code&apos;]= msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.2&apos;], debug)!== null) {
	tmp[&apos;Order&apos;][&apos;Procedure&apos;][&apos;Description&apos;]= msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.2&apos;].toString();
}

// OBR Segment -&gt; Ordering Provider
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.1&apos;], debug)!== null) {
	tmp[&apos;Order&apos;][&apos;Provider&apos;][&apos;NPI&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.1&apos;].toString();
	tmp[&apos;Order&apos;][&apos;Provider&apos;][&apos;ID&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.1&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.2&apos;], debug)!== null) {
	tmp[&apos;Order&apos;][&apos;Provider&apos;][&apos;LastName&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.2&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.3&apos;], debug)!== null) {
	tmp[&apos;Order&apos;][&apos;Provider&apos;][&apos;FirstName&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.3&apos;].toString();
}
if(checkElementIfUndefined(msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.13&apos;], debug)!== null) {
	tmp[&apos;Order&apos;][&apos;Provider&apos;][&apos;IDType&apos;]= msg[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.13&apos;].toString();
}

channelMap.put(&apos;json_out&apos;,tmp);
return tmp;</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64">TVNIfF5+XCZ8fHx8fHx8fHx8fHx8fHx8fHx8ClpTSHwKUElEfHx8fHx8fHwKUFYxfHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHwKT1JDfHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fApPQlJ8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHwKWk9SfHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fA==</inboundTemplate>
          <outboundTemplate encoding="base64">ewoJIk1ldGEiOiB7CgkJIkRhdGFNb2RlbCI6IG51bGwsCgkJIkV2ZW50VHlwZSI6IG51bGwsCgkJIkV2ZW50RGF0ZVRpbWUiOiBudWxsLAoJCSJUZXN0IjogbnVsbCwKCQkiU291cmNlIjogewoJCQkiSUQiOiBudWxsLAoJCQkiTmFtZSI6IG51bGwKCQl9LAoJCSJEZXN0aW5hdGlvbnMiOiBbCgkJCXsKCQkJCSJJRCI6IG51bGwsCgkJCQkiTmFtZSI6IG51bGwKCQkJfQoJCV0sCgkJIk1lc3NhZ2UiOiB7CgkJCSJJRCI6IG51bGwKCQl9LAoJCSJUcmFuc21pc3Npb24iOiB7CgkJCSJJRCI6IG51bGwKCQl9LAoJCSJGYWNpbGl0eUNvZGUiOiBudWxsCgl9LAoJIlBhdGllbnQiOiB7CgkJIklkZW50aWZpZXJzIjogWwoJCQl7CgkJCQkiSUQiOiBudWxsLAoJCQkJIklEVHlwZSI6IG51bGwKCQkJfQoJCV0sCgkJIkRlbW9ncmFwaGljcyI6IHsKCQkJIkZpcnN0TmFtZSI6IG51bGwsCgkJCSJNaWRkbGVOYW1lIjogbnVsbCwKCQkJIkxhc3ROYW1lIjogbnVsbCwKCQkJIkRPQiI6IG51bGwsCgkJCSJTU04iOiBudWxsLAoJCQkiU2V4IjogbnVsbCwKCQkJIlJhY2UiOiBudWxsLAoJCQkiSXNIaXNwYW5pYyI6IG51bGwsCgkJCSJNYXJpdGFsU3RhdHVzIjogbnVsbCwKCQkJIklzRGVjZWFzZWQiOiBudWxsLAoJCQkiRGVhdGhEYXRlVGltZSI6IG51bGwsCgkJCSJQaG9uZU51bWJlciI6IHsKCQkJCSJIb21lIjogbnVsbCwKCQkJCSJPZmZpY2UiOiBudWxsLAoJCQkJIk1vYmlsZSI6IG51bGwKCQkJfSwKCQkJIkVtYWlsQWRkcmVzc2VzIjogW10sCgkJCSJMYW5ndWFnZSI6IG51bGwsCgkJCSJDaXRpemVuc2hpcCI6IFtdLAoJCQkiQWRkcmVzcyI6IHsKCQkJCSJTdHJlZXRBZGRyZXNzIjogbnVsbCwKCQkJCSJDaXR5IjogbnVsbCwKCQkJCSJTdGF0ZSI6IG51bGwsCgkJCQkiWklQIjogbnVsbCwKCQkJCSJDb3VudHkiOiBudWxsLAoJCQkJIkNvdW50cnkiOiBudWxsCgkJCX0KCQl9LCAKCQkiTm90ZXMiOiBbXQoJfSwKCSJWaXNpdCI6IHsKCQkiVmlzaXROdW1iZXIiOiBudWxsLAoJCSJBY2NvdW50TnVtYmVyIjogbnVsbCwKCQkiUGF0aWVudENsYXNzIjogbnVsbCwKCQkiVmlzaXREYXRlVGltZSI6IG51bGwsCgkJIkF0dGVuZGluZ1Byb3ZpZGVyIjogewoJCQkiSUQiOiBudWxsLAoJCQkiSURUeXBlIjogbnVsbCwKCQkJIkZpcnN0TmFtZSI6IG51bGwsCgkJCSJMYXN0TmFtZSI6IG51bGwsCgkJCSJDcmVkZW50aWFscyI6IFtdLAoJCQkiQWRkcmVzcyI6IHsKCQkJCSJTdHJlZXRBZGRyZXNzIjogbnVsbCwKCQkJCSJDaXR5IjogbnVsbCwKCQkJCSJTdGF0ZSI6IG51bGwsCgkJCQkiWklQIjogbnVsbCwKCQkJCSJDb3VudHkiOiBudWxsLAoJCQkJIkNvdW50cnkiOiBudWxsCgkJCX0sCgkJCSJFbWFpbEFkZHJlc3NlcyI6IFtdLAoJCQkiUGhvbmVOdW1iZXIiOiB7CgkJCQkiT2ZmaWNlIjogbnVsbAoJCQl9LAoJCQkiTG9jYXRpb24iOiB7CgkJCQkiVHlwZSI6IG51bGwsCgkJCQkiRmFjaWxpdHkiOiBudWxsLAoJCQkJIkRlcGFydG1lbnQiOiBudWxsLAoJCQkJIlJvb20iOiBudWxsCgkJCX0KCQl9LAoJCSJDb25zdWx0aW5nUHJvdmlkZXIiOiB7CgkJCSJJRCI6IG51bGwsCgkJCSJJRFR5cGUiOiBudWxsLAoJCQkiRmlyc3ROYW1lIjogbnVsbCwKCQkJIkxhc3ROYW1lIjogbnVsbCwKCQkJIkNyZWRlbnRpYWxzIjogW10sCgkJCSJBZGRyZXNzIjogewoJCQkJIlN0cmVldEFkZHJlc3MiOiBudWxsLAoJCQkJIkNpdHkiOiBudWxsLAoJCQkJIlN0YXRlIjogbnVsbCwKCQkJCSJaSVAiOiBudWxsLAoJCQkJIkNvdW50eSI6IG51bGwsCgkJCQkiQ291bnRyeSI6IG51bGwKCQkJfSwKCQkJIkVtYWlsQWRkcmVzc2VzIjogW10sCgkJCSJQaG9uZU51bWJlciI6IHsKCQkJCSJPZmZpY2UiOiBudWxsCgkJCX0sCgkJCSJMb2NhdGlvbiI6IHsKCQkJCSJUeXBlIjogbnVsbCwKCQkJCSJGYWNpbGl0eSI6IG51bGwsCgkJCQkiRGVwYXJ0bWVudCI6IG51bGwsCgkJCQkiUm9vbSI6IG51bGwKCQkJfQoJCX0sCgkJIlJlZmVycmluZ1Byb3ZpZGVyIjogewoJCQkiSUQiOiBudWxsLAoJCQkiSURUeXBlIjogbnVsbCwKCQkJIkZpcnN0TmFtZSI6IG51bGwsCgkJCSJMYXN0TmFtZSI6IG51bGwsCgkJCSJDcmVkZW50aWFscyI6IFtdLAoJCQkiQWRkcmVzcyI6IHsKCQkJCSJTdHJlZXRBZGRyZXNzIjogbnVsbCwKCQkJCSJDaXR5IjogbnVsbCwKCQkJCSJTdGF0ZSI6IG51bGwsCgkJCQkiWklQIjogbnVsbCwKCQkJCSJDb3VudHkiOiBudWxsLAoJCQkJIkNvdW50cnkiOiBudWxsCgkJCX0sCgkJCSJFbWFpbEFkZHJlc3NlcyI6IFtdLAoJCQkiUGhvbmVOdW1iZXIiOiB7CgkJCQkiT2ZmaWNlIjogbnVsbAoJCQl9LAoJCQkiTG9jYXRpb24iOiB7CgkJCQkiVHlwZSI6IG51bGwsCgkJCQkiRmFjaWxpdHkiOiBudWxsLAoJCQkJIkRlcGFydG1lbnQiOiBudWxsLAoJCQkJIlJvb20iOiBudWxsCgkJCX0KCQl9LAoJCSJHdWFyYW50b3IiOiB7CgkJCSJOdW1iZXIiOiBudWxsLAoJCQkiRmlyc3ROYW1lIjogbnVsbCwKCQkJIk1pZGRsZU5hbWUiOiBudWxsLAoJCQkiTGFzdE5hbWUiOiBudWxsLAoJCQkiU1NOIjogbnVsbCwKCQkJIkRPQiI6IG51bGwsCgkJCSJTZXgiOiBudWxsLAoJCQkiU3BvdXNlIjogewoJCQkJIkZpcnN0TmFtZSI6IG51bGwsCgkJCQkiTGFzdE5hbWUiOiBudWxsCgkJCX0sCgkJCSJBZGRyZXNzIjogewoJCQkJIlN0cmVldEFkZHJlc3MiOiBudWxsLAoJCQkJIkNpdHkiOiBudWxsLAoJCQkJIlN0YXRlIjogbnVsbCwKCQkJCSJaSVAiOiBudWxsLAoJCQkJIkNvdW50eSI6IG51bGwsCgkJCQkiQ291bnRyeSI6IG51bGwKCQkJfSwKCQkJIlBob25lTnVtYmVyIjogewoJCQkJIkhvbWUiOiBudWxsLAoJCQkJIkJ1c2luZXNzIjogbnVsbCwKCQkJCSJNb2JpbGUiOiBudWxsCgkJCX0sCgkJCSJFbWFpbEFkZHJlc3NlcyI6IFtdLAoJCQkiVHlwZSI6IG51bGwsCgkJCSJSZWxhdGlvblRvUGF0aWVudCI6IG51bGwsCgkJCSJFbXBsb3llciI6IHsKCQkJCSJOYW1lIjogbnVsbCwKCQkJCSJBZGRyZXNzIjogewoJCQkJCSJTdHJlZXRBZGRyZXNzIjogbnVsbCwKCQkJCQkiQ2l0eSI6IG51bGwsCgkJCQkJIlN0YXRlIjogbnVsbCwKCQkJCQkiWklQIjogbnVsbCwKCQkJCQkiQ291bnR5IjogbnVsbCwKCQkJCQkiQ291bnRyeSI6IG51bGwKCQkJCX0sCgkJCQkiUGhvbmVOdW1iZXIiOiBudWxsCgkJCX0KCQl9LAoJCSJJbnN1cmFuY2VzIjogewoJCQkiUGxhbiI6IHsKCQkJCSJJRCI6IG51bGwsCgkJCQkiSURUeXBlIjogbnVsbCwKCQkJCSJOYW1lIjogbnVsbCwKCQkJCSJUeXBlIjogbnVsbAoJCQl9LAoJCQkiTWVtYmVyTnVtYmVyIjogbnVsbCwKCQkJIkNvbXBhbnkiOiB7CgkJCQkiSUQiOiBudWxsLAoJCQkJIklEVHlwZSI6IG51bGwsCgkJCQkiTmFtZSI6IG51bGwsCgkJCQkiQWRkcmVzcyI6IHsKCQkJCQkiU3RyZWV0QWRkcmVzcyI6IG51bGwsCgkJCQkJIkNpdHkiOiBudWxsLAoJCQkJCSJTdGF0ZSI6IG51bGwsCgkJCQkJIlpJUCI6IG51bGwsCgkJCQkJIkNvdW50eSI6IG51bGwsCgkJCQkJIkNvdW50cnkiOiBudWxsCgkJCQl9LAoJCQkJIlBob25lTnVtYmVyIjogbnVsbAoJCQl9LAoJCQkiR3JvdXBOdW1iZXIiOiBudWxsLAoJCQkiR3JvdXBOYW1lIjogbnVsbCwKCQkJIkVmZmVjdGl2ZURhdGUiOiBudWxsLAoJCQkiRXhwaXJhdGlvbkRhdGUiOiBudWxsLAoJCQkiUG9saWN5TnVtYmVyIjogbnVsbCwKCQkJIkFncmVlbWVudFR5cGUiOiBudWxsLAoJCQkiQ292ZXJhZ2VUeXBlIjogbnVsbCwKCQkJIkluc3VyZWQiOiB7CgkJCQkiSWRlbnRpZmllcnMiOiBbXSwKCQkJCSJMYXN0TmFtZSI6IG51bGwsCgkJCQkiTWlkZGxlTmFtZSI6IG51bGwsCgkJCQkiRmlyc3ROYW1lIjogbnVsbCwKCQkJCSJTU04iOiBudWxsLAoJCQkJIlJlbGF0aW9uc2hpcCI6IG51bGwsCgkJCQkiRE9CIjogbnVsbCwKCQkJCSJTZXgiOiBudWxsLAoJCQkJIkFkZHJlc3MiOiB7CgkJCQkJIlN0cmVldEFkZHJlc3MiOiBudWxsLAoJCQkJCSJDaXR5IjogbnVsbCwKCQkJCQkiU3RhdGUiOiBudWxsLAoJCQkJCSJaSVAiOiBudWxsLAoJCQkJCSJDb3VudHkiOiBudWxsLAoJCQkJCSJDb3VudHJ5IjogbnVsbAoJCQkJfQoJCQl9LAoJCQkiTG9jYXRpb24iOiB7CgkJCQkiVHlwZSI6IG51bGwsCgkJCQkiRmFjaWxpdHkiOiBudWxsLAoJCQkJIkRlcGFydG1lbnQiOiBudWxsLAoJCQkJIlJvb20iOiBudWxsLAoJCQkJIkJlZCI6IG51bGwKCQkJfQoJCX0KCX0sCgkiT3JkZXIiOiB7CgkJCSJJRCI6IG51bGwsCgkJCSJBcHBsaWNhdGlvbk9yZGVySUQiOiBudWxsLAoJCQkiU3RhdHVzIjogbnVsbCwKCQkJIlRyYW5zYWN0aW9uRGF0ZVRpbWUiOiBudWxsLAoJCQkiQ29sbGVjdGlvbkRhdGVUaW1lIjogbnVsbCwKCQkJIlNwZWNpbWVuIjogewoJCQkJIlNvdXJjZSI6IG51bGwsCgkJCQkiQm9keVNpdGUiOiBudWxsLAoJCQkJIklEIjogbnVsbAoJCQl9LAoJCQkiUHJvY2VkdXJlIjogewoJCQkJIkNvZGUiOiBudWxsLAoJCQkJIkNvZGVzZXQiOiBudWxsLAoJCQkJIkRlc2NyaXB0aW9uIjogbnVsbAoJCQl9LAoJCQkiUHJvdmlkZXIiOiB7CgkJCQkiTlBJIjogbnVsbCwKCQkJCSJJRCI6IG51bGwsCgkJCQkiSURUeXBlIjogbnVsbCwKCQkJCSJGaXJzdE5hbWUiOiBudWxsLAoJCQkJIkxhc3ROYW1lIjogbnVsbCwKCQkJCSJDcmVkZW50aWFscyI6IFtdLAoJCQkJIkFkZHJlc3MiOiB7CgkJCQkJIlN0cmVldEFkZHJlc3MiOiBudWxsLAoJCQkJCSJDaXR5IjogbnVsbCwKCQkJCQkiU3RhdGUiOiBudWxsLAoJCQkJCSJaSVAiOiBudWxsLAoJCQkJCSJDb3VudHkiOiBudWxsLAoJCQkJCSJDb3VudHJ5IjogbnVsbAoJCQkJfSwKCQkJCSJFbWFpbEFkZHJlc3NlcyI6IG51bGwsCgkJCQkiUGhvbmVOdW1iZXIiOiB7CgkJCQkJIk9mZmljZSI6IG51bGwKCQkJCX0sCgkJCQkiTG9jYXRpb24iOiB7CgkJCQkJIlR5cGUiOiBudWxsLAoJCQkJCSJGYWNpbGl0eSI6IG51bGwsCgkJCQkJIkRlcGFydG1lbnQiOiBudWxsLAoJCQkJCSJSb29tIjogbnVsbAoJCQkJfQoJCQl9LAoJCQkiUmVzdWx0Q29weVByb3ZpZGVycyI6IFtdLAoJCQkiT3JkZXJpbmdGYWNpbGl0eSI6IHsKCQkJCSJOYW1lIjogbnVsbCwKCQkJCSJBZGRyZXNzIjogewoJCQkJCSJTdHJlZXRBZGRyZXNzIjogbnVsbCwKCQkJCQkiQ2l0eSI6IG51bGwsCgkJCQkJIlN0YXRlIjogbnVsbCwKCQkJCQkiWklQIjogbnVsbCwKCQkJCQkiQ291bnR5IjogbnVsbCwKCQkJCQkiQ291bnRyeSI6IG51bGwKCQkJCX0sCgkJCQkiUGhvbmVOdW1iZXIiOiBudWxsCgkJCX0sCgkJCSJQcmlvcml0eSI6IG51bGwsCgkJCSJFeHBpcmF0aW9uIjogbnVsbCwKCQkJIkNvbW1lbnRzIjogbnVsbCwKCQkJIk5vdGVzIjogW10sCgkJCSJEaWFnbm9zZXMiOiBbCgkJCXsKCQkJCSJDb2RlIjogbnVsbCwKCQkJCSJDb2Rlc2V0IjogbnVsbCwKCQkJCSJOYW1lIjogbnVsbCwKCQkJCSJUeXBlIjogbnVsbCwKCQkJCSJEb2N1bWVudGVkRGF0ZVRpbWUiOiBudWxsCgkJCX0KCQkJXSwKCQkJIkNsaW5pY2FsSW5mbyI6IHsKCQkJCSJDb2RlIjogbnVsbCwKCQkJCSJDb2Rlc2V0IjogbnVsbCwKCQkJCSJEZXNjcmlwdGlvbiI6IG51bGwsCgkJCQkiVmFsdWUiOiBudWxsLAoJCQkJIlVuaXRzIjogbnVsbCwKCQkJCSJBYmJyZXZpYXRpb24iOiBudWxsLAoJCQkJIk5vdGVzIjogW10KCQkJfQoJCX0KfQ==</outboundTemplate>
          <inboundDataType>HL7V2</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
              <handleRepetitions>true</handleRepetitions>
              <handleSubcomponents>true</handleSubcomponents>
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <stripNamespaces>true</stripNamespaces>
              <segmentDelimiter>\r</segmentDelimiter>
              <convertLineBreaks>true</convertLineBreaks>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <segmentDelimiter>\r</segmentDelimiter>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
              <splitType>MSH_Segment</splitType>
              <batchScript></batchScript>
            </batchProperties>
            <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
              <segmentDelimiter>\r</segmentDelimiter>
              <successfulACKCode>AA</successfulACKCode>
              <successfulACKMessage></successfulACKMessage>
              <errorACKCode>AE</errorACKCode>
              <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
              <rejectedACKCode>AR</rejectedACKCode>
              <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
              <msh15ACKAccept>false</msh15ACKAccept>
              <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
            </responseGenerationProperties>
            <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
              <successfulACKCode>AA,CA</successfulACKCode>
              <errorACKCode>AE,CE</errorACKCode>
              <rejectedACKCode>AR,CR</rejectedACKCode>
              <validateMessageControlId>true</validateMessageControlId>
              <originalMessageControlId>Destination_Encoded</originalMessageControlId>
              <originalIdMapVariable></originalIdMapVariable>
            </responseValidationProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.12.0">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.12.0">
          <metaDataId>5</metaDataId>
          <name>FileWriter - All HL7 messages</name>
          <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <scheme>FILE</scheme>
            <host>C:/HL7/JSON/OUT</host>
            <outputPattern>${EventType}_${PatientID}_${MessageID}.json</outputPattern>
            <anonymous>true</anonymous>
            <username>anonymous</username>
            <password>anonymous</password>
            <timeout>10000</timeout>
            <keepConnectionOpen>false</keepConnectionOpen>
            <maxIdleTime>0</maxIdleTime>
            <secure>true</secure>
            <passive>true</passive>
            <validateConnection>true</validateConnection>
            <outputAppend>false</outputAppend>
            <errorOnExists>false</errorOnExists>
            <temporary>false</temporary>
            <binary>false</binary>
            <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
            <template>${message.encodedData}</template>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>File Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>11</metaDataId>
          <name>HTTP Sender - Order New O19</name>
          <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <host></host>
            <useProxyServer>false</useProxyServer>
            <proxyAddress></proxyAddress>
            <proxyPort></proxyPort>
            <method>post</method>
            <headers class="linked-hash-map"/>
            <parameters class="linked-hash-map"/>
            <useHeadersVariable>false</useHeadersVariable>
            <useParametersVariable>false</useParametersVariable>
            <responseXmlBody>false</responseXmlBody>
            <responseParseMultipart>true</responseParseMultipart>
            <responseIncludeMetadata>false</responseIncludeMetadata>
            <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
            <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
            <multipart>false</multipart>
            <useAuthentication>false</useAuthentication>
            <authenticationType>Basic</authenticationType>
            <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
            <username></username>
            <password></password>
            <content></content>
            <contentType>text/plain</contentType>
            <dataTypeBinary>false</dataTypeBinary>
            <charset>NONE</charset>
            <socketTimeout>30000</socketTimeout>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>HTTP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.12.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>EVENTTYPE</name>
            <type>STRING</type>
            <mappingName>EventType</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>SOURCENAME</name>
            <type>STRING</type>
            <mappingName>Source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>MESSAGEID</name>
            <type>STRING</type>
            <mappingName>MessageID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>VISITNUMBER</name>
            <type>STRING</type>
            <mappingName>VisitNumber</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.12.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1607615054536</time>
            <timezone>America/Chicago</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.12.0">
            <id>6975d386-da5e-4267-aa01-5d181743a931</id>
            <name>AristaMd-Utilities</name>
            <revision>22</revision>
            <lastModified>
              <time>1690987302603</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>This library was added upon migration to version 3.3.0. It includes all pre-existing
code templates, and is set to be included on all pre-existing and new channels.

You should create your own new libraries and assign code templates to them as you
see fit. You should also link libraries to specific channels, so that you&apos;re not
necessarily including all code templates on all channels all the time.</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>b484c4c9-6c84-4f8e-b2ec-9bff6a8cf7db</id>
                <name>checkHL7ElementIfUndefined</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262649</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	checkElementIfUndefined (element, debug)
	
	- Function to check provided Element if Undefined or length less than 1 character return null.

	@param {element} - XML object provided (e.g. msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.1&apos;]
	@return {String} return XML object or null object reference
*/
function checkElementIfUndefined (element, debug) {
	var scriptName= &apos;checkHL7ElementIfUndefined&apos;;

	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG element: &quot;+element+&quot; typeof: &quot;+typeof(element)+&quot; string: &quot;+element.toString()+&quot; length: &quot;+element.toString().length); }
	
	if(element == &apos;undefined&apos;) {
		return null;
	} else {
		if(element.toString().length&lt;1) {
			return null;
		} else {
			return element;
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b9651842-7ccb-4761-aedf-a9a1461dd5f7</id>
                <name>Convert HL7 Date Format to ISO</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262839</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts standard HL7 v2.x date format to human-readable ISO date format
*/

/*
	Author: IntegrateIT.us LLC
	toISODate: Returns an ISO-formatted date string with specified timezone offset

	Arguments
	---------
		Required
		--------
			hl7DateString:		An HL7-formatted date string (ex: &quot;yyyyMMddHHmmss&quot;

		Optional
		--------
			timezome:			A timezone identifier string corresponding to one of the java.util.TimeZone values (ex: &quot;US/Central&quot;)
*/

function toISODate( hl7DateString, timezone ) {
	var isoDate;
	var dateString;
	var hl7Formatter;
	var isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);

	if (timezone) {
		isoFormatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timezone));
	}
	
	if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString.substring(0,13)) &amp;&amp; hl7DateString.length &gt; 14 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmssZ&quot;);
	}
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 14 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
	} 
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 12 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);
	} 
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 8 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMdd&quot;);
	} 
	else dateString = hl7DateString;
	
	try {
		if (hl7Formatter) {
			isoDate = hl7Formatter.parse(hl7DateString);
			isoDate = isoFormatter.format(isoDate);
			dateString = new String(isoDate);
		}
	} catch (err) {
		dateString = hl7DateString;
	} finally {
		return dateString;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>95e528b7-1e7f-490e-86da-7c14b23ee4f3</id>
                <name>Convert ISO Date Format to HL7</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262912</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts ISO date format to HL7 v2 format - toHL7Date( isoDateString, timezone, debug )
*/

/*
	Author: IntegrateIT.us LLC
	toHL7Date: Returns an HL7-formatted date string with specified timezone offset

	Arguments
	---------
		Required
		--------
			isoDateString:		An ISO-formatted date string (ex: &quot;yyyy-MM-ddTHH:mm:ssZ&quot;

		Optional
		--------
			timezome:			A timezone identifier string corresponding to one of the java.util.TimeZone values (ex: &quot;US/Central&quot;)
*/

function toHL7Date( isoDateString, timezone, debug ) 
{
	var scriptName= &quot;toHL7Date&quot;;
	var hl7Date;
	var dateString;
	var isoFormatter;
	var hl7Formatter;

	// 2020-11-07T00:01:22+00:00
	var strTimeZone= &quot;GMT-8:00&quot;;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG:BEGIN isoDateString: &quot;+isoDateString+&quot;, timezone: &quot;+timezone+&quot;, strTimeZone: &quot;+strTimeZone); }

	// ISO Date Format: yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;
	if ( isoDateString != null &amp;&amp; isoDateString.length &lt;= 25 &amp;&amp; isoDateString.length &gt;= 22) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmssZ&quot;);
		if (timezone) {
			hl7Formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(strTimeZone));
		}
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG:UPDATE isoDateString: &quot;+isoDateString+&quot;, isoFormatter: &quot;+isoFormatter.toString()+&quot;, hl7Formatter: &quot;+hl7Formatter.toString()+&quot;, timezone: &quot;+timezone+&quot;, strTimeZone: &quot;+strTimeZone); }
	}
	// ISO Date Format: yyyy-MM-dd HH:mm:ss
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 19 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
	}
	// ISO Date Format: yyyy-MM-dd HH:mm
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 16 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);
	} 
	// ISO Date Format: yyyy-MM-dd
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 10 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMdd&quot;);	
	}
	// None of the above, return original date string.
	else dateString = isoDateString;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG:END isoDateString: &quot;+isoDateString+&quot;, isoFormatter: &quot;+isoFormatter.toString()+&quot;, hl7Formatter: &quot;+hl7Formatter.toString()+&quot;, timezone: &quot;+timezone+&quot;, strTimeZone: &quot;+strTimeZone); }

	try {
		if (isoFormatter) {
			hl7Date = isoFormatter.parse(isoDateString);
			hl7Date = hl7Formatter.format(hl7Date);
			dateString = new String(hl7Date);
		}
	} catch (err) {
		dateString = isoDateString;
	} finally {
		return dateString;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>41b1ac94-64c4-42ed-a501-a0caca7ae187</id>
                <name>convertMDYtoHL7DateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911263005</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	Convert MM-DD-YY HH:MM format to HL7 format
	
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function convertMDYtoHL7DateTime(eventDateTime, debug) {

	var scriptName= &apos;convertMDYtoHL7DateTime&apos;;
	if(typeof(debug) == &apos;undefined&apos;) { var debug= 0; }

	var lstEventDateTime= eventDateTime.toUpperCase().split(&quot; &quot;);
	var tEventDateTime= &quot;&quot;.concat(lstEventDateTime[0]).concat(&quot; &quot;).concat(lstEventDateTime[1]);

	var nEventDate= tEventDateTime.slice(6,8).concat(&quot;20&quot;).concat(tEventDateTime.slice(0,2)).concat(tEventDateTime.slice(3,5));
	var nEventTime= tEventDateTime.split(&quot; &quot;)[1];

	if(nEventTime.toString().indexOf(&quot;PM&quot;)&gt;-1) {
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG: eventTime contains PM: &quot; + nEventTime.toString().indexOf(&quot;PM&quot;)); }
		if(nEventTime.toString().length&lt;7) {
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG: eventTime length&lt;7 chars: &quot; + nEventTime.toString().length); } 
			var addLeadingZero= 12;
			var tHours= nEventTime.split(&quot;:&quot;)[0];
			var tMinutes= nEventTime.split(&quot;:&quot;)[1].replace(/[^0-9]/g, &quot;&quot;);
			var tHours= parseInt(addLeadingZero) + parseInt(tHours);
			var tEventTime= tHours.toString().concat(tMinutes.toString()).concat(&quot;00&quot;);
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG: new EventTime: &quot; + tEventTime.toString()); } 
		} else { 
			var tEventTime= nEventTime.toString().replace(/[^0-9]/g, &quot;&quot;) + &quot;00&quot;; 
		} 
	} else {
		var tEventTime= &quot;0&quot; + nEventTime.toString().replace(/[^0-9]/g, &quot;&quot;) + &quot;00&quot;; 
	}
	var nEventDateTime= nEventDate.toString().concat(tEventTime.toString());
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG datetime: &quot;+nEventDateTime); }

	return nEventDateTime;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>af95fd5e-8686-4b90-bd08-f11b4f5e78ee</id>
                <name>currentDate_yyyyMMddhhmmss</name>
                <revision>1</revision>
                <lastModified>
                  <time>1653055235571</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** currentDate_yyyyMMddhhmmss

  	- Desc: This function returns current DateTime only YYYYMMDDHHMMSS format

	@return {string} datetime - this string object contains the current DateTime only YYYYMMDDHHMMSS format
*/
function currentDate_yyyyMMddhhmmss() {
	var today = new Date();
	// set Date with leading zeros if needed
	var tMonth= today.getMonth()+1;
	if(tMonth.toString().length&lt;2) tMonth= &apos;0&apos;+tMonth;
	var tDay= today.getDate()
	if(tDay.toString().length&lt;2) tDay= &apos;0&apos;+tDay;
	var date = today.getFullYear()+&apos;&apos;+tMonth+&apos;&apos;+tDay;
	
	// set Time with leading zeros if needed
	var tHour= today.getHours();
	if(tHour.toString().length&lt;2) tHour= &apos;0&apos;+tHour;
	var tMinute= today.getMinutes();
	if(tMinute.toString().length&lt;2) tMinute= &apos;0&apos;+tMinute;
	var tSecond= today.getSeconds();
	if(tSecond.toString().length&lt;2) tSecond= &apos;0&apos;+tSecond;
	
	var time = tHour+&apos;&apos;+tMinute+&apos;&apos;+tSecond;
	var dateTime = date+&apos;&apos;+time;

	return dateTime;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>59ebad58-f839-4429-b9fb-175fb5a4d5ec</id>
                <name>getChannelId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262975</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	getChannelId(nameOfChannel) function
	DESC: This function takes the string nameOfChannel Object as a parameter and returns the string channelId

	PARAMETERS:
	@param	{string} - pass the string object of the channelName
	@return 	{string} - return the channelId

	MODIFIED:	

 	USAGE:								
	E.G 
	var arrElementObjects= setXMLElementsArrayWithDescendants(xmlElement, debug);
	
*/

function getChannelId(nameOfChannel){ 
    if (nameOfChannel === undefined || nameOfChannel.length == 0) return &quot;&quot;; 
     
    var listIDs = ChannelUtil.getChannelIds(); 
    if (listIDs.isEmpty()) return &quot;&quot;; 
     
    var nameFromList; 
    for (var i = 0; i &lt; listIDs.size();i++){ 
        nameFromList = ChannelUtil.getChannelName(listIDs.get(i)); 
        if(nameFromList == nameOfChannel) return listIDs.get(i); 
    } 
    return &quot;&quot;; 
}  </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>887718d9-8250-4b4e-9b81-4a02cc1bef45</id>
                <name>getHL7v2ACK</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262563</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	setHL7v2ACK(msg) - DEVELOPMENT
	
	- Desc: This function set and returns HL7v2 HAPI Acknowledgement (ACK) message based on evaluating conditions

	@param 
	sourceMsg {string} - source message
	responseCode {string} - Mirth Connect processing responseCode
	responseMsg {string} - response MSA message
	responseStatus {string} - Mirth Connect processing responseStatus
	
	@return {XML} - this returns the HL7 HAPI Ack message
*/
function setHL7v2ACK(sourceMsg,responseCode,responseMsg,responseStatus) {

	var scriptName= &apos;getHL7v2ACK&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG msg.MSH: &apos;+JSON.stringify(msg[&apos;MSH&apos;].toString())); }
	
	importPackage(com.mirth.connect.model);
	// responseStatus is an optional parameter
	if (!responseStatus)
		responseStatus = {&apos;AA&apos;:Response.Status.SUCCESS,&apos;AR&apos;:Response.Status.FILTERED,&apos;AE&apos;:Response.Status.FAILURE}[responseCode] || Response.Status.UNKNOWN;
	var ack = &lt;HL7Message/&gt;;
	
	ack.MSH[&apos;MSH.1&apos;] = sourceMsg.MSH[&apos;MSH.1&apos;].toString();
	ack.MSH[&apos;MSH.2&apos;] = sourceMsg.MSH[&apos;MSH.2&apos;].toString();
	ack.MSH[&apos;MSH.3&apos;] = sourceMsg.MSH[&apos;MSH.5&apos;].copy();
	ack.MSH[&apos;MSH.4&apos;] = sourceMsg.MSH[&apos;MSH.6&apos;].copy();
	ack.MSH[&apos;MSH.5&apos;] = sourceMsg.MSH[&apos;MSH.3&apos;].copy();
	ack.MSH[&apos;MSH.6&apos;] = sourceMsg.MSH[&apos;MSH.4&apos;].copy();
	ack.MSH[&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = DateUtil.getCurrentDate(&apos;yyyyMMddHHmmss&apos;);
	ack.MSH[&apos;MSH.9&apos;][&apos;MSH.9.1&apos;] = sourceMsg.MSH[&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString();
	ack.MSH[&apos;MSH.9&apos;][&apos;MSH.9.2&apos;] = sourceMsg.MSH[&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();
	ack.MSH[&apos;MSH.9&apos;][&apos;MSH.9.3&apos;] = &apos;ACK&apos;;
	ack.MSH[&apos;MSH.10&apos;] = sourceMsg.MSH[&apos;MSH.10&apos;].copy();
	ack.MSH[&apos;MSH.11&apos;] = sourceMsg.MSH[&apos;MSH.11&apos;].copy();
	ack.MSH[&apos;MSH.12&apos;] = sourceMsg.MSH[&apos;MSH.12&apos;].copy();
	ack.MSA[&apos;MSA.1&apos;][&apos;MSA.1.1&apos;] = responseCode;
	ack.MSA[&apos;MSA.2&apos;][&apos;MSA.2.1&apos;] = sourceMsg.MSH[&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
	ack.MSA[&apos;MSA.3&apos;][&apos;MSA.3.1&apos;] = responseMsg;
	
	responseMap.put(&apos;ACK&apos;,new Response(responseStatus,SerializerFactory.getHL7Serializer().fromXML(ack)));

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>9d1a5389-8d5f-4f98-923a-6e5570b4bdc3</id>
                <name>jsonNulltoEmptyString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262944</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts JSON Null Object values to empty string
*/

/*
	Author: IntegrateIT.us LLC
	toHL7Date: Returns an empty string

	Arguments
	---------
		Required
		--------
			JSON element:		A JSON element (e.g. &quot;MiddleName&quot;:null )

*/

function jsonNulltoEmptyString( strElement, jsonElement, debug ) 
{

	var scriptName= &quot;jsonNulltoEmptyString&quot;;
	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG jsonElement IN key:&quot;+strElement+&quot; value: &quot;+jsonElement); 
		logger.info(scriptName+&quot;::DEBUG typeof jsonElement IN: &quot;+typeof(jsonElement));
	}
	// try {
		if (typeof(jsonElement) !== &apos;undefined&apos;) {
			if (typeof(jsonElement) !== &apos;string&apos;) {
				if (typeof(jsonElement) == &apos;object&apos;) {
					var jsonElement= &quot;&quot;;
				} 
			} else {
				if (jsonElement.toString()== null) {
					var jsonElement= jsonElement.replace(null,&quot;&quot;);
				}
			}	
		} else {
			var jsonElement= &quot;&quot;;
		}
	/*
	} catch (err) {
		return jsonElement
	} finally {
		return newJsonElement;
	}
	*/
	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG jsonElement OUT key:&quot;+strElement+&quot; value: &quot;+jsonElement); 
		logger.info(scriptName+&quot;::DEBUG typeof jsonElement OUT: &quot;+typeof(jsonElement));
		logger.info(&quot;&quot;);
	}
	return jsonElement;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a53342c5-cb0d-47b5-b156-cd559fbd40ac</id>
                <name>random_date_after_date</name>
                <revision>7</revision>
                <lastModified>
                  <time>1658169955060</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function will produce a random date based on a provided date and number of days argument.

	@param {String} start - enter the starting date (&apos;YYYY&apos;, &apos;MM&apos;, &apos;DD&apos;) (e.g. &apos;2021&apos;, &apos;09&apos;, &apos;13&apos;)
	@param {String} days -  number of days (positive or negative) (e.g. 365, 3000, -365)
	@return {String} return description
*/
function random_date_after_date(start, days) {
	
	// randomDateAfterDate(new Date(2021, 4, 5), -365) 
	var scriptName= &apos;random_date_after_date&apos;;
	var debug= 1;
	
	// if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; start= &apos;+start+&apos; number of days: &apos;+days);
	// }
	
	var strRandom= Math.random()*days*10000;
	var strStringRandom= strRandom.toString();
	var strRandom= strStringRandom.substring(0,4);
	
	var newDate= new Date(start.getTime() + strRandom);
	// Fri Jun 26 2020 08:59:35 GMT-0600 (GMT-06:00)
	var strDate= newDate.getFullYear() + &quot;&quot; + addLeadingZeros(newDate.getMonth() + 1) + &quot;&quot; + addLeadingZeros(newDate.getDate());
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; random date generated: &apos;+strDate);
	}

	return strDate;
}

function addLeadingZeros(n) {
  
  if (n &lt;= 9) {
    return &quot;0&quot; + n;
  }
  
  return n;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b527f706-5c50-4f44-bee5-d16dd9edd8f0</id>
                <name>random_generator</name>
                <revision>3</revision>
                <lastModified>
                  <time>1653591827816</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function will produce a random number based on the number of characters provided into the numOfChars argument.

	@param {String} numOfChars - enter the number of random characters to be returned
	@return {String} return description
*/
function random_generator(numOfChars) {
	var scriptName= &apos;random_generator&apos;;
	var debug= 0;
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; evaluate number of characters: &apos;+numOfChars);
	}
	
	var strNumOfChars= &apos;&apos;+numOfChars+&apos;&apos;;
	var cntNumOfChars= strNumOfChars.padEnd(numOfChars,0);
	var strRandom= (Math.random()*cntNumOfChars).toFixed();
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; random number generated: &apos;+strRandom);
	}
	
	return strRandom;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fefafe84-cb17-415b-b96e-ff00063c267a</id>
                <name>sendHttpsPostClientCert</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262729</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	sendHttpsPostClientCert(state, url, certificatePath, certificatePassword) - Returns custom HTTP response
	
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} state - arg1 description
	@param {String} url - arg2 description
	@param {String} certificatePath - arg3 description
	@param {String} certificatePasswordte - arg4 description
	@return {String} return description
*/
function sendHttpsPostClientCert(state, url, certificatePath, certificatePassword) {
	// write code here.

	var scriptName= &quot;sendHttpsPostClientCert&quot;;
	var messageBody = messageObject.getEncodedData();
	var httpsSender = new Packages.com.xti.util.HTTPSSender(certificatePath, certificatePassword);

	// Set all the necessary parameters...
	httpsSender.setURL(url);
	httpsSender.setMessageBody(messageBody);

	logger.info(scriptName+&quot;::DEBUG Sending message to &quot; + url + &quot; - &quot; + messageBody);

	// Send the message to the URL...
	try {
		httpsSender.send();
		var retString = httpsSender.getReturnValue();
		retString = retString.substr(0, retString.indexOf(&quot;MSA&quot;)) + &quot;\r&quot; + retString.substr(retString.indexOf(&quot;MSA&quot;));
		var responseMessage = new Packages.com.mirth.connect.model.converters.SerializerFactory.getHL7Serializer().toXML(retString);
		channelMap.put(&apos;responseMessage&apos;,responseMessage);

		if (responseMessage[&apos;MSA&apos;][&apos;MSA.1&apos;][&apos;MSA.1.1&apos;].toString() == &apos;AA&apos;) {
			logger.info(scriptName+&quot;::DEBUG HTTPS send success. Return value= &quot; + retString);
		} else {
			logger.info(scriptName+&quot;::DEBUG HTTPS send failure. Return value= &quot; + retString);
			throw(&quot;HTTPS send failure. Return value=&quot; + retString);
		}
	} catch (e) {
		logger.info(scriptName+&quot;::DEBUG Error message= &quot; + e.message);
		throw(e.message);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>37fab7a4-d254-46f6-925b-1c4bd8bacc48</id>
                <name>set24Hrs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911263134</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	set24Hrs - Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function set24Hrs(d){

  if (d.slice(-2) === &quot;PM&quot;){
      var hrs = parseInt(d.slice(-7,-5))
      var mins = d.slice(-4,-2)
      hrs = hrs + 12
      var dd = d.slice(0,9) + &quot; &quot; + hrs + &quot;:&quot; + mins;
      return dd;
  } else if(d.slice(-2) === &quot;AM&quot;){
      return (d.slice(0, 16));
  } else {
      throw (&quot;UNRECOGNIZED_FORMAT&quot;,&quot;set24Hrs() Received Unrecognized Formatted String&quot;);
  }
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
            <name>WebPT-Common</name>
            <revision>2</revision>
            <lastModified>
              <time>1678715257049</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
                <name>Check if String contains</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122790</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
                <name>Check if String contains HTTP code</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122593</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8515e088-5c50-47ee-9e2f-9fad1ecf48bd</id>
                <name>Check if String is JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123309</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Added by Kirby Knight
	12/21/2020
	Test for JSON

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5f2f84ba-3e66-4be3-8260-8fbd8258bd92</id>
                <name>Check if the PDF is valid</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122055</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
//This function is used for checking the word &quot;PDF&quot; in inbound attachment.
function isValidBase64PDF(base64) {
	const ENCODED_PDF_SIGN = &quot;JVBERi&quot;; // %PDF sign
	const PDF_EOF = &quot;JSVFT0YNCg&quot;; // %EOF
	var pdfBase64Size = (base64.length() * (3 / 4)) - 1;
	
	return (base64.indexOf(ENCODED_PDF_SIGN) != -1 &amp;&amp; base64.indexOf(PDF_EOF) != -1 &amp;&amp; pdf_base64_size &gt; 36);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
                <name>Convert JSON date to HL7v2 date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122137</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
                <name>Convert JSON datetime to HL7v2 datetime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122430</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>bb21449a-df39-48c6-be52-24106c8df4c4</id>
                <name>Destination Formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Kirby Knight 03/10/2021
	
	This function will remove all other ROOT.Meta.Destinations nodes that are not passed in the
	destination variable and removes the ROOT.Meta.Destinations[x].Destination node

	@param {Any} destination - 
	@return {String} return description
*/
function formatDestinations(destination) {
var arrDestinations = msg[&apos;Meta&apos;][&apos;Destinations&apos;];
	//  Start at the end of the array because of the posibility of deleted array items 
	for (var i = arrDestinations.length - 1; i &gt;= 0; i--) {
		if (arrDestinations[i][&apos;Destination&apos;] == destination){
			delete arrDestinations[i][&apos;Destination&apos;]
		}else if (arrDestinations[i][&apos;Destination&apos;] != destination){
			arrDestinations.splice(i, 1);
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
                <name>Extract JSON node data</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121748</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7ed44f8a-fa40-4f3e-9426-3021604eabe0</id>
                <name>Get Feature Value by Name and Database</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123262</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns a string containing the feature value (system property) for a specific client database.

	@param {String} featureName - name of the feature, ie: &quot;BetterPTBidirectionalScheduling&quot;
	@param {String} databaseIdentifier - database name or databaseID / TenantID
	@param {String} databaseIdentifierType - what value is provided in databaseIdentifier. current options include &quot;ID&quot; or &quot;NAME&quot;
	@return {String} returns feature value
*/
function getFeatureValueByNameDatabase(featureName, databaseIdentifier, databaseIdentifierType) {
	var paramList = new Packages.java.util.ArrayList();
	paramList.add(featureName);
	paramList.add(databaseIdentifier);
	paramList.add(databaseIdentifierType);
	
	var sSQL = &apos;EXEC [dbo].[pr_FeatureValueByNameDatabase] ?, ?, ?&apos;;
	
	try {
		var result = executeSharedDBStatementFhirCh(sSQL, true, paramList);
		var featureValue ;
		if(result.next()){			//Added
		 featureValue = result.getString(1);
		}
		return featureValue;
	} catch (e) {
		logger.error(e);
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>9842be2c-c633-42ac-87f1-f91aca9e370f</id>
                <name>JSON Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121776</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function populates the MR and PI patient IDS to channelMap

	@return {String} return description
*/
function jsonPatientIds() {
	for each (patId in msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) {
	if (patId[&apos;IDType&apos;].toString() == &apos;MR&apos;){
		channelMap.put(&apos;extPatId&apos;, patId[&apos;ID&apos;].toString());
	}else if(patId[&apos;IDType&apos;].toString() == &apos;PI&apos;){
		channelMap.put(&apos;patId&apos;, patId[&apos;ID&apos;].toString());
	}
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
                <name>Verify JSON node for existance</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>394664c0-d536-4310-970e-181dc03ee7da</id>
            <name>WebPT-Conversions</name>
            <revision>2</revision>
            <lastModified>
              <time>1690140133427</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
                <name>Convert FHIR codes to HL7v2 codes</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122899</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>2fc8cbf3-0d92-4d1d-a3d6-136c09bd9f2a</id>
            <name>WebPT-Custom Database Functions</name>
            <revision>4</revision>
            <lastModified>
              <time>1690570753962</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>23c0b510-63e4-40fa-a4e1-7b2b92ce9a96</id>
                <name>Execute Statement Shared DB Conn clientDb Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122401</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Executes a SQL statement using a shared database connection stored in the Global Map. If the
connection does not exist, creates it.

@param {String} statement - The SQL statement to execute
@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
@param {List} paramList - A Java List object containing the parameters for the statement (optional)
 */
function executeSharedDBStatementclientDbCh(statement, isQuery, paramList) {
    var result;

    try {
        var dbConnclientDbCh = globalChannelMap.get(&quot;dbConnclientDbCh&quot;);

        if (dbConnclientDbCh == null || dbConnclientDbCh.getConnection().isClosed()) {
            dbConnclientDbCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;), $(&apos;dbClient&apos;), $(&apos;dbUserFhir&apos;), $(&apos;dbPwFhir&apos;));
            globalChannelMap.put(&quot;dbConnclientDbCh&quot;, dbConnclientDbCh);
        }

        if (paramList == undefined) {
            paramList = new Packages.java.util.ArrayList();
        }

        if (isQuery) {
            result = dbConnclientDbCh.executeCachedQuery(statement, paramList);
        } else {
            result = dbConnclientDbCh.executeUpdate(statement, paramList);
        }
    } catch (e) {
        logger.error(e);
    }
    finally {
        return result;
    }
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4efb3110-a83f-48b5-93ad-79c847b51865</id>
                <name>Execute Statement Shared DB Conn clntAcl Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123455</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClntAclCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnClntAclCh = globalChannelMap.get(&quot;dbConnClntAclCh&quot;);

		if (dbConnClntAclCh == null || dbConnClntAclCh.getConnection().isClosed())
		{
			dbConnClntAclCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbClntAcl&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnClntAclCh&quot;, dbConnClntAclCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnClntAclCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnClntAclCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>d96d45dd-57f7-4aa9-9bf4-e464d31b94c6</id>
                <name>Execute Statement Shared DB Conn FHIR</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121922</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhir(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhir.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhir.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6014068e-c021-4a38-9fa6-6f38f6a2cdab</id>
                <name>Execute Statement Shared DB Conn FHIR Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123492</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhirCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhirCh = globalChannelMap.get(&quot;dbConnFhirCh&quot;);

		if (dbConnFhirCh == null || dbConnFhirCh.getConnection().isClosed())
		{
			dbConnFhirCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnFhirCh&quot;, dbConnFhirCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhirCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhirCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fbd5c4a1-b816-4496-acdf-067005f1d376</id>
                <name>Execute Statement Shared DB Conn Translations Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123008</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementTranslationsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnTranslationsCh = globalChannelMap.get(&quot;dbConnTranslationsCh&quot;);

		if (dbConnTranslationsCh == null || dbConnTranslationsCh.getConnection().isClosed())
		{
			dbConnTranslationsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlTranslations&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnTranslationsCh&quot;, dbConnTranslationsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnTranslationsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnTranslationsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5d1a5577-4ba4-4d1e-b6cd-e2d924164909</id>
                <name>Execute Statement with Shared DB Conn ODS Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122280</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdsCh = globalChannelMap.get(&quot;dbConnOdsCh&quot;);

		if (dbConnOdsCh == null || dbConnOdsCh.getConnection().isClosed())
		{
			dbConnOdsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOds&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdsCh&quot;, dbConnOdsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>3991db14-0c0b-4123-952c-5164c1ded501</id>
                <name>Execute Statement with Shared DB Conn ODW Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122960</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.  THis connects to the ODW db in Azure

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdwCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdwCh = globalChannelMap.get(&quot;dbConnOdwCh&quot;);

		if (dbConnOdwCh == null || dbConnOdwCh.getConnection().isClosed())
		{
			dbConnOdwCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOdw&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdwCh&quot;, dbConnOdwCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdwCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdwCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fae08c88-7550-479a-b8ed-ffef47e8eed9</id>
                <name>executeSharedDBStatementClient</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121956</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClient(statement, isQuery, paramList, dbname)
{
	var result;
 	var dburl= &apos;jdbc:sqlserver://AZW1DEV-SQL02.clinicient.com:1433;databaseName=&apos;+dbname+&apos;&apos;;
	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),dburl,$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			
			//globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		result = dbConnFhir.executeCachedQuery(statement);
	
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>ed20a457-5beb-4aea-9bb9-cf91112ccc56</id>
            <name>WebPT-Default Functions</name>
            <revision>10</revision>
            <lastModified>
              <time>1690140133487</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>a8a9a0c8-9322-46dc-bef8-011eb3d70291</id>
                <name>Create Header for CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121678</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This creates a header for csv files based on the contents of the header variable.  The header
	variable is populated in the channel from the outbound msg template

	@return {String} return description
*/
function createHeader() {
	//Destination transformer.  this creates the header for each new file

	var path = java.nio.file.Paths.get($(&apos;filePath&apos;)+$(&apos;fileName&apos;));
	var bytes = (new java.lang.String($(&apos;header&apos;))).getBytes(&quot;UTF-8&quot;);
	try {
	  java.nio.file.Files.write(path, bytes, java.nio.file.StandardOpenOption.CREATE_NEW);
	}
	catch (e) {
	  //logger.info(&quot; should throw IOException if file already exists&quot;);
	
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5a886a1f-dab1-41b5-94c6-1a639907d7da</id>
                <name>Filter Message Evaluate Received Checksum</name>
                <revision>33</revision>
                <lastModified>
                  <time>1678916806664</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating a checksum for each provided message.  We save off the most recent 100 unique checksum values in a global 
	array so if the current message has been recently received we are able to ignore it.
	
	@author:  	Jeffrey Ritz
	@scriptName: 	filterEvaluateReceivedChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {boolean} filter - return filter boolean (true= filter msg, false= do not filter msg)
		persist received_checksum global ChannelMap array
		persist filterMessage ChannelMap variable
	@history
*/
function filterEvaluateReceivedChecksum(msg) {	

	var scriptName= &apos;filterEvaluateReceivedChecksum&apos;
	var filter = false;
	var received_len_limit = 999;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B connectorMessage.getRawData() typeof: &apos;+typeof(connectorMessage.getRawData())+&apos; msg: &apos;+connectorMessage.getRawData());
	} // end if 
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	// var dataBytes = new java.lang.String(connectorMessage.getRawData()).getBytes(&apos;UTF-8&apos;);
	// message = new String(message.getBytes(&quot;utf-8&quot;), &quot;utf-8&quot;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	// var dataBytes = new java.lang.String(msg.getBytes(&apos;UTF-8&apos;));
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);

	// var messageObjectgetBytes= checksum.update(connectorMessage.getRawData().getBytes());
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 
	
	$c(&apos;checksum&apos;, checksum.getValue());
	
	//grab the global channel map variable holding the last X unique checksums that we&apos;ve received
	var received = $gc(&apos;received_checksums&apos;);
	
	if (received == undefined) {
		var received = new Array();
		received.push(checksum.getValue());
	} else {
		//check if we&apos;ve recently received this message, skip it if so
		if (received.indexOf(checksum.getValue()) &gt; -1) {
			filter = true;
		//we haven&apos;t seen it recently, so remember it and allow it through
		} else {
			var received_len = received.length;
			if (received_len &gt; received_len_limit) {
				//remove oldest/first entry, shift all entries forward, and add new entry to end
				received.shift();
				received[received_len_limit] = checksum.getValue();
			} else {
				//add new entry to end of array
				received[received_len] = checksum.getValue();
			} // end if 
		} // end if 
	} // end if 

	 //debug code
	/*for (x=0; x&lt;=received_len_limit; x++) {
		$c(&apos;received-&apos;+x, received[x]);
	} */

	$c(&apos;filterMessage&apos;,filter);
	$gc(&apos;received_checksums&apos;,received);

	return filter;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fbd0484d-74a2-48e4-aedd-f97c2fcefa16</id>
                <name>Get Message Checksum</name>
                <revision>12</revision>
                <lastModified>
                  <time>1678916806703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating and reutrning a checksum for each provided message
	
	@author:  	Jeffrey Ritz
	@scriptName: 	getMessageChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {object} result - return checksum value
	@history
	2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() to remove the exponential representation of the number value
*/
function getMessageChecksum(msg) {	

	var scriptName= &apos;getMessageChecksum&apos;;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	} // end if 
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 

	var checksumValue= checksum.getValue();
	// 2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() 
	var arrChecksumValue= new Array(); 
	arrChecksumValue.push(checksumValue);
	$c(&apos;checksum&apos;, arrChecksumValue);

	return checksumValue;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>91db9bd1-ca92-4dcc-bba4-e1ece603fc87</id>
                <name>Remove Child Object From Parent Object Json</name>
                <revision>22</revision>
                <lastModified>
                  <time>1678916845037</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON child object and it&apos;s descendents from a parent object JSON
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeChildObjectFromParentObjectJson.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
		{string} parentObject - place the name of the string to be designated as the parent object in the JSON
		{string} childObject  - place the name of the string to be designated as the child object to be deleted from the JSON
	@param {object} msg - return modified Json object msg excluding specified Json child object
	@history
*/
function removeChildObjectFromParentObjectJson(msg, parentObject, childObject) {
	
	var scriptName= &apos;removeChildObjectFromParentObjectJson&apos;;
	var debug= 0;

	//var strObjJson= JSON.parse(msg);
	var strObjJson= JSON.stringify(msg);
	
	//var objJson= JSON.parse(msg);
	var newParentObjects= new Object();
	var parentObjects= msg;
	var arrParentObjects= new Array();
	var arrTransactionObjects= new Array();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof parentObjects: &apos;+typeof(parentObjects));
	for (var key in parentObjects) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof key: &apos;+typeof(key)+&apos; key: &apos;+key);
		if(key== parentObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof objJson[key]: &apos;+typeof(parentObjects[key])+&apos; parentObjects[key]: &apos;+JSON.stringify(parentObjects[key]));
			
			var newChildObjects= new Object();
			var childObjects= parentObjects[key];
			var arrChildObjects= new Array();
			
			for(var key2 in childObjects) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key2: &apos;+typeof(key2)+&apos; key2: &apos;+key2+&apos; childObject: &apos;+childObject);
				for(var key3 in childObjects[key2]) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key3: &apos;+typeof(key3)+&apos; key3: &apos;+key3+&apos; childObject: &apos;+childObject);
					if(key3== childObject) {
						var transactionObject= new Object();
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; childObject typeof: &apos;+typeof(childObjects[key2][key3])+&apos; childObject: &apos;+JSON.stringify(childObjects[key2][key3]));
						transactionObject.key= key3;
						transactionObject.value= childObjects[key2][key3];
						delete childObjects[key2][key3];
						if(debug&gt;0) logger.info(&apos;DEBUG::&apos;+scriptName+&apos; DELETE childObject: &apos;+key3+&apos; of parentObject: &apos;+JSON.stringify(childObjects[key2]));
						arrTransactionObjects.push(transactionObject);
					} // end if
				} // end for 
				arrChildObjects.push(childObjects[key2]);
			} // end for
			newParentObjects[key]= arrChildObjects;
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add all child keys: &apos;+JSON.stringify(arrChildObjects)+&apos; into ParentObject[&apos;+key+&apos;]: &apos;+newParentObjects[key]);
		} else {
			newParentObjects[key]= parentObjects[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+parentObjects[key]+&apos; string: &apos;+JSON.stringify(parentObjects[key]));
		} // end if
		arrParentObjects.push(newParentObjects);
	} // end for 
	var newMsg= arrParentObjects;
	channelMap.put(&apos;removeChildObjectMsg&apos;,newMsg);
	channelMap.put(&apos;removedChildTransIds&apos;,arrTransactionObjects);
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));
	return newMsg;
	
} </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2ff28338-dfb6-445d-a04e-c74b5486a08c</id>
                <name>Remove Object From Json</name>
                <revision>24</revision>
                <lastModified>
                  <time>1678915278542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON object and it&apos;s descendents from the msg
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeObjectFromJson.js
	@created: 	2023-03-09
	@param {string} msg - Inbound connectorMessage.getRawData()
	@param {string} msg - return modified msg excluding specified Json object from msg
	@history
	2023-03-15 JER - Modified to include removeObject function parameter to specify specific JSON object by referencing key to be removed
*/
function removeObjectFromJson(msg, removeObject) {
	
	var scriptName= &apos;removeObjectFromJson&apos;;
	var debug= 0;
	//var objJson= JSON.stringify(msg);
	var objJson= JSON.parse(msg);
	var newObjJson= new Object();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof objJson: &apos;+typeof(objJson)+&apos; objJSON: &apos;+JSON.stringify(objJson));
	for (var key in objJson) {
		if(key== removeObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; DELETE key: &apos;+key);
			// delete objJson[key];
		} else {
			newObjJson[key]= objJson[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+objJson[key]+&apos; string: &apos;+JSON.stringify(objJson[key]));
		} // end if 
	} // end for 
	var newMsg= newObjJson;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));

	// return JSON.stringify(newMsg);
	return newMsg;
} 
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>993a6fd8-454a-4133-ba32-dbcfea71582b</id>
                <name>Update EDITransactionLog</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123233</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	The purpose of this function is to update the status in Insight.
	Populate the channel map with the following variables functionalGroupControlNumber, status, eventDate

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateStatus () {

	//  Build the llst of paramters to pass to the database
	var paramList = new Packages.java.util.ArrayList();
	paramList.add($(&apos;functionalGroupControlNumber&apos;));
	paramList.add($(&apos;eventDate&apos;));  //dateTime in the acknoledged field in this format (&quot;2017-07-31 14:15:01.577&quot;)
	paramList.add(new java.lang.Integer(parseInt($(&apos;status&apos;), 10)));
	
//	logger.info(&quot;updateStatus &quot;+paramList);

	//  SQL Statement and paramters that will be sent to SQL
	var statement = &quot;EXEC dbo.pr_EDITransactionLog_Update ?, ?, ?&quot;;
	//  Code template used for establishiing connection and passing the sql statement and parameter list  
	var result = executeSharedDBStatementFhirCh(statement, false, paramList);
	return result;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>42cb290e-5fb0-46b8-82db-576ea1e1ba0d</id>
                <name>Update EDITransactionLog from responseStatus in the response transformer </name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123356</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Call this in the response transformer on the destination.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateReponseStatus() {
	var status = 0;
	if (responseStatus == SENT){
		var status = 1;
		channelMap.put(&apos;status&apos;,status);
	}

updateStatus()
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2223579b-f914-4be7-a575-f1a2a2aa1ae2</id>
                <name>ValidateToString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123044</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} mapping - 
	@param {Any} defaultValue - 
	@param {Any} replacement - 
	@return {String} return description
*/
function validateToString(mapping, defaultValue, replacement) {
    if (mapping == null) {
        mapping = &apos;&apos;;
    }
    return validate(mapping, defaultValue, replacement).toString() + &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>8c9a8268-4ef0-43e9-ae5b-bf8895f0b80c</id>
            <name>WebPT-FORMAT</name>
            <revision>3</revision>
            <lastModified>
              <time>1691001755225</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>Include any functions or codes with 
-date &amp; time formating related
-data type formatting</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>920c9ead-70a6-4168-9d95-89261b73ae44</id>
                <name>12digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123520</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Take any 12 digit string yyyyMMddHHmm and change to MM/dd/yyyy HH:mm 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm
*/
function yyyyMMddHHmm(string) {
	return DateUtil.convertDate(&quot;yyyyMMddHHmm&quot;, &quot;MM/dd/yyyy HH:mm&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fe2689ec-1946-46d5-8dd6-8fbbf106e1e6</id>
                <name>14digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122871</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Take 14 digit string yyyyMMddHHmmss and change to MM/dd/yyyy HH:mm:ss 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm:ss
*/
function yyyyMMddHHmmss(string) {
	if (string.length == 14) {
		  return DateUtil.convertDate(&quot;yyyyMMddHHmmss&quot;, &quot;MM/dd/yyyy HH:mm:ss&quot;, string);
	}
	else {
		return &quot;unregcognized string&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b9db35e2-d5bd-48a1-8cc6-3475c698d7b4</id>
                <name>currentDT_yyyy-MM-dd HH:mm:ss.SSS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123114</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Kirby Knight
	Date Modified:  11/09/2020
	Retund the current date/time down to the millisecond

	@return {String} return description
*/
function currentDtToMilliseconds() {
	return DateUtil.getCurrentDate(&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7e747999-4bec-43fc-978d-7049d3543cf0</id>
                <name>fixHL7NodeOrder</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/

function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>dfedacf6-773b-413e-b78d-1bf16a92071d</id>
                <name>formatHL7Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121643</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Take any eight digit HL7 message data string (yyyyMMdd) and formats it human-readable format (MM/dd/yyyy)
	such as 20090612 -&gt; 06/12/2009

	@param {String} arg1 - 8 digit HL7 message data string yyyyMMdd
	@return {String} return date format as MM/dd/yyyy
*/
function formatHL7Date(string) {
	return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;MM/dd/yyyy&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a8f54921-2cb6-4134-8806-3c4e10a757d9</id>
                <name>getCurrentLocalTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122014</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = getCurrentLocalTimestamp();

	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestamp() {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(&quot;EST&quot;)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6c5f1bd8-ebbf-4c8e-b465-0be8ccaba0d0</id>
                <name>getCurrentLocalTimeToMs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123077</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	Gets the current local date/time to the milliseconds
	Converts to the timezone that is passed in Examples (America/New_York, America/Chicago, America/Phoenix )

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestampToMs(timeZone) {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timeZone)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>78d74c5b-c881-404a-ad96-4e909e1a19f3</id>
                <name>phoneToE164</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121982</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Insight phone number to E164 format 5554446666 to +15554446666

	@param {Any} phoneIn - 
	@return {String} return description
*/
function phoneToE164(phoneIn) {
	logger.info(&apos;L1 &apos;+phoneIn);
	if(phoneIn != null ){
	//phoneIn = &apos;+1&apos; + phoneIn.toString(); 
	logger.info(&apos;L2 &apos;+phoneIn);
	return &apos;+1&apos; + phoneIn.toString(); 
	} else{
		return null;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>6a32d94d-408c-4e10-9799-e45e150b5c1f</id>
            <name>WebPT-MISC</name>
            <revision>3</revision>
            <lastModified>
              <time>1690987207668</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>miscellaneous javascript</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>84b4f1c7-f82d-4140-9fbd-98a95f68ff32</id>
                <name>getChannelState</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122648</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetChannelState(channel_id) {

    var channel_status = &quot;NA&quot;;

    var channel_count = parseInt(Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().size());

    for(var i=0;i&lt;channel_count;i++) {
        if (channel_id == Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getChannelId()) {
            channel_status = Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getState();
        }
    }

    return channel_status;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>715435a9-cb15-4e8f-bc5b-4249eaea6e17</id>
                <name>momentjs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122487</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Testing MIRTH-3794 using external JavaScript library &quot;moment.js&quot;
*/
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=b():&quot;function&quot;==typeof define&amp;&amp;define.amd?define(b):a.moment=b()}(this,function(){&quot;use strict&quot;;function a(){return Hc.apply(null,arguments)}function b(a){Hc=a}function c(a){return&quot;[object Array]&quot;===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||&quot;[object Date]&quot;===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c&lt;a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&amp;&amp;(a[c]=b[c]);return f(b,&quot;toString&quot;)&amp;&amp;(a.toString=b.toString),f(b,&quot;valueOf&quot;)&amp;&amp;(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ca(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&amp;&amp;(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow&lt;0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&amp;&amp;(a._isValid=a._isValid&amp;&amp;0===b.charsLeftOver&amp;&amp;0===b.unusedTokens.length&amp;&amp;void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if(&quot;undefined&quot;!=typeof b._isAMomentObject&amp;&amp;(a._isAMomentObject=b._isAMomentObject),&quot;undefined&quot;!=typeof b._i&amp;&amp;(a._i=b._i),&quot;undefined&quot;!=typeof b._f&amp;&amp;(a._f=b._f),&quot;undefined&quot;!=typeof b._l&amp;&amp;(a._l=b._l),&quot;undefined&quot;!=typeof b._strict&amp;&amp;(a._strict=b._strict),&quot;undefined&quot;!=typeof b._tzm&amp;&amp;(a._tzm=b._tzm),&quot;undefined&quot;!=typeof b._isUTC&amp;&amp;(a._isUTC=b._isUTC),&quot;undefined&quot;!=typeof b._offset&amp;&amp;(a._offset=b._offset),&quot;undefined&quot;!=typeof b._pf&amp;&amp;(a._pf=j(b)),&quot;undefined&quot;!=typeof b._locale&amp;&amp;(a._locale=b._locale),Jc.length&gt;0)for(c in Jc)d=Jc[c],e=b[d],&quot;undefined&quot;!=typeof e&amp;&amp;(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),Kc===!1&amp;&amp;(Kc=!0,a.updateOffset(this),Kc=!1)}function o(a){return a instanceof n||null!=a&amp;&amp;null!=a._isAMomentObject}function p(a){return 0&gt;a?Math.ceil(a):Math.floor(a)}function q(a){var b=+a,c=0;return 0!==b&amp;&amp;isFinite(b)&amp;&amp;(c=p(b)),c}function r(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e&gt;d;d++)(c&amp;&amp;a[d]!==b[d]||!c&amp;&amp;q(a[d])!==q(b[d]))&amp;&amp;g++;return g+f}function s(){}function t(a){return a?a.toLowerCase().replace(&quot;_&quot;,&quot;-&quot;):a}function u(a){for(var b,c,d,e,f=0;f&lt;a.length;){for(e=t(a[f]).split(&quot;-&quot;),b=e.length,c=t(a[f+1]),c=c?c.split(&quot;-&quot;):null;b&gt;0;){if(d=v(e.slice(0,b).join(&quot;-&quot;)))return d;if(c&amp;&amp;c.length&gt;=b&amp;&amp;r(e,c,!0)&gt;=b-1)break;b--}f++}return null}function v(a){var b=null;if(!Lc[a]&amp;&amp;&quot;undefined&quot;!=typeof module&amp;&amp;module&amp;&amp;module.exports)try{b=Ic._abbr,require(&quot;./locale/&quot;+a),w(b)}catch(c){}return Lc[a]}function w(a,b){var c;return a&amp;&amp;(c=&quot;undefined&quot;==typeof b?y(a):x(a,b),c&amp;&amp;(Ic=c)),Ic._abbr}function x(a,b){return null!==b?(b.abbr=a,Lc[a]=Lc[a]||new s,Lc[a].set(b),w(a),Lc[a]):(delete Lc[a],null)}function y(a){var b;if(a&amp;&amp;a._locale&amp;&amp;a._locale._abbr&amp;&amp;(a=a._locale._abbr),!a)return Ic;if(!c(a)){if(b=v(a))return b;a=[a]}return u(a)}function z(a,b){var c=a.toLowerCase();Mc[c]=Mc[c+&quot;s&quot;]=Mc[b]=a}function A(a){return&quot;string&quot;==typeof a?Mc[a]||Mc[a.toLowerCase()]:void 0}function B(a){var b,c,d={};for(c in a)f(a,c)&amp;&amp;(b=A(c),b&amp;&amp;(d[b]=a[c]));return d}function C(b,c){return function(d){return null!=d?(E(this,b,d),a.updateOffset(this,c),this):D(this,b)}}function D(a,b){return a._d[&quot;get&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b]()}function E(a,b,c){return a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b](c)}function F(a,b){var c;if(&quot;object&quot;==typeof a)for(c in a)this.set(c,a[c]);else if(a=A(a),&quot;function&quot;==typeof this[a])return this[a](b);return this}function G(a,b,c){var d=&quot;&quot;+Math.abs(a),e=b-d.length,f=a&gt;=0;return(f?c?&quot;+&quot;:&quot;&quot;:&quot;-&quot;)+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function H(a,b,c,d){var e=d;&quot;string&quot;==typeof d&amp;&amp;(e=function(){return this[d]()}),a&amp;&amp;(Qc[a]=e),b&amp;&amp;(Qc[b[0]]=function(){return G(e.apply(this,arguments),b[1],b[2])}),c&amp;&amp;(Qc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function I(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,&quot;&quot;):a.replace(/\\/g,&quot;&quot;)}function J(a){var b,c,d=a.match(Nc);for(b=0,c=d.length;c&gt;b;b++)Qc[d[b]]?d[b]=Qc[d[b]]:d[b]=I(d[b]);return function(e){var f=&quot;&quot;;for(b=0;c&gt;b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function K(a,b){return a.isValid()?(b=L(b,a.localeData()),Pc[b]=Pc[b]||J(b),Pc[b](a)):a.localeData().invalidDate()}function L(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Oc.lastIndex=0;d&gt;=0&amp;&amp;Oc.test(a);)a=a.replace(Oc,c),Oc.lastIndex=0,d-=1;return a}function M(a){return&quot;function&quot;==typeof a&amp;&amp;&quot;[object Function]&quot;===Object.prototype.toString.call(a)}function N(a,b,c){dd[a]=M(b)?b:function(a){return a&amp;&amp;c?c:b}}function O(a,b){return f(dd,a)?dd[a](b._strict,b._locale):new RegExp(P(a))}function P(a){return a.replace(&quot;\\&quot;,&quot;&quot;).replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,&quot;\\$&amp;&quot;)}function Q(a,b){var c,d=b;for(&quot;string&quot;==typeof a&amp;&amp;(a=[a]),&quot;number&quot;==typeof b&amp;&amp;(d=function(a,c){c[b]=q(a)}),c=0;c&lt;a.length;c++)ed[a[c]]=d}function R(a,b){Q(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function S(a,b,c){null!=b&amp;&amp;f(ed,a)&amp;&amp;ed[a](b,c._a,c,a)}function T(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function U(a){return this._months[a.month()]}function V(a){return this._monthsShort[a.month()]}function W(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12&gt;d;d++){if(e=h([2e3,d]),c&amp;&amp;!this._longMonthsParse[d]&amp;&amp;(this._longMonthsParse[d]=new RegExp(&quot;^&quot;+this.months(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;),this._shortMonthsParse[d]=new RegExp(&quot;^&quot;+this.monthsShort(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;)),c||this._monthsParse[d]||(f=&quot;^&quot;+this.months(e,&quot;&quot;)+&quot;|^&quot;+this.monthsShort(e,&quot;&quot;),this._monthsParse[d]=new RegExp(f.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),c&amp;&amp;&quot;MMMM&quot;===b&amp;&amp;this._longMonthsParse[d].test(a))return d;if(c&amp;&amp;&quot;MMM&quot;===b&amp;&amp;this._shortMonthsParse[d].test(a))return d;if(!c&amp;&amp;this._monthsParse[d].test(a))return d}}function X(a,b){var c;return&quot;string&quot;==typeof b&amp;&amp;(b=a.localeData().monthsParse(b),&quot;number&quot;!=typeof b)?a:(c=Math.min(a.date(),T(a.year(),b)),a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+&quot;Month&quot;](b,c),a)}function Y(b){return null!=b?(X(this,b),a.updateOffset(this,!0),this):D(this,&quot;Month&quot;)}function Z(){return T(this.year(),this.month())}function $(a){var b,c=a._a;return c&amp;&amp;-2===j(a).overflow&amp;&amp;(b=c[gd]&lt;0||c[gd]&gt;11?gd:c[hd]&lt;1||c[hd]&gt;T(c[fd],c[gd])?hd:c[id]&lt;0||c[id]&gt;24||24===c[id]&amp;&amp;(0!==c[jd]||0!==c[kd]||0!==c[ld])?id:c[jd]&lt;0||c[jd]&gt;59?jd:c[kd]&lt;0||c[kd]&gt;59?kd:c[ld]&lt;0||c[ld]&gt;999?ld:-1,j(a)._overflowDayOfYear&amp;&amp;(fd&gt;b||b&gt;hd)&amp;&amp;(b=hd),j(a).overflow=b),a}function _(b){a.suppressDeprecationWarnings===!1&amp;&amp;&quot;undefined&quot;!=typeof console&amp;&amp;console.warn&amp;&amp;console.warn(&quot;Deprecation warning: &quot;+b)}function aa(a,b){var c=!0;return g(function(){return c&amp;&amp;(_(a+&quot;\n&quot;+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function ba(a,b){od[a]||(_(b),od[a]=!0)}function ca(a){var b,c,d=a._i,e=pd.exec(d);if(e){for(j(a).iso=!0,b=0,c=qd.length;c&gt;b;b++)if(qd[b][1].exec(d)){a._f=qd[b][0];break}for(b=0,c=rd.length;c&gt;b;b++)if(rd[b][1].exec(d)){a._f+=(e[6]||&quot; &quot;)+rd[b][0];break}d.match(ad)&amp;&amp;(a._f+=&quot;Z&quot;),va(a)}else a._isValid=!1}function da(b){var c=sd.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ca(b),void(b._isValid===!1&amp;&amp;(delete b._isValid,a.createFromInputFallback(b))))}function ea(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970&gt;a&amp;&amp;h.setFullYear(a),h}function fa(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970&gt;a&amp;&amp;b.setUTCFullYear(a),b}function ga(a){return ha(a)?366:365}function ha(a){return a%4===0&amp;&amp;a%100!==0||a%400===0}function ia(){return ha(this.year())}function ja(a,b,c){var d,e=c-b,f=c-a.day();return f&gt;e&amp;&amp;(f-=7),e-7&gt;f&amp;&amp;(f+=7),d=Da(a).add(f,&quot;d&quot;),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ka(a){return ja(a,this._week.dow,this._week.doy).week}function la(){return this._week.dow}function ma(){return this._week.doy}function na(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function oa(a){var b=ja(this,1,4).week;return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function pa(a,b,c,d,e){var f,g=6+e-d,h=fa(a,0,1+g),i=h.getUTCDay();return e&gt;i&amp;&amp;(i+=7),c=null!=c?1*c:e,f=1+g+7*(b-1)-i+c,{year:f&gt;0?a:a-1,dayOfYear:f&gt;0?f:ga(a-1)+f}}function qa(a){var b=Math.round((this.clone().startOf(&quot;day&quot;)-this.clone().startOf(&quot;year&quot;))/864e5)+1;return null==a?b:this.add(a-b,&quot;d&quot;)}function ra(a,b,c){return null!=a?a:null!=b?b:c}function sa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ta(a){var b,c,d,e,f=[];if(!a._d){for(d=sa(a),a._w&amp;&amp;null==a._a[hd]&amp;&amp;null==a._a[gd]&amp;&amp;ua(a),a._dayOfYear&amp;&amp;(e=ra(a._a[fd],d[fd]),a._dayOfYear&gt;ga(e)&amp;&amp;(j(a)._overflowDayOfYear=!0),c=fa(e,0,a._dayOfYear),a._a[gd]=c.getUTCMonth(),a._a[hd]=c.getUTCDate()),b=0;3&gt;b&amp;&amp;null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7&gt;b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[id]&amp;&amp;0===a._a[jd]&amp;&amp;0===a._a[kd]&amp;&amp;0===a._a[ld]&amp;&amp;(a._nextDay=!0,a._a[id]=0),a._d=(a._useUTC?fa:ea).apply(null,f),null!=a._tzm&amp;&amp;a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&amp;&amp;(a._a[id]=24)}}function ua(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=ra(b.GG,a._a[fd],ja(Da(),1,4).year),d=ra(b.W,1),e=ra(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=ra(b.gg,a._a[fd],ja(Da(),f,g).year),d=ra(b.w,1),null!=b.d?(e=b.d,f&gt;e&amp;&amp;++d):e=null!=b.e?b.e+f:f),h=pa(c,d,e,g,f),a._a[fd]=h.year,a._dayOfYear=h.dayOfYear}function va(b){if(b._f===a.ISO_8601)return void ca(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=&quot;&quot;+b._i,i=h.length,k=0;for(e=L(b._f,b._locale).match(Nc)||[],c=0;c&lt;e.length;c++)f=e[c],d=(h.match(O(f,b))||[])[0],d&amp;&amp;(g=h.substr(0,h.indexOf(d)),g.length&gt;0&amp;&amp;j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Qc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),S(f,d,b)):b._strict&amp;&amp;!d&amp;&amp;j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length&gt;0&amp;&amp;j(b).unusedInput.push(h),j(b).bigHour===!0&amp;&amp;b._a[id]&lt;=12&amp;&amp;b._a[id]&gt;0&amp;&amp;(j(b).bigHour=void 0),b._a[id]=wa(b._locale,b._a[id],b._meridiem),ta(b),$(b)}function wa(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&amp;&amp;12&gt;b&amp;&amp;(b+=12),d||12!==b||(b=0),b):b}function xa(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e&lt;a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&amp;&amp;(b._useUTC=a._useUTC),b._f=a._f[e],va(b),k(b)&amp;&amp;(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d&gt;f)&amp;&amp;(d=f,c=b));g(a,c||b)}function ya(a){if(!a._d){var b=B(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ta(a)}}function za(a){var b=new n($(Aa(a)));return b._nextDay&amp;&amp;(b.add(1,&quot;d&quot;),b._nextDay=void 0),b}function Aa(a){var b=a._i,e=a._f;return a._locale=a._locale||y(a._l),null===b||void 0===e&amp;&amp;&quot;&quot;===b?l({nullInput:!0}):(&quot;string&quot;==typeof b&amp;&amp;(a._i=b=a._locale.preparse(b)),o(b)?new n($(b)):(c(e)?xa(a):e?va(a):d(b)?a._d=b:Ba(a),a))}function Ba(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):&quot;string&quot;==typeof f?da(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ta(b)):&quot;object&quot;==typeof f?ya(b):&quot;number&quot;==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ca(a,b,c,d,e){var f={};return&quot;boolean&quot;==typeof c&amp;&amp;(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,za(f)}function Da(a,b,c,d){return Ca(a,b,c,d,!1)}function Ea(a,b){var d,e;if(1===b.length&amp;&amp;c(b[0])&amp;&amp;(b=b[0]),!b.length)return Da();for(d=b[0],e=1;e&lt;b.length;++e)(!b[e].isValid()||b[e][a](d))&amp;&amp;(d=b[e]);return d}function Fa(){var a=[].slice.call(arguments,0);return Ea(&quot;isBefore&quot;,a)}function Ga(){var a=[].slice.call(arguments,0);return Ea(&quot;isAfter&quot;,a)}function Ha(a){var b=B(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=y(),this._bubble()}function Ia(a){return a instanceof Ha}function Ja(a,b){H(a,0,0,function(){var a=this.utcOffset(),c=&quot;+&quot;;return 0&gt;a&amp;&amp;(a=-a,c=&quot;-&quot;),c+G(~~(a/60),2)+b+G(~~a%60,2)})}function Ka(a){var b=(a||&quot;&quot;).match(ad)||[],c=b[b.length-1]||[],d=(c+&quot;&quot;).match(xd)||[&quot;-&quot;,0,0],e=+(60*d[1])+q(d[2]);return&quot;+&quot;===d[0]?e:-e}function La(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Da(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Da(b).local()}function Ma(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Na(b,c){var d,e=this._offset||0;return null!=b?(&quot;string&quot;==typeof b&amp;&amp;(b=Ka(b)),Math.abs(b)&lt;16&amp;&amp;(b=60*b),!this._isUTC&amp;&amp;c&amp;&amp;(d=Ma(this)),this._offset=b,this._isUTC=!0,null!=d&amp;&amp;this.add(d,&quot;m&quot;),e!==b&amp;&amp;(!c||this._changeInProgress?bb(this,Ya(b-e,&quot;m&quot;),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ma(this)}function Oa(a,b){return null!=a?(&quot;string&quot;!=typeof a&amp;&amp;(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Pa(a){return this.utcOffset(0,a)}function Qa(a){return this._isUTC&amp;&amp;(this.utcOffset(0,a),this._isUTC=!1,a&amp;&amp;this.subtract(Ma(this),&quot;m&quot;)),this}function Ra(){return this._tzm?this.utcOffset(this._tzm):&quot;string&quot;==typeof this._i&amp;&amp;this.utcOffset(Ka(this._i)),this}function Sa(a){return a=a?Da(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Ta(){return this.utcOffset()&gt;this.clone().month(0).utcOffset()||this.utcOffset()&gt;this.clone().month(5).utcOffset()}function Ua(){if(&quot;undefined&quot;!=typeof this._isDSTShifted)return this._isDSTShifted;var a={};if(m(a,this),a=Aa(a),a._a){var b=a._isUTC?h(a._a):Da(a._a);this._isDSTShifted=this.isValid()&amp;&amp;r(a._a,b.toArray())&gt;0}else this._isDSTShifted=!1;return this._isDSTShifted}function Va(){return!this._isUTC}function Wa(){return this._isUTC}function Xa(){return this._isUTC&amp;&amp;0===this._offset}function Ya(a,b){var c,d,e,g=a,h=null;return Ia(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:&quot;number&quot;==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=yd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:0,d:q(h[hd])*c,h:q(h[id])*c,m:q(h[jd])*c,s:q(h[kd])*c,ms:q(h[ld])*c}):(h=zd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:Za(h[2],c),M:Za(h[3],c),d:Za(h[4],c),h:Za(h[5],c),m:Za(h[6],c),s:Za(h[7],c),w:Za(h[8],c)}):null==g?g={}:&quot;object&quot;==typeof g&amp;&amp;(&quot;from&quot;in g||&quot;to&quot;in g)&amp;&amp;(e=_a(Da(g.from),Da(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ha(g),Ia(a)&amp;&amp;f(a,&quot;_locale&quot;)&amp;&amp;(d._locale=a._locale),d}function Za(a,b){var c=a&amp;&amp;parseFloat(a.replace(&quot;,&quot;,&quot;.&quot;));return(isNaN(c)?0:c)*b}function $a(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,&quot;M&quot;).isAfter(b)&amp;&amp;--c.months,c.milliseconds=+b-+a.clone().add(c.months,&quot;M&quot;),c}function _a(a,b){var c;return b=La(b,a),a.isBefore(b)?c=$a(a,b):(c=$a(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function ab(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(ba(b,&quot;moment().&quot;+b+&quot;(period, number) is deprecated. Please use moment().&quot;+b+&quot;(number, period).&quot;),f=c,c=d,d=f),c=&quot;string&quot;==typeof c?+c:c,e=Ya(c,d),bb(this,e,a),this}}function bb(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&amp;&amp;b._d.setTime(+b._d+f*d),g&amp;&amp;E(b,&quot;Date&quot;,D(b,&quot;Date&quot;)+g*d),h&amp;&amp;X(b,D(b,&quot;Month&quot;)+h*d),e&amp;&amp;a.updateOffset(b,g||h)}function cb(a,b){var c=a||Da(),d=La(c,this).startOf(&quot;day&quot;),e=this.diff(d,&quot;days&quot;,!0),f=-6&gt;e?&quot;sameElse&quot;:-1&gt;e?&quot;lastWeek&quot;:0&gt;e?&quot;lastDay&quot;:1&gt;e?&quot;sameDay&quot;:2&gt;e?&quot;nextDay&quot;:7&gt;e?&quot;nextWeek&quot;:&quot;sameElse&quot;;return this.format(b&amp;&amp;b[f]||this.localeData().calendar(f,this,Da(c)))}function db(){return new n(this)}function eb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this&gt;+a):(c=o(a)?+a:+Da(a),c&lt;+this.clone().startOf(b))}function fb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+a&gt;+this):(c=o(a)?+a:+Da(a),+this.clone().endOf(b)&lt;c)}function gb(a,b,c){return this.isAfter(a,c)&amp;&amp;this.isBefore(b,c)}function hb(a,b){var c;return b=A(b||&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this===+a):(c=+Da(a),+this.clone().startOf(b)&lt;=c&amp;&amp;c&lt;=+this.clone().endOf(b))}function ib(a,b,c){var d,e,f=La(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=A(b),&quot;year&quot;===b||&quot;month&quot;===b||&quot;quarter&quot;===b?(e=jb(this,f),&quot;quarter&quot;===b?e/=3:&quot;year&quot;===b&amp;&amp;(e/=12)):(d=this-f,e=&quot;second&quot;===b?d/1e3:&quot;minute&quot;===b?d/6e4:&quot;hour&quot;===b?d/36e5:&quot;day&quot;===b?(d-g)/864e5:&quot;week&quot;===b?(d-g)/6048e5:d),c?e:p(e)}function jb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,&quot;months&quot;);return 0&gt;b-f?(c=a.clone().add(e-1,&quot;months&quot;),d=(b-f)/(f-c)):(c=a.clone().add(e+1,&quot;months&quot;),d=(b-f)/(c-f)),-(e+d)}function kb(){return this.clone().locale(&quot;en&quot;).format(&quot;ddd MMM DD YYYY HH:mm:ss [GMT]ZZ&quot;)}function lb(){var a=this.clone().utc();return 0&lt;a.year()&amp;&amp;a.year()&lt;=9999?&quot;function&quot;==typeof Date.prototype.toISOString?this.toDate().toISOString():K(a,&quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;):K(a,&quot;YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;)}function mb(b){var c=K(this,b||a.defaultFormat);return this.localeData().postformat(c)}function nb(a,b){return this.isValid()?Ya({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.from(Da(),a)}function pb(a,b){return this.isValid()?Ya({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function qb(a){return this.to(Da(),a)}function rb(a){var b;return void 0===a?this._locale._abbr:(b=y(a),null!=b&amp;&amp;(this._locale=b),this)}function sb(){return this._locale}function tb(a){switch(a=A(a)){case&quot;year&quot;:this.month(0);case&quot;quarter&quot;:case&quot;month&quot;:this.date(1);case&quot;week&quot;:case&quot;isoWeek&quot;:case&quot;day&quot;:this.hours(0);case&quot;hour&quot;:this.minutes(0);case&quot;minute&quot;:this.seconds(0);case&quot;second&quot;:this.milliseconds(0)}return&quot;week&quot;===a&amp;&amp;this.weekday(0),&quot;isoWeek&quot;===a&amp;&amp;this.isoWeekday(1),&quot;quarter&quot;===a&amp;&amp;this.month(3*Math.floor(this.month()/3)),this}function ub(a){return a=A(a),void 0===a||&quot;millisecond&quot;===a?this:this.startOf(a).add(1,&quot;isoWeek&quot;===a?&quot;week&quot;:a).subtract(1,&quot;ms&quot;)}function vb(){return+this._d-6e4*(this._offset||0)}function wb(){return Math.floor(+this/1e3)}function xb(){return this._offset?new Date(+this):this._d}function yb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function zb(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Ab(){return k(this)}function Bb(){return g({},j(this))}function Cb(){return j(this).overflow}function Db(a,b){H(0,[a,a.length],0,b)}function Eb(a,b,c){return ja(Da([a,11,31+b-c]),b,c).week}function Fb(a){var b=ja(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Gb(a){var b=ja(this,1,4).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Hb(){return Eb(this.year(),1,4)}function Ib(){var a=this.localeData()._week;return Eb(this.year(),a.dow,a.doy)}function Jb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Kb(a,b){return&quot;string&quot;!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),&quot;number&quot;==typeof a?a:null):parseInt(a,10)}function Lb(a){return this._weekdays[a.day()]}function Mb(a){return this._weekdaysShort[a.day()]}function Nb(a){return this._weekdaysMin[a.day()]}function Ob(a){var b,c,d;for(this._weekdaysParse=this._weekdaysParse||[],b=0;7&gt;b;b++)if(this._weekdaysParse[b]||(c=Da([2e3,1]).day(b),d=&quot;^&quot;+this.weekdays(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysShort(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysMin(c,&quot;&quot;),this._weekdaysParse[b]=new RegExp(d.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),this._weekdaysParse[b].test(a))return b}function Pb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Kb(a,this.localeData()),this.add(a-b,&quot;d&quot;)):b}function Qb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,&quot;d&quot;)}function Rb(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Sb(a,b){H(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Tb(a,b){return b._meridiemParse}function Ub(a){return&quot;p&quot;===(a+&quot;&quot;).toLowerCase().charAt(0)}function Vb(a,b,c){return a&gt;11?c?&quot;pm&quot;:&quot;PM&quot;:c?&quot;am&quot;:&quot;AM&quot;}function Wb(a,b){b[ld]=q(1e3*(&quot;0.&quot;+a))}function Xb(){return this._isUTC?&quot;UTC&quot;:&quot;&quot;}function Yb(){return this._isUTC?&quot;Coordinated Universal Time&quot;:&quot;&quot;}function Zb(a){return Da(1e3*a)}function $b(){return Da.apply(null,arguments).parseZone()}function _b(a,b,c){var d=this._calendar[a];return&quot;function&quot;==typeof d?d.call(b,c):d}function ac(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function bc(){return this._invalidDate}function cc(a){return this._ordinal.replace(&quot;%d&quot;,a)}function dc(a){return a}function ec(a,b,c,d){var e=this._relativeTime[c];return&quot;function&quot;==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function fc(a,b){var c=this._relativeTime[a&gt;0?&quot;future&quot;:&quot;past&quot;];return&quot;function&quot;==typeof c?c(b):c.replace(/%s/i,b)}function gc(a){var b,c;for(c in a)b=a[c],&quot;function&quot;==typeof b?this[c]=b:this[&quot;_&quot;+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+&quot;|&quot;+/\d{1,2}/.source)}function hc(a,b,c,d){var e=y(),f=h().set(d,b);return e[c](f,a)}function ic(a,b,c,d,e){if(&quot;number&quot;==typeof a&amp;&amp;(b=a,a=void 0),a=a||&quot;&quot;,null!=b)return hc(a,b,c,e);var f,g=[];for(f=0;d&gt;f;f++)g[f]=hc(a,f,c,e);return g}function jc(a,b){return ic(a,b,&quot;months&quot;,12,&quot;month&quot;)}function kc(a,b){return ic(a,b,&quot;monthsShort&quot;,12,&quot;month&quot;)}function lc(a,b){return ic(a,b,&quot;weekdays&quot;,7,&quot;day&quot;)}function mc(a,b){return ic(a,b,&quot;weekdaysShort&quot;,7,&quot;day&quot;)}function nc(a,b){return ic(a,b,&quot;weekdaysMin&quot;,7,&quot;day&quot;)}function oc(){var a=this._data;return this._milliseconds=Wd(this._milliseconds),this._days=Wd(this._days),this._months=Wd(this._months),a.milliseconds=Wd(a.milliseconds),a.seconds=Wd(a.seconds),a.minutes=Wd(a.minutes),a.hours=Wd(a.hours),a.months=Wd(a.months),a.years=Wd(a.years),this}function pc(a,b,c,d){var e=Ya(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function qc(a,b){return pc(this,a,b,1)}function rc(a,b){return pc(this,a,b,-1)}function sc(a){return 0&gt;a?Math.floor(a):Math.ceil(a)}function tc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f&gt;=0&amp;&amp;g&gt;=0&amp;&amp;h&gt;=0||0&gt;=f&amp;&amp;0&gt;=g&amp;&amp;0&gt;=h||(f+=864e5*sc(vc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=p(f/1e3),i.seconds=a%60,b=p(a/60),i.minutes=b%60,c=p(b/60),i.hours=c%24,g+=p(c/24),e=p(uc(g)),h+=e,g-=sc(vc(e)),d=p(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function uc(a){return 4800*a/146097}function vc(a){return 146097*a/4800}function wc(a){var b,c,d=this._milliseconds;if(a=A(a),&quot;month&quot;===a||&quot;year&quot;===a)return b=this._days+d/864e5,c=this._months+uc(b),&quot;month&quot;===a?c:c/12;switch(b=this._days+Math.round(vc(this._months)),a){case&quot;week&quot;:return b/7+d/6048e5;case&quot;day&quot;:return b+d/864e5;case&quot;hour&quot;:return 24*b+d/36e5;case&quot;minute&quot;:return 1440*b+d/6e4;case&quot;second&quot;:return 86400*b+d/1e3;case&quot;millisecond&quot;:return Math.floor(864e5*b)+d;default:throw new Error(&quot;Unknown unit &quot;+a)}}function xc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*q(this._months/12)}function yc(a){return function(){return this.as(a)}}function zc(a){return a=A(a),this[a+&quot;s&quot;]()}function Ac(a){return function(){return this._data[a]}}function Bc(){return p(this.days()/7)}function Cc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Dc(a,b,c){var d=Ya(a).abs(),e=ke(d.as(&quot;s&quot;)),f=ke(d.as(&quot;m&quot;)),g=ke(d.as(&quot;h&quot;)),h=ke(d.as(&quot;d&quot;)),i=ke(d.as(&quot;M&quot;)),j=ke(d.as(&quot;y&quot;)),k=e&lt;le.s&amp;&amp;[&quot;s&quot;,e]||1===f&amp;&amp;[&quot;m&quot;]||f&lt;le.m&amp;&amp;[&quot;mm&quot;,f]||1===g&amp;&amp;[&quot;h&quot;]||g&lt;le.h&amp;&amp;[&quot;hh&quot;,g]||1===h&amp;&amp;[&quot;d&quot;]||h&lt;le.d&amp;&amp;[&quot;dd&quot;,h]||1===i&amp;&amp;[&quot;M&quot;]||i&lt;le.M&amp;&amp;[&quot;MM&quot;,i]||1===j&amp;&amp;[&quot;y&quot;]||[&quot;yy&quot;,j];return k[2]=b,k[3]=+a&gt;0,k[4]=c,Cc.apply(null,k)}function Ec(a,b){return void 0===le[a]?!1:void 0===b?le[a]:(le[a]=b,!0)}function Fc(a){var b=this.localeData(),c=Dc(this,!a,b);return a&amp;&amp;(c=b.pastFuture(+this,c)),b.postformat(c)}function Gc(){var a,b,c,d=me(this._milliseconds)/1e3,e=me(this._days),f=me(this._months);a=p(d/60),b=p(a/60),d%=60,a%=60,c=p(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0&gt;m?&quot;-&quot;:&quot;&quot;)+&quot;P&quot;+(g?g+&quot;Y&quot;:&quot;&quot;)+(h?h+&quot;M&quot;:&quot;&quot;)+(i?i+&quot;D&quot;:&quot;&quot;)+(j||k||l?&quot;T&quot;:&quot;&quot;)+(j?j+&quot;H&quot;:&quot;&quot;)+(k?k+&quot;M&quot;:&quot;&quot;)+(l?l+&quot;S&quot;:&quot;&quot;):&quot;P0D&quot;}var Hc,Ic,Jc=a.momentProperties=[],Kc=!1,Lc={},Mc={},Nc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Pc={},Qc={},Rc=/\d/,Sc=/\d\d/,Tc=/\d{3}/,Uc=/\d{4}/,Vc=/[+-]?\d{6}/,Wc=/\d\d?/,Xc=/\d{1,3}/,Yc=/\d{1,4}/,Zc=/[+-]?\d{1,6}/,$c=/\d+/,_c=/[+-]?\d+/,ad=/Z|[+-]\d\d:?\d\d/gi,bd=/[+-]?\d+(\.\d{1,3})?/,cd=/[0-9]*[&apos;a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,dd={},ed={},fd=0,gd=1,hd=2,id=3,jd=4,kd=5,ld=6;H(&quot;M&quot;,[&quot;MM&quot;,2],&quot;Mo&quot;,function(){return this.month()+1}),H(&quot;MMM&quot;,0,0,function(a){return this.localeData().monthsShort(this,a)}),H(&quot;MMMM&quot;,0,0,function(a){return this.localeData().months(this,a)}),z(&quot;month&quot;,&quot;M&quot;),N(&quot;M&quot;,Wc),N(&quot;MM&quot;,Wc,Sc),N(&quot;MMM&quot;,cd),N(&quot;MMMM&quot;,cd),Q([&quot;M&quot;,&quot;MM&quot;],function(a,b){b[gd]=q(a)-1}),Q([&quot;MMM&quot;,&quot;MMMM&quot;],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[gd]=e:j(c).invalidMonth=a});var md=&quot;January_February_March_April_May_June_July_August_September_October_November_December&quot;.split(&quot;_&quot;),nd=&quot;Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec&quot;.split(&quot;_&quot;),od={};a.suppressDeprecationWarnings=!1;var pd=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,qd=[[&quot;YYYYYY-MM-DD&quot;,/[+-]\d{6}-\d{2}-\d{2}/],[&quot;YYYY-MM-DD&quot;,/\d{4}-\d{2}-\d{2}/],[&quot;GGGG-[W]WW-E&quot;,/\d{4}-W\d{2}-\d/],[&quot;GGGG-[W]WW&quot;,/\d{4}-W\d{2}/],[&quot;YYYY-DDD&quot;,/\d{4}-\d{3}/]],rd=[[&quot;HH:mm:ss.SSSS&quot;,/(T| )\d\d:\d\d:\d\d\.\d+/],[&quot;HH:mm:ss&quot;,/(T| )\d\d:\d\d:\d\d/],[&quot;HH:mm&quot;,/(T| )\d\d:\d\d/],[&quot;HH&quot;,/(T| )\d\d/]],sd=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=aa(&quot;moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.&quot;,function(a){a._d=new Date(a._i+(a._useUTC?&quot; UTC&quot;:&quot;&quot;))}),H(0,[&quot;YY&quot;,2],0,function(){return this.year()%100}),H(0,[&quot;YYYY&quot;,4],0,&quot;year&quot;),H(0,[&quot;YYYYY&quot;,5],0,&quot;year&quot;),H(0,[&quot;YYYYYY&quot;,6,!0],0,&quot;year&quot;),z(&quot;year&quot;,&quot;y&quot;),N(&quot;Y&quot;,_c),N(&quot;YY&quot;,Wc,Sc),N(&quot;YYYY&quot;,Yc,Uc),N(&quot;YYYYY&quot;,Zc,Vc),N(&quot;YYYYYY&quot;,Zc,Vc),Q([&quot;YYYYY&quot;,&quot;YYYYYY&quot;],fd),Q(&quot;YYYY&quot;,function(b,c){c[fd]=2===b.length?a.parseTwoDigitYear(b):q(b)}),Q(&quot;YY&quot;,function(b,c){c[fd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return q(a)+(q(a)&gt;68?1900:2e3)};var td=C(&quot;FullYear&quot;,!1);H(&quot;w&quot;,[&quot;ww&quot;,2],&quot;wo&quot;,&quot;week&quot;),H(&quot;W&quot;,[&quot;WW&quot;,2],&quot;Wo&quot;,&quot;isoWeek&quot;),z(&quot;week&quot;,&quot;w&quot;),z(&quot;isoWeek&quot;,&quot;W&quot;),N(&quot;w&quot;,Wc),N(&quot;ww&quot;,Wc,Sc),N(&quot;W&quot;,Wc),N(&quot;WW&quot;,Wc,Sc),R([&quot;w&quot;,&quot;ww&quot;,&quot;W&quot;,&quot;WW&quot;],function(a,b,c,d){b[d.substr(0,1)]=q(a)});var ud={dow:0,doy:6};H(&quot;DDD&quot;,[&quot;DDDD&quot;,3],&quot;DDDo&quot;,&quot;dayOfYear&quot;),z(&quot;dayOfYear&quot;,&quot;DDD&quot;),N(&quot;DDD&quot;,Xc),N(&quot;DDDD&quot;,Tc),Q([&quot;DDD&quot;,&quot;DDDD&quot;],function(a,b,c){c._dayOfYear=q(a)}),a.ISO_8601=function(){};var vd=aa(&quot;moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return this&gt;a?this:a}),wd=aa(&quot;moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return a&gt;this?this:a});Ja(&quot;Z&quot;,&quot;:&quot;),Ja(&quot;ZZ&quot;,&quot;&quot;),N(&quot;Z&quot;,ad),N(&quot;ZZ&quot;,ad),Q([&quot;Z&quot;,&quot;ZZ&quot;],function(a,b,c){c._useUTC=!0,c._tzm=Ka(a)});var xd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var yd=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,zd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Ya.fn=Ha.prototype;var Ad=ab(1,&quot;add&quot;),Bd=ab(-1,&quot;subtract&quot;);a.defaultFormat=&quot;YYYY-MM-DDTHH:mm:ssZ&quot;;var Cd=aa(&quot;moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.&quot;,function(a){return void 0===a?this.localeData():this.locale(a)});H(0,[&quot;gg&quot;,2],0,function(){return this.weekYear()%100}),H(0,[&quot;GG&quot;,2],0,function(){return this.isoWeekYear()%100}),Db(&quot;gggg&quot;,&quot;weekYear&quot;),Db(&quot;ggggg&quot;,&quot;weekYear&quot;),Db(&quot;GGGG&quot;,&quot;isoWeekYear&quot;),Db(&quot;GGGGG&quot;,&quot;isoWeekYear&quot;),z(&quot;weekYear&quot;,&quot;gg&quot;),z(&quot;isoWeekYear&quot;,&quot;GG&quot;),N(&quot;G&quot;,_c),N(&quot;g&quot;,_c),N(&quot;GG&quot;,Wc,Sc),N(&quot;gg&quot;,Wc,Sc),N(&quot;GGGG&quot;,Yc,Uc),N(&quot;gggg&quot;,Yc,Uc),N(&quot;GGGGG&quot;,Zc,Vc),N(&quot;ggggg&quot;,Zc,Vc),R([&quot;gggg&quot;,&quot;ggggg&quot;,&quot;GGGG&quot;,&quot;GGGGG&quot;],function(a,b,c,d){b[d.substr(0,2)]=q(a)}),R([&quot;gg&quot;,&quot;GG&quot;],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),H(&quot;Q&quot;,0,0,&quot;quarter&quot;),z(&quot;quarter&quot;,&quot;Q&quot;),N(&quot;Q&quot;,Rc),Q(&quot;Q&quot;,function(a,b){b[gd]=3*(q(a)-1)}),H(&quot;D&quot;,[&quot;DD&quot;,2],&quot;Do&quot;,&quot;date&quot;),z(&quot;date&quot;,&quot;D&quot;),N(&quot;D&quot;,Wc),N(&quot;DD&quot;,Wc,Sc),N(&quot;Do&quot;,function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),Q([&quot;D&quot;,&quot;DD&quot;],hd),Q(&quot;Do&quot;,function(a,b){b[hd]=q(a.match(Wc)[0],10)});var Dd=C(&quot;Date&quot;,!0);H(&quot;d&quot;,0,&quot;do&quot;,&quot;day&quot;),H(&quot;dd&quot;,0,0,function(a){return this.localeData().weekdaysMin(this,a)}),H(&quot;ddd&quot;,0,0,function(a){return this.localeData().weekdaysShort(this,a)}),H(&quot;dddd&quot;,0,0,function(a){return this.localeData().weekdays(this,a)}),H(&quot;e&quot;,0,0,&quot;weekday&quot;),H(&quot;E&quot;,0,0,&quot;isoWeekday&quot;),z(&quot;day&quot;,&quot;d&quot;),z(&quot;weekday&quot;,&quot;e&quot;),z(&quot;isoWeekday&quot;,&quot;E&quot;),N(&quot;d&quot;,Wc),N(&quot;e&quot;,Wc),N(&quot;E&quot;,Wc),N(&quot;dd&quot;,cd),N(&quot;ddd&quot;,cd),N(&quot;dddd&quot;,cd),R([&quot;dd&quot;,&quot;ddd&quot;,&quot;dddd&quot;],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),R([&quot;d&quot;,&quot;e&quot;,&quot;E&quot;],function(a,b,c,d){b[d]=q(a)});var Ed=&quot;Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday&quot;.split(&quot;_&quot;),Fd=&quot;Sun_Mon_Tue_Wed_Thu_Fri_Sat&quot;.split(&quot;_&quot;),Gd=&quot;Su_Mo_Tu_We_Th_Fr_Sa&quot;.split(&quot;_&quot;);H(&quot;H&quot;,[&quot;HH&quot;,2],0,&quot;hour&quot;),H(&quot;h&quot;,[&quot;hh&quot;,2],0,function(){return this.hours()%12||12}),Sb(&quot;a&quot;,!0),Sb(&quot;A&quot;,!1),z(&quot;hour&quot;,&quot;h&quot;),N(&quot;a&quot;,Tb),N(&quot;A&quot;,Tb),N(&quot;H&quot;,Wc),N(&quot;h&quot;,Wc),N(&quot;HH&quot;,Wc,Sc),N(&quot;hh&quot;,Wc,Sc),Q([&quot;H&quot;,&quot;HH&quot;],id),Q([&quot;a&quot;,&quot;A&quot;],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),Q([&quot;h&quot;,&quot;hh&quot;],function(a,b,c){b[id]=q(a),j(c).bigHour=!0});var Hd=/[ap]\.?m?\.?/i,Id=C(&quot;Hours&quot;,!0);H(&quot;m&quot;,[&quot;mm&quot;,2],0,&quot;minute&quot;),z(&quot;minute&quot;,&quot;m&quot;),N(&quot;m&quot;,Wc),N(&quot;mm&quot;,Wc,Sc),Q([&quot;m&quot;,&quot;mm&quot;],jd);var Jd=C(&quot;Minutes&quot;,!1);H(&quot;s&quot;,[&quot;ss&quot;,2],0,&quot;second&quot;),z(&quot;second&quot;,&quot;s&quot;),N(&quot;s&quot;,Wc),N(&quot;ss&quot;,Wc,Sc),Q([&quot;s&quot;,&quot;ss&quot;],kd);var Kd=C(&quot;Seconds&quot;,!1);H(&quot;S&quot;,0,0,function(){return~~(this.millisecond()/100)}),H(0,[&quot;SS&quot;,2],0,function(){return~~(this.millisecond()/10)}),H(0,[&quot;SSS&quot;,3],0,&quot;millisecond&quot;),H(0,[&quot;SSSS&quot;,4],0,function(){return 10*this.millisecond()}),H(0,[&quot;SSSSS&quot;,5],0,function(){return 100*this.millisecond()}),H(0,[&quot;SSSSSS&quot;,6],0,function(){return 1e3*this.millisecond()}),H(0,[&quot;SSSSSSS&quot;,7],0,function(){return 1e4*this.millisecond()}),H(0,[&quot;SSSSSSSS&quot;,8],0,function(){return 1e5*this.millisecond()}),H(0,[&quot;SSSSSSSSS&quot;,9],0,function(){return 1e6*this.millisecond()}),z(&quot;millisecond&quot;,&quot;ms&quot;),N(&quot;S&quot;,Xc,Rc),N(&quot;SS&quot;,Xc,Sc),N(&quot;SSS&quot;,Xc,Tc);var Ld;for(Ld=&quot;SSSS&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)N(Ld,$c);for(Ld=&quot;S&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)Q(Ld,Wb);var Md=C(&quot;Milliseconds&quot;,!1);H(&quot;z&quot;,0,0,&quot;zoneAbbr&quot;),H(&quot;zz&quot;,0,0,&quot;zoneName&quot;);var Nd=n.prototype;Nd.add=Ad,Nd.calendar=cb,Nd.clone=db,Nd.diff=ib,Nd.endOf=ub,Nd.format=mb,Nd.from=nb,Nd.fromNow=ob,Nd.to=pb,Nd.toNow=qb,Nd.get=F,Nd.invalidAt=Cb,Nd.isAfter=eb,Nd.isBefore=fb,Nd.isBetween=gb,Nd.isSame=hb,Nd.isValid=Ab,Nd.lang=Cd,Nd.locale=rb,Nd.localeData=sb,Nd.max=wd,Nd.min=vd,Nd.parsingFlags=Bb,Nd.set=F,Nd.startOf=tb,Nd.subtract=Bd,Nd.toArray=yb,Nd.toObject=zb,Nd.toDate=xb,Nd.toISOString=lb,Nd.toJSON=lb,Nd.toString=kb,Nd.unix=wb,Nd.valueOf=vb,Nd.year=td,Nd.isLeapYear=ia,Nd.weekYear=Fb,Nd.isoWeekYear=Gb,Nd.quarter=Nd.quarters=Jb,Nd.month=Y,Nd.daysInMonth=Z,Nd.week=Nd.weeks=na,Nd.isoWeek=Nd.isoWeeks=oa,Nd.weeksInYear=Ib,Nd.isoWeeksInYear=Hb,Nd.date=Dd,Nd.day=Nd.days=Pb,Nd.weekday=Qb,Nd.isoWeekday=Rb,Nd.dayOfYear=qa,Nd.hour=Nd.hours=Id,Nd.minute=Nd.minutes=Jd,Nd.second=Nd.seconds=Kd,
Nd.millisecond=Nd.milliseconds=Md,Nd.utcOffset=Na,Nd.utc=Pa,Nd.local=Qa,Nd.parseZone=Ra,Nd.hasAlignedHourOffset=Sa,Nd.isDST=Ta,Nd.isDSTShifted=Ua,Nd.isLocal=Va,Nd.isUtcOffset=Wa,Nd.isUtc=Xa,Nd.isUTC=Xa,Nd.zoneAbbr=Xb,Nd.zoneName=Yb,Nd.dates=aa(&quot;dates accessor is deprecated. Use date instead.&quot;,Dd),Nd.months=aa(&quot;months accessor is deprecated. Use month instead&quot;,Y),Nd.years=aa(&quot;years accessor is deprecated. Use year instead&quot;,td),Nd.zone=aa(&quot;moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779&quot;,Oa);var Od=Nd,Pd={sameDay:&quot;[Today at] LT&quot;,nextDay:&quot;[Tomorrow at] LT&quot;,nextWeek:&quot;dddd [at] LT&quot;,lastDay:&quot;[Yesterday at] LT&quot;,lastWeek:&quot;[Last] dddd [at] LT&quot;,sameElse:&quot;L&quot;},Qd={LTS:&quot;h:mm:ss A&quot;,LT:&quot;h:mm A&quot;,L:&quot;MM/DD/YYYY&quot;,LL:&quot;MMMM D, YYYY&quot;,LLL:&quot;MMMM D, YYYY h:mm A&quot;,LLLL:&quot;dddd, MMMM D, YYYY h:mm A&quot;},Rd=&quot;Invalid date&quot;,Sd=&quot;%d&quot;,Td=/\d{1,2}/,Ud={future:&quot;in %s&quot;,past:&quot;%s ago&quot;,s:&quot;a few seconds&quot;,m:&quot;a minute&quot;,mm:&quot;%d minutes&quot;,h:&quot;an hour&quot;,hh:&quot;%d hours&quot;,d:&quot;a day&quot;,dd:&quot;%d days&quot;,M:&quot;a month&quot;,MM:&quot;%d months&quot;,y:&quot;a year&quot;,yy:&quot;%d years&quot;},Vd=s.prototype;Vd._calendar=Pd,Vd.calendar=_b,Vd._longDateFormat=Qd,Vd.longDateFormat=ac,Vd._invalidDate=Rd,Vd.invalidDate=bc,Vd._ordinal=Sd,Vd.ordinal=cc,Vd._ordinalParse=Td,Vd.preparse=dc,Vd.postformat=dc,Vd._relativeTime=Ud,Vd.relativeTime=ec,Vd.pastFuture=fc,Vd.set=gc,Vd.months=U,Vd._months=md,Vd.monthsShort=V,Vd._monthsShort=nd,Vd.monthsParse=W,Vd.week=ka,Vd._week=ud,Vd.firstDayOfYear=ma,Vd.firstDayOfWeek=la,Vd.weekdays=Lb,Vd._weekdays=Ed,Vd.weekdaysMin=Nb,Vd._weekdaysMin=Gd,Vd.weekdaysShort=Mb,Vd._weekdaysShort=Fd,Vd.weekdaysParse=Ob,Vd.isPM=Ub,Vd._meridiemParse=Hd,Vd.meridiem=Vb,w(&quot;en&quot;,{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===q(a%100/10)?&quot;th&quot;:1===b?&quot;st&quot;:2===b?&quot;nd&quot;:3===b?&quot;rd&quot;:&quot;th&quot;;return a+c}}),a.lang=aa(&quot;moment.lang is deprecated. Use moment.locale instead.&quot;,w),a.langData=aa(&quot;moment.langData is deprecated. Use moment.localeData instead.&quot;,y);var Wd=Math.abs,Xd=yc(&quot;ms&quot;),Yd=yc(&quot;s&quot;),Zd=yc(&quot;m&quot;),$d=yc(&quot;h&quot;),_d=yc(&quot;d&quot;),ae=yc(&quot;w&quot;),be=yc(&quot;M&quot;),ce=yc(&quot;y&quot;),de=Ac(&quot;milliseconds&quot;),ee=Ac(&quot;seconds&quot;),fe=Ac(&quot;minutes&quot;),ge=Ac(&quot;hours&quot;),he=Ac(&quot;days&quot;),ie=Ac(&quot;months&quot;),je=Ac(&quot;years&quot;),ke=Math.round,le={s:45,m:45,h:22,d:26,M:11},me=Math.abs,ne=Ha.prototype;ne.abs=oc,ne.add=qc,ne.subtract=rc,ne.as=wc,ne.asMilliseconds=Xd,ne.asSeconds=Yd,ne.asMinutes=Zd,ne.asHours=$d,ne.asDays=_d,ne.asWeeks=ae,ne.asMonths=be,ne.asYears=ce,ne.valueOf=xc,ne._bubble=tc,ne.get=zc,ne.milliseconds=de,ne.seconds=ee,ne.minutes=fe,ne.hours=ge,ne.days=he,ne.weeks=Bc,ne.months=ie,ne.years=je,ne.humanize=Fc,ne.toISOString=Gc,ne.toString=Gc,ne.toJSON=Gc,ne.locale=rb,ne.localeData=sb,ne.toIsoString=aa(&quot;toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)&quot;,Gc),ne.lang=Cd,H(&quot;X&quot;,0,0,&quot;unix&quot;),H(&quot;x&quot;,0,0,&quot;valueOf&quot;),N(&quot;x&quot;,_c),N(&quot;X&quot;,bd),Q(&quot;X&quot;,function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),Q(&quot;x&quot;,function(a,b,c){c._d=new Date(q(a))}),a.version=&quot;2.10.6&quot;,b(Da),a.fn=Od,a.min=Fa,a.max=Ga,a.utc=h,a.unix=Zb,a.months=jc,a.isDate=d,a.locale=w,a.invalid=l,a.duration=Ya,a.isMoment=o,a.weekdays=lc,a.parseZone=$b,a.localeData=y,a.isDuration=Ia,a.monthsShort=kc,a.weekdaysMin=nc,a.defineLocale=x,a.weekdaysShort=mc,a.normalizeUnits=A,a.relativeTimeThreshold=Ec;var oe=a;return oe});</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2c64669f-f07e-4365-bf64-c559ace83004</id>
                <name>stopOnErrorCount</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122375</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to Stop a channel if it reaches a particular error count. 
	Also sends an alert message via another channel (this sends a sms via our monitoring system).

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function stopOnErrorCount(cid, errorCount) {
	var channelStatisticsController = Packages.com.mirth.connect.server.controllers.ChannelStatisticsController.getInstance();
	var channelStatusController = Packages.com.mirth.connect.server.controllers.ChannelStatusController.getInstance();
	var stats = channelStatisticsController.getStatistics(cid);
	// var numOfQueued = stats.queued;
	var numOfErrors = stats.error;

	if(numOfErrors &gt; errorCount )
	{
		//Stop Me
		channelStatusController.stopChannel(cid);
		//Alert msg sent to _SVHALERT channel
		var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
		var channelName = channelController.getDeployedChannelById(cid).getName();
		var alertmsg = &apos;mirth01 mirth_channel_status codeTemplate_stopOnErrorCount 0 &apos; +
					   &apos;channel &apos; + channelName + &apos; stopped&apos;;
		router.routeMessage(&apos;_SVHALERT&apos;, alertmsg);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>08044817-3504-4fc1-80ee-404870195151</id>
                <name>test</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122745</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.
	searchword
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function testfunc(arg1) {
	return arg1;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
            <name>WebPT-Mirth</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121602</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
                <name>Fix HL7v2 Node Order</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121804</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>35f4c250-08b4-4e42-8e60-f85aa98dfe50</id>
            <name>WebPT-Translations</name>
            <revision>3</revision>
            <lastModified>
              <time>1690140133521</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>be8f057b-2640-4613-b2e7-83326c59169c</id>
                <name>AddZeros</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122826</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function addZeroes(num) {
   return num.toLocaleString(&quot;en&quot;, {useGrouping: false, minimumFractionDigits: 2})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>51913864-7702-489a-b7c6-54992c12b19d</id>
                <name>FindLookupValueWithDefault</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122218</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithDefault ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        //obj.LeftValue = LeftValue;
        //obj.RightValue1 = DefaultValue1;
        //obj.RightValue2   = DefaultValue2; 
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);
            var result = pattern.test(LeftValue );

            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c276be9f-c8f1-4dea-8df0-e000c6745271</id>
                <name>FindLookupValueWithInsuranceId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122080</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithInsuranceId ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);             
            var result = pattern.test(LeftValue );
	
            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7d746da2-58c6-44eb-ad5c-c5bfd0a0c537</id>
                <name>UseExternalProblemID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122349</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalProblemID() {

if ([&apos;2804&apos;, &apos;2822&apos;].indexOf($(&apos;tenantId&apos;) + &apos;&apos;) &gt; -1) {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitexternalproblemid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitaccountnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>07730e85-7f30-4ddf-90a4-78183c896ab5</id>
                <name>UseExternalVisitID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122192</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalVisitID() {
	
if ($(&apos;tenantId&apos;)  == &apos;9999&apos; ) {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitexternalvisitid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitvisitnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
        <channelTags>
          <channelTag>
            <id>e2256351-a12c-4e51-b138-af4985cb4c3e</id>
            <name>AristaMd</name>
            <channelIds>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>28cdc2db-4028-4249-b1b8-c2ba3961a137</id>
            <name>HL7</name>
            <channelIds>
              <string>6a2a6c33-33da-4783-b823-bd95bf387981</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>5beae4c2-e7f8-4ae3-9fca-703dea9233a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>1ae4e7ac-e62f-468c-aa2a-99cbd6139838</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>0638775c-6c87-4a71-b4b3-7ae52be05c1b</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
            </channelIds>
            <backgroundColor>
              <red>128</red>
              <green>128</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>f93d3cf4-993b-4880-8ca1-379b14b9bb99</id>
            <name>OMG</name>
            <channelIds>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
            </channelIds>
            <backgroundColor>
              <red>128</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>44a77229-9cad-4709-8b43-0b6ea153a792</id>
            <name>OUT</name>
            <channelIds>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>255</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>7822e1f8-3e89-4e46-8317-a1119bab773f</id>
            <name>SanMateo</name>
            <channelIds>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
            </channelIds>
            <backgroundColor>
              <red>128</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
        </channelTags>
      </exportData>
    </channel>
    <channel version="3.12.0">
      <id>4964d3cc-7004-41c7-a704-da97ac92caf3</id>
      <nextMetaDataId>13</nextMetaDataId>
      <name>SANMATEO_IN_HL7_RECEIVER</name>
      <description></description>
      <revision>1</revision>
      <sourceConnector version="3.12.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.tcp.TcpReceiverProperties" version="3.12.0">
          <pluginProperties/>
          <listenerConnectorProperties version="3.12.0">
            <host>0.0.0.0</host>
            <port>6662</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="3.12.0">
            <responseVariable>Auto-generate (After source transformer)</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>true</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <transmissionModeProperties class="com.mirth.connect.plugins.mllpmode.MLLPModeProperties">
            <pluginPointName>MLLP</pluginPointName>
            <startOfMessageBytes>0B</startOfMessageBytes>
            <endOfMessageBytes>1C0D</endOfMessageBytes>
            <useMLLPv2>false</useMLLPv2>
            <ackBytes>06</ackBytes>
            <nackBytes>15</nackBytes>
            <maxRetries>2</maxRetries>
          </transmissionModeProperties>
          <serverMode>true</serverMode>
          <remoteAddress></remoteAddress>
          <remotePort></remotePort>
          <overrideLocalBinding>false</overrideLocalBinding>
          <reconnectInterval>5000</reconnectInterval>
          <receiveTimeout>0</receiveTimeout>
          <bufferSize>65536</bufferSize>
          <maxConnections>10</maxConnections>
          <keepConnectionOpen>true</keepConnectionOpen>
          <dataTypeBinary>false</dataTypeBinary>
          <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
          <respondOnNewConnection>0</respondOnNewConnection>
          <responseAddress></responseAddress>
          <responsePort></responsePort>
        </properties>
        <transformer version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.12.0">
              <name>channelId</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <variable>channelId</variable>
              <mapping></mapping>
              <defaultValue>connectorMessage.getChannelId()</defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Parse HL7v2 Message - ChannelMap</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>/* 
Name: 	Parse HL7v2 Message - ChannelMap
Desc: 	Parse HL7v2 Message - ChannelMap
Created:	2020-12-01 
Modified:
2020-11-23 JER - Modified to match the provided HL7 msg file
*/
var scriptName= &quot;Parse HL7v2 Message - ChannelMap&quot;;
var debug= 1;

if (debug&gt;0) { channelMap.put(scriptName+&quot;_DEBUG_msg&quot;,msg); }

channelMap.put(&quot;EventType&quot;, msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString()+&quot;^&quot;+msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString());
channelMap.put(&quot;Source&quot;, msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString()+&quot;:&quot;+msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString());
if(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].length()&gt;1) {
	channelMap.put(&quot;PatientID&quot;, msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;][0].toString());
} else {
	channelMap.put(&quot;PatientID&quot;, msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString());
}
channelMap.put(&quot;VisitNumber&quot;, msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString());

//tmp[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]= UUIDGenerator.getUUID().toString();
var strMessageControlId= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
if((typeof(msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]) == &apos;undefined&apos;) || (msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString().length&lt;1)) {
	msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]= UUIDGenerator.getUUID().toString();
} 
channelMap.put(&quot;MessageID&quot;, msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString());

channelMap.put(&quot;in_msg&quot;,msg);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>HL7V2</inboundDataType>
          <outboundDataType>XML</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
              <handleRepetitions>true</handleRepetitions>
              <handleSubcomponents>true</handleSubcomponents>
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <stripNamespaces>true</stripNamespaces>
              <segmentDelimiter>\r</segmentDelimiter>
              <convertLineBreaks>true</convertLineBreaks>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <segmentDelimiter>\r</segmentDelimiter>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
              <splitType>MSH_Segment</splitType>
              <batchScript></batchScript>
            </batchProperties>
            <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
              <segmentDelimiter>\r</segmentDelimiter>
              <successfulACKCode>AA</successfulACKCode>
              <successfulACKMessage></successfulACKMessage>
              <errorACKCode>AE</errorACKCode>
              <errorACKMessage>${failureMessage}</errorACKMessage>
              <rejectedACKCode>AR</rejectedACKCode>
              <rejectedACKMessage>${rejectMessage}</rejectedACKMessage>
              <msh15ACKAccept>false</msh15ACKAccept>
              <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
            </responseGenerationProperties>
            <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
              <successfulACKCode>AA,CA</successfulACKCode>
              <errorACKCode>AE,CE</errorACKCode>
              <rejectedACKCode>AR,CR</rejectedACKCode>
              <validateMessageControlId>true</validateMessageControlId>
              <originalMessageControlId>Destination_Encoded</originalMessageControlId>
              <originalIdMapVariable></originalIdMapVariable>
            </responseValidationProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.12.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.12.0">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.12.0">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.javascriptrule.JavaScriptRule version="3.12.0">
              <name>Filter In-Validated HL7 Message</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>/* 
Name: 	filter_validation_hl7_message.js
Desc: 	Filter Incoming HL7v2 Message - ChannelMap
Created:	2021-02-12 
Modified:
*/
var scriptName= &quot;filter_validation_hl7_message&quot;;
var debug= 0;
var msgCtrlId= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
var msgDateTime= msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
if(msgCtrlId.toString().length&lt; 1) {
	msgCtrlId= msgDateTime;
}

if (debug&gt;0) { logger.debug(scriptName+&quot;::DEBUG received msg: &quot;+msg); }
// Verify PID-3 element value
if(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString().length &gt; 0) {
    if (debug&gt;0) { logger.debug(scriptName+&quot;::DEBUG message PASSED filter successfully&quot;); }
} else {
	var failureMessage= &apos;PID-3 Element: Missing Patient ID&apos;;
	logger.error(scriptName+&quot;::DEBUG message: &quot;+msgCtrlId+&quot; FILTERED msg: &quot;+failureMessage);
}
// Verify PID-18 element value
if(msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString().length &gt; 0) {
    if (debug&gt;0) { logger.debug(scriptName+&quot;::DEBUG message PASSED filter successfully&quot;); }
} else {
	var failureMessage= &apos;PID-18 Element: Missing Account Number&apos;;
	logger.error(scriptName+&quot;::DEBUG message: &quot;+msgCtrlId+&quot; FILTERED msg: &quot;+failureMessage);
}
// Verify PV1-19 element value
if(msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PID.19.1&apos;].toString().length &gt; 0) {
    if (debug&gt;0) { logger.debug(scriptName+&quot;::DEBUG message PASSED filter successfully&quot;); }
} else {
	var failureMessage= &apos;PV1-19 Element: Missing Visit Number&apos;;
	logger.error(scriptName+&quot;::DEBUG message: &quot;+msgCtrlId+&quot; FILTERED msg: &quot;+failureMessage);
}

if(failureMessage) {
	$c(&apos;rejectMessage&apos;,failureMessage);
	$c(&apos;failureMessage&apos;,failureMessage);
	return false;
} else {
    return true;
}</script>
            </com.mirth.connect.plugins.javascriptrule.JavaScriptRule>
          </elements>
        </filter>
        <transportName>TCP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.12.0">
          <metaDataId>5</metaDataId>
          <name>FileWriter - All HL7 messages</name>
          <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <scheme>FILE</scheme>
            <host>C:/HL7/JSON/OUT</host>
            <outputPattern>${EventType}_${PatientID}_${MessageID}.json</outputPattern>
            <anonymous>true</anonymous>
            <username>anonymous</username>
            <password>anonymous</password>
            <timeout>10000</timeout>
            <keepConnectionOpen>false</keepConnectionOpen>
            <maxIdleTime>0</maxIdleTime>
            <secure>true</secure>
            <passive>true</passive>
            <validateConnection>true</validateConnection>
            <outputAppend>false</outputAppend>
            <errorOnExists>false</errorOnExists>
            <temporary>false</temporary>
            <binary>false</binary>
            <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
            <template>${message.encodedData}</template>
          </properties>
          <transformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>channelMap put msg</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>channelMap.put(&apos;out_msg&apos;,msg);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.12.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.12.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.12.0">
                <name>Accept message if &quot;$(&apos;EventType&apos;)&quot; equals &quot;SIU^S12&quot; or &quot;SIU^S14&quot; or &quot;SIU^S15&quot; or &quot;OMG^O19&quot; or &quot;ORU^R01&quot;</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>false</enabled>
                <field>$(&apos;EventType&apos;)</field>
                <condition>EQUALS</condition>
                <values>
                  <string>&quot;SIU^S12&quot;</string>
                  <string>&quot;SIU^S14&quot;</string>
                  <string>&quot;SIU^S15&quot;</string>
                  <string>&quot;OMG^O19&quot;</string>
                  <string>&quot;ORU^R01&quot;</string>
                </values>
              </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
            </elements>
          </filter>
          <transportName>File Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>7</metaDataId>
          <name>Channel Sender - Scheduling</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>7a3b0715-12e0-4803-aa51-c1a947ef9b66</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.12.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.12.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.12.0">
                <name>Accept message if &quot;$(&apos;EventType&apos;)&quot; equals &quot;SIU^S12&quot; or &quot;SIU^S14&quot; or &quot;SIU^S15&quot;</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <field>$(&apos;EventType&apos;)</field>
                <condition>EQUALS</condition>
                <values>
                  <string>&quot;SIU^S12&quot;</string>
                  <string>&quot;SIU^S14&quot;</string>
                  <string>&quot;SIU^S15&quot;</string>
                </values>
              </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
            </elements>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>11</metaDataId>
          <name>Channel Sender - Ordering</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>1c6037e0-7bf9-41ae-b896-5be7b77e711f</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.12.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.12.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.12.0">
                <name>Accept message if &quot;$(&apos;EventType&apos;)&quot; equals &quot;OMG^O19&quot;</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <field>$(&apos;EventType&apos;)</field>
                <condition>EQUALS</condition>
                <values>
                  <string>&quot;OMG^O19&quot;</string>
                </values>
              </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
            </elements>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>12</metaDataId>
          <name>Channel Sender - Observations</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>a757905f-315a-43be-a624-38780a3d7574</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.12.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.12.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>true</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.12.0">
                <name>Accept message if &quot;$(&apos;EventType&apos;)&quot; contains &quot;ORU^R01&quot;</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <field>$(&apos;EventType&apos;)</field>
                <condition>CONTAINS</condition>
                <values>
                  <string>&quot;ORU^R01&quot;</string>
                </values>
              </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
            </elements>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map

// Sample postprocessor script
/*
if (response.getStatus() == &apos;FAILURE&apos;){
	var rawResponse = response.getMessage();
	var mshInd = rawResponse.search(&apos;MSH&apos;);
	var hl7Response = rawResponse.substring(mshInd,rawResponse.length());
	logger.error( &quot;ACK =&quot;+ hl7Response);
	
	var nack_resp_mess = new XML(SerializerFactory.getHL7Serializer().toXML(hl7Response));
	logger.error(&quot;ACK Format XML= &quot;+nack_resp_mess);
	var errorStatus= nack_resp_mess[&apos;MSA&apos;][&apos;MSA.3&apos;][&apos;MSA.3.1&apos;].toString();
	logger.error(&quot;error= &quot;+errorStatus);
	var xml_resp_mess= &apos;&lt;FindPatientsResponse xmlns=&quot;http://tempuri.org/&quot;&gt;&apos;+
	&apos;&lt;Error&gt;&lt;Code&gt;&apos;+response.getStatus()+&apos;&lt;/Code&gt;&apos;+&apos;&lt;ErrorStatus&gt;&lt;![CDATA[&apos;+nack_resp_mess+&apos;]]&gt;&lt;/ErrorStatus&gt;&lt;/Error&gt;&apos;+
	&apos;&lt;/FindPatientsResponse&gt;&apos;;
}
*/
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.12.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>EVENTTYPE</name>
            <type>STRING</type>
            <mappingName>EventType</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>SOURCENAME</name>
            <type>STRING</type>
            <mappingName>Source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>MESSAGEID</name>
            <type>STRING</type>
            <mappingName>MessageID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>VISITNUMBER</name>
            <type>STRING</type>
            <mappingName>VisitNumber</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.12.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1614065012111</time>
            <timezone>America/Chicago</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.12.0">
            <id>8b1aa91e-8ded-4fd9-83be-2e181a113dc2</id>
            <name>Archive HL7 to JSON (old)</name>
            <revision>5</revision>
            <lastModified>
              <time>1694393434748</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>fae65206-57ff-45af-a061-8a8aeb2d37a5</id>
                <name>convertMSHtoJSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911273642</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	convertMSHtoJSON(segment)
	
	- Desc: This function retrieves HL7v2 HAPI format elements and values from MSH segment converts to AristaMd customized JSON object for reference

	@param {String} segment - this contains the raw segment (string)
	@return {object} objMSH - this contains the MSH segment elements composed into a single objMSH
		object.
*/
function convertMSHtoJSON(segment) {

	var scriptName= &apos;convertMSHtoJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG segment: &apos;+segment.toString()); }
	
	// define variables
	if (typeof(segment.toString()) !== undefined) {

		// MSH
		// var objMSH= new Object();
		var meta = {};
			
		// MSH.9.1 Message Type -&gt; DataModel
		if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() != &quot;&quot;) { 
			var columnName= &quot;DataModel&quot;;
			if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() == &quot;SIU&quot;) { 
				meta[columnName] = &quot;Scheduling&quot;; 
			} else if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() == &quot;ORU&quot;) {
				meta[columnName]= &quot;Order Result&quot;;
			} else if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() == &quot;OMG&quot;) {
				meta[columnName]= &quot;New Order&quot;;
			} // end if 
		} // end if 

		// MSH.9.2 Event Type -&gt; EventType
		if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString() != &quot;&quot;) { 
			var columnName= &quot;EventType&quot;;
			if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString() == &quot;S12&quot;) { 
				meta[columnName] = &quot;New&quot;; 
			} else if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString() == &quot;S14&quot;) {
				meta[columnName]= &quot;Modification&quot;;
			} else if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString() == &quot;S15&quot;) {
				meta[columnName]= &quot;Cancel&quot;;
			} // end if 
		} // end if

		// MSH.7.1 Date/Time of Message -&gt; EventDateTime
		if (msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString() != &quot;&quot;) { 
			var columnName= &quot;EventDateTime&quot;;
			if(msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString().indexOf(&quot;T&quot;)&gt;-1) {
				var columnValue = msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString().substr(0,19).replace(/[^0-9]/g, &quot;&quot;);
			} else {
				var columnValue = msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
			}
			meta[columnName] = columnValue;
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
		} // end if 

		// MSH.11.1 ProcessedId -&gt; Test
		if (msg[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;].toString() != &quot;&quot;) { 
			var columnName= &quot;Test&quot;;
			if(msg[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;].toString()== &apos;T&apos;) {
				var columnValue = &quot;true&quot;;
			} else {
				var columnValue = &quot;false&quot;;
			}
			meta[columnName] = columnValue;
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
		} // end if 

		// MSH.3.1 SendingApplication -&gt; Source.Name
		if (msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString() != &quot;&quot;) { 
			var source_name_obj= {};
			var columnName= &quot;Name&quot;;
			var columnValue= msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString();
	
			source_name_obj[columnName]= columnValue;
			var parentColumnName= &quot;Source&quot;;		
			meta[parentColumnName] = source_name_obj;
			
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+parentColumnName+&quot;] value: &quot;+JSON.stringify(source_name_obj)); }
		} // end if 

		// MSH.5.1 ReceivingApplication -&gt; Destination.Name
		if (msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString() != &quot;&quot;) { 
			var destination_name_obj= {};
			var columnName= &quot;Name&quot;;
			var columnValue= msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString();
	
			destination_name_obj[columnName]= columnValue;
			var parentColumnName= &quot;Destination&quot;;		
			meta[parentColumnName] = destination_name_obj;
			
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+parentColumnName+&quot;] value: &quot;+JSON.stringify(destination_name_obj)); }
		} // end if 

		// MSH.10.1 MessageControlID -&gt; Message.ID
		if (msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString() != &quot;&quot;) { 
			var messageControlId_obj= {};
			var columnName= &quot;ID&quot;;
			var columnValue= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
	
			messageControlId_obj[columnName]= columnValue;
			var parentColumnName= &quot;Message&quot;;		
			meta[parentColumnName] = messageControlId_obj;
			
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+parentColumnName+&quot;] value: &quot;+JSON.stringify(messageControlId_obj)); }
		} // end if 

		jsonMeta= JSON.stringify(meta); // convert to JSON
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(jsonMeta)); }

		/*
		// objMSH.4, sendingFacility
		if (msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString() != &quot;&quot;) { objMSH.sendingFacility= msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString(); }
		
		// objMSH.5, receivingApplication
		if (msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString() != &quot;&quot;) { objMSH.receivingApplication = msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString(); }
		
		// objMSH.6, receivingFacility
		if (msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;].toString() != &quot;&quot;) { objMSH.receivingFacility = msg[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;].toString(); }
		
		// objMSH.7, dateTimeOfMessage
		if (msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString() != &quot;&quot;) { objMSH.messageDateTime = msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString(); }
		
		// objMSH.8, security
		if (msg[&apos;MSH&apos;][&apos;MSH.8&apos;][&apos;MSH.8.1&apos;].toString() != &quot;&quot;) { objMSH.security = msg[&apos;MSH&apos;][&apos;MSH.8&apos;][&apos;MSH.8.1&apos;].toString(); }
		
		// objMSH.9, messageType
		if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;].toString() != &quot;&quot;) {
			objMSH.messageType = msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString();
			objMSH.eventType   = msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();
			// logger.error(scriptName+&apos;::DEBUG objMSH_messageType: &apos;+objMSH.messageType+&apos; objMSH_eventType: &apos;+objMSH.eventType);
		}
		
		// objMSH.10, messageControlID
		if (msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString() != &quot;&quot;) { 
			objMSH.messageControlID = msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString(); 
		}
		
		// objMSH.11, processingID
		if (msg[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;].toString() != &quot;&quot;) {
			objMSH.processingID = msg[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;].toString(); 
		}
		
		// objMSH.12, versionID
		if (msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;].toString() != &quot;&quot;) { objMSH.hl7version = msg[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;].toString(); }
		
		// objMSH.13, sequenceNumber
		if (msg[&apos;MSH&apos;][&apos;MSH.13&apos;][&apos;MSH.13.1&apos;].toString() != &quot;&quot;) { objMSH.sequenceNumber = msg[&apos;MSH&apos;][&apos;MSH.13&apos;][&apos;MSH.13.1&apos;].toString(); }
		
		// objMSH.14, continuationPointer
		if (msg[&apos;MSH&apos;][&apos;MSH.14&apos;][&apos;MSH.14.1&apos;].toString() != &quot;&quot;) { objMSH.continuationPointer = msg[&apos;MSH&apos;][&apos;MSH.14&apos;][&apos;MSH.14.1&apos;].toString(); }
		
		// objMSH.15, acceptAcknowledgmentType
		if (msg[&apos;MSH&apos;][&apos;MSH.15&apos;][&apos;MSH.15.1&apos;].toString() != &quot;&quot;) { objMSH.acceptAcknowledgmentType = msg[&apos;MSH&apos;][&apos;MSH.15&apos;][&apos;MSH.15.1&apos;].toString(); }
		
		// objMSH.16, applicationAcknowledgmentType
		if (msg[&apos;MSH&apos;][&apos;MSH.16&apos;][&apos;MSH.16.1&apos;].toString() != &quot;&quot;) { objMSH.applicationAcknowledgmentType = msg[&apos;MSH&apos;][&apos;MSH.16&apos;][&apos;MSH.16.1&apos;].toString(); }
		
		// objMSH.17, countryCode
		if (msg[&apos;MSH&apos;][&apos;MSH.17&apos;][&apos;MSH.17.1&apos;].toString() != &quot;&quot;) { objMSH.countryCode = msg[&apos;MSH&apos;][&apos;MSH.17&apos;][&apos;MSH.17.1&apos;].toString(); }
		
		// objMSH.18, characterSet
		if (msg[&apos;MSH&apos;][&apos;MSH.18&apos;][&apos;MSH.18.1&apos;].toString() != &quot;&quot;) { objMSH.characterSet= msg[&apos;MSH&apos;][&apos;MSH.18&apos;][&apos;MSH.18.1&apos;].toString(); }

		// objMSH.19, principalLanguageOfMessage
		if (msg[&apos;MSH&apos;][&apos;MSH.19&apos;][&apos;MSH.19.1&apos;].toString() != &quot;&quot;) { objMSH.principalLanguageOfMessage = msg[&apos;MSH&apos;][&apos;MSH.19&apos;][&apos;MSH.19.1&apos;].toString(); }

		if (debug&gt;0) { 
			logger.error(scriptName+&apos;::DEBUG objMSH: &apos;+JSON.stringify(objMSH)); 
		}
		*/
		channelMap.put(&apos;MSH_json&apos;,jsonMeta);
		return jsonMeta;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>42a7d964-efbf-48b1-9b28-6552a07c3bae</id>
                <name>convertPIDtoJSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911273555</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	convertPIDtoJSON(segment)
	
	- Desc: This function retrieves HL7v2 HAPI format elements and values from PID segment converts to AristaMd customized JSON object for reference

	@param {String} segment - this contains the raw segment (string)
	@return {object} objMSH - this contains the PID segment elements composed into a single objMSH
		object.
*/
function convertPIDtoJSON(segment) {

	var scriptName= &apos;convertPIDtoJSON&apos;;
	var debug= 0;
	// if (debug&gt;0) { 
		logger.error(scriptName+&apos;::DEBUG segment: &apos;+segment.toString()); 
	// }
	
	// define variables
	if (typeof(segment.toString()) !== undefined) {

		// MSH
		// var objMSH= new Object();
		var patientHeader= {};
		
		var patient = {};

		// declare PatientIdentifiers array
		var patientIdentifiers= [];

		// declare PatientIdentifier object
		var patientIdentifier= {};
		debug= 1;
		if(typeof(msg[&apos;PID&apos;][&apos;PID.3&apos;]) !== &apos;undefined&apos;) {
			for each (element in msg[&apos;PID&apos;][&apos;PID.3&apos;]) {
				logger.info(&apos;PID.3 element: &apos;+element);
				// PID.3.1 Patient Identifier List -&gt; Patient Identifier
				if(typeof(element[&apos;PID.3.1&apos;]) !== &apos;undefined&apos;) {
					var columnName= &quot;ID&quot;;
					if(element[&apos;PID.3.1&apos;].toString() != &quot;&quot;) { 
						patientIdentifier[columnName] = element[&apos;PID.3.1&apos;].toString();
					} else {
						patientIdentifier[columnName] = null;
					} // end if
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientIdentifier[&quot;+columnName+&quot;] typeof: &quot;+typeof(patientIdentifier[columnName])+&quot; value: &quot;+patientIdentifier[columnName]); }
				} // end if 

				// PID.3.5 Patient Identifier Type Code -&gt; IDType
				if (typeof(element[&apos;PID.3.5&apos;]) !== &apos;undefined&apos;) {
					var columnName= &quot;IDType&quot;;
					if(element[&apos;PID.3.5&apos;].toString() != &quot;&quot;) { 
						patientIdentifier[columnName] = element[&apos;PID.3.5&apos;].toString();
					} else {
						patientIdentifier[columnName] = null;	
					} // end if
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientIdentifier[&quot;+columnName+&quot;] typeof: &quot;+typeof(patientIdentifier[columnName])+&quot; value: &quot;+patientIdentifier[columnName]); }
				} // end if

				if(typeof(patientIdentifier) !== &apos;undefined&apos;) {
					patientIdentifiers.push(patientIdentifier);
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientIdentifiers typeof: &quot;+typeof(patientIdentifiers)+&quot; value: &quot;+patientIdentifiers+&quot; string: &quot;+patientIdentifiers.toString()); }
				}
				
			}

			// Add Identifiers Object to Patient Object
			var columnName= &quot;Identifiers&quot;;
			patient[columnName]= patientIdentifiers;
			
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patient[&quot;+columnName+&quot;] typeof: &quot;+typeof(patient[columnName])+&quot; value: &quot;+patient[columnName]+&quot; stringify: &quot;+JSON.stringify(patient[columnName])); }
		}


		// declare Demographics 
		var patientDemographics= {};
		debug= 0;
		// PID.5.2 FirstName -&gt; Patient Demographics FirstName 
		if (typeof(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;FirstName&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString() != &quot;&quot;) {
				patientDemographics[columnName] = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString();
			} else {
				patientDemographics[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientDemographics[&quot;+columnName+&quot;] value: &quot;+patientDemographics[columnName]); }
		} // end if
		
		// PID.5.1 LastName -&gt; Patient Demographics LastName 
		if (typeof(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;LastName&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString() != &quot;&quot;) {
				patientDemographics[columnName] = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString();
			} else {
				patientDemographics[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientDemographics[&quot;+columnName+&quot;] value: &quot;+patientDemographics[columnName]); }
		} // end if
		
		// PID.5.3 MiddleName -&gt; Patient Demographics MiddleName 
		if (typeof(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;MiddleName&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString() != &quot;&quot;) {
				patientDemographics[columnName] = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString();
			} else {
				patientDemographics[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientDemographics[&quot;+columnName+&quot;] value: &quot;+patientDemographics[columnName]); }
		} // end if

		// PID.7.1 DateOfBirth -&gt; Patient Demographics DateOfBirth 
		if (typeof(msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;DOB&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString() != &quot;&quot;) {
				patientDemographics[columnName] = msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();
			} else {
				patientDemographics[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientDemographics[&quot;+columnName+&quot;] value: &quot;+patientDemographics[columnName]); }
		}
		
		// PID.8 Administrative Sex -&gt; Patient Demographics Sex
		if (typeof(msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;Sex&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString() != &quot;&quot;) {
				patientDemographics[columnName] = msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString();
			} else {
				patientDemographics[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientDemographics[&quot;+columnName+&quot;] value: &quot;+patientDemographics[columnName]); }
		} // end if

		// PID.10.1 Race Identifier -&gt; Patient Demographics Race
		if (typeof(msg[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;Race&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;].toString() != &quot;&quot;) {
				patientDemographics[columnName] = msg[&apos;PID&apos;][&apos;PID.10&apos;][&apos;PID.10.1&apos;].toString();
			} else {
				patientDemographics[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientDemographics[&quot;+columnName+&quot;] value: &quot;+patientDemographics[columnName]); }
		} // end if 
		
		// PID.16.1 Martial Status Identifier -&gt; Patient Demographics MaritalStatus
		if (typeof(msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;MaritalStatus&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;].toString() != &quot;&quot;) {
				patientDemographics[columnName] = msg[&apos;PID&apos;][&apos;PID.16&apos;][&apos;PID.16.1&apos;].toString();
			} else {
				patientDemographics[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientDemographics[&quot;+columnName+&quot;] value: &quot;+patientDemographics[columnName]); }
		} // end if
		
		// PID.30 Patient Death Indicator -&gt; Patient Demographics IsDeceased
		if (typeof(msg[&apos;PID&apos;][&apos;PID.30&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;IsDeceased&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.30&apos;].toString() != &quot;&quot;) {
				patientDemographics[columnName] = msg[&apos;PID&apos;][&apos;PID.30&apos;].toString();
			} else {
				patientDemographics[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientDemographics[&quot;+columnName+&quot;] value: &quot;+patientDemographics[columnName]); }
		} // end if 
		
		// PID.29.1 Patient Death Datetime -&gt; Patient Demographics DeathDateTime
		if (typeof(msg[&apos;PID&apos;][&apos;PID.29&apos;][&apos;PID.29.1&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;DeathDateTime&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.29&apos;][&apos;PID.29.1&apos;].toString() != &quot;&quot;) {
				patientDemographics[columnName] = msg[&apos;PID&apos;][&apos;PID.29&apos;][&apos;PID.29.1&apos;].toString();
			} else {
				patientDemographics[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientDemographics[&quot;+columnName+&quot;] value: &quot;+patientDemographics[columnName]); }
		} // end if 

		// declare phoneNumbers 
		var phoneNumbers= {};

		// declare phoneNumber
		var phoneNumber= {};

		// PID.13.1 Phone Number - Home -&gt; Patient Demographics PhoneNumber Home
		if (typeof(msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.1&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;Home&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.1&apos;].toString() != &quot;&quot;) {
				phoneNumber[columnName] = msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.1&apos;].toString();
			} else {
				phoneNumber[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG phoneNumber[&quot;+columnName+&quot;] value: &quot;+phoneNumber[columnName]); }
			Object.assign(phoneNumbers, phoneNumber);
		} // end if 
		
		// PID.14.1 Phone Number - Business -&gt; Patient Demographics PhoneNumber Office
		if (typeof(msg[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.1&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;Office&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.1&apos;].toString() != &quot;&quot;) {
				phoneNumber[columnName] = msg[&apos;PID&apos;][&apos;PID.14&apos;][&apos;PID.14.1&apos;].toString();
			} else {
				phoneNumber[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG phoneNumber[&quot;+columnName+&quot;] value: &quot;+phoneNumber[columnName]); }
			Object.assign(phoneNumbers, phoneNumber);
		} // end if

		if(typeof(phoneNumbers) !== &apos;undefined&apos;) {
			var columnName= &quot;PhoneNumber&quot;;
			patientDemographics[columnName]= phoneNumbers;
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientDemographics[&quot;+columnName+&quot;] value: &quot;+patientDemographics[columnName]); }
		} // end if 

		// PID.13.4 Email Address -&gt; Patient Demographics EmailAddresses
		if (typeof(msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.4&apos;]) !== &apos;undefined&apos;) {
			var columnName= &quot;EmailAddresses&quot;;
			if(msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.4&apos;].toString() != &quot;&quot;) {
				patientDemographics[columnName] = msg[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.4&apos;].toString();
			} else {
				patientDemographics[columnName] = null;		
			} // end if
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientDemographics[&quot;+columnName+&quot;] value: &quot;+patientDemographics[columnName]); }
		} // end if 

		// Add Demographics Object to Patient Object
		var columnName= &quot;Demographics&quot;;
		patient[columnName]= patientDemographics;
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patient[&quot;+columnName+&quot;] value: &quot;+patient[columnName]); }

		var columnName= &apos;Patient&apos;;
		patientHeader[columnName]= jsonMeta;

		// jsonMeta= JSON.stringify(patientHeader); // convert to JSON
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG patientHeader: &quot;+patientHeader); }

		channelMap.put(&apos;PID_json&apos;,patientHeader);
		return jsonMeta;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>6975d386-da5e-4267-aa01-5d181743a931</id>
            <name>AristaMd-Utilities</name>
            <revision>22</revision>
            <lastModified>
              <time>1690987302603</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>This library was added upon migration to version 3.3.0. It includes all pre-existing
code templates, and is set to be included on all pre-existing and new channels.

You should create your own new libraries and assign code templates to them as you
see fit. You should also link libraries to specific channels, so that you&apos;re not
necessarily including all code templates on all channels all the time.</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>b484c4c9-6c84-4f8e-b2ec-9bff6a8cf7db</id>
                <name>checkHL7ElementIfUndefined</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262649</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	checkElementIfUndefined (element, debug)
	
	- Function to check provided Element if Undefined or length less than 1 character return null.

	@param {element} - XML object provided (e.g. msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.1&apos;]
	@return {String} return XML object or null object reference
*/
function checkElementIfUndefined (element, debug) {
	var scriptName= &apos;checkHL7ElementIfUndefined&apos;;

	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG element: &quot;+element+&quot; typeof: &quot;+typeof(element)+&quot; string: &quot;+element.toString()+&quot; length: &quot;+element.toString().length); }
	
	if(element == &apos;undefined&apos;) {
		return null;
	} else {
		if(element.toString().length&lt;1) {
			return null;
		} else {
			return element;
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b9651842-7ccb-4761-aedf-a9a1461dd5f7</id>
                <name>Convert HL7 Date Format to ISO</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262839</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts standard HL7 v2.x date format to human-readable ISO date format
*/

/*
	Author: IntegrateIT.us LLC
	toISODate: Returns an ISO-formatted date string with specified timezone offset

	Arguments
	---------
		Required
		--------
			hl7DateString:		An HL7-formatted date string (ex: &quot;yyyyMMddHHmmss&quot;

		Optional
		--------
			timezome:			A timezone identifier string corresponding to one of the java.util.TimeZone values (ex: &quot;US/Central&quot;)
*/

function toISODate( hl7DateString, timezone ) {
	var isoDate;
	var dateString;
	var hl7Formatter;
	var isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);

	if (timezone) {
		isoFormatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timezone));
	}
	
	if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString.substring(0,13)) &amp;&amp; hl7DateString.length &gt; 14 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmssZ&quot;);
	}
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 14 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
	} 
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 12 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);
	} 
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 8 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMdd&quot;);
	} 
	else dateString = hl7DateString;
	
	try {
		if (hl7Formatter) {
			isoDate = hl7Formatter.parse(hl7DateString);
			isoDate = isoFormatter.format(isoDate);
			dateString = new String(isoDate);
		}
	} catch (err) {
		dateString = hl7DateString;
	} finally {
		return dateString;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>95e528b7-1e7f-490e-86da-7c14b23ee4f3</id>
                <name>Convert ISO Date Format to HL7</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262912</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts ISO date format to HL7 v2 format - toHL7Date( isoDateString, timezone, debug )
*/

/*
	Author: IntegrateIT.us LLC
	toHL7Date: Returns an HL7-formatted date string with specified timezone offset

	Arguments
	---------
		Required
		--------
			isoDateString:		An ISO-formatted date string (ex: &quot;yyyy-MM-ddTHH:mm:ssZ&quot;

		Optional
		--------
			timezome:			A timezone identifier string corresponding to one of the java.util.TimeZone values (ex: &quot;US/Central&quot;)
*/

function toHL7Date( isoDateString, timezone, debug ) 
{
	var scriptName= &quot;toHL7Date&quot;;
	var hl7Date;
	var dateString;
	var isoFormatter;
	var hl7Formatter;

	// 2020-11-07T00:01:22+00:00
	var strTimeZone= &quot;GMT-8:00&quot;;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG:BEGIN isoDateString: &quot;+isoDateString+&quot;, timezone: &quot;+timezone+&quot;, strTimeZone: &quot;+strTimeZone); }

	// ISO Date Format: yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;
	if ( isoDateString != null &amp;&amp; isoDateString.length &lt;= 25 &amp;&amp; isoDateString.length &gt;= 22) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmssZ&quot;);
		if (timezone) {
			hl7Formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(strTimeZone));
		}
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG:UPDATE isoDateString: &quot;+isoDateString+&quot;, isoFormatter: &quot;+isoFormatter.toString()+&quot;, hl7Formatter: &quot;+hl7Formatter.toString()+&quot;, timezone: &quot;+timezone+&quot;, strTimeZone: &quot;+strTimeZone); }
	}
	// ISO Date Format: yyyy-MM-dd HH:mm:ss
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 19 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
	}
	// ISO Date Format: yyyy-MM-dd HH:mm
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 16 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);
	} 
	// ISO Date Format: yyyy-MM-dd
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 10 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMdd&quot;);	
	}
	// None of the above, return original date string.
	else dateString = isoDateString;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG:END isoDateString: &quot;+isoDateString+&quot;, isoFormatter: &quot;+isoFormatter.toString()+&quot;, hl7Formatter: &quot;+hl7Formatter.toString()+&quot;, timezone: &quot;+timezone+&quot;, strTimeZone: &quot;+strTimeZone); }

	try {
		if (isoFormatter) {
			hl7Date = isoFormatter.parse(isoDateString);
			hl7Date = hl7Formatter.format(hl7Date);
			dateString = new String(hl7Date);
		}
	} catch (err) {
		dateString = isoDateString;
	} finally {
		return dateString;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>41b1ac94-64c4-42ed-a501-a0caca7ae187</id>
                <name>convertMDYtoHL7DateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911263005</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	Convert MM-DD-YY HH:MM format to HL7 format
	
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function convertMDYtoHL7DateTime(eventDateTime, debug) {

	var scriptName= &apos;convertMDYtoHL7DateTime&apos;;
	if(typeof(debug) == &apos;undefined&apos;) { var debug= 0; }

	var lstEventDateTime= eventDateTime.toUpperCase().split(&quot; &quot;);
	var tEventDateTime= &quot;&quot;.concat(lstEventDateTime[0]).concat(&quot; &quot;).concat(lstEventDateTime[1]);

	var nEventDate= tEventDateTime.slice(6,8).concat(&quot;20&quot;).concat(tEventDateTime.slice(0,2)).concat(tEventDateTime.slice(3,5));
	var nEventTime= tEventDateTime.split(&quot; &quot;)[1];

	if(nEventTime.toString().indexOf(&quot;PM&quot;)&gt;-1) {
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG: eventTime contains PM: &quot; + nEventTime.toString().indexOf(&quot;PM&quot;)); }
		if(nEventTime.toString().length&lt;7) {
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG: eventTime length&lt;7 chars: &quot; + nEventTime.toString().length); } 
			var addLeadingZero= 12;
			var tHours= nEventTime.split(&quot;:&quot;)[0];
			var tMinutes= nEventTime.split(&quot;:&quot;)[1].replace(/[^0-9]/g, &quot;&quot;);
			var tHours= parseInt(addLeadingZero) + parseInt(tHours);
			var tEventTime= tHours.toString().concat(tMinutes.toString()).concat(&quot;00&quot;);
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG: new EventTime: &quot; + tEventTime.toString()); } 
		} else { 
			var tEventTime= nEventTime.toString().replace(/[^0-9]/g, &quot;&quot;) + &quot;00&quot;; 
		} 
	} else {
		var tEventTime= &quot;0&quot; + nEventTime.toString().replace(/[^0-9]/g, &quot;&quot;) + &quot;00&quot;; 
	}
	var nEventDateTime= nEventDate.toString().concat(tEventTime.toString());
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG datetime: &quot;+nEventDateTime); }

	return nEventDateTime;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>af95fd5e-8686-4b90-bd08-f11b4f5e78ee</id>
                <name>currentDate_yyyyMMddhhmmss</name>
                <revision>1</revision>
                <lastModified>
                  <time>1653055235571</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/** currentDate_yyyyMMddhhmmss

  	- Desc: This function returns current DateTime only YYYYMMDDHHMMSS format

	@return {string} datetime - this string object contains the current DateTime only YYYYMMDDHHMMSS format
*/
function currentDate_yyyyMMddhhmmss() {
	var today = new Date();
	// set Date with leading zeros if needed
	var tMonth= today.getMonth()+1;
	if(tMonth.toString().length&lt;2) tMonth= &apos;0&apos;+tMonth;
	var tDay= today.getDate()
	if(tDay.toString().length&lt;2) tDay= &apos;0&apos;+tDay;
	var date = today.getFullYear()+&apos;&apos;+tMonth+&apos;&apos;+tDay;
	
	// set Time with leading zeros if needed
	var tHour= today.getHours();
	if(tHour.toString().length&lt;2) tHour= &apos;0&apos;+tHour;
	var tMinute= today.getMinutes();
	if(tMinute.toString().length&lt;2) tMinute= &apos;0&apos;+tMinute;
	var tSecond= today.getSeconds();
	if(tSecond.toString().length&lt;2) tSecond= &apos;0&apos;+tSecond;
	
	var time = tHour+&apos;&apos;+tMinute+&apos;&apos;+tSecond;
	var dateTime = date+&apos;&apos;+time;

	return dateTime;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>59ebad58-f839-4429-b9fb-175fb5a4d5ec</id>
                <name>getChannelId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262975</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	getChannelId(nameOfChannel) function
	DESC: This function takes the string nameOfChannel Object as a parameter and returns the string channelId

	PARAMETERS:
	@param	{string} - pass the string object of the channelName
	@return 	{string} - return the channelId

	MODIFIED:	

 	USAGE:								
	E.G 
	var arrElementObjects= setXMLElementsArrayWithDescendants(xmlElement, debug);
	
*/

function getChannelId(nameOfChannel){ 
    if (nameOfChannel === undefined || nameOfChannel.length == 0) return &quot;&quot;; 
     
    var listIDs = ChannelUtil.getChannelIds(); 
    if (listIDs.isEmpty()) return &quot;&quot;; 
     
    var nameFromList; 
    for (var i = 0; i &lt; listIDs.size();i++){ 
        nameFromList = ChannelUtil.getChannelName(listIDs.get(i)); 
        if(nameFromList == nameOfChannel) return listIDs.get(i); 
    } 
    return &quot;&quot;; 
}  </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>887718d9-8250-4b4e-9b81-4a02cc1bef45</id>
                <name>getHL7v2ACK</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262563</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	setHL7v2ACK(msg) - DEVELOPMENT
	
	- Desc: This function set and returns HL7v2 HAPI Acknowledgement (ACK) message based on evaluating conditions

	@param 
	sourceMsg {string} - source message
	responseCode {string} - Mirth Connect processing responseCode
	responseMsg {string} - response MSA message
	responseStatus {string} - Mirth Connect processing responseStatus
	
	@return {XML} - this returns the HL7 HAPI Ack message
*/
function setHL7v2ACK(sourceMsg,responseCode,responseMsg,responseStatus) {

	var scriptName= &apos;getHL7v2ACK&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG msg.MSH: &apos;+JSON.stringify(msg[&apos;MSH&apos;].toString())); }
	
	importPackage(com.mirth.connect.model);
	// responseStatus is an optional parameter
	if (!responseStatus)
		responseStatus = {&apos;AA&apos;:Response.Status.SUCCESS,&apos;AR&apos;:Response.Status.FILTERED,&apos;AE&apos;:Response.Status.FAILURE}[responseCode] || Response.Status.UNKNOWN;
	var ack = &lt;HL7Message/&gt;;
	
	ack.MSH[&apos;MSH.1&apos;] = sourceMsg.MSH[&apos;MSH.1&apos;].toString();
	ack.MSH[&apos;MSH.2&apos;] = sourceMsg.MSH[&apos;MSH.2&apos;].toString();
	ack.MSH[&apos;MSH.3&apos;] = sourceMsg.MSH[&apos;MSH.5&apos;].copy();
	ack.MSH[&apos;MSH.4&apos;] = sourceMsg.MSH[&apos;MSH.6&apos;].copy();
	ack.MSH[&apos;MSH.5&apos;] = sourceMsg.MSH[&apos;MSH.3&apos;].copy();
	ack.MSH[&apos;MSH.6&apos;] = sourceMsg.MSH[&apos;MSH.4&apos;].copy();
	ack.MSH[&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = DateUtil.getCurrentDate(&apos;yyyyMMddHHmmss&apos;);
	ack.MSH[&apos;MSH.9&apos;][&apos;MSH.9.1&apos;] = sourceMsg.MSH[&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString();
	ack.MSH[&apos;MSH.9&apos;][&apos;MSH.9.2&apos;] = sourceMsg.MSH[&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();
	ack.MSH[&apos;MSH.9&apos;][&apos;MSH.9.3&apos;] = &apos;ACK&apos;;
	ack.MSH[&apos;MSH.10&apos;] = sourceMsg.MSH[&apos;MSH.10&apos;].copy();
	ack.MSH[&apos;MSH.11&apos;] = sourceMsg.MSH[&apos;MSH.11&apos;].copy();
	ack.MSH[&apos;MSH.12&apos;] = sourceMsg.MSH[&apos;MSH.12&apos;].copy();
	ack.MSA[&apos;MSA.1&apos;][&apos;MSA.1.1&apos;] = responseCode;
	ack.MSA[&apos;MSA.2&apos;][&apos;MSA.2.1&apos;] = sourceMsg.MSH[&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
	ack.MSA[&apos;MSA.3&apos;][&apos;MSA.3.1&apos;] = responseMsg;
	
	responseMap.put(&apos;ACK&apos;,new Response(responseStatus,SerializerFactory.getHL7Serializer().fromXML(ack)));

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>9d1a5389-8d5f-4f98-923a-6e5570b4bdc3</id>
                <name>jsonNulltoEmptyString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262944</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts JSON Null Object values to empty string
*/

/*
	Author: IntegrateIT.us LLC
	toHL7Date: Returns an empty string

	Arguments
	---------
		Required
		--------
			JSON element:		A JSON element (e.g. &quot;MiddleName&quot;:null )

*/

function jsonNulltoEmptyString( strElement, jsonElement, debug ) 
{

	var scriptName= &quot;jsonNulltoEmptyString&quot;;
	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG jsonElement IN key:&quot;+strElement+&quot; value: &quot;+jsonElement); 
		logger.info(scriptName+&quot;::DEBUG typeof jsonElement IN: &quot;+typeof(jsonElement));
	}
	// try {
		if (typeof(jsonElement) !== &apos;undefined&apos;) {
			if (typeof(jsonElement) !== &apos;string&apos;) {
				if (typeof(jsonElement) == &apos;object&apos;) {
					var jsonElement= &quot;&quot;;
				} 
			} else {
				if (jsonElement.toString()== null) {
					var jsonElement= jsonElement.replace(null,&quot;&quot;);
				}
			}	
		} else {
			var jsonElement= &quot;&quot;;
		}
	/*
	} catch (err) {
		return jsonElement
	} finally {
		return newJsonElement;
	}
	*/
	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG jsonElement OUT key:&quot;+strElement+&quot; value: &quot;+jsonElement); 
		logger.info(scriptName+&quot;::DEBUG typeof jsonElement OUT: &quot;+typeof(jsonElement));
		logger.info(&quot;&quot;);
	}
	return jsonElement;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a53342c5-cb0d-47b5-b156-cd559fbd40ac</id>
                <name>random_date_after_date</name>
                <revision>7</revision>
                <lastModified>
                  <time>1658169955060</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function will produce a random date based on a provided date and number of days argument.

	@param {String} start - enter the starting date (&apos;YYYY&apos;, &apos;MM&apos;, &apos;DD&apos;) (e.g. &apos;2021&apos;, &apos;09&apos;, &apos;13&apos;)
	@param {String} days -  number of days (positive or negative) (e.g. 365, 3000, -365)
	@return {String} return description
*/
function random_date_after_date(start, days) {
	
	// randomDateAfterDate(new Date(2021, 4, 5), -365) 
	var scriptName= &apos;random_date_after_date&apos;;
	var debug= 1;
	
	// if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; start= &apos;+start+&apos; number of days: &apos;+days);
	// }
	
	var strRandom= Math.random()*days*10000;
	var strStringRandom= strRandom.toString();
	var strRandom= strStringRandom.substring(0,4);
	
	var newDate= new Date(start.getTime() + strRandom);
	// Fri Jun 26 2020 08:59:35 GMT-0600 (GMT-06:00)
	var strDate= newDate.getFullYear() + &quot;&quot; + addLeadingZeros(newDate.getMonth() + 1) + &quot;&quot; + addLeadingZeros(newDate.getDate());
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; random date generated: &apos;+strDate);
	}

	return strDate;
}

function addLeadingZeros(n) {
  
  if (n &lt;= 9) {
    return &quot;0&quot; + n;
  }
  
  return n;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b527f706-5c50-4f44-bee5-d16dd9edd8f0</id>
                <name>random_generator</name>
                <revision>3</revision>
                <lastModified>
                  <time>1653591827816</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function will produce a random number based on the number of characters provided into the numOfChars argument.

	@param {String} numOfChars - enter the number of random characters to be returned
	@return {String} return description
*/
function random_generator(numOfChars) {
	var scriptName= &apos;random_generator&apos;;
	var debug= 0;
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; evaluate number of characters: &apos;+numOfChars);
	}
	
	var strNumOfChars= &apos;&apos;+numOfChars+&apos;&apos;;
	var cntNumOfChars= strNumOfChars.padEnd(numOfChars,0);
	var strRandom= (Math.random()*cntNumOfChars).toFixed();
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; random number generated: &apos;+strRandom);
	}
	
	return strRandom;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fefafe84-cb17-415b-b96e-ff00063c267a</id>
                <name>sendHttpsPostClientCert</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911262729</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	sendHttpsPostClientCert(state, url, certificatePath, certificatePassword) - Returns custom HTTP response
	
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} state - arg1 description
	@param {String} url - arg2 description
	@param {String} certificatePath - arg3 description
	@param {String} certificatePasswordte - arg4 description
	@return {String} return description
*/
function sendHttpsPostClientCert(state, url, certificatePath, certificatePassword) {
	// write code here.

	var scriptName= &quot;sendHttpsPostClientCert&quot;;
	var messageBody = messageObject.getEncodedData();
	var httpsSender = new Packages.com.xti.util.HTTPSSender(certificatePath, certificatePassword);

	// Set all the necessary parameters...
	httpsSender.setURL(url);
	httpsSender.setMessageBody(messageBody);

	logger.info(scriptName+&quot;::DEBUG Sending message to &quot; + url + &quot; - &quot; + messageBody);

	// Send the message to the URL...
	try {
		httpsSender.send();
		var retString = httpsSender.getReturnValue();
		retString = retString.substr(0, retString.indexOf(&quot;MSA&quot;)) + &quot;\r&quot; + retString.substr(retString.indexOf(&quot;MSA&quot;));
		var responseMessage = new Packages.com.mirth.connect.model.converters.SerializerFactory.getHL7Serializer().toXML(retString);
		channelMap.put(&apos;responseMessage&apos;,responseMessage);

		if (responseMessage[&apos;MSA&apos;][&apos;MSA.1&apos;][&apos;MSA.1.1&apos;].toString() == &apos;AA&apos;) {
			logger.info(scriptName+&quot;::DEBUG HTTPS send success. Return value= &quot; + retString);
		} else {
			logger.info(scriptName+&quot;::DEBUG HTTPS send failure. Return value= &quot; + retString);
			throw(&quot;HTTPS send failure. Return value=&quot; + retString);
		}
	} catch (e) {
		logger.info(scriptName+&quot;::DEBUG Error message= &quot; + e.message);
		throw(e.message);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>37fab7a4-d254-46f6-925b-1c4bd8bacc48</id>
                <name>set24Hrs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911263134</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	set24Hrs - Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function set24Hrs(d){

  if (d.slice(-2) === &quot;PM&quot;){
      var hrs = parseInt(d.slice(-7,-5))
      var mins = d.slice(-4,-2)
      hrs = hrs + 12
      var dd = d.slice(0,9) + &quot; &quot; + hrs + &quot;:&quot; + mins;
      return dd;
  } else if(d.slice(-2) === &quot;AM&quot;){
      return (d.slice(0, 16));
  } else {
      throw (&quot;UNRECOGNIZED_FORMAT&quot;,&quot;set24Hrs() Received Unrecognized Formatted String&quot;);
  }
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>3f7c2c35-276b-4889-8aa8-f2b1143a2ceb</id>
            <name>JSON</name>
            <revision>2</revision>
            <lastModified>
              <time>1687560581483</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>14b7de16-de3e-4994-b123-b4d0d3d712aa</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>076d39da-7152-40db-91a1-1746167239e9</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>aba0dfc1-85df-4c06-a201-f73b1a4d3afb</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5adcf0e4-782c-4e9d-a105-f67795fe6644</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>a85524dd-c14f-4560-ac37-a20b5595d594</id>
                <name>updateJsonString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911273804</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	updateJsonString - input current string with new string to produce an updated JSON string
	
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateJsonString(currentString, newString) {

	var scriptName= &apos;updateJsonString&apos;;
	var debug= 1;
	if(debug&gt;0) { 
		logger.info(scriptName+&quot;::DEBUG currentString: &quot;+currentString+&quot; typeof.currentString: &quot;+typeof(currentString)); 
		logger.info(scriptName+&quot;::DEBUG newString: &quot;+newString+&quot; typeof.newString: &quot;+typeof(newString));
	}
	
	var json_obj = JSON.parse(currentString); 
	var new_json_obj= JSON.parse(newString);
	if(debug&gt;0) { 
		logger.info(scriptName+&quot;::DEBUG JSON.parse currentString object: &quot;+JSON.stringify(json_obj)+&quot; typeof.currentString: &quot;+typeof(json_obj)); 
		logger.info(scriptName+&quot;::DEBUG JSON.parse newString object: &quot;+JSON.stringify(new_json_obj)+&quot; typeof.newString: &quot;+typeof(new_json_obj));
	}	
	// json_obj[newKey] = newValue;
	// if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG original_json_obj: &quot;+JSON.stringify(original_json_obj)+&quot; newObj: &quot;+JSON.stringify(json_obj)); }
    	var key= Object.keys(new_json_obj);
    	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG typeof(key): &quot;+typeof(key)+&quot; [string]key: &quot;+JSON.stringify(key.toString())); }
	var value= new_json_obj[key];
    	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG typeof(value): &quot;+typeof(value)+&quot; [string]value: &quot;+JSON.stringify(value)); }

	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG typeof(new_json_obj): &quot;+typeof(new_json_obj)+&quot; [string]new_json_obj: &quot;+JSON.stringify(new_json_obj)); }
	return JSON.stringify(new_json_obj);
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
            <name>WebPT-Common</name>
            <revision>2</revision>
            <lastModified>
              <time>1678715257049</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
                <name>Check if String contains</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122790</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
                <name>Check if String contains HTTP code</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122593</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8515e088-5c50-47ee-9e2f-9fad1ecf48bd</id>
                <name>Check if String is JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123309</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Added by Kirby Knight
	12/21/2020
	Test for JSON

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5f2f84ba-3e66-4be3-8260-8fbd8258bd92</id>
                <name>Check if the PDF is valid</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122055</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
//This function is used for checking the word &quot;PDF&quot; in inbound attachment.
function isValidBase64PDF(base64) {
	const ENCODED_PDF_SIGN = &quot;JVBERi&quot;; // %PDF sign
	const PDF_EOF = &quot;JSVFT0YNCg&quot;; // %EOF
	var pdfBase64Size = (base64.length() * (3 / 4)) - 1;
	
	return (base64.indexOf(ENCODED_PDF_SIGN) != -1 &amp;&amp; base64.indexOf(PDF_EOF) != -1 &amp;&amp; pdf_base64_size &gt; 36);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
                <name>Convert JSON date to HL7v2 date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122137</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
                <name>Convert JSON datetime to HL7v2 datetime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122430</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>bb21449a-df39-48c6-be52-24106c8df4c4</id>
                <name>Destination Formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Kirby Knight 03/10/2021
	
	This function will remove all other ROOT.Meta.Destinations nodes that are not passed in the
	destination variable and removes the ROOT.Meta.Destinations[x].Destination node

	@param {Any} destination - 
	@return {String} return description
*/
function formatDestinations(destination) {
var arrDestinations = msg[&apos;Meta&apos;][&apos;Destinations&apos;];
	//  Start at the end of the array because of the posibility of deleted array items 
	for (var i = arrDestinations.length - 1; i &gt;= 0; i--) {
		if (arrDestinations[i][&apos;Destination&apos;] == destination){
			delete arrDestinations[i][&apos;Destination&apos;]
		}else if (arrDestinations[i][&apos;Destination&apos;] != destination){
			arrDestinations.splice(i, 1);
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
                <name>Extract JSON node data</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121748</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7ed44f8a-fa40-4f3e-9426-3021604eabe0</id>
                <name>Get Feature Value by Name and Database</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123262</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns a string containing the feature value (system property) for a specific client database.

	@param {String} featureName - name of the feature, ie: &quot;BetterPTBidirectionalScheduling&quot;
	@param {String} databaseIdentifier - database name or databaseID / TenantID
	@param {String} databaseIdentifierType - what value is provided in databaseIdentifier. current options include &quot;ID&quot; or &quot;NAME&quot;
	@return {String} returns feature value
*/
function getFeatureValueByNameDatabase(featureName, databaseIdentifier, databaseIdentifierType) {
	var paramList = new Packages.java.util.ArrayList();
	paramList.add(featureName);
	paramList.add(databaseIdentifier);
	paramList.add(databaseIdentifierType);
	
	var sSQL = &apos;EXEC [dbo].[pr_FeatureValueByNameDatabase] ?, ?, ?&apos;;
	
	try {
		var result = executeSharedDBStatementFhirCh(sSQL, true, paramList);
		var featureValue ;
		if(result.next()){			//Added
		 featureValue = result.getString(1);
		}
		return featureValue;
	} catch (e) {
		logger.error(e);
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>9842be2c-c633-42ac-87f1-f91aca9e370f</id>
                <name>JSON Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121776</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function populates the MR and PI patient IDS to channelMap

	@return {String} return description
*/
function jsonPatientIds() {
	for each (patId in msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) {
	if (patId[&apos;IDType&apos;].toString() == &apos;MR&apos;){
		channelMap.put(&apos;extPatId&apos;, patId[&apos;ID&apos;].toString());
	}else if(patId[&apos;IDType&apos;].toString() == &apos;PI&apos;){
		channelMap.put(&apos;patId&apos;, patId[&apos;ID&apos;].toString());
	}
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
                <name>Verify JSON node for existance</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>394664c0-d536-4310-970e-181dc03ee7da</id>
            <name>WebPT-Conversions</name>
            <revision>2</revision>
            <lastModified>
              <time>1690140133427</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
                <name>Convert FHIR codes to HL7v2 codes</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122899</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>2fc8cbf3-0d92-4d1d-a3d6-136c09bd9f2a</id>
            <name>WebPT-Custom Database Functions</name>
            <revision>4</revision>
            <lastModified>
              <time>1690570753962</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>23c0b510-63e4-40fa-a4e1-7b2b92ce9a96</id>
                <name>Execute Statement Shared DB Conn clientDb Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122401</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Executes a SQL statement using a shared database connection stored in the Global Map. If the
connection does not exist, creates it.

@param {String} statement - The SQL statement to execute
@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
@param {List} paramList - A Java List object containing the parameters for the statement (optional)
 */
function executeSharedDBStatementclientDbCh(statement, isQuery, paramList) {
    var result;

    try {
        var dbConnclientDbCh = globalChannelMap.get(&quot;dbConnclientDbCh&quot;);

        if (dbConnclientDbCh == null || dbConnclientDbCh.getConnection().isClosed()) {
            dbConnclientDbCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;), $(&apos;dbClient&apos;), $(&apos;dbUserFhir&apos;), $(&apos;dbPwFhir&apos;));
            globalChannelMap.put(&quot;dbConnclientDbCh&quot;, dbConnclientDbCh);
        }

        if (paramList == undefined) {
            paramList = new Packages.java.util.ArrayList();
        }

        if (isQuery) {
            result = dbConnclientDbCh.executeCachedQuery(statement, paramList);
        } else {
            result = dbConnclientDbCh.executeUpdate(statement, paramList);
        }
    } catch (e) {
        logger.error(e);
    }
    finally {
        return result;
    }
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4efb3110-a83f-48b5-93ad-79c847b51865</id>
                <name>Execute Statement Shared DB Conn clntAcl Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123455</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClntAclCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnClntAclCh = globalChannelMap.get(&quot;dbConnClntAclCh&quot;);

		if (dbConnClntAclCh == null || dbConnClntAclCh.getConnection().isClosed())
		{
			dbConnClntAclCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbClntAcl&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnClntAclCh&quot;, dbConnClntAclCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnClntAclCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnClntAclCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>d96d45dd-57f7-4aa9-9bf4-e464d31b94c6</id>
                <name>Execute Statement Shared DB Conn FHIR</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121922</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhir(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhir.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhir.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6014068e-c021-4a38-9fa6-6f38f6a2cdab</id>
                <name>Execute Statement Shared DB Conn FHIR Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123492</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhirCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhirCh = globalChannelMap.get(&quot;dbConnFhirCh&quot;);

		if (dbConnFhirCh == null || dbConnFhirCh.getConnection().isClosed())
		{
			dbConnFhirCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnFhirCh&quot;, dbConnFhirCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhirCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhirCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fbd5c4a1-b816-4496-acdf-067005f1d376</id>
                <name>Execute Statement Shared DB Conn Translations Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123008</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementTranslationsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnTranslationsCh = globalChannelMap.get(&quot;dbConnTranslationsCh&quot;);

		if (dbConnTranslationsCh == null || dbConnTranslationsCh.getConnection().isClosed())
		{
			dbConnTranslationsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlTranslations&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnTranslationsCh&quot;, dbConnTranslationsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnTranslationsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnTranslationsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5d1a5577-4ba4-4d1e-b6cd-e2d924164909</id>
                <name>Execute Statement with Shared DB Conn ODS Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122280</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdsCh = globalChannelMap.get(&quot;dbConnOdsCh&quot;);

		if (dbConnOdsCh == null || dbConnOdsCh.getConnection().isClosed())
		{
			dbConnOdsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOds&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdsCh&quot;, dbConnOdsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>3991db14-0c0b-4123-952c-5164c1ded501</id>
                <name>Execute Statement with Shared DB Conn ODW Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122960</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.  THis connects to the ODW db in Azure

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdwCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdwCh = globalChannelMap.get(&quot;dbConnOdwCh&quot;);

		if (dbConnOdwCh == null || dbConnOdwCh.getConnection().isClosed())
		{
			dbConnOdwCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOdw&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdwCh&quot;, dbConnOdwCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdwCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdwCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fae08c88-7550-479a-b8ed-ffef47e8eed9</id>
                <name>executeSharedDBStatementClient</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121956</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClient(statement, isQuery, paramList, dbname)
{
	var result;
 	var dburl= &apos;jdbc:sqlserver://AZW1DEV-SQL02.clinicient.com:1433;databaseName=&apos;+dbname+&apos;&apos;;
	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),dburl,$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			
			//globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		result = dbConnFhir.executeCachedQuery(statement);
	
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>ed20a457-5beb-4aea-9bb9-cf91112ccc56</id>
            <name>WebPT-Default Functions</name>
            <revision>10</revision>
            <lastModified>
              <time>1690140133487</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>a8a9a0c8-9322-46dc-bef8-011eb3d70291</id>
                <name>Create Header for CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121678</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This creates a header for csv files based on the contents of the header variable.  The header
	variable is populated in the channel from the outbound msg template

	@return {String} return description
*/
function createHeader() {
	//Destination transformer.  this creates the header for each new file

	var path = java.nio.file.Paths.get($(&apos;filePath&apos;)+$(&apos;fileName&apos;));
	var bytes = (new java.lang.String($(&apos;header&apos;))).getBytes(&quot;UTF-8&quot;);
	try {
	  java.nio.file.Files.write(path, bytes, java.nio.file.StandardOpenOption.CREATE_NEW);
	}
	catch (e) {
	  //logger.info(&quot; should throw IOException if file already exists&quot;);
	
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5a886a1f-dab1-41b5-94c6-1a639907d7da</id>
                <name>Filter Message Evaluate Received Checksum</name>
                <revision>33</revision>
                <lastModified>
                  <time>1678916806664</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating a checksum for each provided message.  We save off the most recent 100 unique checksum values in a global 
	array so if the current message has been recently received we are able to ignore it.
	
	@author:  	Jeffrey Ritz
	@scriptName: 	filterEvaluateReceivedChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {boolean} filter - return filter boolean (true= filter msg, false= do not filter msg)
		persist received_checksum global ChannelMap array
		persist filterMessage ChannelMap variable
	@history
*/
function filterEvaluateReceivedChecksum(msg) {	

	var scriptName= &apos;filterEvaluateReceivedChecksum&apos;
	var filter = false;
	var received_len_limit = 999;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B connectorMessage.getRawData() typeof: &apos;+typeof(connectorMessage.getRawData())+&apos; msg: &apos;+connectorMessage.getRawData());
	} // end if 
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	// var dataBytes = new java.lang.String(connectorMessage.getRawData()).getBytes(&apos;UTF-8&apos;);
	// message = new String(message.getBytes(&quot;utf-8&quot;), &quot;utf-8&quot;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	// var dataBytes = new java.lang.String(msg.getBytes(&apos;UTF-8&apos;));
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);

	// var messageObjectgetBytes= checksum.update(connectorMessage.getRawData().getBytes());
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 
	
	$c(&apos;checksum&apos;, checksum.getValue());
	
	//grab the global channel map variable holding the last X unique checksums that we&apos;ve received
	var received = $gc(&apos;received_checksums&apos;);
	
	if (received == undefined) {
		var received = new Array();
		received.push(checksum.getValue());
	} else {
		//check if we&apos;ve recently received this message, skip it if so
		if (received.indexOf(checksum.getValue()) &gt; -1) {
			filter = true;
		//we haven&apos;t seen it recently, so remember it and allow it through
		} else {
			var received_len = received.length;
			if (received_len &gt; received_len_limit) {
				//remove oldest/first entry, shift all entries forward, and add new entry to end
				received.shift();
				received[received_len_limit] = checksum.getValue();
			} else {
				//add new entry to end of array
				received[received_len] = checksum.getValue();
			} // end if 
		} // end if 
	} // end if 

	 //debug code
	/*for (x=0; x&lt;=received_len_limit; x++) {
		$c(&apos;received-&apos;+x, received[x]);
	} */

	$c(&apos;filterMessage&apos;,filter);
	$gc(&apos;received_checksums&apos;,received);

	return filter;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fbd0484d-74a2-48e4-aedd-f97c2fcefa16</id>
                <name>Get Message Checksum</name>
                <revision>12</revision>
                <lastModified>
                  <time>1678916806703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating and reutrning a checksum for each provided message
	
	@author:  	Jeffrey Ritz
	@scriptName: 	getMessageChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {object} result - return checksum value
	@history
	2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() to remove the exponential representation of the number value
*/
function getMessageChecksum(msg) {	

	var scriptName= &apos;getMessageChecksum&apos;;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	} // end if 
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 

	var checksumValue= checksum.getValue();
	// 2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() 
	var arrChecksumValue= new Array(); 
	arrChecksumValue.push(checksumValue);
	$c(&apos;checksum&apos;, arrChecksumValue);

	return checksumValue;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>91db9bd1-ca92-4dcc-bba4-e1ece603fc87</id>
                <name>Remove Child Object From Parent Object Json</name>
                <revision>22</revision>
                <lastModified>
                  <time>1678916845037</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON child object and it&apos;s descendents from a parent object JSON
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeChildObjectFromParentObjectJson.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
		{string} parentObject - place the name of the string to be designated as the parent object in the JSON
		{string} childObject  - place the name of the string to be designated as the child object to be deleted from the JSON
	@param {object} msg - return modified Json object msg excluding specified Json child object
	@history
*/
function removeChildObjectFromParentObjectJson(msg, parentObject, childObject) {
	
	var scriptName= &apos;removeChildObjectFromParentObjectJson&apos;;
	var debug= 0;

	//var strObjJson= JSON.parse(msg);
	var strObjJson= JSON.stringify(msg);
	
	//var objJson= JSON.parse(msg);
	var newParentObjects= new Object();
	var parentObjects= msg;
	var arrParentObjects= new Array();
	var arrTransactionObjects= new Array();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof parentObjects: &apos;+typeof(parentObjects));
	for (var key in parentObjects) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof key: &apos;+typeof(key)+&apos; key: &apos;+key);
		if(key== parentObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof objJson[key]: &apos;+typeof(parentObjects[key])+&apos; parentObjects[key]: &apos;+JSON.stringify(parentObjects[key]));
			
			var newChildObjects= new Object();
			var childObjects= parentObjects[key];
			var arrChildObjects= new Array();
			
			for(var key2 in childObjects) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key2: &apos;+typeof(key2)+&apos; key2: &apos;+key2+&apos; childObject: &apos;+childObject);
				for(var key3 in childObjects[key2]) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key3: &apos;+typeof(key3)+&apos; key3: &apos;+key3+&apos; childObject: &apos;+childObject);
					if(key3== childObject) {
						var transactionObject= new Object();
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; childObject typeof: &apos;+typeof(childObjects[key2][key3])+&apos; childObject: &apos;+JSON.stringify(childObjects[key2][key3]));
						transactionObject.key= key3;
						transactionObject.value= childObjects[key2][key3];
						delete childObjects[key2][key3];
						if(debug&gt;0) logger.info(&apos;DEBUG::&apos;+scriptName+&apos; DELETE childObject: &apos;+key3+&apos; of parentObject: &apos;+JSON.stringify(childObjects[key2]));
						arrTransactionObjects.push(transactionObject);
					} // end if
				} // end for 
				arrChildObjects.push(childObjects[key2]);
			} // end for
			newParentObjects[key]= arrChildObjects;
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add all child keys: &apos;+JSON.stringify(arrChildObjects)+&apos; into ParentObject[&apos;+key+&apos;]: &apos;+newParentObjects[key]);
		} else {
			newParentObjects[key]= parentObjects[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+parentObjects[key]+&apos; string: &apos;+JSON.stringify(parentObjects[key]));
		} // end if
		arrParentObjects.push(newParentObjects);
	} // end for 
	var newMsg= arrParentObjects;
	channelMap.put(&apos;removeChildObjectMsg&apos;,newMsg);
	channelMap.put(&apos;removedChildTransIds&apos;,arrTransactionObjects);
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));
	return newMsg;
	
} </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2ff28338-dfb6-445d-a04e-c74b5486a08c</id>
                <name>Remove Object From Json</name>
                <revision>24</revision>
                <lastModified>
                  <time>1678915278542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON object and it&apos;s descendents from the msg
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeObjectFromJson.js
	@created: 	2023-03-09
	@param {string} msg - Inbound connectorMessage.getRawData()
	@param {string} msg - return modified msg excluding specified Json object from msg
	@history
	2023-03-15 JER - Modified to include removeObject function parameter to specify specific JSON object by referencing key to be removed
*/
function removeObjectFromJson(msg, removeObject) {
	
	var scriptName= &apos;removeObjectFromJson&apos;;
	var debug= 0;
	//var objJson= JSON.stringify(msg);
	var objJson= JSON.parse(msg);
	var newObjJson= new Object();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof objJson: &apos;+typeof(objJson)+&apos; objJSON: &apos;+JSON.stringify(objJson));
	for (var key in objJson) {
		if(key== removeObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; DELETE key: &apos;+key);
			// delete objJson[key];
		} else {
			newObjJson[key]= objJson[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+objJson[key]+&apos; string: &apos;+JSON.stringify(objJson[key]));
		} // end if 
	} // end for 
	var newMsg= newObjJson;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));

	// return JSON.stringify(newMsg);
	return newMsg;
} 
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>993a6fd8-454a-4133-ba32-dbcfea71582b</id>
                <name>Update EDITransactionLog</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123233</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	The purpose of this function is to update the status in Insight.
	Populate the channel map with the following variables functionalGroupControlNumber, status, eventDate

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateStatus () {

	//  Build the llst of paramters to pass to the database
	var paramList = new Packages.java.util.ArrayList();
	paramList.add($(&apos;functionalGroupControlNumber&apos;));
	paramList.add($(&apos;eventDate&apos;));  //dateTime in the acknoledged field in this format (&quot;2017-07-31 14:15:01.577&quot;)
	paramList.add(new java.lang.Integer(parseInt($(&apos;status&apos;), 10)));
	
//	logger.info(&quot;updateStatus &quot;+paramList);

	//  SQL Statement and paramters that will be sent to SQL
	var statement = &quot;EXEC dbo.pr_EDITransactionLog_Update ?, ?, ?&quot;;
	//  Code template used for establishiing connection and passing the sql statement and parameter list  
	var result = executeSharedDBStatementFhirCh(statement, false, paramList);
	return result;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>42cb290e-5fb0-46b8-82db-576ea1e1ba0d</id>
                <name>Update EDITransactionLog from responseStatus in the response transformer </name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123356</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Call this in the response transformer on the destination.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateReponseStatus() {
	var status = 0;
	if (responseStatus == SENT){
		var status = 1;
		channelMap.put(&apos;status&apos;,status);
	}

updateStatus()
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2223579b-f914-4be7-a575-f1a2a2aa1ae2</id>
                <name>ValidateToString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123044</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} mapping - 
	@param {Any} defaultValue - 
	@param {Any} replacement - 
	@return {String} return description
*/
function validateToString(mapping, defaultValue, replacement) {
    if (mapping == null) {
        mapping = &apos;&apos;;
    }
    return validate(mapping, defaultValue, replacement).toString() + &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>8c9a8268-4ef0-43e9-ae5b-bf8895f0b80c</id>
            <name>WebPT-FORMAT</name>
            <revision>3</revision>
            <lastModified>
              <time>1691001755225</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>Include any functions or codes with 
-date &amp; time formating related
-data type formatting</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>920c9ead-70a6-4168-9d95-89261b73ae44</id>
                <name>12digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123520</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Take any 12 digit string yyyyMMddHHmm and change to MM/dd/yyyy HH:mm 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm
*/
function yyyyMMddHHmm(string) {
	return DateUtil.convertDate(&quot;yyyyMMddHHmm&quot;, &quot;MM/dd/yyyy HH:mm&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fe2689ec-1946-46d5-8dd6-8fbbf106e1e6</id>
                <name>14digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122871</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Take 14 digit string yyyyMMddHHmmss and change to MM/dd/yyyy HH:mm:ss 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm:ss
*/
function yyyyMMddHHmmss(string) {
	if (string.length == 14) {
		  return DateUtil.convertDate(&quot;yyyyMMddHHmmss&quot;, &quot;MM/dd/yyyy HH:mm:ss&quot;, string);
	}
	else {
		return &quot;unregcognized string&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b9db35e2-d5bd-48a1-8cc6-3475c698d7b4</id>
                <name>currentDT_yyyy-MM-dd HH:mm:ss.SSS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123114</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Kirby Knight
	Date Modified:  11/09/2020
	Retund the current date/time down to the millisecond

	@return {String} return description
*/
function currentDtToMilliseconds() {
	return DateUtil.getCurrentDate(&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7e747999-4bec-43fc-978d-7049d3543cf0</id>
                <name>fixHL7NodeOrder</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/

function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>dfedacf6-773b-413e-b78d-1bf16a92071d</id>
                <name>formatHL7Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121643</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Take any eight digit HL7 message data string (yyyyMMdd) and formats it human-readable format (MM/dd/yyyy)
	such as 20090612 -&gt; 06/12/2009

	@param {String} arg1 - 8 digit HL7 message data string yyyyMMdd
	@return {String} return date format as MM/dd/yyyy
*/
function formatHL7Date(string) {
	return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;MM/dd/yyyy&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a8f54921-2cb6-4134-8806-3c4e10a757d9</id>
                <name>getCurrentLocalTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122014</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = getCurrentLocalTimestamp();

	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestamp() {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(&quot;EST&quot;)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6c5f1bd8-ebbf-4c8e-b465-0be8ccaba0d0</id>
                <name>getCurrentLocalTimeToMs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123077</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	Gets the current local date/time to the milliseconds
	Converts to the timezone that is passed in Examples (America/New_York, America/Chicago, America/Phoenix )

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestampToMs(timeZone) {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timeZone)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>78d74c5b-c881-404a-ad96-4e909e1a19f3</id>
                <name>phoneToE164</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121982</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Insight phone number to E164 format 5554446666 to +15554446666

	@param {Any} phoneIn - 
	@return {String} return description
*/
function phoneToE164(phoneIn) {
	logger.info(&apos;L1 &apos;+phoneIn);
	if(phoneIn != null ){
	//phoneIn = &apos;+1&apos; + phoneIn.toString(); 
	logger.info(&apos;L2 &apos;+phoneIn);
	return &apos;+1&apos; + phoneIn.toString(); 
	} else{
		return null;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>6a32d94d-408c-4e10-9799-e45e150b5c1f</id>
            <name>WebPT-MISC</name>
            <revision>3</revision>
            <lastModified>
              <time>1690987207668</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>miscellaneous javascript</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>84b4f1c7-f82d-4140-9fbd-98a95f68ff32</id>
                <name>getChannelState</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122648</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetChannelState(channel_id) {

    var channel_status = &quot;NA&quot;;

    var channel_count = parseInt(Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().size());

    for(var i=0;i&lt;channel_count;i++) {
        if (channel_id == Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getChannelId()) {
            channel_status = Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getState();
        }
    }

    return channel_status;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>715435a9-cb15-4e8f-bc5b-4249eaea6e17</id>
                <name>momentjs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122487</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Testing MIRTH-3794 using external JavaScript library &quot;moment.js&quot;
*/
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=b():&quot;function&quot;==typeof define&amp;&amp;define.amd?define(b):a.moment=b()}(this,function(){&quot;use strict&quot;;function a(){return Hc.apply(null,arguments)}function b(a){Hc=a}function c(a){return&quot;[object Array]&quot;===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||&quot;[object Date]&quot;===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c&lt;a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&amp;&amp;(a[c]=b[c]);return f(b,&quot;toString&quot;)&amp;&amp;(a.toString=b.toString),f(b,&quot;valueOf&quot;)&amp;&amp;(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ca(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&amp;&amp;(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow&lt;0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&amp;&amp;(a._isValid=a._isValid&amp;&amp;0===b.charsLeftOver&amp;&amp;0===b.unusedTokens.length&amp;&amp;void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if(&quot;undefined&quot;!=typeof b._isAMomentObject&amp;&amp;(a._isAMomentObject=b._isAMomentObject),&quot;undefined&quot;!=typeof b._i&amp;&amp;(a._i=b._i),&quot;undefined&quot;!=typeof b._f&amp;&amp;(a._f=b._f),&quot;undefined&quot;!=typeof b._l&amp;&amp;(a._l=b._l),&quot;undefined&quot;!=typeof b._strict&amp;&amp;(a._strict=b._strict),&quot;undefined&quot;!=typeof b._tzm&amp;&amp;(a._tzm=b._tzm),&quot;undefined&quot;!=typeof b._isUTC&amp;&amp;(a._isUTC=b._isUTC),&quot;undefined&quot;!=typeof b._offset&amp;&amp;(a._offset=b._offset),&quot;undefined&quot;!=typeof b._pf&amp;&amp;(a._pf=j(b)),&quot;undefined&quot;!=typeof b._locale&amp;&amp;(a._locale=b._locale),Jc.length&gt;0)for(c in Jc)d=Jc[c],e=b[d],&quot;undefined&quot;!=typeof e&amp;&amp;(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),Kc===!1&amp;&amp;(Kc=!0,a.updateOffset(this),Kc=!1)}function o(a){return a instanceof n||null!=a&amp;&amp;null!=a._isAMomentObject}function p(a){return 0&gt;a?Math.ceil(a):Math.floor(a)}function q(a){var b=+a,c=0;return 0!==b&amp;&amp;isFinite(b)&amp;&amp;(c=p(b)),c}function r(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e&gt;d;d++)(c&amp;&amp;a[d]!==b[d]||!c&amp;&amp;q(a[d])!==q(b[d]))&amp;&amp;g++;return g+f}function s(){}function t(a){return a?a.toLowerCase().replace(&quot;_&quot;,&quot;-&quot;):a}function u(a){for(var b,c,d,e,f=0;f&lt;a.length;){for(e=t(a[f]).split(&quot;-&quot;),b=e.length,c=t(a[f+1]),c=c?c.split(&quot;-&quot;):null;b&gt;0;){if(d=v(e.slice(0,b).join(&quot;-&quot;)))return d;if(c&amp;&amp;c.length&gt;=b&amp;&amp;r(e,c,!0)&gt;=b-1)break;b--}f++}return null}function v(a){var b=null;if(!Lc[a]&amp;&amp;&quot;undefined&quot;!=typeof module&amp;&amp;module&amp;&amp;module.exports)try{b=Ic._abbr,require(&quot;./locale/&quot;+a),w(b)}catch(c){}return Lc[a]}function w(a,b){var c;return a&amp;&amp;(c=&quot;undefined&quot;==typeof b?y(a):x(a,b),c&amp;&amp;(Ic=c)),Ic._abbr}function x(a,b){return null!==b?(b.abbr=a,Lc[a]=Lc[a]||new s,Lc[a].set(b),w(a),Lc[a]):(delete Lc[a],null)}function y(a){var b;if(a&amp;&amp;a._locale&amp;&amp;a._locale._abbr&amp;&amp;(a=a._locale._abbr),!a)return Ic;if(!c(a)){if(b=v(a))return b;a=[a]}return u(a)}function z(a,b){var c=a.toLowerCase();Mc[c]=Mc[c+&quot;s&quot;]=Mc[b]=a}function A(a){return&quot;string&quot;==typeof a?Mc[a]||Mc[a.toLowerCase()]:void 0}function B(a){var b,c,d={};for(c in a)f(a,c)&amp;&amp;(b=A(c),b&amp;&amp;(d[b]=a[c]));return d}function C(b,c){return function(d){return null!=d?(E(this,b,d),a.updateOffset(this,c),this):D(this,b)}}function D(a,b){return a._d[&quot;get&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b]()}function E(a,b,c){return a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b](c)}function F(a,b){var c;if(&quot;object&quot;==typeof a)for(c in a)this.set(c,a[c]);else if(a=A(a),&quot;function&quot;==typeof this[a])return this[a](b);return this}function G(a,b,c){var d=&quot;&quot;+Math.abs(a),e=b-d.length,f=a&gt;=0;return(f?c?&quot;+&quot;:&quot;&quot;:&quot;-&quot;)+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function H(a,b,c,d){var e=d;&quot;string&quot;==typeof d&amp;&amp;(e=function(){return this[d]()}),a&amp;&amp;(Qc[a]=e),b&amp;&amp;(Qc[b[0]]=function(){return G(e.apply(this,arguments),b[1],b[2])}),c&amp;&amp;(Qc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function I(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,&quot;&quot;):a.replace(/\\/g,&quot;&quot;)}function J(a){var b,c,d=a.match(Nc);for(b=0,c=d.length;c&gt;b;b++)Qc[d[b]]?d[b]=Qc[d[b]]:d[b]=I(d[b]);return function(e){var f=&quot;&quot;;for(b=0;c&gt;b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function K(a,b){return a.isValid()?(b=L(b,a.localeData()),Pc[b]=Pc[b]||J(b),Pc[b](a)):a.localeData().invalidDate()}function L(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Oc.lastIndex=0;d&gt;=0&amp;&amp;Oc.test(a);)a=a.replace(Oc,c),Oc.lastIndex=0,d-=1;return a}function M(a){return&quot;function&quot;==typeof a&amp;&amp;&quot;[object Function]&quot;===Object.prototype.toString.call(a)}function N(a,b,c){dd[a]=M(b)?b:function(a){return a&amp;&amp;c?c:b}}function O(a,b){return f(dd,a)?dd[a](b._strict,b._locale):new RegExp(P(a))}function P(a){return a.replace(&quot;\\&quot;,&quot;&quot;).replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,&quot;\\$&amp;&quot;)}function Q(a,b){var c,d=b;for(&quot;string&quot;==typeof a&amp;&amp;(a=[a]),&quot;number&quot;==typeof b&amp;&amp;(d=function(a,c){c[b]=q(a)}),c=0;c&lt;a.length;c++)ed[a[c]]=d}function R(a,b){Q(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function S(a,b,c){null!=b&amp;&amp;f(ed,a)&amp;&amp;ed[a](b,c._a,c,a)}function T(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function U(a){return this._months[a.month()]}function V(a){return this._monthsShort[a.month()]}function W(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12&gt;d;d++){if(e=h([2e3,d]),c&amp;&amp;!this._longMonthsParse[d]&amp;&amp;(this._longMonthsParse[d]=new RegExp(&quot;^&quot;+this.months(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;),this._shortMonthsParse[d]=new RegExp(&quot;^&quot;+this.monthsShort(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;)),c||this._monthsParse[d]||(f=&quot;^&quot;+this.months(e,&quot;&quot;)+&quot;|^&quot;+this.monthsShort(e,&quot;&quot;),this._monthsParse[d]=new RegExp(f.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),c&amp;&amp;&quot;MMMM&quot;===b&amp;&amp;this._longMonthsParse[d].test(a))return d;if(c&amp;&amp;&quot;MMM&quot;===b&amp;&amp;this._shortMonthsParse[d].test(a))return d;if(!c&amp;&amp;this._monthsParse[d].test(a))return d}}function X(a,b){var c;return&quot;string&quot;==typeof b&amp;&amp;(b=a.localeData().monthsParse(b),&quot;number&quot;!=typeof b)?a:(c=Math.min(a.date(),T(a.year(),b)),a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+&quot;Month&quot;](b,c),a)}function Y(b){return null!=b?(X(this,b),a.updateOffset(this,!0),this):D(this,&quot;Month&quot;)}function Z(){return T(this.year(),this.month())}function $(a){var b,c=a._a;return c&amp;&amp;-2===j(a).overflow&amp;&amp;(b=c[gd]&lt;0||c[gd]&gt;11?gd:c[hd]&lt;1||c[hd]&gt;T(c[fd],c[gd])?hd:c[id]&lt;0||c[id]&gt;24||24===c[id]&amp;&amp;(0!==c[jd]||0!==c[kd]||0!==c[ld])?id:c[jd]&lt;0||c[jd]&gt;59?jd:c[kd]&lt;0||c[kd]&gt;59?kd:c[ld]&lt;0||c[ld]&gt;999?ld:-1,j(a)._overflowDayOfYear&amp;&amp;(fd&gt;b||b&gt;hd)&amp;&amp;(b=hd),j(a).overflow=b),a}function _(b){a.suppressDeprecationWarnings===!1&amp;&amp;&quot;undefined&quot;!=typeof console&amp;&amp;console.warn&amp;&amp;console.warn(&quot;Deprecation warning: &quot;+b)}function aa(a,b){var c=!0;return g(function(){return c&amp;&amp;(_(a+&quot;\n&quot;+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function ba(a,b){od[a]||(_(b),od[a]=!0)}function ca(a){var b,c,d=a._i,e=pd.exec(d);if(e){for(j(a).iso=!0,b=0,c=qd.length;c&gt;b;b++)if(qd[b][1].exec(d)){a._f=qd[b][0];break}for(b=0,c=rd.length;c&gt;b;b++)if(rd[b][1].exec(d)){a._f+=(e[6]||&quot; &quot;)+rd[b][0];break}d.match(ad)&amp;&amp;(a._f+=&quot;Z&quot;),va(a)}else a._isValid=!1}function da(b){var c=sd.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ca(b),void(b._isValid===!1&amp;&amp;(delete b._isValid,a.createFromInputFallback(b))))}function ea(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970&gt;a&amp;&amp;h.setFullYear(a),h}function fa(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970&gt;a&amp;&amp;b.setUTCFullYear(a),b}function ga(a){return ha(a)?366:365}function ha(a){return a%4===0&amp;&amp;a%100!==0||a%400===0}function ia(){return ha(this.year())}function ja(a,b,c){var d,e=c-b,f=c-a.day();return f&gt;e&amp;&amp;(f-=7),e-7&gt;f&amp;&amp;(f+=7),d=Da(a).add(f,&quot;d&quot;),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ka(a){return ja(a,this._week.dow,this._week.doy).week}function la(){return this._week.dow}function ma(){return this._week.doy}function na(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function oa(a){var b=ja(this,1,4).week;return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function pa(a,b,c,d,e){var f,g=6+e-d,h=fa(a,0,1+g),i=h.getUTCDay();return e&gt;i&amp;&amp;(i+=7),c=null!=c?1*c:e,f=1+g+7*(b-1)-i+c,{year:f&gt;0?a:a-1,dayOfYear:f&gt;0?f:ga(a-1)+f}}function qa(a){var b=Math.round((this.clone().startOf(&quot;day&quot;)-this.clone().startOf(&quot;year&quot;))/864e5)+1;return null==a?b:this.add(a-b,&quot;d&quot;)}function ra(a,b,c){return null!=a?a:null!=b?b:c}function sa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ta(a){var b,c,d,e,f=[];if(!a._d){for(d=sa(a),a._w&amp;&amp;null==a._a[hd]&amp;&amp;null==a._a[gd]&amp;&amp;ua(a),a._dayOfYear&amp;&amp;(e=ra(a._a[fd],d[fd]),a._dayOfYear&gt;ga(e)&amp;&amp;(j(a)._overflowDayOfYear=!0),c=fa(e,0,a._dayOfYear),a._a[gd]=c.getUTCMonth(),a._a[hd]=c.getUTCDate()),b=0;3&gt;b&amp;&amp;null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7&gt;b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[id]&amp;&amp;0===a._a[jd]&amp;&amp;0===a._a[kd]&amp;&amp;0===a._a[ld]&amp;&amp;(a._nextDay=!0,a._a[id]=0),a._d=(a._useUTC?fa:ea).apply(null,f),null!=a._tzm&amp;&amp;a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&amp;&amp;(a._a[id]=24)}}function ua(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=ra(b.GG,a._a[fd],ja(Da(),1,4).year),d=ra(b.W,1),e=ra(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=ra(b.gg,a._a[fd],ja(Da(),f,g).year),d=ra(b.w,1),null!=b.d?(e=b.d,f&gt;e&amp;&amp;++d):e=null!=b.e?b.e+f:f),h=pa(c,d,e,g,f),a._a[fd]=h.year,a._dayOfYear=h.dayOfYear}function va(b){if(b._f===a.ISO_8601)return void ca(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=&quot;&quot;+b._i,i=h.length,k=0;for(e=L(b._f,b._locale).match(Nc)||[],c=0;c&lt;e.length;c++)f=e[c],d=(h.match(O(f,b))||[])[0],d&amp;&amp;(g=h.substr(0,h.indexOf(d)),g.length&gt;0&amp;&amp;j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Qc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),S(f,d,b)):b._strict&amp;&amp;!d&amp;&amp;j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length&gt;0&amp;&amp;j(b).unusedInput.push(h),j(b).bigHour===!0&amp;&amp;b._a[id]&lt;=12&amp;&amp;b._a[id]&gt;0&amp;&amp;(j(b).bigHour=void 0),b._a[id]=wa(b._locale,b._a[id],b._meridiem),ta(b),$(b)}function wa(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&amp;&amp;12&gt;b&amp;&amp;(b+=12),d||12!==b||(b=0),b):b}function xa(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e&lt;a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&amp;&amp;(b._useUTC=a._useUTC),b._f=a._f[e],va(b),k(b)&amp;&amp;(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d&gt;f)&amp;&amp;(d=f,c=b));g(a,c||b)}function ya(a){if(!a._d){var b=B(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ta(a)}}function za(a){var b=new n($(Aa(a)));return b._nextDay&amp;&amp;(b.add(1,&quot;d&quot;),b._nextDay=void 0),b}function Aa(a){var b=a._i,e=a._f;return a._locale=a._locale||y(a._l),null===b||void 0===e&amp;&amp;&quot;&quot;===b?l({nullInput:!0}):(&quot;string&quot;==typeof b&amp;&amp;(a._i=b=a._locale.preparse(b)),o(b)?new n($(b)):(c(e)?xa(a):e?va(a):d(b)?a._d=b:Ba(a),a))}function Ba(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):&quot;string&quot;==typeof f?da(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ta(b)):&quot;object&quot;==typeof f?ya(b):&quot;number&quot;==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ca(a,b,c,d,e){var f={};return&quot;boolean&quot;==typeof c&amp;&amp;(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,za(f)}function Da(a,b,c,d){return Ca(a,b,c,d,!1)}function Ea(a,b){var d,e;if(1===b.length&amp;&amp;c(b[0])&amp;&amp;(b=b[0]),!b.length)return Da();for(d=b[0],e=1;e&lt;b.length;++e)(!b[e].isValid()||b[e][a](d))&amp;&amp;(d=b[e]);return d}function Fa(){var a=[].slice.call(arguments,0);return Ea(&quot;isBefore&quot;,a)}function Ga(){var a=[].slice.call(arguments,0);return Ea(&quot;isAfter&quot;,a)}function Ha(a){var b=B(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=y(),this._bubble()}function Ia(a){return a instanceof Ha}function Ja(a,b){H(a,0,0,function(){var a=this.utcOffset(),c=&quot;+&quot;;return 0&gt;a&amp;&amp;(a=-a,c=&quot;-&quot;),c+G(~~(a/60),2)+b+G(~~a%60,2)})}function Ka(a){var b=(a||&quot;&quot;).match(ad)||[],c=b[b.length-1]||[],d=(c+&quot;&quot;).match(xd)||[&quot;-&quot;,0,0],e=+(60*d[1])+q(d[2]);return&quot;+&quot;===d[0]?e:-e}function La(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Da(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Da(b).local()}function Ma(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Na(b,c){var d,e=this._offset||0;return null!=b?(&quot;string&quot;==typeof b&amp;&amp;(b=Ka(b)),Math.abs(b)&lt;16&amp;&amp;(b=60*b),!this._isUTC&amp;&amp;c&amp;&amp;(d=Ma(this)),this._offset=b,this._isUTC=!0,null!=d&amp;&amp;this.add(d,&quot;m&quot;),e!==b&amp;&amp;(!c||this._changeInProgress?bb(this,Ya(b-e,&quot;m&quot;),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ma(this)}function Oa(a,b){return null!=a?(&quot;string&quot;!=typeof a&amp;&amp;(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Pa(a){return this.utcOffset(0,a)}function Qa(a){return this._isUTC&amp;&amp;(this.utcOffset(0,a),this._isUTC=!1,a&amp;&amp;this.subtract(Ma(this),&quot;m&quot;)),this}function Ra(){return this._tzm?this.utcOffset(this._tzm):&quot;string&quot;==typeof this._i&amp;&amp;this.utcOffset(Ka(this._i)),this}function Sa(a){return a=a?Da(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Ta(){return this.utcOffset()&gt;this.clone().month(0).utcOffset()||this.utcOffset()&gt;this.clone().month(5).utcOffset()}function Ua(){if(&quot;undefined&quot;!=typeof this._isDSTShifted)return this._isDSTShifted;var a={};if(m(a,this),a=Aa(a),a._a){var b=a._isUTC?h(a._a):Da(a._a);this._isDSTShifted=this.isValid()&amp;&amp;r(a._a,b.toArray())&gt;0}else this._isDSTShifted=!1;return this._isDSTShifted}function Va(){return!this._isUTC}function Wa(){return this._isUTC}function Xa(){return this._isUTC&amp;&amp;0===this._offset}function Ya(a,b){var c,d,e,g=a,h=null;return Ia(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:&quot;number&quot;==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=yd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:0,d:q(h[hd])*c,h:q(h[id])*c,m:q(h[jd])*c,s:q(h[kd])*c,ms:q(h[ld])*c}):(h=zd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:Za(h[2],c),M:Za(h[3],c),d:Za(h[4],c),h:Za(h[5],c),m:Za(h[6],c),s:Za(h[7],c),w:Za(h[8],c)}):null==g?g={}:&quot;object&quot;==typeof g&amp;&amp;(&quot;from&quot;in g||&quot;to&quot;in g)&amp;&amp;(e=_a(Da(g.from),Da(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ha(g),Ia(a)&amp;&amp;f(a,&quot;_locale&quot;)&amp;&amp;(d._locale=a._locale),d}function Za(a,b){var c=a&amp;&amp;parseFloat(a.replace(&quot;,&quot;,&quot;.&quot;));return(isNaN(c)?0:c)*b}function $a(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,&quot;M&quot;).isAfter(b)&amp;&amp;--c.months,c.milliseconds=+b-+a.clone().add(c.months,&quot;M&quot;),c}function _a(a,b){var c;return b=La(b,a),a.isBefore(b)?c=$a(a,b):(c=$a(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function ab(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(ba(b,&quot;moment().&quot;+b+&quot;(period, number) is deprecated. Please use moment().&quot;+b+&quot;(number, period).&quot;),f=c,c=d,d=f),c=&quot;string&quot;==typeof c?+c:c,e=Ya(c,d),bb(this,e,a),this}}function bb(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&amp;&amp;b._d.setTime(+b._d+f*d),g&amp;&amp;E(b,&quot;Date&quot;,D(b,&quot;Date&quot;)+g*d),h&amp;&amp;X(b,D(b,&quot;Month&quot;)+h*d),e&amp;&amp;a.updateOffset(b,g||h)}function cb(a,b){var c=a||Da(),d=La(c,this).startOf(&quot;day&quot;),e=this.diff(d,&quot;days&quot;,!0),f=-6&gt;e?&quot;sameElse&quot;:-1&gt;e?&quot;lastWeek&quot;:0&gt;e?&quot;lastDay&quot;:1&gt;e?&quot;sameDay&quot;:2&gt;e?&quot;nextDay&quot;:7&gt;e?&quot;nextWeek&quot;:&quot;sameElse&quot;;return this.format(b&amp;&amp;b[f]||this.localeData().calendar(f,this,Da(c)))}function db(){return new n(this)}function eb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this&gt;+a):(c=o(a)?+a:+Da(a),c&lt;+this.clone().startOf(b))}function fb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+a&gt;+this):(c=o(a)?+a:+Da(a),+this.clone().endOf(b)&lt;c)}function gb(a,b,c){return this.isAfter(a,c)&amp;&amp;this.isBefore(b,c)}function hb(a,b){var c;return b=A(b||&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this===+a):(c=+Da(a),+this.clone().startOf(b)&lt;=c&amp;&amp;c&lt;=+this.clone().endOf(b))}function ib(a,b,c){var d,e,f=La(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=A(b),&quot;year&quot;===b||&quot;month&quot;===b||&quot;quarter&quot;===b?(e=jb(this,f),&quot;quarter&quot;===b?e/=3:&quot;year&quot;===b&amp;&amp;(e/=12)):(d=this-f,e=&quot;second&quot;===b?d/1e3:&quot;minute&quot;===b?d/6e4:&quot;hour&quot;===b?d/36e5:&quot;day&quot;===b?(d-g)/864e5:&quot;week&quot;===b?(d-g)/6048e5:d),c?e:p(e)}function jb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,&quot;months&quot;);return 0&gt;b-f?(c=a.clone().add(e-1,&quot;months&quot;),d=(b-f)/(f-c)):(c=a.clone().add(e+1,&quot;months&quot;),d=(b-f)/(c-f)),-(e+d)}function kb(){return this.clone().locale(&quot;en&quot;).format(&quot;ddd MMM DD YYYY HH:mm:ss [GMT]ZZ&quot;)}function lb(){var a=this.clone().utc();return 0&lt;a.year()&amp;&amp;a.year()&lt;=9999?&quot;function&quot;==typeof Date.prototype.toISOString?this.toDate().toISOString():K(a,&quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;):K(a,&quot;YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;)}function mb(b){var c=K(this,b||a.defaultFormat);return this.localeData().postformat(c)}function nb(a,b){return this.isValid()?Ya({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.from(Da(),a)}function pb(a,b){return this.isValid()?Ya({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function qb(a){return this.to(Da(),a)}function rb(a){var b;return void 0===a?this._locale._abbr:(b=y(a),null!=b&amp;&amp;(this._locale=b),this)}function sb(){return this._locale}function tb(a){switch(a=A(a)){case&quot;year&quot;:this.month(0);case&quot;quarter&quot;:case&quot;month&quot;:this.date(1);case&quot;week&quot;:case&quot;isoWeek&quot;:case&quot;day&quot;:this.hours(0);case&quot;hour&quot;:this.minutes(0);case&quot;minute&quot;:this.seconds(0);case&quot;second&quot;:this.milliseconds(0)}return&quot;week&quot;===a&amp;&amp;this.weekday(0),&quot;isoWeek&quot;===a&amp;&amp;this.isoWeekday(1),&quot;quarter&quot;===a&amp;&amp;this.month(3*Math.floor(this.month()/3)),this}function ub(a){return a=A(a),void 0===a||&quot;millisecond&quot;===a?this:this.startOf(a).add(1,&quot;isoWeek&quot;===a?&quot;week&quot;:a).subtract(1,&quot;ms&quot;)}function vb(){return+this._d-6e4*(this._offset||0)}function wb(){return Math.floor(+this/1e3)}function xb(){return this._offset?new Date(+this):this._d}function yb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function zb(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Ab(){return k(this)}function Bb(){return g({},j(this))}function Cb(){return j(this).overflow}function Db(a,b){H(0,[a,a.length],0,b)}function Eb(a,b,c){return ja(Da([a,11,31+b-c]),b,c).week}function Fb(a){var b=ja(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Gb(a){var b=ja(this,1,4).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Hb(){return Eb(this.year(),1,4)}function Ib(){var a=this.localeData()._week;return Eb(this.year(),a.dow,a.doy)}function Jb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Kb(a,b){return&quot;string&quot;!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),&quot;number&quot;==typeof a?a:null):parseInt(a,10)}function Lb(a){return this._weekdays[a.day()]}function Mb(a){return this._weekdaysShort[a.day()]}function Nb(a){return this._weekdaysMin[a.day()]}function Ob(a){var b,c,d;for(this._weekdaysParse=this._weekdaysParse||[],b=0;7&gt;b;b++)if(this._weekdaysParse[b]||(c=Da([2e3,1]).day(b),d=&quot;^&quot;+this.weekdays(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysShort(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysMin(c,&quot;&quot;),this._weekdaysParse[b]=new RegExp(d.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),this._weekdaysParse[b].test(a))return b}function Pb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Kb(a,this.localeData()),this.add(a-b,&quot;d&quot;)):b}function Qb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,&quot;d&quot;)}function Rb(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Sb(a,b){H(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Tb(a,b){return b._meridiemParse}function Ub(a){return&quot;p&quot;===(a+&quot;&quot;).toLowerCase().charAt(0)}function Vb(a,b,c){return a&gt;11?c?&quot;pm&quot;:&quot;PM&quot;:c?&quot;am&quot;:&quot;AM&quot;}function Wb(a,b){b[ld]=q(1e3*(&quot;0.&quot;+a))}function Xb(){return this._isUTC?&quot;UTC&quot;:&quot;&quot;}function Yb(){return this._isUTC?&quot;Coordinated Universal Time&quot;:&quot;&quot;}function Zb(a){return Da(1e3*a)}function $b(){return Da.apply(null,arguments).parseZone()}function _b(a,b,c){var d=this._calendar[a];return&quot;function&quot;==typeof d?d.call(b,c):d}function ac(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function bc(){return this._invalidDate}function cc(a){return this._ordinal.replace(&quot;%d&quot;,a)}function dc(a){return a}function ec(a,b,c,d){var e=this._relativeTime[c];return&quot;function&quot;==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function fc(a,b){var c=this._relativeTime[a&gt;0?&quot;future&quot;:&quot;past&quot;];return&quot;function&quot;==typeof c?c(b):c.replace(/%s/i,b)}function gc(a){var b,c;for(c in a)b=a[c],&quot;function&quot;==typeof b?this[c]=b:this[&quot;_&quot;+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+&quot;|&quot;+/\d{1,2}/.source)}function hc(a,b,c,d){var e=y(),f=h().set(d,b);return e[c](f,a)}function ic(a,b,c,d,e){if(&quot;number&quot;==typeof a&amp;&amp;(b=a,a=void 0),a=a||&quot;&quot;,null!=b)return hc(a,b,c,e);var f,g=[];for(f=0;d&gt;f;f++)g[f]=hc(a,f,c,e);return g}function jc(a,b){return ic(a,b,&quot;months&quot;,12,&quot;month&quot;)}function kc(a,b){return ic(a,b,&quot;monthsShort&quot;,12,&quot;month&quot;)}function lc(a,b){return ic(a,b,&quot;weekdays&quot;,7,&quot;day&quot;)}function mc(a,b){return ic(a,b,&quot;weekdaysShort&quot;,7,&quot;day&quot;)}function nc(a,b){return ic(a,b,&quot;weekdaysMin&quot;,7,&quot;day&quot;)}function oc(){var a=this._data;return this._milliseconds=Wd(this._milliseconds),this._days=Wd(this._days),this._months=Wd(this._months),a.milliseconds=Wd(a.milliseconds),a.seconds=Wd(a.seconds),a.minutes=Wd(a.minutes),a.hours=Wd(a.hours),a.months=Wd(a.months),a.years=Wd(a.years),this}function pc(a,b,c,d){var e=Ya(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function qc(a,b){return pc(this,a,b,1)}function rc(a,b){return pc(this,a,b,-1)}function sc(a){return 0&gt;a?Math.floor(a):Math.ceil(a)}function tc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f&gt;=0&amp;&amp;g&gt;=0&amp;&amp;h&gt;=0||0&gt;=f&amp;&amp;0&gt;=g&amp;&amp;0&gt;=h||(f+=864e5*sc(vc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=p(f/1e3),i.seconds=a%60,b=p(a/60),i.minutes=b%60,c=p(b/60),i.hours=c%24,g+=p(c/24),e=p(uc(g)),h+=e,g-=sc(vc(e)),d=p(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function uc(a){return 4800*a/146097}function vc(a){return 146097*a/4800}function wc(a){var b,c,d=this._milliseconds;if(a=A(a),&quot;month&quot;===a||&quot;year&quot;===a)return b=this._days+d/864e5,c=this._months+uc(b),&quot;month&quot;===a?c:c/12;switch(b=this._days+Math.round(vc(this._months)),a){case&quot;week&quot;:return b/7+d/6048e5;case&quot;day&quot;:return b+d/864e5;case&quot;hour&quot;:return 24*b+d/36e5;case&quot;minute&quot;:return 1440*b+d/6e4;case&quot;second&quot;:return 86400*b+d/1e3;case&quot;millisecond&quot;:return Math.floor(864e5*b)+d;default:throw new Error(&quot;Unknown unit &quot;+a)}}function xc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*q(this._months/12)}function yc(a){return function(){return this.as(a)}}function zc(a){return a=A(a),this[a+&quot;s&quot;]()}function Ac(a){return function(){return this._data[a]}}function Bc(){return p(this.days()/7)}function Cc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Dc(a,b,c){var d=Ya(a).abs(),e=ke(d.as(&quot;s&quot;)),f=ke(d.as(&quot;m&quot;)),g=ke(d.as(&quot;h&quot;)),h=ke(d.as(&quot;d&quot;)),i=ke(d.as(&quot;M&quot;)),j=ke(d.as(&quot;y&quot;)),k=e&lt;le.s&amp;&amp;[&quot;s&quot;,e]||1===f&amp;&amp;[&quot;m&quot;]||f&lt;le.m&amp;&amp;[&quot;mm&quot;,f]||1===g&amp;&amp;[&quot;h&quot;]||g&lt;le.h&amp;&amp;[&quot;hh&quot;,g]||1===h&amp;&amp;[&quot;d&quot;]||h&lt;le.d&amp;&amp;[&quot;dd&quot;,h]||1===i&amp;&amp;[&quot;M&quot;]||i&lt;le.M&amp;&amp;[&quot;MM&quot;,i]||1===j&amp;&amp;[&quot;y&quot;]||[&quot;yy&quot;,j];return k[2]=b,k[3]=+a&gt;0,k[4]=c,Cc.apply(null,k)}function Ec(a,b){return void 0===le[a]?!1:void 0===b?le[a]:(le[a]=b,!0)}function Fc(a){var b=this.localeData(),c=Dc(this,!a,b);return a&amp;&amp;(c=b.pastFuture(+this,c)),b.postformat(c)}function Gc(){var a,b,c,d=me(this._milliseconds)/1e3,e=me(this._days),f=me(this._months);a=p(d/60),b=p(a/60),d%=60,a%=60,c=p(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0&gt;m?&quot;-&quot;:&quot;&quot;)+&quot;P&quot;+(g?g+&quot;Y&quot;:&quot;&quot;)+(h?h+&quot;M&quot;:&quot;&quot;)+(i?i+&quot;D&quot;:&quot;&quot;)+(j||k||l?&quot;T&quot;:&quot;&quot;)+(j?j+&quot;H&quot;:&quot;&quot;)+(k?k+&quot;M&quot;:&quot;&quot;)+(l?l+&quot;S&quot;:&quot;&quot;):&quot;P0D&quot;}var Hc,Ic,Jc=a.momentProperties=[],Kc=!1,Lc={},Mc={},Nc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Pc={},Qc={},Rc=/\d/,Sc=/\d\d/,Tc=/\d{3}/,Uc=/\d{4}/,Vc=/[+-]?\d{6}/,Wc=/\d\d?/,Xc=/\d{1,3}/,Yc=/\d{1,4}/,Zc=/[+-]?\d{1,6}/,$c=/\d+/,_c=/[+-]?\d+/,ad=/Z|[+-]\d\d:?\d\d/gi,bd=/[+-]?\d+(\.\d{1,3})?/,cd=/[0-9]*[&apos;a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,dd={},ed={},fd=0,gd=1,hd=2,id=3,jd=4,kd=5,ld=6;H(&quot;M&quot;,[&quot;MM&quot;,2],&quot;Mo&quot;,function(){return this.month()+1}),H(&quot;MMM&quot;,0,0,function(a){return this.localeData().monthsShort(this,a)}),H(&quot;MMMM&quot;,0,0,function(a){return this.localeData().months(this,a)}),z(&quot;month&quot;,&quot;M&quot;),N(&quot;M&quot;,Wc),N(&quot;MM&quot;,Wc,Sc),N(&quot;MMM&quot;,cd),N(&quot;MMMM&quot;,cd),Q([&quot;M&quot;,&quot;MM&quot;],function(a,b){b[gd]=q(a)-1}),Q([&quot;MMM&quot;,&quot;MMMM&quot;],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[gd]=e:j(c).invalidMonth=a});var md=&quot;January_February_March_April_May_June_July_August_September_October_November_December&quot;.split(&quot;_&quot;),nd=&quot;Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec&quot;.split(&quot;_&quot;),od={};a.suppressDeprecationWarnings=!1;var pd=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,qd=[[&quot;YYYYYY-MM-DD&quot;,/[+-]\d{6}-\d{2}-\d{2}/],[&quot;YYYY-MM-DD&quot;,/\d{4}-\d{2}-\d{2}/],[&quot;GGGG-[W]WW-E&quot;,/\d{4}-W\d{2}-\d/],[&quot;GGGG-[W]WW&quot;,/\d{4}-W\d{2}/],[&quot;YYYY-DDD&quot;,/\d{4}-\d{3}/]],rd=[[&quot;HH:mm:ss.SSSS&quot;,/(T| )\d\d:\d\d:\d\d\.\d+/],[&quot;HH:mm:ss&quot;,/(T| )\d\d:\d\d:\d\d/],[&quot;HH:mm&quot;,/(T| )\d\d:\d\d/],[&quot;HH&quot;,/(T| )\d\d/]],sd=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=aa(&quot;moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.&quot;,function(a){a._d=new Date(a._i+(a._useUTC?&quot; UTC&quot;:&quot;&quot;))}),H(0,[&quot;YY&quot;,2],0,function(){return this.year()%100}),H(0,[&quot;YYYY&quot;,4],0,&quot;year&quot;),H(0,[&quot;YYYYY&quot;,5],0,&quot;year&quot;),H(0,[&quot;YYYYYY&quot;,6,!0],0,&quot;year&quot;),z(&quot;year&quot;,&quot;y&quot;),N(&quot;Y&quot;,_c),N(&quot;YY&quot;,Wc,Sc),N(&quot;YYYY&quot;,Yc,Uc),N(&quot;YYYYY&quot;,Zc,Vc),N(&quot;YYYYYY&quot;,Zc,Vc),Q([&quot;YYYYY&quot;,&quot;YYYYYY&quot;],fd),Q(&quot;YYYY&quot;,function(b,c){c[fd]=2===b.length?a.parseTwoDigitYear(b):q(b)}),Q(&quot;YY&quot;,function(b,c){c[fd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return q(a)+(q(a)&gt;68?1900:2e3)};var td=C(&quot;FullYear&quot;,!1);H(&quot;w&quot;,[&quot;ww&quot;,2],&quot;wo&quot;,&quot;week&quot;),H(&quot;W&quot;,[&quot;WW&quot;,2],&quot;Wo&quot;,&quot;isoWeek&quot;),z(&quot;week&quot;,&quot;w&quot;),z(&quot;isoWeek&quot;,&quot;W&quot;),N(&quot;w&quot;,Wc),N(&quot;ww&quot;,Wc,Sc),N(&quot;W&quot;,Wc),N(&quot;WW&quot;,Wc,Sc),R([&quot;w&quot;,&quot;ww&quot;,&quot;W&quot;,&quot;WW&quot;],function(a,b,c,d){b[d.substr(0,1)]=q(a)});var ud={dow:0,doy:6};H(&quot;DDD&quot;,[&quot;DDDD&quot;,3],&quot;DDDo&quot;,&quot;dayOfYear&quot;),z(&quot;dayOfYear&quot;,&quot;DDD&quot;),N(&quot;DDD&quot;,Xc),N(&quot;DDDD&quot;,Tc),Q([&quot;DDD&quot;,&quot;DDDD&quot;],function(a,b,c){c._dayOfYear=q(a)}),a.ISO_8601=function(){};var vd=aa(&quot;moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return this&gt;a?this:a}),wd=aa(&quot;moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return a&gt;this?this:a});Ja(&quot;Z&quot;,&quot;:&quot;),Ja(&quot;ZZ&quot;,&quot;&quot;),N(&quot;Z&quot;,ad),N(&quot;ZZ&quot;,ad),Q([&quot;Z&quot;,&quot;ZZ&quot;],function(a,b,c){c._useUTC=!0,c._tzm=Ka(a)});var xd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var yd=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,zd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Ya.fn=Ha.prototype;var Ad=ab(1,&quot;add&quot;),Bd=ab(-1,&quot;subtract&quot;);a.defaultFormat=&quot;YYYY-MM-DDTHH:mm:ssZ&quot;;var Cd=aa(&quot;moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.&quot;,function(a){return void 0===a?this.localeData():this.locale(a)});H(0,[&quot;gg&quot;,2],0,function(){return this.weekYear()%100}),H(0,[&quot;GG&quot;,2],0,function(){return this.isoWeekYear()%100}),Db(&quot;gggg&quot;,&quot;weekYear&quot;),Db(&quot;ggggg&quot;,&quot;weekYear&quot;),Db(&quot;GGGG&quot;,&quot;isoWeekYear&quot;),Db(&quot;GGGGG&quot;,&quot;isoWeekYear&quot;),z(&quot;weekYear&quot;,&quot;gg&quot;),z(&quot;isoWeekYear&quot;,&quot;GG&quot;),N(&quot;G&quot;,_c),N(&quot;g&quot;,_c),N(&quot;GG&quot;,Wc,Sc),N(&quot;gg&quot;,Wc,Sc),N(&quot;GGGG&quot;,Yc,Uc),N(&quot;gggg&quot;,Yc,Uc),N(&quot;GGGGG&quot;,Zc,Vc),N(&quot;ggggg&quot;,Zc,Vc),R([&quot;gggg&quot;,&quot;ggggg&quot;,&quot;GGGG&quot;,&quot;GGGGG&quot;],function(a,b,c,d){b[d.substr(0,2)]=q(a)}),R([&quot;gg&quot;,&quot;GG&quot;],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),H(&quot;Q&quot;,0,0,&quot;quarter&quot;),z(&quot;quarter&quot;,&quot;Q&quot;),N(&quot;Q&quot;,Rc),Q(&quot;Q&quot;,function(a,b){b[gd]=3*(q(a)-1)}),H(&quot;D&quot;,[&quot;DD&quot;,2],&quot;Do&quot;,&quot;date&quot;),z(&quot;date&quot;,&quot;D&quot;),N(&quot;D&quot;,Wc),N(&quot;DD&quot;,Wc,Sc),N(&quot;Do&quot;,function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),Q([&quot;D&quot;,&quot;DD&quot;],hd),Q(&quot;Do&quot;,function(a,b){b[hd]=q(a.match(Wc)[0],10)});var Dd=C(&quot;Date&quot;,!0);H(&quot;d&quot;,0,&quot;do&quot;,&quot;day&quot;),H(&quot;dd&quot;,0,0,function(a){return this.localeData().weekdaysMin(this,a)}),H(&quot;ddd&quot;,0,0,function(a){return this.localeData().weekdaysShort(this,a)}),H(&quot;dddd&quot;,0,0,function(a){return this.localeData().weekdays(this,a)}),H(&quot;e&quot;,0,0,&quot;weekday&quot;),H(&quot;E&quot;,0,0,&quot;isoWeekday&quot;),z(&quot;day&quot;,&quot;d&quot;),z(&quot;weekday&quot;,&quot;e&quot;),z(&quot;isoWeekday&quot;,&quot;E&quot;),N(&quot;d&quot;,Wc),N(&quot;e&quot;,Wc),N(&quot;E&quot;,Wc),N(&quot;dd&quot;,cd),N(&quot;ddd&quot;,cd),N(&quot;dddd&quot;,cd),R([&quot;dd&quot;,&quot;ddd&quot;,&quot;dddd&quot;],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),R([&quot;d&quot;,&quot;e&quot;,&quot;E&quot;],function(a,b,c,d){b[d]=q(a)});var Ed=&quot;Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday&quot;.split(&quot;_&quot;),Fd=&quot;Sun_Mon_Tue_Wed_Thu_Fri_Sat&quot;.split(&quot;_&quot;),Gd=&quot;Su_Mo_Tu_We_Th_Fr_Sa&quot;.split(&quot;_&quot;);H(&quot;H&quot;,[&quot;HH&quot;,2],0,&quot;hour&quot;),H(&quot;h&quot;,[&quot;hh&quot;,2],0,function(){return this.hours()%12||12}),Sb(&quot;a&quot;,!0),Sb(&quot;A&quot;,!1),z(&quot;hour&quot;,&quot;h&quot;),N(&quot;a&quot;,Tb),N(&quot;A&quot;,Tb),N(&quot;H&quot;,Wc),N(&quot;h&quot;,Wc),N(&quot;HH&quot;,Wc,Sc),N(&quot;hh&quot;,Wc,Sc),Q([&quot;H&quot;,&quot;HH&quot;],id),Q([&quot;a&quot;,&quot;A&quot;],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),Q([&quot;h&quot;,&quot;hh&quot;],function(a,b,c){b[id]=q(a),j(c).bigHour=!0});var Hd=/[ap]\.?m?\.?/i,Id=C(&quot;Hours&quot;,!0);H(&quot;m&quot;,[&quot;mm&quot;,2],0,&quot;minute&quot;),z(&quot;minute&quot;,&quot;m&quot;),N(&quot;m&quot;,Wc),N(&quot;mm&quot;,Wc,Sc),Q([&quot;m&quot;,&quot;mm&quot;],jd);var Jd=C(&quot;Minutes&quot;,!1);H(&quot;s&quot;,[&quot;ss&quot;,2],0,&quot;second&quot;),z(&quot;second&quot;,&quot;s&quot;),N(&quot;s&quot;,Wc),N(&quot;ss&quot;,Wc,Sc),Q([&quot;s&quot;,&quot;ss&quot;],kd);var Kd=C(&quot;Seconds&quot;,!1);H(&quot;S&quot;,0,0,function(){return~~(this.millisecond()/100)}),H(0,[&quot;SS&quot;,2],0,function(){return~~(this.millisecond()/10)}),H(0,[&quot;SSS&quot;,3],0,&quot;millisecond&quot;),H(0,[&quot;SSSS&quot;,4],0,function(){return 10*this.millisecond()}),H(0,[&quot;SSSSS&quot;,5],0,function(){return 100*this.millisecond()}),H(0,[&quot;SSSSSS&quot;,6],0,function(){return 1e3*this.millisecond()}),H(0,[&quot;SSSSSSS&quot;,7],0,function(){return 1e4*this.millisecond()}),H(0,[&quot;SSSSSSSS&quot;,8],0,function(){return 1e5*this.millisecond()}),H(0,[&quot;SSSSSSSSS&quot;,9],0,function(){return 1e6*this.millisecond()}),z(&quot;millisecond&quot;,&quot;ms&quot;),N(&quot;S&quot;,Xc,Rc),N(&quot;SS&quot;,Xc,Sc),N(&quot;SSS&quot;,Xc,Tc);var Ld;for(Ld=&quot;SSSS&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)N(Ld,$c);for(Ld=&quot;S&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)Q(Ld,Wb);var Md=C(&quot;Milliseconds&quot;,!1);H(&quot;z&quot;,0,0,&quot;zoneAbbr&quot;),H(&quot;zz&quot;,0,0,&quot;zoneName&quot;);var Nd=n.prototype;Nd.add=Ad,Nd.calendar=cb,Nd.clone=db,Nd.diff=ib,Nd.endOf=ub,Nd.format=mb,Nd.from=nb,Nd.fromNow=ob,Nd.to=pb,Nd.toNow=qb,Nd.get=F,Nd.invalidAt=Cb,Nd.isAfter=eb,Nd.isBefore=fb,Nd.isBetween=gb,Nd.isSame=hb,Nd.isValid=Ab,Nd.lang=Cd,Nd.locale=rb,Nd.localeData=sb,Nd.max=wd,Nd.min=vd,Nd.parsingFlags=Bb,Nd.set=F,Nd.startOf=tb,Nd.subtract=Bd,Nd.toArray=yb,Nd.toObject=zb,Nd.toDate=xb,Nd.toISOString=lb,Nd.toJSON=lb,Nd.toString=kb,Nd.unix=wb,Nd.valueOf=vb,Nd.year=td,Nd.isLeapYear=ia,Nd.weekYear=Fb,Nd.isoWeekYear=Gb,Nd.quarter=Nd.quarters=Jb,Nd.month=Y,Nd.daysInMonth=Z,Nd.week=Nd.weeks=na,Nd.isoWeek=Nd.isoWeeks=oa,Nd.weeksInYear=Ib,Nd.isoWeeksInYear=Hb,Nd.date=Dd,Nd.day=Nd.days=Pb,Nd.weekday=Qb,Nd.isoWeekday=Rb,Nd.dayOfYear=qa,Nd.hour=Nd.hours=Id,Nd.minute=Nd.minutes=Jd,Nd.second=Nd.seconds=Kd,
Nd.millisecond=Nd.milliseconds=Md,Nd.utcOffset=Na,Nd.utc=Pa,Nd.local=Qa,Nd.parseZone=Ra,Nd.hasAlignedHourOffset=Sa,Nd.isDST=Ta,Nd.isDSTShifted=Ua,Nd.isLocal=Va,Nd.isUtcOffset=Wa,Nd.isUtc=Xa,Nd.isUTC=Xa,Nd.zoneAbbr=Xb,Nd.zoneName=Yb,Nd.dates=aa(&quot;dates accessor is deprecated. Use date instead.&quot;,Dd),Nd.months=aa(&quot;months accessor is deprecated. Use month instead&quot;,Y),Nd.years=aa(&quot;years accessor is deprecated. Use year instead&quot;,td),Nd.zone=aa(&quot;moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779&quot;,Oa);var Od=Nd,Pd={sameDay:&quot;[Today at] LT&quot;,nextDay:&quot;[Tomorrow at] LT&quot;,nextWeek:&quot;dddd [at] LT&quot;,lastDay:&quot;[Yesterday at] LT&quot;,lastWeek:&quot;[Last] dddd [at] LT&quot;,sameElse:&quot;L&quot;},Qd={LTS:&quot;h:mm:ss A&quot;,LT:&quot;h:mm A&quot;,L:&quot;MM/DD/YYYY&quot;,LL:&quot;MMMM D, YYYY&quot;,LLL:&quot;MMMM D, YYYY h:mm A&quot;,LLLL:&quot;dddd, MMMM D, YYYY h:mm A&quot;},Rd=&quot;Invalid date&quot;,Sd=&quot;%d&quot;,Td=/\d{1,2}/,Ud={future:&quot;in %s&quot;,past:&quot;%s ago&quot;,s:&quot;a few seconds&quot;,m:&quot;a minute&quot;,mm:&quot;%d minutes&quot;,h:&quot;an hour&quot;,hh:&quot;%d hours&quot;,d:&quot;a day&quot;,dd:&quot;%d days&quot;,M:&quot;a month&quot;,MM:&quot;%d months&quot;,y:&quot;a year&quot;,yy:&quot;%d years&quot;},Vd=s.prototype;Vd._calendar=Pd,Vd.calendar=_b,Vd._longDateFormat=Qd,Vd.longDateFormat=ac,Vd._invalidDate=Rd,Vd.invalidDate=bc,Vd._ordinal=Sd,Vd.ordinal=cc,Vd._ordinalParse=Td,Vd.preparse=dc,Vd.postformat=dc,Vd._relativeTime=Ud,Vd.relativeTime=ec,Vd.pastFuture=fc,Vd.set=gc,Vd.months=U,Vd._months=md,Vd.monthsShort=V,Vd._monthsShort=nd,Vd.monthsParse=W,Vd.week=ka,Vd._week=ud,Vd.firstDayOfYear=ma,Vd.firstDayOfWeek=la,Vd.weekdays=Lb,Vd._weekdays=Ed,Vd.weekdaysMin=Nb,Vd._weekdaysMin=Gd,Vd.weekdaysShort=Mb,Vd._weekdaysShort=Fd,Vd.weekdaysParse=Ob,Vd.isPM=Ub,Vd._meridiemParse=Hd,Vd.meridiem=Vb,w(&quot;en&quot;,{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===q(a%100/10)?&quot;th&quot;:1===b?&quot;st&quot;:2===b?&quot;nd&quot;:3===b?&quot;rd&quot;:&quot;th&quot;;return a+c}}),a.lang=aa(&quot;moment.lang is deprecated. Use moment.locale instead.&quot;,w),a.langData=aa(&quot;moment.langData is deprecated. Use moment.localeData instead.&quot;,y);var Wd=Math.abs,Xd=yc(&quot;ms&quot;),Yd=yc(&quot;s&quot;),Zd=yc(&quot;m&quot;),$d=yc(&quot;h&quot;),_d=yc(&quot;d&quot;),ae=yc(&quot;w&quot;),be=yc(&quot;M&quot;),ce=yc(&quot;y&quot;),de=Ac(&quot;milliseconds&quot;),ee=Ac(&quot;seconds&quot;),fe=Ac(&quot;minutes&quot;),ge=Ac(&quot;hours&quot;),he=Ac(&quot;days&quot;),ie=Ac(&quot;months&quot;),je=Ac(&quot;years&quot;),ke=Math.round,le={s:45,m:45,h:22,d:26,M:11},me=Math.abs,ne=Ha.prototype;ne.abs=oc,ne.add=qc,ne.subtract=rc,ne.as=wc,ne.asMilliseconds=Xd,ne.asSeconds=Yd,ne.asMinutes=Zd,ne.asHours=$d,ne.asDays=_d,ne.asWeeks=ae,ne.asMonths=be,ne.asYears=ce,ne.valueOf=xc,ne._bubble=tc,ne.get=zc,ne.milliseconds=de,ne.seconds=ee,ne.minutes=fe,ne.hours=ge,ne.days=he,ne.weeks=Bc,ne.months=ie,ne.years=je,ne.humanize=Fc,ne.toISOString=Gc,ne.toString=Gc,ne.toJSON=Gc,ne.locale=rb,ne.localeData=sb,ne.toIsoString=aa(&quot;toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)&quot;,Gc),ne.lang=Cd,H(&quot;X&quot;,0,0,&quot;unix&quot;),H(&quot;x&quot;,0,0,&quot;valueOf&quot;),N(&quot;x&quot;,_c),N(&quot;X&quot;,bd),Q(&quot;X&quot;,function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),Q(&quot;x&quot;,function(a,b,c){c._d=new Date(q(a))}),a.version=&quot;2.10.6&quot;,b(Da),a.fn=Od,a.min=Fa,a.max=Ga,a.utc=h,a.unix=Zb,a.months=jc,a.isDate=d,a.locale=w,a.invalid=l,a.duration=Ya,a.isMoment=o,a.weekdays=lc,a.parseZone=$b,a.localeData=y,a.isDuration=Ia,a.monthsShort=kc,a.weekdaysMin=nc,a.defineLocale=x,a.weekdaysShort=mc,a.normalizeUnits=A,a.relativeTimeThreshold=Ec;var oe=a;return oe});</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2c64669f-f07e-4365-bf64-c559ace83004</id>
                <name>stopOnErrorCount</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122375</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to Stop a channel if it reaches a particular error count. 
	Also sends an alert message via another channel (this sends a sms via our monitoring system).

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function stopOnErrorCount(cid, errorCount) {
	var channelStatisticsController = Packages.com.mirth.connect.server.controllers.ChannelStatisticsController.getInstance();
	var channelStatusController = Packages.com.mirth.connect.server.controllers.ChannelStatusController.getInstance();
	var stats = channelStatisticsController.getStatistics(cid);
	// var numOfQueued = stats.queued;
	var numOfErrors = stats.error;

	if(numOfErrors &gt; errorCount )
	{
		//Stop Me
		channelStatusController.stopChannel(cid);
		//Alert msg sent to _SVHALERT channel
		var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
		var channelName = channelController.getDeployedChannelById(cid).getName();
		var alertmsg = &apos;mirth01 mirth_channel_status codeTemplate_stopOnErrorCount 0 &apos; +
					   &apos;channel &apos; + channelName + &apos; stopped&apos;;
		router.routeMessage(&apos;_SVHALERT&apos;, alertmsg);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>08044817-3504-4fc1-80ee-404870195151</id>
                <name>test</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122745</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.
	searchword
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function testfunc(arg1) {
	return arg1;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
            <name>WebPT-Mirth</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121602</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
                <name>Fix HL7v2 Node Order</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121804</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>35f4c250-08b4-4e42-8e60-f85aa98dfe50</id>
            <name>WebPT-Translations</name>
            <revision>3</revision>
            <lastModified>
              <time>1690140133521</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>be8f057b-2640-4613-b2e7-83326c59169c</id>
                <name>AddZeros</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122826</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function addZeroes(num) {
   return num.toLocaleString(&quot;en&quot;, {useGrouping: false, minimumFractionDigits: 2})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>51913864-7702-489a-b7c6-54992c12b19d</id>
                <name>FindLookupValueWithDefault</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122218</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithDefault ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        //obj.LeftValue = LeftValue;
        //obj.RightValue1 = DefaultValue1;
        //obj.RightValue2   = DefaultValue2; 
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);
            var result = pattern.test(LeftValue );

            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c276be9f-c8f1-4dea-8df0-e000c6745271</id>
                <name>FindLookupValueWithInsuranceId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122080</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithInsuranceId ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);             
            var result = pattern.test(LeftValue );
	
            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7d746da2-58c6-44eb-ad5c-c5bfd0a0c537</id>
                <name>UseExternalProblemID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122349</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalProblemID() {

if ([&apos;2804&apos;, &apos;2822&apos;].indexOf($(&apos;tenantId&apos;) + &apos;&apos;) &gt; -1) {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitexternalproblemid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitaccountnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>07730e85-7f30-4ddf-90a4-78183c896ab5</id>
                <name>UseExternalVisitID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122192</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalVisitID() {
	
if ($(&apos;tenantId&apos;)  == &apos;9999&apos; ) {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitexternalvisitid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitvisitnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
        <channelTags>
          <channelTag>
            <id>e2256351-a12c-4e51-b138-af4985cb4c3e</id>
            <name>AristaMd</name>
            <channelIds>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>28cdc2db-4028-4249-b1b8-c2ba3961a137</id>
            <name>HL7</name>
            <channelIds>
              <string>6a2a6c33-33da-4783-b823-bd95bf387981</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>5beae4c2-e7f8-4ae3-9fca-703dea9233a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>1ae4e7ac-e62f-468c-aa2a-99cbd6139838</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>0638775c-6c87-4a71-b4b3-7ae52be05c1b</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
            </channelIds>
            <backgroundColor>
              <red>128</red>
              <green>128</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>c38e999e-8378-4798-9f21-5a49d054e745</id>
            <name>IN</name>
            <channelIds>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
            </channelIds>
            <backgroundColor>
              <red>128</red>
              <green>128</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>7822e1f8-3e89-4e46-8317-a1119bab773f</id>
            <name>SanMateo</name>
            <channelIds>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
            </channelIds>
            <backgroundColor>
              <red>128</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>ab6ed6d3-3d63-447a-97ad-1c89cfee3e3f</id>
            <name>TCP</name>
            <channelIds>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
            </channelIds>
            <backgroundColor>
              <red>128</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
        </channelTags>
      </exportData>
    </channel>
    <channel version="3.12.0">
      <id>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</id>
      <nextMetaDataId>13</nextMetaDataId>
      <name>SANMATEO_IN_ADT_RECEIVER</name>
      <description>2022-02-22 JER Added handling of circumstances where PID-3.5 or MRG-1.5 is not provided (aka undefined) per received HL7 data different facilities</description>
      <revision>1</revision>
      <sourceConnector version="3.12.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.file.FileReceiverProperties" version="3.12.0">
          <pluginProperties/>
          <pollConnectorProperties version="3.12.0">
            <pollingType>INTERVAL</pollingType>
            <pollOnStart>false</pollOnStart>
            <pollingFrequency>5000</pollingFrequency>
            <pollingHour>0</pollingHour>
            <pollingMinute>0</pollingMinute>
            <cronJobs/>
            <pollConnectorPropertiesAdvanced>
              <weekly>true</weekly>
              <inactiveDays>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
              </inactiveDays>
              <dayOfMonth>1</dayOfMonth>
              <allDay>true</allDay>
              <startingHour>8</startingHour>
              <startingMinute>0</startingMinute>
              <endingHour>17</endingHour>
              <endingMinute>0</endingMinute>
            </pollConnectorPropertiesAdvanced>
          </pollConnectorProperties>
          <sourceConnectorProperties version="3.12.0">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <scheme>FILE</scheme>
          <host>C:/HL7/ADT/in</host>
          <fileFilter>*</fileFilter>
          <regex>false</regex>
          <directoryRecursion>false</directoryRecursion>
          <ignoreDot>true</ignoreDot>
          <anonymous>true</anonymous>
          <username>anonymous</username>
          <password>anonymous</password>
          <timeout>10000</timeout>
          <secure>true</secure>
          <passive>true</passive>
          <validateConnection>true</validateConnection>
          <afterProcessingAction>MOVE</afterProcessingAction>
          <moveToDirectory>C:/HL7/ADT/archive</moveToDirectory>
          <moveToFileName>${originalFilename}_${UUID}</moveToFileName>
          <errorReadingAction>NONE</errorReadingAction>
          <errorResponseAction>AFTER_PROCESSING</errorResponseAction>
          <errorMoveToDirectory></errorMoveToDirectory>
          <errorMoveToFileName></errorMoveToFileName>
          <checkFileAge>true</checkFileAge>
          <fileAge>1000</fileAge>
          <fileSizeMinimum>0</fileSizeMinimum>
          <fileSizeMaximum></fileSizeMaximum>
          <ignoreFileSizeMaximum>true</ignoreFileSizeMaximum>
          <sortBy>date</sortBy>
          <binary>false</binary>
          <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        </properties>
        <transformer version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.12.0">
              <name>channelId</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <variable>channelId</variable>
              <mapping></mapping>
              <defaultValue>connectorMessage.getChannelId()</defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>MRN &amp; EMPI Patient Identifier - Inclusion of Patient Swap (A17)</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>/*
	scriptName:	MRN &amp; EMPI Identifier
	desc:		This script handle the transformation of all ADT message including the addition of A17 and A40 into the desire JSON format - no JSON template
	date:		2022-02-17 
	history:
	2022-02-25 JER Modified to leverage json_pid_patient, json_pid_pv1, json_mrg_patient JS Code templates
	2022-02-22 JER For A40 Moved the survivorPatient object initialization before the for each PID.3 element XMl list
	2022-02-22 JER For A17 Moved patients array outside of the evaluation of PID segment
	2022-02-22 JER For A17 Added handling of circumstances where PID-3.5 or MRG-1.5 is not provided (aka undefined) per received HL7 data different facilities
	2022-02-17 JER	Added the Patient Swap (A17) messages to handle the latest RESTful JSON payload for patient swap events
	2022-02-17 JER Added the Patient Merge (A40) message to handle the latest RESTful JSON payload for patient merge events 
*/
var scriptName= &quot;MRN &amp; EMPI Patient Identifier&quot;;
var message = {};

//Create JSON Object from HL7 Message.
var messageType= msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString()+&apos;-&apos;+msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();
message.messageType= messageType;
message.eventType=   msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();
channelMap.put(&apos;organization&apos;,msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString());
// message.id= UUIDGenerator.getUUID();

if(msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString().indexOf(&apos;A17&apos;)&gt;-1) {

	var primaryPatient= true;

	for(var j=0; j&lt; msg[&apos;PID&apos;].length(); j++) {
		
		if(j&gt; 0) {
			var primaryPatient= false;	
		}

		var patient= {};
		patient= json_pid_patient(msg[&apos;PID&apos;][j], msg[&apos;PV1&apos;][j]);
		
		if(primaryPatient== true) {
			patient.recordType= &apos;ADT&apos;;
			patient.type= &apos;swap&apos;;
			message.patient= patient;
		} else {
			patient.recordType= &apos;ADT&apos;;
			patient.type= &apos;swap&apos;;
			message.secondaryPatient= patient;
		}
	}



} else if(msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString().indexOf(&apos;A40&apos;)&gt;-1) {
	
	var survivorPatient= {};
	survivorPatient= json_pid_patient(msg[&apos;PID&apos;], msg[&apos;PV1&apos;]);
	survivorPatient.recordType= &apos;ADT&apos;;
	survivorPatient.type= &apos;survivor&apos;;
	//
	message.patient= survivorPatient;

	var victimPatient= {};
	victimPatient= json_mrg_patient(msg[&apos;MRG&apos;]);
	victimPatient.recordType= &apos;ADT&apos;;
	victimPatient.type= &apos;victim&apos;;
	// 
	message.secondaryPatient= victimPatient;

} else {

	var patient= {};
	patient= json_pid_patient(msg[&apos;PID&apos;], msg[&apos;PV1&apos;]);
	patient.recordType= &apos;ADT&apos;;
	patient.type= &apos;update&apos;;
	//
	message.patient= patient;

}

tmp= JSON.stringify(message);
channelMap.put(&apos;json_msg&apos;,tmp);
channelMap.put(&apos;msg&apos;, tmp);

// 2022-02-15 jer - Added these channelMap to populate the custom Metadata view on Mirth Dashboard
channelMap.put(&apos;messageType&apos;,messageType);
channelMap.put(&apos;msgCtrlId&apos;,msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Parse HL7v2 Message - ChannelMap</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>false</enabled>
              <script>/* 
Name: 	Parse HL7v2 Message - ChannelMap
Desc: 	Parse HL7v2 Message - ChannelMap
Created:	2020-12-01 
Modified:
2020-11-23 JER - Modified to match the provided HL7 msg file
*/
var scriptName= &quot;Parse HL7v2 Message - ChannelMap&quot;;
var debug= 1;

if (debug&gt;0) { channelMap.put(scriptName+&quot;_DEBUG_msg&quot;,msg); }

channelMap.put(&quot;EventType&quot;, msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString()+&quot;^&quot;+msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString());
channelMap.put(&quot;Source&quot;, msg[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString()+&quot;:&quot;+msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString());
if(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].length()&gt;1) {
	channelMap.put(&quot;PatientID&quot;, msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;][0].toString());
} else {
	channelMap.put(&quot;PatientID&quot;, msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString());
}
channelMap.put(&quot;VisitNumber&quot;, msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString());

//tmp[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]= UUIDGenerator.getUUID().toString();
var strMessageControlId= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
if((typeof(msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]) == &apos;undefined&apos;) || (msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString().length&lt;1)) {
	msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]= UUIDGenerator.getUUID().toString();
} 
channelMap.put(&quot;MessageID&quot;, msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString());

channelMap.put(&quot;in_msg&quot;,msg);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>HL7V2</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
              <handleRepetitions>true</handleRepetitions>
              <handleSubcomponents>true</handleSubcomponents>
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <stripNamespaces>true</stripNamespaces>
              <segmentDelimiter>\r</segmentDelimiter>
              <convertLineBreaks>true</convertLineBreaks>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <segmentDelimiter>\r</segmentDelimiter>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
              <splitType>MSH_Segment</splitType>
              <batchScript></batchScript>
            </batchProperties>
            <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
              <segmentDelimiter>\r</segmentDelimiter>
              <successfulACKCode>AA</successfulACKCode>
              <successfulACKMessage></successfulACKMessage>
              <errorACKCode>AE</errorACKCode>
              <errorACKMessage>${failureMessage}</errorACKMessage>
              <rejectedACKCode>AR</rejectedACKCode>
              <rejectedACKMessage>${rejectMessage}</rejectedACKMessage>
              <msh15ACKAccept>false</msh15ACKAccept>
              <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
            </responseGenerationProperties>
            <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
              <successfulACKCode>AA,CA</successfulACKCode>
              <errorACKCode>AE,CE</errorACKCode>
              <rejectedACKCode>AR,CR</rejectedACKCode>
              <validateMessageControlId>true</validateMessageControlId>
              <originalMessageControlId>Destination_Encoded</originalMessageControlId>
              <originalIdMapVariable></originalIdMapVariable>
            </responseValidationProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.javascriptrule.JavaScriptRule version="3.12.0">
              <name>Filter In-Validated HL7 Message</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>false</enabled>
              <script>/* 
Name: 	filter_validation_hl7_message.js
Desc: 	Filter Incoming HL7v2 Message - ChannelMap
Created:	2021-02-12 
Modified:
*/
var scriptName= &quot;filter_validation_hl7_message&quot;;
var debug= 0;
var msgCtrlId= msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
var msgDateTime= msg[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
if(msgCtrlId.toString().length&lt; 1) {
	msgCtrlId= msgDateTime;
}

if (debug&gt;0) { logger.debug(scriptName+&quot;::DEBUG received msg: &quot;+msg); }
// Verify PID-3 element value
if(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString().length &gt; 0) {
    if (debug&gt;0) { logger.debug(scriptName+&quot;::DEBUG message PASSED filter successfully&quot;); }
} else {
	var failureMessage= &apos;PID-3 Element: Missing Patient ID&apos;;
	logger.error(scriptName+&quot;::DEBUG message: &quot;+msgCtrlId+&quot; FILTERED msg: &quot;+failureMessage);
}
// Verify PID-18 element value
if(msg[&apos;PID&apos;][&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString().length &gt; 0) {
    if (debug&gt;0) { logger.debug(scriptName+&quot;::DEBUG message PASSED filter successfully&quot;); }
} else {
	var failureMessage= &apos;PID-18 Element: Missing Account Number&apos;;
	logger.error(scriptName+&quot;::DEBUG message: &quot;+msgCtrlId+&quot; FILTERED msg: &quot;+failureMessage);
}
// Verify PV1-19 element value
if(msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PID.19.1&apos;].toString().length &gt; 0) {
    if (debug&gt;0) { logger.debug(scriptName+&quot;::DEBUG message PASSED filter successfully&quot;); }
} else {
	var failureMessage= &apos;PV1-19 Element: Missing Visit Number&apos;;
	logger.error(scriptName+&quot;::DEBUG message: &quot;+msgCtrlId+&quot; FILTERED msg: &quot;+failureMessage);
}

if(failureMessage) {
	$c(&apos;rejectMessage&apos;,failureMessage);
	$c(&apos;failureMessage&apos;,failureMessage);
	return false;
} else {
    return true;
}</script>
            </com.mirth.connect.plugins.javascriptrule.JavaScriptRule>
          </elements>
        </filter>
        <transportName>File Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.12.0">
          <metaDataId>5</metaDataId>
          <name>FileWriter - All HL7 messages</name>
          <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <scheme>FILE</scheme>
            <host>C:/HL7/JSON/OUT</host>
            <outputPattern>${messageType}_${msgCtrlId}_${mrnDomain}_${mrn}.json</outputPattern>
            <anonymous>true</anonymous>
            <username>anonymous</username>
            <password>anonymous</password>
            <timeout>10000</timeout>
            <keepConnectionOpen>false</keepConnectionOpen>
            <maxIdleTime>0</maxIdleTime>
            <secure>true</secure>
            <passive>true</passive>
            <validateConnection>true</validateConnection>
            <outputAppend>false</outputAppend>
            <errorOnExists>false</errorOnExists>
            <temporary>false</temporary>
            <binary>false</binary>
            <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
            <template>${json_msg}</template>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>File Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>7</metaDataId>
          <name>Channel Sender - Scheduling</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>7a3b0715-12e0-4803-aa51-c1a947ef9b66</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>RAW</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>RAW</inboundDataType>
            <outboundDataType>RAW</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.12.0">
                <name>Accept message if &quot;$(&apos;EventType&apos;)&quot; equals &quot;SIU^S12&quot; or &quot;SIU^S14&quot; or &quot;SIU^S15&quot;</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <field>$(&apos;EventType&apos;)</field>
                <condition>EQUALS</condition>
                <values>
                  <string>&quot;SIU^S12&quot;</string>
                  <string>&quot;SIU^S14&quot;</string>
                  <string>&quot;SIU^S15&quot;</string>
                </values>
              </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
            </elements>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>11</metaDataId>
          <name>Channel Sender - Ordering</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>1c6037e0-7bf9-41ae-b896-5be7b77e711f</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>RAW</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>RAW</inboundDataType>
            <outboundDataType>RAW</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.12.0">
                <name>Accept message if &quot;$(&apos;EventType&apos;)&quot; equals &quot;OMG^O19&quot;</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <field>$(&apos;EventType&apos;)</field>
                <condition>EQUALS</condition>
                <values>
                  <string>&quot;OMG^O19&quot;</string>
                </values>
              </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
            </elements>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>12</metaDataId>
          <name>Channel Sender - Observations</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>a757905f-315a-43be-a624-38780a3d7574</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>RAW</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>RAW</inboundDataType>
            <outboundDataType>RAW</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.12.0">
                <name>Accept message if &quot;$(&apos;EventType&apos;)&quot; contains &quot;ORU^R01&quot;</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <field>$(&apos;EventType&apos;)</field>
                <condition>CONTAINS</condition>
                <values>
                  <string>&quot;ORU^R01&quot;</string>
                </values>
              </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
            </elements>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map

// Sample postprocessor script
/*
if (response.getStatus() == &apos;FAILURE&apos;){
	var rawResponse = response.getMessage();
	var mshInd = rawResponse.search(&apos;MSH&apos;);
	var hl7Response = rawResponse.substring(mshInd,rawResponse.length());
	logger.error( &quot;ACK =&quot;+ hl7Response);
	
	var nack_resp_mess = new XML(SerializerFactory.getHL7Serializer().toXML(hl7Response));
	logger.error(&quot;ACK Format XML= &quot;+nack_resp_mess);
	var errorStatus= nack_resp_mess[&apos;MSA&apos;][&apos;MSA.3&apos;][&apos;MSA.3.1&apos;].toString();
	logger.error(&quot;error= &quot;+errorStatus);
	var xml_resp_mess= &apos;&lt;FindPatientsResponse xmlns=&quot;http://tempuri.org/&quot;&gt;&apos;+
	&apos;&lt;Error&gt;&lt;Code&gt;&apos;+response.getStatus()+&apos;&lt;/Code&gt;&apos;+&apos;&lt;ErrorStatus&gt;&lt;![CDATA[&apos;+nack_resp_mess+&apos;]]&gt;&lt;/ErrorStatus&gt;&lt;/Error&gt;&apos;+
	&apos;&lt;/FindPatientsResponse&gt;&apos;;
}
*/
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.12.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STOPPED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>EVENTTYPE</name>
            <type>STRING</type>
            <mappingName>EventType</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>SOURCENAME</name>
            <type>STRING</type>
            <mappingName>Source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>MESSAGEID</name>
            <type>STRING</type>
            <mappingName>MessageID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>VISITNUMBER</name>
            <type>STRING</type>
            <mappingName>VisitNumber</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.12.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1645827848954</time>
            <timezone>America/Chicago</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.12.0">
            <id>e71cb874-bea8-4477-9ab5-0f7ae4a9b6f4</id>
            <name>HL7 to JSON</name>
            <revision>40</revision>
            <lastModified>
              <time>1695220765400</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>Conversion HL7v2 to Javascript objects Library</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>727b91fb-5d82-437c-aa92-6eba252ef290</id>
                <name>convertAddressToJSON</name>
                <revision>3</revision>
                <lastModified>
                  <time>1689982257847</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Extended Address (XAD) data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. 12345 WEST MAIN STREET^^CARMEL^IN^46032)
	@return {object} objAddress- this contains the HL7 Address (XAD) element into a single objAddress JSON object.
	(e.g. 
	{ Address {
		&quot;StreetAddress&quot;=&quot;12345 WEST MAIN STREET&quot;,
		&quot;OtherDesignation&quot;=&quot;RX&quot;,
		&quot;City&quot;=&quot;CARMEL&quot;,
		&quot;StateOrProvince&quot;=&quot;IN&quot;,
		&quot;ZipOrPostalCode&quot;=&quot;46032&quot;,
		&quot;Country&quot;=&quot;&quot;,
		&quot;AddressType&quot;=&quot;&quot;,
		&quot;OtherGeographicDesignation&quot;=&quot;&quot;,
		&quot;CountyParishCode&quot;=&quot;&quot;,
		&quot;CensusTract&quot;=&quot;&quot;,
		&quot;AddressRepresentationCode&quot;=&quot;&quot;,
		&quot;AddressValidityRange&quot;=&quot;&quot;
	})
**/
function convertAddressToJSON(element) {

	var scriptName= &apos;convertAddressToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objAddress= new Object();
		var meta = {};

		// evaluate List for Entity Identifier
		var lstExtendedAddress= element.toString().toUpperCase().split(&quot;^&quot;);
		
		// Entity Identity Identifier -&gt; @DataModel
		for(i= 0;i&lt;lstExtendedAddress.length;i++) {
			var subElement= lstExtendedAddress[i].toString();
			
			//  PID-11.1 Street Address (SAD)
			if(i== 0) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;StreetAddress&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
				}
			}
			// PID-11.2 Other Designation (ST)
			if(i== 1) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;OtherDesignation&quot;;
					meta[columnName]= subElement.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
				}
			}
			// PID-11.3 City (ST)
			if(i== 2) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;City&quot;;
					meta[columnName]= subElement.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
				}
			}
			// PID-11.4 State or Province (ST)	
			if(i== 3) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;StateOrProvince&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			}
			// PID-11.5 Zip or Postal Code (ST)
			if(i== 4) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;ZipOrPostalCode&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			}
			// PID-11.6 Country (ID)
			if(i== 5) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;Country&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			}
			// PID-11.7 Address type (ID)
			if(i== 6) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;AddressType&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			}
			// PID-11.8 Other Geographic Designation (ST)
			if(i== 7) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;OtherGeographicDesignation&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			} 
			// PID-11.9 County/Parish Code (IS)
			if(i== 8) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;CountyParishCode&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			}
			// PID-11.10 Census Tract (IS)
			if(i== 9) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;CensusTract&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			}
			// PID-11.11 Address Representation Code (IS)
			if(i== 10) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;AddressRepresentationCode&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
					
				}
			}
			// PID-11.12 Address Validity Range (DR)
			if(i== 11) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;AddressValidityRange&quot;;
					
					// call the convertDateTimeRangeToJSON function
					var columnValue= convertDateTimeRangeToJSON(subElement);
					meta[columnName]= columnValue;
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
				}
			}
		} // end if 

		objAddress= JSON.stringify(meta); // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objAddress: &apos;+objAddress); 
		}
		
		return objAddress;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5122dea6-6b6a-4720-993b-668f5e936666</id>
                <name>convertCodedElementToJSON</name>
                <revision>6</revision>
                <lastModified>
                  <time>1689376323180</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Coded Element (CE) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. F-11380^CREATININE^I9^2148-5^CREATININE^LN)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objCodedElement - this contains the HL7  Coded Element (CE) element into a single objExtendedTelecommunicationNumber JSON object.
	(e.g. 
		{ &quot;Order Control Code Reason&quot; {
			&quot;Identifier&quot;=&quot;F-11380&quot;,
			&quot;Text&quot;=&quot;QAM&quot;,
			&quot;NameOfCodingSystem&quot;=&quot;X3&quot;,
			&quot;AlternateIdentifier&quot;=&quot;&quot;,
			&quot;AlternateText&quot;=&quot;&quot;,
			&quot;NameOfAlternateCodingSystem&quot;=&quot;&quot;
		})
	History:
	2022-08-26 JER - Substitute space character with no character
*/
function convertCodedElementToJSON(element) {

	var scriptName= &apos;convertCodedElementToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { 
		logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); 
	}
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objCodedElement= new Object();
		var meta = {};

		var i= 0;
	
		// Person Location -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Identifier&quot;;
					meta[columnName]= child.toString();

					// 2022-08-26 JER - Substitute space character with no character
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString().replace(/\s/,&apos;&apos;)); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Text&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameOfCodingSystem&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AlternateIdentifier&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString().replace(/\s/,&apos;&apos;)); }
				}
			}
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AlternateText&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameOfAlternateCodingSystem&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objCodedElement= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objCodedElement); 
		}
		
		return objCodedElement;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5915bb31-3bed-4e68-9443-e5d7951a71c0</id>
                <name>convertCodedWithExceptionsToJSON</name>
                <revision>2</revision>
                <lastModified>
                  <time>1661554929100</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Coded With Exceptions (CWE) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. F-11380^CREATININE^I9^2148-5^CREATININE^LN)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objCodedWithExceptions - this contains the HL7  Coded With Exceptions (CWE) element into a single objCodedWithExceptions JSON object.
	(e.g. 
		{ &quot;Repeat Pattern Code&quot; {
			&quot;Identifier&quot;=&quot;F-11380&quot;,
			&quot;Text&quot;=&quot;QAM&quot;,
			&quot;NameOfCodingSystem&quot;=&quot;X3&quot;,
			&quot;AlternateIdentifier&quot;=&quot;&quot;,
			&quot;AlternateText&quot;=&quot;&quot;,
			&quot;NameOfAlternateCodingSystem&quot;=&quot;&quot;,
			&quot;CodingSystemVersionId&quot;=&quot;&quot;,
			&quot;AlternateCodingSystemVersionId&quot;=&quot;&quot;,
			&quot;OriginalText&quot;=&quot;&quot;
		})

		&quot;repeatPattern&quot; : {&#xd;
      		&quot;RepeatPatternCode&quot; : {&#xd;
        			&quot;Identifier&quot; : &quot;1D  &quot;&#xd;
      		},&#xd;
      		&quot;CalendarAlignment&quot; : &quot;1&quot;&#xd;
    		},
	Components: &lt;identifier (ST)&gt; ^ &lt;text (ST)&gt; ^ &lt;name of coding system (IS)&gt; ^ &lt;alternate identifier (ST)&gt; ^ &lt;alternate text (ST)&gt; ^ &lt;name of alternate coding system (IS)&gt; ^ &lt;coding system version ID (ST)&gt; ^ alternate coding system version ID (ST)&gt; ^ &lt;original text (ST)&gt;
	History:
	2022-08-26 JER - Modify to remove all space characters from an element value using replace(/\s+/g,&apos;&apos;)
*/
function convertCodedWithExceptionsToJSON(element) {

	var scriptName= &apos;convertCodedWithExceptionsToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objCodedWithExceptions= new Object();
		var meta = {};

		var i= 0;
	
		// Person Location -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Identifier&quot;;
					// 2022-08-26 JER - Modify to remove all space characters from an element value using replace(/\s+/g,&apos;&apos;)
					meta[columnName]= child.toString().replace(/\s+/g,&apos;&apos;);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Text&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameOfCodingSystem&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AlternateIdentifier&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AlternateText&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameOfAlternateCodingSystem&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;CodingSystemVersionId&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AlternateCodingSystemVersionId&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;OriginalText&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objCodedWithExceptions= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objCodedWithExceptions); 
		}
		
		return objCodedWithExceptions;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>96326b8a-12da-4785-9685-dc6d3bd2f771</id>
                <name>convertCompositeQuantityTimingToJSON</name>
                <revision>4</revision>
                <lastModified>
                  <time>1694378900897</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Composite Quantity Timing (CQT) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. 1^QAM^X3)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objCompositeQuantityTiming - this contains the HL7 Extended Composite Number and Name for Persons element into a single objCompositeQuantityTiming JSON object.
	(e.g. 
		{ &quot;Quantity/Timing&quot; {
			&quot;Quantity&quot;=&quot;1&quot;,
			&quot;Interval&quot;=&quot;QAM&quot;,
			&quot;Duration&quot;=&quot;X3&quot;
		})
	@history
	2023-02-01 JER - Modified from using JSON.stringify to NOT using the JSON.stringify on the objCompositeQuantityTiming object	
	2022-12-27 JER - Modified from calling convertCompositeQuantityWithUnitsToJSON(orc[&apos;ORC.7&apos;]) to child
*/
function convertCompositeQuantityTimingToJSON(element) {

	var scriptName= &apos;convertCompositeQuantityTimingToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objCompositeQuantityTiming= new Object();
		var meta = {};

		var i= 0;
	
		// Entity Identity Identifier -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Quantity&quot;;
					// meta[columnName]= child.toString();
					// 2022-12-27 JER - Modified from calling convertCompositeQuantityWithUnitsToJSON(orc[&apos;ORC.7&apos;]) to child
					// meta[columnName]= convertCompositeQuantityWithUnitsToJSON(orc[&apos;ORC.7&apos;]);
					meta[columnName]= convertCompositeQuantityWithUnitsToJSON(child);
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Interval&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Duration&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;StartDateTime&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;EndDateTime&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Priority&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Condition&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Text&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Conjunction&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;OrderingSequence&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 9) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;OccurrenceDuration&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 10) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;TotalOccurrences&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		// 2023-02-01 JER - Modified from using JSON.stringify to NOT using the JSON.stringify on the objCompositeQuantityTiming object
		// objCompositeQuantityTiming= JSON.stringify(meta); // convert to JSON
		objCompositeQuantityTiming= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta)); 
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objCompositeQuantityTiming); 
		}
		
		return objCompositeQuantityTiming;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>66341d47-5033-4494-bb36-eecec23a8771</id>
                <name>convertCompositeQuantityWithUnitsToJSON</name>
                <revision>2</revision>
                <lastModified>
                  <time>1672172567785</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Extended Composite Number (CQ) To JSON data element values converted into JSON object for reference
	ScriptName: convertCompositeQuantityWithUnitsToJSON(element, elementName)
	@param {String} element- this contains the raw HL7 element (string) (e.g. 100^200 mcg)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objCompositeQuantityWithUnits - this contains the HL7 Extended Composite Number and Name for Persons element into a single objCompositeQuantityWithUnits JSON object.
	(e.g. 
		{ &quot;Quantity&quot; {
			&quot;Quantity&quot;=&quot;QS1&quot;,
			&quot;Units&quot;=&quot;QS1&quot;
		})
*/
function convertCompositeQuantityWithUnitsToJSON(element) {

	var scriptName= &apos;convertCompositeQuantityWithUnitsToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objCompositeQuantityWithUnits= new Object();
		var meta = {};

		var i= 0;
	
		// Entity Identity Identifier -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Quantity&quot;;
					meta[columnName]= child.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Units&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertCodedElementToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}	
			i++;
		} // end if  

		objCompositeQuantityWithUnits= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objCompositeQuantityWithUnits); 
		}
		
		return objCompositeQuantityWithUnits;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>269f8819-08ff-4995-bd4b-014320eeb034</id>
                <name>convertDateTimeRangeToJSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1694384113853</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Date/Time Range (DR) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 Date/Time Range (DR) element (string) (e.g. 20140410094429^20140410214429.3+000)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objDateTimeRange - this contains the HL7 Date/Time Range (DR) with percision into a single objDateTimeRange JSON object.
	(e.g. 
		{ &quot;DateTimeRange&quot; {
			&quot;RangeStartDateTime&quot;=&quot;&quot;, (TS)
			&quot;RangeEndDateTime&quot;=&quot;&quot; (TS)
		})
*/
function convertDateTimeRangeToJSON(element) {

	var scriptName= &apos;convertDateTimeRangeToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objDateTimeRange= new Object();
		var meta = {};

		var i= 0;
	
		for each (child in element.children()) {
			/* RangeStartDateTime (TS) */
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Time&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertTimestampToJSON(child.toString());
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* RangeStopDateTime (TS) */
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Degree of Precision&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertTimestampToJSON(child.toString());
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objDateTimeRange= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objDateTimeRange: &apos;+objDateTimeRange);
		}
		
		return objDateTimeRange;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b0908de4-5a69-4219-a3f5-0d86b53af607</id>
                <name>convertEntityIdentifierToJSON</name>
                <revision>3</revision>
                <lastModified>
                  <time>1694378900938</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Entity Identifier (EI) data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. 06401191^RX^06401191140410^QS1RX)
	@return {object} objEntityIdentifier JSON - this contains the HL7 Entity Identity element into a single objEntityIdentifier JSON object.
	(e.g. 
	{ PlacerOrderNumber {
		&quot;EntityIdentifier&quot;=&quot;06401191&quot;,
		&quot;NamespaceId&quot;=&quot;RX&quot;,
		&quot;UniversalId&quot;=&quot;06401191140410&quot;,
		&quot;UniversalIdType&quot;=&quot;QS1RX&quot;
	})
*/
function convertEntityIdentifierToJSON(element) {

	var scriptName= &apos;convertEntityIdentifierToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objEntityIdentifier= new Object();
		var meta = {};

		var i= 0;
	
		// Entity Identity Identifier -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;EntityIdentifier&quot;;
					meta[columnName]= child.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NamespaceId&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}	
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;UniversalId&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;UniversalIdType&quot;;
					meta[columnName]= child.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
					
				}
			}
			i++;
		} // end if  

		objEntityIdentifier= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objEntityIdentifier); 
		}
		
		return objEntityIdentifier;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>954ffe4f-50d7-43ab-9f48-ecd85d9a4317</id>
                <name>convertExtendedAddressToJSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911274142</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Extended Address (XAD) data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. 12345 WEST MAIN STREET^^CARMEL^IN^46032)
	@return {object} objExtendedAddress- this contains the HL7 Extended Address (XAD) element into a single objExtendedAddress JSON object.
	(e.g. PatientAddress {
		&quot;StreetAddress&quot;=&quot;12345 WEST MAIN STREET&quot;,
		&quot;OtherDesignation&quot;=&quot;RX&quot;,
		&quot;City&quot;=&quot;CARMEL&quot;,
		&quot;StateOrProvince&quot;=&quot;IN&quot;,
		&quot;ZipOrPostalCode&quot;=&quot;46032&quot;
	})
**/
function convertExtendedAddressToJSON(element) {

	var scriptName= &apos;convertExtendedAddressToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objExtendedAddress= new Object();
		var meta = {};
		var i= 0;
	
		// Entity Identity Identifier -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;StreetAddress&quot;;
					meta[columnName]= child.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;OtherDesignation&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}	
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;City&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;StateOrProvince&quot;;
					meta[columnName]= child.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
					
				}
			}
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;ZipOrPostalCode&quot;;
					meta[columnName]= child.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
					
				}
			}
			i++;
		} // end if 

		objExtendedAddress= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objExtendedAddress); 
		}

		channelMap.put(&apos;StreetAddress&apos;,objExtendedAddress)
		return objExtendedAddress;	
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7c6e78fd-4713-45f2-bfe6-97906527cba7</id>
                <name>convertExtendedCompositeIDNumberAndNameToJSON</name>
                <revision>2</revision>
                <lastModified>
                  <time>1672175146029</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**	
	Desc: This function retrieves HL7v2 HAPI formatted convert Extended Composite ID Number And Name (XCN) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. QS1^QS1^QS1^^^^^^QS1)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objExtendedCompositeIDNumberAndName - this contains the HL7 Extended Composite ID Number and Name for Persons element into a single objExtendedCompositeIDNumberAndName JSON object.
	(e.g. 
		{ &quot;Entered By&quot; {
			&quot;IdNumber&quot;=&quot;QS1&quot;,
			&quot;FamilyName&quot;=&quot;QS1&quot;,
			&quot;GivenName&quot;=&quot;QS1&quot;
			&quot;SecondGivenName&quot;=&quot;&quot;,
			&quot;Suffix&quot;=&quot;&quot;,
			&quot;Prefix&quot;=&quot;&quot;,
			&quot;Degree&quot;=&quot;&quot;,
			&quot;SourceTable&quot;=&quot;&quot;,
			&quot;AssigningAuthority&quot;=&quot;QS1&quot;,
			&quot;NameTypeCode&quot;=&quot;&quot;,
			&quot;IdentifierCheckDigit&quot;=&quot;&quot;,
			&quot;CheckDigitScheme&quot;=&quot;&quot;,
			&quot;IdentifierTypeCode&quot;=&quot;&quot;,
			&quot;AssigningFacility&quot;=&quot;&quot;,
			&quot;NameRepresentationCode&quot;=&quot;&quot;,
			&quot;NameContext&quot;=&quot;&quot;,
			&quot;NameValidityRange&quot;=&quot;&quot;,
			&quot;EffectiveDate&quot;=&quot;&quot;,
			&quot;ExpirationDate&quot;=&quot;&quot;,
			&quot;ProfessionalSuffix&quot;=&quot;&quot;,
			&quot;AssigningJurisdiction&quot;=&quot;&quot;,
			&quot;AssigningAgencyOrDepartment&quot;=&quot;&quot;
		})
**/
function convertExtendedCompositeIDNumberAndNameToJSON(element) {

	var scriptName= &apos;convertExtendedCompositeIDNumberAndNameToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objExtendedCompositeIDNumberAndName= new Object();
		var meta = {};
		var i= 0;
	
		// Entity Identity Identifier -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;IdNumber&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertCompositeQuantityWithUnitsToJSON(child);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;FamilyName&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;GivenName&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;SecondGivenName&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Suffix&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Prefix&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Degree&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;SourceTable&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AssigningAuthority&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 9) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameTypeCode&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 10) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;IdentifierCheckDigit&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 11) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;CheckDigitScheme&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			
			if(i== 12) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;IdentifierTypeCode&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertCompositeQuantityWithUnitsToJSON(orc[&apos;ORC.7&apos;]);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 13) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AssigningFacility&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 14) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameRepresentationCode&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 15) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameContext&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 16) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameValidityRange&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 17) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameContext&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 18) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameValidityRange&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 19) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameAssemblyOrder&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 20) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;EffectiveDate&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 21) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;ExpirationDate&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 22) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;ProfessionalSuffix&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 23) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AssigningJurisdiction&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 24) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AssigningAgencyOrDepartment&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objExtendedCompositeIDNumberAndName= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(objExtendedCompositeIDNumberAndName));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objExtendedCompositeIDNumberAndName); 
		}
		
		return objExtendedCompositeIDNumberAndName;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>d1bd73e7-bada-4e38-91e5-1a6e0dd2956d</id>
                <name>convertExtendedCompositeIDWithCheckDigitToJSON</name>
                <revision>2</revision>
                <lastModified>
                  <time>1694380766122</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**	
	Desc: This function retrieves HL7v2 HAPI formatted convert Extended Composite ID With Check Digit (CX) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. QS1^QS1^QS1^^^^^^QS1)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objExtendedCompositeIDWithCheckDigit - this contains the HL7 Extended Composite ID With Check Digit for Persons element into a single objExtendedCompositeIDWithCheckDigit JSON object.
	(e.g. 
		{ &quot;Entered By&quot; {
			&quot;IdNumber&quot;=&quot;&quot;, (ST)
			&quot;CheckDigit&quot;=&quot;&quot;, (ST)
			&quot;CheckDigitScheme&quot;=&quot;&quot; (ID)
			&quot;AssigningAuthority&quot;=&quot;&quot;, (HD)
			&quot;IdentifierTypeCode&quot;=&quot;&quot;, (ID)
			&quot;AssigningFacility&quot;=&quot;&quot;, (HD)
			&quot;EffectiveDate&quot;=&quot;&quot;, (DT)
			&quot;ExpirationDate&quot;=&quot;&quot;, (DT)
			&quot;AssigningJurisdiction&quot;=&quot;&quot;, (CWE)
			&quot;AssigingAgencyOrDepartment&quot;=&quot;&quot; (CWE)
		})
**/
function convertExtendedCompositeIDWithCheckDigitToJSON(element) {

	var scriptName= &apos;convertExtendedCompositeIDWithCheckDigitToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objExtendedCompositeIDWithCheckDigit= new Object();
		var meta = {};
		var i= 0;
	
		// Entity Identity Identifier -&gt; @DataModel
		for each (child in element.children()) {
			
			/* IdNumber (ST) */
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;IdNumber&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertCodedWithExceptionsToJSON(child);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* CheckDigit (ST) */
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;CheckDigit&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* CheckDigitScheme (ID) */
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;CheckDigitScheme&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* AssigningAuthority (HD) */
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AssigningAuthority&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertHierarchicDesignatorToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* IdentifierTypeCode (ID) */
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;IdentifierTypeCode&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* AssigningFacility (HD) */
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AssigningFacility&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertHierarchicDesignatorToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* EffectiveDate (DT) */
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;EffectiveDate&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* ExpirationDate (DT) */
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;ExpirationDate&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* AssigningJurisdiction (CWE)*/
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AssigningJurisdiction&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertCodedWithExceptionsToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* AssigingAgencyOrDepartment (CWE) */
			if(i== 9) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AssigningAgencyOrDepartment&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertCodedWithExceptionsToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objExtendedCompositeIDWithCheckDigit= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(objExtendedCompositeIDWithCheckDigit));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objExtendedCompositeIDWithCheckDigit); 
		}
		
		return objExtendedCompositeIDWithCheckDigit;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5571d630-1764-4bdd-9d45-a5148991c281</id>
                <name>convertExtendedCompositeNameAndIdentificationNumberForOrganizationsToJSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1694388680210</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**	
	Desc: This function retrieves HL7v2 HAPI formatted convert Extended Composite Name (XON) And Identification Number For Organizations to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. QS1^QS1^QS1^^^^^^QS1)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objExtendedCompositeNameAndIdentificationNumberForOrganizations - this contains the HL7 Extended Composite Name And Identification Number For Organizations  element into a single objExtendedCompositeNameAndIdentificationNumberForOrganizations JSON object.
	(e.g. 
		{ &quot;ExtendedCompositeNameAndIdentificationNumberForOrganizations&quot; {
			&quot;OrganizationName&quot;=&quot;&quot;, (ST)
			&quot;OrganizationNameTypeCode&quot;=&quot;&quot;, (IS)
			&quot;IdNumber&quot;=&quot;&quot; (NM)
			&quot;CheckDigit&quot;=&quot;&quot;, (NM)
			&quot;CheckDigitScheme&quot;=&quot;&quot;, (ID)
			&quot;AssigningAuthority&quot;=&quot;&quot;, (HD)
			&quot;IdentifierTypeCode&quot;=&quot;&quot;, (ID)
			&quot;AssigningFacility&quot;=&quot;&quot;, (HD)
			&quot;NameRepresentationCode&quot;=&quot;&quot;, (ID)
			&quot;OrganizationIdentifier&quot;=&quot;&quot; (ST)
		})
**/
function convertExtendedCompositeNameAndIdentificationNumberForOrganizationsToJSON(element) {

	var scriptName= &apos;convertExtendedCompositeNameAndIdentificationNumberForOrganizationsToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objExtendedCompositeNameAndIdentificationNumberForOrganizations= new Object();
		var meta = {};
		var i= 0;
	
		// Entity Identity Identifier -&gt; @DataModel
		for each (child in element.children()) {
			
			/* OrganizationName (ST) */
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;OrganizationName&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertCodedWithExceptionsToJSON(child);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* OrganizationNameTypeCode (IS) */
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;OrganizationNameTypeCode&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* IdNumber (NM) */
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;IdNumber&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* CheckDigit (NM) */
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;CheckDigit&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertHierarchicDesignatorToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* CheckDigitScheme (ID) */
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;CheckDigitScheme&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* AssigningAuthority (HD) */
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AssigningAuthority&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertHierarchicDesignatorToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* IdentifierTypeCode (ID) */
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;IdentifierTypeCode&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* AssigningFacility (HD) */
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AssigningFacility&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertHierarchicDesignatorToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* NameRepresentationCode (ID) */
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameRepresentationCode&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* OrganizationIdentifier (ST) */
			if(i== 9) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;OrganizationIdentifier&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertCodedWithExceptionsToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objExtendedCompositeNameAndIdentificationNumberForOrganizations= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(objExtendedCompositeNameAndIdentificationNumberForOrganizations));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objExtendedCompositeNameAndIdentificationNumberForOrganizations); 
		}
		
		return objExtendedCompositeNameAndIdentificationNumberForOrganizations;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6222c84b-dd50-45d3-87a0-cc2cf996c79a</id>
                <name>convertExtendedPersonNameToJSON</name>
                <revision>2</revision>
                <lastModified>
                  <time>1694383104715</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**	
	Desc: This function retrieves HL7v2 HAPI formatted convert Extended Person Name (XPN) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. QS1^QS1^QS1^^^^^^QS1)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objExtendedPersonName - this contains the HL7 Extended Person Name element into a single objExtendedPersonName JSON object.
	(e.g. 
		{ &quot;ExtendedPersonName&quot; {
			&quot;FamilyName&quot;=&quot;&quot;, (FN)
			&quot;GivenName&quot;=&quot;&quot;, (ST)
			&quot;SecondAndFurtherGivenNamesOrInitials&quot;=&quot;&quot; (ST)
			&quot;Suffix&quot;=&quot;&quot;, (ST)
			&quot;Prefix&quot;=&quot;&quot;, (ST)
			&quot;Degree&quot;=&quot;&quot;, (IS)
			&quot;NameTypeCode&quot;=&quot;&quot;, (ID)
			&quot;NameRepresentationCode&quot;=&quot;&quot;, (ID)
			&quot;NameContext&quot;=&quot;&quot;, (CE)
			&quot;NameValidityRange&quot;=&quot;&quot;, (DR)
			&quot;NameAssemblyOrder&quot;=&quot;&quot;, (ID)
			&quot;EffectiveDate&quot;=&quot;&quot;, (TS)
			&quot;ExpirationDate&quot;=&quot;&quot;, (TS)
			&quot;ProfessionalSuffix&quot;=&quot;&quot; (ST)
		})
**/
function convertExtendedPersonNameToJSON(element) {

	var scriptName= &apos;convertExtendedPersonNameToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objExtendedPersonName= new Object();
		var meta = {};
		var i= 0;
	
		// Entity Identity Identifier -&gt; @DataModel
		for each (child in element.children()) {
			
			/* FamilyName (FN) */
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;FamilyName&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertCodedWithExceptionsToJSON(child);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* GivenName (ST) */
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;GivenName&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* SecondAndFurtherGivenNamesOrInitials (ST) */
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;SecondAndFurtherGivenNamesOrInitials&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* Suffix (ST) */
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Suffix&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertHierarchicDesignatorToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* Prefix (ST) */
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Prefix&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* Degree (IS) */
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Degree&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertHierarchicDesignatorToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* Name Type Code (ID) */
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameTypeCode&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* Name Representation Code (ID) */
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameRepresentationCode&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* Name Context (CE)*/
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameContext&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertCodedElementToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* Name Validity Range (DR) */
			if(i== 9) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameValidityRange&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertCodedWithExceptionsToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* Name Assembly Order (ID) */
			if(i== 10) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NameAssemblyOrder&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertCodedWithExceptionsToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* EffectiveDate (DT) */
			if(i== 11) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;EffectiveDate&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* ExpirationDate (DT) */
			if(i== 12) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;ExpirationDate&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* Professional Suffix (ST) */
			if(i== 12) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;ProfessionalSuffix&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objExtendedPersonName= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(objExtendedPersonName));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objExtendedPersonName); 
		}
		
		return objExtendedPersonName;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>89eb9367-ff7d-4f5f-afe1-acc0f225ae09</id>
                <name>convertExtendedTelecommunicationNumberToJSON</name>
                <revision>3</revision>
                <lastModified>
                  <time>1694393556884</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**	
	Desc: This function retrieves HL7v2 HAPI formatted convert Extended Telecommunication Number (XTN) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. QS1^QS1^QS1^^^^^^QS1)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objExtendedTelecommunicationNumber - this contains the HL7 Extended Telecommunication Number (XTN) element into a single objExtendedTelecommunicationNumber JSON object.
	(e.g. 
		{ &quot;ExtendedTelecommunicationNumber&quot; {
			&quot;TelephoneNumber=&quot;&quot;, (ST)
			&quot;TelecommunicationUseCode&quot;=&quot;&quot;, (ID)
			&quot;TelecommunicationEquipmentType&quot;=&quot;&quot; (ID)
			&quot;EmailAddress&quot;=&quot;&quot;, (ST)
			&quot;CountryCode&quot;=&quot;&quot;, (NM)
			&quot;AreaCityCode&quot;=&quot;&quot;, (NM)
			&quot;LocalNumber&quot;=&quot;&quot;, (NM)
			&quot;Extension&quot;=&quot;&quot;, (NM)
			&quot;AnyText&quot;=&quot;&quot;, (ST)
			&quot;ExtensionPrefix&quot;=&quot;&quot;, (ST)
			&quot;SpeedDialCode&quot;=&quot;&quot;, (ST)
			&quot;UnformattedTelephoneNumber&quot;=&quot;&quot; (ST)
		})
**/
function convertExtendedTelecommunicationNumberToJSON(element) {

	var scriptName= &apos;convertExtendedTelecommunicationNumberToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objExtendedTelecommunicationNumber= new Object();
		var meta = {};
		var i= 0;
	
		// Entity Identity Identifier -&gt; @DataModel
		for each (child in element.children()) {
			
			/* TelephoneNumber (ST) */
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;TelephoneNumber&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertCodedWithExceptionsToJSON(child);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* TelecommunicationUseCode (ID) */
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;TelecommunicationUseCode&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* TelecommunicationEquipmentType (ID) */
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;TelecommunicationEquipmentType&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* EmailAddress (ST) */
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;EmailAddress&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertHierarchicDesignatorToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* CountryCode (NM) */
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;CountryCode&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* AreaCityCode (NM) */
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AreaCityCode&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertHierarchicDesignatorToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* LocalNumber (NM) */
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;LocalNumber&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* Extension (NM) */
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Extension&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* AnyText (ST)*/
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AnyText&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* ExtensionPrefix (ST) */
			if(i== 9) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;ExtensionPrefix&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* SpeedDialCode (ST) */
			if(i== 10) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;SpeedDialCode&quot;;
					meta[columnName]= child.toString();

					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			/* UnformattedTelephoneNumber (ST) */
			if(i== 11) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;UnformattedTelephoneNumber&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objExtendedTelecommunicationNumber= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(objExtendedTelecommunicationNumber));
			logger.error(scriptName+&apos;::DEBUG objExtendedTelecommunicationNumber: &apos;+objExtendedTelecommunicationNumber); 
		}
		
		return objExtendedTelecommunicationNumber;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>84877442-9c27-4550-a334-178c7ae94d70</id>
                <name>convertHierarchicDesignatorToJSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911274205</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Hierarchic Designator (HD) To JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. 100^200 mcg)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objHierarchicDesignator - this contains the HL7 Hierarchic Designator (HD) element into a single objHierarchicDesignator JSON object.
	(e.g. 
		{ &quot;Facility&quot; {
			&quot;NamespaceId&quot;=&quot;QS1&quot;,
			&quot;UniversalId&quot;=&quot;QS1&quot;,
			&quot;UniversalIdType&quot;=&quot;&quot;
		})
*/
function convertHierarchicDesignatorToJSON(element) {

	var scriptName= &apos;convertHierarchicDesignatorToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objHierarchicDesignator= new Object();
		var meta = {};

		var i= 0;
	
		// Entity Identity Identifier -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;NamespaceId&quot;;
					meta[columnName]= child.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;UniversalId&quot;;
					meta[columnName]= child.toString();
					//meta[columnName]= convertCodedElementToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}	
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;UniversalIdType&quot;;
					meta[columnName]= child.toString();
					//meta[columnName]= convertCodedElementToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objHierarchicDesignator= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objHierarchicDesignator); 
		}
		
		return objHierarchicDesignator;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>653ffee7-2a91-44bc-9500-4d082e926903</id>
                <name>convertLocationAddressVariationToJSON</name>
                <revision>2</revision>
                <lastModified>
                  <time>1691001755256</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	
	Desc: This function retrieves HL7v2 HAPI formatted Location with Address Variation (LA1) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. 1^QAM^X3)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objLocationAddressVariation - this contains the HL7 Location with Address Variation (LA1) element into a single objLocationAddressVariation JSON object.
	(e.g. 
		{ &quot;objDeliverToLocation&quot; {
			&quot;PointOfCare&quot;=&quot;1&quot;,
			&quot;Room&quot;=&quot;QAM&quot;,
			&quot;Bed&quot;=&quot;X3&quot;,
			&quot;Facility&quot;=&quot;&quot;,
			&quot;LocationStatus&quot;=&quot;&quot;,
			&quot;PatientLocationType&quot;=&quot;&quot;,
			&quot;Building&quot;=&quot;&quot;,
			&quot;Floor&quot;=&quot;&quot;,
			&quot;Address&quot;=&quot;&quot;
		})
*/
function convertLocationAddressVariationToJSON(element) {

	var scriptName= &apos;convertLocationAddressVariationToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objLocationAddressVariation= new Object();
		var meta = {};

		var i= 0;
	
		// Person Location -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;PointOfCare&quot;;
					meta[columnName]= child.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Room&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Bed&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Facility&quot;;
					//meta[columnName]= child.toString();
					meta[columnName]= convertHierarchicDesignatorToJSON(child);
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;LocationStatus&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;PatientLocationType&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Building&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Floor&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Address&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertAddressToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objLocationAddressVariation= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objLocationAddressVariation); 
		}
		
		return objLocationAddressVariation;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>d716b4ff-f64a-465f-9a83-1cf246612af6</id>
                <name>convertPersonLocationToJSON</name>
                <revision>2</revision>
                <lastModified>
                  <time>1672677351163</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Person Location (PL) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. 1^QAM^X3)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objPersonLocation - this contains the HL7 Person Location element into a single objPersonLocation JSON object.
	https://hapifhir.github.io/hapi-hl7v2/v25/apidocs/ca/uhn/hl7v2/model/v25/datatype/PL.html&#xd;	https://profiles.ihe.net/ITI/TF/Volume2/ch-N.html#N.4
	(e.g. 
		{ &quot;Quantity/Timing&quot; {
			&quot;Quantity&quot;=&quot;1&quot;,
			&quot;Interval&quot;=&quot;QAM&quot;,
			&quot;Duration&quot;=&quot;X3&quot;
		})
*/
function convertPersonLocationToJSON(element) {

	var scriptName= &apos;convertPersonLocationToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objPersonLocation= new Object();
		var meta = {};

		var i= 0;
	
		// Person Location -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;PointOfCare&quot;;
					meta[columnName]= child.toString();
					// meta[columnName]= convertCompositeQuantityWithUnitsToJSON(orc[&apos;ORC.7&apos;]);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Room&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Bed&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Facility&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;LocationStatus&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;PersonLocationType&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Building&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Floor&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;LocationDescription&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 9) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;ComprehensiveLocationIdentifier&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 10) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;AssigningAuthorityForLocation&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objPersonLocation= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objPersonLocation); 
		}
		
		return objPersonLocation;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ef788d5e-5a92-470a-b2a0-06bd415276b4</id>
                <name>convertQuantityTimingToJSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911274059</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Timing Quantity (TQ) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. F-11380^CREATININE^I9^2148-5^CREATININE^LN)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objTimingQuantity - this contains the HL7 Timing Quantity (TQ) element into a single objTimingQuantity JSON object.
	(e.g. 
		{ &quot;QuantityTiming&quot; {
			&quot;Quantity&quot;=&quot;F-11380&quot;,
			&quot;Interval&quot;=&quot;QAM&quot;,
			&quot;Duration&quot;=&quot;X3&quot;,
			&quot;StartDateTime&quot;=&quot;&quot;,
			&quot;EndDateTime&quot;=&quot;&quot;,
			&quot;Priority&quot;=&quot;&quot;,
			&quot;Condition&quot;=&quot;&quot;,
			&quot;Text&quot;=&quot;&quot;,
			&quot;Conjunction&quot;=&quot;&quot;,
			&quot;OrderSequencing&quot;=&quot;&quot;,
			&quot;OccurrenceDuration&quot;=&quot;&quot;,
			&quot;TotalOccurrences&quot;=&quot;&quot;
		})
	Components: &lt;Quantity (CQ)&gt; ^ &lt;Interval (RI)&gt; ^ &lt;Duration (ST)&gt; ^ &lt;Start Date/Time (TS)&gt; ^ &lt;End Date/Time (TS)&gt; ^ &lt;Priority (ST)&gt; ^ &lt;Condition (ST)&gt; ^ &lt;Text (TX)&gt; ^ &lt;Conjunction (ID)&gt; ^ &lt;Order Sequencing (OSD)&gt; ^ &lt;Occurrence Duration (CE)&gt; ^ &lt;Total Occurrences (NM)&gt;
**/
function convertQuantityTimingToJSON(element) {

	var scriptName= &apos;convertQuantityTimingToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objTimingQuantity= new Object();
		var meta = {};

		var i= 0;
	
		// Person Location -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Quantity&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertCompositeQuantityWithUnitsToJSON(child);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Interval&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertRepeatIntervalToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Duration&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;StartDateTime&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertTimestampToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;EndDateTime&quot;;
					//meta[columnName]= child.toString();
					meta[columnName]= convertTimestampToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Priority&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Condition&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Text&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Conjunction&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 9) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;OrderSequencing&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 10) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;OccurrenceDuration&quot;;
					//meta[columnName]= child.toString();
					meta[columnName]= convertCodedElementToJSON(child);
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 11) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;TotalOccurrences&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objTimingQuantity= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objTimingQuantity); 
		}
		
		return objTimingQuantity;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ba57aac0-1dd8-47e4-aab6-9ebcca1267c0</id>
                <name>convertRepeatIntervalToJSON</name>
                <revision>2</revision>
                <lastModified>
                  <time>1661554644541</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Repeat Interval (RI) To JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. 100^200 mcg)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objRepeatInterval - this contains the HL7 Repeat Interval (RI) element into a single objRepeatInterval JSON object.
	(e.g. 
		{ &quot;Interval&quot; {
			&quot;Repeat Pattern&quot;=&quot;QS1&quot;,
			&quot;Explicit Time Interval&quot;=&quot;QS1&quot;
		})
	History:
	2022-08-26 JER - trim any space characters from the element value - child.toString().replace(/\s+/g,&apos;&apos;);
*/
function convertRepeatIntervalToJSON(element) {

	var scriptName= &apos;convertRepeatIntervalToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objRepeatInterval= new Object();
		var meta = {};

		var i= 0;
	
		// Entity Identity Identifier -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Repeat Pattern&quot;;
					// 2022-08-26 JER - trim any space characters from the element value - child.toString().replace(/\s+/g,&apos;&apos;);
					meta[columnName]= child.toString().replace(/\s+/g,&apos;&apos;);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Explicit Time Interval&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}	
			i++;
		} // end if  

		objRepeatInterval= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objRepeatInterval); 
		}
		
		return objRepeatInterval;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>db8d6d68-6e76-44c2-ad1b-132b2fe9ef08</id>
                <name>convertRepeatPatternToJSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911273520</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Repeat Pattern (RPT) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. QAM&amp;Every morning at the institution specified time&amp;HL7xxx^HD^00^11^1^d^Y)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objRepeatPattern - this contains the HL7 Repeat Pattern (RPT) element into a single objRepeatPattern JSON object.
	(e.g. 
		{ &quot;Repeat Pattern&quot; {
			&quot;RepeatPatternCode&quot;=&quot;&quot;,
			&quot;CalendarAlignment&quot;=&quot;&quot;,
			&quot;PhaseRangeBeginValue&quot;=&quot;X3&quot;,
			&quot;PhaseRangeEndValue&quot;=&quot;&quot;,
			&quot;PeriodQuantity&quot;=&quot;&quot;,
			&quot;PeriodUnits&quot;=&quot;&quot;,
			&quot;InstitutionSpecifiedTime&quot;=&quot;&quot;,
			&quot;Event&quot;=&quot;&quot;,
			&quot;EventOffsetQuantity&quot;=&quot;&quot;,
			&quot;EventOffsetUnits&quot;=&quot;&quot;,
			&quot;GeneralTimingSpecification&quot;=&quot;&quot;
		})
	Components: &lt;Repeat Pattern Code (CWE)&gt; &amp; &lt;Calendar Alignment (ID)&gt; &amp; &lt;Phase Range Begin Value (NM)&gt; &amp; &lt;Phase Range End Value (NM)&gt; &amp; &lt;Period Quantity (NM)&gt; &amp; &lt;Period Units (CWE)&gt; &amp; &lt;Institution Specified Time (ID)&gt; &amp; &lt;Event (ID)&gt; &amp; &lt;Event Offset Quantity (NM)&gt; &amp; &lt;Event Offset Units (CWE)&gt; &amp; &lt;General Timing Specification (GTS)&gt;
*/
function convertRepeatPatternToJSON(element) {

	var scriptName= &apos;convertRepeatPatternToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objRepeatPattern= new Object();
		var meta = {};

		var i= 0;
	
		// Person Location -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;RepeatPatternCode&quot;;
					// meta[columnName]= child.toString();
					meta[columnName]= convertCodedWithExceptionsToJSON(child);
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;CalendarAlignment&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 2) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;PhaseRangeBeginValue&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;PhaseRangeEndValue&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;PeriodQuantity&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;PeriodUnits&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;InstitutionSpecifiedTime&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 7) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Event&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 8) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;EventOffsetQuantity&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 9) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;EventOffsetUnits&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 10) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;GeneralTimingSpecification&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objRepeatPattern= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objRepeatPattern); 
		}
		
		return objRepeatPattern;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>3ad0a3bf-2d63-4d12-afc1-47e53ed22771</id>
                <name>convertSpecimenSourceToJSON</name>
                <revision>4</revision>
                <lastModified>
                  <time>1694379477052</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Specimen Source (SPS) data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) for Specimen Source SPS element
	@return {object} objSpecimenSource JSON - this contains the HL7 Specimen Source SPS element into a single objSpecimenSource JSON object.
	@created:  2022-12-30 JER
	(e.g. 
		{ &quot;SpecimenSource&quot; {
			&quot;SpecimenSourceNameorCode&quot;=&quot;&quot;, (CWE)
			&quot;Additives&quot;=&quot;&quot;, (CWE)
			&quot;SpecimenCollectionMethod&quot;=&quot;&quot;, (TX)
			&quot;BodySize&quot;=&quot;&quot;, (CWE)
			&quot;SiteModifier&quot;=&quot;&quot;, (CWE)
			&quot;CollectionMethodModifierCode&quot;=&quot;&quot;, (CWE)
			&quot;SpecimenRole&quot;=&quot;&quot; (CWE)
		})
	Components: &lt;SpecimenSourceNameorCode (CWE)&gt; &amp; &lt;Additives (CWE)&gt; &amp; &lt;SpecimenCollectionMethod (TX)&gt; &amp; &lt;BodySize (CWE)&gt; &amp; &lt;SiteModifier (CWE)&gt; &amp; &lt;CollectionMethodModifierCode (CWE)&gt; &amp; &lt;SpecimenRole (CWE)&gt;

*/
function convertSpecimenSourceToJSON(element) {

	var scriptName= &apos;convertSpecimenSourceToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objSpecimenSource= new Object();
		var meta = {};

		var i= 0;
	
		// Specimen Source  -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				// Specimen Source Code or Name (CWE)
				if(child.toString().length&gt; 0) {
					var columnName= &quot;SpecimenSourceCode&quot;;
					// call convertCodedWithExceptionsToJSON
					meta[columnName]= convertCodedWithExceptionsToJSON(child.toString());
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+convertCodedWithExceptionsToJSON(child.toString())); }
				}
			}
			if(i== 1) {
				// Additives (CWE)
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Additives&quot;;
					// call convertCodedWithExceptionsToJSON
					meta[columnName]= convertCodedWithExceptionsToJSON(child.toString());
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+convertCodedWithExceptionsToJSON(child.toString())); }
				}
			}	
			if(i== 2) {
				// Specimen Collection Method (TX)
				if(child.toString().length&gt; 0) {
					var columnName= &quot;SpecimenCollectionMethod&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 3) {
				if(child.toString().length&gt; 0) {
					// Body Site (CWE)
					var columnName= &quot;BodySite&quot;;
					// call convertCodedWithExceptionsToJSON
					meta[columnName]= convertCodedWithExceptionsToJSON(child.toString());
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+convertCodedWithExceptionsToJSON(child.toString())); }
					
				}
			}
			if(i== 4) {
				if(child.toString().length&gt; 0) {
					// Site Modifier (CWE)
					var columnName= &quot;SiteModifier&quot;;
					// call convertCodedWithExceptionsToJSON
					meta[columnName]= convertCodedWithExceptionsToJSON(child.toString());
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+convertCodedWithExceptionsToJSON(child.toString())); }
					
				}
			}
			if(i== 5) {
				if(child.toString().length&gt; 0) {
					// Collection Method Modifier Code (CWE)
					var columnName= &quot;CollectionMethodModifierCode&quot;;
					// call convertCodedWithExceptionsToJSON
					meta[columnName]= convertCodedWithExceptionsToJSON(child.toString());
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+convertCodedWithExceptionsToJSON(child.toString())); }
					
				}
			}
			if(i== 6) {
				if(child.toString().length&gt; 0) {
					// Specimen Role (CWE)
					var columnName= &quot;SpecimenRole&quot;;
					// call convertCodedWithExceptionsToJSON
					meta[columnName]= convertCodedWithExceptionsToJSON(child.toString());
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+convertCodedWithExceptionsToJSON(child.toString())); }
					
				}
			}
			i++;
		} // end if  

		objSpecimenSource= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objSpecimenSource); 
		}
		
		return objSpecimenSource;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5b278cf9-4a13-499d-9db7-485f8c0001a1</id>
                <name>convertStreetAddressToJSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1689981400347</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Street Address (SAD) data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 element (string) (e.g. 348 W Duarte road&amp;Duarte&amp;348)
	@return {object} objAddress- this contains the HL7 Street Address (SAD) element into a single objAddress JSON object.
	(e.g. 
	{ Address {
		&quot;Street or Mailing Address&quot;=&quot;348 W Duarte road&quot;,
		&quot;Street Name&quot;=&quot;Duarte&quot;,
		&quot;Dwelling Number&quot;=&quot;348&quot;
	})
**/
function convertStreetAddressToJSON(element) {

	var scriptName= &apos;convertStreetAddressToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objStreetAddress= new Object();
		var meta = {};

		// evaluate List
		var lstStreetAddress= element.toString().toUpperCase().split(&quot;^&quot;);
		
		// Entity Identity Identifier -&gt; @DataModel
		for(i= 0;i&lt;lstStreetAddress.length;i++) {
			var subElement= lstStreetAddress[i].toString();
			
			//  PID-11.1.1 Street Or Mailing Address (ST)
			if(i== 0) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;StreetOrMailingAddress&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
				}
			}

			//  PID-11.1.2 Street Name (ST)
			if(i== 0) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;StreetName&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
				}
			}
			
			//  PID-11.1.3 Dwelling Number (ST)
			if(i== 0) {
				if(subElement.toString().length&gt; 0) {
					var columnName= &quot;DwellingNumber&quot;;
					meta[columnName]= subElement.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+columnValue); }
				}
			}

		} // end for 
		
		objStreetAddress= JSON.stringify(meta); // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objStreetAddress: &apos;+objStreetAddress); 
		} // end if 
		
		return objStreetAddress;
	} // end if 
	
} // end function </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>3ca8d7ec-6b08-4a29-b2ef-c187a7b3e495</id>
                <name>convertTimestampToJSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911273674</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc: This function retrieves HL7v2 HAPI formatted Timestamp (TS) to JSON data element values converted into JSON object for reference

	@param {String} element- this contains the raw HL7 Timestamp (TS) element (string) (e.g. 20140410094429^20140410214429.3+000)
	elementName - this contains the label or element name to be added to the JSON object
	@return {object} objTimestamp - this contains the HL7 Timestamp (TS) with percision into a single objTimestamp JSON object.
	(e.g. 
		{ &quot;Date/Time of Transaction&quot; {
			&quot;Time&quot;=&quot;20140410094429&quot;,
			&quot;Degree of Precision&quot;=&quot;20140410214429.3+000&quot;
		})
*/
function convertTimestampToJSON(element) {

	var scriptName= &apos;convertTimestampToJSON&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG element: &apos;+element.toString()); }
	
	// define variables
	if (typeof(element.toString()) !== undefined) {

		var objTimestamp= new Object();
		var meta = {};

		var i= 0;
	
		// Timestamp with Degree of Precision -&gt; @DataModel
		for each (child in element.children()) {
			
			if(i== 0) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Time&quot;;
					meta[columnName]= child.toString();
					
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			if(i== 1) {
				if(child.toString().length&gt; 0) {
					var columnName= &quot;Degree of Precision&quot;;
					meta[columnName]= child.toString();
				
					if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG meta[&quot;+columnName+&quot;] value: &quot;+child.toString()); }
				}
			}
			i++;
		} // end if  

		objTimestamp= meta; // convert to JSON
		if(debug&gt;0) { 
			logger.error(scriptName+&quot;::DEBUG meta: &quot;+JSON.stringify(meta));
			logger.error(scriptName+&apos;::DEBUG objIdentifier: &apos;+objTimestamp);
		}
		
		return objTimestamp;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6a03a975-7cff-46a4-b41b-2dd6107d8f20</id>
                <name>hl7_get_patient_identifier</name>
                <revision>2</revision>
                <lastModified>
                  <time>1669746065076</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc:  this JS code template is to parse HL7v2 message PID segment the PID.3 patient identifier element and return a Javascript Array object contain PID.3.1, PID.3.4 and PID.3.5
	
	Filename: hl7_get_patient_identifier
	@param {String} pid object - This will contains the XML representation of the HL7v2 PID segment desired PID identifier element for the patient identifier (e.g. PID-2, PID-3, PID-4)
	@return {String} return - Return an array of patient identifier object containing the patient identifier (PID-3.1), patient identifier domain (PID-3.4), and patient identifier assigning authority (PID-3.5)
	E.G.   
		&lt;PID.3&gt;&lt;PID.3.1&gt;1112223233&lt;/PID.3.1&gt;&lt;PID.3.2&gt;&lt;/PID.3.2&gt;&lt;PID.3.3&gt;&lt;/PID.3.3&gt;&lt;PID.3.4&gt;BJC&lt;/PID.3.4&gt;&lt;PID.3.5&gt;2.16.840.35553.312.331.1112223233&lt;/PID.3.5&gt;&lt;/PID.3&gt;
		&lt;PID.3&gt;&lt;PID.3.1&gt;99823204&lt;/PID.3.1&gt;&lt;PID.3.2&gt;&lt;/PID.3.2&gt;&lt;PID.3.3&gt;&lt;/PID.3.3&gt;&lt;PID.3.4&gt;EPIC&lt;/PID.3.4&gt;&lt;PID.3.5&gt;2.16.840.13663.23.17&lt;/PID.3.5&gt;&lt;/PID.3&gt;
	History:
	
*/
function hl7_get_patient_identifier(pid) {

	var scriptName= &apos;hl7_get_patient_identifier&apos;
	var debug= 0;
	var arrPatientIdentifiers= new Array();
	
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pid typeof: &apos;+typeof(pid)+&apos; length: &apos;+pid.length()+&apos; pid identifier: &apos;+pid); } 
	
	for(var i= 0;i&lt;pid.length();i++) {
		
		var objPatientIdentifier= new Object();
		objPatientIdentifier.patientIdentifier= pid[i][&apos;PID.3.1&apos;].toString();
		objPatientIdentifier.patientIdentifierDomain= pid[i][&apos;PID.3.4&apos;].toString();
		objPatientIdentifier.identifierTypeCode= pid[i][&apos;PID.3.5&apos;].toString();
	
		if(debug&gt;0) { 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pid[&apos;+i+&apos;] typeof: &apos;+typeof(pid[i])+&apos; length: &apos;+pid[i].length+&apos; pid identifier: &apos;+pid[i]); 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pid[&apos;+i+&apos;] patientIdentifier: &apos;+objPatientIdentifier.patientIdentifier); 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pid[&apos;+i+&apos;] patientIdentifierDomain: &apos;+objPatientIdentifier.patientIdentifierDomain); 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pid[&apos;+i+&apos;] identifierTypeCode: &apos;+objPatientIdentifier.identifierTypeCode); 			
		} 
		
		arrPatientIdentifiers.push(objPatientIdentifier);
	} // end for
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; return arrPatientIdentifiers: &apos;+JSON.stringify(arrPatientIdentifiers)); }
	
	return arrPatientIdentifiers;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>e44a9587-5cf2-42d5-98ff-2ed41a1528e9</id>
                <name>json_dg1_diagnosis</name>
                <revision>3</revision>
                <lastModified>
                  <time>1694378426486</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc:  this JS code template is to parse HL7v2 message DG1 segment and return a Javascript object
	
	Filename: json_dg1_diagnosis.js
	@param {String} orc - This will contains the XML representation of the HL7v2 DG1 egment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 DG1 segment
	History:
	2023-09-09 JER - Created mirroring the json_patient_allergy code template as DG1 has similiar limited content provided from QS1 Pharmacy system as AL1 segment
*/
function json_dg1_diagnosis(dg1) {

	var scriptName= &apos;json_dg1_diagnosis&apos;;
	var debug= 0;

	var objDiagnosis= {};
	
	// DG1.1 - set Id
	if(dg1[&apos;DG1.1&apos;].toString().length&gt;0) objDiagnosis.setId= dg1[&apos;DG1.1&apos;][&apos;DG1.1.1&apos;].toString();

	// DG1.2 - Diagnosis Coding Method
	if(dg1[&apos;DG1.2&apos;].toString().length&gt;0) objDiagnosis.diagnosisCodingMethod= dg1[&apos;DG1.2&apos;][&apos;DG1.2.1&apos;].toString();
	
	// DG1.3 - Diagnosis Code (identifier(ST)^text(ST)^name of codeSystem(ID)^alternate Id(ST)^alternate text(ST)^name of alternate codeSystem(ID) )
	if(dg1[&apos;DG1.3&apos;].toString().length&gt;0) objDiagnosis.diagnosisCode= convertCodedElementToJSON(dg1[&apos;DG1.3&apos;]);
	
	// DG1.4 - Diagnosis Description (ST)
	if(dg1[&apos;DG1.4&apos;].toString().length&gt;0) objDiagnosis.diagnosisDescription= dg1[&apos;DG1.4&apos;][&apos;DG1.4.1&apos;].toString();
	
	// DG1.5 - Diagnosis Date/Time (TS)
	if(dg1[&apos;DG1.5&apos;].toString().length&gt;0) objDiagnosis.diagnosisDateTime= dg1[&apos;DG1.5&apos;][&apos;DG1.5.1&apos;].toString();
	
	// DG1.6 - Diagnosis Type (IS)
	if(dg1[&apos;DG1.6&apos;].toString().length&gt;0) objDiagnosis.diagnosisType= dg1[&apos;DG1.6&apos;].toString();
	
	// DG1.7 - Major Diagnosis Category (identifier(ST)^text(ST)^name of codeSystem(ID)^alternate Id(ST)^alternate text(ST)^name of alternate codeSystem(ID) )
	if(dg1[&apos;DG1.7&apos;].toString().length&gt;0) objDiagnosis.majorDiagnosisCategory= convertCodedElementToJSON(dg1[&apos;DG1.7&apos;]);
	
	// DG1.8 - Diagnosis Related Group (identifier(ST)^text(ST)^name of codeSystem(ID)^alternate Id(ST)^alternate text(ST)^name of alternate codeSystem(ID) )
	if(dg1[&apos;DG1.8&apos;].toString().length&gt;0) objDiagnosis.diagnosisRelatedGroup= convertCodedElementToJSON(dg1[&apos;DG1.8&apos;]);
	
	// DG1.9 - DRG Approval Indicator (ID)
	if(dg1[&apos;DG1.9&apos;].toString().length&gt;0) objDiagnosis.drgApprovalIndicator= dg1[&apos;DG1.9&apos;].toString();
	
	// DG1.10 - DRG Grouper Review Code (IS)
	if(dg1[&apos;DG1.10&apos;].toString().length&gt;0) objDiagnosis.drgGrouperReviewCode= dg1[&apos;DG1.10&apos;].toString();
	
	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objDiagnosis= &apos;+objDiagnosis);
		logger.error(scriptName+&apos;:DEBUG:: stringify(objDiagnosis)= &apos;+JSON.stringify(objDiagnosis));
	}
	
	channelMap.put(&apos;Diagnosis&apos;,JSON.stringify(objDiagnosis));
	return objDiagnosis;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ba484bc7-89c7-4ef6-bb85-5ebc30a44b43</id>
                <name>json_in1_insurance</name>
                <revision>2</revision>
                <lastModified>
                  <time>1694390963657</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc:  this JS code template is to parse HL7v2 message IN1 segment and return a Javascript object
	
	Filename: json_in1_insurance.js
	@param {String} orc - This will contains the XML representation of the HL7v2 IN1 egment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 IN1 segment
	History:
	2023-09-09 JER - Created mirroring the json_dg1_diagnosis code template as IN1 has similiar limited content provided from QS1 Pharmacy system as IN1 segment
*/
function json_in1_insurance(in1) {

	var scriptName= &apos;json_in1_insurance&apos;;
	var debug= 0;

	var objInsurance= {};
	
	// IN1.1 - set Id (SI)
	if(in1[&apos;IN1.1&apos;].toString().length&gt;0) objInsurance.setId= in1[&apos;IN1.1&apos;][&apos;IN1.1.1&apos;].toString();

	// IN1.2 - Insurance Plan Id (CE)
	if(in1[&apos;IN1.2&apos;].toString().length&gt;0) objInsurance.insurancePlanId= convertCodedElementToJSON(in1[&apos;IN1.2&apos;]);
	
	// IN1.3 - Insurance Company Id (CX)
	if(in1[&apos;IN1.3&apos;].toString().length&gt;0) objInsurance.insuranceCompanyId= convertExtendedCompositeIDWithCheckDigitToJSON(in1[&apos;IN1.3&apos;]);
	
	// IN1.4 - Insurance Company Name (XCN)
	if(in1[&apos;IN1.4&apos;].toString().length&gt;0) objInsurance.insuranceCompanyName= convertExtendedCompositeIDNumberAndNameToJSON(in1[&apos;IN1.4&apos;]);
	
	// IN1.5 - Insurance Company Address (XAD)
	if(in1[&apos;IN1.5&apos;].toString().length&gt;0) objInsurance.insuranceCompanyAddress= convertExtendedAddressToJSON(in1[&apos;IN1.5&apos;]);
	
	// IN1.6 - Insurance Co Contact Person (XPN)
	if(in1[&apos;IN1.6&apos;].toString().length&gt;0) objInsurance.insuranceCoContactPerson= convertExtendedPersonNameToJSON(in1[&apos;IN1.6&apos;]);
	
	// IN1.7 - Insurance Co Phone Number (XTN)
	if(in1[&apos;IN1.7&apos;].toString().length&gt;0) objInsurance.insuranceCoPhoneNumber= convertExtendedTelecommunicationNumberToJSON(in1[&apos;IN1.7&apos;]);
	
	// IN1.8 - Group Number (ST)
	if(in1[&apos;IN1.8&apos;].toString().length&gt;0) objInsurance.groupNumber= in1[&apos;IN1.8&apos;][&apos;IN1.8.1&apos;].toString();
	
	// IN1.9 - Group Name (XCN)
	if(in1[&apos;IN1.9&apos;].toString().length&gt;0) objInsurance.groupName= convertExtendedCompositeIDNumberAndNameToJSON(in1[&apos;IN1.9&apos;]);
	
	// IN1.10 - Insured Group Employee ID (CX)
	if(in1[&apos;IN1.10&apos;].toString().length&gt;0) objInsurance.insuredGroupEmployeeId= convertExtendedCompositeIDWithCheckDigitToJSON(in1[&apos;IN1.10&apos;]);
	
	// IN1.11 - Insured Group Employee Name (XON)
	if(in1[&apos;IN1.11&apos;].toString().length&gt;0) objInsurance.insuredGroupEmployeeId= convertExtendedCompositeNameAndIdentificationNumberForOrganizationsToJSON(in1[&apos;IN1.11&apos;]);
	
	// IN1.12 - Plan Effective Date (DT)
	if(in1[&apos;IN1.12&apos;].toString().length&gt;0) objInsurance.planEffectiveDate= in1[&apos;IN1.12&apos;][&apos;IN1.12.1&apos;].toString();
	
	// IN1.13 - Plan Expiration Date (DT)
	if(in1[&apos;IN1.13&apos;].toString().length&gt;0) objInsurance.planExpirationDate= in1[&apos;IN1.13&apos;][&apos;IN1.13.1&apos;].toString();
	
	// IN1.17 - Insured Relationship to Patient (CE)
	if(in1[&apos;IN1.17&apos;].toString().length&gt;0) objInsurance.insuredRelationshipToPatient= in1[&apos;IN1.17&apos;][&apos;IN1.17.1&apos;].toString();
	
	// IN1.20 - Assignment of Benefits (IS)
	if(in1[&apos;IN1.20&apos;].toString().length&gt;0) objInsurance.assignmentOfBenefits= in1[&apos;IN1.20&apos;][&apos;IN1.20.1&apos;].toString();
	
	// IN1.22 - Coordination of Benefit Priority (ST)
	if(in1[&apos;IN1.22&apos;].toString().length&gt;0) objInsurance.benefitPriority= in1[&apos;IN1.22&apos;][&apos;IN1.22.1&apos;].toString();
	
	// IN1.36 - Policy Number (ST)
	if(in1[&apos;IN1.22&apos;].toString().length&gt;0) objInsurance.policyNumber= in1[&apos;IN1.36&apos;][&apos;IN1.36.1&apos;].toString();
	
	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objInsurance= &apos;+objInsurance);
		logger.error(scriptName+&apos;:DEBUG:: stringify(objInsurance)= &apos;+JSON.stringify(objInsurance));
	}
	
	channelMap.put(&apos;Diagnosis&apos;,JSON.stringify(objInsurance));
	return objInsurance;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7c6d63d8-bf55-4204-b727-6aaa157c962d</id>
                <name>json_mrg_patient</name>
                <revision>3</revision>
                <lastModified>
                  <time>1657634910685</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc:  this JS code template is to parse HL7v2 MRG segment and return a Javascript object

	@param {String} mrg - This will contains the XML representation of the HL7v2 MRG segment
	
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 MRG segment
	History:
	2022-02-28 jer - Modified to include the MRG-7.1 lastName and MRG-7.2 firstName properties to merge object
	
*/
function json_mrg_patient(mrg) {

	var scriptName= &apos;json_mrg_patient&apos;;
	/*
	logger.error(scriptName+&apos;:DEBUG:: mrg= &apos;+mrg);
	*/
	var mergePatient= {};
	
	for each(mrg1 in mrg[&apos;MRG.1&apos;]) {
			
		var pidNum = mrg1[&apos;MRG.1.1&apos;].toString();
		var entity = mrg1[&apos;MRG.1.4&apos;].toString();
		// 2022-02-22 jer - verify if PID.3.5 exists if not is undefined
		if(mrg1[&apos;MRG.1.5&apos;].toString().length&gt;0) {
			var IDCode = mrg1[&apos;MRG.1.5&apos;].toString();
		}
			
		//logger.error(scriptName+&apos;:DEBUG:: typeof(IDCode)= &apos;+typeof(IDCode));

		// 2022-02-22 jer - verify if undefined or defined with value of MRN
		if((typeof(IDCode)== &apos;undefined&apos;) || (IDCode.indexOf(&apos;MRN&apos;)&gt;-1)) {
			if(entity != null) {
				mergePatient.mrn= pidNum;
				mergePatient.mrnDomain= entity;
			}
		}
		else if (IDCode.indexOf(&quot;MR&quot;)&gt;-1) {
			if(entity != null) {
				mergePatient.mpi= pidNum;
				mergePatient.mpiDomain= entity;
			}
		}
	}

	// 2022-02-28 jer - Modified to include the MRG-7.1 lastName and MRG-7.2 firstName properties to merge object
	mergePatient.firstName= 	mrg[&apos;MRG.7&apos;][&apos;MRG.7.2&apos;].toString();
	mergePatient.middleName= mrg[&apos;MRG.7&apos;][&apos;MRG.7.3&apos;].toString();
	mergePatient.lastName= 	mrg[&apos;MRG.7&apos;][&apos;MRG.7.1&apos;].toString();
		
	// logger.error(scriptName+&apos;:DEBUG:: mergePatient= &apos;+JSON.stringify(mergePatient));
	return mergePatient;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>be99b75f-95fa-4cb3-9ed8-982d2a573878</id>
                <name>json_msh_header</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911274231</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc:  this JS code template is to parse HL7v2 MSH header segment and return a Javascript object

	@param {String} msh - This will contains the XML representation of the HL7v2 MSH header segment
	@param {String} patient - This will contains the XML representation of the Javascript patient object
	
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 MSH segment
	History:
**/
function json_msh_header(msh) {

	var scriptName= &apos;json_msh_header&apos;;
	var debug= 0;
	if(debug&gt;0) { logger.error(scriptName+&apos;:DEBUG:: msh= &apos;+msh); }

	var header= {};

	header.sendingApplication= 		msh[&apos;MSH.3&apos;][&apos;MSH.3.1&apos;].toString();
	header.sendingFacility= 			msh[&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString();
	header.receivingApplication= 		msh[&apos;MSH.5&apos;][&apos;MSH.5.1&apos;].toString();
	header.receivingFacility= 		msh[&apos;MSH.6&apos;][&apos;MSH.6.1&apos;].toString();
	header.messageDateTime=			msh[&apos;MSH.7&apos;][&apos;MSH.7.1&apos;].toString();
	header.messageType= 			msh[&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString();
	header.eventType= 				msh[&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();
	header.messageControlId=			msh[&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
	header.processingId=			msh[&apos;MSH.11&apos;][&apos;MSH.11.1&apos;].toString();
	header.versionId=				msh[&apos;MSH.12&apos;][&apos;MSH.12.1&apos;].toString();

	if(debug&gt;0) { logger.error(scriptName+&apos;:DEBUG:: header= &apos;+JSON.stringify(header)); }
	return header;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4acd1786-cc12-4432-9c61-085fcd057109</id>
                <name>json_obr_observation_request</name>
                <revision>4</revision>
                <lastModified>
                  <time>1672850688701</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc:  this JS code template is to parse HL7v2 message OBR segment and return a Javascript object
	
	Filename: json_obr_observation_request.js
	@param {String} obr - This will contains the XML representation of the HL7v2 OBR segment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 OBR segment
	History:
	2023-01-04 JER - Modified to evaluate the OBR.2.1 field to determine the type of order as order_type
	
*/
function json_obr_observation_request(obr) {

	var scriptName= &apos;json_obr_observation_request&apos;;
	var debug= 0;
	/*
	logger.error(scriptName+&apos;:DEBUG:: obr= &apos;+obr);;
	*/
	var objObservationRequest= {};
	
	// OBR.1 - set Id (ID)
	// if(obr[&apos;OBR.1&apos;].toString().length&gt;0) objObservationRequest.setId= convertTimingQuantityToJSON(obr[&apos;OBX.1&apos;]);
	if(obr[&apos;OBR.1&apos;].toString().length&gt;0) objObservationRequest.setId= obr[&apos;OBR.1&apos;][&apos;OBR.1.1&apos;].toString();

	// OBR.2 - Placer Order Number (EI)
	// if(obr[&apos;OBR.2&apos;].toString().length&gt;0) objObservationRequest.placerOrderNumber= convertCodedElementToJSON(obr[&apos;OBR.2&apos;]);
	if(obr[&apos;OBR.2&apos;].toString().length&gt;0) objObservationRequest.placerOrderNumber= convertEntityIdentifierToJSON(obr[&apos;OBR.2&apos;]);

	// 2023-01-04 JER - Modified to evaluate the OBR.2.1 field to determine the type of order as order_type
	if(obr[&apos;OBR.2&apos;][&apos;OBR.2.1&apos;].toString()== &apos;RAD&apos;) {
		objObservationRequest.orderType= &apos;Radiology&apos;;
	} else if(obr[&apos;OBR.2&apos;][&apos;OBR.2.1&apos;].toString()== &apos;LAB&apos;) {
		objObservationRequest.orderType= &apos;Laboratory&apos;	
	} else if(obr[&apos;OBR.2&apos;][&apos;OBR.2.1&apos;].toString()== &apos;LAB-SPM&apos;) {
		objObservationRequest.orderType= &apos;Laboratory-Specimen&apos;;
	} else {
		objObservationRequest.orderType= &apos;Common Order&apos;;
	}
	
	// OBR.3 - Filler Order Number (EI)
	// CE - Observation Identifier (identifier^text^name of codeSystem^alternate Id^alternate text^name of alternate codeSystem)
	if(obr[&apos;OBR.3&apos;].toString().length&gt;0) objObservationRequest.fillerOrderNumber= convertEntityIdentifierToJSON(obr[&apos;OBR.3&apos;]);
	
	// OBR.4 - Universal Order Service Identifier (CE)
	if(obr[&apos;OBR.4&apos;].toString().length&gt;0) objObservationRequest.orderServiceIdentifier= convertCodedElementToJSON(obr[&apos;OBR.4&apos;]);
	
	// OBR.5 - Priority (ID)
	if(obr[&apos;OBR.5&apos;].toString().length&gt;0) objObservationRequest.priorityIdentifier= obr[&apos;OBR.5&apos;][&apos;OBR.5.1&apos;].toString();
	
	// OBR.6 - Requested DateTime (TS)
	if(obr[&apos;OBR.6&apos;].toString().length&gt;0) objObservationRequest.requestedDateTime= convertTimestampToJSON(obr[&apos;OBR.6&apos;]);
	
	// OBR.7 - Observed DateTime (TS)
	if(obr[&apos;OBR.7&apos;].toString().length&gt;0) objObservationRequest.observedDateTime= convertTimestampToJSON(obr[&apos;OBR.7&apos;]);
	
	// OBR.8 - Observed End DateTime (TS)
	if(obr[&apos;OBR.8&apos;].toString().length&gt;0) objObservationRequest.observedEndDateTime= convertTimestampToJSON(obr[&apos;OBR.8&apos;]);
	
	// OBR.9 - Collection Volume (CQ)
	if(obr[&apos;OBR.9&apos;].toString().length&gt;0) objObservationRequest.collectionVolume= convertCompositeQuantityWithUnitsToJSON(obr[&apos;OBR.9&apos;]);
	
	// OBR.10 - Collector Identifier (XCN)
	if(obr[&apos;OBR.10&apos;].toString().length&gt;0) objObservationRequest.collectorIdentifier= convertExtendedCompositeIDNumberAndNameToJSON(obr[&apos;OBR.10&apos;]);
	
	// OBR.11 - Specimen Action Code (ID)
	if(obr[&apos;OBR.11&apos;].toString().length&gt;0) objObservationRequest.specimenActionCode= obr[&apos;OBR.11&apos;][&apos;OBR.11.1&apos;].toString();
	
	// OBR.12 - Danger Code (CE)
	if(obr[&apos;OBR.12&apos;].toString().length&gt;0) objObservationRequest.dangerCode= convertCodedElementToJSON(obr[&apos;OBR.12&apos;]);
	
	// OBR.13 - Relevant Clinical Information (ST)
	if(obr[&apos;OBR.13&apos;].toString().length&gt;0) objObservationRequest.relevantClinicalInformation= obr[&apos;OBR.13&apos;][&apos;OBR.13.1&apos;].toString();
	
	// OBR.14 - Specimen Received DateTime (TS)
	if(obr[&apos;OBR.14&apos;].toString().length&gt;0) objObservationRequest.specimenReceivedDateTime= convertTimestampToJSON(obr[&apos;OBR.14&apos;]);
	
	// OBR.15 - Specimen Source (SPS)
	if(obr[&apos;OBR.15&apos;].toString().length&gt;0) objObservationRequest.producersId= convertSpecimenSourceToJSON(obr[&apos;OBR.15&apos;]);
	
	// convertExtendedCompositeIDNumberAndNameToJSON
	// OBR.16 - Ordering Provider (XCN)
	if(obr[&apos;OBR.16&apos;].toString().length&gt;0) objObservationRequest.orderingProvider= convertExtendedCompositeIDNumberAndNameToJSON(obr[&apos;OBR.16&apos;]);
	
	// convertExtendedTelecommunicationNumberToJSON
	// OBR.17 - Order Callback Phone Number (XTN)
	if(obr[&apos;OBR.17&apos;].toString().length&gt;0) objObservationRequest.orderingProvider= convertExtendedTelecommunicationNumberToJSON(obr[&apos;OBR.17&apos;]);

	// OBR.18 - Placer Field 1 (ST)
	if(obr[&apos;OBR.18&apos;].toString().length&gt;0) objObservationRequest.placerField1= obr[&apos;OBR.18&apos;][&apos;OBR.18.1&apos;].toString();
	
	// OBR.19 - Placer Field 2 (ST)
	if(obr[&apos;OBR.19&apos;].toString().length&gt;0) objObservationRequest.placerField2= obr[&apos;OBR.19&apos;][&apos;OBR.19.1&apos;].toString();
	
	// OBR.20 - Filler Field 1 (ST)
	if(obr[&apos;OBR.20&apos;].toString().length&gt;0) objObservationRequest.fillerField1= obr[&apos;OBR.20&apos;][&apos;OBR.20.1&apos;].toString();
	
	// OBR.21 - Filler Field 2 (ST)
	if(obr[&apos;OBR.21&apos;].toString().length&gt;0) objObservationRequest.fillerField2= obr[&apos;OBR.21&apos;][&apos;OBR.21.1&apos;].toString();
	
	// OBR.22 - Results Report Status Change DateTime (TS)
	if(obr[&apos;OBR.22&apos;].toString().length&gt;0) objObservationRequest.resultsReportStatusChange= convertTimestampToJSON(obr[&apos;OBR.22&apos;]);
	
	// OBR.25 - Result Status (ID)
	if(obr[&apos;OBR.25&apos;].toString().length&gt;0) objObservationRequest.resultStatus= obr[&apos;OBR.25&apos;][&apos;OBR.25.1&apos;].toString();
	
	// OBR.27 - Quantity/Timing (TQ)
	// convertQuantityTimingToJSON
	if(obr[&apos;OBR.27&apos;].toString().length&gt;0) objObservationRequest.quantityTiming= convertQuantityTimingToJSON(obr[&apos;OBR.27&apos;]);
	
	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objObservationRequest= &apos;+objObservationRequest);
		logger.error(scriptName+&apos;:DEBUG:: observationRequest= &apos;+JSON.stringify(objObservationRequest));
	}
	
	channelMap.put(&apos;observationRequest&apos;,JSON.stringify(objObservationRequest));
	return objObservationRequest;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>90f2b4d7-4691-49ca-854c-70b8da39b589</id>
                <name>json_obx_observation_result</name>
                <revision>4</revision>
                <lastModified>
                  <time>1672759028368</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc:  this JS code template is to parse HL7v2 message OBX segment and return a Javascript object
	
	Filename: json_obx_observation_result.js
	@param {String} orc - This will contains the XML representation of the HL7v2 OBX segment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 OBX segment
	History:
	2022-12-27 JER - Modified function name from json_obx_observation to json_obx_observation_result
*/
function json_obx_observation_result(obx) {

	var scriptName= &apos;json_obx_observation_result&apos;;
	var debug= 0;
	/*
	logger.error(scriptName+&apos;:DEBUG:: obx= &apos;+obx);;
	*/
	var objObservation= {};
	
	// OBX.1 - set Id
	// if(obx[&apos;OBX.1&apos;].toString().length&gt;0) objObservation.setId= convertTimingQuantityToJSON(obx[&apos;OBX.1&apos;]);
	if(obx[&apos;OBX.1&apos;].toString().length&gt;0) objObservation.setId= obx[&apos;OBX.1&apos;][&apos;OBX.1.1&apos;].toString();

	// OBX.2 - Value Type
	// if(obx[&apos;OBX.2&apos;].toString().length&gt;0) objObservation.valueType= convertCodedElementToJSON(obx[&apos;OBX.2&apos;]);
	if(obx[&apos;OBX.2&apos;].toString().length&gt;0) objObservation.valueType= obx[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString();
	
	// OBX.3 - Observation Identifier (identifier^text^name of codeSystem^alternate Id^alternate text^name of alternate codeSystem)
	if(obx[&apos;OBX.3&apos;].toString().length&gt;0) objObservation.observationIdentifier= convertCodedElementToJSON(obx[&apos;OBX.3&apos;]);
	
	// OBX.4 - Observation Sub-Id
	if(obx[&apos;OBX.4&apos;].toString().length&gt;0) objObservation.observationSubId= obx[&apos;OBX.4&apos;][&apos;OBX.4.1&apos;].toString();
	
	// OBX.5 - Observation Value
	if(obx[&apos;OBX.5&apos;].toString().length&gt;0) objObservation.observationValue= obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
	
	// OBX.6 - Units
	if(obx[&apos;OBX.6&apos;].toString().length&gt;0) objObservation.units= convertCodedElementToJSON(obx[&apos;OBX.6&apos;]);
	
	// OBX.7 - References Range
	if(obx[&apos;OBX.7&apos;].toString().length&gt;0) objObservation.referencesRange= obx[&apos;OBX.7&apos;][&apos;OBX.7.1&apos;].toString();
	
	// OBX.8 - Abnormal Flags
	if(obx[&apos;OBX.8&apos;].toString().length&gt;0) objObservation.deliverToLocation= obx[&apos;OBX.8&apos;][&apos;OBX.8.1&apos;].toString();
	
	// OBX.9 - Probability
	if(obx[&apos;OBX.9&apos;].toString().length&gt;0) objObservation.probability= obx[&apos;OBX.9&apos;][&apos;OBX.9.1&apos;].toString();
	
	// OBX.10 - Nature Of Abnormal Test
	if(obx[&apos;OBX.10&apos;].toString().length&gt;0) objObservation.natureOfAbnormalTest= obx[&apos;OBX.10&apos;][&apos;OBX.10.1&apos;].toString();
	
	// OBX.11 - Observation Result Status
	if(obx[&apos;OBX.11&apos;].toString().length&gt;0) objObservation.observationResultStatus= obx[&apos;OBX.11&apos;][&apos;OBX.11.1&apos;].toString();
	
	// OBX.12 - Effective Date of Reference Range
	if(obx[&apos;OBX.12&apos;].toString().length&gt;0) objObservation.effectiveDateReferenceRange= convertTimestampToJSON(obx[&apos;OBX.12&apos;]);
	
	// OBX.13 - User Defined Access Checks
	if(obx[&apos;OBX.13&apos;].toString().length&gt;0) objObservation.userDefinedAccessChecks= obx[&apos;OBX.13&apos;][&apos;OBX.13.1&apos;].toString();
	
	// OBX.14 - Observation Date/Time
	if(obx[&apos;OBX.14&apos;].toString().length&gt;0) objObservation.observationDateTime= convertTimestampToJSON(obx[&apos;OBX.14&apos;]);
	
	// OBX.15 - Producers Id (CE)
	if(obx[&apos;OBX.15&apos;].toString().length&gt;0) objObservation.producersId= convertCodedElementToJSON(obx[&apos;OBX.15&apos;]);
	
	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objObservation= &apos;+objObservation);
		logger.error(scriptName+&apos;:DEBUG:: commonOrder= &apos;+JSON.stringify(objObservation));
	}
	
	// channelMap.put(&apos;PharmacyEncodedOrder&apos;,JSON.stringify(objObservation));
	return objObservation;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>face095c-44fa-4f83-8492-5a3e9d0a6f16</id>
                <name>json_orc_common_order</name>
                <revision>8</revision>
                <lastModified>
                  <time>1675451690021</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc:  this JS code template is to parse HL7v2 ORC segment and return a Javascript object

	@param {String} orc - This will contains the XML representation of the HL7v2 ORC segment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 ORC segment
	History:
	2023-02-01 jer - Modified from calling convertCompositeQuantityWithUnitsToJSON to convertCompositeQuantityTimingToJSON() function
	2023-01-20 JER - Modified to evaluate the provided order control codes to align with a description value
	2023-01-02 JER - Added enterersLocation orc[ORC.13]
	2022-12-31 jer - Modified the declaration of orderStatus from orc[&apos;ORC.5&apos;] to orc[&apos;ORC.5&apos;][&apos;ORC.5.1&apos;]
	2022-04-07 jer - Created from json_pv1_visit(pv1) method to populate visit centric content
*/
function json_orc_common_order(orc) {

	var scriptName= &apos;json_orc_common_order&apos;;
	var debug= 0;
	/*
	logger.error(scriptName+&apos;:DEBUG:: orc= &apos;+orc);;
	*/
	var objCommonOrder= {};
	
	/* 2023-01-20 JER - Modified to evaluate the provided order control codes to align with a description value */
	if(orc[&apos;ORC.1&apos;].toString().length&gt;0) {
		var orderControl= orc[&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString();
		
		switch (orderControl) {
  			case &apos;CA&apos;:
    				var strOrderControl= &apos;CANCELLED&apos;;
    				break;
  			case &apos;DC&apos;:
  				var strOrderControl= &apos;DISCONTINUED&apos;;
  				break;
  			case &apos;DR&apos;:
    				var strOrderControl= &apos;DISCONTINUED&apos;;
  				break;
  			case &apos;NW&apos;:
    				var strOrderControl= &apos;NEW&apos;;
  				break;
  			case &apos;OC&apos;:
    				var strOrderControl= &apos;CANCELLED&apos;;
  				break;
  			case &apos;OD&apos;:
    				var strOrderControl= &apos;DISCONTINUED&apos;;
  				break;
  			case &apos;RF&apos;:
    				var strOrderControl= &apos;REFILL&apos;;
  				break;
  			case &apos;RO&apos;:
    				var strOrderControl= &apos;REPLACEMENT&apos;;
  				break;
  			case &apos;XO&apos;:
    				var strOrderControl= &apos;MODIFIED&apos;;
  				break;
  			default:
    				var strOrderControl= &apos;MODIFIED&apos;;
    				break;
		}
		objCommonOrder.orderControl= strOrderControl;
	} else {
		objCommonOrder.orderControl= &apos;MODIFIED&apos;;
	}
	if(orc[&apos;ORC.2&apos;].toString().length&gt;0) objCommonOrder.placerOrderNumber= convertEntityIdentifierToJSON(orc[&apos;ORC.2&apos;]);
	if(orc[&apos;ORC.3&apos;].toString().length&gt;0) objCommonOrder.fillerOrderNumber= convertEntityIdentifierToJSON(orc[&apos;ORC.3&apos;]);
	if(orc[&apos;ORC.4&apos;].toString().length&gt;0) objCommonOrder.placerGroupNumber= convertEntityIdentifierToJSON(orc[&apos;ORC.4&apos;]);
	// 2022-12-31 jer - Modified the declaration of orderStatus from orc[&apos;ORC.5&apos;] to orc[&apos;ORC.5&apos;][&apos;ORC.5.1&apos;]
	if(orc[&apos;ORC.5&apos;].toString().length&gt;0) objCommonOrder.orderStatus= orc[&apos;ORC.5&apos;][&apos;ORC.5.1&apos;].toString();
	if(orc[&apos;ORC.6&apos;].toString().length&gt;0) objCommonOrder.responseFlag= orc[&apos;ORC.6&apos;].toString();

	// 2023-02-01 jer - Modified from calling convertCompositeQuantityWithUnitsToJSON to convertCompositeQuantityTimingToJSON() function
	// 2022-04-07 jer - Added convertCompositeQuantityWithUnitsToJSON code template
	// if(orc[&apos;ORC.7&apos;].toString().length&gt;0) objCommonOrder.quantityTiming= convertCompositeQuantityWithUnitsToJSON(orc[&apos;ORC.7&apos;]);
	if(orc[&apos;ORC.7&apos;].toString().length&gt;0) objCommonOrder.quantityTiming=  convertCompositeQuantityTimingToJSON(orc[&apos;ORC.7&apos;]);
	
	if(orc[&apos;ORC.8&apos;].toString().length&gt;0) {
		var objParentOrder= {};
		for(i= 0;i&lt;orc[&apos;ORC.8&apos;].children().length;i++) {
			if (i== 0) {
				var placerAssignedIdentifier= convertEntityIdentifierToJSON(orc[&apos;ORC.8&apos;][&apos;ORC.8.1&apos;]);
				objParentOrder.placedAssignedIdentifier= placerAssignedIdentifier;	
			}
			if (i== 1) {
				var fillerAssignedIdentifier= convertEntityIdentifierToJSON(orc[&apos;ORC.8&apos;][&apos;ORC.8.2&apos;]);
				objParentOrder.fillerAssignedIdentifier= fillerAssignedIdentifier;	
			}
		}
		objCommonOrder.parentOrder= JSON.stringify(objParentOrder);
	}
	if(orc[&apos;ORC.9&apos;].toString().length&gt;0)  objCommonOrder.dateTimeOfTransaction= convertTimestampToJSON(orc[&apos;ORC.9&apos;]);
	if(orc[&apos;ORC.10&apos;].toString().length&gt;0) objCommonOrder.enteredBy= convertExtendedCompositeIDNumberAndNameToJSON(orc[&apos;ORC.10&apos;]);
	if(orc[&apos;ORC.11&apos;].toString().length&gt;0) objCommonOrder.verifiedBy= convertExtendedCompositeIDNumberAndNameToJSON(orc[&apos;ORC.11&apos;]);
	if(orc[&apos;ORC.12&apos;].toString().length&gt;0) objCommonOrder.orderingProvider= convertExtendedCompositeIDNumberAndNameToJSON(orc[&apos;ORC.12&apos;]);
	// 2023-01-02 JER - Added enterersLocation orc[ORC.13]
	if(orc[&apos;ORC.13&apos;].toString().length&gt;0) objCommonOrder.enterersLocation= convertPersonLocationToJSON(orc[&apos;ORC.13&apos;]);
	if(orc[&apos;ORC.15&apos;].toString().length&gt;0) objCommonOrder.orderedEffectiveDateTime= convertTimestampToJSON(orc[&apos;ORC.15&apos;]);
	
	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objCommonOrder= &apos;+objCommonOrder);
		logger.error(scriptName+&apos;:DEBUG:: commonOrder= &apos;+JSON.stringify(objCommonOrder));
	}
	
	channelMap.put(&apos;commonOrder&apos;,JSON.stringify(objCommonOrder));
	return objCommonOrder;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4841091d-7809-4f22-a722-2b90d6023fa7</id>
                <name>json_patient_allergy</name>
                <revision>3</revision>
                <lastModified>
                  <time>1694302179456</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc:  this JS code template is to parse HL7v2 message AL1 segment and return a Javascript object
	
	Filename: json_patient_allergy.js
	@param {String} orc - This will contains the XML representation of the HL7v2 AL1 segment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 AL1 segment
	History:
	
*/
function json_patient_allergy(al1) {

	var scriptName= &apos;json_patient_allergy&apos;;
	var debug= 0;
	/*
	logger.error(scriptName+&apos;:DEBUG:: al1= &apos;+al1);;
	*/
	var objAllergy= {};
	
	// AL1.1 - set Id
	if(al1[&apos;AL1.1&apos;].toString().length&gt;0) objAllergy.setId= al1[&apos;AL1.1&apos;][&apos;AL1.1.1&apos;].toString();

	// AL1.2 - Type Code
	// if(al1[&apos;AL1.2&apos;].toString().length&gt;0) objAllergy.valueType= convertCodedElementToJSON(al1[&apos;AL1.2&apos;]);
	if(al1[&apos;AL1.2&apos;].toString().length&gt;0) objAllergy.typeCode= convertCodedElementToJSON(al1[&apos;AL1.2&apos;]);
	
	// AL1.3 - Allergen Code (identifier^text^name of codeSystem^alternate Id^alternate text^name of alternate codeSystem)
	if(al1[&apos;AL1.3&apos;].toString().length&gt;0) objAllergy.allergyCode= convertCodedElementToJSON(al1[&apos;AL1.3&apos;]);
	
	// AL1.4 - Severity Code
	if(al1[&apos;AL1.4&apos;].toString().length&gt;0) objAllergy.severityCode= convertCodedElementToJSON(al1[&apos;AL1.4&apos;]);
	
	// AL1.5 - Reaction Code
	var arrReactionCode= new Array();
	for each(reaction in al1[&apos;AL1.5&apos;]) {
		arrReactionCode.push(reaction[&apos;AL1.5.1&apos;].toString());
	} // end for each
	if(al1[&apos;AL1.5&apos;].toString().length&gt;0) objAllergy.reactionCode= arrReactionCode;
	
	// AL1.6 - Identification Date
	if(al1[&apos;AL1.6&apos;].toString().length&gt;0) objAllergy.identificationDate= al1[&apos;AL1.6&apos;][&apos;AL1.6.1&apos;].toString();
	
	
	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objAllergy= &apos;+objAllergy);
		logger.error(scriptName+&apos;:DEBUG:: commonOrder= &apos;+JSON.stringify(objAllergy));
	}
	
	channelMap.put(&apos;Allergy&apos;,JSON.stringify(objAllergy));
	return objAllergy;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>0cf1a598-a8e4-4e52-a0fb-640de35367fa</id>
                <name>json_pid_gender</name>
                <revision>3</revision>
                <lastModified>
                  <time>1658534603167</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc:  this JS code template is to handle Patient Gender parsing PID.8

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function json_pid_gender(pid, patient) {

	var scriptName= &apos;json_pid_gender&apos;;
	var gender= pid[&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString().toUpperCase();

//	logger.error(scriptName+&apos;:DEBUG:: pidGender= &apos;+pid+&apos; patient= &apos;+patient);
	
	if (gender == &apos;F&apos; || gender == &apos;FEMALE&apos;){
		patient.gender= &apos;Female&apos;;
	}
	
	else if (gender == &apos;M&apos; || gender == &apos;MALE&apos;){
		patient.gender= &apos;Male&apos;;
	}
	
	else if (gender == &apos;O&apos; || gender == &apos;OTHER&apos;){
		patient.gender= &apos;Other&apos;;
	}
	
	else if (gender == &apos;U&apos; || gender == &apos;UNKNOWN&apos;){
		patient.gender= &apos;Unknown&apos;;
	}
	else{
		patient.gender= pid[&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString();
	}
	
//	logger.error(scriptName+&apos;:DEBUG:: patient= &apos;+JSON.stringify(patient));
	return patient;
		
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>3f1d523c-515d-4ec8-805b-2deb20470993</id>
                <name>json_pid_patient</name>
                <revision>24</revision>
                <lastModified>
                  <time>1695331670634</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc:  this JS code template is to parse HL7v2 PID segment and return a Javascript object

	@param {String} pid - This will contains the XML representation of the HL7v2 PID segment
	
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 PID segment
	History:
	2023-09-21 JER - Added code to evaluate patientIdentifier for either PID-3 in addition to PID-4 value
	2023-09-10 JER - Added phone numbers (home and business) PID.13 and PID.14 with other updates references objPatient
	2022-08-25 JER - Modified from mrn and mrnDomain to identifier and assigningAuthorityName
	2022-05-13 JER - per requested customer provides unique Patient Id in PID.4
	2022-02-25 JER - Modified to include the call json_pv1_patient(pv1, patient) method to populate visit-centric content
*/
function json_pid_patient(pid) {

	var scriptName= &apos;json_pid_patient&apos;;
	var debug= 0;
	
	var objPatient= {};

	if(debug&gt;0) {
		logger.debug(&apos;DEBUG::&apos;+scriptName+&apos; pid[PID.4] typeof: &apos;+typeof(pid[&apos;PID.4&apos;])+&apos; PID.4 value: &apos;+pid[&apos;PID.4&apos;].toString()+&apos; PID.4.1 value: &apos;+pid[&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString());
		logger.debug(&apos;DEBUG::&apos;+scriptName+&apos; pid[PID.3] typeof: &apos;+typeof(pid[&apos;PID.3&apos;])+&apos; PID.3 value: &apos;+pid[&apos;PID.3&apos;].toString()+&apos; PID.3.1 value: &apos;+pid[&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString());
	} // end if 
	
	if(pid[&apos;PID.4&apos;][&apos;PID.4.1&apos;].toString().length&gt;0) {
		// 2022-05-13 JER - per requested customer provides unique Patient Id in PID.4
		for each(pid4 in pid[&apos;PID.4&apos;]) {
			
			var pidNum = pid4[&apos;PID.4.1&apos;].toString();
			var entity = pid4[&apos;PID.4.4&apos;].toString();
			// 2022-02-22 jer - verify if PID.3.5 exists if not is undefined
			if(pid4[&apos;PID.4.5&apos;].toString().length&gt;0) {
				var IDCode = pid4[&apos;PID.4.5&apos;].toString();
			} // end if 

			// 2022-02-22 jer - verify if undefined or defined with value of MRN
			if((typeof(IDCode)== &apos;undefined&apos;) || (IDCode.indexOf(&apos;MRN&apos;)&gt;-1)) {
				if(entity != null) {
					// 2022-08-25 JER - Modified from mrn and mrnDomain to identifier and assigningAuthorityName
					objPatient.identifier= pidNum;
					objPatient.assigningAuthorityName= entity;
					channelMap.put(&apos;identifier&apos;,pidNum); 
					channelMap.put(&apos;assigningAuthorityName&apos;,entity);
				}
			} else if (IDCode.indexOf(&quot;MR&quot;)&gt;-1) {
				if(entity != null) {
					// 2022-08-25 JER - Modified from mpi and mpiDomain to mpiIdentifier and globalAssigningAuthorityName
					objPatient.mpiIdentifier= pidNum;
					objPatient.globalAssigningAuthorityName= entity;
					channelMap.put(&apos;mpiIdentifier&apos;,pidNum); 
					channelMap.put(&apos;globalAssigningAuthorityName&apos;,entity);
				}
			} else {
				if(entity != null) {
					// 2022-08-25 JER - Modified from mpi and mpiDomain to mpiIdentifier and globalAssigningAuthorityName
					objPatient.mpiIdentifier= pidNum;
					objPatient.globalAssigningAuthorityName= entity;
					channelMap.put(&apos;mpiIdentifier&apos;,pidNum); 
					channelMap.put(&apos;globalAssigningAuthorityName&apos;,entity);
				} // end if 
			} // end if 
		} // end for 
	// 2023-09-21 JER - Added code to evaluate patientIdentifier for either PID-3 in addition to PID-4 value
	} else if(pid[&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString().length&gt;0) {

		// 2022-05-13 JER - per requested customer provides unique Patient Id in PID.4
		for each(pid3 in pid[&apos;PID.3&apos;]) {
			
			var pidNum = pid3[&apos;PID.3.1&apos;].toString();
			var entity = pid3[&apos;PID.3.4&apos;].toString();
			// 2022-02-22 jer - verify if PID.3.5 exists if not is undefined
			if(pid3[&apos;PID.3.5&apos;].toString().length&gt;0) {
				var IDCode = pid3[&apos;PID.3.5&apos;].toString();
			} // end if 
			
			//logger.error(scriptName+&apos;:DEBUG:: typeof(IDCode)= &apos;+typeof(IDCode));

			// 2022-02-22 jer - verify if undefined or defined with value of MRN
			if((typeof(IDCode)== &apos;undefined&apos;) || (IDCode.indexOf(&apos;MRN&apos;)&gt;-1)) {
				if(entity != null) {
					// 2022-08-25 JER - Modified from mrn and mrnDomain to identifier and assigningAuthorityName
					objPatient.identifier= pidNum;
					objPatient.assigningAuthorityName= entity;
					channelMap.put(&apos;identifier&apos;,pidNum); 
					channelMap.put(&apos;assigningAuthorityName&apos;,entity);
				}
			} else if (IDCode.indexOf(&quot;MR&quot;)&gt;-1) {
				if(entity != null) {
					// 2022-08-25 JER - Modified from mpi and mpiDomain to mpiIdentifier and globalAssigningAuthorityName
					objPatient.mpiIdentifier= pidNum;
					objPatient.globalAssigningAuthorityName= entity;
					channelMap.put(&apos;mpiIdentifier&apos;,pidNum); 
					channelMap.put(&apos;globalAssigningAuthorityName&apos;,entity);
				}
			} else {
				if(entity != null) {
					// 2022-08-25 JER - Modified from mpi and mpiDomain to mpiIdentifier and globalAssigningAuthorityName
					objPatient.mpiIdentifier= pidNum;
					objPatient.globalAssigningAuthorityName= entity;
					channelMap.put(&apos;mpiIdentifier&apos;,pidNum); 
					channelMap.put(&apos;globalAssigningAuthorityName&apos;,entity);
				} // end if 
			} // end if 
		} // end for 
	} // end if 

	objPatient.encounterNumber= pid[&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();
	objPatient.firstName= pid[&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString();
	if(pid[&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString().length&gt;0) objPatient.middleName=  pid[&apos;PID.5&apos;][&apos;PID.5.3&apos;].toString();
	objPatient.lastName=  pid[&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString();
	objPatient.dob= pid[&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();
	objPatient.gender= pid[&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString();

	// 2022-04-07 jer - added convertExtendedAddressToJSON method for Patient Address
	/* Patient Address PID.11 (XAD) */
	if(pid[&apos;PID.11&apos;].toString().length&gt;0) objPatient.patientAddress= convertExtendedAddressToJSON(pid[&apos;PID.11&apos;]);

	// 2023-09-10 JER - Added phone numbers (home and business) PID.13 and PID.14
	/* Phone Number - Home (XTN) PID.13 */
	if(pid[&apos;PID.13&apos;].toString().length&gt;0) objPatient.phoneNumberHome= convertExtendedTelecommunicationNumberToJSON(pid[&apos;PID.13&apos;]);
	
	/* Phone Number - Business (XTN) PID.14 */
	if(pid[&apos;PID.14&apos;].toString().length&gt;0) objPatient.phoneNumberBusiness= convertExtendedTelecommunicationNumberToJSON(pid[&apos;PID.14&apos;]);

	/* Patient Account Number (CX) PID.18 */
	if(pid[&apos;PID.18&apos;].toString().length&gt;0) objPatient.patientAccountNumber= pid[&apos;PID.18&apos;][&apos;PID.18.1&apos;].toString();

	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objPatient= &apos;+objPatient);
		logger.error(scriptName+&apos;:DEBUG:: stringify(objPatient)= &apos;+JSON.stringify(objPatient));
	}
	
	channelMap.put(&apos;Patient&apos;,JSON.stringify(objPatient));
	return objPatient;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>27b01dc9-fa98-48ff-af65-82929d6dc4d7</id>
                <name>json_pv1_clinician</name>
                <revision>4</revision>
                <lastModified>
                  <time>1673290110742</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc:  this JS code template is to parse HL7v2 message PV1 segment  and return a Javascript object
	
	Filename: json_pv1_clinician.js
	@param {String} pv1 - This will contains the XML representation of the HL7v2 PV1 segment
	@return {String} return - Returning the Javascript object representation of the converted HL7v2 PV1 segment
	History:
	2023-01-09 JER - Modified all physicians to Doctor
	
*/
function json_pv1_clinician(pv1) {

	var scriptName= &apos;json_pv1_clinician&apos;;
	var debug= 0;
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pv1= &apos;+pv1); }

	var arrClinician= new Array();
	
	// Clinician object
	var objClinician= {};
	
	// PV1.7 - attending physician
	// PV1.7.1 - Id Number
	if(pv1[&apos;PV1.7&apos;][&apos;PV1.7.1&apos;].toString().length&gt;0) objClinician.idNumber= pv1[&apos;PV1.7&apos;][&apos;PV1.7.1&apos;].toString();

	// PV1.7.2 - Last/Family Name
	if(pv1[&apos;PV1.7&apos;][&apos;PV1.7.2&apos;].toString().length&gt;0) objClinician.lastName= pv1[&apos;PV1.7&apos;][&apos;PV1.7.2&apos;].toString();

	// PV1.7.3 - First/Given Name
	if(pv1[&apos;PV1.7&apos;][&apos;PV1.7.3&apos;].toString().length&gt;0) objClinician.firstName= pv1[&apos;PV1.7&apos;][&apos;PV1.7.3&apos;].toString();

	// PV1.7.9.1 - Assigning Authority - Namespace Id
	if(pv1[&apos;PV1.7&apos;][&apos;PV1.7.9&apos;][&apos;PV1.7.9.1&apos;].toString().length&gt;0) objClinician.assigningAuthority= pv1[&apos;PV1.7&apos;][&apos;PV1.7.9&apos;][&apos;PV1.7.9.1&apos;].toString();

	if(pv1[&apos;PV1.7&apos;][&apos;PV1.7.1&apos;].toString().length&gt;0) {
		// 2023-01-09 JER - Modified all physicians to Doctor
		// objClinician.clinicanType= &apos;Attending Physician&apos;;
		objClinician.clinicanType= &apos;Doctor&apos;;
		arrClinician.push(objClinician);
	} // end if 
	
	// Clinician object
	var objClinician= {};
	
	// PV1.8 - referring physician
	// PV1.8.1 - Id Number
	if(pv1[&apos;PV1.8&apos;][&apos;PV1.8.1&apos;].toString().length&gt;0) objClinician.idNumber= pv1[&apos;PV1.8&apos;][&apos;PV1.8.1&apos;].toString();

	// PV1.8.2 - Last/Family Name
	if(pv1[&apos;PV1.8&apos;][&apos;PV1.8.2&apos;].toString().length&gt;0) objClinician.lastName= pv1[&apos;PV1.8&apos;][&apos;PV1.8.2&apos;].toString();

	// PV1.8.3 - First/Given Name
	if(pv1[&apos;PV1.8&apos;][&apos;PV1.8.3&apos;].toString().length&gt;0) objClinician.firstName= pv1[&apos;PV1.8&apos;][&apos;PV1.8.3&apos;].toString();

	// PV1.8.9.1 - Assigning Authority - Namespace Id
	if(pv1[&apos;PV1.8&apos;][&apos;PV1.8.9&apos;][&apos;PV1.8.9.1&apos;].toString().length&gt;0) objClinician.assigningAuthority= pv1[&apos;PV1.8&apos;][&apos;PV1.8.9&apos;][&apos;PV1.8.9.1&apos;].toString();

	if(pv1[&apos;PV1.8&apos;][&apos;PV1.8.1&apos;].toString().length&gt;0) {
		// 2023-01-09 JER - Modified all physicians to Doctor
		// objClinician.clinicanType= &apos;Referring Physician&apos;;	
		objClinician.clinicanType= &apos;Doctor&apos;;
		arrClinician.push(objClinician);
	} // end if 
	
	// Clinician object
	var objClinician= {};
	
	// PV1.9 - consulting physician
	// PV1.9.1 - Id Number
	if(pv1[&apos;PV1.9&apos;][&apos;PV1.9.1&apos;].toString().length&gt;0) objClinician.idNumber= pv1[&apos;PV1.9&apos;][&apos;PV1.9.1&apos;].toString();

	// PV1.9.2 - Last/Family Name
	if(pv1[&apos;PV1.9&apos;][&apos;PV1.9.2&apos;].toString().length&gt;0) objClinician.lastName= pv1[&apos;PV1.9&apos;][&apos;PV1.9.2&apos;].toString();

	// PV1.9.3 - First/Given Name
	if(pv1[&apos;PV1.9&apos;][&apos;PV1.9.3&apos;].toString().length&gt;0) objClinician.firstName= pv1[&apos;PV1.9&apos;][&apos;PV1.9.3&apos;].toString();

	// PV1.9.9.1 - Assigning Authority - Namespace Id
	if(pv1[&apos;PV1.9&apos;][&apos;PV1.9.9&apos;][&apos;PV1.9.9.1&apos;].toString().length&gt;0) objClinician.assigningAuthority= pv1[&apos;PV1.9&apos;][&apos;PV1.9.9&apos;][&apos;PV1.9.9.1&apos;].toString();

	if(pv1[&apos;PV1.9&apos;][&apos;PV1.9.1&apos;].toString().length&gt;0) {
		// 2023-01-09 JER - Modified all physicians to Doctor
		// objClinician.clinicanType= &apos;Consulting Physician&apos;;
		objClinician.clinicanType= &apos;Doctor&apos;;
		arrClinician.push(objClinician);
	} // end if 

	// Clinician object
	var objClinician= {};
	
	// PV1.17 - admitting physician
	for each(admittingPhysician in pv1[&apos;PV1.17&apos;]) {
		// PV1.17.1 - Id Number
		if(admittingPhysician[&apos;PV1.17.1&apos;].toString().length&gt;0) objClinician.idNumber= admittingPhysician[&apos;PV1.17.1&apos;].toString();

		// PV1.17.2 - Last/Family Name
		if(admittingPhysician[&apos;PV1.17.2&apos;].toString().length&gt;0) objClinician.lastName= admittingPhysician[&apos;PV1.17.2&apos;].toString();

		// PV1.17.3 - First/Given Name
		if(admittingPhysician[&apos;PV1.17.3&apos;].toString().length&gt;0) objClinician.firstName= admittingPhysician[&apos;PV1.17.3&apos;].toString();

		// PV1.17.9.1 - Assigning Authority - Namespace Id
		if(admittingPhysician[&apos;PV1.17.9&apos;][&apos;PV1.17.9.1&apos;].toString().length&gt;0) objClinician.assigningAuthority= admittingPhysician[&apos;PV1.17.9&apos;][&apos;PV1.17.9.1&apos;].toString();

		if(admittingPhysician[&apos;PV1.17.1&apos;].toString().length&gt;0) {
			// 2023-01-09 JER - Modified all physicians to Doctor
			// objClinician.clinicanType= &apos;Admitting Physician&apos;;
			objClinician.clinicanType= &apos;Doctor&apos;;
			arrClinician.push(objClinician);
		} // end if 
	} // end for each

	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: clinician= &apos;+JSON.stringify(arrClinician));
	}
	
	channelMap.put(&apos;Clinicians&apos;,JSON.stringify(arrClinician));
	return arrClinician;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>9d68bf38-3dce-405f-b051-6098c894cd17</id>
                <name>json_pv1_encounter</name>
                <revision>2</revision>
                <lastModified>
                  <time>1676394827377</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc:  this JS code template is to parse HL7v2 PV1 segment and return a Javascript object

	@param {String} pv1 - This will contains the XML representation of the HL7v2 PV1 segment
	@param {String} patient - This will contains the XML representation of the Javascript patient object
	
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 PV1 segment
	History:
	2023-02-14 JER - Evaluate to capture the encounterType from PV1.2.1
	2022-11-14 JER - Modified from the json_pv1_visit to json_pv1_encounter and removed dependency on the patient object
*/
function json_pv1_encounter(pv1) {
	
	var scriptName= &apos;json_pv1_encounter&apos;;
	var debug= 0;
	var encounter= {};

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pv1= &apos;+JSON.stringify(pv1));
	}
	
	// 2022-08-26 JER - JSON stringify the globalChannel variable - evaluate organization if defined and toString.length GT 0 to persist to visit.organization
	// &quot;organization&quot; : &quot;\&quot;QS1\&quot;&quot;,
	var organization= JSON.stringify(channelMap.get(&apos;organization&apos;)).replace(/[^\w\s]/gi, &apos;&apos;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(organization): &apos;+typeof(organization)+&apos; length: &apos;+organization.length);
	
	if((typeof(organization)!== &apos;undefined&apos;)&amp;&amp;(organization.toString().length&gt;0)) {
		encounter.organization= organization;
	} // end if

	// 2023-02-14 JER - Evaluate to capture the encounterType from PV1.2.1
	if(typeof(pv1[&apos;PV1.2&apos;])!== &apos;undefined&apos;) {
		if(pv1[&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString().length&gt;0) {
			var encounterTypeCode= pv1[&apos;PV1.2&apos;][&apos;PV1.2.1&apos;].toString();
			if(encounterTypeCode== &apos;E&apos;) {
				encounter.encounterType= &apos;Emergency&apos;;
			} else if(encounterTypeCode== &apos;I&apos;) {
				encounter.encounterType= &apos;Inpatient&apos;;  	
			} else if((encounterTypeCode== &apos;O&apos;)||(encounterTypeCode== &apos;R&apos;)) {
				encounter.encounterType= &apos;Outpatient&apos;;
			} else if(encounterTypeCode== &apos;P&apos;) {
				encounter.encounterType= &apos;PreAdmit&apos;;
			}
		} else {
			encounter.encounterType= &apos;&apos;;
		}
	} // end if 

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(pv1[PV1.3])= &apos;+typeof(pv1[&apos;PV1.3&apos;])+&apos; pv1[PV1.3]= &apos;+pv1[&apos;PV1.3&apos;]); 
	// 2022-08-26 JER - Modified from using object: patient to visit

	if(typeof(pv1[&apos;PV1.3&apos;])!== &apos;undefined&apos;) {
		if(pv1[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString().length&gt;0) {
			encounter.facility= pv1[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString();
		} else {
			encounter.facility= &apos;&apos;;
		}
	} else {
		if((typeof(channelMap.get(&apos;organization&apos;))!== &apos;undefined&apos;)&amp;&amp;(channelMap.get(&apos;organization&apos;).toString().length&gt;0)) {
			encounter.facility= channelMap.get(&apos;organization&apos;);
		} else {
			encounter.facility= &apos;&apos;;
		} // end if 
	} // end if

	if(pv1[&apos;PV1.3&apos;][&apos;PV1.3.1&apos;].toString()) {
		encounter.unit= 	pv1[&apos;PV1.3&apos;][&apos;PV1.3.1&apos;].toString();
	} else {
		encounter.unit=	&apos;&apos;;
	}

	if(pv1[&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString()) {
		encounter.room= 	pv1[&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString();
	} else {
		encounter.room=	&apos;&apos;;
	}

	if(pv1[&apos;PV1.3&apos;][&apos;PV1.3.3&apos;].toString()) {
		encounter.bedID= 	pv1[&apos;PV1.3&apos;][&apos;PV1.3.3&apos;].toString();
	} else {
		encounter.bedID=	&apos;&apos;;
	} // end if 
		

	if(pv1[&apos;PV1.6&apos;][&apos;PV1.6.1&apos;].toString().length&gt;0) {
		encounter.prior_unit= 	pv1[&apos;PV1.6&apos;][&apos;PV1.6.1&apos;].toString();
		encounter.prior_room= 	pv1[&apos;PV1.6&apos;][&apos;PV1.6.2&apos;].toString();
		encounter.prior_bedID=	pv1[&apos;PV1.6&apos;][&apos;PV1.6.3&apos;].toString();
	} else {
		encounter.prior_unit= 	&apos;&apos;;
		encounter.prior_room= 	&apos;&apos;;
		encounter.prior_bedID=	&apos;&apos;;
	}

	// 2022-03-02 JER - Acquire device_Id/room to synchronize data between the Caregility Admin Portal and data table on the BJC side.
	if((typeof(pv1[&apos;PV1.3&apos;][&apos;PV1.3.9&apos;])!== &apos;undefined&apos;)&amp;&amp;(pv1[&apos;PV1.3&apos;][&apos;PV1.3.9&apos;].toString().length&gt;0)) {
		encounter.deviceID= pv1[&apos;PV1.3&apos;][&apos;PV1.3.9&apos;].toString();
		channelMap.put(&apos;deviceID&apos;,encounter.deviceID);
	} // end if 

	if(pv1[&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString()){
		encounter.encounter_identifier= pv1[&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString();
	} else {
		encounter.encounter_identifier= &apos;&apos;;
	} // end if  

	// 2022-03-10 PP - per Greg&apos;s email dated 03/14, Admit/Discharge in YYYYMMDD format
	if(pv1[&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString()){
		encounter.admissionDate= pv1[&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString().substring(0,8);
	} // end if 
	
	// 2022-08-26 JER - Modified from using object: patient to visit
	if(pv1[&apos;PV1.45&apos;][&apos;PV1.45.1&apos;].toString()){
		encounter.dischargeDate= pv1[&apos;PV1.45&apos;][&apos;PV1.45.1&apos;].toString().substring(0,8);
	} else {
		encounter.dischargeDate= &apos;&apos;;
	}
	
	if(debug&gt;0) { logger.error(scriptName+&apos;:DEBUG:: encounter= &apos;+JSON.stringify(encounter)); }

	return encounter;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>562b1fd8-8825-47dd-a811-f836954fde33</id>
                <name>json_pv1_visit</name>
                <revision>22</revision>
                <lastModified>
                  <time>1694394895383</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc:  this JS code template is to parse HL7v2 PV1 segment and return a Javascript object

	@param {String} pv1 - This will contains the XML representation of the HL7v2 PV1 segment
	@param {String} patient - This will contains the XML representation of the Javascript patient object
	
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 PV1 segment
	History:
	2022-08-26 JER - JSON stringify the globalChannel variable - evaluate organization if defined and toString.length GT 0 to persist to visit.organization
	2022-08-26 JER - Modified from using object: patient to visit and 
	2022-07-22 JER - Removed dependencies on pid segment
	2022-03-07 JER - Added channelMap.put(&apos;deviceID&apos;,patient.deviceID)
	2022-03-02 JER - Acquire device_Id/room to synchronize data between the Caregility Admin Portal and data table on the BJC side.
	2022-02-28 JER Modified to copy patient.organization to patient.facility if no value for PV1.3.4 element value
*/
function json_pv1_visit(pv1, patient) {

	var scriptName= &apos;json_pv1_visit&apos;;
	var debug= 0;
	
	var objVisit= {};

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pv1= &apos;+pv1+&apos; patient: &apos;+JSON.stringify(patient));
	}
	
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(pv1[PV1.3][PV1.3.4])= &apos;+typeof(pv1[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;])+&apos; pv1[PV1.3][PV1.3.4]= &apos;+pv1[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString()); }

	// 2022-08-26 JER - JSON stringify the globalChannel variable - evaluate organization if defined and toString.length GT 0 to persist to objVisit.organization
	// &quot;organization&quot; : &quot;\&quot;QS1\&quot;&quot;,
	var organization= JSON.stringify(channelMap.get(&apos;organization&apos;)).replace(/[^\w\s]/gi, &apos;&apos;);
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(organization): &apos;+typeof(organization)+&apos; length: &apos;+organization.length); }
	
	if((typeof(organization)!== &apos;undefined&apos;)&amp;&amp;(organization.toString().length&gt;0)) {
		objVisit.organization= organization;
	} // end if

	// 2022-08-26 JER - Modified from using object: patient to visit
	if((typeof(pv1[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;])!== &apos;undefined&apos;)&amp;&amp;(pv1[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString().length&gt;0)) {
		objVisit.facility= pv1[&apos;PV1.3&apos;][&apos;PV1.3.4&apos;].toString();
	} else {
		if((typeof(channelMap.get(&apos;organization&apos;))!== &apos;undefined&apos;)&amp;&amp;(channelMap.get(&apos;organization&apos;).toString().length&gt;0)) {
			objVisit.facility= channelMap.get(&apos;organization&apos;);
		} // end if 
	} // end if
	
	objVisit.unit= 	pv1[&apos;PV1.3&apos;][&apos;PV1.3.1&apos;].toString().replace(&apos;-&apos;,&apos;&apos;);
	objVisit.room= 	pv1[&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString().replace(&apos;-&apos;,&apos;&apos;);
	objVisit.bedID= 	pv1[&apos;PV1.3&apos;][&apos;PV1.3.3&apos;].toString().replace(&apos;-&apos;,&apos;&apos;);
		
	/* 2022-02-27 JER - removed as not storing prior location (i.e. unit, room, bed)
	if(pv1[&apos;PV1.6&apos;][&apos;PV1.6.1&apos;].toString().length&gt;0) {
		patient.prior_unit= 	pv1[&apos;PV1.6&apos;][&apos;PV1.6.1&apos;].toString();
		patient.prior_room= 	pv1[&apos;PV1.6&apos;][&apos;PV1.6.2&apos;].toString();
		patient.prior_bedID=	pv1[&apos;PV1.6&apos;][&apos;PV1.6.3&apos;].toString();
	}
	*/

	// 2022-03-02 JER - Acquire device_Id/room to synchronize data between the Caregility Admin Portal and data table on the BJC side.
	if((typeof(pv1[&apos;PV1.3&apos;][&apos;PV1.3.9&apos;])!== &apos;undefined&apos;)&amp;&amp;(pv1[&apos;PV1.3&apos;][&apos;PV1.3.9&apos;].toString().length&gt;0)) {
		objVisit.deviceID= pv1[&apos;PV1.3&apos;][&apos;PV1.3.9&apos;].toString();
		channelMap.put(&apos;deviceID&apos;,objVisit.deviceID);
	} // end if 

	/* Attending Doctor (XCN) PV1-7 */
	if(pv1[&apos;PV1.7&apos;].toString().length&gt;0) objVisit.attendingDoctor= convertExtendedCompositeIDNumberAndNameToJSON(pv1[&apos;PV1.7&apos;]);

	// 2022-08-26 JER - Modified from using object: patient to visit
	if(pv1[&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString()){
	//	patient.admissionDate= pv1[&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString();
		objVisit.admissionDate= pv1[&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString().substring(0,8);
		if(pv1[&apos;PV1.44&apos;][&apos;PV1.44.2&apos;].toString().length&gt;0) objVisit.admissionTime= pv1[&apos;PV1.44&apos;][&apos;PV1.44.2&apos;].toString().substring(0,8);
	} // end if 
	
	// 2022-08-26 JER - Modified from using object: patient to visit
	if(pv1[&apos;PV1.45&apos;][&apos;PV1.45.1&apos;].toString()){
	//	patient.dischargeDate= pv1[&apos;PV1.45&apos;][&apos;PV1.45.1&apos;].toString();
		objVisit.dischargeDate= pv1[&apos;PV1.45&apos;][&apos;PV1.45.1&apos;].toString().substring(0,8);
		if(pv1[&apos;PV1.45&apos;][&apos;PV1.45.2&apos;].toString().length&gt;0) objVisit.dischargeTime= pv1[&apos;PV1.45&apos;][&apos;PV1.45.2&apos;].toString().substring(0,8);
	}
	
	if(debug&gt;0) { logger.error(scriptName+&apos;:DEBUG:: objVisit= &apos;+JSON.stringify(objVisit)); }
	// 2022-08-26 JER - Modified from using object: patient to objVisit
	return objVisit;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b8a31168-fc3a-4a2c-8999-284b33104067</id>
                <name>json_rol_clinician</name>
                <revision>8</revision>
                <lastModified>
                  <time>1673286103839</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc:  this JS code template is to parse HL7v2 message ROL segment and return a Javascript object
	
	Filename: json_rol_clinician.js
	@param {String} rol - This will contains the XML representation of the HL7v2 ROL segment
	@return {String} return - Returning the Javascript object representation of the converted HL7v2 ROL segment
	History:
	
*/
function json_rol_clinician(rol) {

	var scriptName= &apos;json_rol_clinician&apos;;
	var debug= 0;
	//if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; rol typeof= &apos;+typeof(rol)+&apos; rol: &apos;+rol); 
	//}
	
	// Clinician object
	var objClinician= {};
	
	// ROL.1 - Role Instance Identifier (EI)
	if(rol[&apos;ROL.1&apos;][&apos;ROL.1.1&apos;].toString().length&gt;0) objClinician.id= rol[&apos;ROL.1&apos;][&apos;ROL.1.1&apos;].toString();

	// ROL.2 - Action Code (ID)
	if(rol[&apos;ROL.2&apos;][&apos;ROL.2.1&apos;].toString().length&gt;0) objClinician.actionCode= rol[&apos;ROL.2&apos;][&apos;ROL.2.1&apos;].toString();

	// ROL.3 - Role (Identifier, Text, CodingSystemName, CodingSystemNameOid (CE)
	logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof rol[ROL.3]: &apos;+typeof(rol[&apos;ROL.3&apos;])+&apos; stringify: &apos;+rol[&apos;ROL.3&apos;]);
	if(typeof(rol[&apos;ROL.3&apos;])!== &apos;undefined&apos;) {
		objClinician.role= convertCodedElementToJSON(rol[&apos;ROL.3&apos;]);
	} else {
		objClinician.role= &apos;&apos;;
	} // end if 
	// if(debug&gt;0) 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; objClinician.role: &apos;+JSON.stringify(objClinician.role));
		
	// ROL.4 - Role Person (XCN)
	logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof rol[ROL.4]: &apos;+typeof(rol[&apos;ROL.4&apos;])+&apos; stringify: &apos;+rol[&apos;ROL.4&apos;]);
	if(typeof(rol[&apos;ROL.4&apos;])!== &apos;undefined&apos;) {
		objClinician.rolePerson= convertExtendedCompositeIDNumberAndNameToJSON(rol[&apos;ROL.4&apos;]);
	} else {
		objClinician.rolePerson= &apos;&apos;;
	} // end if 
	// if(debug&gt;0) 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; objClinician.rolePerson: &apos;+JSON.stringify(objClinician.rolePerson));
	
	// ROL.5 - Role Begin DateTime (TS)
	if(typeof(rol[&apos;ROL.5&apos;])!== &apos;undefined&apos;) {
		objClinician.roleBeginDatetime= convertTimestampToJSON(rol[&apos;ROL&apos;][&apos;ROL.5&apos;]);
	} else {
		objClinician.roleBeginDatetime= &apos;&apos;;
	} // end if 
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; objClinician.roleBeginDatetime: &apos;+objClinician.roleBeginDatetime);
	
	// ROL.6 - Role End DateTime (TS)
	if(typeof(rol[&apos;ROL.6&apos;])!== &apos;undefined&apos;) {
		objClinician.roleEndDatetime= convertTimestampToJSON(rol[&apos;ROL&apos;][&apos;ROL.6&apos;]);
	} else {
		objClinician.roleEndDateTime= &apos;&apos;;
	} // end if 
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; objClinician.roleEndDateTime: &apos;+objClinician.roleEndDateTime);
	
	// ROL.7 - Role Duration
	if(typeof(rol[&apos;ROL.7&apos;])!== &apos;undefined&apos;) {
		objClinician.roleDuration= convertCodedElementToJSON(rol[&apos;ROL&apos;][&apos;ROL.7&apos;]);
	} else {
		objClinician.roleDuration= &apos;&apos;;
	} // end if 
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; objClinician.roleDuration: &apos;+objClinician.roleDuration);

	// ROL.8 - Role Action Reason
	if(typeof(rol[&apos;ROL.8&apos;])!== &apos;undefined&apos;) {
		objClinician.roleActionReason= convertCodedElementToJSON(rol[&apos;ROL&apos;][&apos;ROL.8&apos;]);
	} else {
		objClinician.roleActionReason= &apos;&apos;;
	} // end if 
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; objClinician.roleActionReason: &apos;+objClinician.roleActionReason);

	// ROL.9 - Provider Type
	if(typeof(rol[&apos;ROL.9&apos;])!== &apos;undefined&apos;) {
		objClinician.providerType= convertCodedElementToJSON(rol[&apos;ROL&apos;][&apos;ROL.9&apos;]);
	} else {
		objClinician.providerType= &apos;&apos;;
	} // end if 
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; objClinician.providerType: &apos;+objClinician.providerType);

	// ROL.10 - Organization Unit Type
	if(typeof(rol[&apos;ROL.10&apos;])!== &apos;undefined&apos;) {
		objClinician.organizationUnitType= convertCodedElementToJSON(rol[&apos;ROL&apos;][&apos;ROL.10&apos;]);
	} else {
		objClinician.organizationUnitType= &apos;&apos;;
	} // end if 
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; objClinician.organizationUnitType: &apos;+objClinician.organizationUnitType);

	// ROL.11 - Office/Home Address
	if(typeof(rol[&apos;ROL.11&apos;])!== &apos;undefined&apos;) {
		objClinician.officeAddress= convertExtendedAddressToJSON(rol[&apos;ROL&apos;][&apos;ROL.11&apos;]);
	} else {
		objClinician.officeAddress= &apos;&apos;;
	} // end if 
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; objClinician.officeAddress: &apos;+objClinician.officeAddress);

	// ROL.12 - Phone
	if(typeof(rol[&apos;ROL.12&apos;])!== &apos;undefined&apos;) {
		objClinician.phone= convertExtendedTelecommunicationNumberToJSON(rol[&apos;ROL&apos;][&apos;ROL.12&apos;]);
	} else {
		objClinician.phone= &apos;&apos;;
	} // end if 
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; objClinician.phone: &apos;+objClinician.phone);


	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: clinician= &apos;+JSON.stringify(objClinician));
	}
	
	channelMap.put(&apos;Clinician&apos;,JSON.stringify(objClinician));
	return objClinician;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4797d1ea-5a48-4474-80d6-9fce7cac4506</id>
                <name>json_rxe_pharmacy_encoded_order</name>
                <revision>2</revision>
                <lastModified>
                  <time>1689376220851</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc:  this JS code template is to parse HL7v2 Pharmacy/Treatment Encoded Order (RXE) segment and return a Javascript object

	@param {String} orc - This will contains the XML representation of the HL7v2 RXE segment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 RXE segment
	History:
	2022-04-12 jer - Added RXE-11 through RXE-44
	2022-04-11 jer - Added RXE-6 through RXE-10
	2022-04-07 jer - Created from json_rxe_timing_quantity(rxe) method to populate visit centric content
*/
function json_rxe_pharmacy_encoded_order(rxe) {

	var scriptName= &apos;json_rxe_pharmacy_encoded_order&apos;;
	var debug= 0;
	/*
	logger.error(scriptName+&apos;:DEBUG:: rxe= &apos;+rxe);;
	*/
	var objPharmacyEncodedOrder= {};
	
	// RXE.1 - Quantity/Timing
	if(rxe[&apos;RXE.1&apos;].toString().length&gt;0) objPharmacyEncodedOrder.quantityTiming= convertTimingQuantityToJSON(rxe[&apos;RXE.1&apos;]);
	// if(rxe[&apos;RXE.1&apos;].toString().length&gt;0) objPharmacyEncodedOrder.setId= rxe[&apos;RXE.1&apos;][&apos;RXE.1.1&apos;].toString();

	// RXE.2 - Give Code
	if(rxe[&apos;RXE.2&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveCode= convertCodedElementToJSON(rxe[&apos;RXE.2&apos;]);
	
	// RXE.3 - Give Amount - Minimum
	if(rxe[&apos;RXE.3&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveAmountMinimum= rxe[&apos;RXE.3&apos;][&apos;RXE.3.1&apos;].toString();
	
	// RXE.4 - Give Amount - Maximum
	if(rxe[&apos;RXE.4&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveAmountMaximum= rxe[&apos;RXE.4&apos;][&apos;RXE.4.1&apos;].toString();
	
	// RXE.5 - Give Units
	if(rxe[&apos;RXE.5&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveUnits= convertCodedElementToJSON(rxe[&apos;RXE.5&apos;]);
	
	// RXE.6 - Give Dosage Form
	if(rxe[&apos;RXE.6&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveDosageForm= convertCodedElementToJSON(rxe[&apos;RXE.6&apos;]);
	
	// RXE.7 - Provider&apos;s Administration Instructions
	if(rxe[&apos;RXE.7&apos;].toString().length&gt;0) objPharmacyEncodedOrder.provideAdminInstructions= convertCodedElementToJSON(rxe[&apos;RXE.7&apos;]);
	
	// RXE.8 - Deliver-To Location
	if(rxe[&apos;RXE.8&apos;].toString().length&gt;0) objPharmacyEncodedOrder.deliverToLocation= 
	convertLocationAddressVariationToJSON(rxe[&apos;RXE.8&apos;]);
	
	// RXE.9 - Substitution Status
	if(rxe[&apos;RXE.9&apos;].toString().length&gt;0) objPharmacyEncodedOrder.substitutionStatus= rxe[&apos;RXE.9&apos;][&apos;RXE.9.1&apos;].toString();
	
	// RXE.10 - Dispense Amount
	if(rxe[&apos;RXE.10&apos;].toString().length&gt;0) objPharmacyEncodedOrder.dispenseAmount= rxe[&apos;RXE.10&apos;][&apos;RXE.10.1&apos;].toString();
	
	// RXE.11 - Dispense Units
	if(rxe[&apos;RXE.11&apos;].toString().length&gt;0) objPharmacyEncodedOrder.dispenseUnits= convertCodedElementToJSON(rxe[&apos;RXE.11&apos;]);
	
	// RXE.12 - Number of Refills
	if(rxe[&apos;RXE.12&apos;].toString().length&gt;0) objPharmacyEncodedOrder.substitutionStatus= rxe[&apos;RXE.12&apos;][&apos;RXE.12.1&apos;].toString();
	
	// RXE.13 - Order Provider&apos;s DEA Number
	if(rxe[&apos;RXE.13&apos;].toString().length&gt;0) objPharmacyEncodedOrder.orderingProviderDEANumber=convertExtendedCompositeIDNumberAndNameToJSON(rxe[&apos;RXE.13&apos;]);
	
	// RXE.14 - Pharamcist/Treatment Supplier Verifier Id
	if(rxe[&apos;RXE.14&apos;].toString().length&gt;0) objPharmacyEncodedOrder.pharmacistSupplierVerifierId=convertExtendedCompositeIDNumberAndNameToJSON(rxe[&apos;RXE.14&apos;]); 

	// RXE.15 - Prescription Number
	if(rxe[&apos;RXE.15&apos;].toString().length&gt;0) objPharmacyEncodedOrder.prescriptionNumber= rxe[&apos;RXE.15&apos;][&apos;RXE.15.1&apos;].toString();
	
	// RXE.16 - Number of Refills Remaining
	if(rxe[&apos;RXE.16&apos;].toString().length&gt;0) objPharmacyEncodedOrder.refillsRemaining= rxe[&apos;RXE.16&apos;][&apos;RXE.16.1&apos;].toString();
	
	// RXE.17 - Number of Refills/Doses Dispensed
	if(rxe[&apos;RXE.17&apos;].toString().length&gt;0) objPharmacyEncodedOrder.refillsDispensed= rxe[&apos;RXE.17&apos;][&apos;RXE.17.1&apos;].toString();

	// RXE.18 - DateTime of Most Recent Refill or Dose Dispensed
	if(rxe[&apos;RXE.18&apos;].toString().length&gt;0) objPharmacyEncodedOrder.mostRecentRefillOrDispensed=convertTimestampToJSON(rxe[&apos;RXE.18&apos;]);

	// RXE.19 - Total Daily Dose
	if(rxe[&apos;RXE.19&apos;].toString().length&gt;0) objPharmacyEncodedOrder.totalDailyDose= convertCompositeQuantityWithUnitsToJSON(rxe[&apos;RXE.19&apos;]);

	// RXE.20 - Needs Human Review
	if(rxe[&apos;RXE.20&apos;].toString().length&gt;0) objPharmacyEncodedOrder.refillsDispensed= rxe[&apos;RXE.20&apos;][&apos;RXE.20.1&apos;].toString();

	// RXE.21 - Pharmacy/Treatment Suppliers Special Dispensing Instructions
	if(rxe[&apos;RXE.21&apos;].toString().length&gt;0) objPharmacyEncodedOrder.pharmacySuppliersSpecialDispensingInstructions= convertCodedElementToJSON(rxe[&apos;RXE.21&apos;]);

	// RXE.22 - Give Per
	if(rxe[&apos;RXE.22&apos;].toString().length&gt;0) objPharmacyEncodedOrder.givePer= rxe[&apos;RXE.22&apos;][&apos;RXE.22.1&apos;].toString();
	
	// RXE.23 - Give Rate Amount
	if(rxe[&apos;RXE.23&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveRateAmount= rxe[&apos;RXE.23&apos;][&apos;RXE.23.1&apos;].toString();

	// RXE.24 - Give Rate Units
	if(rxe[&apos;RXE.24&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveRateUnits= convertCodedElementToJSON(rxe[&apos;RXE.24&apos;]);

	// RXE.25 - Give Strength
	if(rxe[&apos;RXE.25&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveStrength= rxe[&apos;RXE.25&apos;][&apos;RXE.25.1&apos;].toString();

	// RXE.26 - Give Strength Units
	if(rxe[&apos;RXE.26&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveStrengthUnits= convertCodedElementToJSON(rxe[&apos;RXE.26&apos;]);

	// RXE.27 - Give Indication
	if(rxe[&apos;RXE.27&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveIndication= convertCodedElementToJSON(rxe[&apos;RXE.27&apos;]);
	
	// RXE.28 - Dispense Package Size
	if(rxe[&apos;RXE.28&apos;].toString().length&gt;0) objPharmacyEncodedOrder.dispensePackageSize= rxe[&apos;RXE.28&apos;][&apos;RXE.28.1&apos;].toString();

	// RXE.29 - Dispense Package Size Unit
	if(rxe[&apos;RXE.29&apos;].toString().length&gt;0) objPharmacyEncodedOrder.dispensePackageSizeUnit= convertCodedElementToJSON(rxe[&apos;RXE.29&apos;]);

	// RXE.30 - Dispense Package Method
	if(rxe[&apos;RXE.30&apos;].toString().length&gt;0) objPharmacyEncodedOrder.dispensePackageMethod= rxe[&apos;RXE.30&apos;][&apos;RXE.30.1&apos;].toString();

	// RXE.31 - Supplementary Code
	if(rxe[&apos;RXE.31&apos;].toString().length&gt;0) objPharmacyEncodedOrder.supplementaryCode= convertCodedElementToJSON(rxe[&apos;RXE.31&apos;]);

	// RXE.32 - Original Order DateTime
	if(rxe[&apos;RXE.32&apos;].toString().length&gt;0) objPharmacyEncodedOrder.originalOrderDateTime=convertTimestampToJSON(rxe[&apos;RXE.32&apos;]);

	// RXE.33 - Give Drug Strength Volume
	if(rxe[&apos;RXE.33&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveDrugStengthVolume= rxe[&apos;RXE.33&apos;][&apos;RXE.33.1&apos;].toString();

	// RXE.34 - Give Drug Stength Volume Units
	if(rxe[&apos;RXE.34&apos;].toString().length&gt;0) objPharmacyEncodedOrder.giveDrugStengthVolumeUnits= convertCodedWithExceptionsToJSON(rxe[&apos;RXE.34&apos;]);
	
	// RXE.35 - Controlled Substance Schedule
	if(rxe[&apos;RXE.35&apos;].toString().length&gt;0) objPharmacyEncodedOrder.controlledSubstanceSchedule= convertCodedWithExceptionsToJSON(rxe[&apos;RXE.35&apos;]);

	// RXE.36 - Formulary Status
	if(rxe[&apos;RXE.36&apos;].toString().length&gt;0) objPharmacyEncodedOrder.formularyStatus= rxe[&apos;RXE.36&apos;][&apos;RXE.36.1&apos;].toString();

	// RXE.37 - Pharmaceutical Substance Alternative
	if(rxe[&apos;RXE.37&apos;].toString().length&gt;0) objPharmacyEncodedOrder.pharmaceuticalSubstanceAlternative= convertCodedWithExceptionsToJSON(rxe[&apos;RXE.37&apos;]);

	// RXE.38 - Pharmacy of Most Recent Fill
	if(rxe[&apos;RXE.38&apos;].toString().length&gt;0) objPharmacyEncodedOrder.pharmacyMostRecentFill= convertCodedWithExceptionsToJSON(rxe[&apos;RXE.38&apos;]);

	// RXE.39 - Initial Dispense Amount
	if(rxe[&apos;RXE.39&apos;].toString().length&gt;0) objPharmacyEncodedOrder.initialDispenseAmount= rxe[&apos;RXE.39&apos;][&apos;RXE.39.1&apos;].toString();

	// RXE.40 - Dispensing Pharmacy
	if(rxe[&apos;RXE.40&apos;].toString().length&gt;0) objPharmacyEncodedOrder.dispensingPharmacy= convertCodedWithExceptionsToJSON(rxe[&apos;RXE.40&apos;]);

	// RXE.41 - Dispensing Pharmacy Address
	if(rxe[&apos;RXE.41&apos;].toString().length&gt;0) objPharmacyEncodedOrder.dispensingPharmacyAddress= convertExtendedAddressToJSON(rxe[&apos;RXE.41&apos;]);

	// RXE.42 - Deliver to Patient Location
	if(rxe[&apos;RXE.42&apos;].toString().length&gt;0) objPharmacyEncodedOrder.deliverToPatientLocation= convertPersonLocationToJSON(rxe[&apos;RXE.42&apos;]);

	// RXE.43 - Deliver to Address
	if(rxe[&apos;RXE.43&apos;].toString().length&gt;0) objPharmacyEncodedOrder.deliverToAddress= convertExtendedAddressToJSON(rxe[&apos;RXE.43&apos;]);

	// RXE.44 - Pharmacy Order Type
	if(rxe[&apos;RXE.44&apos;].toString().length&gt;0) objPharmacyEncodedOrder.pharmacyOrderType= rxe[&apos;RXE.44&apos;][&apos;RXE.44.1&apos;].toString();

	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objPharmacyEncodedOrder= &apos;+objPharmacyEncodedOrder);
		logger.error(scriptName+&apos;:DEBUG:: commonOrder= &apos;+JSON.stringify(objPharmacyEncodedOrder));
	}
	
	channelMap.put(&apos;PharmacyEncodedOrder&apos;,JSON.stringify(objPharmacyEncodedOrder));
	return objPharmacyEncodedOrder;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b32eccc4-2348-432b-b58a-da794913d1ee</id>
                <name>json_rxo_pharmacy_treatment_order</name>
                <revision>1</revision>
                <lastModified>
                  <time>1694397935953</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc:  this JS code template is to parse HL7v2 Pharmacy/Treatment Order (RXO) segment and return a Javascript object

	@param {String} orc - This will contains the XML representation of the HL7v2 rxo segment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 rxo segment
	History:
	2022-04-12 jer - Added rxo-11 through rxo-44
	2022-04-11 jer - Added rxo-6 through rxo-10
	2022-04-07 jer - Created from json_rxo_timing_quantity(rxo) method to populate visit centric content
*/
function json_rxo_pharmacy_treatment_order(rxo) {

	var scriptName= &apos;json_rxo_pharmacy_treatment_order&apos;;
	var debug= 0;
	/*
	logger.error(scriptName+&apos;:DEBUG:: rxo= &apos;+rxo);;
	*/
	var objPharmacyTreatmentOrder= {};
	
	// rxo.1 - Requested Give Code
	if(rxo[&apos;rxo.1&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveCode= convertCodedElementToJSON(rxo[&apos;rxo.1&apos;]);
	
	// rxo.2 - Requested Give Amount - Minimum
	if(rxo[&apos;rxo.2&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveAmountMinimum= rxo[&apos;rxo.2&apos;][&apos;rxo.2.1&apos;].toString();
	
	// rxo.3 - Requested Give Amount - Maximum
	if(rxo[&apos;rxo.3&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveAmountMaximum= rxo[&apos;rxo.3&apos;][&apos;rxo.3.1&apos;].toString();
	
	// rxo.4 - Requested Give Units
	if(rxo[&apos;rxo.4&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveUnits= convertCodedElementToJSON(rxo[&apos;rxo.4&apos;]);
	
	// rxo.5 - Requested Give Dosage Form
	if(rxo[&apos;rxo.5&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveDosageForm= convertCodedElementToJSON(rxo[&apos;rxo.5&apos;]);
	
	// rxo.6 - Provider&apos;s Treatment Instructions
	if(rxo[&apos;rxo.6&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.providerTreatmentInstructions= convertCodedElementToJSON(rxo[&apos;rxo.6&apos;]);
	
	// rxo.7 - Provider&apos;s Administration Instructions
	if(rxo[&apos;rxo.7&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.providerAdminInstructions= convertCodedElementToJSON(rxo[&apos;rxo.7&apos;]);
	
	// rxo.8 - Deliver-To Location
	if(rxo[&apos;rxo.8&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.deliverToLocation= convertLocationAddressVariationToJSON(rxo[&apos;rxo.8&apos;]);
	
	// rxo.9 - Allow Substitutions ID
	if(rxo[&apos;rxo.9&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.allowSubstitutions= rxo[&apos;rxo.9&apos;][&apos;rxo.9.1&apos;].toString();

	// rxo.10 - Requested Dispense Code
	if(rxo[&apos;rxo.10&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedDispenseCode= rxo[&apos;rxo.10&apos;][&apos;rxo.10.1&apos;].toString();

	// rxo.11 - Requested Dispense Amount
	if(rxo[&apos;rxo.11&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedDispenseAmount= rxo[&apos;rxo.10&apos;][&apos;rxo.11.1&apos;].toString();
	
	// rxo.12 - Requested Dispense Units
	if(rxo[&apos;rxo.12&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedDispenseUnits= convertCodedElementToJSON(rxo[&apos;rxo.12&apos;]);
	
	// rxo.13 - Number of Refills
	if(rxo[&apos;rxo.13&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.numberOfRefills= rxo[&apos;rxo.13&apos;][&apos;rxo.13.1&apos;].toString();
	
	// rxo.14 - Order Provider&apos;s DEA Number
	if(rxo[&apos;rxo.14&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.orderingProviderDEANumber=convertExtendedCompositeIDNumberAndNameToJSON(rxo[&apos;rxo.14&apos;]);
	
	// rxo.15 - Pharamcist/Treatment Supplier Verifier Id
	if(rxo[&apos;rxo.15&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.pharmacistSupplierVerifierId=convertExtendedCompositeIDNumberAndNameToJSON(rxo[&apos;rxo.15&apos;]); 

	// rxo.16 - Needs Human Review
	if(rxo[&apos;rxo.16&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.needsHumanReview= rxo[&apos;rxo.16&apos;][&apos;rxo.16.1&apos;].toString();

	// rxo.17 - Requested Give Per
	if(rxo[&apos;rxo.17&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGivePer= rxo[&apos;rxo.17&apos;][&apos;rxo.17.1&apos;].toString();

	// rxo.18 - Requested Give Strength
	if(rxo[&apos;rxo.18&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveStrength= rxo[&apos;rxo.18&apos;][&apos;rxo.18.1&apos;].toString();

	// rxo.19 - Requested Give Strength Units
	if(rxo[&apos;rxo.19&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveStrengthUnits= convertCodedElementToJSON(rxo[&apos;rxo.19&apos;]);

	// rxo.20 - Requested Give Indication
	if(rxo[&apos;rxo.20&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveIndication= convertCodedElementToJSON(rxo[&apos;rxo.20&apos;]);
	
	// rxo.21 - Requested Give Rate Amount
	if(rxo[&apos;rxo.21&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveRateAmount= rxo[&apos;rxo.23&apos;][&apos;rxo.21.1&apos;].toString();

	// rxo.22 - Requested Give Rate Units
	if(rxo[&apos;rxo.22&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveRateUnits= convertCodedElementToJSON(rxo[&apos;rxo.22&apos;]);
	
	// rxo.23 - Total Daily Dose
	if(rxo[&apos;rxo.23&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.totalDailyDose= convertCompositeQuantityWithUnitsToJSON(rxo[&apos;rxo.23&apos;]);
	
	// rxo.24 - Supplementary Code
	if(rxo[&apos;rxo.24&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.supplementaryCode= convertCodedElementToJSON(rxo[&apos;rxo.24&apos;]);

	// rxo.25 - Requested Give Drug Strength Volume
	if(rxo[&apos;rxo.25&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveDrugStengthVolume= rxo[&apos;rxo.25&apos;][&apos;rxo.25.1&apos;].toString();

	// rxo.26 - Give Drug Stength Volume Units
	if(rxo[&apos;rxo.26&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.requestedGiveDrugStengthVolumeUnits= convertCodedWithExceptionsToJSON(rxo[&apos;rxo.26&apos;]);
	
	// rxo.27 - Pharmacy Order Type
	if(rxo[&apos;rxo.27&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.pharmacyOrderType= rxo[&apos;rxo.27&apos;][&apos;rxo.27.1&apos;].toString();

	// rxo.28 - Dispensing Interval
	if(rxo[&apos;rxo.28&apos;].toString().length&gt;0) objPharmacyTreatmentOrder.dispensingInterval= rxo[&apos;rxo.28&apos;][&apos;rxo.28.1&apos;].toString();

	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objPharmacyTreatmentOrder= &apos;+objPharmacyTreatmentOrder);
		logger.error(scriptName+&apos;:DEBUG:: commonOrder= &apos;+JSON.stringify(objPharmacyTreatmentOrder));
	}
	
	channelMap.put(&apos;PharmacyTreatmentOrder&apos;,JSON.stringify(objPharmacyTreatmentOrder));
	return objPharmacyTreatmentOrder;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>1f72c115-ff36-4790-98ee-3876f305fdd8</id>
                <name>json_tq1_timing_quantity</name>
                <revision>1</revision>
                <lastModified>
                  <time>1650911273836</time>
                  <timezone>GMT-06:00</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Desc:  this JS code template is to parse HL7v2 TQ1 segment and return a Javascript object

	@param {String} orc - This will contains the XML representation of the HL7v2 TQ1 segment
	@return {String} return - Returning the Javascript object representation of the conveted HL7v2 TQ1 segment
	History:
	2022-04-07 jer - Created from json_tq1_timing_quantity(tq1) method to populate visit centric content
*/
function json_tq1_timing_quantity(tq1) {

	var scriptName= &apos;json_tq1_timing_quantity&apos;;
	var debug= 0;
	/*
	logger.error(scriptName+&apos;:DEBUG:: tq1= &apos;+tq1);;
	*/
	var objTimingQuantity= {};
	
	if(tq1[&apos;TQ1.1&apos;].toString().length&gt;0) objTimingQuantity.setId= tq1[&apos;TQ1.1&apos;][&apos;TQ1.1.1&apos;].toString();
	// 2022-04-07 jer - Added convertCompositeQuantityWithUnitsToJSON code template
	if(tq1[&apos;TQ1.2&apos;].toString().length&gt;0) objTimingQuantity.quantity= convertCompositeQuantityWithUnitsToJSON(tq1[&apos;TQ1.2&apos;]);
	if(tq1[&apos;TQ1.3&apos;].toString().length&gt;0) objTimingQuantity.repeatPattern= convertRepeatPatternToJSON(tq1[&apos;TQ1.3&apos;]);
	if(tq1[&apos;TQ1.4&apos;].toString().length&gt;0) objTimingQuantity.explicitTime= tq1[&apos;TQ1.4&apos;][&apos;TQ1.4.1&apos;].toString();
	if(tq1[&apos;TQ1.5&apos;].toString().length&gt;0) objTimingQuantity.relativeTimeAndUnits= convertCompositeQuantityWithUnitsToJSON(tq1[&apos;TQ1.5&apos;]);
	if(tq1[&apos;TQ1.6&apos;].toString().length&gt;0) objTimingQuantity.serviceDuration= convertCompositeQuantityWithUnitsToJSON(tq1[&apos;TQ1.6&apos;]);
	if(tq1[&apos;TQ1.7&apos;].toString().length&gt;0) objTimingQuantity.startDateTime= convertTimestampToJSON(tq1[&apos;TQ1.7&apos;]);
	if(tq1[&apos;TQ1.8&apos;].toString().length&gt;0) objTimingQuantity.endDateTime= convertTimestampToJSON(tq1[&apos;TQ1.8&apos;]);
	if(tq1[&apos;TQ1.9&apos;].toString().length&gt;0) objTimingQuantity.priority= convertCodedWithExceptionsToJSON(tq1[&apos;TQ1.9&apos;]);	
	if(tq1[&apos;TQ1.10&apos;].toString().length&gt;0) objTimingQuantity.conditionText= tq1[&apos;TQ1.10&apos;][&apos;TQ1.10.1&apos;].toString();
	if(tq1[&apos;TQ1.11&apos;].toString().length&gt;0) objTimingQuantity.textInstruction= tq1[&apos;TQ1.11&apos;][&apos;TQ1.11.1&apos;].toString();
	if(tq1[&apos;TQ1.12&apos;].toString().length&gt;0) objTimingQuantity.conjunction= tq1[&apos;TQ1.12&apos;][&apos;TQ1.12.1&apos;].toString();
	if(tq1[&apos;TQ1.13&apos;].toString().length&gt;0) objTimingQuantity.occurenceDuration= convertCompositeQuantityWithUnitsToJSON(tq1[&apos;TQ1.13&apos;]);
	if(tq1[&apos;TQ1.14&apos;].toString().length&gt;0) objTimingQuantity.totalOccurrences= tq1[&apos;TQ1.14&apos;][&apos;TQ1.14.1&apos;].toString();
	
	if(debug&gt;0) {
		logger.error(scriptName+&apos;:DEBUG:: objTimingQuantity= &apos;+objTimingQuantity);
		logger.error(scriptName+&apos;:DEBUG:: commonOrder= &apos;+JSON.stringify(objTimingQuantity));
	}
	
	channelMap.put(&apos;timingQuantity&apos;,JSON.stringify(objTimingQuantity));
	return objTimingQuantity;
	
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
            <name>WebPT-Common</name>
            <revision>2</revision>
            <lastModified>
              <time>1678715257049</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
                <name>Check if String contains</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122790</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
                <name>Check if String contains HTTP code</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122593</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8515e088-5c50-47ee-9e2f-9fad1ecf48bd</id>
                <name>Check if String is JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123309</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Added by Kirby Knight
	12/21/2020
	Test for JSON

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5f2f84ba-3e66-4be3-8260-8fbd8258bd92</id>
                <name>Check if the PDF is valid</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122055</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
//This function is used for checking the word &quot;PDF&quot; in inbound attachment.
function isValidBase64PDF(base64) {
	const ENCODED_PDF_SIGN = &quot;JVBERi&quot;; // %PDF sign
	const PDF_EOF = &quot;JSVFT0YNCg&quot;; // %EOF
	var pdfBase64Size = (base64.length() * (3 / 4)) - 1;
	
	return (base64.indexOf(ENCODED_PDF_SIGN) != -1 &amp;&amp; base64.indexOf(PDF_EOF) != -1 &amp;&amp; pdf_base64_size &gt; 36);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
                <name>Convert JSON date to HL7v2 date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122137</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
                <name>Convert JSON datetime to HL7v2 datetime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122430</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>bb21449a-df39-48c6-be52-24106c8df4c4</id>
                <name>Destination Formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Kirby Knight 03/10/2021
	
	This function will remove all other ROOT.Meta.Destinations nodes that are not passed in the
	destination variable and removes the ROOT.Meta.Destinations[x].Destination node

	@param {Any} destination - 
	@return {String} return description
*/
function formatDestinations(destination) {
var arrDestinations = msg[&apos;Meta&apos;][&apos;Destinations&apos;];
	//  Start at the end of the array because of the posibility of deleted array items 
	for (var i = arrDestinations.length - 1; i &gt;= 0; i--) {
		if (arrDestinations[i][&apos;Destination&apos;] == destination){
			delete arrDestinations[i][&apos;Destination&apos;]
		}else if (arrDestinations[i][&apos;Destination&apos;] != destination){
			arrDestinations.splice(i, 1);
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
                <name>Extract JSON node data</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121748</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7ed44f8a-fa40-4f3e-9426-3021604eabe0</id>
                <name>Get Feature Value by Name and Database</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123262</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns a string containing the feature value (system property) for a specific client database.

	@param {String} featureName - name of the feature, ie: &quot;BetterPTBidirectionalScheduling&quot;
	@param {String} databaseIdentifier - database name or databaseID / TenantID
	@param {String} databaseIdentifierType - what value is provided in databaseIdentifier. current options include &quot;ID&quot; or &quot;NAME&quot;
	@return {String} returns feature value
*/
function getFeatureValueByNameDatabase(featureName, databaseIdentifier, databaseIdentifierType) {
	var paramList = new Packages.java.util.ArrayList();
	paramList.add(featureName);
	paramList.add(databaseIdentifier);
	paramList.add(databaseIdentifierType);
	
	var sSQL = &apos;EXEC [dbo].[pr_FeatureValueByNameDatabase] ?, ?, ?&apos;;
	
	try {
		var result = executeSharedDBStatementFhirCh(sSQL, true, paramList);
		var featureValue ;
		if(result.next()){			//Added
		 featureValue = result.getString(1);
		}
		return featureValue;
	} catch (e) {
		logger.error(e);
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>9842be2c-c633-42ac-87f1-f91aca9e370f</id>
                <name>JSON Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121776</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function populates the MR and PI patient IDS to channelMap

	@return {String} return description
*/
function jsonPatientIds() {
	for each (patId in msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) {
	if (patId[&apos;IDType&apos;].toString() == &apos;MR&apos;){
		channelMap.put(&apos;extPatId&apos;, patId[&apos;ID&apos;].toString());
	}else if(patId[&apos;IDType&apos;].toString() == &apos;PI&apos;){
		channelMap.put(&apos;patId&apos;, patId[&apos;ID&apos;].toString());
	}
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
                <name>Verify JSON node for existance</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>394664c0-d536-4310-970e-181dc03ee7da</id>
            <name>WebPT-Conversions</name>
            <revision>2</revision>
            <lastModified>
              <time>1690140133427</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
                <name>Convert FHIR codes to HL7v2 codes</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122899</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>2fc8cbf3-0d92-4d1d-a3d6-136c09bd9f2a</id>
            <name>WebPT-Custom Database Functions</name>
            <revision>4</revision>
            <lastModified>
              <time>1690570753962</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>23c0b510-63e4-40fa-a4e1-7b2b92ce9a96</id>
                <name>Execute Statement Shared DB Conn clientDb Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122401</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Executes a SQL statement using a shared database connection stored in the Global Map. If the
connection does not exist, creates it.

@param {String} statement - The SQL statement to execute
@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
@param {List} paramList - A Java List object containing the parameters for the statement (optional)
 */
function executeSharedDBStatementclientDbCh(statement, isQuery, paramList) {
    var result;

    try {
        var dbConnclientDbCh = globalChannelMap.get(&quot;dbConnclientDbCh&quot;);

        if (dbConnclientDbCh == null || dbConnclientDbCh.getConnection().isClosed()) {
            dbConnclientDbCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;), $(&apos;dbClient&apos;), $(&apos;dbUserFhir&apos;), $(&apos;dbPwFhir&apos;));
            globalChannelMap.put(&quot;dbConnclientDbCh&quot;, dbConnclientDbCh);
        }

        if (paramList == undefined) {
            paramList = new Packages.java.util.ArrayList();
        }

        if (isQuery) {
            result = dbConnclientDbCh.executeCachedQuery(statement, paramList);
        } else {
            result = dbConnclientDbCh.executeUpdate(statement, paramList);
        }
    } catch (e) {
        logger.error(e);
    }
    finally {
        return result;
    }
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4efb3110-a83f-48b5-93ad-79c847b51865</id>
                <name>Execute Statement Shared DB Conn clntAcl Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123455</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClntAclCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnClntAclCh = globalChannelMap.get(&quot;dbConnClntAclCh&quot;);

		if (dbConnClntAclCh == null || dbConnClntAclCh.getConnection().isClosed())
		{
			dbConnClntAclCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbClntAcl&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnClntAclCh&quot;, dbConnClntAclCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnClntAclCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnClntAclCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>d96d45dd-57f7-4aa9-9bf4-e464d31b94c6</id>
                <name>Execute Statement Shared DB Conn FHIR</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121922</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhir(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhir.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhir.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6014068e-c021-4a38-9fa6-6f38f6a2cdab</id>
                <name>Execute Statement Shared DB Conn FHIR Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123492</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhirCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhirCh = globalChannelMap.get(&quot;dbConnFhirCh&quot;);

		if (dbConnFhirCh == null || dbConnFhirCh.getConnection().isClosed())
		{
			dbConnFhirCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnFhirCh&quot;, dbConnFhirCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhirCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhirCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fbd5c4a1-b816-4496-acdf-067005f1d376</id>
                <name>Execute Statement Shared DB Conn Translations Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123008</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementTranslationsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnTranslationsCh = globalChannelMap.get(&quot;dbConnTranslationsCh&quot;);

		if (dbConnTranslationsCh == null || dbConnTranslationsCh.getConnection().isClosed())
		{
			dbConnTranslationsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlTranslations&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnTranslationsCh&quot;, dbConnTranslationsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnTranslationsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnTranslationsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5d1a5577-4ba4-4d1e-b6cd-e2d924164909</id>
                <name>Execute Statement with Shared DB Conn ODS Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122280</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdsCh = globalChannelMap.get(&quot;dbConnOdsCh&quot;);

		if (dbConnOdsCh == null || dbConnOdsCh.getConnection().isClosed())
		{
			dbConnOdsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOds&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdsCh&quot;, dbConnOdsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>3991db14-0c0b-4123-952c-5164c1ded501</id>
                <name>Execute Statement with Shared DB Conn ODW Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122960</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.  THis connects to the ODW db in Azure

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdwCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdwCh = globalChannelMap.get(&quot;dbConnOdwCh&quot;);

		if (dbConnOdwCh == null || dbConnOdwCh.getConnection().isClosed())
		{
			dbConnOdwCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOdw&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdwCh&quot;, dbConnOdwCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdwCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdwCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fae08c88-7550-479a-b8ed-ffef47e8eed9</id>
                <name>executeSharedDBStatementClient</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121956</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClient(statement, isQuery, paramList, dbname)
{
	var result;
 	var dburl= &apos;jdbc:sqlserver://AZW1DEV-SQL02.clinicient.com:1433;databaseName=&apos;+dbname+&apos;&apos;;
	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),dburl,$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			
			//globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		result = dbConnFhir.executeCachedQuery(statement);
	
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>ed20a457-5beb-4aea-9bb9-cf91112ccc56</id>
            <name>WebPT-Default Functions</name>
            <revision>10</revision>
            <lastModified>
              <time>1690140133487</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>a8a9a0c8-9322-46dc-bef8-011eb3d70291</id>
                <name>Create Header for CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121678</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This creates a header for csv files based on the contents of the header variable.  The header
	variable is populated in the channel from the outbound msg template

	@return {String} return description
*/
function createHeader() {
	//Destination transformer.  this creates the header for each new file

	var path = java.nio.file.Paths.get($(&apos;filePath&apos;)+$(&apos;fileName&apos;));
	var bytes = (new java.lang.String($(&apos;header&apos;))).getBytes(&quot;UTF-8&quot;);
	try {
	  java.nio.file.Files.write(path, bytes, java.nio.file.StandardOpenOption.CREATE_NEW);
	}
	catch (e) {
	  //logger.info(&quot; should throw IOException if file already exists&quot;);
	
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5a886a1f-dab1-41b5-94c6-1a639907d7da</id>
                <name>Filter Message Evaluate Received Checksum</name>
                <revision>33</revision>
                <lastModified>
                  <time>1678916806664</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating a checksum for each provided message.  We save off the most recent 100 unique checksum values in a global 
	array so if the current message has been recently received we are able to ignore it.
	
	@author:  	Jeffrey Ritz
	@scriptName: 	filterEvaluateReceivedChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {boolean} filter - return filter boolean (true= filter msg, false= do not filter msg)
		persist received_checksum global ChannelMap array
		persist filterMessage ChannelMap variable
	@history
*/
function filterEvaluateReceivedChecksum(msg) {	

	var scriptName= &apos;filterEvaluateReceivedChecksum&apos;
	var filter = false;
	var received_len_limit = 999;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B connectorMessage.getRawData() typeof: &apos;+typeof(connectorMessage.getRawData())+&apos; msg: &apos;+connectorMessage.getRawData());
	} // end if 
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	// var dataBytes = new java.lang.String(connectorMessage.getRawData()).getBytes(&apos;UTF-8&apos;);
	// message = new String(message.getBytes(&quot;utf-8&quot;), &quot;utf-8&quot;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	// var dataBytes = new java.lang.String(msg.getBytes(&apos;UTF-8&apos;));
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);

	// var messageObjectgetBytes= checksum.update(connectorMessage.getRawData().getBytes());
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 
	
	$c(&apos;checksum&apos;, checksum.getValue());
	
	//grab the global channel map variable holding the last X unique checksums that we&apos;ve received
	var received = $gc(&apos;received_checksums&apos;);
	
	if (received == undefined) {
		var received = new Array();
		received.push(checksum.getValue());
	} else {
		//check if we&apos;ve recently received this message, skip it if so
		if (received.indexOf(checksum.getValue()) &gt; -1) {
			filter = true;
		//we haven&apos;t seen it recently, so remember it and allow it through
		} else {
			var received_len = received.length;
			if (received_len &gt; received_len_limit) {
				//remove oldest/first entry, shift all entries forward, and add new entry to end
				received.shift();
				received[received_len_limit] = checksum.getValue();
			} else {
				//add new entry to end of array
				received[received_len] = checksum.getValue();
			} // end if 
		} // end if 
	} // end if 

	 //debug code
	/*for (x=0; x&lt;=received_len_limit; x++) {
		$c(&apos;received-&apos;+x, received[x]);
	} */

	$c(&apos;filterMessage&apos;,filter);
	$gc(&apos;received_checksums&apos;,received);

	return filter;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fbd0484d-74a2-48e4-aedd-f97c2fcefa16</id>
                <name>Get Message Checksum</name>
                <revision>12</revision>
                <lastModified>
                  <time>1678916806703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating and reutrning a checksum for each provided message
	
	@author:  	Jeffrey Ritz
	@scriptName: 	getMessageChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {object} result - return checksum value
	@history
	2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() to remove the exponential representation of the number value
*/
function getMessageChecksum(msg) {	

	var scriptName= &apos;getMessageChecksum&apos;;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	} // end if 
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 

	var checksumValue= checksum.getValue();
	// 2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() 
	var arrChecksumValue= new Array(); 
	arrChecksumValue.push(checksumValue);
	$c(&apos;checksum&apos;, arrChecksumValue);

	return checksumValue;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>91db9bd1-ca92-4dcc-bba4-e1ece603fc87</id>
                <name>Remove Child Object From Parent Object Json</name>
                <revision>22</revision>
                <lastModified>
                  <time>1678916845037</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON child object and it&apos;s descendents from a parent object JSON
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeChildObjectFromParentObjectJson.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
		{string} parentObject - place the name of the string to be designated as the parent object in the JSON
		{string} childObject  - place the name of the string to be designated as the child object to be deleted from the JSON
	@param {object} msg - return modified Json object msg excluding specified Json child object
	@history
*/
function removeChildObjectFromParentObjectJson(msg, parentObject, childObject) {
	
	var scriptName= &apos;removeChildObjectFromParentObjectJson&apos;;
	var debug= 0;

	//var strObjJson= JSON.parse(msg);
	var strObjJson= JSON.stringify(msg);
	
	//var objJson= JSON.parse(msg);
	var newParentObjects= new Object();
	var parentObjects= msg;
	var arrParentObjects= new Array();
	var arrTransactionObjects= new Array();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof parentObjects: &apos;+typeof(parentObjects));
	for (var key in parentObjects) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof key: &apos;+typeof(key)+&apos; key: &apos;+key);
		if(key== parentObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof objJson[key]: &apos;+typeof(parentObjects[key])+&apos; parentObjects[key]: &apos;+JSON.stringify(parentObjects[key]));
			
			var newChildObjects= new Object();
			var childObjects= parentObjects[key];
			var arrChildObjects= new Array();
			
			for(var key2 in childObjects) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key2: &apos;+typeof(key2)+&apos; key2: &apos;+key2+&apos; childObject: &apos;+childObject);
				for(var key3 in childObjects[key2]) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key3: &apos;+typeof(key3)+&apos; key3: &apos;+key3+&apos; childObject: &apos;+childObject);
					if(key3== childObject) {
						var transactionObject= new Object();
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; childObject typeof: &apos;+typeof(childObjects[key2][key3])+&apos; childObject: &apos;+JSON.stringify(childObjects[key2][key3]));
						transactionObject.key= key3;
						transactionObject.value= childObjects[key2][key3];
						delete childObjects[key2][key3];
						if(debug&gt;0) logger.info(&apos;DEBUG::&apos;+scriptName+&apos; DELETE childObject: &apos;+key3+&apos; of parentObject: &apos;+JSON.stringify(childObjects[key2]));
						arrTransactionObjects.push(transactionObject);
					} // end if
				} // end for 
				arrChildObjects.push(childObjects[key2]);
			} // end for
			newParentObjects[key]= arrChildObjects;
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add all child keys: &apos;+JSON.stringify(arrChildObjects)+&apos; into ParentObject[&apos;+key+&apos;]: &apos;+newParentObjects[key]);
		} else {
			newParentObjects[key]= parentObjects[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+parentObjects[key]+&apos; string: &apos;+JSON.stringify(parentObjects[key]));
		} // end if
		arrParentObjects.push(newParentObjects);
	} // end for 
	var newMsg= arrParentObjects;
	channelMap.put(&apos;removeChildObjectMsg&apos;,newMsg);
	channelMap.put(&apos;removedChildTransIds&apos;,arrTransactionObjects);
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));
	return newMsg;
	
} </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2ff28338-dfb6-445d-a04e-c74b5486a08c</id>
                <name>Remove Object From Json</name>
                <revision>24</revision>
                <lastModified>
                  <time>1678915278542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON object and it&apos;s descendents from the msg
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeObjectFromJson.js
	@created: 	2023-03-09
	@param {string} msg - Inbound connectorMessage.getRawData()
	@param {string} msg - return modified msg excluding specified Json object from msg
	@history
	2023-03-15 JER - Modified to include removeObject function parameter to specify specific JSON object by referencing key to be removed
*/
function removeObjectFromJson(msg, removeObject) {
	
	var scriptName= &apos;removeObjectFromJson&apos;;
	var debug= 0;
	//var objJson= JSON.stringify(msg);
	var objJson= JSON.parse(msg);
	var newObjJson= new Object();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof objJson: &apos;+typeof(objJson)+&apos; objJSON: &apos;+JSON.stringify(objJson));
	for (var key in objJson) {
		if(key== removeObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; DELETE key: &apos;+key);
			// delete objJson[key];
		} else {
			newObjJson[key]= objJson[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+objJson[key]+&apos; string: &apos;+JSON.stringify(objJson[key]));
		} // end if 
	} // end for 
	var newMsg= newObjJson;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));

	// return JSON.stringify(newMsg);
	return newMsg;
} 
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>993a6fd8-454a-4133-ba32-dbcfea71582b</id>
                <name>Update EDITransactionLog</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123233</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	The purpose of this function is to update the status in Insight.
	Populate the channel map with the following variables functionalGroupControlNumber, status, eventDate

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateStatus () {

	//  Build the llst of paramters to pass to the database
	var paramList = new Packages.java.util.ArrayList();
	paramList.add($(&apos;functionalGroupControlNumber&apos;));
	paramList.add($(&apos;eventDate&apos;));  //dateTime in the acknoledged field in this format (&quot;2017-07-31 14:15:01.577&quot;)
	paramList.add(new java.lang.Integer(parseInt($(&apos;status&apos;), 10)));
	
//	logger.info(&quot;updateStatus &quot;+paramList);

	//  SQL Statement and paramters that will be sent to SQL
	var statement = &quot;EXEC dbo.pr_EDITransactionLog_Update ?, ?, ?&quot;;
	//  Code template used for establishiing connection and passing the sql statement and parameter list  
	var result = executeSharedDBStatementFhirCh(statement, false, paramList);
	return result;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>42cb290e-5fb0-46b8-82db-576ea1e1ba0d</id>
                <name>Update EDITransactionLog from responseStatus in the response transformer </name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123356</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Call this in the response transformer on the destination.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateReponseStatus() {
	var status = 0;
	if (responseStatus == SENT){
		var status = 1;
		channelMap.put(&apos;status&apos;,status);
	}

updateStatus()
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2223579b-f914-4be7-a575-f1a2a2aa1ae2</id>
                <name>ValidateToString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123044</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} mapping - 
	@param {Any} defaultValue - 
	@param {Any} replacement - 
	@return {String} return description
*/
function validateToString(mapping, defaultValue, replacement) {
    if (mapping == null) {
        mapping = &apos;&apos;;
    }
    return validate(mapping, defaultValue, replacement).toString() + &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>8c9a8268-4ef0-43e9-ae5b-bf8895f0b80c</id>
            <name>WebPT-FORMAT</name>
            <revision>3</revision>
            <lastModified>
              <time>1691001755225</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>Include any functions or codes with 
-date &amp; time formating related
-data type formatting</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>920c9ead-70a6-4168-9d95-89261b73ae44</id>
                <name>12digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123520</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Take any 12 digit string yyyyMMddHHmm and change to MM/dd/yyyy HH:mm 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm
*/
function yyyyMMddHHmm(string) {
	return DateUtil.convertDate(&quot;yyyyMMddHHmm&quot;, &quot;MM/dd/yyyy HH:mm&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fe2689ec-1946-46d5-8dd6-8fbbf106e1e6</id>
                <name>14digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122871</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Take 14 digit string yyyyMMddHHmmss and change to MM/dd/yyyy HH:mm:ss 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm:ss
*/
function yyyyMMddHHmmss(string) {
	if (string.length == 14) {
		  return DateUtil.convertDate(&quot;yyyyMMddHHmmss&quot;, &quot;MM/dd/yyyy HH:mm:ss&quot;, string);
	}
	else {
		return &quot;unregcognized string&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b9db35e2-d5bd-48a1-8cc6-3475c698d7b4</id>
                <name>currentDT_yyyy-MM-dd HH:mm:ss.SSS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123114</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Kirby Knight
	Date Modified:  11/09/2020
	Retund the current date/time down to the millisecond

	@return {String} return description
*/
function currentDtToMilliseconds() {
	return DateUtil.getCurrentDate(&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7e747999-4bec-43fc-978d-7049d3543cf0</id>
                <name>fixHL7NodeOrder</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/

function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>dfedacf6-773b-413e-b78d-1bf16a92071d</id>
                <name>formatHL7Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121643</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Take any eight digit HL7 message data string (yyyyMMdd) and formats it human-readable format (MM/dd/yyyy)
	such as 20090612 -&gt; 06/12/2009

	@param {String} arg1 - 8 digit HL7 message data string yyyyMMdd
	@return {String} return date format as MM/dd/yyyy
*/
function formatHL7Date(string) {
	return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;MM/dd/yyyy&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a8f54921-2cb6-4134-8806-3c4e10a757d9</id>
                <name>getCurrentLocalTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122014</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = getCurrentLocalTimestamp();

	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestamp() {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(&quot;EST&quot;)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6c5f1bd8-ebbf-4c8e-b465-0be8ccaba0d0</id>
                <name>getCurrentLocalTimeToMs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123077</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	Gets the current local date/time to the milliseconds
	Converts to the timezone that is passed in Examples (America/New_York, America/Chicago, America/Phoenix )

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestampToMs(timeZone) {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timeZone)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>78d74c5b-c881-404a-ad96-4e909e1a19f3</id>
                <name>phoneToE164</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121982</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Insight phone number to E164 format 5554446666 to +15554446666

	@param {Any} phoneIn - 
	@return {String} return description
*/
function phoneToE164(phoneIn) {
	logger.info(&apos;L1 &apos;+phoneIn);
	if(phoneIn != null ){
	//phoneIn = &apos;+1&apos; + phoneIn.toString(); 
	logger.info(&apos;L2 &apos;+phoneIn);
	return &apos;+1&apos; + phoneIn.toString(); 
	} else{
		return null;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>6a32d94d-408c-4e10-9799-e45e150b5c1f</id>
            <name>WebPT-MISC</name>
            <revision>3</revision>
            <lastModified>
              <time>1690987207668</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>miscellaneous javascript</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>84b4f1c7-f82d-4140-9fbd-98a95f68ff32</id>
                <name>getChannelState</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122648</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetChannelState(channel_id) {

    var channel_status = &quot;NA&quot;;

    var channel_count = parseInt(Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().size());

    for(var i=0;i&lt;channel_count;i++) {
        if (channel_id == Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getChannelId()) {
            channel_status = Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getState();
        }
    }

    return channel_status;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>715435a9-cb15-4e8f-bc5b-4249eaea6e17</id>
                <name>momentjs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122487</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Testing MIRTH-3794 using external JavaScript library &quot;moment.js&quot;
*/
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=b():&quot;function&quot;==typeof define&amp;&amp;define.amd?define(b):a.moment=b()}(this,function(){&quot;use strict&quot;;function a(){return Hc.apply(null,arguments)}function b(a){Hc=a}function c(a){return&quot;[object Array]&quot;===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||&quot;[object Date]&quot;===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c&lt;a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&amp;&amp;(a[c]=b[c]);return f(b,&quot;toString&quot;)&amp;&amp;(a.toString=b.toString),f(b,&quot;valueOf&quot;)&amp;&amp;(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ca(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&amp;&amp;(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow&lt;0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&amp;&amp;(a._isValid=a._isValid&amp;&amp;0===b.charsLeftOver&amp;&amp;0===b.unusedTokens.length&amp;&amp;void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if(&quot;undefined&quot;!=typeof b._isAMomentObject&amp;&amp;(a._isAMomentObject=b._isAMomentObject),&quot;undefined&quot;!=typeof b._i&amp;&amp;(a._i=b._i),&quot;undefined&quot;!=typeof b._f&amp;&amp;(a._f=b._f),&quot;undefined&quot;!=typeof b._l&amp;&amp;(a._l=b._l),&quot;undefined&quot;!=typeof b._strict&amp;&amp;(a._strict=b._strict),&quot;undefined&quot;!=typeof b._tzm&amp;&amp;(a._tzm=b._tzm),&quot;undefined&quot;!=typeof b._isUTC&amp;&amp;(a._isUTC=b._isUTC),&quot;undefined&quot;!=typeof b._offset&amp;&amp;(a._offset=b._offset),&quot;undefined&quot;!=typeof b._pf&amp;&amp;(a._pf=j(b)),&quot;undefined&quot;!=typeof b._locale&amp;&amp;(a._locale=b._locale),Jc.length&gt;0)for(c in Jc)d=Jc[c],e=b[d],&quot;undefined&quot;!=typeof e&amp;&amp;(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),Kc===!1&amp;&amp;(Kc=!0,a.updateOffset(this),Kc=!1)}function o(a){return a instanceof n||null!=a&amp;&amp;null!=a._isAMomentObject}function p(a){return 0&gt;a?Math.ceil(a):Math.floor(a)}function q(a){var b=+a,c=0;return 0!==b&amp;&amp;isFinite(b)&amp;&amp;(c=p(b)),c}function r(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e&gt;d;d++)(c&amp;&amp;a[d]!==b[d]||!c&amp;&amp;q(a[d])!==q(b[d]))&amp;&amp;g++;return g+f}function s(){}function t(a){return a?a.toLowerCase().replace(&quot;_&quot;,&quot;-&quot;):a}function u(a){for(var b,c,d,e,f=0;f&lt;a.length;){for(e=t(a[f]).split(&quot;-&quot;),b=e.length,c=t(a[f+1]),c=c?c.split(&quot;-&quot;):null;b&gt;0;){if(d=v(e.slice(0,b).join(&quot;-&quot;)))return d;if(c&amp;&amp;c.length&gt;=b&amp;&amp;r(e,c,!0)&gt;=b-1)break;b--}f++}return null}function v(a){var b=null;if(!Lc[a]&amp;&amp;&quot;undefined&quot;!=typeof module&amp;&amp;module&amp;&amp;module.exports)try{b=Ic._abbr,require(&quot;./locale/&quot;+a),w(b)}catch(c){}return Lc[a]}function w(a,b){var c;return a&amp;&amp;(c=&quot;undefined&quot;==typeof b?y(a):x(a,b),c&amp;&amp;(Ic=c)),Ic._abbr}function x(a,b){return null!==b?(b.abbr=a,Lc[a]=Lc[a]||new s,Lc[a].set(b),w(a),Lc[a]):(delete Lc[a],null)}function y(a){var b;if(a&amp;&amp;a._locale&amp;&amp;a._locale._abbr&amp;&amp;(a=a._locale._abbr),!a)return Ic;if(!c(a)){if(b=v(a))return b;a=[a]}return u(a)}function z(a,b){var c=a.toLowerCase();Mc[c]=Mc[c+&quot;s&quot;]=Mc[b]=a}function A(a){return&quot;string&quot;==typeof a?Mc[a]||Mc[a.toLowerCase()]:void 0}function B(a){var b,c,d={};for(c in a)f(a,c)&amp;&amp;(b=A(c),b&amp;&amp;(d[b]=a[c]));return d}function C(b,c){return function(d){return null!=d?(E(this,b,d),a.updateOffset(this,c),this):D(this,b)}}function D(a,b){return a._d[&quot;get&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b]()}function E(a,b,c){return a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b](c)}function F(a,b){var c;if(&quot;object&quot;==typeof a)for(c in a)this.set(c,a[c]);else if(a=A(a),&quot;function&quot;==typeof this[a])return this[a](b);return this}function G(a,b,c){var d=&quot;&quot;+Math.abs(a),e=b-d.length,f=a&gt;=0;return(f?c?&quot;+&quot;:&quot;&quot;:&quot;-&quot;)+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function H(a,b,c,d){var e=d;&quot;string&quot;==typeof d&amp;&amp;(e=function(){return this[d]()}),a&amp;&amp;(Qc[a]=e),b&amp;&amp;(Qc[b[0]]=function(){return G(e.apply(this,arguments),b[1],b[2])}),c&amp;&amp;(Qc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function I(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,&quot;&quot;):a.replace(/\\/g,&quot;&quot;)}function J(a){var b,c,d=a.match(Nc);for(b=0,c=d.length;c&gt;b;b++)Qc[d[b]]?d[b]=Qc[d[b]]:d[b]=I(d[b]);return function(e){var f=&quot;&quot;;for(b=0;c&gt;b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function K(a,b){return a.isValid()?(b=L(b,a.localeData()),Pc[b]=Pc[b]||J(b),Pc[b](a)):a.localeData().invalidDate()}function L(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Oc.lastIndex=0;d&gt;=0&amp;&amp;Oc.test(a);)a=a.replace(Oc,c),Oc.lastIndex=0,d-=1;return a}function M(a){return&quot;function&quot;==typeof a&amp;&amp;&quot;[object Function]&quot;===Object.prototype.toString.call(a)}function N(a,b,c){dd[a]=M(b)?b:function(a){return a&amp;&amp;c?c:b}}function O(a,b){return f(dd,a)?dd[a](b._strict,b._locale):new RegExp(P(a))}function P(a){return a.replace(&quot;\\&quot;,&quot;&quot;).replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,&quot;\\$&amp;&quot;)}function Q(a,b){var c,d=b;for(&quot;string&quot;==typeof a&amp;&amp;(a=[a]),&quot;number&quot;==typeof b&amp;&amp;(d=function(a,c){c[b]=q(a)}),c=0;c&lt;a.length;c++)ed[a[c]]=d}function R(a,b){Q(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function S(a,b,c){null!=b&amp;&amp;f(ed,a)&amp;&amp;ed[a](b,c._a,c,a)}function T(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function U(a){return this._months[a.month()]}function V(a){return this._monthsShort[a.month()]}function W(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12&gt;d;d++){if(e=h([2e3,d]),c&amp;&amp;!this._longMonthsParse[d]&amp;&amp;(this._longMonthsParse[d]=new RegExp(&quot;^&quot;+this.months(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;),this._shortMonthsParse[d]=new RegExp(&quot;^&quot;+this.monthsShort(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;)),c||this._monthsParse[d]||(f=&quot;^&quot;+this.months(e,&quot;&quot;)+&quot;|^&quot;+this.monthsShort(e,&quot;&quot;),this._monthsParse[d]=new RegExp(f.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),c&amp;&amp;&quot;MMMM&quot;===b&amp;&amp;this._longMonthsParse[d].test(a))return d;if(c&amp;&amp;&quot;MMM&quot;===b&amp;&amp;this._shortMonthsParse[d].test(a))return d;if(!c&amp;&amp;this._monthsParse[d].test(a))return d}}function X(a,b){var c;return&quot;string&quot;==typeof b&amp;&amp;(b=a.localeData().monthsParse(b),&quot;number&quot;!=typeof b)?a:(c=Math.min(a.date(),T(a.year(),b)),a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+&quot;Month&quot;](b,c),a)}function Y(b){return null!=b?(X(this,b),a.updateOffset(this,!0),this):D(this,&quot;Month&quot;)}function Z(){return T(this.year(),this.month())}function $(a){var b,c=a._a;return c&amp;&amp;-2===j(a).overflow&amp;&amp;(b=c[gd]&lt;0||c[gd]&gt;11?gd:c[hd]&lt;1||c[hd]&gt;T(c[fd],c[gd])?hd:c[id]&lt;0||c[id]&gt;24||24===c[id]&amp;&amp;(0!==c[jd]||0!==c[kd]||0!==c[ld])?id:c[jd]&lt;0||c[jd]&gt;59?jd:c[kd]&lt;0||c[kd]&gt;59?kd:c[ld]&lt;0||c[ld]&gt;999?ld:-1,j(a)._overflowDayOfYear&amp;&amp;(fd&gt;b||b&gt;hd)&amp;&amp;(b=hd),j(a).overflow=b),a}function _(b){a.suppressDeprecationWarnings===!1&amp;&amp;&quot;undefined&quot;!=typeof console&amp;&amp;console.warn&amp;&amp;console.warn(&quot;Deprecation warning: &quot;+b)}function aa(a,b){var c=!0;return g(function(){return c&amp;&amp;(_(a+&quot;\n&quot;+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function ba(a,b){od[a]||(_(b),od[a]=!0)}function ca(a){var b,c,d=a._i,e=pd.exec(d);if(e){for(j(a).iso=!0,b=0,c=qd.length;c&gt;b;b++)if(qd[b][1].exec(d)){a._f=qd[b][0];break}for(b=0,c=rd.length;c&gt;b;b++)if(rd[b][1].exec(d)){a._f+=(e[6]||&quot; &quot;)+rd[b][0];break}d.match(ad)&amp;&amp;(a._f+=&quot;Z&quot;),va(a)}else a._isValid=!1}function da(b){var c=sd.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ca(b),void(b._isValid===!1&amp;&amp;(delete b._isValid,a.createFromInputFallback(b))))}function ea(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970&gt;a&amp;&amp;h.setFullYear(a),h}function fa(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970&gt;a&amp;&amp;b.setUTCFullYear(a),b}function ga(a){return ha(a)?366:365}function ha(a){return a%4===0&amp;&amp;a%100!==0||a%400===0}function ia(){return ha(this.year())}function ja(a,b,c){var d,e=c-b,f=c-a.day();return f&gt;e&amp;&amp;(f-=7),e-7&gt;f&amp;&amp;(f+=7),d=Da(a).add(f,&quot;d&quot;),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ka(a){return ja(a,this._week.dow,this._week.doy).week}function la(){return this._week.dow}function ma(){return this._week.doy}function na(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function oa(a){var b=ja(this,1,4).week;return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function pa(a,b,c,d,e){var f,g=6+e-d,h=fa(a,0,1+g),i=h.getUTCDay();return e&gt;i&amp;&amp;(i+=7),c=null!=c?1*c:e,f=1+g+7*(b-1)-i+c,{year:f&gt;0?a:a-1,dayOfYear:f&gt;0?f:ga(a-1)+f}}function qa(a){var b=Math.round((this.clone().startOf(&quot;day&quot;)-this.clone().startOf(&quot;year&quot;))/864e5)+1;return null==a?b:this.add(a-b,&quot;d&quot;)}function ra(a,b,c){return null!=a?a:null!=b?b:c}function sa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ta(a){var b,c,d,e,f=[];if(!a._d){for(d=sa(a),a._w&amp;&amp;null==a._a[hd]&amp;&amp;null==a._a[gd]&amp;&amp;ua(a),a._dayOfYear&amp;&amp;(e=ra(a._a[fd],d[fd]),a._dayOfYear&gt;ga(e)&amp;&amp;(j(a)._overflowDayOfYear=!0),c=fa(e,0,a._dayOfYear),a._a[gd]=c.getUTCMonth(),a._a[hd]=c.getUTCDate()),b=0;3&gt;b&amp;&amp;null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7&gt;b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[id]&amp;&amp;0===a._a[jd]&amp;&amp;0===a._a[kd]&amp;&amp;0===a._a[ld]&amp;&amp;(a._nextDay=!0,a._a[id]=0),a._d=(a._useUTC?fa:ea).apply(null,f),null!=a._tzm&amp;&amp;a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&amp;&amp;(a._a[id]=24)}}function ua(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=ra(b.GG,a._a[fd],ja(Da(),1,4).year),d=ra(b.W,1),e=ra(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=ra(b.gg,a._a[fd],ja(Da(),f,g).year),d=ra(b.w,1),null!=b.d?(e=b.d,f&gt;e&amp;&amp;++d):e=null!=b.e?b.e+f:f),h=pa(c,d,e,g,f),a._a[fd]=h.year,a._dayOfYear=h.dayOfYear}function va(b){if(b._f===a.ISO_8601)return void ca(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=&quot;&quot;+b._i,i=h.length,k=0;for(e=L(b._f,b._locale).match(Nc)||[],c=0;c&lt;e.length;c++)f=e[c],d=(h.match(O(f,b))||[])[0],d&amp;&amp;(g=h.substr(0,h.indexOf(d)),g.length&gt;0&amp;&amp;j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Qc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),S(f,d,b)):b._strict&amp;&amp;!d&amp;&amp;j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length&gt;0&amp;&amp;j(b).unusedInput.push(h),j(b).bigHour===!0&amp;&amp;b._a[id]&lt;=12&amp;&amp;b._a[id]&gt;0&amp;&amp;(j(b).bigHour=void 0),b._a[id]=wa(b._locale,b._a[id],b._meridiem),ta(b),$(b)}function wa(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&amp;&amp;12&gt;b&amp;&amp;(b+=12),d||12!==b||(b=0),b):b}function xa(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e&lt;a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&amp;&amp;(b._useUTC=a._useUTC),b._f=a._f[e],va(b),k(b)&amp;&amp;(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d&gt;f)&amp;&amp;(d=f,c=b));g(a,c||b)}function ya(a){if(!a._d){var b=B(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ta(a)}}function za(a){var b=new n($(Aa(a)));return b._nextDay&amp;&amp;(b.add(1,&quot;d&quot;),b._nextDay=void 0),b}function Aa(a){var b=a._i,e=a._f;return a._locale=a._locale||y(a._l),null===b||void 0===e&amp;&amp;&quot;&quot;===b?l({nullInput:!0}):(&quot;string&quot;==typeof b&amp;&amp;(a._i=b=a._locale.preparse(b)),o(b)?new n($(b)):(c(e)?xa(a):e?va(a):d(b)?a._d=b:Ba(a),a))}function Ba(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):&quot;string&quot;==typeof f?da(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ta(b)):&quot;object&quot;==typeof f?ya(b):&quot;number&quot;==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ca(a,b,c,d,e){var f={};return&quot;boolean&quot;==typeof c&amp;&amp;(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,za(f)}function Da(a,b,c,d){return Ca(a,b,c,d,!1)}function Ea(a,b){var d,e;if(1===b.length&amp;&amp;c(b[0])&amp;&amp;(b=b[0]),!b.length)return Da();for(d=b[0],e=1;e&lt;b.length;++e)(!b[e].isValid()||b[e][a](d))&amp;&amp;(d=b[e]);return d}function Fa(){var a=[].slice.call(arguments,0);return Ea(&quot;isBefore&quot;,a)}function Ga(){var a=[].slice.call(arguments,0);return Ea(&quot;isAfter&quot;,a)}function Ha(a){var b=B(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=y(),this._bubble()}function Ia(a){return a instanceof Ha}function Ja(a,b){H(a,0,0,function(){var a=this.utcOffset(),c=&quot;+&quot;;return 0&gt;a&amp;&amp;(a=-a,c=&quot;-&quot;),c+G(~~(a/60),2)+b+G(~~a%60,2)})}function Ka(a){var b=(a||&quot;&quot;).match(ad)||[],c=b[b.length-1]||[],d=(c+&quot;&quot;).match(xd)||[&quot;-&quot;,0,0],e=+(60*d[1])+q(d[2]);return&quot;+&quot;===d[0]?e:-e}function La(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Da(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Da(b).local()}function Ma(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Na(b,c){var d,e=this._offset||0;return null!=b?(&quot;string&quot;==typeof b&amp;&amp;(b=Ka(b)),Math.abs(b)&lt;16&amp;&amp;(b=60*b),!this._isUTC&amp;&amp;c&amp;&amp;(d=Ma(this)),this._offset=b,this._isUTC=!0,null!=d&amp;&amp;this.add(d,&quot;m&quot;),e!==b&amp;&amp;(!c||this._changeInProgress?bb(this,Ya(b-e,&quot;m&quot;),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ma(this)}function Oa(a,b){return null!=a?(&quot;string&quot;!=typeof a&amp;&amp;(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Pa(a){return this.utcOffset(0,a)}function Qa(a){return this._isUTC&amp;&amp;(this.utcOffset(0,a),this._isUTC=!1,a&amp;&amp;this.subtract(Ma(this),&quot;m&quot;)),this}function Ra(){return this._tzm?this.utcOffset(this._tzm):&quot;string&quot;==typeof this._i&amp;&amp;this.utcOffset(Ka(this._i)),this}function Sa(a){return a=a?Da(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Ta(){return this.utcOffset()&gt;this.clone().month(0).utcOffset()||this.utcOffset()&gt;this.clone().month(5).utcOffset()}function Ua(){if(&quot;undefined&quot;!=typeof this._isDSTShifted)return this._isDSTShifted;var a={};if(m(a,this),a=Aa(a),a._a){var b=a._isUTC?h(a._a):Da(a._a);this._isDSTShifted=this.isValid()&amp;&amp;r(a._a,b.toArray())&gt;0}else this._isDSTShifted=!1;return this._isDSTShifted}function Va(){return!this._isUTC}function Wa(){return this._isUTC}function Xa(){return this._isUTC&amp;&amp;0===this._offset}function Ya(a,b){var c,d,e,g=a,h=null;return Ia(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:&quot;number&quot;==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=yd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:0,d:q(h[hd])*c,h:q(h[id])*c,m:q(h[jd])*c,s:q(h[kd])*c,ms:q(h[ld])*c}):(h=zd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:Za(h[2],c),M:Za(h[3],c),d:Za(h[4],c),h:Za(h[5],c),m:Za(h[6],c),s:Za(h[7],c),w:Za(h[8],c)}):null==g?g={}:&quot;object&quot;==typeof g&amp;&amp;(&quot;from&quot;in g||&quot;to&quot;in g)&amp;&amp;(e=_a(Da(g.from),Da(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ha(g),Ia(a)&amp;&amp;f(a,&quot;_locale&quot;)&amp;&amp;(d._locale=a._locale),d}function Za(a,b){var c=a&amp;&amp;parseFloat(a.replace(&quot;,&quot;,&quot;.&quot;));return(isNaN(c)?0:c)*b}function $a(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,&quot;M&quot;).isAfter(b)&amp;&amp;--c.months,c.milliseconds=+b-+a.clone().add(c.months,&quot;M&quot;),c}function _a(a,b){var c;return b=La(b,a),a.isBefore(b)?c=$a(a,b):(c=$a(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function ab(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(ba(b,&quot;moment().&quot;+b+&quot;(period, number) is deprecated. Please use moment().&quot;+b+&quot;(number, period).&quot;),f=c,c=d,d=f),c=&quot;string&quot;==typeof c?+c:c,e=Ya(c,d),bb(this,e,a),this}}function bb(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&amp;&amp;b._d.setTime(+b._d+f*d),g&amp;&amp;E(b,&quot;Date&quot;,D(b,&quot;Date&quot;)+g*d),h&amp;&amp;X(b,D(b,&quot;Month&quot;)+h*d),e&amp;&amp;a.updateOffset(b,g||h)}function cb(a,b){var c=a||Da(),d=La(c,this).startOf(&quot;day&quot;),e=this.diff(d,&quot;days&quot;,!0),f=-6&gt;e?&quot;sameElse&quot;:-1&gt;e?&quot;lastWeek&quot;:0&gt;e?&quot;lastDay&quot;:1&gt;e?&quot;sameDay&quot;:2&gt;e?&quot;nextDay&quot;:7&gt;e?&quot;nextWeek&quot;:&quot;sameElse&quot;;return this.format(b&amp;&amp;b[f]||this.localeData().calendar(f,this,Da(c)))}function db(){return new n(this)}function eb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this&gt;+a):(c=o(a)?+a:+Da(a),c&lt;+this.clone().startOf(b))}function fb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+a&gt;+this):(c=o(a)?+a:+Da(a),+this.clone().endOf(b)&lt;c)}function gb(a,b,c){return this.isAfter(a,c)&amp;&amp;this.isBefore(b,c)}function hb(a,b){var c;return b=A(b||&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this===+a):(c=+Da(a),+this.clone().startOf(b)&lt;=c&amp;&amp;c&lt;=+this.clone().endOf(b))}function ib(a,b,c){var d,e,f=La(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=A(b),&quot;year&quot;===b||&quot;month&quot;===b||&quot;quarter&quot;===b?(e=jb(this,f),&quot;quarter&quot;===b?e/=3:&quot;year&quot;===b&amp;&amp;(e/=12)):(d=this-f,e=&quot;second&quot;===b?d/1e3:&quot;minute&quot;===b?d/6e4:&quot;hour&quot;===b?d/36e5:&quot;day&quot;===b?(d-g)/864e5:&quot;week&quot;===b?(d-g)/6048e5:d),c?e:p(e)}function jb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,&quot;months&quot;);return 0&gt;b-f?(c=a.clone().add(e-1,&quot;months&quot;),d=(b-f)/(f-c)):(c=a.clone().add(e+1,&quot;months&quot;),d=(b-f)/(c-f)),-(e+d)}function kb(){return this.clone().locale(&quot;en&quot;).format(&quot;ddd MMM DD YYYY HH:mm:ss [GMT]ZZ&quot;)}function lb(){var a=this.clone().utc();return 0&lt;a.year()&amp;&amp;a.year()&lt;=9999?&quot;function&quot;==typeof Date.prototype.toISOString?this.toDate().toISOString():K(a,&quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;):K(a,&quot;YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;)}function mb(b){var c=K(this,b||a.defaultFormat);return this.localeData().postformat(c)}function nb(a,b){return this.isValid()?Ya({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.from(Da(),a)}function pb(a,b){return this.isValid()?Ya({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function qb(a){return this.to(Da(),a)}function rb(a){var b;return void 0===a?this._locale._abbr:(b=y(a),null!=b&amp;&amp;(this._locale=b),this)}function sb(){return this._locale}function tb(a){switch(a=A(a)){case&quot;year&quot;:this.month(0);case&quot;quarter&quot;:case&quot;month&quot;:this.date(1);case&quot;week&quot;:case&quot;isoWeek&quot;:case&quot;day&quot;:this.hours(0);case&quot;hour&quot;:this.minutes(0);case&quot;minute&quot;:this.seconds(0);case&quot;second&quot;:this.milliseconds(0)}return&quot;week&quot;===a&amp;&amp;this.weekday(0),&quot;isoWeek&quot;===a&amp;&amp;this.isoWeekday(1),&quot;quarter&quot;===a&amp;&amp;this.month(3*Math.floor(this.month()/3)),this}function ub(a){return a=A(a),void 0===a||&quot;millisecond&quot;===a?this:this.startOf(a).add(1,&quot;isoWeek&quot;===a?&quot;week&quot;:a).subtract(1,&quot;ms&quot;)}function vb(){return+this._d-6e4*(this._offset||0)}function wb(){return Math.floor(+this/1e3)}function xb(){return this._offset?new Date(+this):this._d}function yb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function zb(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Ab(){return k(this)}function Bb(){return g({},j(this))}function Cb(){return j(this).overflow}function Db(a,b){H(0,[a,a.length],0,b)}function Eb(a,b,c){return ja(Da([a,11,31+b-c]),b,c).week}function Fb(a){var b=ja(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Gb(a){var b=ja(this,1,4).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Hb(){return Eb(this.year(),1,4)}function Ib(){var a=this.localeData()._week;return Eb(this.year(),a.dow,a.doy)}function Jb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Kb(a,b){return&quot;string&quot;!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),&quot;number&quot;==typeof a?a:null):parseInt(a,10)}function Lb(a){return this._weekdays[a.day()]}function Mb(a){return this._weekdaysShort[a.day()]}function Nb(a){return this._weekdaysMin[a.day()]}function Ob(a){var b,c,d;for(this._weekdaysParse=this._weekdaysParse||[],b=0;7&gt;b;b++)if(this._weekdaysParse[b]||(c=Da([2e3,1]).day(b),d=&quot;^&quot;+this.weekdays(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysShort(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysMin(c,&quot;&quot;),this._weekdaysParse[b]=new RegExp(d.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),this._weekdaysParse[b].test(a))return b}function Pb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Kb(a,this.localeData()),this.add(a-b,&quot;d&quot;)):b}function Qb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,&quot;d&quot;)}function Rb(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Sb(a,b){H(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Tb(a,b){return b._meridiemParse}function Ub(a){return&quot;p&quot;===(a+&quot;&quot;).toLowerCase().charAt(0)}function Vb(a,b,c){return a&gt;11?c?&quot;pm&quot;:&quot;PM&quot;:c?&quot;am&quot;:&quot;AM&quot;}function Wb(a,b){b[ld]=q(1e3*(&quot;0.&quot;+a))}function Xb(){return this._isUTC?&quot;UTC&quot;:&quot;&quot;}function Yb(){return this._isUTC?&quot;Coordinated Universal Time&quot;:&quot;&quot;}function Zb(a){return Da(1e3*a)}function $b(){return Da.apply(null,arguments).parseZone()}function _b(a,b,c){var d=this._calendar[a];return&quot;function&quot;==typeof d?d.call(b,c):d}function ac(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function bc(){return this._invalidDate}function cc(a){return this._ordinal.replace(&quot;%d&quot;,a)}function dc(a){return a}function ec(a,b,c,d){var e=this._relativeTime[c];return&quot;function&quot;==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function fc(a,b){var c=this._relativeTime[a&gt;0?&quot;future&quot;:&quot;past&quot;];return&quot;function&quot;==typeof c?c(b):c.replace(/%s/i,b)}function gc(a){var b,c;for(c in a)b=a[c],&quot;function&quot;==typeof b?this[c]=b:this[&quot;_&quot;+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+&quot;|&quot;+/\d{1,2}/.source)}function hc(a,b,c,d){var e=y(),f=h().set(d,b);return e[c](f,a)}function ic(a,b,c,d,e){if(&quot;number&quot;==typeof a&amp;&amp;(b=a,a=void 0),a=a||&quot;&quot;,null!=b)return hc(a,b,c,e);var f,g=[];for(f=0;d&gt;f;f++)g[f]=hc(a,f,c,e);return g}function jc(a,b){return ic(a,b,&quot;months&quot;,12,&quot;month&quot;)}function kc(a,b){return ic(a,b,&quot;monthsShort&quot;,12,&quot;month&quot;)}function lc(a,b){return ic(a,b,&quot;weekdays&quot;,7,&quot;day&quot;)}function mc(a,b){return ic(a,b,&quot;weekdaysShort&quot;,7,&quot;day&quot;)}function nc(a,b){return ic(a,b,&quot;weekdaysMin&quot;,7,&quot;day&quot;)}function oc(){var a=this._data;return this._milliseconds=Wd(this._milliseconds),this._days=Wd(this._days),this._months=Wd(this._months),a.milliseconds=Wd(a.milliseconds),a.seconds=Wd(a.seconds),a.minutes=Wd(a.minutes),a.hours=Wd(a.hours),a.months=Wd(a.months),a.years=Wd(a.years),this}function pc(a,b,c,d){var e=Ya(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function qc(a,b){return pc(this,a,b,1)}function rc(a,b){return pc(this,a,b,-1)}function sc(a){return 0&gt;a?Math.floor(a):Math.ceil(a)}function tc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f&gt;=0&amp;&amp;g&gt;=0&amp;&amp;h&gt;=0||0&gt;=f&amp;&amp;0&gt;=g&amp;&amp;0&gt;=h||(f+=864e5*sc(vc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=p(f/1e3),i.seconds=a%60,b=p(a/60),i.minutes=b%60,c=p(b/60),i.hours=c%24,g+=p(c/24),e=p(uc(g)),h+=e,g-=sc(vc(e)),d=p(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function uc(a){return 4800*a/146097}function vc(a){return 146097*a/4800}function wc(a){var b,c,d=this._milliseconds;if(a=A(a),&quot;month&quot;===a||&quot;year&quot;===a)return b=this._days+d/864e5,c=this._months+uc(b),&quot;month&quot;===a?c:c/12;switch(b=this._days+Math.round(vc(this._months)),a){case&quot;week&quot;:return b/7+d/6048e5;case&quot;day&quot;:return b+d/864e5;case&quot;hour&quot;:return 24*b+d/36e5;case&quot;minute&quot;:return 1440*b+d/6e4;case&quot;second&quot;:return 86400*b+d/1e3;case&quot;millisecond&quot;:return Math.floor(864e5*b)+d;default:throw new Error(&quot;Unknown unit &quot;+a)}}function xc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*q(this._months/12)}function yc(a){return function(){return this.as(a)}}function zc(a){return a=A(a),this[a+&quot;s&quot;]()}function Ac(a){return function(){return this._data[a]}}function Bc(){return p(this.days()/7)}function Cc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Dc(a,b,c){var d=Ya(a).abs(),e=ke(d.as(&quot;s&quot;)),f=ke(d.as(&quot;m&quot;)),g=ke(d.as(&quot;h&quot;)),h=ke(d.as(&quot;d&quot;)),i=ke(d.as(&quot;M&quot;)),j=ke(d.as(&quot;y&quot;)),k=e&lt;le.s&amp;&amp;[&quot;s&quot;,e]||1===f&amp;&amp;[&quot;m&quot;]||f&lt;le.m&amp;&amp;[&quot;mm&quot;,f]||1===g&amp;&amp;[&quot;h&quot;]||g&lt;le.h&amp;&amp;[&quot;hh&quot;,g]||1===h&amp;&amp;[&quot;d&quot;]||h&lt;le.d&amp;&amp;[&quot;dd&quot;,h]||1===i&amp;&amp;[&quot;M&quot;]||i&lt;le.M&amp;&amp;[&quot;MM&quot;,i]||1===j&amp;&amp;[&quot;y&quot;]||[&quot;yy&quot;,j];return k[2]=b,k[3]=+a&gt;0,k[4]=c,Cc.apply(null,k)}function Ec(a,b){return void 0===le[a]?!1:void 0===b?le[a]:(le[a]=b,!0)}function Fc(a){var b=this.localeData(),c=Dc(this,!a,b);return a&amp;&amp;(c=b.pastFuture(+this,c)),b.postformat(c)}function Gc(){var a,b,c,d=me(this._milliseconds)/1e3,e=me(this._days),f=me(this._months);a=p(d/60),b=p(a/60),d%=60,a%=60,c=p(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0&gt;m?&quot;-&quot;:&quot;&quot;)+&quot;P&quot;+(g?g+&quot;Y&quot;:&quot;&quot;)+(h?h+&quot;M&quot;:&quot;&quot;)+(i?i+&quot;D&quot;:&quot;&quot;)+(j||k||l?&quot;T&quot;:&quot;&quot;)+(j?j+&quot;H&quot;:&quot;&quot;)+(k?k+&quot;M&quot;:&quot;&quot;)+(l?l+&quot;S&quot;:&quot;&quot;):&quot;P0D&quot;}var Hc,Ic,Jc=a.momentProperties=[],Kc=!1,Lc={},Mc={},Nc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Pc={},Qc={},Rc=/\d/,Sc=/\d\d/,Tc=/\d{3}/,Uc=/\d{4}/,Vc=/[+-]?\d{6}/,Wc=/\d\d?/,Xc=/\d{1,3}/,Yc=/\d{1,4}/,Zc=/[+-]?\d{1,6}/,$c=/\d+/,_c=/[+-]?\d+/,ad=/Z|[+-]\d\d:?\d\d/gi,bd=/[+-]?\d+(\.\d{1,3})?/,cd=/[0-9]*[&apos;a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,dd={},ed={},fd=0,gd=1,hd=2,id=3,jd=4,kd=5,ld=6;H(&quot;M&quot;,[&quot;MM&quot;,2],&quot;Mo&quot;,function(){return this.month()+1}),H(&quot;MMM&quot;,0,0,function(a){return this.localeData().monthsShort(this,a)}),H(&quot;MMMM&quot;,0,0,function(a){return this.localeData().months(this,a)}),z(&quot;month&quot;,&quot;M&quot;),N(&quot;M&quot;,Wc),N(&quot;MM&quot;,Wc,Sc),N(&quot;MMM&quot;,cd),N(&quot;MMMM&quot;,cd),Q([&quot;M&quot;,&quot;MM&quot;],function(a,b){b[gd]=q(a)-1}),Q([&quot;MMM&quot;,&quot;MMMM&quot;],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[gd]=e:j(c).invalidMonth=a});var md=&quot;January_February_March_April_May_June_July_August_September_October_November_December&quot;.split(&quot;_&quot;),nd=&quot;Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec&quot;.split(&quot;_&quot;),od={};a.suppressDeprecationWarnings=!1;var pd=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,qd=[[&quot;YYYYYY-MM-DD&quot;,/[+-]\d{6}-\d{2}-\d{2}/],[&quot;YYYY-MM-DD&quot;,/\d{4}-\d{2}-\d{2}/],[&quot;GGGG-[W]WW-E&quot;,/\d{4}-W\d{2}-\d/],[&quot;GGGG-[W]WW&quot;,/\d{4}-W\d{2}/],[&quot;YYYY-DDD&quot;,/\d{4}-\d{3}/]],rd=[[&quot;HH:mm:ss.SSSS&quot;,/(T| )\d\d:\d\d:\d\d\.\d+/],[&quot;HH:mm:ss&quot;,/(T| )\d\d:\d\d:\d\d/],[&quot;HH:mm&quot;,/(T| )\d\d:\d\d/],[&quot;HH&quot;,/(T| )\d\d/]],sd=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=aa(&quot;moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.&quot;,function(a){a._d=new Date(a._i+(a._useUTC?&quot; UTC&quot;:&quot;&quot;))}),H(0,[&quot;YY&quot;,2],0,function(){return this.year()%100}),H(0,[&quot;YYYY&quot;,4],0,&quot;year&quot;),H(0,[&quot;YYYYY&quot;,5],0,&quot;year&quot;),H(0,[&quot;YYYYYY&quot;,6,!0],0,&quot;year&quot;),z(&quot;year&quot;,&quot;y&quot;),N(&quot;Y&quot;,_c),N(&quot;YY&quot;,Wc,Sc),N(&quot;YYYY&quot;,Yc,Uc),N(&quot;YYYYY&quot;,Zc,Vc),N(&quot;YYYYYY&quot;,Zc,Vc),Q([&quot;YYYYY&quot;,&quot;YYYYYY&quot;],fd),Q(&quot;YYYY&quot;,function(b,c){c[fd]=2===b.length?a.parseTwoDigitYear(b):q(b)}),Q(&quot;YY&quot;,function(b,c){c[fd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return q(a)+(q(a)&gt;68?1900:2e3)};var td=C(&quot;FullYear&quot;,!1);H(&quot;w&quot;,[&quot;ww&quot;,2],&quot;wo&quot;,&quot;week&quot;),H(&quot;W&quot;,[&quot;WW&quot;,2],&quot;Wo&quot;,&quot;isoWeek&quot;),z(&quot;week&quot;,&quot;w&quot;),z(&quot;isoWeek&quot;,&quot;W&quot;),N(&quot;w&quot;,Wc),N(&quot;ww&quot;,Wc,Sc),N(&quot;W&quot;,Wc),N(&quot;WW&quot;,Wc,Sc),R([&quot;w&quot;,&quot;ww&quot;,&quot;W&quot;,&quot;WW&quot;],function(a,b,c,d){b[d.substr(0,1)]=q(a)});var ud={dow:0,doy:6};H(&quot;DDD&quot;,[&quot;DDDD&quot;,3],&quot;DDDo&quot;,&quot;dayOfYear&quot;),z(&quot;dayOfYear&quot;,&quot;DDD&quot;),N(&quot;DDD&quot;,Xc),N(&quot;DDDD&quot;,Tc),Q([&quot;DDD&quot;,&quot;DDDD&quot;],function(a,b,c){c._dayOfYear=q(a)}),a.ISO_8601=function(){};var vd=aa(&quot;moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return this&gt;a?this:a}),wd=aa(&quot;moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return a&gt;this?this:a});Ja(&quot;Z&quot;,&quot;:&quot;),Ja(&quot;ZZ&quot;,&quot;&quot;),N(&quot;Z&quot;,ad),N(&quot;ZZ&quot;,ad),Q([&quot;Z&quot;,&quot;ZZ&quot;],function(a,b,c){c._useUTC=!0,c._tzm=Ka(a)});var xd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var yd=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,zd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Ya.fn=Ha.prototype;var Ad=ab(1,&quot;add&quot;),Bd=ab(-1,&quot;subtract&quot;);a.defaultFormat=&quot;YYYY-MM-DDTHH:mm:ssZ&quot;;var Cd=aa(&quot;moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.&quot;,function(a){return void 0===a?this.localeData():this.locale(a)});H(0,[&quot;gg&quot;,2],0,function(){return this.weekYear()%100}),H(0,[&quot;GG&quot;,2],0,function(){return this.isoWeekYear()%100}),Db(&quot;gggg&quot;,&quot;weekYear&quot;),Db(&quot;ggggg&quot;,&quot;weekYear&quot;),Db(&quot;GGGG&quot;,&quot;isoWeekYear&quot;),Db(&quot;GGGGG&quot;,&quot;isoWeekYear&quot;),z(&quot;weekYear&quot;,&quot;gg&quot;),z(&quot;isoWeekYear&quot;,&quot;GG&quot;),N(&quot;G&quot;,_c),N(&quot;g&quot;,_c),N(&quot;GG&quot;,Wc,Sc),N(&quot;gg&quot;,Wc,Sc),N(&quot;GGGG&quot;,Yc,Uc),N(&quot;gggg&quot;,Yc,Uc),N(&quot;GGGGG&quot;,Zc,Vc),N(&quot;ggggg&quot;,Zc,Vc),R([&quot;gggg&quot;,&quot;ggggg&quot;,&quot;GGGG&quot;,&quot;GGGGG&quot;],function(a,b,c,d){b[d.substr(0,2)]=q(a)}),R([&quot;gg&quot;,&quot;GG&quot;],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),H(&quot;Q&quot;,0,0,&quot;quarter&quot;),z(&quot;quarter&quot;,&quot;Q&quot;),N(&quot;Q&quot;,Rc),Q(&quot;Q&quot;,function(a,b){b[gd]=3*(q(a)-1)}),H(&quot;D&quot;,[&quot;DD&quot;,2],&quot;Do&quot;,&quot;date&quot;),z(&quot;date&quot;,&quot;D&quot;),N(&quot;D&quot;,Wc),N(&quot;DD&quot;,Wc,Sc),N(&quot;Do&quot;,function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),Q([&quot;D&quot;,&quot;DD&quot;],hd),Q(&quot;Do&quot;,function(a,b){b[hd]=q(a.match(Wc)[0],10)});var Dd=C(&quot;Date&quot;,!0);H(&quot;d&quot;,0,&quot;do&quot;,&quot;day&quot;),H(&quot;dd&quot;,0,0,function(a){return this.localeData().weekdaysMin(this,a)}),H(&quot;ddd&quot;,0,0,function(a){return this.localeData().weekdaysShort(this,a)}),H(&quot;dddd&quot;,0,0,function(a){return this.localeData().weekdays(this,a)}),H(&quot;e&quot;,0,0,&quot;weekday&quot;),H(&quot;E&quot;,0,0,&quot;isoWeekday&quot;),z(&quot;day&quot;,&quot;d&quot;),z(&quot;weekday&quot;,&quot;e&quot;),z(&quot;isoWeekday&quot;,&quot;E&quot;),N(&quot;d&quot;,Wc),N(&quot;e&quot;,Wc),N(&quot;E&quot;,Wc),N(&quot;dd&quot;,cd),N(&quot;ddd&quot;,cd),N(&quot;dddd&quot;,cd),R([&quot;dd&quot;,&quot;ddd&quot;,&quot;dddd&quot;],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),R([&quot;d&quot;,&quot;e&quot;,&quot;E&quot;],function(a,b,c,d){b[d]=q(a)});var Ed=&quot;Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday&quot;.split(&quot;_&quot;),Fd=&quot;Sun_Mon_Tue_Wed_Thu_Fri_Sat&quot;.split(&quot;_&quot;),Gd=&quot;Su_Mo_Tu_We_Th_Fr_Sa&quot;.split(&quot;_&quot;);H(&quot;H&quot;,[&quot;HH&quot;,2],0,&quot;hour&quot;),H(&quot;h&quot;,[&quot;hh&quot;,2],0,function(){return this.hours()%12||12}),Sb(&quot;a&quot;,!0),Sb(&quot;A&quot;,!1),z(&quot;hour&quot;,&quot;h&quot;),N(&quot;a&quot;,Tb),N(&quot;A&quot;,Tb),N(&quot;H&quot;,Wc),N(&quot;h&quot;,Wc),N(&quot;HH&quot;,Wc,Sc),N(&quot;hh&quot;,Wc,Sc),Q([&quot;H&quot;,&quot;HH&quot;],id),Q([&quot;a&quot;,&quot;A&quot;],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),Q([&quot;h&quot;,&quot;hh&quot;],function(a,b,c){b[id]=q(a),j(c).bigHour=!0});var Hd=/[ap]\.?m?\.?/i,Id=C(&quot;Hours&quot;,!0);H(&quot;m&quot;,[&quot;mm&quot;,2],0,&quot;minute&quot;),z(&quot;minute&quot;,&quot;m&quot;),N(&quot;m&quot;,Wc),N(&quot;mm&quot;,Wc,Sc),Q([&quot;m&quot;,&quot;mm&quot;],jd);var Jd=C(&quot;Minutes&quot;,!1);H(&quot;s&quot;,[&quot;ss&quot;,2],0,&quot;second&quot;),z(&quot;second&quot;,&quot;s&quot;),N(&quot;s&quot;,Wc),N(&quot;ss&quot;,Wc,Sc),Q([&quot;s&quot;,&quot;ss&quot;],kd);var Kd=C(&quot;Seconds&quot;,!1);H(&quot;S&quot;,0,0,function(){return~~(this.millisecond()/100)}),H(0,[&quot;SS&quot;,2],0,function(){return~~(this.millisecond()/10)}),H(0,[&quot;SSS&quot;,3],0,&quot;millisecond&quot;),H(0,[&quot;SSSS&quot;,4],0,function(){return 10*this.millisecond()}),H(0,[&quot;SSSSS&quot;,5],0,function(){return 100*this.millisecond()}),H(0,[&quot;SSSSSS&quot;,6],0,function(){return 1e3*this.millisecond()}),H(0,[&quot;SSSSSSS&quot;,7],0,function(){return 1e4*this.millisecond()}),H(0,[&quot;SSSSSSSS&quot;,8],0,function(){return 1e5*this.millisecond()}),H(0,[&quot;SSSSSSSSS&quot;,9],0,function(){return 1e6*this.millisecond()}),z(&quot;millisecond&quot;,&quot;ms&quot;),N(&quot;S&quot;,Xc,Rc),N(&quot;SS&quot;,Xc,Sc),N(&quot;SSS&quot;,Xc,Tc);var Ld;for(Ld=&quot;SSSS&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)N(Ld,$c);for(Ld=&quot;S&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)Q(Ld,Wb);var Md=C(&quot;Milliseconds&quot;,!1);H(&quot;z&quot;,0,0,&quot;zoneAbbr&quot;),H(&quot;zz&quot;,0,0,&quot;zoneName&quot;);var Nd=n.prototype;Nd.add=Ad,Nd.calendar=cb,Nd.clone=db,Nd.diff=ib,Nd.endOf=ub,Nd.format=mb,Nd.from=nb,Nd.fromNow=ob,Nd.to=pb,Nd.toNow=qb,Nd.get=F,Nd.invalidAt=Cb,Nd.isAfter=eb,Nd.isBefore=fb,Nd.isBetween=gb,Nd.isSame=hb,Nd.isValid=Ab,Nd.lang=Cd,Nd.locale=rb,Nd.localeData=sb,Nd.max=wd,Nd.min=vd,Nd.parsingFlags=Bb,Nd.set=F,Nd.startOf=tb,Nd.subtract=Bd,Nd.toArray=yb,Nd.toObject=zb,Nd.toDate=xb,Nd.toISOString=lb,Nd.toJSON=lb,Nd.toString=kb,Nd.unix=wb,Nd.valueOf=vb,Nd.year=td,Nd.isLeapYear=ia,Nd.weekYear=Fb,Nd.isoWeekYear=Gb,Nd.quarter=Nd.quarters=Jb,Nd.month=Y,Nd.daysInMonth=Z,Nd.week=Nd.weeks=na,Nd.isoWeek=Nd.isoWeeks=oa,Nd.weeksInYear=Ib,Nd.isoWeeksInYear=Hb,Nd.date=Dd,Nd.day=Nd.days=Pb,Nd.weekday=Qb,Nd.isoWeekday=Rb,Nd.dayOfYear=qa,Nd.hour=Nd.hours=Id,Nd.minute=Nd.minutes=Jd,Nd.second=Nd.seconds=Kd,
Nd.millisecond=Nd.milliseconds=Md,Nd.utcOffset=Na,Nd.utc=Pa,Nd.local=Qa,Nd.parseZone=Ra,Nd.hasAlignedHourOffset=Sa,Nd.isDST=Ta,Nd.isDSTShifted=Ua,Nd.isLocal=Va,Nd.isUtcOffset=Wa,Nd.isUtc=Xa,Nd.isUTC=Xa,Nd.zoneAbbr=Xb,Nd.zoneName=Yb,Nd.dates=aa(&quot;dates accessor is deprecated. Use date instead.&quot;,Dd),Nd.months=aa(&quot;months accessor is deprecated. Use month instead&quot;,Y),Nd.years=aa(&quot;years accessor is deprecated. Use year instead&quot;,td),Nd.zone=aa(&quot;moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779&quot;,Oa);var Od=Nd,Pd={sameDay:&quot;[Today at] LT&quot;,nextDay:&quot;[Tomorrow at] LT&quot;,nextWeek:&quot;dddd [at] LT&quot;,lastDay:&quot;[Yesterday at] LT&quot;,lastWeek:&quot;[Last] dddd [at] LT&quot;,sameElse:&quot;L&quot;},Qd={LTS:&quot;h:mm:ss A&quot;,LT:&quot;h:mm A&quot;,L:&quot;MM/DD/YYYY&quot;,LL:&quot;MMMM D, YYYY&quot;,LLL:&quot;MMMM D, YYYY h:mm A&quot;,LLLL:&quot;dddd, MMMM D, YYYY h:mm A&quot;},Rd=&quot;Invalid date&quot;,Sd=&quot;%d&quot;,Td=/\d{1,2}/,Ud={future:&quot;in %s&quot;,past:&quot;%s ago&quot;,s:&quot;a few seconds&quot;,m:&quot;a minute&quot;,mm:&quot;%d minutes&quot;,h:&quot;an hour&quot;,hh:&quot;%d hours&quot;,d:&quot;a day&quot;,dd:&quot;%d days&quot;,M:&quot;a month&quot;,MM:&quot;%d months&quot;,y:&quot;a year&quot;,yy:&quot;%d years&quot;},Vd=s.prototype;Vd._calendar=Pd,Vd.calendar=_b,Vd._longDateFormat=Qd,Vd.longDateFormat=ac,Vd._invalidDate=Rd,Vd.invalidDate=bc,Vd._ordinal=Sd,Vd.ordinal=cc,Vd._ordinalParse=Td,Vd.preparse=dc,Vd.postformat=dc,Vd._relativeTime=Ud,Vd.relativeTime=ec,Vd.pastFuture=fc,Vd.set=gc,Vd.months=U,Vd._months=md,Vd.monthsShort=V,Vd._monthsShort=nd,Vd.monthsParse=W,Vd.week=ka,Vd._week=ud,Vd.firstDayOfYear=ma,Vd.firstDayOfWeek=la,Vd.weekdays=Lb,Vd._weekdays=Ed,Vd.weekdaysMin=Nb,Vd._weekdaysMin=Gd,Vd.weekdaysShort=Mb,Vd._weekdaysShort=Fd,Vd.weekdaysParse=Ob,Vd.isPM=Ub,Vd._meridiemParse=Hd,Vd.meridiem=Vb,w(&quot;en&quot;,{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===q(a%100/10)?&quot;th&quot;:1===b?&quot;st&quot;:2===b?&quot;nd&quot;:3===b?&quot;rd&quot;:&quot;th&quot;;return a+c}}),a.lang=aa(&quot;moment.lang is deprecated. Use moment.locale instead.&quot;,w),a.langData=aa(&quot;moment.langData is deprecated. Use moment.localeData instead.&quot;,y);var Wd=Math.abs,Xd=yc(&quot;ms&quot;),Yd=yc(&quot;s&quot;),Zd=yc(&quot;m&quot;),$d=yc(&quot;h&quot;),_d=yc(&quot;d&quot;),ae=yc(&quot;w&quot;),be=yc(&quot;M&quot;),ce=yc(&quot;y&quot;),de=Ac(&quot;milliseconds&quot;),ee=Ac(&quot;seconds&quot;),fe=Ac(&quot;minutes&quot;),ge=Ac(&quot;hours&quot;),he=Ac(&quot;days&quot;),ie=Ac(&quot;months&quot;),je=Ac(&quot;years&quot;),ke=Math.round,le={s:45,m:45,h:22,d:26,M:11},me=Math.abs,ne=Ha.prototype;ne.abs=oc,ne.add=qc,ne.subtract=rc,ne.as=wc,ne.asMilliseconds=Xd,ne.asSeconds=Yd,ne.asMinutes=Zd,ne.asHours=$d,ne.asDays=_d,ne.asWeeks=ae,ne.asMonths=be,ne.asYears=ce,ne.valueOf=xc,ne._bubble=tc,ne.get=zc,ne.milliseconds=de,ne.seconds=ee,ne.minutes=fe,ne.hours=ge,ne.days=he,ne.weeks=Bc,ne.months=ie,ne.years=je,ne.humanize=Fc,ne.toISOString=Gc,ne.toString=Gc,ne.toJSON=Gc,ne.locale=rb,ne.localeData=sb,ne.toIsoString=aa(&quot;toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)&quot;,Gc),ne.lang=Cd,H(&quot;X&quot;,0,0,&quot;unix&quot;),H(&quot;x&quot;,0,0,&quot;valueOf&quot;),N(&quot;x&quot;,_c),N(&quot;X&quot;,bd),Q(&quot;X&quot;,function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),Q(&quot;x&quot;,function(a,b,c){c._d=new Date(q(a))}),a.version=&quot;2.10.6&quot;,b(Da),a.fn=Od,a.min=Fa,a.max=Ga,a.utc=h,a.unix=Zb,a.months=jc,a.isDate=d,a.locale=w,a.invalid=l,a.duration=Ya,a.isMoment=o,a.weekdays=lc,a.parseZone=$b,a.localeData=y,a.isDuration=Ia,a.monthsShort=kc,a.weekdaysMin=nc,a.defineLocale=x,a.weekdaysShort=mc,a.normalizeUnits=A,a.relativeTimeThreshold=Ec;var oe=a;return oe});</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2c64669f-f07e-4365-bf64-c559ace83004</id>
                <name>stopOnErrorCount</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122375</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to Stop a channel if it reaches a particular error count. 
	Also sends an alert message via another channel (this sends a sms via our monitoring system).

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function stopOnErrorCount(cid, errorCount) {
	var channelStatisticsController = Packages.com.mirth.connect.server.controllers.ChannelStatisticsController.getInstance();
	var channelStatusController = Packages.com.mirth.connect.server.controllers.ChannelStatusController.getInstance();
	var stats = channelStatisticsController.getStatistics(cid);
	// var numOfQueued = stats.queued;
	var numOfErrors = stats.error;

	if(numOfErrors &gt; errorCount )
	{
		//Stop Me
		channelStatusController.stopChannel(cid);
		//Alert msg sent to _SVHALERT channel
		var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
		var channelName = channelController.getDeployedChannelById(cid).getName();
		var alertmsg = &apos;mirth01 mirth_channel_status codeTemplate_stopOnErrorCount 0 &apos; +
					   &apos;channel &apos; + channelName + &apos; stopped&apos;;
		router.routeMessage(&apos;_SVHALERT&apos;, alertmsg);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>08044817-3504-4fc1-80ee-404870195151</id>
                <name>test</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122745</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.
	searchword
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function testfunc(arg1) {
	return arg1;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
            <name>WebPT-Mirth</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121602</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
                <name>Fix HL7v2 Node Order</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121804</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>35f4c250-08b4-4e42-8e60-f85aa98dfe50</id>
            <name>WebPT-Translations</name>
            <revision>3</revision>
            <lastModified>
              <time>1690140133521</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>be8f057b-2640-4613-b2e7-83326c59169c</id>
                <name>AddZeros</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122826</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function addZeroes(num) {
   return num.toLocaleString(&quot;en&quot;, {useGrouping: false, minimumFractionDigits: 2})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>51913864-7702-489a-b7c6-54992c12b19d</id>
                <name>FindLookupValueWithDefault</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122218</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithDefault ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        //obj.LeftValue = LeftValue;
        //obj.RightValue1 = DefaultValue1;
        //obj.RightValue2   = DefaultValue2; 
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);
            var result = pattern.test(LeftValue );

            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c276be9f-c8f1-4dea-8df0-e000c6745271</id>
                <name>FindLookupValueWithInsuranceId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122080</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithInsuranceId ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);             
            var result = pattern.test(LeftValue );
	
            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7d746da2-58c6-44eb-ad5c-c5bfd0a0c537</id>
                <name>UseExternalProblemID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122349</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalProblemID() {

if ([&apos;2804&apos;, &apos;2822&apos;].indexOf($(&apos;tenantId&apos;) + &apos;&apos;) &gt; -1) {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitexternalproblemid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitaccountnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>07730e85-7f30-4ddf-90a4-78183c896ab5</id>
                <name>UseExternalVisitID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122192</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalVisitID() {
	
if ($(&apos;tenantId&apos;)  == &apos;9999&apos; ) {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitexternalvisitid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitvisitnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
        <channelTags>
          <channelTag>
            <id>c1433831-1e9d-484f-96da-2cf13fd4d40f</id>
            <name>ADT</name>
            <channelIds>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>e2256351-a12c-4e51-b138-af4985cb4c3e</id>
            <name>AristaMd</name>
            <channelIds>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>28cdc2db-4028-4249-b1b8-c2ba3961a137</id>
            <name>HL7</name>
            <channelIds>
              <string>6a2a6c33-33da-4783-b823-bd95bf387981</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>5beae4c2-e7f8-4ae3-9fca-703dea9233a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
              <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
              <string>1ae4e7ac-e62f-468c-aa2a-99cbd6139838</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>0638775c-6c87-4a71-b4b3-7ae52be05c1b</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
            </channelIds>
            <backgroundColor>
              <red>128</red>
              <green>128</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>c38e999e-8378-4798-9f21-5a49d054e745</id>
            <name>IN</name>
            <channelIds>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
            </channelIds>
            <backgroundColor>
              <red>128</red>
              <green>128</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>7822e1f8-3e89-4e46-8317-a1119bab773f</id>
            <name>SanMateo</name>
            <channelIds>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
            </channelIds>
            <backgroundColor>
              <red>128</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>ab6ed6d3-3d63-447a-97ad-1c89cfee3e3f</id>
            <name>TCP</name>
            <channelIds>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
            </channelIds>
            <backgroundColor>
              <red>128</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
        </channelTags>
      </exportData>
    </channel>
  </channels>
</channelGroup>