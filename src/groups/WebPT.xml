<channelGroup version="3.12.0">
  <id>dc7f31a4-9588-4be5-ac11-2234075ae2af</id>
  <name>WebPT</name>
  <revision>3</revision>
  <lastModified>
    <time>1678484142875</time>
    <timezone>America/Chicago</timezone>
  </lastModified>
  <description>WebPT Group to Evaluate Mirth Connect Instances</description>
  <channels>
    <channel version="3.12.0">
      <id>8913e845-1fff-427c-bec0-e0a01d131f89</id>
      <nextMetaDataId>3</nextMetaDataId>
      <name>Import Mirth Channel Group XML into SQL</name>
      <description></description>
      <revision>4</revision>
      <sourceConnector version="3.12.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.file.FileReceiverProperties" version="3.12.0">
          <pluginProperties/>
          <pollConnectorProperties version="3.12.0">
            <pollingType>INTERVAL</pollingType>
            <pollOnStart>false</pollOnStart>
            <pollingFrequency>5000</pollingFrequency>
            <pollingHour>0</pollingHour>
            <pollingMinute>0</pollingMinute>
            <cronJobs/>
            <pollConnectorPropertiesAdvanced>
              <weekly>true</weekly>
              <inactiveDays>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
              </inactiveDays>
              <dayOfMonth>1</dayOfMonth>
              <allDay>true</allDay>
              <startingHour>8</startingHour>
              <startingMinute>0</startingMinute>
              <endingHour>17</endingHour>
              <endingMinute>0</endingMinute>
            </pollConnectorPropertiesAdvanced>
          </pollConnectorProperties>
          <sourceConnectorProperties version="3.12.0">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <scheme>FILE</scheme>
          <host>C:/HL7/WebPT/in</host>
          <fileFilter>*.xml</fileFilter>
          <regex>false</regex>
          <directoryRecursion>false</directoryRecursion>
          <ignoreDot>true</ignoreDot>
          <anonymous>true</anonymous>
          <username>anonymous</username>
          <password>anonymous</password>
          <timeout>10000</timeout>
          <secure>true</secure>
          <passive>true</passive>
          <validateConnection>true</validateConnection>
          <afterProcessingAction>DELETE</afterProcessingAction>
          <moveToDirectory></moveToDirectory>
          <moveToFileName></moveToFileName>
          <errorReadingAction>DELETE</errorReadingAction>
          <errorResponseAction>DELETE</errorResponseAction>
          <errorMoveToDirectory></errorMoveToDirectory>
          <errorMoveToFileName></errorMoveToFileName>
          <checkFileAge>true</checkFileAge>
          <fileAge>1000</fileAge>
          <fileSizeMinimum>0</fileSizeMinimum>
          <fileSizeMaximum></fileSizeMaximum>
          <ignoreFileSizeMaximum>true</ignoreFileSizeMaximum>
          <sortBy>date</sortBy>
          <binary>false</binary>
          <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        </properties>
        <transformer version="3.12.0">
          <elements/>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.12.0">
          <elements/>
        </filter>
        <transportName>File Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.12.0">
          <metaDataId>1</metaDataId>
          <name>Destination 1</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>var scriptName= &apos;js_sproc_call_sp_update_group&apos;;
// var dbConn = DatabaseConnectionFactory.createDatabaseConnection (&apos;com.microsoft.sqlserver.jdbc.SQLServerDriver&apos;,&apos;jdbc:sqlserver://patient-health-boards.cl05iesvyium.us-east-2.rds.amazonaws.com:1433;databaseName=covider;&apos;,&apos;admin&apos;,&apos;#!Covider1&apos;);
var dbConn = DatabaseConnectionFactory.createDatabaseConnection ($(&apos;coviderMSSQLDriverString&apos;),$(&apos;coviderMSSQLUrl&apos;),$(&apos;coviderMSSQLUserId&apos;),$(&apos;coviderMSSQLPassword&apos;));

var result = 0;
// var sql = &quot;exec dbo.sp_Create_Update_PID($(&apos;EXTPID&apos;),&apos;$(&apos;PtLname&apos;) &apos;,&apos;$(&apos;PtFname&apos;)&apos;)&quot;;
var sql=  $(&apos;call_sp_update_patient_demographics_encounter&apos;);
logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Running query: &apos; + sql);     //changeme to info or debug once its all working
result = dbConn.executeUpdate(sql);

dbConn.close();</script>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>2</metaDataId>
          <name>Destination 2</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.12.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STOPPED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.12.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1673025584725</time>
            <timezone>America/Chicago</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.12.0">
            <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
            <name>WebPT-Common</name>
            <revision>2</revision>
            <lastModified>
              <time>1678715257049</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
                <name>Check if String contains</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122790</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
                <name>Check if String contains HTTP code</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122593</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8515e088-5c50-47ee-9e2f-9fad1ecf48bd</id>
                <name>Check if String is JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123309</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Added by Kirby Knight
	12/21/2020
	Test for JSON

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5f2f84ba-3e66-4be3-8260-8fbd8258bd92</id>
                <name>Check if the PDF is valid</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122055</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
//This function is used for checking the word &quot;PDF&quot; in inbound attachment.
function isValidBase64PDF(base64) {
	const ENCODED_PDF_SIGN = &quot;JVBERi&quot;; // %PDF sign
	const PDF_EOF = &quot;JSVFT0YNCg&quot;; // %EOF
	var pdfBase64Size = (base64.length() * (3 / 4)) - 1;
	
	return (base64.indexOf(ENCODED_PDF_SIGN) != -1 &amp;&amp; base64.indexOf(PDF_EOF) != -1 &amp;&amp; pdf_base64_size &gt; 36);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
                <name>Convert JSON date to HL7v2 date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122137</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
                <name>Convert JSON datetime to HL7v2 datetime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122430</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>bb21449a-df39-48c6-be52-24106c8df4c4</id>
                <name>Destination Formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Kirby Knight 03/10/2021
	
	This function will remove all other ROOT.Meta.Destinations nodes that are not passed in the
	destination variable and removes the ROOT.Meta.Destinations[x].Destination node

	@param {Any} destination - 
	@return {String} return description
*/
function formatDestinations(destination) {
var arrDestinations = msg[&apos;Meta&apos;][&apos;Destinations&apos;];
	//  Start at the end of the array because of the posibility of deleted array items 
	for (var i = arrDestinations.length - 1; i &gt;= 0; i--) {
		if (arrDestinations[i][&apos;Destination&apos;] == destination){
			delete arrDestinations[i][&apos;Destination&apos;]
		}else if (arrDestinations[i][&apos;Destination&apos;] != destination){
			arrDestinations.splice(i, 1);
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
                <name>Extract JSON node data</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121748</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7ed44f8a-fa40-4f3e-9426-3021604eabe0</id>
                <name>Get Feature Value by Name and Database</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123262</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns a string containing the feature value (system property) for a specific client database.

	@param {String} featureName - name of the feature, ie: &quot;BetterPTBidirectionalScheduling&quot;
	@param {String} databaseIdentifier - database name or databaseID / TenantID
	@param {String} databaseIdentifierType - what value is provided in databaseIdentifier. current options include &quot;ID&quot; or &quot;NAME&quot;
	@return {String} returns feature value
*/
function getFeatureValueByNameDatabase(featureName, databaseIdentifier, databaseIdentifierType) {
	var paramList = new Packages.java.util.ArrayList();
	paramList.add(featureName);
	paramList.add(databaseIdentifier);
	paramList.add(databaseIdentifierType);
	
	var sSQL = &apos;EXEC [dbo].[pr_FeatureValueByNameDatabase] ?, ?, ?&apos;;
	
	try {
		var result = executeSharedDBStatementFhirCh(sSQL, true, paramList);
		var featureValue ;
		if(result.next()){			//Added
		 featureValue = result.getString(1);
		}
		return featureValue;
	} catch (e) {
		logger.error(e);
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>9842be2c-c633-42ac-87f1-f91aca9e370f</id>
                <name>JSON Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121776</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function populates the MR and PI patient IDS to channelMap

	@return {String} return description
*/
function jsonPatientIds() {
	for each (patId in msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) {
	if (patId[&apos;IDType&apos;].toString() == &apos;MR&apos;){
		channelMap.put(&apos;extPatId&apos;, patId[&apos;ID&apos;].toString());
	}else if(patId[&apos;IDType&apos;].toString() == &apos;PI&apos;){
		channelMap.put(&apos;patId&apos;, patId[&apos;ID&apos;].toString());
	}
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
                <name>Verify JSON node for existance</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>394664c0-d536-4310-970e-181dc03ee7da</id>
            <name>WebPT-Conversions</name>
            <revision>2</revision>
            <lastModified>
              <time>1690140133427</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
                <name>Convert FHIR codes to HL7v2 codes</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122899</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>2fc8cbf3-0d92-4d1d-a3d6-136c09bd9f2a</id>
            <name>WebPT-Custom Database Functions</name>
            <revision>4</revision>
            <lastModified>
              <time>1690570753962</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>23c0b510-63e4-40fa-a4e1-7b2b92ce9a96</id>
                <name>Execute Statement Shared DB Conn clientDb Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122401</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Executes a SQL statement using a shared database connection stored in the Global Map. If the
connection does not exist, creates it.

@param {String} statement - The SQL statement to execute
@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
@param {List} paramList - A Java List object containing the parameters for the statement (optional)
 */
function executeSharedDBStatementclientDbCh(statement, isQuery, paramList) {
    var result;

    try {
        var dbConnclientDbCh = globalChannelMap.get(&quot;dbConnclientDbCh&quot;);

        if (dbConnclientDbCh == null || dbConnclientDbCh.getConnection().isClosed()) {
            dbConnclientDbCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;), $(&apos;dbClient&apos;), $(&apos;dbUserFhir&apos;), $(&apos;dbPwFhir&apos;));
            globalChannelMap.put(&quot;dbConnclientDbCh&quot;, dbConnclientDbCh);
        }

        if (paramList == undefined) {
            paramList = new Packages.java.util.ArrayList();
        }

        if (isQuery) {
            result = dbConnclientDbCh.executeCachedQuery(statement, paramList);
        } else {
            result = dbConnclientDbCh.executeUpdate(statement, paramList);
        }
    } catch (e) {
        logger.error(e);
    }
    finally {
        return result;
    }
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4efb3110-a83f-48b5-93ad-79c847b51865</id>
                <name>Execute Statement Shared DB Conn clntAcl Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123455</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClntAclCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnClntAclCh = globalChannelMap.get(&quot;dbConnClntAclCh&quot;);

		if (dbConnClntAclCh == null || dbConnClntAclCh.getConnection().isClosed())
		{
			dbConnClntAclCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbClntAcl&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnClntAclCh&quot;, dbConnClntAclCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnClntAclCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnClntAclCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>d96d45dd-57f7-4aa9-9bf4-e464d31b94c6</id>
                <name>Execute Statement Shared DB Conn FHIR</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121922</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhir(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhir.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhir.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6014068e-c021-4a38-9fa6-6f38f6a2cdab</id>
                <name>Execute Statement Shared DB Conn FHIR Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123492</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhirCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhirCh = globalChannelMap.get(&quot;dbConnFhirCh&quot;);

		if (dbConnFhirCh == null || dbConnFhirCh.getConnection().isClosed())
		{
			dbConnFhirCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnFhirCh&quot;, dbConnFhirCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhirCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhirCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fbd5c4a1-b816-4496-acdf-067005f1d376</id>
                <name>Execute Statement Shared DB Conn Translations Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123008</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementTranslationsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnTranslationsCh = globalChannelMap.get(&quot;dbConnTranslationsCh&quot;);

		if (dbConnTranslationsCh == null || dbConnTranslationsCh.getConnection().isClosed())
		{
			dbConnTranslationsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlTranslations&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnTranslationsCh&quot;, dbConnTranslationsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnTranslationsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnTranslationsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5d1a5577-4ba4-4d1e-b6cd-e2d924164909</id>
                <name>Execute Statement with Shared DB Conn ODS Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122280</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdsCh = globalChannelMap.get(&quot;dbConnOdsCh&quot;);

		if (dbConnOdsCh == null || dbConnOdsCh.getConnection().isClosed())
		{
			dbConnOdsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOds&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdsCh&quot;, dbConnOdsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>3991db14-0c0b-4123-952c-5164c1ded501</id>
                <name>Execute Statement with Shared DB Conn ODW Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122960</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.  THis connects to the ODW db in Azure

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdwCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdwCh = globalChannelMap.get(&quot;dbConnOdwCh&quot;);

		if (dbConnOdwCh == null || dbConnOdwCh.getConnection().isClosed())
		{
			dbConnOdwCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOdw&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdwCh&quot;, dbConnOdwCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdwCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdwCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fae08c88-7550-479a-b8ed-ffef47e8eed9</id>
                <name>executeSharedDBStatementClient</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121956</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClient(statement, isQuery, paramList, dbname)
{
	var result;
 	var dburl= &apos;jdbc:sqlserver://AZW1DEV-SQL02.clinicient.com:1433;databaseName=&apos;+dbname+&apos;&apos;;
	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),dburl,$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			
			//globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		result = dbConnFhir.executeCachedQuery(statement);
	
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>ed20a457-5beb-4aea-9bb9-cf91112ccc56</id>
            <name>WebPT-Default Functions</name>
            <revision>10</revision>
            <lastModified>
              <time>1690140133487</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>a8a9a0c8-9322-46dc-bef8-011eb3d70291</id>
                <name>Create Header for CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121678</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This creates a header for csv files based on the contents of the header variable.  The header
	variable is populated in the channel from the outbound msg template

	@return {String} return description
*/
function createHeader() {
	//Destination transformer.  this creates the header for each new file

	var path = java.nio.file.Paths.get($(&apos;filePath&apos;)+$(&apos;fileName&apos;));
	var bytes = (new java.lang.String($(&apos;header&apos;))).getBytes(&quot;UTF-8&quot;);
	try {
	  java.nio.file.Files.write(path, bytes, java.nio.file.StandardOpenOption.CREATE_NEW);
	}
	catch (e) {
	  //logger.info(&quot; should throw IOException if file already exists&quot;);
	
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5a886a1f-dab1-41b5-94c6-1a639907d7da</id>
                <name>Filter Message Evaluate Received Checksum</name>
                <revision>33</revision>
                <lastModified>
                  <time>1678916806664</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating a checksum for each provided message.  We save off the most recent 100 unique checksum values in a global 
	array so if the current message has been recently received we are able to ignore it.
	
	@author:  	Jeffrey Ritz
	@scriptName: 	filterEvaluateReceivedChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {boolean} filter - return filter boolean (true= filter msg, false= do not filter msg)
		persist received_checksum global ChannelMap array
		persist filterMessage ChannelMap variable
	@history
*/
function filterEvaluateReceivedChecksum(msg) {	

	var scriptName= &apos;filterEvaluateReceivedChecksum&apos;
	var filter = false;
	var received_len_limit = 999;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B connectorMessage.getRawData() typeof: &apos;+typeof(connectorMessage.getRawData())+&apos; msg: &apos;+connectorMessage.getRawData());
	} // end if 
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	// var dataBytes = new java.lang.String(connectorMessage.getRawData()).getBytes(&apos;UTF-8&apos;);
	// message = new String(message.getBytes(&quot;utf-8&quot;), &quot;utf-8&quot;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	// var dataBytes = new java.lang.String(msg.getBytes(&apos;UTF-8&apos;));
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);

	// var messageObjectgetBytes= checksum.update(connectorMessage.getRawData().getBytes());
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 
	
	$c(&apos;checksum&apos;, checksum.getValue());
	
	//grab the global channel map variable holding the last X unique checksums that we&apos;ve received
	var received = $gc(&apos;received_checksums&apos;);
	
	if (received == undefined) {
		var received = new Array();
		received.push(checksum.getValue());
	} else {
		//check if we&apos;ve recently received this message, skip it if so
		if (received.indexOf(checksum.getValue()) &gt; -1) {
			filter = true;
		//we haven&apos;t seen it recently, so remember it and allow it through
		} else {
			var received_len = received.length;
			if (received_len &gt; received_len_limit) {
				//remove oldest/first entry, shift all entries forward, and add new entry to end
				received.shift();
				received[received_len_limit] = checksum.getValue();
			} else {
				//add new entry to end of array
				received[received_len] = checksum.getValue();
			} // end if 
		} // end if 
	} // end if 

	 //debug code
	/*for (x=0; x&lt;=received_len_limit; x++) {
		$c(&apos;received-&apos;+x, received[x]);
	} */

	$c(&apos;filterMessage&apos;,filter);
	$gc(&apos;received_checksums&apos;,received);

	return filter;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fbd0484d-74a2-48e4-aedd-f97c2fcefa16</id>
                <name>Get Message Checksum</name>
                <revision>12</revision>
                <lastModified>
                  <time>1678916806703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating and reutrning a checksum for each provided message
	
	@author:  	Jeffrey Ritz
	@scriptName: 	getMessageChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {object} result - return checksum value
	@history
	2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() to remove the exponential representation of the number value
*/
function getMessageChecksum(msg) {	

	var scriptName= &apos;getMessageChecksum&apos;;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	} // end if 
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 

	var checksumValue= checksum.getValue();
	// 2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() 
	var arrChecksumValue= new Array(); 
	arrChecksumValue.push(checksumValue);
	$c(&apos;checksum&apos;, arrChecksumValue);

	return checksumValue;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>91db9bd1-ca92-4dcc-bba4-e1ece603fc87</id>
                <name>Remove Child Object From Parent Object Json</name>
                <revision>22</revision>
                <lastModified>
                  <time>1678916845037</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON child object and it&apos;s descendents from a parent object JSON
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeChildObjectFromParentObjectJson.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
		{string} parentObject - place the name of the string to be designated as the parent object in the JSON
		{string} childObject  - place the name of the string to be designated as the child object to be deleted from the JSON
	@param {object} msg - return modified Json object msg excluding specified Json child object
	@history
*/
function removeChildObjectFromParentObjectJson(msg, parentObject, childObject) {
	
	var scriptName= &apos;removeChildObjectFromParentObjectJson&apos;;
	var debug= 0;

	//var strObjJson= JSON.parse(msg);
	var strObjJson= JSON.stringify(msg);
	
	//var objJson= JSON.parse(msg);
	var newParentObjects= new Object();
	var parentObjects= msg;
	var arrParentObjects= new Array();
	var arrTransactionObjects= new Array();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof parentObjects: &apos;+typeof(parentObjects));
	for (var key in parentObjects) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof key: &apos;+typeof(key)+&apos; key: &apos;+key);
		if(key== parentObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof objJson[key]: &apos;+typeof(parentObjects[key])+&apos; parentObjects[key]: &apos;+JSON.stringify(parentObjects[key]));
			
			var newChildObjects= new Object();
			var childObjects= parentObjects[key];
			var arrChildObjects= new Array();
			
			for(var key2 in childObjects) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key2: &apos;+typeof(key2)+&apos; key2: &apos;+key2+&apos; childObject: &apos;+childObject);
				for(var key3 in childObjects[key2]) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key3: &apos;+typeof(key3)+&apos; key3: &apos;+key3+&apos; childObject: &apos;+childObject);
					if(key3== childObject) {
						var transactionObject= new Object();
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; childObject typeof: &apos;+typeof(childObjects[key2][key3])+&apos; childObject: &apos;+JSON.stringify(childObjects[key2][key3]));
						transactionObject.key= key3;
						transactionObject.value= childObjects[key2][key3];
						delete childObjects[key2][key3];
						if(debug&gt;0) logger.info(&apos;DEBUG::&apos;+scriptName+&apos; DELETE childObject: &apos;+key3+&apos; of parentObject: &apos;+JSON.stringify(childObjects[key2]));
						arrTransactionObjects.push(transactionObject);
					} // end if
				} // end for 
				arrChildObjects.push(childObjects[key2]);
			} // end for
			newParentObjects[key]= arrChildObjects;
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add all child keys: &apos;+JSON.stringify(arrChildObjects)+&apos; into ParentObject[&apos;+key+&apos;]: &apos;+newParentObjects[key]);
		} else {
			newParentObjects[key]= parentObjects[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+parentObjects[key]+&apos; string: &apos;+JSON.stringify(parentObjects[key]));
		} // end if
		arrParentObjects.push(newParentObjects);
	} // end for 
	var newMsg= arrParentObjects;
	channelMap.put(&apos;removeChildObjectMsg&apos;,newMsg);
	channelMap.put(&apos;removedChildTransIds&apos;,arrTransactionObjects);
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));
	return newMsg;
	
} </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2ff28338-dfb6-445d-a04e-c74b5486a08c</id>
                <name>Remove Object From Json</name>
                <revision>24</revision>
                <lastModified>
                  <time>1678915278542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON object and it&apos;s descendents from the msg
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeObjectFromJson.js
	@created: 	2023-03-09
	@param {string} msg - Inbound connectorMessage.getRawData()
	@param {string} msg - return modified msg excluding specified Json object from msg
	@history
	2023-03-15 JER - Modified to include removeObject function parameter to specify specific JSON object by referencing key to be removed
*/
function removeObjectFromJson(msg, removeObject) {
	
	var scriptName= &apos;removeObjectFromJson&apos;;
	var debug= 0;
	//var objJson= JSON.stringify(msg);
	var objJson= JSON.parse(msg);
	var newObjJson= new Object();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof objJson: &apos;+typeof(objJson)+&apos; objJSON: &apos;+JSON.stringify(objJson));
	for (var key in objJson) {
		if(key== removeObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; DELETE key: &apos;+key);
			// delete objJson[key];
		} else {
			newObjJson[key]= objJson[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+objJson[key]+&apos; string: &apos;+JSON.stringify(objJson[key]));
		} // end if 
	} // end for 
	var newMsg= newObjJson;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));

	// return JSON.stringify(newMsg);
	return newMsg;
} 
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>993a6fd8-454a-4133-ba32-dbcfea71582b</id>
                <name>Update EDITransactionLog</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123233</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	The purpose of this function is to update the status in Insight.
	Populate the channel map with the following variables functionalGroupControlNumber, status, eventDate

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateStatus () {

	//  Build the llst of paramters to pass to the database
	var paramList = new Packages.java.util.ArrayList();
	paramList.add($(&apos;functionalGroupControlNumber&apos;));
	paramList.add($(&apos;eventDate&apos;));  //dateTime in the acknoledged field in this format (&quot;2017-07-31 14:15:01.577&quot;)
	paramList.add(new java.lang.Integer(parseInt($(&apos;status&apos;), 10)));
	
//	logger.info(&quot;updateStatus &quot;+paramList);

	//  SQL Statement and paramters that will be sent to SQL
	var statement = &quot;EXEC dbo.pr_EDITransactionLog_Update ?, ?, ?&quot;;
	//  Code template used for establishiing connection and passing the sql statement and parameter list  
	var result = executeSharedDBStatementFhirCh(statement, false, paramList);
	return result;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>42cb290e-5fb0-46b8-82db-576ea1e1ba0d</id>
                <name>Update EDITransactionLog from responseStatus in the response transformer </name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123356</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Call this in the response transformer on the destination.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateReponseStatus() {
	var status = 0;
	if (responseStatus == SENT){
		var status = 1;
		channelMap.put(&apos;status&apos;,status);
	}

updateStatus()
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2223579b-f914-4be7-a575-f1a2a2aa1ae2</id>
                <name>ValidateToString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123044</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} mapping - 
	@param {Any} defaultValue - 
	@param {Any} replacement - 
	@return {String} return description
*/
function validateToString(mapping, defaultValue, replacement) {
    if (mapping == null) {
        mapping = &apos;&apos;;
    }
    return validate(mapping, defaultValue, replacement).toString() + &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>8c9a8268-4ef0-43e9-ae5b-bf8895f0b80c</id>
            <name>WebPT-FORMAT</name>
            <revision>3</revision>
            <lastModified>
              <time>1691001755225</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>Include any functions or codes with 
-date &amp; time formating related
-data type formatting</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>920c9ead-70a6-4168-9d95-89261b73ae44</id>
                <name>12digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123520</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Take any 12 digit string yyyyMMddHHmm and change to MM/dd/yyyy HH:mm 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm
*/
function yyyyMMddHHmm(string) {
	return DateUtil.convertDate(&quot;yyyyMMddHHmm&quot;, &quot;MM/dd/yyyy HH:mm&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fe2689ec-1946-46d5-8dd6-8fbbf106e1e6</id>
                <name>14digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122871</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Take 14 digit string yyyyMMddHHmmss and change to MM/dd/yyyy HH:mm:ss 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm:ss
*/
function yyyyMMddHHmmss(string) {
	if (string.length == 14) {
		  return DateUtil.convertDate(&quot;yyyyMMddHHmmss&quot;, &quot;MM/dd/yyyy HH:mm:ss&quot;, string);
	}
	else {
		return &quot;unregcognized string&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b9db35e2-d5bd-48a1-8cc6-3475c698d7b4</id>
                <name>currentDT_yyyy-MM-dd HH:mm:ss.SSS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123114</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Kirby Knight
	Date Modified:  11/09/2020
	Retund the current date/time down to the millisecond

	@return {String} return description
*/
function currentDtToMilliseconds() {
	return DateUtil.getCurrentDate(&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7e747999-4bec-43fc-978d-7049d3543cf0</id>
                <name>fixHL7NodeOrder</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/

function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>dfedacf6-773b-413e-b78d-1bf16a92071d</id>
                <name>formatHL7Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121643</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Take any eight digit HL7 message data string (yyyyMMdd) and formats it human-readable format (MM/dd/yyyy)
	such as 20090612 -&gt; 06/12/2009

	@param {String} arg1 - 8 digit HL7 message data string yyyyMMdd
	@return {String} return date format as MM/dd/yyyy
*/
function formatHL7Date(string) {
	return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;MM/dd/yyyy&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a8f54921-2cb6-4134-8806-3c4e10a757d9</id>
                <name>getCurrentLocalTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122014</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = getCurrentLocalTimestamp();

	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestamp() {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(&quot;EST&quot;)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6c5f1bd8-ebbf-4c8e-b465-0be8ccaba0d0</id>
                <name>getCurrentLocalTimeToMs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123077</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	Gets the current local date/time to the milliseconds
	Converts to the timezone that is passed in Examples (America/New_York, America/Chicago, America/Phoenix )

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestampToMs(timeZone) {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timeZone)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>78d74c5b-c881-404a-ad96-4e909e1a19f3</id>
                <name>phoneToE164</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121982</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Insight phone number to E164 format 5554446666 to +15554446666

	@param {Any} phoneIn - 
	@return {String} return description
*/
function phoneToE164(phoneIn) {
	logger.info(&apos;L1 &apos;+phoneIn);
	if(phoneIn != null ){
	//phoneIn = &apos;+1&apos; + phoneIn.toString(); 
	logger.info(&apos;L2 &apos;+phoneIn);
	return &apos;+1&apos; + phoneIn.toString(); 
	} else{
		return null;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>6a32d94d-408c-4e10-9799-e45e150b5c1f</id>
            <name>WebPT-MISC</name>
            <revision>3</revision>
            <lastModified>
              <time>1690987207668</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>miscellaneous javascript</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>84b4f1c7-f82d-4140-9fbd-98a95f68ff32</id>
                <name>getChannelState</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122648</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetChannelState(channel_id) {

    var channel_status = &quot;NA&quot;;

    var channel_count = parseInt(Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().size());

    for(var i=0;i&lt;channel_count;i++) {
        if (channel_id == Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getChannelId()) {
            channel_status = Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getState();
        }
    }

    return channel_status;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>715435a9-cb15-4e8f-bc5b-4249eaea6e17</id>
                <name>momentjs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122487</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Testing MIRTH-3794 using external JavaScript library &quot;moment.js&quot;
*/
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=b():&quot;function&quot;==typeof define&amp;&amp;define.amd?define(b):a.moment=b()}(this,function(){&quot;use strict&quot;;function a(){return Hc.apply(null,arguments)}function b(a){Hc=a}function c(a){return&quot;[object Array]&quot;===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||&quot;[object Date]&quot;===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c&lt;a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&amp;&amp;(a[c]=b[c]);return f(b,&quot;toString&quot;)&amp;&amp;(a.toString=b.toString),f(b,&quot;valueOf&quot;)&amp;&amp;(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ca(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&amp;&amp;(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow&lt;0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&amp;&amp;(a._isValid=a._isValid&amp;&amp;0===b.charsLeftOver&amp;&amp;0===b.unusedTokens.length&amp;&amp;void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if(&quot;undefined&quot;!=typeof b._isAMomentObject&amp;&amp;(a._isAMomentObject=b._isAMomentObject),&quot;undefined&quot;!=typeof b._i&amp;&amp;(a._i=b._i),&quot;undefined&quot;!=typeof b._f&amp;&amp;(a._f=b._f),&quot;undefined&quot;!=typeof b._l&amp;&amp;(a._l=b._l),&quot;undefined&quot;!=typeof b._strict&amp;&amp;(a._strict=b._strict),&quot;undefined&quot;!=typeof b._tzm&amp;&amp;(a._tzm=b._tzm),&quot;undefined&quot;!=typeof b._isUTC&amp;&amp;(a._isUTC=b._isUTC),&quot;undefined&quot;!=typeof b._offset&amp;&amp;(a._offset=b._offset),&quot;undefined&quot;!=typeof b._pf&amp;&amp;(a._pf=j(b)),&quot;undefined&quot;!=typeof b._locale&amp;&amp;(a._locale=b._locale),Jc.length&gt;0)for(c in Jc)d=Jc[c],e=b[d],&quot;undefined&quot;!=typeof e&amp;&amp;(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),Kc===!1&amp;&amp;(Kc=!0,a.updateOffset(this),Kc=!1)}function o(a){return a instanceof n||null!=a&amp;&amp;null!=a._isAMomentObject}function p(a){return 0&gt;a?Math.ceil(a):Math.floor(a)}function q(a){var b=+a,c=0;return 0!==b&amp;&amp;isFinite(b)&amp;&amp;(c=p(b)),c}function r(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e&gt;d;d++)(c&amp;&amp;a[d]!==b[d]||!c&amp;&amp;q(a[d])!==q(b[d]))&amp;&amp;g++;return g+f}function s(){}function t(a){return a?a.toLowerCase().replace(&quot;_&quot;,&quot;-&quot;):a}function u(a){for(var b,c,d,e,f=0;f&lt;a.length;){for(e=t(a[f]).split(&quot;-&quot;),b=e.length,c=t(a[f+1]),c=c?c.split(&quot;-&quot;):null;b&gt;0;){if(d=v(e.slice(0,b).join(&quot;-&quot;)))return d;if(c&amp;&amp;c.length&gt;=b&amp;&amp;r(e,c,!0)&gt;=b-1)break;b--}f++}return null}function v(a){var b=null;if(!Lc[a]&amp;&amp;&quot;undefined&quot;!=typeof module&amp;&amp;module&amp;&amp;module.exports)try{b=Ic._abbr,require(&quot;./locale/&quot;+a),w(b)}catch(c){}return Lc[a]}function w(a,b){var c;return a&amp;&amp;(c=&quot;undefined&quot;==typeof b?y(a):x(a,b),c&amp;&amp;(Ic=c)),Ic._abbr}function x(a,b){return null!==b?(b.abbr=a,Lc[a]=Lc[a]||new s,Lc[a].set(b),w(a),Lc[a]):(delete Lc[a],null)}function y(a){var b;if(a&amp;&amp;a._locale&amp;&amp;a._locale._abbr&amp;&amp;(a=a._locale._abbr),!a)return Ic;if(!c(a)){if(b=v(a))return b;a=[a]}return u(a)}function z(a,b){var c=a.toLowerCase();Mc[c]=Mc[c+&quot;s&quot;]=Mc[b]=a}function A(a){return&quot;string&quot;==typeof a?Mc[a]||Mc[a.toLowerCase()]:void 0}function B(a){var b,c,d={};for(c in a)f(a,c)&amp;&amp;(b=A(c),b&amp;&amp;(d[b]=a[c]));return d}function C(b,c){return function(d){return null!=d?(E(this,b,d),a.updateOffset(this,c),this):D(this,b)}}function D(a,b){return a._d[&quot;get&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b]()}function E(a,b,c){return a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b](c)}function F(a,b){var c;if(&quot;object&quot;==typeof a)for(c in a)this.set(c,a[c]);else if(a=A(a),&quot;function&quot;==typeof this[a])return this[a](b);return this}function G(a,b,c){var d=&quot;&quot;+Math.abs(a),e=b-d.length,f=a&gt;=0;return(f?c?&quot;+&quot;:&quot;&quot;:&quot;-&quot;)+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function H(a,b,c,d){var e=d;&quot;string&quot;==typeof d&amp;&amp;(e=function(){return this[d]()}),a&amp;&amp;(Qc[a]=e),b&amp;&amp;(Qc[b[0]]=function(){return G(e.apply(this,arguments),b[1],b[2])}),c&amp;&amp;(Qc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function I(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,&quot;&quot;):a.replace(/\\/g,&quot;&quot;)}function J(a){var b,c,d=a.match(Nc);for(b=0,c=d.length;c&gt;b;b++)Qc[d[b]]?d[b]=Qc[d[b]]:d[b]=I(d[b]);return function(e){var f=&quot;&quot;;for(b=0;c&gt;b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function K(a,b){return a.isValid()?(b=L(b,a.localeData()),Pc[b]=Pc[b]||J(b),Pc[b](a)):a.localeData().invalidDate()}function L(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Oc.lastIndex=0;d&gt;=0&amp;&amp;Oc.test(a);)a=a.replace(Oc,c),Oc.lastIndex=0,d-=1;return a}function M(a){return&quot;function&quot;==typeof a&amp;&amp;&quot;[object Function]&quot;===Object.prototype.toString.call(a)}function N(a,b,c){dd[a]=M(b)?b:function(a){return a&amp;&amp;c?c:b}}function O(a,b){return f(dd,a)?dd[a](b._strict,b._locale):new RegExp(P(a))}function P(a){return a.replace(&quot;\\&quot;,&quot;&quot;).replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,&quot;\\$&amp;&quot;)}function Q(a,b){var c,d=b;for(&quot;string&quot;==typeof a&amp;&amp;(a=[a]),&quot;number&quot;==typeof b&amp;&amp;(d=function(a,c){c[b]=q(a)}),c=0;c&lt;a.length;c++)ed[a[c]]=d}function R(a,b){Q(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function S(a,b,c){null!=b&amp;&amp;f(ed,a)&amp;&amp;ed[a](b,c._a,c,a)}function T(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function U(a){return this._months[a.month()]}function V(a){return this._monthsShort[a.month()]}function W(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12&gt;d;d++){if(e=h([2e3,d]),c&amp;&amp;!this._longMonthsParse[d]&amp;&amp;(this._longMonthsParse[d]=new RegExp(&quot;^&quot;+this.months(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;),this._shortMonthsParse[d]=new RegExp(&quot;^&quot;+this.monthsShort(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;)),c||this._monthsParse[d]||(f=&quot;^&quot;+this.months(e,&quot;&quot;)+&quot;|^&quot;+this.monthsShort(e,&quot;&quot;),this._monthsParse[d]=new RegExp(f.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),c&amp;&amp;&quot;MMMM&quot;===b&amp;&amp;this._longMonthsParse[d].test(a))return d;if(c&amp;&amp;&quot;MMM&quot;===b&amp;&amp;this._shortMonthsParse[d].test(a))return d;if(!c&amp;&amp;this._monthsParse[d].test(a))return d}}function X(a,b){var c;return&quot;string&quot;==typeof b&amp;&amp;(b=a.localeData().monthsParse(b),&quot;number&quot;!=typeof b)?a:(c=Math.min(a.date(),T(a.year(),b)),a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+&quot;Month&quot;](b,c),a)}function Y(b){return null!=b?(X(this,b),a.updateOffset(this,!0),this):D(this,&quot;Month&quot;)}function Z(){return T(this.year(),this.month())}function $(a){var b,c=a._a;return c&amp;&amp;-2===j(a).overflow&amp;&amp;(b=c[gd]&lt;0||c[gd]&gt;11?gd:c[hd]&lt;1||c[hd]&gt;T(c[fd],c[gd])?hd:c[id]&lt;0||c[id]&gt;24||24===c[id]&amp;&amp;(0!==c[jd]||0!==c[kd]||0!==c[ld])?id:c[jd]&lt;0||c[jd]&gt;59?jd:c[kd]&lt;0||c[kd]&gt;59?kd:c[ld]&lt;0||c[ld]&gt;999?ld:-1,j(a)._overflowDayOfYear&amp;&amp;(fd&gt;b||b&gt;hd)&amp;&amp;(b=hd),j(a).overflow=b),a}function _(b){a.suppressDeprecationWarnings===!1&amp;&amp;&quot;undefined&quot;!=typeof console&amp;&amp;console.warn&amp;&amp;console.warn(&quot;Deprecation warning: &quot;+b)}function aa(a,b){var c=!0;return g(function(){return c&amp;&amp;(_(a+&quot;\n&quot;+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function ba(a,b){od[a]||(_(b),od[a]=!0)}function ca(a){var b,c,d=a._i,e=pd.exec(d);if(e){for(j(a).iso=!0,b=0,c=qd.length;c&gt;b;b++)if(qd[b][1].exec(d)){a._f=qd[b][0];break}for(b=0,c=rd.length;c&gt;b;b++)if(rd[b][1].exec(d)){a._f+=(e[6]||&quot; &quot;)+rd[b][0];break}d.match(ad)&amp;&amp;(a._f+=&quot;Z&quot;),va(a)}else a._isValid=!1}function da(b){var c=sd.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ca(b),void(b._isValid===!1&amp;&amp;(delete b._isValid,a.createFromInputFallback(b))))}function ea(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970&gt;a&amp;&amp;h.setFullYear(a),h}function fa(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970&gt;a&amp;&amp;b.setUTCFullYear(a),b}function ga(a){return ha(a)?366:365}function ha(a){return a%4===0&amp;&amp;a%100!==0||a%400===0}function ia(){return ha(this.year())}function ja(a,b,c){var d,e=c-b,f=c-a.day();return f&gt;e&amp;&amp;(f-=7),e-7&gt;f&amp;&amp;(f+=7),d=Da(a).add(f,&quot;d&quot;),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ka(a){return ja(a,this._week.dow,this._week.doy).week}function la(){return this._week.dow}function ma(){return this._week.doy}function na(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function oa(a){var b=ja(this,1,4).week;return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function pa(a,b,c,d,e){var f,g=6+e-d,h=fa(a,0,1+g),i=h.getUTCDay();return e&gt;i&amp;&amp;(i+=7),c=null!=c?1*c:e,f=1+g+7*(b-1)-i+c,{year:f&gt;0?a:a-1,dayOfYear:f&gt;0?f:ga(a-1)+f}}function qa(a){var b=Math.round((this.clone().startOf(&quot;day&quot;)-this.clone().startOf(&quot;year&quot;))/864e5)+1;return null==a?b:this.add(a-b,&quot;d&quot;)}function ra(a,b,c){return null!=a?a:null!=b?b:c}function sa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ta(a){var b,c,d,e,f=[];if(!a._d){for(d=sa(a),a._w&amp;&amp;null==a._a[hd]&amp;&amp;null==a._a[gd]&amp;&amp;ua(a),a._dayOfYear&amp;&amp;(e=ra(a._a[fd],d[fd]),a._dayOfYear&gt;ga(e)&amp;&amp;(j(a)._overflowDayOfYear=!0),c=fa(e,0,a._dayOfYear),a._a[gd]=c.getUTCMonth(),a._a[hd]=c.getUTCDate()),b=0;3&gt;b&amp;&amp;null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7&gt;b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[id]&amp;&amp;0===a._a[jd]&amp;&amp;0===a._a[kd]&amp;&amp;0===a._a[ld]&amp;&amp;(a._nextDay=!0,a._a[id]=0),a._d=(a._useUTC?fa:ea).apply(null,f),null!=a._tzm&amp;&amp;a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&amp;&amp;(a._a[id]=24)}}function ua(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=ra(b.GG,a._a[fd],ja(Da(),1,4).year),d=ra(b.W,1),e=ra(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=ra(b.gg,a._a[fd],ja(Da(),f,g).year),d=ra(b.w,1),null!=b.d?(e=b.d,f&gt;e&amp;&amp;++d):e=null!=b.e?b.e+f:f),h=pa(c,d,e,g,f),a._a[fd]=h.year,a._dayOfYear=h.dayOfYear}function va(b){if(b._f===a.ISO_8601)return void ca(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=&quot;&quot;+b._i,i=h.length,k=0;for(e=L(b._f,b._locale).match(Nc)||[],c=0;c&lt;e.length;c++)f=e[c],d=(h.match(O(f,b))||[])[0],d&amp;&amp;(g=h.substr(0,h.indexOf(d)),g.length&gt;0&amp;&amp;j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Qc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),S(f,d,b)):b._strict&amp;&amp;!d&amp;&amp;j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length&gt;0&amp;&amp;j(b).unusedInput.push(h),j(b).bigHour===!0&amp;&amp;b._a[id]&lt;=12&amp;&amp;b._a[id]&gt;0&amp;&amp;(j(b).bigHour=void 0),b._a[id]=wa(b._locale,b._a[id],b._meridiem),ta(b),$(b)}function wa(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&amp;&amp;12&gt;b&amp;&amp;(b+=12),d||12!==b||(b=0),b):b}function xa(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e&lt;a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&amp;&amp;(b._useUTC=a._useUTC),b._f=a._f[e],va(b),k(b)&amp;&amp;(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d&gt;f)&amp;&amp;(d=f,c=b));g(a,c||b)}function ya(a){if(!a._d){var b=B(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ta(a)}}function za(a){var b=new n($(Aa(a)));return b._nextDay&amp;&amp;(b.add(1,&quot;d&quot;),b._nextDay=void 0),b}function Aa(a){var b=a._i,e=a._f;return a._locale=a._locale||y(a._l),null===b||void 0===e&amp;&amp;&quot;&quot;===b?l({nullInput:!0}):(&quot;string&quot;==typeof b&amp;&amp;(a._i=b=a._locale.preparse(b)),o(b)?new n($(b)):(c(e)?xa(a):e?va(a):d(b)?a._d=b:Ba(a),a))}function Ba(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):&quot;string&quot;==typeof f?da(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ta(b)):&quot;object&quot;==typeof f?ya(b):&quot;number&quot;==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ca(a,b,c,d,e){var f={};return&quot;boolean&quot;==typeof c&amp;&amp;(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,za(f)}function Da(a,b,c,d){return Ca(a,b,c,d,!1)}function Ea(a,b){var d,e;if(1===b.length&amp;&amp;c(b[0])&amp;&amp;(b=b[0]),!b.length)return Da();for(d=b[0],e=1;e&lt;b.length;++e)(!b[e].isValid()||b[e][a](d))&amp;&amp;(d=b[e]);return d}function Fa(){var a=[].slice.call(arguments,0);return Ea(&quot;isBefore&quot;,a)}function Ga(){var a=[].slice.call(arguments,0);return Ea(&quot;isAfter&quot;,a)}function Ha(a){var b=B(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=y(),this._bubble()}function Ia(a){return a instanceof Ha}function Ja(a,b){H(a,0,0,function(){var a=this.utcOffset(),c=&quot;+&quot;;return 0&gt;a&amp;&amp;(a=-a,c=&quot;-&quot;),c+G(~~(a/60),2)+b+G(~~a%60,2)})}function Ka(a){var b=(a||&quot;&quot;).match(ad)||[],c=b[b.length-1]||[],d=(c+&quot;&quot;).match(xd)||[&quot;-&quot;,0,0],e=+(60*d[1])+q(d[2]);return&quot;+&quot;===d[0]?e:-e}function La(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Da(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Da(b).local()}function Ma(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Na(b,c){var d,e=this._offset||0;return null!=b?(&quot;string&quot;==typeof b&amp;&amp;(b=Ka(b)),Math.abs(b)&lt;16&amp;&amp;(b=60*b),!this._isUTC&amp;&amp;c&amp;&amp;(d=Ma(this)),this._offset=b,this._isUTC=!0,null!=d&amp;&amp;this.add(d,&quot;m&quot;),e!==b&amp;&amp;(!c||this._changeInProgress?bb(this,Ya(b-e,&quot;m&quot;),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ma(this)}function Oa(a,b){return null!=a?(&quot;string&quot;!=typeof a&amp;&amp;(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Pa(a){return this.utcOffset(0,a)}function Qa(a){return this._isUTC&amp;&amp;(this.utcOffset(0,a),this._isUTC=!1,a&amp;&amp;this.subtract(Ma(this),&quot;m&quot;)),this}function Ra(){return this._tzm?this.utcOffset(this._tzm):&quot;string&quot;==typeof this._i&amp;&amp;this.utcOffset(Ka(this._i)),this}function Sa(a){return a=a?Da(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Ta(){return this.utcOffset()&gt;this.clone().month(0).utcOffset()||this.utcOffset()&gt;this.clone().month(5).utcOffset()}function Ua(){if(&quot;undefined&quot;!=typeof this._isDSTShifted)return this._isDSTShifted;var a={};if(m(a,this),a=Aa(a),a._a){var b=a._isUTC?h(a._a):Da(a._a);this._isDSTShifted=this.isValid()&amp;&amp;r(a._a,b.toArray())&gt;0}else this._isDSTShifted=!1;return this._isDSTShifted}function Va(){return!this._isUTC}function Wa(){return this._isUTC}function Xa(){return this._isUTC&amp;&amp;0===this._offset}function Ya(a,b){var c,d,e,g=a,h=null;return Ia(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:&quot;number&quot;==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=yd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:0,d:q(h[hd])*c,h:q(h[id])*c,m:q(h[jd])*c,s:q(h[kd])*c,ms:q(h[ld])*c}):(h=zd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:Za(h[2],c),M:Za(h[3],c),d:Za(h[4],c),h:Za(h[5],c),m:Za(h[6],c),s:Za(h[7],c),w:Za(h[8],c)}):null==g?g={}:&quot;object&quot;==typeof g&amp;&amp;(&quot;from&quot;in g||&quot;to&quot;in g)&amp;&amp;(e=_a(Da(g.from),Da(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ha(g),Ia(a)&amp;&amp;f(a,&quot;_locale&quot;)&amp;&amp;(d._locale=a._locale),d}function Za(a,b){var c=a&amp;&amp;parseFloat(a.replace(&quot;,&quot;,&quot;.&quot;));return(isNaN(c)?0:c)*b}function $a(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,&quot;M&quot;).isAfter(b)&amp;&amp;--c.months,c.milliseconds=+b-+a.clone().add(c.months,&quot;M&quot;),c}function _a(a,b){var c;return b=La(b,a),a.isBefore(b)?c=$a(a,b):(c=$a(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function ab(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(ba(b,&quot;moment().&quot;+b+&quot;(period, number) is deprecated. Please use moment().&quot;+b+&quot;(number, period).&quot;),f=c,c=d,d=f),c=&quot;string&quot;==typeof c?+c:c,e=Ya(c,d),bb(this,e,a),this}}function bb(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&amp;&amp;b._d.setTime(+b._d+f*d),g&amp;&amp;E(b,&quot;Date&quot;,D(b,&quot;Date&quot;)+g*d),h&amp;&amp;X(b,D(b,&quot;Month&quot;)+h*d),e&amp;&amp;a.updateOffset(b,g||h)}function cb(a,b){var c=a||Da(),d=La(c,this).startOf(&quot;day&quot;),e=this.diff(d,&quot;days&quot;,!0),f=-6&gt;e?&quot;sameElse&quot;:-1&gt;e?&quot;lastWeek&quot;:0&gt;e?&quot;lastDay&quot;:1&gt;e?&quot;sameDay&quot;:2&gt;e?&quot;nextDay&quot;:7&gt;e?&quot;nextWeek&quot;:&quot;sameElse&quot;;return this.format(b&amp;&amp;b[f]||this.localeData().calendar(f,this,Da(c)))}function db(){return new n(this)}function eb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this&gt;+a):(c=o(a)?+a:+Da(a),c&lt;+this.clone().startOf(b))}function fb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+a&gt;+this):(c=o(a)?+a:+Da(a),+this.clone().endOf(b)&lt;c)}function gb(a,b,c){return this.isAfter(a,c)&amp;&amp;this.isBefore(b,c)}function hb(a,b){var c;return b=A(b||&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this===+a):(c=+Da(a),+this.clone().startOf(b)&lt;=c&amp;&amp;c&lt;=+this.clone().endOf(b))}function ib(a,b,c){var d,e,f=La(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=A(b),&quot;year&quot;===b||&quot;month&quot;===b||&quot;quarter&quot;===b?(e=jb(this,f),&quot;quarter&quot;===b?e/=3:&quot;year&quot;===b&amp;&amp;(e/=12)):(d=this-f,e=&quot;second&quot;===b?d/1e3:&quot;minute&quot;===b?d/6e4:&quot;hour&quot;===b?d/36e5:&quot;day&quot;===b?(d-g)/864e5:&quot;week&quot;===b?(d-g)/6048e5:d),c?e:p(e)}function jb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,&quot;months&quot;);return 0&gt;b-f?(c=a.clone().add(e-1,&quot;months&quot;),d=(b-f)/(f-c)):(c=a.clone().add(e+1,&quot;months&quot;),d=(b-f)/(c-f)),-(e+d)}function kb(){return this.clone().locale(&quot;en&quot;).format(&quot;ddd MMM DD YYYY HH:mm:ss [GMT]ZZ&quot;)}function lb(){var a=this.clone().utc();return 0&lt;a.year()&amp;&amp;a.year()&lt;=9999?&quot;function&quot;==typeof Date.prototype.toISOString?this.toDate().toISOString():K(a,&quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;):K(a,&quot;YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;)}function mb(b){var c=K(this,b||a.defaultFormat);return this.localeData().postformat(c)}function nb(a,b){return this.isValid()?Ya({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.from(Da(),a)}function pb(a,b){return this.isValid()?Ya({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function qb(a){return this.to(Da(),a)}function rb(a){var b;return void 0===a?this._locale._abbr:(b=y(a),null!=b&amp;&amp;(this._locale=b),this)}function sb(){return this._locale}function tb(a){switch(a=A(a)){case&quot;year&quot;:this.month(0);case&quot;quarter&quot;:case&quot;month&quot;:this.date(1);case&quot;week&quot;:case&quot;isoWeek&quot;:case&quot;day&quot;:this.hours(0);case&quot;hour&quot;:this.minutes(0);case&quot;minute&quot;:this.seconds(0);case&quot;second&quot;:this.milliseconds(0)}return&quot;week&quot;===a&amp;&amp;this.weekday(0),&quot;isoWeek&quot;===a&amp;&amp;this.isoWeekday(1),&quot;quarter&quot;===a&amp;&amp;this.month(3*Math.floor(this.month()/3)),this}function ub(a){return a=A(a),void 0===a||&quot;millisecond&quot;===a?this:this.startOf(a).add(1,&quot;isoWeek&quot;===a?&quot;week&quot;:a).subtract(1,&quot;ms&quot;)}function vb(){return+this._d-6e4*(this._offset||0)}function wb(){return Math.floor(+this/1e3)}function xb(){return this._offset?new Date(+this):this._d}function yb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function zb(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Ab(){return k(this)}function Bb(){return g({},j(this))}function Cb(){return j(this).overflow}function Db(a,b){H(0,[a,a.length],0,b)}function Eb(a,b,c){return ja(Da([a,11,31+b-c]),b,c).week}function Fb(a){var b=ja(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Gb(a){var b=ja(this,1,4).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Hb(){return Eb(this.year(),1,4)}function Ib(){var a=this.localeData()._week;return Eb(this.year(),a.dow,a.doy)}function Jb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Kb(a,b){return&quot;string&quot;!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),&quot;number&quot;==typeof a?a:null):parseInt(a,10)}function Lb(a){return this._weekdays[a.day()]}function Mb(a){return this._weekdaysShort[a.day()]}function Nb(a){return this._weekdaysMin[a.day()]}function Ob(a){var b,c,d;for(this._weekdaysParse=this._weekdaysParse||[],b=0;7&gt;b;b++)if(this._weekdaysParse[b]||(c=Da([2e3,1]).day(b),d=&quot;^&quot;+this.weekdays(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysShort(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysMin(c,&quot;&quot;),this._weekdaysParse[b]=new RegExp(d.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),this._weekdaysParse[b].test(a))return b}function Pb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Kb(a,this.localeData()),this.add(a-b,&quot;d&quot;)):b}function Qb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,&quot;d&quot;)}function Rb(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Sb(a,b){H(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Tb(a,b){return b._meridiemParse}function Ub(a){return&quot;p&quot;===(a+&quot;&quot;).toLowerCase().charAt(0)}function Vb(a,b,c){return a&gt;11?c?&quot;pm&quot;:&quot;PM&quot;:c?&quot;am&quot;:&quot;AM&quot;}function Wb(a,b){b[ld]=q(1e3*(&quot;0.&quot;+a))}function Xb(){return this._isUTC?&quot;UTC&quot;:&quot;&quot;}function Yb(){return this._isUTC?&quot;Coordinated Universal Time&quot;:&quot;&quot;}function Zb(a){return Da(1e3*a)}function $b(){return Da.apply(null,arguments).parseZone()}function _b(a,b,c){var d=this._calendar[a];return&quot;function&quot;==typeof d?d.call(b,c):d}function ac(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function bc(){return this._invalidDate}function cc(a){return this._ordinal.replace(&quot;%d&quot;,a)}function dc(a){return a}function ec(a,b,c,d){var e=this._relativeTime[c];return&quot;function&quot;==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function fc(a,b){var c=this._relativeTime[a&gt;0?&quot;future&quot;:&quot;past&quot;];return&quot;function&quot;==typeof c?c(b):c.replace(/%s/i,b)}function gc(a){var b,c;for(c in a)b=a[c],&quot;function&quot;==typeof b?this[c]=b:this[&quot;_&quot;+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+&quot;|&quot;+/\d{1,2}/.source)}function hc(a,b,c,d){var e=y(),f=h().set(d,b);return e[c](f,a)}function ic(a,b,c,d,e){if(&quot;number&quot;==typeof a&amp;&amp;(b=a,a=void 0),a=a||&quot;&quot;,null!=b)return hc(a,b,c,e);var f,g=[];for(f=0;d&gt;f;f++)g[f]=hc(a,f,c,e);return g}function jc(a,b){return ic(a,b,&quot;months&quot;,12,&quot;month&quot;)}function kc(a,b){return ic(a,b,&quot;monthsShort&quot;,12,&quot;month&quot;)}function lc(a,b){return ic(a,b,&quot;weekdays&quot;,7,&quot;day&quot;)}function mc(a,b){return ic(a,b,&quot;weekdaysShort&quot;,7,&quot;day&quot;)}function nc(a,b){return ic(a,b,&quot;weekdaysMin&quot;,7,&quot;day&quot;)}function oc(){var a=this._data;return this._milliseconds=Wd(this._milliseconds),this._days=Wd(this._days),this._months=Wd(this._months),a.milliseconds=Wd(a.milliseconds),a.seconds=Wd(a.seconds),a.minutes=Wd(a.minutes),a.hours=Wd(a.hours),a.months=Wd(a.months),a.years=Wd(a.years),this}function pc(a,b,c,d){var e=Ya(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function qc(a,b){return pc(this,a,b,1)}function rc(a,b){return pc(this,a,b,-1)}function sc(a){return 0&gt;a?Math.floor(a):Math.ceil(a)}function tc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f&gt;=0&amp;&amp;g&gt;=0&amp;&amp;h&gt;=0||0&gt;=f&amp;&amp;0&gt;=g&amp;&amp;0&gt;=h||(f+=864e5*sc(vc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=p(f/1e3),i.seconds=a%60,b=p(a/60),i.minutes=b%60,c=p(b/60),i.hours=c%24,g+=p(c/24),e=p(uc(g)),h+=e,g-=sc(vc(e)),d=p(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function uc(a){return 4800*a/146097}function vc(a){return 146097*a/4800}function wc(a){var b,c,d=this._milliseconds;if(a=A(a),&quot;month&quot;===a||&quot;year&quot;===a)return b=this._days+d/864e5,c=this._months+uc(b),&quot;month&quot;===a?c:c/12;switch(b=this._days+Math.round(vc(this._months)),a){case&quot;week&quot;:return b/7+d/6048e5;case&quot;day&quot;:return b+d/864e5;case&quot;hour&quot;:return 24*b+d/36e5;case&quot;minute&quot;:return 1440*b+d/6e4;case&quot;second&quot;:return 86400*b+d/1e3;case&quot;millisecond&quot;:return Math.floor(864e5*b)+d;default:throw new Error(&quot;Unknown unit &quot;+a)}}function xc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*q(this._months/12)}function yc(a){return function(){return this.as(a)}}function zc(a){return a=A(a),this[a+&quot;s&quot;]()}function Ac(a){return function(){return this._data[a]}}function Bc(){return p(this.days()/7)}function Cc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Dc(a,b,c){var d=Ya(a).abs(),e=ke(d.as(&quot;s&quot;)),f=ke(d.as(&quot;m&quot;)),g=ke(d.as(&quot;h&quot;)),h=ke(d.as(&quot;d&quot;)),i=ke(d.as(&quot;M&quot;)),j=ke(d.as(&quot;y&quot;)),k=e&lt;le.s&amp;&amp;[&quot;s&quot;,e]||1===f&amp;&amp;[&quot;m&quot;]||f&lt;le.m&amp;&amp;[&quot;mm&quot;,f]||1===g&amp;&amp;[&quot;h&quot;]||g&lt;le.h&amp;&amp;[&quot;hh&quot;,g]||1===h&amp;&amp;[&quot;d&quot;]||h&lt;le.d&amp;&amp;[&quot;dd&quot;,h]||1===i&amp;&amp;[&quot;M&quot;]||i&lt;le.M&amp;&amp;[&quot;MM&quot;,i]||1===j&amp;&amp;[&quot;y&quot;]||[&quot;yy&quot;,j];return k[2]=b,k[3]=+a&gt;0,k[4]=c,Cc.apply(null,k)}function Ec(a,b){return void 0===le[a]?!1:void 0===b?le[a]:(le[a]=b,!0)}function Fc(a){var b=this.localeData(),c=Dc(this,!a,b);return a&amp;&amp;(c=b.pastFuture(+this,c)),b.postformat(c)}function Gc(){var a,b,c,d=me(this._milliseconds)/1e3,e=me(this._days),f=me(this._months);a=p(d/60),b=p(a/60),d%=60,a%=60,c=p(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0&gt;m?&quot;-&quot;:&quot;&quot;)+&quot;P&quot;+(g?g+&quot;Y&quot;:&quot;&quot;)+(h?h+&quot;M&quot;:&quot;&quot;)+(i?i+&quot;D&quot;:&quot;&quot;)+(j||k||l?&quot;T&quot;:&quot;&quot;)+(j?j+&quot;H&quot;:&quot;&quot;)+(k?k+&quot;M&quot;:&quot;&quot;)+(l?l+&quot;S&quot;:&quot;&quot;):&quot;P0D&quot;}var Hc,Ic,Jc=a.momentProperties=[],Kc=!1,Lc={},Mc={},Nc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Pc={},Qc={},Rc=/\d/,Sc=/\d\d/,Tc=/\d{3}/,Uc=/\d{4}/,Vc=/[+-]?\d{6}/,Wc=/\d\d?/,Xc=/\d{1,3}/,Yc=/\d{1,4}/,Zc=/[+-]?\d{1,6}/,$c=/\d+/,_c=/[+-]?\d+/,ad=/Z|[+-]\d\d:?\d\d/gi,bd=/[+-]?\d+(\.\d{1,3})?/,cd=/[0-9]*[&apos;a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,dd={},ed={},fd=0,gd=1,hd=2,id=3,jd=4,kd=5,ld=6;H(&quot;M&quot;,[&quot;MM&quot;,2],&quot;Mo&quot;,function(){return this.month()+1}),H(&quot;MMM&quot;,0,0,function(a){return this.localeData().monthsShort(this,a)}),H(&quot;MMMM&quot;,0,0,function(a){return this.localeData().months(this,a)}),z(&quot;month&quot;,&quot;M&quot;),N(&quot;M&quot;,Wc),N(&quot;MM&quot;,Wc,Sc),N(&quot;MMM&quot;,cd),N(&quot;MMMM&quot;,cd),Q([&quot;M&quot;,&quot;MM&quot;],function(a,b){b[gd]=q(a)-1}),Q([&quot;MMM&quot;,&quot;MMMM&quot;],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[gd]=e:j(c).invalidMonth=a});var md=&quot;January_February_March_April_May_June_July_August_September_October_November_December&quot;.split(&quot;_&quot;),nd=&quot;Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec&quot;.split(&quot;_&quot;),od={};a.suppressDeprecationWarnings=!1;var pd=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,qd=[[&quot;YYYYYY-MM-DD&quot;,/[+-]\d{6}-\d{2}-\d{2}/],[&quot;YYYY-MM-DD&quot;,/\d{4}-\d{2}-\d{2}/],[&quot;GGGG-[W]WW-E&quot;,/\d{4}-W\d{2}-\d/],[&quot;GGGG-[W]WW&quot;,/\d{4}-W\d{2}/],[&quot;YYYY-DDD&quot;,/\d{4}-\d{3}/]],rd=[[&quot;HH:mm:ss.SSSS&quot;,/(T| )\d\d:\d\d:\d\d\.\d+/],[&quot;HH:mm:ss&quot;,/(T| )\d\d:\d\d:\d\d/],[&quot;HH:mm&quot;,/(T| )\d\d:\d\d/],[&quot;HH&quot;,/(T| )\d\d/]],sd=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=aa(&quot;moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.&quot;,function(a){a._d=new Date(a._i+(a._useUTC?&quot; UTC&quot;:&quot;&quot;))}),H(0,[&quot;YY&quot;,2],0,function(){return this.year()%100}),H(0,[&quot;YYYY&quot;,4],0,&quot;year&quot;),H(0,[&quot;YYYYY&quot;,5],0,&quot;year&quot;),H(0,[&quot;YYYYYY&quot;,6,!0],0,&quot;year&quot;),z(&quot;year&quot;,&quot;y&quot;),N(&quot;Y&quot;,_c),N(&quot;YY&quot;,Wc,Sc),N(&quot;YYYY&quot;,Yc,Uc),N(&quot;YYYYY&quot;,Zc,Vc),N(&quot;YYYYYY&quot;,Zc,Vc),Q([&quot;YYYYY&quot;,&quot;YYYYYY&quot;],fd),Q(&quot;YYYY&quot;,function(b,c){c[fd]=2===b.length?a.parseTwoDigitYear(b):q(b)}),Q(&quot;YY&quot;,function(b,c){c[fd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return q(a)+(q(a)&gt;68?1900:2e3)};var td=C(&quot;FullYear&quot;,!1);H(&quot;w&quot;,[&quot;ww&quot;,2],&quot;wo&quot;,&quot;week&quot;),H(&quot;W&quot;,[&quot;WW&quot;,2],&quot;Wo&quot;,&quot;isoWeek&quot;),z(&quot;week&quot;,&quot;w&quot;),z(&quot;isoWeek&quot;,&quot;W&quot;),N(&quot;w&quot;,Wc),N(&quot;ww&quot;,Wc,Sc),N(&quot;W&quot;,Wc),N(&quot;WW&quot;,Wc,Sc),R([&quot;w&quot;,&quot;ww&quot;,&quot;W&quot;,&quot;WW&quot;],function(a,b,c,d){b[d.substr(0,1)]=q(a)});var ud={dow:0,doy:6};H(&quot;DDD&quot;,[&quot;DDDD&quot;,3],&quot;DDDo&quot;,&quot;dayOfYear&quot;),z(&quot;dayOfYear&quot;,&quot;DDD&quot;),N(&quot;DDD&quot;,Xc),N(&quot;DDDD&quot;,Tc),Q([&quot;DDD&quot;,&quot;DDDD&quot;],function(a,b,c){c._dayOfYear=q(a)}),a.ISO_8601=function(){};var vd=aa(&quot;moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return this&gt;a?this:a}),wd=aa(&quot;moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return a&gt;this?this:a});Ja(&quot;Z&quot;,&quot;:&quot;),Ja(&quot;ZZ&quot;,&quot;&quot;),N(&quot;Z&quot;,ad),N(&quot;ZZ&quot;,ad),Q([&quot;Z&quot;,&quot;ZZ&quot;],function(a,b,c){c._useUTC=!0,c._tzm=Ka(a)});var xd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var yd=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,zd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Ya.fn=Ha.prototype;var Ad=ab(1,&quot;add&quot;),Bd=ab(-1,&quot;subtract&quot;);a.defaultFormat=&quot;YYYY-MM-DDTHH:mm:ssZ&quot;;var Cd=aa(&quot;moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.&quot;,function(a){return void 0===a?this.localeData():this.locale(a)});H(0,[&quot;gg&quot;,2],0,function(){return this.weekYear()%100}),H(0,[&quot;GG&quot;,2],0,function(){return this.isoWeekYear()%100}),Db(&quot;gggg&quot;,&quot;weekYear&quot;),Db(&quot;ggggg&quot;,&quot;weekYear&quot;),Db(&quot;GGGG&quot;,&quot;isoWeekYear&quot;),Db(&quot;GGGGG&quot;,&quot;isoWeekYear&quot;),z(&quot;weekYear&quot;,&quot;gg&quot;),z(&quot;isoWeekYear&quot;,&quot;GG&quot;),N(&quot;G&quot;,_c),N(&quot;g&quot;,_c),N(&quot;GG&quot;,Wc,Sc),N(&quot;gg&quot;,Wc,Sc),N(&quot;GGGG&quot;,Yc,Uc),N(&quot;gggg&quot;,Yc,Uc),N(&quot;GGGGG&quot;,Zc,Vc),N(&quot;ggggg&quot;,Zc,Vc),R([&quot;gggg&quot;,&quot;ggggg&quot;,&quot;GGGG&quot;,&quot;GGGGG&quot;],function(a,b,c,d){b[d.substr(0,2)]=q(a)}),R([&quot;gg&quot;,&quot;GG&quot;],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),H(&quot;Q&quot;,0,0,&quot;quarter&quot;),z(&quot;quarter&quot;,&quot;Q&quot;),N(&quot;Q&quot;,Rc),Q(&quot;Q&quot;,function(a,b){b[gd]=3*(q(a)-1)}),H(&quot;D&quot;,[&quot;DD&quot;,2],&quot;Do&quot;,&quot;date&quot;),z(&quot;date&quot;,&quot;D&quot;),N(&quot;D&quot;,Wc),N(&quot;DD&quot;,Wc,Sc),N(&quot;Do&quot;,function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),Q([&quot;D&quot;,&quot;DD&quot;],hd),Q(&quot;Do&quot;,function(a,b){b[hd]=q(a.match(Wc)[0],10)});var Dd=C(&quot;Date&quot;,!0);H(&quot;d&quot;,0,&quot;do&quot;,&quot;day&quot;),H(&quot;dd&quot;,0,0,function(a){return this.localeData().weekdaysMin(this,a)}),H(&quot;ddd&quot;,0,0,function(a){return this.localeData().weekdaysShort(this,a)}),H(&quot;dddd&quot;,0,0,function(a){return this.localeData().weekdays(this,a)}),H(&quot;e&quot;,0,0,&quot;weekday&quot;),H(&quot;E&quot;,0,0,&quot;isoWeekday&quot;),z(&quot;day&quot;,&quot;d&quot;),z(&quot;weekday&quot;,&quot;e&quot;),z(&quot;isoWeekday&quot;,&quot;E&quot;),N(&quot;d&quot;,Wc),N(&quot;e&quot;,Wc),N(&quot;E&quot;,Wc),N(&quot;dd&quot;,cd),N(&quot;ddd&quot;,cd),N(&quot;dddd&quot;,cd),R([&quot;dd&quot;,&quot;ddd&quot;,&quot;dddd&quot;],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),R([&quot;d&quot;,&quot;e&quot;,&quot;E&quot;],function(a,b,c,d){b[d]=q(a)});var Ed=&quot;Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday&quot;.split(&quot;_&quot;),Fd=&quot;Sun_Mon_Tue_Wed_Thu_Fri_Sat&quot;.split(&quot;_&quot;),Gd=&quot;Su_Mo_Tu_We_Th_Fr_Sa&quot;.split(&quot;_&quot;);H(&quot;H&quot;,[&quot;HH&quot;,2],0,&quot;hour&quot;),H(&quot;h&quot;,[&quot;hh&quot;,2],0,function(){return this.hours()%12||12}),Sb(&quot;a&quot;,!0),Sb(&quot;A&quot;,!1),z(&quot;hour&quot;,&quot;h&quot;),N(&quot;a&quot;,Tb),N(&quot;A&quot;,Tb),N(&quot;H&quot;,Wc),N(&quot;h&quot;,Wc),N(&quot;HH&quot;,Wc,Sc),N(&quot;hh&quot;,Wc,Sc),Q([&quot;H&quot;,&quot;HH&quot;],id),Q([&quot;a&quot;,&quot;A&quot;],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),Q([&quot;h&quot;,&quot;hh&quot;],function(a,b,c){b[id]=q(a),j(c).bigHour=!0});var Hd=/[ap]\.?m?\.?/i,Id=C(&quot;Hours&quot;,!0);H(&quot;m&quot;,[&quot;mm&quot;,2],0,&quot;minute&quot;),z(&quot;minute&quot;,&quot;m&quot;),N(&quot;m&quot;,Wc),N(&quot;mm&quot;,Wc,Sc),Q([&quot;m&quot;,&quot;mm&quot;],jd);var Jd=C(&quot;Minutes&quot;,!1);H(&quot;s&quot;,[&quot;ss&quot;,2],0,&quot;second&quot;),z(&quot;second&quot;,&quot;s&quot;),N(&quot;s&quot;,Wc),N(&quot;ss&quot;,Wc,Sc),Q([&quot;s&quot;,&quot;ss&quot;],kd);var Kd=C(&quot;Seconds&quot;,!1);H(&quot;S&quot;,0,0,function(){return~~(this.millisecond()/100)}),H(0,[&quot;SS&quot;,2],0,function(){return~~(this.millisecond()/10)}),H(0,[&quot;SSS&quot;,3],0,&quot;millisecond&quot;),H(0,[&quot;SSSS&quot;,4],0,function(){return 10*this.millisecond()}),H(0,[&quot;SSSSS&quot;,5],0,function(){return 100*this.millisecond()}),H(0,[&quot;SSSSSS&quot;,6],0,function(){return 1e3*this.millisecond()}),H(0,[&quot;SSSSSSS&quot;,7],0,function(){return 1e4*this.millisecond()}),H(0,[&quot;SSSSSSSS&quot;,8],0,function(){return 1e5*this.millisecond()}),H(0,[&quot;SSSSSSSSS&quot;,9],0,function(){return 1e6*this.millisecond()}),z(&quot;millisecond&quot;,&quot;ms&quot;),N(&quot;S&quot;,Xc,Rc),N(&quot;SS&quot;,Xc,Sc),N(&quot;SSS&quot;,Xc,Tc);var Ld;for(Ld=&quot;SSSS&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)N(Ld,$c);for(Ld=&quot;S&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)Q(Ld,Wb);var Md=C(&quot;Milliseconds&quot;,!1);H(&quot;z&quot;,0,0,&quot;zoneAbbr&quot;),H(&quot;zz&quot;,0,0,&quot;zoneName&quot;);var Nd=n.prototype;Nd.add=Ad,Nd.calendar=cb,Nd.clone=db,Nd.diff=ib,Nd.endOf=ub,Nd.format=mb,Nd.from=nb,Nd.fromNow=ob,Nd.to=pb,Nd.toNow=qb,Nd.get=F,Nd.invalidAt=Cb,Nd.isAfter=eb,Nd.isBefore=fb,Nd.isBetween=gb,Nd.isSame=hb,Nd.isValid=Ab,Nd.lang=Cd,Nd.locale=rb,Nd.localeData=sb,Nd.max=wd,Nd.min=vd,Nd.parsingFlags=Bb,Nd.set=F,Nd.startOf=tb,Nd.subtract=Bd,Nd.toArray=yb,Nd.toObject=zb,Nd.toDate=xb,Nd.toISOString=lb,Nd.toJSON=lb,Nd.toString=kb,Nd.unix=wb,Nd.valueOf=vb,Nd.year=td,Nd.isLeapYear=ia,Nd.weekYear=Fb,Nd.isoWeekYear=Gb,Nd.quarter=Nd.quarters=Jb,Nd.month=Y,Nd.daysInMonth=Z,Nd.week=Nd.weeks=na,Nd.isoWeek=Nd.isoWeeks=oa,Nd.weeksInYear=Ib,Nd.isoWeeksInYear=Hb,Nd.date=Dd,Nd.day=Nd.days=Pb,Nd.weekday=Qb,Nd.isoWeekday=Rb,Nd.dayOfYear=qa,Nd.hour=Nd.hours=Id,Nd.minute=Nd.minutes=Jd,Nd.second=Nd.seconds=Kd,
Nd.millisecond=Nd.milliseconds=Md,Nd.utcOffset=Na,Nd.utc=Pa,Nd.local=Qa,Nd.parseZone=Ra,Nd.hasAlignedHourOffset=Sa,Nd.isDST=Ta,Nd.isDSTShifted=Ua,Nd.isLocal=Va,Nd.isUtcOffset=Wa,Nd.isUtc=Xa,Nd.isUTC=Xa,Nd.zoneAbbr=Xb,Nd.zoneName=Yb,Nd.dates=aa(&quot;dates accessor is deprecated. Use date instead.&quot;,Dd),Nd.months=aa(&quot;months accessor is deprecated. Use month instead&quot;,Y),Nd.years=aa(&quot;years accessor is deprecated. Use year instead&quot;,td),Nd.zone=aa(&quot;moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779&quot;,Oa);var Od=Nd,Pd={sameDay:&quot;[Today at] LT&quot;,nextDay:&quot;[Tomorrow at] LT&quot;,nextWeek:&quot;dddd [at] LT&quot;,lastDay:&quot;[Yesterday at] LT&quot;,lastWeek:&quot;[Last] dddd [at] LT&quot;,sameElse:&quot;L&quot;},Qd={LTS:&quot;h:mm:ss A&quot;,LT:&quot;h:mm A&quot;,L:&quot;MM/DD/YYYY&quot;,LL:&quot;MMMM D, YYYY&quot;,LLL:&quot;MMMM D, YYYY h:mm A&quot;,LLLL:&quot;dddd, MMMM D, YYYY h:mm A&quot;},Rd=&quot;Invalid date&quot;,Sd=&quot;%d&quot;,Td=/\d{1,2}/,Ud={future:&quot;in %s&quot;,past:&quot;%s ago&quot;,s:&quot;a few seconds&quot;,m:&quot;a minute&quot;,mm:&quot;%d minutes&quot;,h:&quot;an hour&quot;,hh:&quot;%d hours&quot;,d:&quot;a day&quot;,dd:&quot;%d days&quot;,M:&quot;a month&quot;,MM:&quot;%d months&quot;,y:&quot;a year&quot;,yy:&quot;%d years&quot;},Vd=s.prototype;Vd._calendar=Pd,Vd.calendar=_b,Vd._longDateFormat=Qd,Vd.longDateFormat=ac,Vd._invalidDate=Rd,Vd.invalidDate=bc,Vd._ordinal=Sd,Vd.ordinal=cc,Vd._ordinalParse=Td,Vd.preparse=dc,Vd.postformat=dc,Vd._relativeTime=Ud,Vd.relativeTime=ec,Vd.pastFuture=fc,Vd.set=gc,Vd.months=U,Vd._months=md,Vd.monthsShort=V,Vd._monthsShort=nd,Vd.monthsParse=W,Vd.week=ka,Vd._week=ud,Vd.firstDayOfYear=ma,Vd.firstDayOfWeek=la,Vd.weekdays=Lb,Vd._weekdays=Ed,Vd.weekdaysMin=Nb,Vd._weekdaysMin=Gd,Vd.weekdaysShort=Mb,Vd._weekdaysShort=Fd,Vd.weekdaysParse=Ob,Vd.isPM=Ub,Vd._meridiemParse=Hd,Vd.meridiem=Vb,w(&quot;en&quot;,{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===q(a%100/10)?&quot;th&quot;:1===b?&quot;st&quot;:2===b?&quot;nd&quot;:3===b?&quot;rd&quot;:&quot;th&quot;;return a+c}}),a.lang=aa(&quot;moment.lang is deprecated. Use moment.locale instead.&quot;,w),a.langData=aa(&quot;moment.langData is deprecated. Use moment.localeData instead.&quot;,y);var Wd=Math.abs,Xd=yc(&quot;ms&quot;),Yd=yc(&quot;s&quot;),Zd=yc(&quot;m&quot;),$d=yc(&quot;h&quot;),_d=yc(&quot;d&quot;),ae=yc(&quot;w&quot;),be=yc(&quot;M&quot;),ce=yc(&quot;y&quot;),de=Ac(&quot;milliseconds&quot;),ee=Ac(&quot;seconds&quot;),fe=Ac(&quot;minutes&quot;),ge=Ac(&quot;hours&quot;),he=Ac(&quot;days&quot;),ie=Ac(&quot;months&quot;),je=Ac(&quot;years&quot;),ke=Math.round,le={s:45,m:45,h:22,d:26,M:11},me=Math.abs,ne=Ha.prototype;ne.abs=oc,ne.add=qc,ne.subtract=rc,ne.as=wc,ne.asMilliseconds=Xd,ne.asSeconds=Yd,ne.asMinutes=Zd,ne.asHours=$d,ne.asDays=_d,ne.asWeeks=ae,ne.asMonths=be,ne.asYears=ce,ne.valueOf=xc,ne._bubble=tc,ne.get=zc,ne.milliseconds=de,ne.seconds=ee,ne.minutes=fe,ne.hours=ge,ne.days=he,ne.weeks=Bc,ne.months=ie,ne.years=je,ne.humanize=Fc,ne.toISOString=Gc,ne.toString=Gc,ne.toJSON=Gc,ne.locale=rb,ne.localeData=sb,ne.toIsoString=aa(&quot;toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)&quot;,Gc),ne.lang=Cd,H(&quot;X&quot;,0,0,&quot;unix&quot;),H(&quot;x&quot;,0,0,&quot;valueOf&quot;),N(&quot;x&quot;,_c),N(&quot;X&quot;,bd),Q(&quot;X&quot;,function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),Q(&quot;x&quot;,function(a,b,c){c._d=new Date(q(a))}),a.version=&quot;2.10.6&quot;,b(Da),a.fn=Od,a.min=Fa,a.max=Ga,a.utc=h,a.unix=Zb,a.months=jc,a.isDate=d,a.locale=w,a.invalid=l,a.duration=Ya,a.isMoment=o,a.weekdays=lc,a.parseZone=$b,a.localeData=y,a.isDuration=Ia,a.monthsShort=kc,a.weekdaysMin=nc,a.defineLocale=x,a.weekdaysShort=mc,a.normalizeUnits=A,a.relativeTimeThreshold=Ec;var oe=a;return oe});</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2c64669f-f07e-4365-bf64-c559ace83004</id>
                <name>stopOnErrorCount</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122375</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to Stop a channel if it reaches a particular error count. 
	Also sends an alert message via another channel (this sends a sms via our monitoring system).

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function stopOnErrorCount(cid, errorCount) {
	var channelStatisticsController = Packages.com.mirth.connect.server.controllers.ChannelStatisticsController.getInstance();
	var channelStatusController = Packages.com.mirth.connect.server.controllers.ChannelStatusController.getInstance();
	var stats = channelStatisticsController.getStatistics(cid);
	// var numOfQueued = stats.queued;
	var numOfErrors = stats.error;

	if(numOfErrors &gt; errorCount )
	{
		//Stop Me
		channelStatusController.stopChannel(cid);
		//Alert msg sent to _SVHALERT channel
		var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
		var channelName = channelController.getDeployedChannelById(cid).getName();
		var alertmsg = &apos;mirth01 mirth_channel_status codeTemplate_stopOnErrorCount 0 &apos; +
					   &apos;channel &apos; + channelName + &apos; stopped&apos;;
		router.routeMessage(&apos;_SVHALERT&apos;, alertmsg);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>08044817-3504-4fc1-80ee-404870195151</id>
                <name>test</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122745</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.
	searchword
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function testfunc(arg1) {
	return arg1;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
            <name>WebPT-Mirth</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121602</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
                <name>Fix HL7v2 Node Order</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121804</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>35f4c250-08b4-4e42-8e60-f85aa98dfe50</id>
            <name>WebPT-Translations</name>
            <revision>3</revision>
            <lastModified>
              <time>1690140133521</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>be8f057b-2640-4613-b2e7-83326c59169c</id>
                <name>AddZeros</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122826</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function addZeroes(num) {
   return num.toLocaleString(&quot;en&quot;, {useGrouping: false, minimumFractionDigits: 2})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>51913864-7702-489a-b7c6-54992c12b19d</id>
                <name>FindLookupValueWithDefault</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122218</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithDefault ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        //obj.LeftValue = LeftValue;
        //obj.RightValue1 = DefaultValue1;
        //obj.RightValue2   = DefaultValue2; 
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);
            var result = pattern.test(LeftValue );

            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c276be9f-c8f1-4dea-8df0-e000c6745271</id>
                <name>FindLookupValueWithInsuranceId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122080</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithInsuranceId ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);             
            var result = pattern.test(LeftValue );
	
            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7d746da2-58c6-44eb-ad5c-c5bfd0a0c537</id>
                <name>UseExternalProblemID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122349</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalProblemID() {

if ([&apos;2804&apos;, &apos;2822&apos;].indexOf($(&apos;tenantId&apos;) + &apos;&apos;) &gt; -1) {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitexternalproblemid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitaccountnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>07730e85-7f30-4ddf-90a4-78183c896ab5</id>
                <name>UseExternalVisitID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122192</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalVisitID() {
	
if ($(&apos;tenantId&apos;)  == &apos;9999&apos; ) {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitexternalvisitid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitvisitnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="3.12.0">
      <id>3792b059-e098-436c-81fe-23502ef5042b</id>
      <nextMetaDataId>9</nextMetaDataId>
      <name>CH_TO_Redox_Financial</name>
      <description></description>
      <revision>84</revision>
      <sourceConnector version="3.12.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="3.12.0">
          <pluginProperties>
            <com.mirth.connect.plugins.httpauth.basic.BasicHttpAuthProperties version="3.12.0">
  <authType>BASIC</authType>
              <realm>My Realm</realm>
              <credentials class="linked-hash-map">
    <entry>
      <string>mirth</string>
                  <string>mirth</string>
                </entry>
              </credentials>
              <isUseCredentialsVariable>false</isUseCredentialsVariable>
              <credentialsVariable/>
            </com.mirth.connect.plugins.httpauth.basic.BasicHttpAuthProperties>
          </pluginProperties>
          <listenerConnectorProperties version="3.12.0">
            <host>0.0.0.0</host>
            <port>6671</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="3.12.0">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>false</xmlBody>
          <parseMultipart>true</parseMultipart>
          <includeMetadata>false</includeMetadata>
          <binaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</binaryMimeTypes>
          <binaryMimeTypesRegex>true</binaryMimeTypesRegex>
          <responseContentType>text/plain</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode></responseStatusCode>
          <responseHeaders class="linked-hash-map"/>
          <responseHeadersVariable></responseHeadersVariable>
          <useResponseHeadersVariable>false</useResponseHeadersVariable>
          <charset>UTF-8</charset>
          <contextPath></contextPath>
          <timeout>30000</timeout>
          <staticResources/>
        </properties>
        <transformer version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Metadata</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>//Metadata
var tenantId = msg[&apos;Meta&apos;][&apos;Destinations&apos;][0][&apos;ID&apos;].toString();
var patient_id = msg[&apos;Patient&apos;][&apos;Identifiers&apos;][0][&apos;ID&apos;].toString();
var patient_lname = msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;LastName&apos;].toString();
var patient_fname = msg[&apos;Patient&apos;][&apos;Demographics&apos;][&apos;FirstName&apos;].toString();
var visit_id = msg[&apos;Visit&apos;][&apos;VisitNumber&apos;].toString();
var visit_dt = msg[&apos;Visit&apos;][&apos;VisitDateTime&apos;].toString();
var meta_event_type = msg[&apos;Meta&apos;][&apos;EventType&apos;].toString();


channelMap.put(&apos;tenantId&apos;,tenantId);
channelMap.put(&apos;patient_id&apos;,patient_id);
channelMap.put(&apos;patient_lname&apos;,patient_lname);
channelMap.put(&apos;patient_fname&apos;,patient_fname);
channelMap.put(&apos;visit_id&apos;,visit_id);
channelMap.put(&apos;visit_dt&apos;,visit_dt);
channelMap.put(&apos;meta_event_type&apos;,meta_event_type);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>TranslateChargeCodes Integration options</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>//  The default is to not translate charge codes
var translateChargeCodes = false;

//  These are the customers who need the charge codes translated
if ([&apos;2919&apos;,&apos;2944&apos;].indexOf($(&apos;tenantId&apos;)+&apos;&apos;) &gt; -1){
	translateChargeCodes = true;
}

$c(&apos;translateChargeCodes&apos;, translateChargeCodes);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>TranslateInsuranceCodes  Integration options</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <script>//  The default is to not translate charge codes
var translateInsuranceCodes = false;

//  These are the customers who need the charge codes translated
if ([&apos;2919&apos;,&apos;2944&apos;].indexOf($(&apos;tenantId&apos;)+&apos;&apos;) &gt; -1){
	translateInsuranceCodes = true;
}

$c(&apos;translateInsuranceCodes&apos;, translateInsuranceCodes);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.javascriptrule.JavaScriptRule version="3.12.0">
              <name>Call Filter Msg Evaluate Received Checksum</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>/**  Desc: This code works by calculating a checksum for each message to uniquely identify it (we ignore the
	MSH and ORC segments). We save off the most recent 100 unique checksum values in a global 
	array so if the current message has been recently received we are able to ignore it.
		
	fileName:	     call_filter_msg_evaluate_received_checksum.js
	name:		Call Filter Msg Evaluate Received Checksum 
	authored:		Jeffrey Ritz
	created:		2023-03-06
	desc:		Evaluate Msg Checksum to call aligned with removeParentObject and removeChildObjectFromParentObject function code_templates
			  	true  -&gt; provide filter= true or filter= false
	history:
	2024-02-24 JER - Modified to evaluate removeParentObject and removeChildObjectFromParentObject function calls
*/

var scriptName= &apos;call_filter_msg_evaluate_received_checksum&apos;
var filter = false;
var received_len_limit = 999;
var debug= 0;

var msg= connectorMessage.getRawData();

if(debug&gt;0) {
	logger.error(&apos;DEBUG::&apos;+scriptName+&apos; BEFORE msg getRawData: &apos;+connectorMessage.getRawData());
	logger.error(&apos;DEBUG::&apos;+scriptName+&apos; BEFORE msg getEncoded: &apos;+connectorMessage.getEncoded());
	logger.error(&apos;DEBUG::&apos;+scriptName+&apos; BEFORE msg getEncodedData: &apos;+connectorMessage.getEncodedData());
	logger.error(&apos;DEBUG::&apos;+scriptName+&apos; BEFORE msg toString: &apos;+connectorMessage.toString());
} // end if 

// Remove Object from Json
var checksumValue= getMessageChecksum(msg);
if(debug&gt;0) {
	logger.info(&apos;Message BEFORE removeObjectFromJson: &apos;+checksumValue);
	logger.info(&apos;Message BEFORE removeObjectFromJson msg: &apos;+msg);
} // end if 
var newMsg= removeObjectFromJson(msg,&apos;Meta&apos;);
var checksumValue= getMessageChecksum(newMsg);

if(debug&gt;0) {
	logger.info(&apos;Message AFTER removeObjectFromJson: &apos;+checksumValue);
	logger.info(&apos;Message AFTER removeObjectFromJson msg: &apos;+JSON.stringify(newMsg));
}

// Remove Child Object from Parent Object Json
if(debug&gt;0) {
	logger.info(&apos;Message BEFORE removeChildObjectFromParentObjectJson: &apos;+checksumValue);
	logger.info(&apos;Message BEFORE removeChildObjectFromParentObjectJson msg: &apos;+JSON.stringify(newMsg));
}
var newMsg= removeChildObjectFromParentObjectJson(newMsg,&apos;Transactions&apos;,&apos;ID&apos;);
// getMessageChecksum value
var checksumValue= getMessageChecksum(newMsg);
if(debug&gt;0) {
	logger.info(&apos;Message AFTER removeChildObjectFromParentObjectJson: &apos;+checksumValue);
	logger.info(&apos;Message AFTER removeChildObjectFromParentObjectJson msg: &apos;+JSON.stringify(newMsg));
} 

//grab the global channel map variable holding the last X unique checksums that we&apos;ve received
var received = $gc(&apos;received_checksums&apos;);
	
if (received == undefined) {
	var received = new Array();
	// received.push(checksum.getValue());
	received.push(checksumValue);
	// getMessageChecksum value
	if(debug&gt;0) logger.info(&apos;INFO::&apos;+scriptName+&apos; EVALUATE received UNDEFINED push value: &apos;+received+&apos; into received with checksumValue: &apos;+checksumValue+&apos; filter: &apos;+filter);
} else {
	//check if we&apos;ve recently received this message, skip it if so
	var evalChecksumValue= received.indexOf(checksumValue);
	if (received.indexOf(checksumValue) &gt; -1) {
		filter = true;
	//we haven&apos;t seen it recently, so remember it and allow it through
	} else {
		var received_len = received.length;
		if (received_len &gt; received_len_limit) {
			//remove oldest/first entry, shift all entries forward, and add new entry to end
			received.shift();
			received[received_len_limit] = checksumValue;
		} else {
			//add new entry to end of array
			received[received_len] = checksumValue;
		} // end if 
	} // end if 
	if(debug&gt;0) logger.info(&apos;INFO::&apos;+scriptName+&apos; EVALUATE received: &apos;+received+&apos; checksumValue: &apos;+checksumValue+&apos; received.indexOf(checksumValue): &apos;+evalChecksumValue+&apos; filter: &apos;+filter);
} // end if 

//debug code
// for (x=0; x&lt;=received_len_limit; x++) {
//	$c(&apos;received-&apos;+x, received[x]);
// } 

$c(&apos;received_checksums&apos;,received);
$gc(&apos;received_checksums&apos;,received);

if(debug&gt;0) {
	logger.error(&apos;DEBUG::&apos;+scriptName+&apos; channelMap filterMessage: &apos;+filter);
} // end if 

if (filter == false) {
	var strError= &apos;DO NOT FILTER channelMap filterMessage: &apos;+filter+ &apos; return true&apos;;
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; &apos;+strError);
	channelMap.put(&apos;filterMessageLog&apos;,strError);
	return true;
} else {
	var strError= &apos;FILTER channelMap filterMessage: &apos;+filter+ &apos; return false&apos;;
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; &apos;+strError);
	channelMap.put(&apos;filterMessageLog&apos;,strError);
	return false;
} // end if</script>
            </com.mirth.connect.plugins.javascriptrule.JavaScriptRule>
            <com.mirth.connect.plugins.javascriptrule.JavaScriptRule version="3.12.0">
              <name>Source Connector Filter</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>false</enabled>
              <operator>AND</operator>
              <script>var scriptName= &apos;Source Connector Filter&apos;;
var debug= 0;
var msg= connectorMessage.getRawData();

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; BEFORE msg getRawData: &apos;+connectorMessage.getRawData());
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; BEFORE msg getEncoded: &apos;+connectorMessage.getEncoded());
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; BEFORE msg getEncodedData: &apos;+connectorMessage.getEncodedData());
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; BEFORE msg toString: &apos;+connectorMessage.toString());
	} // end if 

	var newMsg= JSON.parse(removeObjectFromJson(msg));
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER typeof msg: &apos;+typeof(newMsg)+&apos; newMsg: &apos;+JSON.stringify(newMsg));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; connectorMessage typeof: &apos;+typeof(connectorMessage));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER typeof connectorMessage.getRawData(): &apos;+typeof(connectorMessage.getRawData())+&apos; newMsg: &apos;+connectorMessage.getRawData());
	}
//var newMsg= newMsg.toString();
//logger.error(&apos;DEBUG::&apos;+scriptName+&apos; newStringMsg typeof: &apos;+typeof(newMsg)+&apos; newStringMsg: &apos;+newMsg); 

// filterEvaluateReceivedChecksum(connectorMessage.getRawData());
//filterEvaluateReceivedChecksum(newMsg);
//logger.info(&apos;DEBUG::&apos;+scriptName+&apos; BEFORE removeChildObjectFromParentObjectJson msg: &apos;+$gc(&apos;received_checksums&apos;));

var newMsg= removeChildObjectFromParentObjectJson(newMsg,&apos;Transactions&apos;,&apos;ID&apos;);
logger.info(&apos;DEBUG::&apos;+scriptName+&apos; modified msg: &apos;+JSON.stringify(newMsg));
filterEvaluateReceivedChecksum(newMsg);
logger.info(&apos;DEBUG::&apos;+scriptName+&apos; AFTER removeChildObjectFromParentObjectJson msg: &apos;+$gc(&apos;received_checksums&apos;)+&apos; removed objects: &apos;+$c(&apos;removedChildTransIds&apos;));
$c(&apos;received_checksum&apos;,$gc(&apos;received_checksums&apos;));

if(debug&gt;0) {
	logger.error(&apos;DEBUG::&apos;+scriptName+&apos; channelMap filterMessage: &apos;+$c(&apos;filterMessage&apos;));
	logger.error(&apos;DEBUG::&apos;+scriptName+&apos; globalChannelMap filterMessage: &apos;+$gc(&apos;filterMessage&apos;));
} // end if 

if ($c(&apos;filterMessage&apos;) == false) {
	var strError= &apos;DO NOT FILTER channelMap filterMessage: &apos;+$c(&apos;filterMessage&apos;)+ &apos; return true&apos;;
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; &apos;+strError);
	channelMap.put(&apos;filterMessageLog&apos;,strError);
	return true;
} else {
	var strError= &apos;FILTER channelMap filterMessage: &apos;+$c(&apos;filterMessage&apos;)+ &apos; return false&apos;;
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; &apos;+strError);
	channelMap.put(&apos;filterMessageLog&apos;,strError);
	return false;
} // end if</script>
            </com.mirth.connect.plugins.javascriptrule.JavaScriptRule>
          </elements>
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.12.0">
          <metaDataId>8</metaDataId>
          <name>TO_Redox_Financial ChannelWriter </name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Translate to hospital charge codes</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>//  Only run this for customers who are having the charge codes translated
if ($(&apos;translateChargeCodes&apos;) == true) {
    //looping through each transaction to replace Transactions[0].Chargeable.Code  with the translated values.
    //tmp.Transactions = JSON.parse(msg[&apos;transactionsnode&apos;].toString()).Transactions;

    // looping through transactions
    for each(Transaction in msg[&apos;Transactions&apos;]) {
        //  We only want to change the charge code for Charges
        if (Transaction.Type == &apos;Charge&apos;) {
            var procedure = Transaction.Procedure;
            var modifiers_Code = procedure.Code;
            var facility_Code = $(&apos;tenantId&apos;);
            var modifier = procedure.Modifiers;
            var CPT_CODE_Select = &quot;&quot;;
            for each(Mod in modifier) {
                CPT_CODE_Select = CPT_CODE_Select + Mod;
            }

            var leftValue = modifiers_Code + CPT_CODE_Select;

            // fetching values from respective globalChannelMap based on tenentID and storing into myObject
            var myObject = FindLookupValueWithDefault(&apos;all_charge_items_&apos; + facility_Code, leftValue);

            // Checking if the values are exist and if the combination of cpt_code and modifiers matches then replacing Chargeable code with translated values

            // if the cpt code doean&apos;t exist, default to CLINICIENT for the chargeable code
            if (myObject) {
                Transaction.Chargeable.Code = myObject.RightValue ? myObject.RightValue : &apos;CLINICIENT&apos;;
            } else {
                Transaction.Chargeable.Code = &apos;CLINICIENT&apos;;
            }
        }
    }
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Send messages from the Insight training environments to Redox Staging</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>//  Send messages from the Insight training environments to Redox Staging

if (msg[&apos;Meta&apos;][&apos;Destinations&apos;][0][&apos;Name&apos;].toString().indexOf(&apos;clntTRN&apos;) != -1) {
    channelMap.put(&apos;rdxFinancialToken&apos;, globalMap.get(&apos;g_rdxFinancialStagingToken&apos;));
} else {
    channelMap.put(&apos;rdxFinancialToken&apos;, globalMap.get(&apos;g_rdxFinancialProdToken&apos;));
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.messagebuilder.MessageBuilderStep version="3.12.0">
                <name>Facility Code</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <messageSegment>msg[&apos;Meta&apos;][&apos;FacilityCode&apos;]</messageSegment>
                <mapping>msg[&apos;Meta&apos;][&apos;Destinations&apos;][0][&apos;ID&apos;]</mapping>
                <defaultValue></defaultValue>
                <replacements/>
              </com.mirth.connect.plugins.messagebuilder.MessageBuilderStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Set Redox Meta</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>rdxMetaOutbound();</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Convert Amount to Integer</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <script>for each(trans in msg[&apos;Transactions&apos;]) {
	trans[&apos;Chargeable&apos;][&apos;Amount&apos;] = parseFloat(trans[&apos;Chargeable&apos;][&apos;Amount&apos;]); //Convert Amount to Integer
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Assign vistiExternalVisitID to vistiVisitNumber</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <script>//Send visit.visitnumber as visit number on outbound notes
//Assign vistiExternalVisitID to vistiVisitNumber

var flagIsVisitNo = false;

if (msg[&apos;Visit&apos;] &amp;&amp; msg[&apos;Visit&apos;].hasOwnProperty(&apos;ExternalVisitID&apos;)) {
    //check if the tenantID is enabled for assigning VisitNumner with ExternalVistiID
    if ($(&apos;tenantId&apos;) == &quot;2883&quot; || $(&apos;tenantId&apos;) == &quot;2890&quot;) {
        msg[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;Visit&apos;][&apos;ExternalVisitID&apos;];
        flagIsVisitNo = true;
    }
    
    //delete ExternalVisitID
    delete msg[&apos;Visit&apos;][&apos;ExternalVisitID&apos;];
}

channelMap.put(&quot;flagIsVisitNo&quot;, flagIsVisitNo);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Assign ExternalProblemID to AccountNumber</name>
                <sequenceNumber>6</sequenceNumber>
                <enabled>true</enabled>
                <script>//Send visit.visitnumber as visit number on outbound notes
//Assign vistiExternalVisitID to vistiVisitNumber

var flagIsProblemNo = false;

if (msg[&apos;Visit&apos;] &amp;&amp; msg[&apos;Visit&apos;].hasOwnProperty(&apos;ExternalProblemID&apos;)) {
    //check if the tenantID is enabled for assigning VisitNumner with ExternalVistiID
    if ($(&apos;tenantId&apos;) == &quot;2944&quot; || $(&apos;tenantId&apos;) == &quot;2919&quot;) {
        msg[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;Visit&apos;][&apos;ExternalProblemID&apos;];
        flagIsProblemNo = true;
    }
    
    //delete ExternalProblemID
    delete msg[&apos;Visit&apos;][&apos;ExternalProblemID&apos;];
}

channelMap.put(&quot;flagIsProblemNo&quot;, flagIsProblemNo);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Remove trailing periods and addding Codeset value on diagnosis codes</name>
                <sequenceNumber>7</sequenceNumber>
                <enabled>true</enabled>
                <script>// Removing . from Code and adding ICD-10 to Codeset
for each (trans in msg[&apos;Transactions&apos;])
	for each (diag in trans[&apos;Diagnoses&apos;]) {
		if (diag[&apos;Code&apos;] !== null) {
			var diagCode = diag[&apos;Code&apos;].toString();
//			If the last character in the diagnosis code a period &apos;.&apos;, remove it
			if (diagCode.slice(-1) === &quot;.&quot;)
				diag[&apos;Code&apos;] = diagCode.slice(0, -1);	
		}
//		Add &quot;ICD-10&quot; to each Codeset in Diagnoses node
		if (diag[&apos;Codeset&apos;] == null || diag[&apos;Codeset&apos;] == &apos;&apos;) {
            diag[&apos;Codeset&apos;] = &apos;ICD-10&apos;;
		}
	}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Choose IDType from Indentification node based on lookup tables </name>
                <sequenceNumber>8</sequenceNumber>
                <enabled>true</enabled>
                <script>//This code is dependent on code template named &quot;StaffID&quot;
//Redox and BettePT outbound channels are dependent on the &quot;TO_Redox_CH &quot; chanel who has a script where it execute sql query and load the data into globalMap.
//IOP-1450, IOP-1595, IOP-1618

var result = getId($(&apos;tenantId&apos;)); // TenantId
msg = selectIdTypePerformersOrderingProviders(msg, result);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Metadata for Performers</name>
                <sequenceNumber>9</sequenceNumber>
                <enabled>true</enabled>
                <script>//Metadata for Performers
/** this step should be always after the &quot;Choose IDType from Indentification node based on lookup tables&quot; transformer step**/

var jsonPerformerID = msg[&apos;Transactions&apos;][0][&apos;Performers&apos;][0][&apos;ID&apos;];
var performers_id = jsonPerformerID ? jsonPerformerID.toString() : null;

var performers_lname = msg[&apos;Transactions&apos;][0][&apos;Performers&apos;][0][&apos;LastName&apos;].toString();
var performers_fname = msg[&apos;Transactions&apos;][0][&apos;Performers&apos;][0][&apos;FirstName&apos;].toString();

channelMap.put(&apos;performers_id&apos;, performers_id);
channelMap.put(&apos;performers_lname&apos;, performers_lname);
channelMap.put(&apos;performers_fname&apos;, performers_fname);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Translate Insurance Codes</name>
                <sequenceNumber>10</sequenceNumber>
                <enabled>true</enabled>
                <script>//looping through each transaction to replace Transactions[0].Chargeable.Code  with the translated values.

if ($(&apos;translateInsuranceCodes&apos;) == true) {

    // looping through transactions
    if (msg[&apos;Visit&apos;] &amp;&amp; msg[&apos;Visit&apos;][&apos;Insurances&apos;] &amp;&amp; msg[&apos;Visit&apos;][&apos;Insurances&apos;].length &gt; 0) {
        for each(Insurance in msg[&apos;Visit&apos;][&apos;Insurances&apos;]) {
            var facility_Code = msg[&apos;Meta&apos;][&apos;FacilityCode&apos;]//$(&apos;tenantId&apos;);
                var leftValue = Insurance.Plan.ID;
            // fetching values from respective globalChannelMap based on tenentID and storing into myObject
            var myObject = FindLookupValueWithInsuranceId(&apos;insurance_&apos; + facility_Code, leftValue);
            // Checking if the values are exist and if the combination of cpt_code and modifiers matches then replacing Chargeable code with translated values
            if (myObject)
                Insurance.Plan.ID = myObject.RightValue ? myObject.RightValue : null;
        }
    }
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.12.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.12.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.12.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.12.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>7</metaDataId>
          <name>TO_Redox_Financial</name>
          <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <host>https://api.redoxengine.com/endpoint</host>
            <useProxyServer>false</useProxyServer>
            <proxyAddress></proxyAddress>
            <proxyPort></proxyPort>
            <method>post</method>
            <headers class="linked-hash-map">
              <entry>
                <string>Content-Type</string>
                <list>
                  <string>application/json</string>
                </list>
              </entry>
              <entry>
                <string>Authorization</string>
                <list>
                  <string>${rdxFinancialToken}</string>
                </list>
              </entry>
            </headers>
            <parameters class="linked-hash-map"/>
            <useHeadersVariable>false</useHeadersVariable>
            <headersVariable></headersVariable>
            <useParametersVariable>false</useParametersVariable>
            <parametersVariable></parametersVariable>
            <responseXmlBody>false</responseXmlBody>
            <responseParseMultipart>true</responseParseMultipart>
            <responseIncludeMetadata>false</responseIncludeMetadata>
            <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
            <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
            <multipart>false</multipart>
            <useAuthentication>false</useAuthentication>
            <authenticationType>Basic</authenticationType>
            <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
            <username></username>
            <password></password>
            <content>${message.encodedData}</content>
            <contentType>text/plain</contentType>
            <dataTypeBinary>false</dataTypeBinary>
            <charset>UTF-8</charset>
            <socketTimeout>30000</socketTimeout>
          </properties>
          <transformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Translate to hospital charge codes</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>//  Only run this for customers who are having the charge codes translated
if ($(&apos;translateChargeCodes&apos;) == true) {
    //looping through each transaction to replace Transactions[0].Chargeable.Code  with the translated values.
    //tmp.Transactions = JSON.parse(msg[&apos;transactionsnode&apos;].toString()).Transactions;

    // looping through transactions
    for each(Transaction in msg[&apos;Transactions&apos;]) {
        //  We only want to change the charge code for Charges
        if (Transaction.Type == &apos;Charge&apos;) {
            var procedure = Transaction.Procedure;
            var modifiers_Code = procedure.Code;
            var facility_Code = $(&apos;tenantId&apos;);
            var modifier = procedure.Modifiers;
            var CPT_CODE_Select = &quot;&quot;;
            for each(Mod in modifier) {
                CPT_CODE_Select = CPT_CODE_Select + Mod;
            }

            var leftValue = modifiers_Code + CPT_CODE_Select;

            // fetching values from respective globalChannelMap based on tenentID and storing into myObject
            var myObject = FindLookupValueWithDefault(&apos;all_charge_items_&apos; + facility_Code, leftValue);

            // Checking if the values are exist and if the combination of cpt_code and modifiers matches then replacing Chargeable code with translated values

            // if the cpt code doean&apos;t exist, default to CLINICIENT for the chargeable code
            if (myObject) {
                Transaction.Chargeable.Code = myObject.RightValue ? myObject.RightValue : &apos;CLINICIENT&apos;;
            } else {
                Transaction.Chargeable.Code = &apos;CLINICIENT&apos;;
            }
        }
    }
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Send messages from the Insight training environments to Redox Staging</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>//  Send messages from the Insight training environments to Redox Staging

if (msg[&apos;Meta&apos;][&apos;Destinations&apos;][0][&apos;Name&apos;].toString().indexOf(&apos;clntTRN&apos;) != -1) {
    channelMap.put(&apos;rdxFinancialToken&apos;, globalMap.get(&apos;g_rdxFinancialStagingToken&apos;));
} else {
    channelMap.put(&apos;rdxFinancialToken&apos;, globalMap.get(&apos;g_rdxFinancialProdToken&apos;));
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.messagebuilder.MessageBuilderStep version="3.12.0">
                <name>Facility Code</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <messageSegment>msg[&apos;Meta&apos;][&apos;FacilityCode&apos;]</messageSegment>
                <mapping>msg[&apos;Meta&apos;][&apos;Destinations&apos;][0][&apos;ID&apos;]</mapping>
                <defaultValue></defaultValue>
                <replacements/>
              </com.mirth.connect.plugins.messagebuilder.MessageBuilderStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Set Redox Meta</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>rdxMetaOutbound();</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Convert Amount to Integer</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <script>for each(trans in msg[&apos;Transactions&apos;]) {
	trans[&apos;Chargeable&apos;][&apos;Amount&apos;] = parseFloat(trans[&apos;Chargeable&apos;][&apos;Amount&apos;]); //Convert Amount to Integer
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Assign vistiExternalVisitID to vistiVisitNumber</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <script>//Send visit.visitnumber as visit number on outbound notes
//Assign vistiExternalVisitID to vistiVisitNumber

var flagIsVisitNo = false;

if (msg[&apos;Visit&apos;] &amp;&amp; msg[&apos;Visit&apos;].hasOwnProperty(&apos;ExternalVisitID&apos;)) {
    //check if the tenantID is enabled for assigning VisitNumner with ExternalVistiID
    if ($(&apos;tenantId&apos;) == &quot;2883&quot; || $(&apos;tenantId&apos;) == &quot;2890&quot;) {
        msg[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;Visit&apos;][&apos;ExternalVisitID&apos;];
        flagIsVisitNo = true;
    }
    
    //delete ExternalVisitID
    delete msg[&apos;Visit&apos;][&apos;ExternalVisitID&apos;];
}

channelMap.put(&quot;flagIsVisitNo&quot;, flagIsVisitNo);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Assign ExternalProblemID to AccountNumber</name>
                <sequenceNumber>6</sequenceNumber>
                <enabled>true</enabled>
                <script>//Send visit.visitnumber as visit number on outbound notes
//Assign vistiExternalVisitID to vistiVisitNumber

var flagIsProblemNo = false;

if (msg[&apos;Visit&apos;] &amp;&amp; msg[&apos;Visit&apos;].hasOwnProperty(&apos;ExternalProblemID&apos;)) {
    //check if the tenantID is enabled for assigning VisitNumner with ExternalVistiID
    if ($(&apos;tenantId&apos;) == &quot;2944&quot; || $(&apos;tenantId&apos;) == &quot;2919&quot;) {
        msg[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;Visit&apos;][&apos;ExternalProblemID&apos;];
        flagIsProblemNo = true;
    }
    
    //delete ExternalProblemID
    delete msg[&apos;Visit&apos;][&apos;ExternalProblemID&apos;];
}

channelMap.put(&quot;flagIsProblemNo&quot;, flagIsProblemNo);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Remove trailing periods and addding Codeset value on diagnosis codes</name>
                <sequenceNumber>7</sequenceNumber>
                <enabled>true</enabled>
                <script>// Removing . from Code and adding ICD-10 to Codeset
for each (trans in msg[&apos;Transactions&apos;])
	for each (diag in trans[&apos;Diagnoses&apos;]) {
		if (diag[&apos;Code&apos;] !== null) {
			var diagCode = diag[&apos;Code&apos;].toString();
//			If the last character in the diagnosis code a period &apos;.&apos;, remove it
			if (diagCode.slice(-1) === &quot;.&quot;)
				diag[&apos;Code&apos;] = diagCode.slice(0, -1);	
		}
//		Add &quot;ICD-10&quot; to each Codeset in Diagnoses node
		if (diag[&apos;Codeset&apos;] == null || diag[&apos;Codeset&apos;] == &apos;&apos;) {
            diag[&apos;Codeset&apos;] = &apos;ICD-10&apos;;
		}
	}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Choose IDType from Indentification node based on lookup tables </name>
                <sequenceNumber>8</sequenceNumber>
                <enabled>true</enabled>
                <script>//This code is dependent on code template named &quot;StaffID&quot;
//Redox and BettePT outbound channels are dependent on the &quot;TO_Redox_CH &quot; chanel who has a script where it execute sql query and load the data into globalMap.
//IOP-1450, IOP-1595, IOP-1618

var result = getId($(&apos;tenantId&apos;)); // TenantId
msg = selectIdTypePerformersOrderingProviders(msg, result);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Metadata for Performers</name>
                <sequenceNumber>9</sequenceNumber>
                <enabled>true</enabled>
                <script>//Metadata for Performers
/** this step should be always after the &quot;Choose IDType from Indentification node based on lookup tables&quot; transformer step**/

var jsonPerformerID = msg[&apos;Transactions&apos;][0][&apos;Performers&apos;][0][&apos;ID&apos;];
var performers_id = jsonPerformerID ? jsonPerformerID.toString() : null;

var performers_lname = msg[&apos;Transactions&apos;][0][&apos;Performers&apos;][0][&apos;LastName&apos;].toString();
var performers_fname = msg[&apos;Transactions&apos;][0][&apos;Performers&apos;][0][&apos;FirstName&apos;].toString();

channelMap.put(&apos;performers_id&apos;, performers_id);
channelMap.put(&apos;performers_lname&apos;, performers_lname);
channelMap.put(&apos;performers_fname&apos;, performers_fname);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Translate Insurance Codes</name>
                <sequenceNumber>10</sequenceNumber>
                <enabled>true</enabled>
                <script>//looping through each transaction to replace Transactions[0].Chargeable.Code  with the translated values.

if ($(&apos;translateInsuranceCodes&apos;) == true) {

    // looping through transactions
    if (msg[&apos;Visit&apos;] &amp;&amp; msg[&apos;Visit&apos;][&apos;Insurances&apos;] &amp;&amp; msg[&apos;Visit&apos;][&apos;Insurances&apos;].length &gt; 0) {
        for each(Insurance in msg[&apos;Visit&apos;][&apos;Insurances&apos;]) {
            var facility_Code = msg[&apos;Meta&apos;][&apos;FacilityCode&apos;]//$(&apos;tenantId&apos;);
                var leftValue = Insurance.Plan.ID;
            // fetching values from respective globalChannelMap based on tenentID and storing into myObject
            var myObject = FindLookupValueWithInsuranceId(&apos;insurance_&apos; + facility_Code, leftValue);
            // Checking if the values are exist and if the combination of cpt_code and modifiers matches then replacing Chargeable code with translated values
            if (myObject)
                Insurance.Plan.ID = myObject.RightValue ? myObject.RightValue : null;
        }
    }
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.12.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.12.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.12.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.12.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>HTTP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>6</metaDataId>
          <name>noDest</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundTemplate encoding="base64">ewogICAiTWV0YSI6IHsKICAgICAgIkRhdGFNb2RlbCI6ICJOb3RlcyIsCiAgICAgICJFdmVudFR5cGUiOiAiUmVwbGFjZSIsCiAgICAgICJFdmVudERhdGVUaW1lIjogIjIwMTktMDEtMDlUMTY6MDA6MjkuNjM5WiIsCiAgICAgICJUZXN0IjogdHJ1ZSwKICAgICAgIlNvdXJjZSI6IHsKICAgICAgICAgIklEIjogIjdjZTZmMzg3LWMzM2MtNDE3ZC04NjgyLTgxZTgzNjI4Y2JkOSIsCiAgICAgICAgICJOYW1lIjogIlJlZG94IERldiBUb29scyIKICAgICAgfSwKICAgICAgIkRlc3RpbmF0aW9ucyI6IFsKICAgICAgICAgewogICAgICAgICAgICAiSUQiOiAiYWYzOTRmMTQtYjM0YS00NjRmLThkMjQtODk1ZjM3MGFmNGM5IiwKICAgICAgICAgICAgIk5hbWUiOiAiUmVkb3ggRU1SIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJNZXNzYWdlIjogewogICAgICAgICAiSUQiOiA1NTY1CiAgICAgIH0sCiAgICAgICJUcmFuc21pc3Npb24iOiB7CiAgICAgICAgICJJRCI6IDEyNDE0CiAgICAgIH0sCiAgICAgICJGYWNpbGl0eUNvZGUiOiBudWxsCiAgIH0sCiAgICJQYXRpZW50IjogewogICAgICAiSWRlbnRpZmllcnMiOiBbCiAgICAgICAgIHsKICAgICAgICAgICAgIklEIjogIjAwMDAwMDAwMDEiLAogICAgICAgICAgICAiSURUeXBlIjogIk1SIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJJRCI6ICJlMTY3MjY3Yy0xNmM5LTRmZTMtOTZhZS05Y2ZmNTcwM2U5MGEiLAogICAgICAgICAgICAiSURUeXBlIjogIkVIUklEIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJJRCI6ICJhMWQ0ZWU4YWJhNDk0Y2EiLAogICAgICAgICAgICAiSURUeXBlIjogIk5JU1QiCiAgICAgICAgIH0KICAgICAgXSwKICAgICAgIkRlbW9ncmFwaGljcyI6IHsKICAgICAgICAgIkZpcnN0TmFtZSI6ICJUaW1vdGh5IiwKICAgICAgICAgIk1pZGRsZU5hbWUiOiAiUGF1bCIsCiAgICAgICAgICJMYXN0TmFtZSI6ICJCaXhieSIsCiAgICAgICAgICJET0IiOiAiMjAwOC0wMS0wNiIsCiAgICAgICAgICJTU04iOiAiMTAxLTAxLTAwMDEiLAogICAgICAgICAiU2V4IjogIk1hbGUiLAogICAgICAgICAiUmFjZSI6ICJXaGl0ZSIsCiAgICAgICAgICJJc0hpc3BhbmljIjogbnVsbCwKICAgICAgICAgIk1hcml0YWxTdGF0dXMiOiAiTWFycmllZCIsCiAgICAgICAgICJJc0RlY2Vhc2VkIjogbnVsbCwKICAgICAgICAgIkRlYXRoRGF0ZVRpbWUiOiBudWxsLAogICAgICAgICAiUGhvbmVOdW1iZXIiOiB7CiAgICAgICAgICAgICJIb21lIjogIisxODA4ODY3NTMwMSIsCiAgICAgICAgICAgICJPZmZpY2UiOiBudWxsLAogICAgICAgICAgICAiTW9iaWxlIjogbnVsbAogICAgICAgICB9LAogICAgICAgICAiRW1haWxBZGRyZXNzZXMiOiBbXSwKICAgICAgICAgIkxhbmd1YWdlIjogImVuIiwKICAgICAgICAgIkNpdGl6ZW5zaGlwIjogW10sCiAgICAgICAgICJBZGRyZXNzIjogewogICAgICAgICAgICAiU3RyZWV0QWRkcmVzcyI6ICI0NzYyIEhpY2tvcnkgU3RyZWV0IiwKICAgICAgICAgICAgIkNpdHkiOiAiTW9ucm9lIiwKICAgICAgICAgICAgIlN0YXRlIjogIldJIiwKICAgICAgICAgICAgIlpJUCI6ICI1MzU2NiIsCiAgICAgICAgICAgICJDb3VudHkiOiAiR3JlZW4iLAogICAgICAgICAgICAiQ291bnRyeSI6ICJVUyIKICAgICAgICAgfQogICAgICB9LAogICAgICAiTm90ZXMiOiBbXQogICB9LAogICAiVmlzaXQiOiB7CiAgICAgICJWaXNpdE51bWJlciI6ICIxMjM0IiwKICAgICAgIkFjY291bnROdW1iZXIiOiBudWxsLAogICAgICAiVmlzaXREYXRlVGltZSI6ICIyMDE1LTA1LTA2VDA2OjAwOjU4Ljg3MloiCiAgIH0sCiAgICJOb3RlIjogewogICAgICAiQ29udGVudFR5cGUiOiAiQmFzZTY0IEVuY29kZWQiLAogICAgICAiRmlsZU5hbWUiOiAiU2FtcGxlUERGLU9yZGVyIFNwZWNpZmljIE5vdGUiLAogICAgICAiRmlsZUNvbnRlbnRzIjogIjwuLi5iYXNlIDY0IGZpbGUgY29udGVudHMuLi4+IiwKICAgICAgIkNvbXBvbmVudHMiOiBbXSwKICAgICAgIkRvY3VtZW50VHlwZSI6ICJFbXB0eSBGaWxlIiwKICAgICAgIk9yaWdpbmFsRG9jdW1lbnRJRCI6ICI5Mzc3MGQ4My1mMWYyLTRhNGMtYTI4ZS0wNjU2MjZhNzZiYTgiLAogICAgICAiRG9jdW1lbnRJRCI6ICJiMTY5MjY3Yy0xMGM5LTRmZTMtOTFhZS05Y2tmNTcwM2U5MGwiLAogICAgICAiU2VydmljZURhdGVUaW1lIjogIjIwMTUtMDUtMDZUMDY6MDA6NTguODcyWiIsCiAgICAgICJEb2N1bWVudGF0aW9uRGF0ZVRpbWUiOiAiMjAxNS0wNS0wNlQwNjowMDo1OC44NzJaIiwKICAgICAgIlByb3ZpZGVyIjogewogICAgICAgICAiSUQiOiAiNDM1Njc4OTg3NiIsCiAgICAgICAgICJJRFR5cGUiOiAiTlBJIiwKICAgICAgICAgIkZpcnN0TmFtZSI6ICJQYXQiLAogICAgICAgICAiTGFzdE5hbWUiOiAiR3Jhbml0ZSIsCiAgICAgICAgICJDcmVkZW50aWFscyI6IFsKICAgICAgICAgICAgIk1EIgogICAgICAgICBdLAogICAgICAgICAiQWRkcmVzcyI6IHsKICAgICAgICAgICAgIlN0cmVldEFkZHJlc3MiOiAiMTIzIE1haW4gU3QuIiwKICAgICAgICAgICAgIkNpdHkiOiAiTWFkaXNvbiIsCiAgICAgICAgICAgICJTdGF0ZSI6ICJXSSIsCiAgICAgICAgICAgICJaSVAiOiAiNTM3MDMiLAogICAgICAgICAgICAiQ291bnR5IjogIkRhbmUiLAogICAgICAgICAgICAiQ291bnRyeSI6ICJVU0EiCiAgICAgICAgIH0sCiAgICAgICAgICJQaG9uZU51bWJlciI6IHsKICAgICAgICAgICAgIk9mZmljZSI6ICIrMTYwODU1NTEyMzQiCiAgICAgICAgIH0sCiAgICAgICAgICJMb2NhdGlvbiI6IHsKICAgICAgICAgICAgIlR5cGUiOiBudWxsLAogICAgICAgICAgICAiRmFjaWxpdHkiOiBudWxsLAogICAgICAgICAgICAiRGVwYXJ0bWVudCI6IG51bGwsCiAgICAgICAgICAgICJSb29tIjogbnVsbAogICAgICAgICB9CiAgICAgIH0sCiAgICAgICJTdGF0dXMiOiBudWxsLAogICAgICAiQXV0aGVudGljYXRvciI6IHsKICAgICAgICAgIklEIjogbnVsbCwKICAgICAgICAgIklEVHlwZSI6IG51bGwsCiAgICAgICAgICJGaXJzdE5hbWUiOiBudWxsLAogICAgICAgICAiTGFzdE5hbWUiOiBudWxsLAogICAgICAgICAiQ3JlZGVudGlhbHMiOiBbXSwKICAgICAgICAgIkFkZHJlc3MiOiB7CiAgICAgICAgICAgICJTdHJlZXRBZGRyZXNzIjogbnVsbCwKICAgICAgICAgICAgIkNpdHkiOiBudWxsLAogICAgICAgICAgICAiU3RhdGUiOiBudWxsLAogICAgICAgICAgICAiWklQIjogbnVsbCwKICAgICAgICAgICAgIkNvdW50eSI6IG51bGwsCiAgICAgICAgICAgICJDb3VudHJ5IjogbnVsbAogICAgICAgICB9LAogICAgICAgICAiUGhvbmVOdW1iZXIiOiB7CiAgICAgICAgICAgICJPZmZpY2UiOiBudWxsCiAgICAgICAgIH0sCiAgICAgICAgICJMb2NhdGlvbiI6IHsKICAgICAgICAgICAgIlR5cGUiOiBudWxsLAogICAgICAgICAgICAiRmFjaWxpdHkiOiBudWxsLAogICAgICAgICAgICAiRGVwYXJ0bWVudCI6IG51bGwsCiAgICAgICAgICAgICJSb29tIjogbnVsbAogICAgICAgICB9CiAgICAgIH0sCiAgICAgICJBdmFpbGFiaWxpdHkiOiAiVW5hdmFpbGFibGUiLAogICAgICAiTm90aWZpY2F0aW9ucyI6IFsKICAgICAgICAgewogICAgICAgICAgICAiSUQiOiAiMjQzNDUzNDU2NyIsCiAgICAgICAgICAgICJJRFR5cGUiOiAiTlBJIiwKICAgICAgICAgICAgIkZpcnN0TmFtZSI6ICJTaGFyb24iLAogICAgICAgICAgICAiTGFzdE5hbWUiOiAiQ2hhbGsiLAogICAgICAgICAgICAiQ3JlZGVudGlhbHMiOiBbCiAgICAgICAgICAgICAgICJNRCIsCiAgICAgICAgICAgICAgICJQaEQiCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJBZGRyZXNzIjogewogICAgICAgICAgICAgICAiU3RyZWV0QWRkcmVzcyI6ICIzMTIgTWFwbGUgRHIuIFN1aXRlIDQwMCIsCiAgICAgICAgICAgICAgICJDaXR5IjogIlZlcm9uYSIsCiAgICAgICAgICAgICAgICJTdGF0ZSI6ICJXSSIsCiAgICAgICAgICAgICAgICJaSVAiOiAiNTM1OTMiLAogICAgICAgICAgICAgICAiQ291bnR5IjogIkRhbmUiLAogICAgICAgICAgICAgICAiQ291bnRyeSI6ICJVU0EiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJQaG9uZU51bWJlciI6IHsKICAgICAgICAgICAgICAgIk9mZmljZSI6ICIrMTYwODU1NTk5OTkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJMb2NhdGlvbiI6IHsKICAgICAgICAgICAgICAgIlR5cGUiOiBudWxsLAogICAgICAgICAgICAgICAiRmFjaWxpdHkiOiBudWxsLAogICAgICAgICAgICAgICAiRGVwYXJ0bWVudCI6IG51bGwsCiAgICAgICAgICAgICAgICJSb29tIjogbnVsbAogICAgICAgICAgICB9CiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgIklEIjogIjgyNjM3NDkzODUiLAogICAgICAgICAgICAiSURUeXBlIjogIk5QSSIsCiAgICAgICAgICAgICJGaXJzdE5hbWUiOiAiSmltIiwKICAgICAgICAgICAgIkxhc3ROYW1lIjogIk1pY2EiLAogICAgICAgICAgICAiQ3JlZGVudGlhbHMiOiBbCiAgICAgICAgICAgICAgICJSTiIKICAgICAgICAgICAgXSwKICAgICAgICAgICAgIkFkZHJlc3MiOiB7CiAgICAgICAgICAgICAgICJTdHJlZXRBZGRyZXNzIjogIjUyMzUgS2VubmVkeSBBdmUuIiwKICAgICAgICAgICAgICAgIkNpdHkiOiAiQ3JldmUgQ291ciIsCiAgICAgICAgICAgICAgICJTdGF0ZSI6ICJNTyIsCiAgICAgICAgICAgICAgICJaSVAiOiAiNjMxNDEiLAogICAgICAgICAgICAgICAiQ291bnR5IjogIlNhaW50IExvdWlzIiwKICAgICAgICAgICAgICAgIkNvdW50cnkiOiAiVVNBIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiUGhvbmVOdW1iZXIiOiB7CiAgICAgICAgICAgICAgICJPZmZpY2UiOiAiKzEzMTQ1NTU3Nzc3IgogICAgICAgICAgICB9LAogICAgICAgICAgICAiTG9jYXRpb24iOiB7CiAgICAgICAgICAgICAgICJUeXBlIjogbnVsbCwKICAgICAgICAgICAgICAgIkZhY2lsaXR5IjogbnVsbCwKICAgICAgICAgICAgICAgIkRlcGFydG1lbnQiOiBudWxsLAogICAgICAgICAgICAgICAiUm9vbSI6IG51bGwKICAgICAgICAgICAgfQogICAgICAgICB9CiAgICAgIF0KICAgfSwKICAgIk9yZGVycyI6IFsKICAgICAgewogICAgICAgICAiSUQiOiAxMjM0NTYsCiAgICAgICAgICJOYW1lIjogIlN0cmVzcyBUZXN0IgogICAgICB9CiAgIF0KfQ==</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.12.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.12.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.12.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.12.0">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data

/*
	Desc: This code works by calculating a checksum for each message to uniquely identify it (we ignore the
	MSH and ORC segments). We save off the most recent 100 unique checksum values in a global 
	array so if the current message has been recently received we are able to ignore it.
*/
// function filter_msg_evaluate_received_checksum(msg) {	
/*
	var scriptName= &apos;filter_msg_evaluate_received_checksum&apos;
	var filter = false;
	var received_len_limit = 999;
	var debug= 0;
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	var dataBytes = new java.lang.String(connectorMessage.getRawData()).getBytes(&apos;UTF-8&apos;);

	// var messageObjectgetBytes= checksum.update(connectorMessage.getRawData().replaceAll(&apos;^MSH[^\r]*\r&apos;,&apos;&apos;).replaceAll(&apos;\rORC[^\r]*\r&apos;,&apos;\r&apos;).getBytes());
	var messageObjectgetBytes= checksum.update(connectorMessage.getRawData().getBytes());
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos;getRawData typeof: &apos;+typeof(connectorMessage.getRawData())+&apos; connectorMessage.getRawData(): &apos;+connectorMessage.getRawData());
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; getRawData.getBytes typeof: &apos;+typeof(connectorMessage.getRawData().getBytes())+&apos; connectorMessage.getRawData().getBytes(): &apos;+connectorMessage.getRawData().getBytes());
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; checksum.getValue() typeof: &apos;+typeof(checksum.getValue())+&apos; checksum.getValue(): &apos;+checksum.getValue());
	} // end if 
	
	$c(&apos;checksum&apos;, checksum.getValue());
	
	//grab the global channel map variable holding the last X unique checksums that we&apos;ve received
	var received = $gc(&apos;received_checksums&apos;);
	
	if (received == undefined) {
		var received = new Array();
		received.push(checksum.getValue());
	} else {
		//check if we&apos;ve recently received this message, skip it if so
		if (received.indexOf(checksum.getValue()) &gt; -1) {
			filter = true;
		//we haven&apos;t seen it recently, so remember it and allow it through
		} else {
			var received_len = received.length;
			if (received_len &gt; received_len_limit) {
				//remove oldest/first entry, shift all entries forward, and add new entry to end
				received.shift();
				received[received_len_limit] = checksum.getValue();
			} else {
				//add new entry to end of array
				received[received_len] = checksum.getValue();
			} // end if 
		} // end if 
	} // end if 

	// debug code
	// for (x=0; x&lt;=received_len_limit; x++) {
	//	$c(&apos;received-&apos;+x, received[x]);
	// }

	$c(&apos;filterMessage&apos;,filter);
	$gc(&apos;filterMessage&apos;,filter);

	$c(&apos;received_checksums&apos;,received);
	$gc(&apos;received_checksums&apos;,received);
*/
	return message;
	


</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalChannelMap here to persist data
return;
















</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.12.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>PRODUCTION</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STOPPED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>tenantId</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>meta_event_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>PATIENT_ID</name>
            <type>STRING</type>
            <mappingName>patient_id</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>PATIENT_LNAME</name>
            <type>STRING</type>
            <mappingName>patient_lname</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>PATIENT_FNAME</name>
            <type>STRING</type>
            <mappingName>patient_fname</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>VISIT_ID</name>
            <type>STRING</type>
            <mappingName>visit_id</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>VISIT_DT</name>
            <type>STRING</type>
            <mappingName>visit_dt</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>PERFORMERS_ID</name>
            <type>STRING</type>
            <mappingName>performers_id</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>PERFORMERS_LNAME</name>
            <type>STRING</type>
            <mappingName>performers_lname</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>PERFORMERS_FNAME</name>
            <type>STRING</type>
            <mappingName>performers_fname</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.12.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1678914776014</time>
            <timezone>America/Chicago</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>30</pruneMetaDataDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.12.0">
            <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
            <name>WebPT-Common</name>
            <revision>2</revision>
            <lastModified>
              <time>1678715257049</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
                <name>Check if String contains</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122790</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
                <name>Check if String contains HTTP code</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122593</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8515e088-5c50-47ee-9e2f-9fad1ecf48bd</id>
                <name>Check if String is JSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123309</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Added by Kirby Knight
	12/21/2020
	Test for JSON

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5f2f84ba-3e66-4be3-8260-8fbd8258bd92</id>
                <name>Check if the PDF is valid</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122055</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
//This function is used for checking the word &quot;PDF&quot; in inbound attachment.
function isValidBase64PDF(base64) {
	const ENCODED_PDF_SIGN = &quot;JVBERi&quot;; // %PDF sign
	const PDF_EOF = &quot;JSVFT0YNCg&quot;; // %EOF
	var pdfBase64Size = (base64.length() * (3 / 4)) - 1;
	
	return (base64.indexOf(ENCODED_PDF_SIGN) != -1 &amp;&amp; base64.indexOf(PDF_EOF) != -1 &amp;&amp; pdf_base64_size &gt; 36);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
                <name>Convert JSON date to HL7v2 date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122137</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
                <name>Convert JSON datetime to HL7v2 datetime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122430</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>bb21449a-df39-48c6-be52-24106c8df4c4</id>
                <name>Destination Formatting</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Kirby Knight 03/10/2021
	
	This function will remove all other ROOT.Meta.Destinations nodes that are not passed in the
	destination variable and removes the ROOT.Meta.Destinations[x].Destination node

	@param {Any} destination - 
	@return {String} return description
*/
function formatDestinations(destination) {
var arrDestinations = msg[&apos;Meta&apos;][&apos;Destinations&apos;];
	//  Start at the end of the array because of the posibility of deleted array items 
	for (var i = arrDestinations.length - 1; i &gt;= 0; i--) {
		if (arrDestinations[i][&apos;Destination&apos;] == destination){
			delete arrDestinations[i][&apos;Destination&apos;]
		}else if (arrDestinations[i][&apos;Destination&apos;] != destination){
			arrDestinations.splice(i, 1);
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
                <name>Extract JSON node data</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121748</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7ed44f8a-fa40-4f3e-9426-3021604eabe0</id>
                <name>Get Feature Value by Name and Database</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123262</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns a string containing the feature value (system property) for a specific client database.

	@param {String} featureName - name of the feature, ie: &quot;BetterPTBidirectionalScheduling&quot;
	@param {String} databaseIdentifier - database name or databaseID / TenantID
	@param {String} databaseIdentifierType - what value is provided in databaseIdentifier. current options include &quot;ID&quot; or &quot;NAME&quot;
	@return {String} returns feature value
*/
function getFeatureValueByNameDatabase(featureName, databaseIdentifier, databaseIdentifierType) {
	var paramList = new Packages.java.util.ArrayList();
	paramList.add(featureName);
	paramList.add(databaseIdentifier);
	paramList.add(databaseIdentifierType);
	
	var sSQL = &apos;EXEC [dbo].[pr_FeatureValueByNameDatabase] ?, ?, ?&apos;;
	
	try {
		var result = executeSharedDBStatementFhirCh(sSQL, true, paramList);
		var featureValue ;
		if(result.next()){			//Added
		 featureValue = result.getString(1);
		}
		return featureValue;
	} catch (e) {
		logger.error(e);
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>9842be2c-c633-42ac-87f1-f91aca9e370f</id>
                <name>JSON Patient IDs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121776</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function populates the MR and PI patient IDS to channelMap

	@return {String} return description
*/
function jsonPatientIds() {
	for each (patId in msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) {
	if (patId[&apos;IDType&apos;].toString() == &apos;MR&apos;){
		channelMap.put(&apos;extPatId&apos;, patId[&apos;ID&apos;].toString());
	}else if(patId[&apos;IDType&apos;].toString() == &apos;PI&apos;){
		channelMap.put(&apos;patId&apos;, patId[&apos;ID&apos;].toString());
	}
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
                <name>Verify JSON node for existance</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>394664c0-d536-4310-970e-181dc03ee7da</id>
            <name>WebPT-Conversions</name>
            <revision>2</revision>
            <lastModified>
              <time>1690140133427</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
                <name>Convert FHIR codes to HL7v2 codes</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122899</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>2fc8cbf3-0d92-4d1d-a3d6-136c09bd9f2a</id>
            <name>WebPT-Custom Database Functions</name>
            <revision>4</revision>
            <lastModified>
              <time>1690570753962</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>23c0b510-63e4-40fa-a4e1-7b2b92ce9a96</id>
                <name>Execute Statement Shared DB Conn clientDb Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122401</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Executes a SQL statement using a shared database connection stored in the Global Map. If the
connection does not exist, creates it.

@param {String} statement - The SQL statement to execute
@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
@param {List} paramList - A Java List object containing the parameters for the statement (optional)
 */
function executeSharedDBStatementclientDbCh(statement, isQuery, paramList) {
    var result;

    try {
        var dbConnclientDbCh = globalChannelMap.get(&quot;dbConnclientDbCh&quot;);

        if (dbConnclientDbCh == null || dbConnclientDbCh.getConnection().isClosed()) {
            dbConnclientDbCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;), $(&apos;dbClient&apos;), $(&apos;dbUserFhir&apos;), $(&apos;dbPwFhir&apos;));
            globalChannelMap.put(&quot;dbConnclientDbCh&quot;, dbConnclientDbCh);
        }

        if (paramList == undefined) {
            paramList = new Packages.java.util.ArrayList();
        }

        if (isQuery) {
            result = dbConnclientDbCh.executeCachedQuery(statement, paramList);
        } else {
            result = dbConnclientDbCh.executeUpdate(statement, paramList);
        }
    } catch (e) {
        logger.error(e);
    }
    finally {
        return result;
    }
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4efb3110-a83f-48b5-93ad-79c847b51865</id>
                <name>Execute Statement Shared DB Conn clntAcl Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123455</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClntAclCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnClntAclCh = globalChannelMap.get(&quot;dbConnClntAclCh&quot;);

		if (dbConnClntAclCh == null || dbConnClntAclCh.getConnection().isClosed())
		{
			dbConnClntAclCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbClntAcl&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnClntAclCh&quot;, dbConnClntAclCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnClntAclCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnClntAclCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>d96d45dd-57f7-4aa9-9bf4-e464d31b94c6</id>
                <name>Execute Statement Shared DB Conn FHIR</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121922</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhir(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhir.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhir.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6014068e-c021-4a38-9fa6-6f38f6a2cdab</id>
                <name>Execute Statement Shared DB Conn FHIR Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123492</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhirCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhirCh = globalChannelMap.get(&quot;dbConnFhirCh&quot;);

		if (dbConnFhirCh == null || dbConnFhirCh.getConnection().isClosed())
		{
			dbConnFhirCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnFhirCh&quot;, dbConnFhirCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhirCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhirCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fbd5c4a1-b816-4496-acdf-067005f1d376</id>
                <name>Execute Statement Shared DB Conn Translations Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123008</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementTranslationsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnTranslationsCh = globalChannelMap.get(&quot;dbConnTranslationsCh&quot;);

		if (dbConnTranslationsCh == null || dbConnTranslationsCh.getConnection().isClosed())
		{
			dbConnTranslationsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlTranslations&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnTranslationsCh&quot;, dbConnTranslationsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnTranslationsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnTranslationsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5d1a5577-4ba4-4d1e-b6cd-e2d924164909</id>
                <name>Execute Statement with Shared DB Conn ODS Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122280</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdsCh = globalChannelMap.get(&quot;dbConnOdsCh&quot;);

		if (dbConnOdsCh == null || dbConnOdsCh.getConnection().isClosed())
		{
			dbConnOdsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOds&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdsCh&quot;, dbConnOdsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>3991db14-0c0b-4123-952c-5164c1ded501</id>
                <name>Execute Statement with Shared DB Conn ODW Ch</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122960</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.  THis connects to the ODW db in Azure

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdwCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdwCh = globalChannelMap.get(&quot;dbConnOdwCh&quot;);

		if (dbConnOdwCh == null || dbConnOdwCh.getConnection().isClosed())
		{
			dbConnOdwCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOdw&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdwCh&quot;, dbConnOdwCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdwCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdwCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fae08c88-7550-479a-b8ed-ffef47e8eed9</id>
                <name>executeSharedDBStatementClient</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121956</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClient(statement, isQuery, paramList, dbname)
{
	var result;
 	var dburl= &apos;jdbc:sqlserver://AZW1DEV-SQL02.clinicient.com:1433;databaseName=&apos;+dbname+&apos;&apos;;
	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),dburl,$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			
			//globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		result = dbConnFhir.executeCachedQuery(statement);
	
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>ed20a457-5beb-4aea-9bb9-cf91112ccc56</id>
            <name>WebPT-Default Functions</name>
            <revision>10</revision>
            <lastModified>
              <time>1690140133487</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>a8a9a0c8-9322-46dc-bef8-011eb3d70291</id>
                <name>Create Header for CSV</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121678</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This creates a header for csv files based on the contents of the header variable.  The header
	variable is populated in the channel from the outbound msg template

	@return {String} return description
*/
function createHeader() {
	//Destination transformer.  this creates the header for each new file

	var path = java.nio.file.Paths.get($(&apos;filePath&apos;)+$(&apos;fileName&apos;));
	var bytes = (new java.lang.String($(&apos;header&apos;))).getBytes(&quot;UTF-8&quot;);
	try {
	  java.nio.file.Files.write(path, bytes, java.nio.file.StandardOpenOption.CREATE_NEW);
	}
	catch (e) {
	  //logger.info(&quot; should throw IOException if file already exists&quot;);
	
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5a886a1f-dab1-41b5-94c6-1a639907d7da</id>
                <name>Filter Message Evaluate Received Checksum</name>
                <revision>33</revision>
                <lastModified>
                  <time>1678916806664</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating a checksum for each provided message.  We save off the most recent 100 unique checksum values in a global 
	array so if the current message has been recently received we are able to ignore it.
	
	@author:  	Jeffrey Ritz
	@scriptName: 	filterEvaluateReceivedChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {boolean} filter - return filter boolean (true= filter msg, false= do not filter msg)
		persist received_checksum global ChannelMap array
		persist filterMessage ChannelMap variable
	@history
*/
function filterEvaluateReceivedChecksum(msg) {	

	var scriptName= &apos;filterEvaluateReceivedChecksum&apos;
	var filter = false;
	var received_len_limit = 999;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B connectorMessage.getRawData() typeof: &apos;+typeof(connectorMessage.getRawData())+&apos; msg: &apos;+connectorMessage.getRawData());
	} // end if 
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	// var dataBytes = new java.lang.String(connectorMessage.getRawData()).getBytes(&apos;UTF-8&apos;);
	// message = new String(message.getBytes(&quot;utf-8&quot;), &quot;utf-8&quot;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	// var dataBytes = new java.lang.String(msg.getBytes(&apos;UTF-8&apos;));
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);

	// var messageObjectgetBytes= checksum.update(connectorMessage.getRawData().getBytes());
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 
	
	$c(&apos;checksum&apos;, checksum.getValue());
	
	//grab the global channel map variable holding the last X unique checksums that we&apos;ve received
	var received = $gc(&apos;received_checksums&apos;);
	
	if (received == undefined) {
		var received = new Array();
		received.push(checksum.getValue());
	} else {
		//check if we&apos;ve recently received this message, skip it if so
		if (received.indexOf(checksum.getValue()) &gt; -1) {
			filter = true;
		//we haven&apos;t seen it recently, so remember it and allow it through
		} else {
			var received_len = received.length;
			if (received_len &gt; received_len_limit) {
				//remove oldest/first entry, shift all entries forward, and add new entry to end
				received.shift();
				received[received_len_limit] = checksum.getValue();
			} else {
				//add new entry to end of array
				received[received_len] = checksum.getValue();
			} // end if 
		} // end if 
	} // end if 

	 //debug code
	/*for (x=0; x&lt;=received_len_limit; x++) {
		$c(&apos;received-&apos;+x, received[x]);
	} */

	$c(&apos;filterMessage&apos;,filter);
	$gc(&apos;received_checksums&apos;,received);

	return filter;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fbd0484d-74a2-48e4-aedd-f97c2fcefa16</id>
                <name>Get Message Checksum</name>
                <revision>12</revision>
                <lastModified>
                  <time>1678916806703</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This code works by calculating and reutrning a checksum for each provided message
	
	@author:  	Jeffrey Ritz
	@scriptName: 	getMessageChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {object} result - return checksum value
	@history
	2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() to remove the exponential representation of the number value
*/
function getMessageChecksum(msg) {	

	var scriptName= &apos;getMessageChecksum&apos;;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	} // end if 
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 

	var checksumValue= checksum.getValue();
	// 2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() 
	var arrChecksumValue= new Array(); 
	arrChecksumValue.push(checksumValue);
	$c(&apos;checksum&apos;, arrChecksumValue);

	return checksumValue;

} // end function</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>91db9bd1-ca92-4dcc-bba4-e1ece603fc87</id>
                <name>Remove Child Object From Parent Object Json</name>
                <revision>22</revision>
                <lastModified>
                  <time>1678916845037</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON child object and it&apos;s descendents from a parent object JSON
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeChildObjectFromParentObjectJson.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
		{string} parentObject - place the name of the string to be designated as the parent object in the JSON
		{string} childObject  - place the name of the string to be designated as the child object to be deleted from the JSON
	@param {object} msg - return modified Json object msg excluding specified Json child object
	@history
*/
function removeChildObjectFromParentObjectJson(msg, parentObject, childObject) {
	
	var scriptName= &apos;removeChildObjectFromParentObjectJson&apos;;
	var debug= 0;

	//var strObjJson= JSON.parse(msg);
	var strObjJson= JSON.stringify(msg);
	
	//var objJson= JSON.parse(msg);
	var newParentObjects= new Object();
	var parentObjects= msg;
	var arrParentObjects= new Array();
	var arrTransactionObjects= new Array();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof parentObjects: &apos;+typeof(parentObjects));
	for (var key in parentObjects) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof key: &apos;+typeof(key)+&apos; key: &apos;+key);
		if(key== parentObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof objJson[key]: &apos;+typeof(parentObjects[key])+&apos; parentObjects[key]: &apos;+JSON.stringify(parentObjects[key]));
			
			var newChildObjects= new Object();
			var childObjects= parentObjects[key];
			var arrChildObjects= new Array();
			
			for(var key2 in childObjects) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key2: &apos;+typeof(key2)+&apos; key2: &apos;+key2+&apos; childObject: &apos;+childObject);
				for(var key3 in childObjects[key2]) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key3: &apos;+typeof(key3)+&apos; key3: &apos;+key3+&apos; childObject: &apos;+childObject);
					if(key3== childObject) {
						var transactionObject= new Object();
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; childObject typeof: &apos;+typeof(childObjects[key2][key3])+&apos; childObject: &apos;+JSON.stringify(childObjects[key2][key3]));
						transactionObject.key= key3;
						transactionObject.value= childObjects[key2][key3];
						delete childObjects[key2][key3];
						if(debug&gt;0) logger.info(&apos;DEBUG::&apos;+scriptName+&apos; DELETE childObject: &apos;+key3+&apos; of parentObject: &apos;+JSON.stringify(childObjects[key2]));
						arrTransactionObjects.push(transactionObject);
					} // end if
				} // end for 
				arrChildObjects.push(childObjects[key2]);
			} // end for
			newParentObjects[key]= arrChildObjects;
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add all child keys: &apos;+JSON.stringify(arrChildObjects)+&apos; into ParentObject[&apos;+key+&apos;]: &apos;+newParentObjects[key]);
		} else {
			newParentObjects[key]= parentObjects[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+parentObjects[key]+&apos; string: &apos;+JSON.stringify(parentObjects[key]));
		} // end if
		arrParentObjects.push(newParentObjects);
	} // end for 
	var newMsg= arrParentObjects;
	channelMap.put(&apos;removeChildObjectMsg&apos;,newMsg);
	channelMap.put(&apos;removedChildTransIds&apos;,arrTransactionObjects);
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));
	return newMsg;
	
} </code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2ff28338-dfb6-445d-a04e-c74b5486a08c</id>
                <name>Remove Object From Json</name>
                <revision>24</revision>
                <lastModified>
                  <time>1678915278542</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**  This function will remove a JSON object and it&apos;s descendents from the msg
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeObjectFromJson.js
	@created: 	2023-03-09
	@param {string} msg - Inbound connectorMessage.getRawData()
	@param {string} msg - return modified msg excluding specified Json object from msg
	@history
	2023-03-15 JER - Modified to include removeObject function parameter to specify specific JSON object by referencing key to be removed
*/
function removeObjectFromJson(msg, removeObject) {
	
	var scriptName= &apos;removeObjectFromJson&apos;;
	var debug= 0;
	//var objJson= JSON.stringify(msg);
	var objJson= JSON.parse(msg);
	var newObjJson= new Object();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof objJson: &apos;+typeof(objJson)+&apos; objJSON: &apos;+JSON.stringify(objJson));
	for (var key in objJson) {
		if(key== removeObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; DELETE key: &apos;+key);
			// delete objJson[key];
		} else {
			newObjJson[key]= objJson[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+objJson[key]+&apos; string: &apos;+JSON.stringify(objJson[key]));
		} // end if 
	} // end for 
	var newMsg= newObjJson;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));

	// return JSON.stringify(newMsg);
	return newMsg;
} 
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>993a6fd8-454a-4133-ba32-dbcfea71582b</id>
                <name>Update EDITransactionLog</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123233</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	The purpose of this function is to update the status in Insight.
	Populate the channel map with the following variables functionalGroupControlNumber, status, eventDate

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateStatus () {

	//  Build the llst of paramters to pass to the database
	var paramList = new Packages.java.util.ArrayList();
	paramList.add($(&apos;functionalGroupControlNumber&apos;));
	paramList.add($(&apos;eventDate&apos;));  //dateTime in the acknoledged field in this format (&quot;2017-07-31 14:15:01.577&quot;)
	paramList.add(new java.lang.Integer(parseInt($(&apos;status&apos;), 10)));
	
//	logger.info(&quot;updateStatus &quot;+paramList);

	//  SQL Statement and paramters that will be sent to SQL
	var statement = &quot;EXEC dbo.pr_EDITransactionLog_Update ?, ?, ?&quot;;
	//  Code template used for establishiing connection and passing the sql statement and parameter list  
	var result = executeSharedDBStatementFhirCh(statement, false, paramList);
	return result;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>42cb290e-5fb0-46b8-82db-576ea1e1ba0d</id>
                <name>Update EDITransactionLog from responseStatus in the response transformer </name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123356</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Call this in the response transformer on the destination.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateReponseStatus() {
	var status = 0;
	if (responseStatus == SENT){
		var status = 1;
		channelMap.put(&apos;status&apos;,status);
	}

updateStatus()
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2223579b-f914-4be7-a575-f1a2a2aa1ae2</id>
                <name>ValidateToString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123044</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} mapping - 
	@param {Any} defaultValue - 
	@param {Any} replacement - 
	@return {String} return description
*/
function validateToString(mapping, defaultValue, replacement) {
    if (mapping == null) {
        mapping = &apos;&apos;;
    }
    return validate(mapping, defaultValue, replacement).toString() + &apos;&apos;;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>8c9a8268-4ef0-43e9-ae5b-bf8895f0b80c</id>
            <name>WebPT-FORMAT</name>
            <revision>3</revision>
            <lastModified>
              <time>1691001755225</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>Include any functions or codes with 
-date &amp; time formating related
-data type formatting</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>920c9ead-70a6-4168-9d95-89261b73ae44</id>
                <name>12digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123520</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Take any 12 digit string yyyyMMddHHmm and change to MM/dd/yyyy HH:mm 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm
*/
function yyyyMMddHHmm(string) {
	return DateUtil.convertDate(&quot;yyyyMMddHHmm&quot;, &quot;MM/dd/yyyy HH:mm&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fe2689ec-1946-46d5-8dd6-8fbbf106e1e6</id>
                <name>14digitDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122871</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
    Take 14 digit string yyyyMMddHHmmss and change to MM/dd/yyyy HH:mm:ss 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm:ss
*/
function yyyyMMddHHmmss(string) {
	if (string.length == 14) {
		  return DateUtil.convertDate(&quot;yyyyMMddHHmmss&quot;, &quot;MM/dd/yyyy HH:mm:ss&quot;, string);
	}
	else {
		return &quot;unregcognized string&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b9db35e2-d5bd-48a1-8cc6-3475c698d7b4</id>
                <name>currentDT_yyyy-MM-dd HH:mm:ss.SSS</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123114</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Kirby Knight
	Date Modified:  11/09/2020
	Retund the current date/time down to the millisecond

	@return {String} return description
*/
function currentDtToMilliseconds() {
	return DateUtil.getCurrentDate(&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7e747999-4bec-43fc-978d-7049d3543cf0</id>
                <name>fixHL7NodeOrder</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123155</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/

function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>dfedacf6-773b-413e-b78d-1bf16a92071d</id>
                <name>formatHL7Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121643</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Take any eight digit HL7 message data string (yyyyMMdd) and formats it human-readable format (MM/dd/yyyy)
	such as 20090612 -&gt; 06/12/2009

	@param {String} arg1 - 8 digit HL7 message data string yyyyMMdd
	@return {String} return date format as MM/dd/yyyy
*/
function formatHL7Date(string) {
	return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;MM/dd/yyyy&quot;, string);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a8f54921-2cb6-4134-8806-3c4e10a757d9</id>
                <name>getCurrentLocalTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122014</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = getCurrentLocalTimestamp();

	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestamp() {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(&quot;EST&quot;)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6c5f1bd8-ebbf-4c8e-b465-0be8ccaba0d0</id>
                <name>getCurrentLocalTimeToMs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123077</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**

	Gets the current local date/time to the milliseconds
	Converts to the timezone that is passed in Examples (America/New_York, America/Chicago, America/Phoenix )

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestampToMs(timeZone) {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timeZone)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>78d74c5b-c881-404a-ad96-4e909e1a19f3</id>
                <name>phoneToE164</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121982</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Insight phone number to E164 format 5554446666 to +15554446666

	@param {Any} phoneIn - 
	@return {String} return description
*/
function phoneToE164(phoneIn) {
	logger.info(&apos;L1 &apos;+phoneIn);
	if(phoneIn != null ){
	//phoneIn = &apos;+1&apos; + phoneIn.toString(); 
	logger.info(&apos;L2 &apos;+phoneIn);
	return &apos;+1&apos; + phoneIn.toString(); 
	} else{
		return null;
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>6a32d94d-408c-4e10-9799-e45e150b5c1f</id>
            <name>WebPT-MISC</name>
            <revision>3</revision>
            <lastModified>
              <time>1690987207668</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description>miscellaneous javascript</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
              <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>84b4f1c7-f82d-4140-9fbd-98a95f68ff32</id>
                <name>getChannelState</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122648</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetChannelState(channel_id) {

    var channel_status = &quot;NA&quot;;

    var channel_count = parseInt(Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().size());

    for(var i=0;i&lt;channel_count;i++) {
        if (channel_id == Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getChannelId()) {
            channel_status = Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getState();
        }
    }

    return channel_status;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>715435a9-cb15-4e8f-bc5b-4249eaea6e17</id>
                <name>momentjs</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122487</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Testing MIRTH-3794 using external JavaScript library &quot;moment.js&quot;
*/
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=b():&quot;function&quot;==typeof define&amp;&amp;define.amd?define(b):a.moment=b()}(this,function(){&quot;use strict&quot;;function a(){return Hc.apply(null,arguments)}function b(a){Hc=a}function c(a){return&quot;[object Array]&quot;===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||&quot;[object Date]&quot;===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c&lt;a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&amp;&amp;(a[c]=b[c]);return f(b,&quot;toString&quot;)&amp;&amp;(a.toString=b.toString),f(b,&quot;valueOf&quot;)&amp;&amp;(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ca(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&amp;&amp;(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow&lt;0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&amp;&amp;(a._isValid=a._isValid&amp;&amp;0===b.charsLeftOver&amp;&amp;0===b.unusedTokens.length&amp;&amp;void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if(&quot;undefined&quot;!=typeof b._isAMomentObject&amp;&amp;(a._isAMomentObject=b._isAMomentObject),&quot;undefined&quot;!=typeof b._i&amp;&amp;(a._i=b._i),&quot;undefined&quot;!=typeof b._f&amp;&amp;(a._f=b._f),&quot;undefined&quot;!=typeof b._l&amp;&amp;(a._l=b._l),&quot;undefined&quot;!=typeof b._strict&amp;&amp;(a._strict=b._strict),&quot;undefined&quot;!=typeof b._tzm&amp;&amp;(a._tzm=b._tzm),&quot;undefined&quot;!=typeof b._isUTC&amp;&amp;(a._isUTC=b._isUTC),&quot;undefined&quot;!=typeof b._offset&amp;&amp;(a._offset=b._offset),&quot;undefined&quot;!=typeof b._pf&amp;&amp;(a._pf=j(b)),&quot;undefined&quot;!=typeof b._locale&amp;&amp;(a._locale=b._locale),Jc.length&gt;0)for(c in Jc)d=Jc[c],e=b[d],&quot;undefined&quot;!=typeof e&amp;&amp;(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),Kc===!1&amp;&amp;(Kc=!0,a.updateOffset(this),Kc=!1)}function o(a){return a instanceof n||null!=a&amp;&amp;null!=a._isAMomentObject}function p(a){return 0&gt;a?Math.ceil(a):Math.floor(a)}function q(a){var b=+a,c=0;return 0!==b&amp;&amp;isFinite(b)&amp;&amp;(c=p(b)),c}function r(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e&gt;d;d++)(c&amp;&amp;a[d]!==b[d]||!c&amp;&amp;q(a[d])!==q(b[d]))&amp;&amp;g++;return g+f}function s(){}function t(a){return a?a.toLowerCase().replace(&quot;_&quot;,&quot;-&quot;):a}function u(a){for(var b,c,d,e,f=0;f&lt;a.length;){for(e=t(a[f]).split(&quot;-&quot;),b=e.length,c=t(a[f+1]),c=c?c.split(&quot;-&quot;):null;b&gt;0;){if(d=v(e.slice(0,b).join(&quot;-&quot;)))return d;if(c&amp;&amp;c.length&gt;=b&amp;&amp;r(e,c,!0)&gt;=b-1)break;b--}f++}return null}function v(a){var b=null;if(!Lc[a]&amp;&amp;&quot;undefined&quot;!=typeof module&amp;&amp;module&amp;&amp;module.exports)try{b=Ic._abbr,require(&quot;./locale/&quot;+a),w(b)}catch(c){}return Lc[a]}function w(a,b){var c;return a&amp;&amp;(c=&quot;undefined&quot;==typeof b?y(a):x(a,b),c&amp;&amp;(Ic=c)),Ic._abbr}function x(a,b){return null!==b?(b.abbr=a,Lc[a]=Lc[a]||new s,Lc[a].set(b),w(a),Lc[a]):(delete Lc[a],null)}function y(a){var b;if(a&amp;&amp;a._locale&amp;&amp;a._locale._abbr&amp;&amp;(a=a._locale._abbr),!a)return Ic;if(!c(a)){if(b=v(a))return b;a=[a]}return u(a)}function z(a,b){var c=a.toLowerCase();Mc[c]=Mc[c+&quot;s&quot;]=Mc[b]=a}function A(a){return&quot;string&quot;==typeof a?Mc[a]||Mc[a.toLowerCase()]:void 0}function B(a){var b,c,d={};for(c in a)f(a,c)&amp;&amp;(b=A(c),b&amp;&amp;(d[b]=a[c]));return d}function C(b,c){return function(d){return null!=d?(E(this,b,d),a.updateOffset(this,c),this):D(this,b)}}function D(a,b){return a._d[&quot;get&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b]()}function E(a,b,c){return a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b](c)}function F(a,b){var c;if(&quot;object&quot;==typeof a)for(c in a)this.set(c,a[c]);else if(a=A(a),&quot;function&quot;==typeof this[a])return this[a](b);return this}function G(a,b,c){var d=&quot;&quot;+Math.abs(a),e=b-d.length,f=a&gt;=0;return(f?c?&quot;+&quot;:&quot;&quot;:&quot;-&quot;)+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function H(a,b,c,d){var e=d;&quot;string&quot;==typeof d&amp;&amp;(e=function(){return this[d]()}),a&amp;&amp;(Qc[a]=e),b&amp;&amp;(Qc[b[0]]=function(){return G(e.apply(this,arguments),b[1],b[2])}),c&amp;&amp;(Qc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function I(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,&quot;&quot;):a.replace(/\\/g,&quot;&quot;)}function J(a){var b,c,d=a.match(Nc);for(b=0,c=d.length;c&gt;b;b++)Qc[d[b]]?d[b]=Qc[d[b]]:d[b]=I(d[b]);return function(e){var f=&quot;&quot;;for(b=0;c&gt;b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function K(a,b){return a.isValid()?(b=L(b,a.localeData()),Pc[b]=Pc[b]||J(b),Pc[b](a)):a.localeData().invalidDate()}function L(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Oc.lastIndex=0;d&gt;=0&amp;&amp;Oc.test(a);)a=a.replace(Oc,c),Oc.lastIndex=0,d-=1;return a}function M(a){return&quot;function&quot;==typeof a&amp;&amp;&quot;[object Function]&quot;===Object.prototype.toString.call(a)}function N(a,b,c){dd[a]=M(b)?b:function(a){return a&amp;&amp;c?c:b}}function O(a,b){return f(dd,a)?dd[a](b._strict,b._locale):new RegExp(P(a))}function P(a){return a.replace(&quot;\\&quot;,&quot;&quot;).replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,&quot;\\$&amp;&quot;)}function Q(a,b){var c,d=b;for(&quot;string&quot;==typeof a&amp;&amp;(a=[a]),&quot;number&quot;==typeof b&amp;&amp;(d=function(a,c){c[b]=q(a)}),c=0;c&lt;a.length;c++)ed[a[c]]=d}function R(a,b){Q(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function S(a,b,c){null!=b&amp;&amp;f(ed,a)&amp;&amp;ed[a](b,c._a,c,a)}function T(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function U(a){return this._months[a.month()]}function V(a){return this._monthsShort[a.month()]}function W(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12&gt;d;d++){if(e=h([2e3,d]),c&amp;&amp;!this._longMonthsParse[d]&amp;&amp;(this._longMonthsParse[d]=new RegExp(&quot;^&quot;+this.months(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;),this._shortMonthsParse[d]=new RegExp(&quot;^&quot;+this.monthsShort(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;)),c||this._monthsParse[d]||(f=&quot;^&quot;+this.months(e,&quot;&quot;)+&quot;|^&quot;+this.monthsShort(e,&quot;&quot;),this._monthsParse[d]=new RegExp(f.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),c&amp;&amp;&quot;MMMM&quot;===b&amp;&amp;this._longMonthsParse[d].test(a))return d;if(c&amp;&amp;&quot;MMM&quot;===b&amp;&amp;this._shortMonthsParse[d].test(a))return d;if(!c&amp;&amp;this._monthsParse[d].test(a))return d}}function X(a,b){var c;return&quot;string&quot;==typeof b&amp;&amp;(b=a.localeData().monthsParse(b),&quot;number&quot;!=typeof b)?a:(c=Math.min(a.date(),T(a.year(),b)),a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+&quot;Month&quot;](b,c),a)}function Y(b){return null!=b?(X(this,b),a.updateOffset(this,!0),this):D(this,&quot;Month&quot;)}function Z(){return T(this.year(),this.month())}function $(a){var b,c=a._a;return c&amp;&amp;-2===j(a).overflow&amp;&amp;(b=c[gd]&lt;0||c[gd]&gt;11?gd:c[hd]&lt;1||c[hd]&gt;T(c[fd],c[gd])?hd:c[id]&lt;0||c[id]&gt;24||24===c[id]&amp;&amp;(0!==c[jd]||0!==c[kd]||0!==c[ld])?id:c[jd]&lt;0||c[jd]&gt;59?jd:c[kd]&lt;0||c[kd]&gt;59?kd:c[ld]&lt;0||c[ld]&gt;999?ld:-1,j(a)._overflowDayOfYear&amp;&amp;(fd&gt;b||b&gt;hd)&amp;&amp;(b=hd),j(a).overflow=b),a}function _(b){a.suppressDeprecationWarnings===!1&amp;&amp;&quot;undefined&quot;!=typeof console&amp;&amp;console.warn&amp;&amp;console.warn(&quot;Deprecation warning: &quot;+b)}function aa(a,b){var c=!0;return g(function(){return c&amp;&amp;(_(a+&quot;\n&quot;+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function ba(a,b){od[a]||(_(b),od[a]=!0)}function ca(a){var b,c,d=a._i,e=pd.exec(d);if(e){for(j(a).iso=!0,b=0,c=qd.length;c&gt;b;b++)if(qd[b][1].exec(d)){a._f=qd[b][0];break}for(b=0,c=rd.length;c&gt;b;b++)if(rd[b][1].exec(d)){a._f+=(e[6]||&quot; &quot;)+rd[b][0];break}d.match(ad)&amp;&amp;(a._f+=&quot;Z&quot;),va(a)}else a._isValid=!1}function da(b){var c=sd.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ca(b),void(b._isValid===!1&amp;&amp;(delete b._isValid,a.createFromInputFallback(b))))}function ea(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970&gt;a&amp;&amp;h.setFullYear(a),h}function fa(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970&gt;a&amp;&amp;b.setUTCFullYear(a),b}function ga(a){return ha(a)?366:365}function ha(a){return a%4===0&amp;&amp;a%100!==0||a%400===0}function ia(){return ha(this.year())}function ja(a,b,c){var d,e=c-b,f=c-a.day();return f&gt;e&amp;&amp;(f-=7),e-7&gt;f&amp;&amp;(f+=7),d=Da(a).add(f,&quot;d&quot;),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ka(a){return ja(a,this._week.dow,this._week.doy).week}function la(){return this._week.dow}function ma(){return this._week.doy}function na(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function oa(a){var b=ja(this,1,4).week;return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function pa(a,b,c,d,e){var f,g=6+e-d,h=fa(a,0,1+g),i=h.getUTCDay();return e&gt;i&amp;&amp;(i+=7),c=null!=c?1*c:e,f=1+g+7*(b-1)-i+c,{year:f&gt;0?a:a-1,dayOfYear:f&gt;0?f:ga(a-1)+f}}function qa(a){var b=Math.round((this.clone().startOf(&quot;day&quot;)-this.clone().startOf(&quot;year&quot;))/864e5)+1;return null==a?b:this.add(a-b,&quot;d&quot;)}function ra(a,b,c){return null!=a?a:null!=b?b:c}function sa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ta(a){var b,c,d,e,f=[];if(!a._d){for(d=sa(a),a._w&amp;&amp;null==a._a[hd]&amp;&amp;null==a._a[gd]&amp;&amp;ua(a),a._dayOfYear&amp;&amp;(e=ra(a._a[fd],d[fd]),a._dayOfYear&gt;ga(e)&amp;&amp;(j(a)._overflowDayOfYear=!0),c=fa(e,0,a._dayOfYear),a._a[gd]=c.getUTCMonth(),a._a[hd]=c.getUTCDate()),b=0;3&gt;b&amp;&amp;null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7&gt;b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[id]&amp;&amp;0===a._a[jd]&amp;&amp;0===a._a[kd]&amp;&amp;0===a._a[ld]&amp;&amp;(a._nextDay=!0,a._a[id]=0),a._d=(a._useUTC?fa:ea).apply(null,f),null!=a._tzm&amp;&amp;a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&amp;&amp;(a._a[id]=24)}}function ua(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=ra(b.GG,a._a[fd],ja(Da(),1,4).year),d=ra(b.W,1),e=ra(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=ra(b.gg,a._a[fd],ja(Da(),f,g).year),d=ra(b.w,1),null!=b.d?(e=b.d,f&gt;e&amp;&amp;++d):e=null!=b.e?b.e+f:f),h=pa(c,d,e,g,f),a._a[fd]=h.year,a._dayOfYear=h.dayOfYear}function va(b){if(b._f===a.ISO_8601)return void ca(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=&quot;&quot;+b._i,i=h.length,k=0;for(e=L(b._f,b._locale).match(Nc)||[],c=0;c&lt;e.length;c++)f=e[c],d=(h.match(O(f,b))||[])[0],d&amp;&amp;(g=h.substr(0,h.indexOf(d)),g.length&gt;0&amp;&amp;j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Qc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),S(f,d,b)):b._strict&amp;&amp;!d&amp;&amp;j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length&gt;0&amp;&amp;j(b).unusedInput.push(h),j(b).bigHour===!0&amp;&amp;b._a[id]&lt;=12&amp;&amp;b._a[id]&gt;0&amp;&amp;(j(b).bigHour=void 0),b._a[id]=wa(b._locale,b._a[id],b._meridiem),ta(b),$(b)}function wa(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&amp;&amp;12&gt;b&amp;&amp;(b+=12),d||12!==b||(b=0),b):b}function xa(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e&lt;a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&amp;&amp;(b._useUTC=a._useUTC),b._f=a._f[e],va(b),k(b)&amp;&amp;(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d&gt;f)&amp;&amp;(d=f,c=b));g(a,c||b)}function ya(a){if(!a._d){var b=B(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ta(a)}}function za(a){var b=new n($(Aa(a)));return b._nextDay&amp;&amp;(b.add(1,&quot;d&quot;),b._nextDay=void 0),b}function Aa(a){var b=a._i,e=a._f;return a._locale=a._locale||y(a._l),null===b||void 0===e&amp;&amp;&quot;&quot;===b?l({nullInput:!0}):(&quot;string&quot;==typeof b&amp;&amp;(a._i=b=a._locale.preparse(b)),o(b)?new n($(b)):(c(e)?xa(a):e?va(a):d(b)?a._d=b:Ba(a),a))}function Ba(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):&quot;string&quot;==typeof f?da(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ta(b)):&quot;object&quot;==typeof f?ya(b):&quot;number&quot;==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ca(a,b,c,d,e){var f={};return&quot;boolean&quot;==typeof c&amp;&amp;(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,za(f)}function Da(a,b,c,d){return Ca(a,b,c,d,!1)}function Ea(a,b){var d,e;if(1===b.length&amp;&amp;c(b[0])&amp;&amp;(b=b[0]),!b.length)return Da();for(d=b[0],e=1;e&lt;b.length;++e)(!b[e].isValid()||b[e][a](d))&amp;&amp;(d=b[e]);return d}function Fa(){var a=[].slice.call(arguments,0);return Ea(&quot;isBefore&quot;,a)}function Ga(){var a=[].slice.call(arguments,0);return Ea(&quot;isAfter&quot;,a)}function Ha(a){var b=B(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=y(),this._bubble()}function Ia(a){return a instanceof Ha}function Ja(a,b){H(a,0,0,function(){var a=this.utcOffset(),c=&quot;+&quot;;return 0&gt;a&amp;&amp;(a=-a,c=&quot;-&quot;),c+G(~~(a/60),2)+b+G(~~a%60,2)})}function Ka(a){var b=(a||&quot;&quot;).match(ad)||[],c=b[b.length-1]||[],d=(c+&quot;&quot;).match(xd)||[&quot;-&quot;,0,0],e=+(60*d[1])+q(d[2]);return&quot;+&quot;===d[0]?e:-e}function La(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Da(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Da(b).local()}function Ma(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Na(b,c){var d,e=this._offset||0;return null!=b?(&quot;string&quot;==typeof b&amp;&amp;(b=Ka(b)),Math.abs(b)&lt;16&amp;&amp;(b=60*b),!this._isUTC&amp;&amp;c&amp;&amp;(d=Ma(this)),this._offset=b,this._isUTC=!0,null!=d&amp;&amp;this.add(d,&quot;m&quot;),e!==b&amp;&amp;(!c||this._changeInProgress?bb(this,Ya(b-e,&quot;m&quot;),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ma(this)}function Oa(a,b){return null!=a?(&quot;string&quot;!=typeof a&amp;&amp;(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Pa(a){return this.utcOffset(0,a)}function Qa(a){return this._isUTC&amp;&amp;(this.utcOffset(0,a),this._isUTC=!1,a&amp;&amp;this.subtract(Ma(this),&quot;m&quot;)),this}function Ra(){return this._tzm?this.utcOffset(this._tzm):&quot;string&quot;==typeof this._i&amp;&amp;this.utcOffset(Ka(this._i)),this}function Sa(a){return a=a?Da(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Ta(){return this.utcOffset()&gt;this.clone().month(0).utcOffset()||this.utcOffset()&gt;this.clone().month(5).utcOffset()}function Ua(){if(&quot;undefined&quot;!=typeof this._isDSTShifted)return this._isDSTShifted;var a={};if(m(a,this),a=Aa(a),a._a){var b=a._isUTC?h(a._a):Da(a._a);this._isDSTShifted=this.isValid()&amp;&amp;r(a._a,b.toArray())&gt;0}else this._isDSTShifted=!1;return this._isDSTShifted}function Va(){return!this._isUTC}function Wa(){return this._isUTC}function Xa(){return this._isUTC&amp;&amp;0===this._offset}function Ya(a,b){var c,d,e,g=a,h=null;return Ia(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:&quot;number&quot;==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=yd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:0,d:q(h[hd])*c,h:q(h[id])*c,m:q(h[jd])*c,s:q(h[kd])*c,ms:q(h[ld])*c}):(h=zd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:Za(h[2],c),M:Za(h[3],c),d:Za(h[4],c),h:Za(h[5],c),m:Za(h[6],c),s:Za(h[7],c),w:Za(h[8],c)}):null==g?g={}:&quot;object&quot;==typeof g&amp;&amp;(&quot;from&quot;in g||&quot;to&quot;in g)&amp;&amp;(e=_a(Da(g.from),Da(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ha(g),Ia(a)&amp;&amp;f(a,&quot;_locale&quot;)&amp;&amp;(d._locale=a._locale),d}function Za(a,b){var c=a&amp;&amp;parseFloat(a.replace(&quot;,&quot;,&quot;.&quot;));return(isNaN(c)?0:c)*b}function $a(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,&quot;M&quot;).isAfter(b)&amp;&amp;--c.months,c.milliseconds=+b-+a.clone().add(c.months,&quot;M&quot;),c}function _a(a,b){var c;return b=La(b,a),a.isBefore(b)?c=$a(a,b):(c=$a(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function ab(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(ba(b,&quot;moment().&quot;+b+&quot;(period, number) is deprecated. Please use moment().&quot;+b+&quot;(number, period).&quot;),f=c,c=d,d=f),c=&quot;string&quot;==typeof c?+c:c,e=Ya(c,d),bb(this,e,a),this}}function bb(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&amp;&amp;b._d.setTime(+b._d+f*d),g&amp;&amp;E(b,&quot;Date&quot;,D(b,&quot;Date&quot;)+g*d),h&amp;&amp;X(b,D(b,&quot;Month&quot;)+h*d),e&amp;&amp;a.updateOffset(b,g||h)}function cb(a,b){var c=a||Da(),d=La(c,this).startOf(&quot;day&quot;),e=this.diff(d,&quot;days&quot;,!0),f=-6&gt;e?&quot;sameElse&quot;:-1&gt;e?&quot;lastWeek&quot;:0&gt;e?&quot;lastDay&quot;:1&gt;e?&quot;sameDay&quot;:2&gt;e?&quot;nextDay&quot;:7&gt;e?&quot;nextWeek&quot;:&quot;sameElse&quot;;return this.format(b&amp;&amp;b[f]||this.localeData().calendar(f,this,Da(c)))}function db(){return new n(this)}function eb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this&gt;+a):(c=o(a)?+a:+Da(a),c&lt;+this.clone().startOf(b))}function fb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+a&gt;+this):(c=o(a)?+a:+Da(a),+this.clone().endOf(b)&lt;c)}function gb(a,b,c){return this.isAfter(a,c)&amp;&amp;this.isBefore(b,c)}function hb(a,b){var c;return b=A(b||&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this===+a):(c=+Da(a),+this.clone().startOf(b)&lt;=c&amp;&amp;c&lt;=+this.clone().endOf(b))}function ib(a,b,c){var d,e,f=La(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=A(b),&quot;year&quot;===b||&quot;month&quot;===b||&quot;quarter&quot;===b?(e=jb(this,f),&quot;quarter&quot;===b?e/=3:&quot;year&quot;===b&amp;&amp;(e/=12)):(d=this-f,e=&quot;second&quot;===b?d/1e3:&quot;minute&quot;===b?d/6e4:&quot;hour&quot;===b?d/36e5:&quot;day&quot;===b?(d-g)/864e5:&quot;week&quot;===b?(d-g)/6048e5:d),c?e:p(e)}function jb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,&quot;months&quot;);return 0&gt;b-f?(c=a.clone().add(e-1,&quot;months&quot;),d=(b-f)/(f-c)):(c=a.clone().add(e+1,&quot;months&quot;),d=(b-f)/(c-f)),-(e+d)}function kb(){return this.clone().locale(&quot;en&quot;).format(&quot;ddd MMM DD YYYY HH:mm:ss [GMT]ZZ&quot;)}function lb(){var a=this.clone().utc();return 0&lt;a.year()&amp;&amp;a.year()&lt;=9999?&quot;function&quot;==typeof Date.prototype.toISOString?this.toDate().toISOString():K(a,&quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;):K(a,&quot;YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;)}function mb(b){var c=K(this,b||a.defaultFormat);return this.localeData().postformat(c)}function nb(a,b){return this.isValid()?Ya({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.from(Da(),a)}function pb(a,b){return this.isValid()?Ya({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function qb(a){return this.to(Da(),a)}function rb(a){var b;return void 0===a?this._locale._abbr:(b=y(a),null!=b&amp;&amp;(this._locale=b),this)}function sb(){return this._locale}function tb(a){switch(a=A(a)){case&quot;year&quot;:this.month(0);case&quot;quarter&quot;:case&quot;month&quot;:this.date(1);case&quot;week&quot;:case&quot;isoWeek&quot;:case&quot;day&quot;:this.hours(0);case&quot;hour&quot;:this.minutes(0);case&quot;minute&quot;:this.seconds(0);case&quot;second&quot;:this.milliseconds(0)}return&quot;week&quot;===a&amp;&amp;this.weekday(0),&quot;isoWeek&quot;===a&amp;&amp;this.isoWeekday(1),&quot;quarter&quot;===a&amp;&amp;this.month(3*Math.floor(this.month()/3)),this}function ub(a){return a=A(a),void 0===a||&quot;millisecond&quot;===a?this:this.startOf(a).add(1,&quot;isoWeek&quot;===a?&quot;week&quot;:a).subtract(1,&quot;ms&quot;)}function vb(){return+this._d-6e4*(this._offset||0)}function wb(){return Math.floor(+this/1e3)}function xb(){return this._offset?new Date(+this):this._d}function yb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function zb(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Ab(){return k(this)}function Bb(){return g({},j(this))}function Cb(){return j(this).overflow}function Db(a,b){H(0,[a,a.length],0,b)}function Eb(a,b,c){return ja(Da([a,11,31+b-c]),b,c).week}function Fb(a){var b=ja(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Gb(a){var b=ja(this,1,4).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Hb(){return Eb(this.year(),1,4)}function Ib(){var a=this.localeData()._week;return Eb(this.year(),a.dow,a.doy)}function Jb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Kb(a,b){return&quot;string&quot;!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),&quot;number&quot;==typeof a?a:null):parseInt(a,10)}function Lb(a){return this._weekdays[a.day()]}function Mb(a){return this._weekdaysShort[a.day()]}function Nb(a){return this._weekdaysMin[a.day()]}function Ob(a){var b,c,d;for(this._weekdaysParse=this._weekdaysParse||[],b=0;7&gt;b;b++)if(this._weekdaysParse[b]||(c=Da([2e3,1]).day(b),d=&quot;^&quot;+this.weekdays(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysShort(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysMin(c,&quot;&quot;),this._weekdaysParse[b]=new RegExp(d.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),this._weekdaysParse[b].test(a))return b}function Pb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Kb(a,this.localeData()),this.add(a-b,&quot;d&quot;)):b}function Qb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,&quot;d&quot;)}function Rb(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Sb(a,b){H(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Tb(a,b){return b._meridiemParse}function Ub(a){return&quot;p&quot;===(a+&quot;&quot;).toLowerCase().charAt(0)}function Vb(a,b,c){return a&gt;11?c?&quot;pm&quot;:&quot;PM&quot;:c?&quot;am&quot;:&quot;AM&quot;}function Wb(a,b){b[ld]=q(1e3*(&quot;0.&quot;+a))}function Xb(){return this._isUTC?&quot;UTC&quot;:&quot;&quot;}function Yb(){return this._isUTC?&quot;Coordinated Universal Time&quot;:&quot;&quot;}function Zb(a){return Da(1e3*a)}function $b(){return Da.apply(null,arguments).parseZone()}function _b(a,b,c){var d=this._calendar[a];return&quot;function&quot;==typeof d?d.call(b,c):d}function ac(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function bc(){return this._invalidDate}function cc(a){return this._ordinal.replace(&quot;%d&quot;,a)}function dc(a){return a}function ec(a,b,c,d){var e=this._relativeTime[c];return&quot;function&quot;==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function fc(a,b){var c=this._relativeTime[a&gt;0?&quot;future&quot;:&quot;past&quot;];return&quot;function&quot;==typeof c?c(b):c.replace(/%s/i,b)}function gc(a){var b,c;for(c in a)b=a[c],&quot;function&quot;==typeof b?this[c]=b:this[&quot;_&quot;+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+&quot;|&quot;+/\d{1,2}/.source)}function hc(a,b,c,d){var e=y(),f=h().set(d,b);return e[c](f,a)}function ic(a,b,c,d,e){if(&quot;number&quot;==typeof a&amp;&amp;(b=a,a=void 0),a=a||&quot;&quot;,null!=b)return hc(a,b,c,e);var f,g=[];for(f=0;d&gt;f;f++)g[f]=hc(a,f,c,e);return g}function jc(a,b){return ic(a,b,&quot;months&quot;,12,&quot;month&quot;)}function kc(a,b){return ic(a,b,&quot;monthsShort&quot;,12,&quot;month&quot;)}function lc(a,b){return ic(a,b,&quot;weekdays&quot;,7,&quot;day&quot;)}function mc(a,b){return ic(a,b,&quot;weekdaysShort&quot;,7,&quot;day&quot;)}function nc(a,b){return ic(a,b,&quot;weekdaysMin&quot;,7,&quot;day&quot;)}function oc(){var a=this._data;return this._milliseconds=Wd(this._milliseconds),this._days=Wd(this._days),this._months=Wd(this._months),a.milliseconds=Wd(a.milliseconds),a.seconds=Wd(a.seconds),a.minutes=Wd(a.minutes),a.hours=Wd(a.hours),a.months=Wd(a.months),a.years=Wd(a.years),this}function pc(a,b,c,d){var e=Ya(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function qc(a,b){return pc(this,a,b,1)}function rc(a,b){return pc(this,a,b,-1)}function sc(a){return 0&gt;a?Math.floor(a):Math.ceil(a)}function tc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f&gt;=0&amp;&amp;g&gt;=0&amp;&amp;h&gt;=0||0&gt;=f&amp;&amp;0&gt;=g&amp;&amp;0&gt;=h||(f+=864e5*sc(vc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=p(f/1e3),i.seconds=a%60,b=p(a/60),i.minutes=b%60,c=p(b/60),i.hours=c%24,g+=p(c/24),e=p(uc(g)),h+=e,g-=sc(vc(e)),d=p(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function uc(a){return 4800*a/146097}function vc(a){return 146097*a/4800}function wc(a){var b,c,d=this._milliseconds;if(a=A(a),&quot;month&quot;===a||&quot;year&quot;===a)return b=this._days+d/864e5,c=this._months+uc(b),&quot;month&quot;===a?c:c/12;switch(b=this._days+Math.round(vc(this._months)),a){case&quot;week&quot;:return b/7+d/6048e5;case&quot;day&quot;:return b+d/864e5;case&quot;hour&quot;:return 24*b+d/36e5;case&quot;minute&quot;:return 1440*b+d/6e4;case&quot;second&quot;:return 86400*b+d/1e3;case&quot;millisecond&quot;:return Math.floor(864e5*b)+d;default:throw new Error(&quot;Unknown unit &quot;+a)}}function xc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*q(this._months/12)}function yc(a){return function(){return this.as(a)}}function zc(a){return a=A(a),this[a+&quot;s&quot;]()}function Ac(a){return function(){return this._data[a]}}function Bc(){return p(this.days()/7)}function Cc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Dc(a,b,c){var d=Ya(a).abs(),e=ke(d.as(&quot;s&quot;)),f=ke(d.as(&quot;m&quot;)),g=ke(d.as(&quot;h&quot;)),h=ke(d.as(&quot;d&quot;)),i=ke(d.as(&quot;M&quot;)),j=ke(d.as(&quot;y&quot;)),k=e&lt;le.s&amp;&amp;[&quot;s&quot;,e]||1===f&amp;&amp;[&quot;m&quot;]||f&lt;le.m&amp;&amp;[&quot;mm&quot;,f]||1===g&amp;&amp;[&quot;h&quot;]||g&lt;le.h&amp;&amp;[&quot;hh&quot;,g]||1===h&amp;&amp;[&quot;d&quot;]||h&lt;le.d&amp;&amp;[&quot;dd&quot;,h]||1===i&amp;&amp;[&quot;M&quot;]||i&lt;le.M&amp;&amp;[&quot;MM&quot;,i]||1===j&amp;&amp;[&quot;y&quot;]||[&quot;yy&quot;,j];return k[2]=b,k[3]=+a&gt;0,k[4]=c,Cc.apply(null,k)}function Ec(a,b){return void 0===le[a]?!1:void 0===b?le[a]:(le[a]=b,!0)}function Fc(a){var b=this.localeData(),c=Dc(this,!a,b);return a&amp;&amp;(c=b.pastFuture(+this,c)),b.postformat(c)}function Gc(){var a,b,c,d=me(this._milliseconds)/1e3,e=me(this._days),f=me(this._months);a=p(d/60),b=p(a/60),d%=60,a%=60,c=p(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0&gt;m?&quot;-&quot;:&quot;&quot;)+&quot;P&quot;+(g?g+&quot;Y&quot;:&quot;&quot;)+(h?h+&quot;M&quot;:&quot;&quot;)+(i?i+&quot;D&quot;:&quot;&quot;)+(j||k||l?&quot;T&quot;:&quot;&quot;)+(j?j+&quot;H&quot;:&quot;&quot;)+(k?k+&quot;M&quot;:&quot;&quot;)+(l?l+&quot;S&quot;:&quot;&quot;):&quot;P0D&quot;}var Hc,Ic,Jc=a.momentProperties=[],Kc=!1,Lc={},Mc={},Nc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Pc={},Qc={},Rc=/\d/,Sc=/\d\d/,Tc=/\d{3}/,Uc=/\d{4}/,Vc=/[+-]?\d{6}/,Wc=/\d\d?/,Xc=/\d{1,3}/,Yc=/\d{1,4}/,Zc=/[+-]?\d{1,6}/,$c=/\d+/,_c=/[+-]?\d+/,ad=/Z|[+-]\d\d:?\d\d/gi,bd=/[+-]?\d+(\.\d{1,3})?/,cd=/[0-9]*[&apos;a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,dd={},ed={},fd=0,gd=1,hd=2,id=3,jd=4,kd=5,ld=6;H(&quot;M&quot;,[&quot;MM&quot;,2],&quot;Mo&quot;,function(){return this.month()+1}),H(&quot;MMM&quot;,0,0,function(a){return this.localeData().monthsShort(this,a)}),H(&quot;MMMM&quot;,0,0,function(a){return this.localeData().months(this,a)}),z(&quot;month&quot;,&quot;M&quot;),N(&quot;M&quot;,Wc),N(&quot;MM&quot;,Wc,Sc),N(&quot;MMM&quot;,cd),N(&quot;MMMM&quot;,cd),Q([&quot;M&quot;,&quot;MM&quot;],function(a,b){b[gd]=q(a)-1}),Q([&quot;MMM&quot;,&quot;MMMM&quot;],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[gd]=e:j(c).invalidMonth=a});var md=&quot;January_February_March_April_May_June_July_August_September_October_November_December&quot;.split(&quot;_&quot;),nd=&quot;Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec&quot;.split(&quot;_&quot;),od={};a.suppressDeprecationWarnings=!1;var pd=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,qd=[[&quot;YYYYYY-MM-DD&quot;,/[+-]\d{6}-\d{2}-\d{2}/],[&quot;YYYY-MM-DD&quot;,/\d{4}-\d{2}-\d{2}/],[&quot;GGGG-[W]WW-E&quot;,/\d{4}-W\d{2}-\d/],[&quot;GGGG-[W]WW&quot;,/\d{4}-W\d{2}/],[&quot;YYYY-DDD&quot;,/\d{4}-\d{3}/]],rd=[[&quot;HH:mm:ss.SSSS&quot;,/(T| )\d\d:\d\d:\d\d\.\d+/],[&quot;HH:mm:ss&quot;,/(T| )\d\d:\d\d:\d\d/],[&quot;HH:mm&quot;,/(T| )\d\d:\d\d/],[&quot;HH&quot;,/(T| )\d\d/]],sd=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=aa(&quot;moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.&quot;,function(a){a._d=new Date(a._i+(a._useUTC?&quot; UTC&quot;:&quot;&quot;))}),H(0,[&quot;YY&quot;,2],0,function(){return this.year()%100}),H(0,[&quot;YYYY&quot;,4],0,&quot;year&quot;),H(0,[&quot;YYYYY&quot;,5],0,&quot;year&quot;),H(0,[&quot;YYYYYY&quot;,6,!0],0,&quot;year&quot;),z(&quot;year&quot;,&quot;y&quot;),N(&quot;Y&quot;,_c),N(&quot;YY&quot;,Wc,Sc),N(&quot;YYYY&quot;,Yc,Uc),N(&quot;YYYYY&quot;,Zc,Vc),N(&quot;YYYYYY&quot;,Zc,Vc),Q([&quot;YYYYY&quot;,&quot;YYYYYY&quot;],fd),Q(&quot;YYYY&quot;,function(b,c){c[fd]=2===b.length?a.parseTwoDigitYear(b):q(b)}),Q(&quot;YY&quot;,function(b,c){c[fd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return q(a)+(q(a)&gt;68?1900:2e3)};var td=C(&quot;FullYear&quot;,!1);H(&quot;w&quot;,[&quot;ww&quot;,2],&quot;wo&quot;,&quot;week&quot;),H(&quot;W&quot;,[&quot;WW&quot;,2],&quot;Wo&quot;,&quot;isoWeek&quot;),z(&quot;week&quot;,&quot;w&quot;),z(&quot;isoWeek&quot;,&quot;W&quot;),N(&quot;w&quot;,Wc),N(&quot;ww&quot;,Wc,Sc),N(&quot;W&quot;,Wc),N(&quot;WW&quot;,Wc,Sc),R([&quot;w&quot;,&quot;ww&quot;,&quot;W&quot;,&quot;WW&quot;],function(a,b,c,d){b[d.substr(0,1)]=q(a)});var ud={dow:0,doy:6};H(&quot;DDD&quot;,[&quot;DDDD&quot;,3],&quot;DDDo&quot;,&quot;dayOfYear&quot;),z(&quot;dayOfYear&quot;,&quot;DDD&quot;),N(&quot;DDD&quot;,Xc),N(&quot;DDDD&quot;,Tc),Q([&quot;DDD&quot;,&quot;DDDD&quot;],function(a,b,c){c._dayOfYear=q(a)}),a.ISO_8601=function(){};var vd=aa(&quot;moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return this&gt;a?this:a}),wd=aa(&quot;moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return a&gt;this?this:a});Ja(&quot;Z&quot;,&quot;:&quot;),Ja(&quot;ZZ&quot;,&quot;&quot;),N(&quot;Z&quot;,ad),N(&quot;ZZ&quot;,ad),Q([&quot;Z&quot;,&quot;ZZ&quot;],function(a,b,c){c._useUTC=!0,c._tzm=Ka(a)});var xd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var yd=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,zd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Ya.fn=Ha.prototype;var Ad=ab(1,&quot;add&quot;),Bd=ab(-1,&quot;subtract&quot;);a.defaultFormat=&quot;YYYY-MM-DDTHH:mm:ssZ&quot;;var Cd=aa(&quot;moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.&quot;,function(a){return void 0===a?this.localeData():this.locale(a)});H(0,[&quot;gg&quot;,2],0,function(){return this.weekYear()%100}),H(0,[&quot;GG&quot;,2],0,function(){return this.isoWeekYear()%100}),Db(&quot;gggg&quot;,&quot;weekYear&quot;),Db(&quot;ggggg&quot;,&quot;weekYear&quot;),Db(&quot;GGGG&quot;,&quot;isoWeekYear&quot;),Db(&quot;GGGGG&quot;,&quot;isoWeekYear&quot;),z(&quot;weekYear&quot;,&quot;gg&quot;),z(&quot;isoWeekYear&quot;,&quot;GG&quot;),N(&quot;G&quot;,_c),N(&quot;g&quot;,_c),N(&quot;GG&quot;,Wc,Sc),N(&quot;gg&quot;,Wc,Sc),N(&quot;GGGG&quot;,Yc,Uc),N(&quot;gggg&quot;,Yc,Uc),N(&quot;GGGGG&quot;,Zc,Vc),N(&quot;ggggg&quot;,Zc,Vc),R([&quot;gggg&quot;,&quot;ggggg&quot;,&quot;GGGG&quot;,&quot;GGGGG&quot;],function(a,b,c,d){b[d.substr(0,2)]=q(a)}),R([&quot;gg&quot;,&quot;GG&quot;],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),H(&quot;Q&quot;,0,0,&quot;quarter&quot;),z(&quot;quarter&quot;,&quot;Q&quot;),N(&quot;Q&quot;,Rc),Q(&quot;Q&quot;,function(a,b){b[gd]=3*(q(a)-1)}),H(&quot;D&quot;,[&quot;DD&quot;,2],&quot;Do&quot;,&quot;date&quot;),z(&quot;date&quot;,&quot;D&quot;),N(&quot;D&quot;,Wc),N(&quot;DD&quot;,Wc,Sc),N(&quot;Do&quot;,function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),Q([&quot;D&quot;,&quot;DD&quot;],hd),Q(&quot;Do&quot;,function(a,b){b[hd]=q(a.match(Wc)[0],10)});var Dd=C(&quot;Date&quot;,!0);H(&quot;d&quot;,0,&quot;do&quot;,&quot;day&quot;),H(&quot;dd&quot;,0,0,function(a){return this.localeData().weekdaysMin(this,a)}),H(&quot;ddd&quot;,0,0,function(a){return this.localeData().weekdaysShort(this,a)}),H(&quot;dddd&quot;,0,0,function(a){return this.localeData().weekdays(this,a)}),H(&quot;e&quot;,0,0,&quot;weekday&quot;),H(&quot;E&quot;,0,0,&quot;isoWeekday&quot;),z(&quot;day&quot;,&quot;d&quot;),z(&quot;weekday&quot;,&quot;e&quot;),z(&quot;isoWeekday&quot;,&quot;E&quot;),N(&quot;d&quot;,Wc),N(&quot;e&quot;,Wc),N(&quot;E&quot;,Wc),N(&quot;dd&quot;,cd),N(&quot;ddd&quot;,cd),N(&quot;dddd&quot;,cd),R([&quot;dd&quot;,&quot;ddd&quot;,&quot;dddd&quot;],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),R([&quot;d&quot;,&quot;e&quot;,&quot;E&quot;],function(a,b,c,d){b[d]=q(a)});var Ed=&quot;Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday&quot;.split(&quot;_&quot;),Fd=&quot;Sun_Mon_Tue_Wed_Thu_Fri_Sat&quot;.split(&quot;_&quot;),Gd=&quot;Su_Mo_Tu_We_Th_Fr_Sa&quot;.split(&quot;_&quot;);H(&quot;H&quot;,[&quot;HH&quot;,2],0,&quot;hour&quot;),H(&quot;h&quot;,[&quot;hh&quot;,2],0,function(){return this.hours()%12||12}),Sb(&quot;a&quot;,!0),Sb(&quot;A&quot;,!1),z(&quot;hour&quot;,&quot;h&quot;),N(&quot;a&quot;,Tb),N(&quot;A&quot;,Tb),N(&quot;H&quot;,Wc),N(&quot;h&quot;,Wc),N(&quot;HH&quot;,Wc,Sc),N(&quot;hh&quot;,Wc,Sc),Q([&quot;H&quot;,&quot;HH&quot;],id),Q([&quot;a&quot;,&quot;A&quot;],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),Q([&quot;h&quot;,&quot;hh&quot;],function(a,b,c){b[id]=q(a),j(c).bigHour=!0});var Hd=/[ap]\.?m?\.?/i,Id=C(&quot;Hours&quot;,!0);H(&quot;m&quot;,[&quot;mm&quot;,2],0,&quot;minute&quot;),z(&quot;minute&quot;,&quot;m&quot;),N(&quot;m&quot;,Wc),N(&quot;mm&quot;,Wc,Sc),Q([&quot;m&quot;,&quot;mm&quot;],jd);var Jd=C(&quot;Minutes&quot;,!1);H(&quot;s&quot;,[&quot;ss&quot;,2],0,&quot;second&quot;),z(&quot;second&quot;,&quot;s&quot;),N(&quot;s&quot;,Wc),N(&quot;ss&quot;,Wc,Sc),Q([&quot;s&quot;,&quot;ss&quot;],kd);var Kd=C(&quot;Seconds&quot;,!1);H(&quot;S&quot;,0,0,function(){return~~(this.millisecond()/100)}),H(0,[&quot;SS&quot;,2],0,function(){return~~(this.millisecond()/10)}),H(0,[&quot;SSS&quot;,3],0,&quot;millisecond&quot;),H(0,[&quot;SSSS&quot;,4],0,function(){return 10*this.millisecond()}),H(0,[&quot;SSSSS&quot;,5],0,function(){return 100*this.millisecond()}),H(0,[&quot;SSSSSS&quot;,6],0,function(){return 1e3*this.millisecond()}),H(0,[&quot;SSSSSSS&quot;,7],0,function(){return 1e4*this.millisecond()}),H(0,[&quot;SSSSSSSS&quot;,8],0,function(){return 1e5*this.millisecond()}),H(0,[&quot;SSSSSSSSS&quot;,9],0,function(){return 1e6*this.millisecond()}),z(&quot;millisecond&quot;,&quot;ms&quot;),N(&quot;S&quot;,Xc,Rc),N(&quot;SS&quot;,Xc,Sc),N(&quot;SSS&quot;,Xc,Tc);var Ld;for(Ld=&quot;SSSS&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)N(Ld,$c);for(Ld=&quot;S&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)Q(Ld,Wb);var Md=C(&quot;Milliseconds&quot;,!1);H(&quot;z&quot;,0,0,&quot;zoneAbbr&quot;),H(&quot;zz&quot;,0,0,&quot;zoneName&quot;);var Nd=n.prototype;Nd.add=Ad,Nd.calendar=cb,Nd.clone=db,Nd.diff=ib,Nd.endOf=ub,Nd.format=mb,Nd.from=nb,Nd.fromNow=ob,Nd.to=pb,Nd.toNow=qb,Nd.get=F,Nd.invalidAt=Cb,Nd.isAfter=eb,Nd.isBefore=fb,Nd.isBetween=gb,Nd.isSame=hb,Nd.isValid=Ab,Nd.lang=Cd,Nd.locale=rb,Nd.localeData=sb,Nd.max=wd,Nd.min=vd,Nd.parsingFlags=Bb,Nd.set=F,Nd.startOf=tb,Nd.subtract=Bd,Nd.toArray=yb,Nd.toObject=zb,Nd.toDate=xb,Nd.toISOString=lb,Nd.toJSON=lb,Nd.toString=kb,Nd.unix=wb,Nd.valueOf=vb,Nd.year=td,Nd.isLeapYear=ia,Nd.weekYear=Fb,Nd.isoWeekYear=Gb,Nd.quarter=Nd.quarters=Jb,Nd.month=Y,Nd.daysInMonth=Z,Nd.week=Nd.weeks=na,Nd.isoWeek=Nd.isoWeeks=oa,Nd.weeksInYear=Ib,Nd.isoWeeksInYear=Hb,Nd.date=Dd,Nd.day=Nd.days=Pb,Nd.weekday=Qb,Nd.isoWeekday=Rb,Nd.dayOfYear=qa,Nd.hour=Nd.hours=Id,Nd.minute=Nd.minutes=Jd,Nd.second=Nd.seconds=Kd,
Nd.millisecond=Nd.milliseconds=Md,Nd.utcOffset=Na,Nd.utc=Pa,Nd.local=Qa,Nd.parseZone=Ra,Nd.hasAlignedHourOffset=Sa,Nd.isDST=Ta,Nd.isDSTShifted=Ua,Nd.isLocal=Va,Nd.isUtcOffset=Wa,Nd.isUtc=Xa,Nd.isUTC=Xa,Nd.zoneAbbr=Xb,Nd.zoneName=Yb,Nd.dates=aa(&quot;dates accessor is deprecated. Use date instead.&quot;,Dd),Nd.months=aa(&quot;months accessor is deprecated. Use month instead&quot;,Y),Nd.years=aa(&quot;years accessor is deprecated. Use year instead&quot;,td),Nd.zone=aa(&quot;moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779&quot;,Oa);var Od=Nd,Pd={sameDay:&quot;[Today at] LT&quot;,nextDay:&quot;[Tomorrow at] LT&quot;,nextWeek:&quot;dddd [at] LT&quot;,lastDay:&quot;[Yesterday at] LT&quot;,lastWeek:&quot;[Last] dddd [at] LT&quot;,sameElse:&quot;L&quot;},Qd={LTS:&quot;h:mm:ss A&quot;,LT:&quot;h:mm A&quot;,L:&quot;MM/DD/YYYY&quot;,LL:&quot;MMMM D, YYYY&quot;,LLL:&quot;MMMM D, YYYY h:mm A&quot;,LLLL:&quot;dddd, MMMM D, YYYY h:mm A&quot;},Rd=&quot;Invalid date&quot;,Sd=&quot;%d&quot;,Td=/\d{1,2}/,Ud={future:&quot;in %s&quot;,past:&quot;%s ago&quot;,s:&quot;a few seconds&quot;,m:&quot;a minute&quot;,mm:&quot;%d minutes&quot;,h:&quot;an hour&quot;,hh:&quot;%d hours&quot;,d:&quot;a day&quot;,dd:&quot;%d days&quot;,M:&quot;a month&quot;,MM:&quot;%d months&quot;,y:&quot;a year&quot;,yy:&quot;%d years&quot;},Vd=s.prototype;Vd._calendar=Pd,Vd.calendar=_b,Vd._longDateFormat=Qd,Vd.longDateFormat=ac,Vd._invalidDate=Rd,Vd.invalidDate=bc,Vd._ordinal=Sd,Vd.ordinal=cc,Vd._ordinalParse=Td,Vd.preparse=dc,Vd.postformat=dc,Vd._relativeTime=Ud,Vd.relativeTime=ec,Vd.pastFuture=fc,Vd.set=gc,Vd.months=U,Vd._months=md,Vd.monthsShort=V,Vd._monthsShort=nd,Vd.monthsParse=W,Vd.week=ka,Vd._week=ud,Vd.firstDayOfYear=ma,Vd.firstDayOfWeek=la,Vd.weekdays=Lb,Vd._weekdays=Ed,Vd.weekdaysMin=Nb,Vd._weekdaysMin=Gd,Vd.weekdaysShort=Mb,Vd._weekdaysShort=Fd,Vd.weekdaysParse=Ob,Vd.isPM=Ub,Vd._meridiemParse=Hd,Vd.meridiem=Vb,w(&quot;en&quot;,{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===q(a%100/10)?&quot;th&quot;:1===b?&quot;st&quot;:2===b?&quot;nd&quot;:3===b?&quot;rd&quot;:&quot;th&quot;;return a+c}}),a.lang=aa(&quot;moment.lang is deprecated. Use moment.locale instead.&quot;,w),a.langData=aa(&quot;moment.langData is deprecated. Use moment.localeData instead.&quot;,y);var Wd=Math.abs,Xd=yc(&quot;ms&quot;),Yd=yc(&quot;s&quot;),Zd=yc(&quot;m&quot;),$d=yc(&quot;h&quot;),_d=yc(&quot;d&quot;),ae=yc(&quot;w&quot;),be=yc(&quot;M&quot;),ce=yc(&quot;y&quot;),de=Ac(&quot;milliseconds&quot;),ee=Ac(&quot;seconds&quot;),fe=Ac(&quot;minutes&quot;),ge=Ac(&quot;hours&quot;),he=Ac(&quot;days&quot;),ie=Ac(&quot;months&quot;),je=Ac(&quot;years&quot;),ke=Math.round,le={s:45,m:45,h:22,d:26,M:11},me=Math.abs,ne=Ha.prototype;ne.abs=oc,ne.add=qc,ne.subtract=rc,ne.as=wc,ne.asMilliseconds=Xd,ne.asSeconds=Yd,ne.asMinutes=Zd,ne.asHours=$d,ne.asDays=_d,ne.asWeeks=ae,ne.asMonths=be,ne.asYears=ce,ne.valueOf=xc,ne._bubble=tc,ne.get=zc,ne.milliseconds=de,ne.seconds=ee,ne.minutes=fe,ne.hours=ge,ne.days=he,ne.weeks=Bc,ne.months=ie,ne.years=je,ne.humanize=Fc,ne.toISOString=Gc,ne.toString=Gc,ne.toJSON=Gc,ne.locale=rb,ne.localeData=sb,ne.toIsoString=aa(&quot;toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)&quot;,Gc),ne.lang=Cd,H(&quot;X&quot;,0,0,&quot;unix&quot;),H(&quot;x&quot;,0,0,&quot;valueOf&quot;),N(&quot;x&quot;,_c),N(&quot;X&quot;,bd),Q(&quot;X&quot;,function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),Q(&quot;x&quot;,function(a,b,c){c._d=new Date(q(a))}),a.version=&quot;2.10.6&quot;,b(Da),a.fn=Od,a.min=Fa,a.max=Ga,a.utc=h,a.unix=Zb,a.months=jc,a.isDate=d,a.locale=w,a.invalid=l,a.duration=Ya,a.isMoment=o,a.weekdays=lc,a.parseZone=$b,a.localeData=y,a.isDuration=Ia,a.monthsShort=kc,a.weekdaysMin=nc,a.defineLocale=x,a.weekdaysShort=mc,a.normalizeUnits=A,a.relativeTimeThreshold=Ec;var oe=a;return oe});</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2c64669f-f07e-4365-bf64-c559ace83004</id>
                <name>stopOnErrorCount</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122375</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to Stop a channel if it reaches a particular error count. 
	Also sends an alert message via another channel (this sends a sms via our monitoring system).

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function stopOnErrorCount(cid, errorCount) {
	var channelStatisticsController = Packages.com.mirth.connect.server.controllers.ChannelStatisticsController.getInstance();
	var channelStatusController = Packages.com.mirth.connect.server.controllers.ChannelStatusController.getInstance();
	var stats = channelStatisticsController.getStatistics(cid);
	// var numOfQueued = stats.queued;
	var numOfErrors = stats.error;

	if(numOfErrors &gt; errorCount )
	{
		//Stop Me
		channelStatusController.stopChannel(cid);
		//Alert msg sent to _SVHALERT channel
		var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
		var channelName = channelController.getDeployedChannelById(cid).getName();
		var alertmsg = &apos;mirth01 mirth_channel_status codeTemplate_stopOnErrorCount 0 &apos; +
					   &apos;channel &apos; + channelName + &apos; stopped&apos;;
		router.routeMessage(&apos;_SVHALERT&apos;, alertmsg);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>08044817-3504-4fc1-80ee-404870195151</id>
                <name>test</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122745</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>COMPILED_CODE</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.
	searchword
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function testfunc(arg1) {
	return arg1;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
            <name>WebPT-Mirth</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121602</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
                <name>Fix HL7v2 Node Order</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121804</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>df1b6a7b-66b6-4459-9f0f-93f609c71409</id>
            <name>WebPT-Redox</name>
            <revision>3</revision>
            <lastModified>
              <time>1690140133504</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>5e20fc6a-c25b-4511-b963-256d75779f51</id>
                <name>Financial Destinations</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122318</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Sets destination ids for Redox financial transactions.  This controls the destinations that the messages will be delivered to in redox.

	case &apos;&lt;tenantId&gt;&apos;:
	destinations.push({&quot;ID&quot; : &quot;&lt;destinationId&gt;&quot;,&quot;Name&quot; : &quot;&lt;destinationName&gt;&quot;});
	break;

	@param {Any} tenantId - 
	@return {String} return description
*/
function toRdxFinancialDest(tenantId) {
	var destinations = [];
	switch (tenantId){

		//TRAINING-STAGING
		case &apos;2689&apos;:
		destinations.push({&quot;ID&quot; : &quot;d16c734e-d2e4-4557-9b4d-26f64958c5aa&quot;,&quot;Name&quot; : &quot;Ohio Valley Surgical Hospital Destination (s)&quot;});
		break;

		//PRODUCTION
		case &apos;2300&apos;:
		destinations.push({&quot;ID&quot; : &quot;1b38bfcf-01dc-479f-be64-217a839d7c88&quot;,&quot;Name&quot; : &quot;cyrpess&quot;});
		break;

		case &apos;2411&apos;:
		destinations.push({&quot;ID&quot; : &quot;b40ab184-ebb4-4425-8838-e2d0666f990f&quot;,&quot;Name&quot; : &quot;pt_group_florida&gt;&quot;});
		break;

		case &apos;2362&apos;:
		destinations.push({&quot;ID&quot; : &quot;bd637339-f84b-4a24-976b-603794cfd2cb&quot;,&quot;Name&quot; : &quot;clntOrthoConnect&quot;});
		break;

		case &apos;2299&apos;:
		destinations.push({&quot;ID&quot; : &quot;f3731f91-5711-4781-ad9c-6717f2ee0b21&quot;,&quot;Name&quot; : &quot;NEPT&quot;});
		break;

		case &apos;2446&apos;:
		destinations.push({&quot;ID&quot; : &quot;db0b44ee-ab05-4054-bd18-8bc3b2771759&quot;,&quot;Name&quot; : &quot;Kentucky&quot;});
		break;

		case &apos;2480&apos;:
		destinations.push({&quot;ID&quot; : &quot;024afd22-22b6-4b09-91cb-d7356c7a85b2&quot;,&quot;Name&quot; : &quot;Knox&quot;});
		break;

		case &apos;2439&apos;:
		destinations.push({&quot;ID&quot; : &quot;303f9e77-27bb-4cd7-a8e9-58643064bb86&quot;,&quot;Name&quot; : &quot;Georgia&quot;});
		break;

		case &apos;2514&apos;:
		destinations.push({&quot;ID&quot; : &quot;56d1b308-0928-41a0-89f1-427970285ed7&quot;,&quot;Name&quot; : &quot;ProHealth Care (NY) Destination (p)&quot;});
		break;

		case &apos;2298&apos;:
		destinations.push({&quot;ID&quot; : &quot;9522b63c-c968-4d8b-bb1e-a978c23f20aa&quot;,&quot;Name&quot; : &quot;RYE&quot;});
		break;

		case &apos;2615&apos;:
		destinations.push({&quot;ID&quot; : &quot;50a33952-331f-41f9-9776-328dfb8dc279&quot;,&quot;Name&quot; : &quot;Rushmore&quot;});
		break;

		case &apos;2404&apos;:
		destinations.push({&quot;ID&quot; : &quot;e6a3ff46-c6e0-47e9-826f-1d294b254ee4&quot;,&quot;Name&quot; : &quot;MBJ&quot;});
		break;
	}	
	tmp[&apos;Meta&apos;][&apos;Destinations&apos;] = destinations;
}

/*
&apos;2300&apos;: &apos;1b38bfcf-01dc-479f-be64-217a839d7c88&apos;,  // Cyress Creek (MotionPT) production
        &apos;2411&apos;: &apos;b40ab184-ebb4-4425-8838-e2d0666f990f&apos;,  // Stark pt_group_florida (MotionPT) production
        &apos;2362&apos;: &apos;bd637339-f84b-4a24-976b-603794cfd2cb&apos;,  // Stark clntOrthoConnect (MotionPT) production
        &apos;2299&apos;: &apos;f3731f91-5711-4781-ad9c-6717f2ee0b21&apos;,  // NE PT Plus (MotionPT) Production
        &apos;2446&apos;: &apos;db0b44ee-ab05-4054-bd18-8bc3b2771759&apos;, // MotionPT Kentucky production
        &apos;2480&apos;: &apos;024afd22-22b6-4b09-91cb-d7356c7a85b2&apos;, //MotionPT Group Knox High TN
        &apos;2439&apos;: &apos;303f9e77-27bb-4cd7-a8e9-58643064bb86&apos;, // MotionPT Georgia Production
        //&apos;2514&apos;: &apos;0df3db06-ad21-41ab-be09-a2b4c7f0a530&apos;, // lntMOTION_SM_ProHealth_LakeSuccess_NY  - this one will become prohealth 56d1b308-0928-41a0-89f1-427970285ed7
        &apos;2514&apos;: &apos;56d1b308-0928-41a0-89f1-427970285ed7&apos;, // ProHealth Care (NY) Destination (p)  - this replaced lntMOTION_SM_ProHealth_LakeSuccess_NY
        &apos;2298&apos;: &apos;9522b63c-c968-4d8b-bb1e-a978c23f20aa&apos;,  // Rye PT (MotionPT) production
        &apos;2615&apos;: &apos;50a33952-331f-41f9-9776-328dfb8dc279&apos;, // Rushmore Prod
        &apos;2404&apos;: &apos;e6a3ff46-c6e0-47e9-826f-1d294b254ee4&apos;   // Missoula production

        */</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2cacaed5-ce50-410c-800b-002add8e56d0</id>
                <name>PatientAdmin Destinations</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122166</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Sets destination ids for Redox patientAdmin transactions.  This controls the destinations that the
	messages will be delivered to in redox.
	
	case &apos;&lt;tenantId&gt;&apos;: destinations.push({&quot;ID&quot; : &quot;&lt;destinationId&gt;&quot;,&quot;Name&quot; : &quot;&lt;destinationName&gt;&quot;});
	break;

	@param {Any} tenantId - 
	@return {String} return description
*/
function toRdxPatientAdminDest(tenantId) {
	var destinations = [];
	switch (tenantId){

		//TRAINING-STAGING
		case &apos;1567&apos;:
		destinations.push({&quot;ID&quot; : &quot;9f24fdcd-fbdb-453f-a9a9-5e650cb4384d&quot;,&quot;Name&quot; : &quot;Clinicient to Kure ADT Staging (s)&quot;});
		break;

		case &apos;2628&apos;:
		destinations.push({&quot;ID&quot; : &quot;b52c7ccc-e09a-4ba4-96f8-89c47325ffdc&quot;,&quot;Name&quot; : &quot;Clinicient to Referral MD Staging (s)&quot;});
		break;

		//PRODUCTION

		case &apos;1630&apos;:
		destinations.push({&quot;ID&quot; : &quot;2420e884-5cdb-4978-b52b-5096b7176e26&quot;,&quot;Name&quot; : &quot;Clinicient to Kure Prod (p)&quot;});
		break;

		case &apos;2514&apos;:
		destinations.push({&quot;ID&quot; : &quot;b801c1c9-abba-4cf9-b76a-02c68ae15980&quot;,&quot;Name&quot; : &quot;Referral MD (p)&quot;});
		break;
	
	}	
	msg[&apos;Meta&apos;][&apos;Destinations&apos;] = destinations;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>456ec6d4-292d-4921-af79-03ef6878cff1</id>
                <name>Rdx Meta Outbound</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121712</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Author:  Kirby Knight
	Description:  Ensures all non-production Mirth environments send outbound messages to the Clinicient Generic HL7 Inbound Redox Stanging environment 
	and sets prod or test enviornment specific variables 

	@return {String} return description
*/
function rdxMetaOutbound() {
	// convert date/time to ISO 8601 Format &quot;2018-02-19T17:19:16.947Z&quot;,
var d = new Date();
var n = d.toISOString();
msg[&apos;Meta&apos;][&apos;EventDateTime&apos;] = n;

//  Get environment information
var configController = com.mirth.connect.server.controllers.ControllerFactory.getFactory().createConfigurationController();
var serverSettings = configController.getServerSettings();
var envName = serverSettings.getEnvironmentName();
var serverName = serverSettings.getServerName();

//  All non production Mirth environments send only to the Redox Generic HL7 Enpoint
	if (envName != &apos;PROD&apos;){
		msg[&apos;Meta&apos;][&apos;Test&apos;] = true;
		msg[&apos;Meta&apos;][&apos;Destinations&apos;] = [];
	     msg[&apos;Meta&apos;][&apos;Destinations&apos;][0] = {};
	     msg[&apos;Meta&apos;][&apos;Destinations&apos;][0][&apos;ID&apos;] = &apos;2834ab9f-bca2-4b66-b9ff-64d47fb66187&apos;;
	     msg[&apos;Meta&apos;][&apos;Destinations&apos;][0][&apos;Name&apos;] = &apos;Clinicient Generic HL7 Inbound(s)&apos;;
	     msg[&apos;Meta&apos;][&apos;Destinations&apos;][0][&apos;Destination&apos;] = &apos;Redox&apos;;
	}else {
		msg[&apos;Meta&apos;][&apos;Test&apos;] = false;
	}

msg[&apos;Meta&apos;][&apos;Message&apos;] = {};
msg[&apos;Meta&apos;][&apos;Message&apos;][&apos;ID&apos;] = connectorMessage.getMessageId();
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>508a5968-422d-4da0-ae4b-a48a8bd74d40</id>
                <name>Rdx Response</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122248</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function requires no parameters.  Call this from the response step on the destination.
	It captures the respsone from Redox and puts a link to to the message in the Redox dashboard to the channelMap

	@return {String} return description
*/
function rdxResponse() {
	var myResponse = JSON.parse(response.getMessage());
	if (myResponse != null) {
		if ($co(&apos;responseStatusLine&apos;) == &apos;HTTP/1.1 200 OK&apos;){
		channelMap.put(&apos;rdxMsgId&apos;, myResponse.Meta.Message.ID.toString());
		channelMap.put(&apos;rdxMsgLink&apos;,&apos;https://dashboard.redoxengine.com/#/dashboard/organization/3260/message/message/&apos; + myResponse.Meta.Message.ID.toString());
	    }   
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>a7ad6a73-e5a3-49f0-bc4f-2cd89f749082</id>
            <name>WebPT-StaffID</name>
            <revision>2</revision>
            <lastModified>
              <time>1678715257100</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>14b7de16-de3e-4994-b123-b4d0d3d712aa</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>076d39da-7152-40db-91a1-1746167239e9</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5adcf0e4-782c-4e9d-a105-f67795fe6644</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>dd68390d-cb82-4e64-9a54-3d70708ed573</id>
                <name>ClinicientIdForProvider</name>
                <revision>2</revision>
                <lastModified>
                  <time>1688569845378</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function ClinicientIdForProvider(tenantId, Providers) {

	// Loop through each provider
	for each(Prov in Providers) {

		var AllProvider = msg[&apos;Visit&apos;][&apos;&apos; + Prov + &apos;&apos;];
		var ID = AllProvider.ID;
		var IdType = AllProvider.IDType
		var Name = AllProvider.FirstName + &apos;&apos; + AllProvider.LastName;  // Concatinate first and last name of the providers
		var concatTenantId = &apos;g_staff_&apos; + tenantId;	// Concatinate TenetID with g_staff to find respective globalmap for the message

		// Checking for NULL value in ID field or First &amp; Last name field
		if ((ID != null &amp;&amp; ID != &apos;&apos;) || (Name != &apos;nullnull&apos; &amp;&amp; Name != &apos;&apos;)) {
			var myObject = FindLookupValueWithNPI_FirstLastName(concatTenantId, ID, Name, IdType);		
			
			// Checking if the NPI/External/FirstLastName values are exist and matches with globalmap values then replace ID with StaffID and IDType with CLNTID
			if (Object.keys(myObject).length &gt; 0) {
				AllProvider.ID = myObject.StaffID;
				AllProvider.IDType = &quot;CLNTID&quot;;
			}
		}
	}

	return msg;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>9b701353-4ed6-48ff-8143-d1b8e8315ff1</id>
                <name>FindLookupValueWithNPI_FirstLastName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122106</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithNPI_FirstLastName ( LookupGlobalMapName, ID, NAME, IdType) {
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       IdType - Based on the IdType, it will decide to check NPI or Exteernal ID in look-up
       ID - The NPI/External value to look up in GlobalMap
       NAME - The first and last name will be concatinate and try to match if the NPI is not exists in look-up

    RETURNS:
       An object containing the replacement value and associated Codetype

    REMARKS: 
    ********************************/
	// Retrieve the array with lookup objects from the globalmap and search for the matching value
	var arr = globalMap.get(LookupGlobalMapName);
	var obj = new Object();

	if(IdType==&quot;NPI&quot; &amp;&amp; (ID != null &amp;&amp; ID != &apos;&apos;)) {
			for each ( item in arr ) {
				var pattern=new RegExp(&quot;^&quot; + item.NPI + &quot;$&quot;);
				if ( pattern.test(ID )) {
						obj = item;
						break;
					} 
			}
	}else if (IdType==&quot;EXTERNAL&quot; &amp;&amp; (ID != null &amp;&amp; ID != &apos;&apos;)) {
		for each ( item in arr ) {
			var pattern=new RegExp(&quot;^&quot; + item.EXTID + &quot;$&quot;);
			if ( pattern.test(ID )) {
				obj = item;
				break;
			}
		}
	}else{
		for each ( item in arr ) {
			  var pattern=new RegExp(&quot;^&quot; +  item.NAME  + &quot;$&quot;);
			  if( pattern.test(NAME )) {
			  	 obj = item;
			      break;
			  }
		}
	}
      // Return the object we found or created
	return obj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c8259ee9-bf4c-45b6-a9fc-489fd92a6865</id>
                <name>getId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123189</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
Choose the value based on Key coming from channel to choose idType
*/
function getId(key) {

		lookup = globalMap.get(&apos;g_idTypeWithTenant&apos;)
		return lookup.get(key);
		
		}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>819f6d32-54e0-414b-a99b-4f126ec16fb6</id>
                <name>idTypePopulateLookup</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123393</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
This code template will query the database to and load the values in globalMap
To execute on database this code template will get sqlQuery from the deploy script of the channel: TO_Redox_CH
Once it get the result, it&apos;ll generate key-value lookup and stores on globalMap
 //IOP-1450, IOP-1595, IOP-1618
**/

function idTypePopulateLookup(sqlQuery, globalMapName) {
    logger.info(&apos;Loading lookup table values in the deploy script: &apos; + globalMapName);

    var rs = executeSharedDBStatementTranslationsCh(sqlQuery, true);
    var mp = new java.util.HashMap();
    while (rs.next()) {
        key = rs.getString(&apos;input_key&apos;);
        value = rs.getString(&apos;output_value&apos;);
        mp.put(key, value);

    }
    globalMap.put(globalMapName, mp);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c978eb4b-9481-4a7d-88d8-fa5f9a4433fb</id>
                <name>selectIdTypeNotesProvider</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121845</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
This code template is only for Notes transaction where we have Provider under the Note node

@param {String} msg - outbound msg
@param {String} result - key(needs to be in db table)

@return {String} return msg
 */

function updateNotesJSON(msg, idType) {
	var objID = getStaffIDType(msg[&apos;Note&apos;][&apos;Provider&apos;][&apos;Identifiers&apos;], idType);
	
	if (objID) {
		msg[&apos;Note&apos;][&apos;Provider&apos;].ID = objID.ID;
		msg[&apos;Note&apos;][&apos;Provider&apos;].IDType = objID.IDType;
	}
	
	delete msg[&apos;Note&apos;][&apos;Provider&apos;][&apos;Identifiers&apos;];
	
	for each(notification in msg[&apos;Note&apos;][&apos;Notifications&apos;]) {
		objID = getStaffIDType(notification[&apos;Identifiers&apos;], idType);
		
		if (objID) {
			notification.ID = objID.ID;
			notification.IDType = objID.IDType;
		}
		
		delete notification[&apos;Identifiers&apos;];
	}
	
	return msg;
}

function selectIdTypeNotesProvider(msg, result) {
	return (!result || !isStaffIDTypeValid(result)) ? updateNotesJSON(msg, &quot;NPI&quot;) : updateNotesJSON(msg, result);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>9d0043fe-c6a0-48e9-9e03-20cd12c0de59</id>
                <name>selectIdTypePerformersOrderingProviders</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476123422</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
This code template is only for financial transaction where we have Ordering Provider and Performence
There will not be an error, if we dont have either one node from ordering or performence provider in outbound msgs
This code will decide which IdType will send out based on key-value pair

@param {String} msg - outbound msg
@param {String} result - key(needs to be in db table)

@return {String} return msg
 */
function updateFinancialJSON(msg, idType) {
	var objID = null;
	for each(transaction in msg[&apos;Transactions&apos;]) {
		for each(performer in transaction[&apos;Performers&apos;]) {
			objID = getStaffIDType(performer[&apos;Identifiers&apos;], idType);
			
			if (objID) {
				performer.ID = objID.ID;
				performer.IDType = objID.IDType;
			}
			delete performer[&apos;Identifiers&apos;];	
		}
		
		for each(ordProvider in transaction[&apos;OrderingProviders&apos;]) {
			objID = getStaffIDType(ordProvider[&apos;Identifiers&apos;], idType);
			
			if (objID) {
				ordProvider.ID = objID.ID;
				ordProvider.IDType = objID.IDType;
			}
			
			delete ordProvider[&apos;Identifiers&apos;];
		}
	}
	return msg;
}

function selectIdTypePerformersOrderingProviders(msg, result) {
	return (!result || !isStaffIDTypeValid(result)) ? updateFinancialJSON(msg, &quot;NPI&quot;) : updateFinancialJSON(msg, result);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>0c7dd983-6895-4bdc-9d57-218459a15f30</id>
                <name>selectIdTypeVisitProvider</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122928</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
This code template is for Notes, Scheduling, PatientAdmin and BetterPt transaction where we have Admitting, Attending, Consulting and Visit providers
There will not be an error, if we dont have or have any provider nodes from visit
This code will decide which IdType will send out based on key-value pair

@param {String} msg - outbound msg
@param {String} result - key(needs to be in db table)

@return {String} return msg

**/
// This code will remove the unwanted IDType nodes and pass required one

function updatePushSlotsJSON(msg, idType) {
	for each(slot in msg[&apos;Slots&apos;]) {
		var objID = getStaffIDType(slot[&apos;Provider&apos;][&apos;Identifiers&apos;], idType);
		
		if (objID) {
		  slot[&apos;Provider&apos;].ID = objID.ID;
            slot[&apos;Provider&apos;].IDType = objID.IDType
        	}
        	delete slot[&apos;Provider&apos;][&apos;Identifiers&apos;];
	}
	return msg;
}

function updateRealTimeFeeds(msg, idType) {
	if (msg[&apos;Visit&apos;]) {
		var arrProviders = [&apos;AdmittingProvider&apos;, &apos;AttendingProvider&apos;, &apos;ConsultingProvider&apos;, &apos;VisitProvider&apos;, &apos;ReferringProvider&apos;];
		
		for each(providerType in arrProviders) {
			if (msg[&apos;Visit&apos;][providerType]) {
				var objID = getStaffIDType(msg[&apos;Visit&apos;][providerType][&apos;Identifiers&apos;], idType);
				
				if (objID) {
					msg[&apos;Visit&apos;][providerType].ID = objID.ID;
					msg[&apos;Visit&apos;][providerType].IDType = objID.IDType;
				}
				delete msg[&apos;Visit&apos;][providerType][&apos;Identifiers&apos;];
        		}
        	}
    }
    return msg;
}

function selectIdTypeVisitProvider(msg, result) {
	if (msg[&apos;Meta&apos;][&apos;EventType&apos;] == &quot;PushSlots&quot;) {
		return (!result || !isStaffIDTypeValid(result)) ? updatePushSlotsJSON(msg, &quot;NPI&quot;) : updatePushSlotsJSON(msg, result);
    } else {
		return (!result || !isStaffIDTypeValid(result)) ? updateRealTimeFeeds(msg, &quot;NPI&quot;) : updateRealTimeFeeds(msg, result);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b47460fc-d167-45a6-9add-c216f8ba56c0</id>
                <name>Validate Staff ID Type</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476121883</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Metohds for Staff ID validation for Redox Outbound Interfaces
	
	@param {Array} arrIdentifiers - array with Staff Identifiers from Outbound JSON Message
	@param {String} idType - desired ID Type
	@return {Object} return boolean value if identifier type exists in array or not
*/
function getStaffIDType(arrIdentifiers, idType) {
	if (!arrIdentifiers)
		return null;

	for each(objID in arrIdentifiers) {
		if (objID.IDType == idType) {
			return objID;
		}
	}
	
	return null;
}

/**
	Check if provided ID Type is valid or not
	
	@param {String} idType - desired ID Type
	@return {Bool} return boolean value if provided ID Type is valid or not
*/

function isStaffIDTypeValid(idType) {
	for each(loopIDtype in [&apos;NPI&apos;, &apos;Other&apos;, &apos;CLNT&apos;]) {
		if (loopIDtype == idType)
			return true;
	}
	return false;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>35f4c250-08b4-4e42-8e60-f85aa98dfe50</id>
            <name>WebPT-Translations</name>
            <revision>3</revision>
            <lastModified>
              <time>1690140133521</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
              <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
              <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
              <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
              <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
              <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
              <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
              <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
              <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
              <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
              <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
              <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
              <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
              <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
              <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
              <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
              <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
              <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
              <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
              <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
              <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
              <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
              <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
              <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
              <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
              <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
              <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
              <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
              <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
              <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
              <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
              <string>72383579-097e-4205-b030-ce272c90b835</string>
              <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
              <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
              <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
              <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
              <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
              <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
              <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
              <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
              <string>a757905f-315a-43be-a624-38780a3d7574</string>
              <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
              <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
              <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
              <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
              <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
              <string>38e80069-5a80-4483-9a22-02c928973719</string>
              <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
              <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
              <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
              <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
              <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
              <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
              <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
              <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
              <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
              <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
              <string>c65024ed-4660-4423-9636-cb6309cae138</string>
              <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
              <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
              <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
              <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
              <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
              <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
              <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
              <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
              <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
              <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
              <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
              <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
              <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
              <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
              <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
              <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
              <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
              <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
              <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
              <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
              <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
              <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
              <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>be8f057b-2640-4613-b2e7-83326c59169c</id>
                <name>AddZeros</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122826</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function addZeroes(num) {
   return num.toLocaleString(&quot;en&quot;, {useGrouping: false, minimumFractionDigits: 2})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>51913864-7702-489a-b7c6-54992c12b19d</id>
                <name>FindLookupValueWithDefault</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122218</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithDefault ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        //obj.LeftValue = LeftValue;
        //obj.RightValue1 = DefaultValue1;
        //obj.RightValue2   = DefaultValue2; 
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);
            var result = pattern.test(LeftValue );

            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c276be9f-c8f1-4dea-8df0-e000c6745271</id>
                <name>FindLookupValueWithInsuranceId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122080</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function FindLookupValueWithInsuranceId ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);             
            var result = pattern.test(LeftValue );
	
            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7d746da2-58c6-44eb-ad5c-c5bfd0a0c537</id>
                <name>UseExternalProblemID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122349</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalProblemID() {

if ([&apos;2804&apos;, &apos;2822&apos;].indexOf($(&apos;tenantId&apos;) + &apos;&apos;) &gt; -1) {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitexternalproblemid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitaccountnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>07730e85-7f30-4ddf-90a4-78183c896ab5</id>
                <name>UseExternalVisitID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1678476122192</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalVisitID() {
	
if ($(&apos;tenantId&apos;)  == &apos;9999&apos; ) {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitexternalvisitid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitvisitnumber&apos;].toString();
}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
        <dependencyIds>
          <string>5249eebe-7cb7-4dda-8dbf-f71e7a4dcdd0</string>
        </dependencyIds>
        <channelTags>
          <channelTag>
            <id>22c4effa-8907-4940-8efa-825b171160d1</id>
            <name>Financial</name>
            <channelIds>
              <string>2770d156-7215-47bd-80f8-c30d21432533</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>255</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>25f2ad01-6a18-40fa-8e17-e0ccc168f377</id>
            <name>Redox</name>
            <channelIds>
              <string>68bf3534-33ff-4ccd-9977-92f4e4428fae</string>
              <string>2770d156-7215-47bd-80f8-c30d21432533</string>
              <string>36843e97-9414-498b-8d99-ee3a2b109f74</string>
              <string>8491c1b3-1b21-46f7-813e-a609ec93570d</string>
              <string>e2535b15-7340-40ba-b0b2-ccc869a5f6b3</string>
              <string>ddebd86f-bbf1-423f-a8e0-96d69b2728fb</string>
              <string>f7bf8d66-7a03-4801-bb0e-aa126de45f15</string>
              <string>7807d5c5-bb90-44e1-8f56-28afc7bc94ff</string>
              <string>622882eb-74b5-4493-9788-8d48501a8131</string>
              <string>5249eebe-7cb7-4dda-8dbf-f71e7a4dcdd0</string>
              <string>264dd7c1-fa31-4bdf-a4cd-2111a67f5a43</string>
              <string>9d52df32-73ec-4075-be50-d1fe5c95d3ea</string>
              <string>77ca302e-75d3-4b33-b494-af8ec595cfae</string>
              <string>a6001cfb-c07d-48c7-a5d1-32df43b63bb5</string>
              <string>ab4a6a21-ad72-459e-9caf-fe1766a6badf</string>
              <string>e0474c9c-f044-42e9-a947-81aa2a50a7da</string>
              <string>30fb7d23-07f8-40b2-8116-5e77067fecfb</string>
              <string>b1d590b2-ae82-4f26-9cbd-ee01d9f43831</string>
              <string>3b6892fb-1f51-4779-8f6f-dc5ab7bc50a4</string>
              <string>cce4dbca-8e65-416f-84e0-64016183b7fc</string>
              <string>e1c6f2ad-edfe-46d1-985b-7ca9bcefb5cf</string>
              <string>ec935449-11b9-4795-a403-f571cc769d4e</string>
              <string>16773d99-557b-49b6-b34a-1f033b0d8a79</string>
              <string>71893368-e689-4c2b-a501-13136b0130a7</string>
              <string>57c92567-3510-4f04-911b-2e03c75ee098</string>
              <string>23c13f4d-07db-4410-911d-c695bfb242b0</string>
              <string>244b0201-9dec-4915-b0ca-81c93f46ff5f</string>
              <string>8e136688-51ef-4035-9c78-b54e8d733e04</string>
              <string>ef69bf91-d539-4cde-b306-5c2d79acb6a3</string>
              <string>f86f5237-c755-4474-8bd9-da64d52deee9</string>
              <string>e1d14276-ef82-4b13-bf87-3ac62e039b09</string>
              <string>bee97fe2-ea62-4bcd-9fce-c0ffed25c632</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>907bd0fc-fbc0-47da-8245-cf4f40116631</string>
              <string>711c51ab-c564-43f0-b303-749c8ae7922f</string>
              <string>80606b40-55cd-4e81-85ad-a0dbdcce694a</string>
              <string>231c11f2-d401-4b04-adbe-914463e4ebd5</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
          <channelTag>
            <id>0edc5f1d-e89e-4ce5-a110-12b06f83c00e</id>
            <name>TO</name>
            <channelIds>
              <string>2770d156-7215-47bd-80f8-c30d21432533</string>
              <string>cce4dbca-8e65-416f-84e0-64016183b7fc</string>
              <string>7807d5c5-bb90-44e1-8f56-28afc7bc94ff</string>
              <string>4d32e141-9cb9-4840-9574-cc33b42490eb</string>
              <string>5249eebe-7cb7-4dda-8dbf-f71e7a4dcdd0</string>
              <string>16773d99-557b-49b6-b34a-1f033b0d8a79</string>
              <string>57c92567-3510-4f04-911b-2e03c75ee098</string>
              <string>3ea96361-6339-406d-964c-0a5f48b148bc</string>
              <string>244b0201-9dec-4915-b0ca-81c93f46ff5f</string>
              <string>8e136688-51ef-4035-9c78-b54e8d733e04</string>
              <string>ef69bf91-d539-4cde-b306-5c2d79acb6a3</string>
              <string>77ca302e-75d3-4b33-b494-af8ec595cfae</string>
              <string>ab4a6a21-ad72-459e-9caf-fe1766a6badf</string>
              <string>dd011290-8631-41c5-8b21-054e92ae3b97</string>
              <string>3792b059-e098-436c-81fe-23502ef5042b</string>
              <string>278c028f-5f94-4448-a895-a130ed4111e3</string>
            </channelIds>
            <backgroundColor>
              <red>255</red>
              <green>0</green>
              <blue>0</blue>
              <alpha>255</alpha>
            </backgroundColor>
          </channelTag>
        </channelTags>
      </exportData>
    </channel>
  </channels>
</channelGroup>