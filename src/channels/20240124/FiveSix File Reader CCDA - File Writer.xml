<channel version="4.0.0">
  <id>c65d1ffa-65af-4ee8-803a-2f32b201889d</id>
  <nextMetaDataId>2</nextMetaDataId>
  <name>FiveSix File Reader CCDA - File Writer</name>
  <description></description>
  <revision>1</revision>
  <sourceConnector version="4.0.0">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.file.FileReceiverProperties" version="4.0.0">
      <pluginProperties/>
      <pollConnectorProperties version="4.0.0">
        <pollingType>INTERVAL</pollingType>
        <pollOnStart>true</pollOnStart>
        <pollingFrequency>5000</pollingFrequency>
        <pollingHour>0</pollingHour>
        <pollingMinute>0</pollingMinute>
        <cronJobs/>
        <pollConnectorPropertiesAdvanced>
          <weekly>true</weekly>
          <inactiveDays>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
          </inactiveDays>
          <dayOfMonth>1</dayOfMonth>
          <allDay>true</allDay>
          <startingHour>8</startingHour>
          <startingMinute>0</startingMinute>
          <endingHour>17</endingHour>
          <endingMinute>0</endingMinute>
        </pollConnectorPropertiesAdvanced>
      </pollConnectorProperties>
      <sourceConnectorProperties version="4.0.0">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <scheme>FILE</scheme>
      <host>C:/HL7/CCDA/in</host>
      <fileFilter>*.xml</fileFilter>
      <regex>false</regex>
      <directoryRecursion>false</directoryRecursion>
      <ignoreDot>true</ignoreDot>
      <anonymous>true</anonymous>
      <username>anonymous</username>
      <password>anonymous</password>
      <timeout>10000</timeout>
      <secure>true</secure>
      <passive>true</passive>
      <validateConnection>true</validateConnection>
      <afterProcessingAction>DELETE</afterProcessingAction>
      <moveToDirectory></moveToDirectory>
      <moveToFileName></moveToFileName>
      <errorReadingAction>DELETE</errorReadingAction>
      <errorResponseAction>AFTER_PROCESSING</errorResponseAction>
      <errorMoveToDirectory></errorMoveToDirectory>
      <errorMoveToFileName></errorMoveToFileName>
      <checkFileAge>true</checkFileAge>
      <fileAge>1000</fileAge>
      <fileSizeMinimum>0</fileSizeMinimum>
      <fileSizeMaximum></fileSizeMaximum>
      <ignoreFileSizeMaximum>true</ignoreFileSizeMaximum>
      <sortBy>date</sortBy>
      <binary>false</binary>
      <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
    </properties>
    <transformer version="4.0.0">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
          <name>Call getClinicalDocument -&gt; Set Document Channel Map variables</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>/* getPatientRole to set ChannelMap variables */
var debug= 0
var objClinDocInfo= getClinicalDocumentInfo(msg);
channelMap.put(&apos;objClinDocInfo&apos;,objClinDocInfo);

/*
//channelMap.put(&quot;patientId&quot;,getPatientRole.patientId);
if (typeof objClinDocInfo.extension !== &apos;undefined&apos;) {
	channelMap.put(&apos;extension&apos;, objClinDocInfo.extension.toString());
	if (debug&gt;0) { logger.error(&quot;extension: &quot;+objClinDocInfo.extension.toString()); }
} else { channelMap.put(&quot;extension&quot;, &quot;&quot;); }

if (typeof objClinDocInfo.root !== &apos;undefined&apos;) {
	channelMap.put(&apos;root&apos;,objClinDocInfo.root.toString());
	if (debug&gt;0) { logger.error(&quot;root: &quot;+objClinDocInfo.root.toString());	}
} else { channelMap.put(&quot;root&quot;, &quot;&quot;); }
*/
if ((typeof objClinDocInfo.root !== &apos;undefined&apos;) &amp;&amp; (typeof objClinDocInfo.extension !== &apos;undefined&apos;)) {
	channelMap.put(&apos;documentId&apos;,objClinDocInfo.root.toString()+&quot;.&quot;+objClinDocInfo.extension.toString());
	if (debug&gt;0) { logger.error(&quot;documentId: &quot;+objClinDocInfo.root.toString()+&quot;:&quot;+objClinDocInfo.documentId.toString()); }	
}  else if ((typeof objClinDocInfo.root === &apos;undefined&apos;) &amp;&amp; (typeof objClinDocInfo.extension !== &apos;undefined&apos;)) {
	channelMap.put(&apos;documentId&apos;,objClinDocInfo.extension.toString());
	if (debug&gt;0) { logger.error(&quot;documentId: &quot;+objClinDocInfo.documentId.toString()); }		
}  else if ((typeof objClinDocInfo.root !== &apos;undefined&apos;) &amp;&amp; (typeof objClinDocInfo.extension === &apos;undefined&apos;)) {
	channelMap.put(&apos;documentId&apos;,objClinDocInfo.root.toString());
	if (debug&gt;0) { logger.error(&quot;documentId: &quot;+objClinDocInfo.root.toString()); }		
} else { channelMap.put(&quot;documentId&quot;, currentDate_yyyyMMddhhmmss()); }

if (typeof objClinDocInfo.code !== &apos;undefined&apos;) {
	channelMap.put(&apos;documentCode&apos;, objClinDocInfo.code.toString());
	if(debug&gt;0) { logger.error(&quot;documentCode: &quot;+objClinDocInfo.code.toString()); }
} else { channelMap.put(&quot;documentCode&quot;, &quot;&quot;); }

if (typeof objClinDocInfo.codeSystemOid !== &apos;undefined&apos;) {
	channelMap.put(&apos;documentCodeSystemOid&apos;,objClinDocInfo.codeSystemOid.toString());
	if(debug&gt;0) { logger.error(&quot;documentCodeSystemOid: &quot;+objClinDocInfo.codeSystemOid.toString());	}
} else { channelMap.put(&quot;documentCodeSystemOid&quot;, &quot;&quot;); }

if (typeof objClinDocInfo.codeSystemName !== &apos;undefined&apos;) {
	channelMap.put(&apos;documentCodeSystem&apos;,objClinDocInfo.codeSystemName.toString());
	if(debug&gt;0) { logger.error(&quot;documentCodeSystem: &quot;+objClinDocInfo.codeSystemName.toString()); }
} else { channelMap.put(&quot;documentCodeSystem&quot;, &quot;&quot;); }

if (typeof objClinDocInfo.displayName !== &apos;undefined&apos;) {
	channelMap.put(&apos;documentCodeDisplayName&apos;,objClinDocInfo.displayName.toString());
	if(debug&gt;0) { logger.error(&quot;documentCodeDisplayName: &quot;+objClinDocInfo.displayName.toString()); }
} else { channelMap.put(&quot;documentCodeDisplayName&quot;, &quot;&quot;); }

if (typeof objClinDocInfo.title !== &apos;undefined&apos;) {
	channelMap.put(&apos;documentTitle&apos;,objClinDocInfo.title.toString());
	if(debug&gt;0) { logger.error(&quot;documentTitle: &quot;+objClinDocInfo.title.toString()); }
} else { channelMap.put(&quot;documentTitle&quot;, &quot;&quot;); }

if (typeof objClinDocInfo.creationTime !== &apos;undefined&apos;) {
	channelMap.put(&apos;documentCreationTime&apos;,objClinDocInfo.creationTime.toString());
	if(debug&gt;0) { logger.error(&quot;documentCreationTime: &quot;+objClinDocInfo.creationTime.toString()); }
} else { channelMap.put(&quot;documentCreationTime&quot;, &quot;&quot;); }

if (typeof objClinDocInfo.confCode !== &apos;undefined&apos;) {
	channelMap.put(&apos;confCode&apos;,objClinDocInfo.confCode.toString());
	if(debug&gt;0) { logger.error(&quot;confCode: &quot;+objClinDocInfo.confCode.toString()); }
} else { channelMap.put(&quot;confCode&quot;, &quot;&quot;); }

if (typeof getHL7v3Confidentiality(objClinDocInfo.confCode.toString()).displayName !== &apos;undefined&apos;) {
	channelMap.put(&apos;confCodeDisplayName&apos;,getHL7v3Confidentiality(objClinDocInfo.confCode.toString()).displayName.toString());
	if(debug&gt;0) { logger.error(&quot;confCodeDisplayName: &quot;+getHL7v3Confidentiality(objClinDocInfo.confCode.toString()).displayName.toString()); }
} else { channelMap.put(&quot;confCodeDisplayName&quot;, &quot;&quot;); }

if (typeof objClinDocInfo.confCodeSystemOid !== &apos;undefined&apos;) {
	channelMap.put(&apos;confCodeSystemOid&apos;, objClinDocInfo.confCodeSystemOid.toString());
	if(debug&gt;0) { logger.error(&quot;confCodeSystemOid: &quot;+objClinDocInfo.confCodeSystemOid.toString()); }
} else { channelMap.put(&quot;confCodeSystemOid&quot;, &quot;&quot;); }

if (typeof objClinDocInfo.languageCode !== &apos;undefined&apos;) {
	channelMap.put(&apos;languageCode&apos;, objClinDocInfo.languageCode.toString());
	if(debug&gt;0) { logger.error(&quot;languageCode: &quot;+objClinDocInfo.languageCode.toString()); }
} else { channelMap.put(&quot;languageCode&quot;, &quot;&quot;); }</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
          <name>Call getPatientRole -&gt; Set Patient Channel Map variables</name>
          <sequenceNumber>1</sequenceNumber>
          <enabled>true</enabled>
          <script>/* getPatientRole to set ChannelMap variables */
var debug= 0
var objPatientRole= getPatientRole(msg);
channelMap.put(&apos;objPatientRole&apos;,objPatientRole);

if (typeof objPatientRole.patientId !== &apos;undefined&apos;) {
	channelMap.put(&quot;patientId&quot;,objPatientRole.patientId);
	if(debug&gt;0) { logger.error(&quot;patientId: &quot;+objPatientRole.patientId); }
} else { channelMap.put(&quot;patientId&quot;, &quot;&quot;); }

if (typeof objPatientRole.root !== &apos;undefined&apos;) {
	channelMap.put(&quot;patientIdRootOid&quot;,objPatientRole.root);
	if(debug&gt;0) { logger.error(&quot;localAssigningAuthority: &quot;+objPatientRole.root); }
} else { channelMap.put(&quot;patientIdRootOid&quot;, &quot;&quot;); }
/*
if (typeof getXdsSourcePatientInfo(objPatientRole) !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientInfo&quot;,getXdsSourcePatientInfo(objPatientRole));
	if(debug&gt;0) { logger.error(&quot;sourcePatientId: &quot;+getXdsSourcePatientId(objPatientRole)); }
}
*/
// left off here - 2018-01-30 10:17 CT

// 2018-02-01 12:52 JER - Re-added the set of sourcePatientId channelMap variable
if (typeof getXdsSourcePatientId(objPatientRole) !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientId&quot;,getXdsSourcePatientId(objPatientRole));
	if(debug&gt;0) { logger.error(&quot;sourcePatientId: &quot;+getXdsSourcePatientId(objPatientRole).toString()); }
} else { channelMap.put(&quot;sourcePatientId&quot;, &quot;&quot;); }

if (typeof getXdsSourcePatientInfo(objPatientRole).pid3 !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientInfo_pid3&quot;,getXdsSourcePatientInfo(objPatientRole).pid3);
	if(debug&gt;0) { logger.error(&quot;sourcePatientInfo_pid3: &quot;+getXdsSourcePatientInfo(objPatientRole).pid3.toString()); }
} else { channelMap.put(&quot;sourcePatientInfo_pid3&quot;, &quot;&quot;); }

if (typeof getXdsSourcePatientInfo(objPatientRole).pid5 !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientInfo_pid5&quot;,getXdsSourcePatientInfo(objPatientRole).pid5);
	if(debug&gt;0) { logger.error(&quot;sourcePatientInfo_pid5: &quot;+getXdsSourcePatientInfo(objPatientRole).pid5.toString()); }
} else { channelMap.put(&quot;sourcePatientInfo_pid5&quot;, &quot;&quot;); }

if (typeof getXdsSourcePatientInfo(objPatientRole).pid7 !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientInfo_pid7&quot;,getXdsSourcePatientInfo(objPatientRole).pid7);
	if(debug&gt;0) { logger.error(&quot;sourcePatientInfo_pid7: &quot;+getXdsSourcePatientInfo(objPatientRole).pid7.toString()); }
} else { channelMap.put(&quot;sourcePatientInfo_pid7&quot;, &quot;&quot;); }

if (typeof getXdsSourcePatientInfo(objPatientRole).pid8 !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientInfo_pid8&quot;,getXdsSourcePatientInfo(objPatientRole).pid8);
	if(debug&gt;0) { logger.error(&quot;sourcePatientInfo_pid8: &quot;+getXdsSourcePatientInfo(objPatientRole).pid8.toString()); }
} else { channelMap.put(&quot;sourcePatientInfo_pid8&quot;, &quot;&quot;); }

if (typeof getXdsSourcePatientInfo(objPatientRole).pid11 !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientInfo_pid11&quot;,getXdsSourcePatientInfo(objPatientRole).pid11);
	if(debug&gt;0) { logger.error(&quot;sourcePatientInfo_pid11: &quot;+getXdsSourcePatientInfo(objPatientRole).pid11.toString()); }
} else { channelMap.put(&quot;sourcePatientInfo_pid11&quot;, &quot;&quot;); }

if (typeof getXdsSourcePatientInfo(objPatientRole).pid13 !== &apos;undefined&apos;) {
	channelMap.put(&quot;sourcePatientInfo_pid13&quot;,getXdsSourcePatientInfo(objPatientRole).pid13);
	if(debug&gt;0) { logger.error(&quot;sourcePatientInfo_pid13: &quot;+getXdsSourcePatientInfo(objPatientRole).pid13.toString()); }
} else { channelMap.put(&quot;sourcePatientInfo_pid13&quot;, &quot;&quot;); }

if (typeof objPatientRole.lastName !== &apos;undefined&apos;) {
	channelMap.put(&quot;lastName&quot;,objPatientRole.lastName);
	if(debug&gt;0) { logger.error(&quot;objPatientRole.lastName: &quot;+objPatientRole.lastName.toString()); }
} else { channelMap.put(&quot;lastName&quot;, &quot;&quot;); }

if (typeof objPatientRole.firstName !== &apos;undefined&apos;) {
	channelMap.put(&quot;firstName&quot;,objPatientRole.firstName);
	if(debug&gt;0) { logger.error(&quot;objPatientRole.firstName: &quot;+objPatientRole.firstName.toString()); }
} else { channelMap.put(&quot;firstName&quot;, &quot;&quot;); }

// channelMap.put(&quot;gender&quot;,getHL7v3AdministrativeGender(objPatientRole.gender).displayName.toString());
if (typeof objPatientRole.gender !== &apos;undefined&apos;) {
	channelMap.put(&quot;gender&quot;,objPatientRole.gender);
	if(debug&gt;0) { logger.error(&quot;objPatientRole.gender: &quot;+objPatientRole.gender.toString()); }
} else { channelMap.put(&quot;gender&quot;, &quot;&quot;); }

if (typeof objPatientRole.dateOfBirth !== &apos;undefined&apos;) {
	channelMap.put(&quot;dateOfBirth&quot;,objPatientRole.dateOfBirth);
	if(debug&gt;0) { logger.error(&quot;objPatientRole.dateOfBirth: &quot;+objPatientRole.dateOfBirth.toString()); }
} else { channelMap.put(&quot;dateOfBirth&quot;, &quot;&quot;); }

if (typeof objPatientRole.phoneNumber !== &apos;undefined&apos;) {
	channelMap.put(&quot;phoneNumber&quot;,objPatientRole.phoneNumber);
	if(debug&gt;0) { logger.error(&quot;objPatientRole.phoneNumber: &quot;+objPatientRole.phoneNumber.toString()); }
} else { channelMap.put(&quot;phoneNumber&quot;, &quot;&quot;); }</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
          <name>Call getAuthor -&gt; Set Author Channel Map variables</name>
          <sequenceNumber>2</sequenceNumber>
          <enabled>false</enabled>
          <script>/* 2018-01-31 - Deprecate use the Call getPerformer transform 

var debug= 0
var objAuthor= getAuthors(msg);
channelMap.put(&apos;objAuthor&apos;,objAuthor);

for(i= 0; i&lt;objAuthor.length; i++) { 
	
	if (typeof objAuthor[0].idExtension !== &apos;undefined&apos;) {
		channelMap.put(&apos;authorIdExtension&apos;,objAuthor[0].idExtension.toString());	
		if(debug&gt;0) { logger.error(&apos;authorIdExtension&apos;,objAuthor[0].idExtension.toString()); }
	} else { channelMap.put(&quot;authorIdExtension&quot;, &quot;&quot;); }
	
	if (typeof objAuthor[0].idRoot !== &apos;undefined&apos;) {
		channelMap.put(&apos;authorIdRoot&apos;,objAuthor[0].idRoot.toString());
		if(debug&gt;0) { logger.error(&apos;authorIdRoot&apos;,objAuthor[0].idRoot.toString()); }
	} else { channelMap.put(&quot;authorIdRoot&quot;, &quot;&quot;); }
	
	if (typeof objAuthor[0].authorizingDevice !== &apos;undefined&apos;) {
		channelMap.put(&apos;authorizingDevice&apos;,objAuthor[0].authorizingDevice.toString());
		if(debug&gt;0) { logger.error(&apos;authorizingDevice&apos;,objAuthor[0].authorizingDevice.toString()); }
	} else { channelMap.put(&quot;authorizingDevice&quot;, &quot;&quot;); }
	
	if (typeof objAuthor[0].authorInstitution !== &apos;undefined&apos;) {
		channelMap.put(&apos;authorInstitution&apos;,objAuthor[0].authorInstitution.toString());
		if(debug&gt;0) { logger.error(&apos;authorInstitution&apos;,objAuthor[0].authorInstitution.toString()); }
	} else { channelMap.put(&quot;authorInstitution&quot;, &quot;&quot;); }
	
	if (typeof getXdsAuthorPerson(objAuthor[0]) !== &apos;undefined&apos;) {
		channelMap.put(&apos;authorPerson&apos;,getXdsAuthorPerson(objAuthor[0]).toString());
		if(debug&gt;0) { logger.error(&apos;authorPerson&apos;,getXdsAuthorPerson(objAuthor[0]).toString()); }
	} else { channelMap.put(&quot;authorPerson&quot;, &quot;&quot;); }

}
*/</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
          <name>Call getServiceEvent -&gt; Set Service Event Channel Map variables</name>
          <sequenceNumber>3</sequenceNumber>
          <enabled>false</enabled>
          <script>/* getPatientRole to set ChannelMap variables */
var debug= 0
var objServiceEvent= getServiceEvent(msg);
channelMap.put(&apos;objServiceEvent&apos;,objServiceEvent);

if (typeof objServiceEvent.root !== &apos;undefined&apos;) {
	channelMap.put(&apos;serviceEventRoot&apos;,objServiceEvent.root.toString());	
	if(debug&gt;0) { logger.error(&apos;serviceEventRoot: &apos;+objServiceEvent.root.toString()); }
} else { channelMap.put(&quot;serviceEventRoot&quot;, &quot;&quot;); }

if (typeof objServiceEvent.Id !== &apos;undefined&apos;) {
	channelMap.put(&apos;serviceEventId&apos;,objServiceEvent.Id.toString());	
	if(debug&gt;0) { logger.error(&apos;serviceEventId: &apos;+objServiceEvent.Id.toString()); }
} else { channelMap.put(&quot;serviceEventId&quot;, &quot;&quot;); }

if ((typeof objServiceEvent.root !== &apos;undefined&apos;) &amp;&amp; (typeof objServiceEvent.Id !== &apos;undefined&apos;)) {
	channelMap.put(&apos;serviceEventSubmissionId&apos;,objServiceEvent.root.toString()+&quot;.&quot;+objServiceEvent.Id.toString());	
	if(debug&gt;0) { logger.error(&apos;serviceEventSubmissionId: &apos;+objServiceEvent.root.toString()+&quot;.&quot;+objServiceEvent.Id.toString()); }
} else { channelMap.put(&quot;serviceEventSubmissionId&quot;, &quot;&quot;); }

if (typeof objServiceEvent.startTime !== &apos;undefined&apos;) {
	channelMap.put(&apos;serviceStartTime&apos;,objServiceEvent.startTime.toString());
	if(debug&gt;0) { logger.error(&apos;serviceStartTime: &apos;+objServiceEvent.startTime.toString()); }
} else { channelMap.put(&quot;authorIdExtension&quot;, &quot;&quot;); }

if (typeof objServiceEvent.stopTime !== &apos;undefined&apos;) {
	channelMap.put(&apos;serviceStopTime&apos;,objServiceEvent.stopTime.toString());
	if(debug&gt;0) { logger.error(&apos;serviceStopTime: &apos;+objServiceEvent.stopTime.toString()); }
} else { channelMap.put(&quot;authorIdExtension&quot;, &quot;&quot;); }</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
          <name>Call getPerformer -&gt; Set Performer Channel Map variables</name>
          <sequenceNumber>4</sequenceNumber>
          <enabled>false</enabled>
          <script>/* getPatientRole to set ChannelMap variables */
var debug= 0
var scriptName= &apos;getPerformer&apos;
var objPerformer= getPerformer(msg)[0];		// get array of Performer Objects
channelMap.put(&apos;objPerformer&apos;,objPerformer);

// get objAuthor to set AuthorInstitution
var objAuthor= getAuthors(msg)[0];			// get first Author Object from array
channelMap.put(&apos;objAuthor&apos;,objAuthor);

logger.error(scriptName+&apos;::typeof(objAuthor): &apos;+typeof(objAuthor)+&apos; objAuthor: &apos;+objAuthor);
logger.error(scriptName+&apos;::typeof(objPerformer): &apos;+typeof(objPerformer)+&apos; objPerformer: &apos;+objPerformer);

if(typeof(objAuthor) !== &apos;undefined&apos;) {

	if (typeof objAuthor.authorInstitution !== &apos;undefined&apos;) {
		channelMap.put(&apos;authorInstitution&apos;,objAuthor.authorInstitution.toString());
		if(debug&gt;0) { logger.error(&apos;authorInstitution&apos;,objAuthor.authorInstitution.toString()); }
	} else { channelMap.put(&quot;authorInstitution&quot;, &quot;&quot;); }
} // end if 

if(typeof(objPeformer) !== &apos;undefined&apos;) {

	// get AuthorRole
	// objPerformer.functionDisplayName = performer.functionCode.@displayName.toString();	// Primary Care Provider
	if (typeof objPerformer.functionDisplayName !== &apos;undefined&apos;) {
		channelMap.put(&apos;performerAuthorRole&apos;,objPerformer.functionDisplayName.toString());	
		if(debug&gt;0) { logger.error(&apos;performerAuthorRole: &apos;+objPerformer.functionDisplayName.toString()); }
	} else { channelMap.put(&quot;performerAuthorRole&quot;, &quot;&quot;); }

	// get AuthorSpeciality
	// objPerformer.assignedDisplayName= performer.assignedEntity.code.@displayName.toString(); // Ambulatory Health Care Facility
	if (typeof objPerformer.assignedDisplayName !== &apos;undefined&apos;) {
		channelMap.put(&apos;performerAuthorSpeciality&apos;,objPerformer.assignedDisplayName.toString());	
		if(debug&gt;0) { logger.error(&apos;performerAuthorSpeciality: &apos;+objPerformer.assignedDisplayName.toString()); }
	} else { channelMap.put(&quot;performerAuthorSpeciality&quot;, &quot;&quot;); }
	
	var strAuthorPerson= getAuthorPerson(objPerformer);	
	if (typeof strAuthorPerson !== &apos;undefined&apos;) {
		channelMap.put(&apos;strAuthorPerson&apos;,strAuthorPerson.toString());	
		if(debug&gt;0) { logger.error(&apos;strAuthorPerson: &apos;+strAuthorPerson.toString()); }
	} else { channelMap.put(&quot;strAuthorPerson&quot;, &quot;&quot;); }

} // end if</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
          <name>Modify substanceAdministration Dose Quantity Unit</name>
          <sequenceNumber>5</sequenceNumber>
          <enabled>false</enabled>
          <script>var scriptName= &apos;modSubstanceAdministrationDoseQuantityUnit&apos;;
var debug= 0;
var tmp= msg;

if(typeof(msg[&apos;component&apos;][&apos;structuredBody&apos;]) !== &apos;undefined&apos;) {
	
	for each (ccda_component in msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;]) {
		
		logger.error(scriptName+&apos;::DEBUG: modSubAdmin= &apos;+ccda_component[&apos;section&apos;][&apos;templateId&apos;][&apos;@root&apos;].toString());
		
		// templateId root=&quot;2.16.840.1.113883.10.20.22.2.1.1&quot; Medications
		if(ccda_component[&apos;section&apos;][&apos;templateId&apos;][&apos;@root&apos;].toString().indexOf(&apos;2.16.840.1.113883.10.20.22.2.1.1&apos;)&gt;-1) {
			if(typeof(ccda_component[&apos;section&apos;]) !== &apos;undefined&apos;) {
				
				for(var i= 0;i&lt;ccda_component[&apos;section&apos;][&apos;entry&apos;].length();i++) {
					logger.error(scriptName+&apos;::DEBUG: modSubAdmin entry[&apos;+i+&apos;]= &apos;+ccda_component[&apos;section&apos;][&apos;entry&apos;][i]);
					
					if (typeof(ccda_component[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;]) !== &apos;undefined&apos;) {
						logger.error(scriptName+&apos;::DEBUG: modSubAdmin= E&apos;);
						if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG: ccda_component[section][entry][&apos;+i+&apos;][@classCode]= &apos;+ccda_component[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;@classCode&apos;].toString()); }
						
						if(ccda_component[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;@classCode&apos;]== &apos;SBADM&apos;) {
							
							logger.error(scriptName+&apos;::DEBUG: modSubAdmin= F&apos;);
							logger.error(scriptName+&apos;::DEBUG: modSubAdmin doseQuantity= &apos;+ccda_component[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;doseQuantity&apos;]);
							
							if(typeof(ccda_component[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;doseQuantity&apos;][&apos;@unit&apos;]) !== &apos;undefined&apos;) {
								
								logger.error(scriptName+&apos;::DEBUG: modSubAdmin= G&apos;);
								logger.error(scriptName+&apos;::DEBUG: @unit = &apos;+ccda_component[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;doseQuantity&apos;][&apos;@unit&apos;]);
								logger.error(scriptName+&apos;::DEBUG: typeof(@unit) = &apos;+typeof(ccda_component[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;doseQuantity&apos;][&apos;@unit&apos;]));
								
								var unit= ccda_component[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;doseQuantity&apos;][&apos;@unit&apos;].toString();
								logger.error(scriptName+&apos;::DEBUG: modSubAdmin doseQuantity.@unit= &apos;+unit);

								if (debug&gt;0) { 
									logger.error(scriptName+&apos;::DEBUG: entry[&apos;+i+&apos;][substanceAdministration][doseQuantity][@unit]= &apos;+ccda_component[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;doseQuantity&apos;][&apos;@unit&apos;]); 
								}
								
								if(unit.length&gt;0) {
									if(ccda_component[&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;doseQuantity&apos;][&apos;@unit&apos;].indexOf(unit)&gt;-1) {
										logger.error(scriptName+&apos;::DEBUG: modSubAdmin= H&apos;);
										var curr_value= unit;
										var new_value= &apos;&apos;;
										tmp[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][&apos;section&apos;][&apos;entry&apos;][i][&apos;substanceAdministration&apos;][&apos;doseQuantity&apos;][&apos;@unit&apos;]= new_value;
										logger.error(scriptName+&apos; MODIFIED: substanceAdministration[doseQuantity][@unit]: curr_value= &apos;+curr_value+&apos; new_value= &apos;+new_value);
									} // end if
								} // end if 
							} // end if 
						} // end if
					} // end if 
					logger.error(scriptName+&apos;::DEBUG entry= &apos;+tmp[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][&apos;section&apos;][&apos;entry&apos;][i]);
				} // end for each
			} // end if 
		} // end if 
	} // end for each
} // end if</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
          <name>getSubstanceAdministration - Source Connector</name>
          <sequenceNumber>6</sequenceNumber>
          <enabled>true</enabled>
          <script>/* 
ScriptName:	getSubstanceAdministration.js
Description:	Source Connector Transformer populating the unit measurement from SubstanceAdministration element

Modified:
2019-12-07 JER - Modified for debugging channelName scriptName
*/

//function getSubstanceAdministration(msg) {

	var debug= 0;
	var arrSubstanceAdministration= new Array();
	
	var strFunctionName= &apos;getSubstanceAdministration&apos;;
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; msg[component][structuredBody][component][section][entry][substanceAdministration]: &apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;].toXMLString()); 
		logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; msg[component][structuredBody][component][section][entry][substanceAdministration][doseQuantity][@unit]: &apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;][&apos;doseQuantity&apos;].toXMLString()); 
	} // end if 

	if (msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;] !== &apos;undefined&apos;) {
		
		var i= 0;
		for each (substanceAdministration in msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;]) {
	
			if (debug&gt; 0) {
				logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; substanceAdministration[&apos;+i+&apos;].doseQuantity.attributes: &apos;+substanceAdministration.doseQuantity.attributes());
				logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; substanceAdministration[&apos;+i+&apos;].doseQuantity.attributes.length: &apos;+substanceAdministration.doseQuantity.attributes().length());
			}
			
			if((substanceAdministration.doseQuantity !== &apos;undefined&apos;)&amp;&amp;(substanceAdministration.doseQuantity.length()&gt;0)) {
							
				if(substanceAdministration.doseQuantity.attributes().length()&gt;0) {

					var j= 0;
					var objSubstanceAdministration= new Object;
					for each (attribute in substanceAdministration.doseQuantity.attributes()) { 
				
						if (debug&gt; 0) { 
							logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; substanceAdministration[&apos;+i+&apos;].doseQuantity.attribute[&apos;+j+&apos;] &apos;+attribute.localName()+&apos;: &apos;+attribute.toString()+&apos; value length: &apos;+attribute.toString().length);
						}
				
						if (attribute !== &apos;undefined&apos;) {												
							if (attribute.localName()== &apos;unit&apos;) {
								if(attribute.toString().length&lt;1) {

									substanceAdministration.doseQuantity.@unit= &quot;UNK&quot;;
									objSubstanceAdministration.doseQuantityUnit= substanceAdministration.doseQuantity.@unit;
						
									if(debug&gt;0) { 
										logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; substanceAdministration.doseQuantity.@unit: &apos;+substanceAdministration.doseQuantity.@unit+&apos; length: &apos;+substanceAdministration.doseQuantity.@unit.toString().length);
									} 

									// store the objSubstanceAdministration
									channelMap.put(&apos;objSubstanceAdministration&apos;,objSubstanceAdministration);
								} else {
									if(attribute.toString()== &apos;application&apos;) {
										delete substanceAdministration.doseQuantity.@unit;
										// objSubstanceAdministration.doseQuantityUnit= substanceAdministration.doseQuantity.@unit;

										if(debug&gt;0) { 
											logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; substanceAdministration.doseQuantity.@unit: &apos;+substanceAdministration.doseQuantity.@unit+&apos; length: &apos;+substanceAdministration.doseQuantity.@unit.toString().length);
										} 

										// store the objSubstanceAdministration
										channelMap.put(&apos;objSubstanceAdministration&apos;,objSubstanceAdministration);
										
									}
								} // end if
							} // end if 
						} // end if 
					} // end for each
				} // end if 
			
			} // end if	

			if (debug&gt; 0) {
				logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; substanceAdministration[&apos;+i+&apos;]: &apos;+substanceAdministration.toXMLString());
				channelMap.put(&apos;substanceAdministration&apos;,substanceAdministration);
			}	
			i++;
			
		} // end for each 
		
	} // end if 

	if (debug&gt; 0) {
		logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; msg[component][structuredBody][component][section][entry][substanceAdministration]: &apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][&apos;section&apos;][&apos;entry&apos;][&apos;substanceAdministration&apos;].toXMLString());
	}
// } // end proc</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
      </elements>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>XML</inboundDataType>
      <outboundDataType>XML</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
          <stripNamespaces>false</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
          <splitType>Element_Name</splitType>
          <elementName></elementName>
          <level>1</level>
          <query></query>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
          <stripNamespaces>false</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
          <splitType>Element_Name</splitType>
          <elementName></elementName>
          <level>1</level>
          <query></query>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="4.0.0">
      <elements/>
    </filter>
    <transportName>File Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="4.0.0">
      <metaDataId>1</metaDataId>
      <name>File Write to Disk - E:\temp\CCDA/out/</name>
      <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="4.0.0">
        <pluginProperties/>
        <destinationConnectorProperties version="4.0.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <scheme>FILE</scheme>
        <host>C:/HL7/CCDA/out</host>
        <outputPattern>${originalFilename}_out</outputPattern>
        <anonymous>true</anonymous>
        <username>anonymous</username>
        <password>anonymous</password>
        <timeout>10000</timeout>
        <keepConnectionOpen>true</keepConnectionOpen>
        <maxIdleTime>0</maxIdleTime>
        <secure>true</secure>
        <passive>true</passive>
        <validateConnection>true</validateConnection>
        <outputAppend>false</outputAppend>
        <errorOnExists>false</errorOnExists>
        <temporary>false</temporary>
        <binary>false</binary>
        <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        <template>${message.encodedData}</template>
      </properties>
      <transformer version="4.0.0">
        <elements>
          <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
            <name>currentDateTime</name>
            <sequenceNumber>0</sequenceNumber>
            <enabled>false</enabled>
            <variable>currentDateTime</variable>
            <mapping>currentDate_yyyyMMddhhmmss()</mapping>
            <defaultValue></defaultValue>
            <replacements/>
            <scope>CHANNEL</scope>
          </com.mirth.connect.plugins.mapper.MapperStep>
          <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
            <name>uuid</name>
            <sequenceNumber>1</sequenceNumber>
            <enabled>false</enabled>
            <variable>uuid</variable>
            <mapping>&quot;urn:uuid:&quot;+UUIDGenerator.getUUID()</mapping>
            <defaultValue></defaultValue>
            <replacements/>
            <scope>CHANNEL</scope>
          </com.mirth.connect.plugins.mapper.MapperStep>
          <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
            <name>extrinsicObjectUUID</name>
            <sequenceNumber>2</sequenceNumber>
            <enabled>false</enabled>
            <variable>extrinsicObjectUUID</variable>
            <mapping>&quot;urn:uuid:&quot;+UUIDGenerator.getUUID()</mapping>
            <defaultValue></defaultValue>
            <replacements/>
            <scope>CHANNEL</scope>
          </com.mirth.connect.plugins.mapper.MapperStep>
          <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
            <name>submissionSetUUID</name>
            <sequenceNumber>3</sequenceNumber>
            <enabled>false</enabled>
            <variable>submissionSetUUID</variable>
            <mapping>&quot;urn:uuid:&quot;+UUIDGenerator.getUUID()</mapping>
            <defaultValue></defaultValue>
            <replacements/>
            <scope>CHANNEL</scope>
          </com.mirth.connect.plugins.mapper.MapperStep>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
            <name>Encode the CCD</name>
            <sequenceNumber>4</sequenceNumber>
            <enabled>false</enabled>
            <script>/* Modified: 
2018-02-13 17:34 CT JER - Readded the removed channelMap.put for the encodedCCD
2018-02-13 09:11 CT JER - Stringified the encData object and will remove/truncate decimal
**/
// encoded CCD
// var encData = FileUtil.encode(msg.getBytes(&quot;UTF8&quot;)).replaceAll(&apos;\\s&apos;,&apos;&apos;);
var debug= 0;

var encData = FileUtil.encode(new java.lang.String(msg.toString()).getBytes(&apos;UTF-8&apos;)).replaceAll(&apos;\\s&apos;,&apos;&apos;);
channelMap.put(&apos;encodedCCD&apos;,encData);
if(debug&gt;0) { 
	logger.error(&apos;encFileSize: &apos;+encData.length());
	logger.error(&apos;datatype: &apos;+typeof encData); 
	logger.error(&apos;JSON.stringify: &apos;+JSON.stringify(encData.length())); 
}
// Modify using the JSON.stringify method
var encUTF8Size= JSON.stringify(encData.length());
channelMap.put(&apos;encFileSize&apos;,encUTF8Size);</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          <com.mirth.connect.plugins.mapper.MapperStep version="4.0.0">
            <name>ccdHash</name>
            <sequenceNumber>5</sequenceNumber>
            <enabled>false</enabled>
            <variable>ccdHash</variable>
            <mapping>com.google.common.hash.Hashing.sha256().hashUnencodedChars($(&apos;encodedCCD&apos;))</mapping>
            <defaultValue></defaultValue>
            <replacements/>
            <scope>CHANNEL</scope>
          </com.mirth.connect.plugins.mapper.MapperStep>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
            <name>set newFileName from originalFileName -&gt; used for File Writer Only</name>
            <sequenceNumber>6</sequenceNumber>
            <enabled>false</enabled>
            <script>// Specific to the File Writer Destination channel
var debug= 0;

// JSON de-objectify object to string for sourceMap variable
var originalFileName= JSON.stringify(sourceMap.get(&apos;originalFilename&apos;));
if (debug&gt;0) { logger.error(&apos;originalFileName is: &apos;+originalFileName.toString()+
	&apos; dataType: &apos;+(typeof originalFileName)
	//&apos; size: &apos;+(origFileName.size())+
	//&apos; values: &apos;+(origFileName.values())	
	); }

var lstFileName= originalFileName.split(&apos;.&apos;);
if (debug&gt;0) { logger.error(&apos;lstFileName is: &apos;+lstFileName
	+&apos; toString: &apos;+lstFileName.toString()
	+&apos; dataType: &apos;+(typeof lstFileName)
	);}

// var newFileShortName= lstOrigFileName[0].toString()+&apos;_&apos;+currentDate_yyyyMMddhhmmss();
var shortName= lstFileName[0].toString()+&apos;_&apos;+currentDate_yyyyMMddhhmmss();
if (debug&gt;0) { logger.error(&apos;shortName is: &apos;+shortName+&apos; dataType: &apos;+(typeof shortName)); }
var fileExt=   lstFileName[1];
if (debug&gt;0) { logger.error(&apos;fileExt is: &apos;+fileExt+&apos; dataType: &apos;+(typeof fileExt)); }
var newFileName= shortName+&apos;.&apos;+fileExt
if (debug&gt;0) { logger.error(&apos;newFileName is: &apos;+newFileName.toString()+&apos; dataType: &apos;+(typeof newFileName)); }
channelMap.put(&apos;newFileName&apos;,newFileName);
// JSON re-objectify string to object
var objNewFileName = JSON.parse(&apos;{&quot;newFileName&quot;:&apos;+newFileName+&apos;}&apos;);
channelMap.put(&apos;objNewFileName&apos;,objNewFileName);</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="4.0.0">
        <elements/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.0.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.0.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.0.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="4.0.0">
        <elements/>
      </filter>
      <transportName>File Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="4.0.0">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STOPPED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="4.0.0">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>false</enabled>
      <lastModified>
        <time>1646642254695</time>
        <timezone>America/Chicago</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
        <pruneErroredMessages>false</pruneErroredMessages>
      </pruningSettings>
    </metadata>
    <codeTemplateLibraries>
      <codeTemplateLibrary version="4.0.0">
        <id>6975d386-da5e-4267-aa01-5d181743a931</id>
        <name>AristaMd-Utilities</name>
        <revision>24</revision>
        <lastModified>
          <time>1702397506235</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description>This library was added upon migration to version 3.3.0. It includes all pre-existing
code templates, and is set to be included on all pre-existing and new channels.

You should create your own new libraries and assign code templates to them as you
see fit. You should also link libraries to specific channels, so that you&apos;re not
necessarily including all code templates on all channels all the time.</description>
        <includeNewChannels>false</includeNewChannels>
        <enabledChannelIds>
          <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
          <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
          <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
          <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
          <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
          <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
          <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
          <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
          <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
          <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
          <string>a757905f-315a-43be-a624-38780a3d7574</string>
          <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
          <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
          <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
          <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
          <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
          <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
          <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
          <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
          <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
          <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
          <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
          <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
          <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
          <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
          <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
          <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
          <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
          <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
          <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
          <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
          <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
          <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
          <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
          <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
          <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
          <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
          <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
          <string>72383579-097e-4205-b030-ce272c90b835</string>
          <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
          <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
          <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
          <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
          <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
          <string>3792b059-e098-436c-81fe-23502ef5042b</string>
          <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
          <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
          <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
          <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
          <string>38e80069-5a80-4483-9a22-02c928973719</string>
          <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
          <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
          <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
          <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
          <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
          <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
          <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
          <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
          <string>c65024ed-4660-4423-9636-cb6309cae138</string>
          <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
          <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
          <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
          <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
          <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
          <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
          <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
          <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
          <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
          <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
          <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
          <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
          <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
          <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
          <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
          <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
          <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
          <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
          <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
          <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
          <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="4.0.0">
            <id>b484c4c9-6c84-4f8e-b2ec-9bff6a8cf7db</id>
            <name>checkHL7ElementIfUndefined</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911262649</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	checkElementIfUndefined (element, debug)
	
	- Function to check provided Element if Undefined or length less than 1 character return null.

	@param {element} - XML object provided (e.g. msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.1&apos;]
	@return {String} return XML object or null object reference
*/
function checkElementIfUndefined (element, debug) {
	var scriptName= &apos;checkHL7ElementIfUndefined&apos;;

	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG element: &quot;+element+&quot; typeof: &quot;+typeof(element)+&quot; string: &quot;+element.toString()+&quot; length: &quot;+element.toString().length); }
	
	if(element == &apos;undefined&apos;) {
		return null;
	} else {
		if(element.toString().length&lt;1) {
			return null;
		} else {
			return element;
		}
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>b9651842-7ccb-4761-aedf-a9a1461dd5f7</id>
            <name>Convert HL7 Date Format to ISO</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911262839</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Converts standard HL7 v2.x date format to human-readable ISO date format
*/

/*
	Author: IntegrateIT.us LLC
	toISODate: Returns an ISO-formatted date string with specified timezone offset

	Arguments
	---------
		Required
		--------
			hl7DateString:		An HL7-formatted date string (ex: &quot;yyyyMMddHHmmss&quot;

		Optional
		--------
			timezome:			A timezone identifier string corresponding to one of the java.util.TimeZone values (ex: &quot;US/Central&quot;)
*/

function toISODate( hl7DateString, timezone ) {
	var isoDate;
	var dateString;
	var hl7Formatter;
	var isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);

	if (timezone) {
		isoFormatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timezone));
	}
	
	if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString.substring(0,13)) &amp;&amp; hl7DateString.length &gt; 14 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmssZ&quot;);
	}
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 14 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
	} 
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 12 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);
	} 
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 8 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMdd&quot;);
	} 
	else dateString = hl7DateString;
	
	try {
		if (hl7Formatter) {
			isoDate = hl7Formatter.parse(hl7DateString);
			isoDate = isoFormatter.format(isoDate);
			dateString = new String(isoDate);
		}
	} catch (err) {
		dateString = hl7DateString;
	} finally {
		return dateString;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>95e528b7-1e7f-490e-86da-7c14b23ee4f3</id>
            <name>Convert ISO Date Format to HL7</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911262912</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Converts ISO date format to HL7 v2 format - toHL7Date( isoDateString, timezone, debug )
*/

/*
	Author: IntegrateIT.us LLC
	toHL7Date: Returns an HL7-formatted date string with specified timezone offset

	Arguments
	---------
		Required
		--------
			isoDateString:		An ISO-formatted date string (ex: &quot;yyyy-MM-ddTHH:mm:ssZ&quot;

		Optional
		--------
			timezome:			A timezone identifier string corresponding to one of the java.util.TimeZone values (ex: &quot;US/Central&quot;)
*/

function toHL7Date( isoDateString, timezone, debug ) 
{
	var scriptName= &quot;toHL7Date&quot;;
	var hl7Date;
	var dateString;
	var isoFormatter;
	var hl7Formatter;

	// 2020-11-07T00:01:22+00:00
	var strTimeZone= &quot;GMT-8:00&quot;;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG:BEGIN isoDateString: &quot;+isoDateString+&quot;, timezone: &quot;+timezone+&quot;, strTimeZone: &quot;+strTimeZone); }

	// ISO Date Format: yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;
	if ( isoDateString != null &amp;&amp; isoDateString.length &lt;= 25 &amp;&amp; isoDateString.length &gt;= 22) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmssZ&quot;);
		if (timezone) {
			hl7Formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(strTimeZone));
		}
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG:UPDATE isoDateString: &quot;+isoDateString+&quot;, isoFormatter: &quot;+isoFormatter.toString()+&quot;, hl7Formatter: &quot;+hl7Formatter.toString()+&quot;, timezone: &quot;+timezone+&quot;, strTimeZone: &quot;+strTimeZone); }
	}
	// ISO Date Format: yyyy-MM-dd HH:mm:ss
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 19 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
	}
	// ISO Date Format: yyyy-MM-dd HH:mm
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 16 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);
	} 
	// ISO Date Format: yyyy-MM-dd
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 10 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMdd&quot;);	
	}
	// None of the above, return original date string.
	else dateString = isoDateString;
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG:END isoDateString: &quot;+isoDateString+&quot;, isoFormatter: &quot;+isoFormatter.toString()+&quot;, hl7Formatter: &quot;+hl7Formatter.toString()+&quot;, timezone: &quot;+timezone+&quot;, strTimeZone: &quot;+strTimeZone); }

	try {
		if (isoFormatter) {
			hl7Date = isoFormatter.parse(isoDateString);
			hl7Date = hl7Formatter.format(hl7Date);
			dateString = new String(hl7Date);
		}
	} catch (err) {
		dateString = isoDateString;
	} finally {
		return dateString;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>41b1ac94-64c4-42ed-a501-a0caca7ae187</id>
            <name>convertMDYtoHL7DateTime</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911263005</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**

	Convert MM-DD-YY HH:MM format to HL7 format
	
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function convertMDYtoHL7DateTime(eventDateTime, debug) {

	var scriptName= &apos;convertMDYtoHL7DateTime&apos;;
	if(typeof(debug) == &apos;undefined&apos;) { var debug= 0; }

	var lstEventDateTime= eventDateTime.toUpperCase().split(&quot; &quot;);
	var tEventDateTime= &quot;&quot;.concat(lstEventDateTime[0]).concat(&quot; &quot;).concat(lstEventDateTime[1]);

	var nEventDate= tEventDateTime.slice(6,8).concat(&quot;20&quot;).concat(tEventDateTime.slice(0,2)).concat(tEventDateTime.slice(3,5));
	var nEventTime= tEventDateTime.split(&quot; &quot;)[1];

	if(nEventTime.toString().indexOf(&quot;PM&quot;)&gt;-1) {
		if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG: eventTime contains PM: &quot; + nEventTime.toString().indexOf(&quot;PM&quot;)); }
		if(nEventTime.toString().length&lt;7) {
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG: eventTime length&lt;7 chars: &quot; + nEventTime.toString().length); } 
			var addLeadingZero= 12;
			var tHours= nEventTime.split(&quot;:&quot;)[0];
			var tMinutes= nEventTime.split(&quot;:&quot;)[1].replace(/[^0-9]/g, &quot;&quot;);
			var tHours= parseInt(addLeadingZero) + parseInt(tHours);
			var tEventTime= tHours.toString().concat(tMinutes.toString()).concat(&quot;00&quot;);
			if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG: new EventTime: &quot; + tEventTime.toString()); } 
		} else { 
			var tEventTime= nEventTime.toString().replace(/[^0-9]/g, &quot;&quot;) + &quot;00&quot;; 
		} 
	} else {
		var tEventTime= &quot;0&quot; + nEventTime.toString().replace(/[^0-9]/g, &quot;&quot;) + &quot;00&quot;; 
	}
	var nEventDateTime= nEventDate.toString().concat(tEventTime.toString());
	if(debug&gt;0) { logger.info(scriptName+&quot;::DEBUG datetime: &quot;+nEventDateTime); }

	return nEventDateTime;

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>af95fd5e-8686-4b90-bd08-f11b4f5e78ee</id>
            <name>currentDate_yyyyMMddhhmmss</name>
            <revision>1</revision>
            <lastModified>
              <time>1653055235571</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** currentDate_yyyyMMddhhmmss

  	- Desc: This function returns current DateTime only YYYYMMDDHHMMSS format

	@return {string} datetime - this string object contains the current DateTime only YYYYMMDDHHMMSS format
*/
function currentDate_yyyyMMddhhmmss() {
	var today = new Date();
	// set Date with leading zeros if needed
	var tMonth= today.getMonth()+1;
	if(tMonth.toString().length&lt;2) tMonth= &apos;0&apos;+tMonth;
	var tDay= today.getDate()
	if(tDay.toString().length&lt;2) tDay= &apos;0&apos;+tDay;
	var date = today.getFullYear()+&apos;&apos;+tMonth+&apos;&apos;+tDay;
	
	// set Time with leading zeros if needed
	var tHour= today.getHours();
	if(tHour.toString().length&lt;2) tHour= &apos;0&apos;+tHour;
	var tMinute= today.getMinutes();
	if(tMinute.toString().length&lt;2) tMinute= &apos;0&apos;+tMinute;
	var tSecond= today.getSeconds();
	if(tSecond.toString().length&lt;2) tSecond= &apos;0&apos;+tSecond;
	
	var time = tHour+&apos;&apos;+tMinute+&apos;&apos;+tSecond;
	var dateTime = date+&apos;&apos;+time;

	return dateTime;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>59ebad58-f839-4429-b9fb-175fb5a4d5ec</id>
            <name>getChannelId</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911262975</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	getChannelId(nameOfChannel) function
	DESC: This function takes the string nameOfChannel Object as a parameter and returns the string channelId

	PARAMETERS:
	@param	{string} - pass the string object of the channelName
	@return 	{string} - return the channelId

	MODIFIED:	

 	USAGE:								
	E.G 
	var arrElementObjects= setXMLElementsArrayWithDescendants(xmlElement, debug);
	
*/

function getChannelId(nameOfChannel){ 
    if (nameOfChannel === undefined || nameOfChannel.length == 0) return &quot;&quot;; 
     
    var listIDs = ChannelUtil.getChannelIds(); 
    if (listIDs.isEmpty()) return &quot;&quot;; 
     
    var nameFromList; 
    for (var i = 0; i &lt; listIDs.size();i++){ 
        nameFromList = ChannelUtil.getChannelName(listIDs.get(i)); 
        if(nameFromList == nameOfChannel) return listIDs.get(i); 
    } 
    return &quot;&quot;; 
}  </code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>887718d9-8250-4b4e-9b81-4a02cc1bef45</id>
            <name>getHL7v2ACK</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911262563</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	setHL7v2ACK(msg) - DEVELOPMENT
	
	- Desc: This function set and returns HL7v2 HAPI Acknowledgement (ACK) message based on evaluating conditions

	@param 
	sourceMsg {string} - source message
	responseCode {string} - Mirth Connect processing responseCode
	responseMsg {string} - response MSA message
	responseStatus {string} - Mirth Connect processing responseStatus
	
	@return {XML} - this returns the HL7 HAPI Ack message
*/
function setHL7v2ACK(sourceMsg,responseCode,responseMsg,responseStatus) {

	var scriptName= &apos;getHL7v2ACK&apos;;
	var debug= 0;
	if (debug&gt;0) { logger.error(scriptName+&apos;::DEBUG msg.MSH: &apos;+JSON.stringify(msg[&apos;MSH&apos;].toString())); }
	
	importPackage(com.mirth.connect.model);
	// responseStatus is an optional parameter
	if (!responseStatus)
		responseStatus = {&apos;AA&apos;:Response.Status.SUCCESS,&apos;AR&apos;:Response.Status.FILTERED,&apos;AE&apos;:Response.Status.FAILURE}[responseCode] || Response.Status.UNKNOWN;
	var ack = &lt;HL7Message/&gt;;
	
	ack.MSH[&apos;MSH.1&apos;] = sourceMsg.MSH[&apos;MSH.1&apos;].toString();
	ack.MSH[&apos;MSH.2&apos;] = sourceMsg.MSH[&apos;MSH.2&apos;].toString();
	ack.MSH[&apos;MSH.3&apos;] = sourceMsg.MSH[&apos;MSH.5&apos;].copy();
	ack.MSH[&apos;MSH.4&apos;] = sourceMsg.MSH[&apos;MSH.6&apos;].copy();
	ack.MSH[&apos;MSH.5&apos;] = sourceMsg.MSH[&apos;MSH.3&apos;].copy();
	ack.MSH[&apos;MSH.6&apos;] = sourceMsg.MSH[&apos;MSH.4&apos;].copy();
	ack.MSH[&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = DateUtil.getCurrentDate(&apos;yyyyMMddHHmmss&apos;);
	ack.MSH[&apos;MSH.9&apos;][&apos;MSH.9.1&apos;] = sourceMsg.MSH[&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString();
	ack.MSH[&apos;MSH.9&apos;][&apos;MSH.9.2&apos;] = sourceMsg.MSH[&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();
	ack.MSH[&apos;MSH.9&apos;][&apos;MSH.9.3&apos;] = &apos;ACK&apos;;
	ack.MSH[&apos;MSH.10&apos;] = sourceMsg.MSH[&apos;MSH.10&apos;].copy();
	ack.MSH[&apos;MSH.11&apos;] = sourceMsg.MSH[&apos;MSH.11&apos;].copy();
	ack.MSH[&apos;MSH.12&apos;] = sourceMsg.MSH[&apos;MSH.12&apos;].copy();
	ack.MSA[&apos;MSA.1&apos;][&apos;MSA.1.1&apos;] = responseCode;
	ack.MSA[&apos;MSA.2&apos;][&apos;MSA.2.1&apos;] = sourceMsg.MSH[&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
	ack.MSA[&apos;MSA.3&apos;][&apos;MSA.3.1&apos;] = responseMsg;
	
	responseMap.put(&apos;ACK&apos;,new Response(responseStatus,SerializerFactory.getHL7Serializer().fromXML(ack)));

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>9d1a5389-8d5f-4f98-923a-6e5570b4bdc3</id>
            <name>jsonNulltoEmptyString</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911262944</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Converts JSON Null Object values to empty string
*/

/*
	Author: IntegrateIT.us LLC
	toHL7Date: Returns an empty string

	Arguments
	---------
		Required
		--------
			JSON element:		A JSON element (e.g. &quot;MiddleName&quot;:null )

*/

function jsonNulltoEmptyString( strElement, jsonElement, debug ) 
{

	var scriptName= &quot;jsonNulltoEmptyString&quot;;
	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG jsonElement IN key:&quot;+strElement+&quot; value: &quot;+jsonElement); 
		logger.info(scriptName+&quot;::DEBUG typeof jsonElement IN: &quot;+typeof(jsonElement));
	}
	// try {
		if (typeof(jsonElement) !== &apos;undefined&apos;) {
			if (typeof(jsonElement) !== &apos;string&apos;) {
				if (typeof(jsonElement) == &apos;object&apos;) {
					var jsonElement= &quot;&quot;;
				} 
			} else {
				if (jsonElement.toString()== null) {
					var jsonElement= jsonElement.replace(null,&quot;&quot;);
				}
			}	
		} else {
			var jsonElement= &quot;&quot;;
		}
	/*
	} catch (err) {
		return jsonElement
	} finally {
		return newJsonElement;
	}
	*/
	if(debug&gt;0) {
		logger.info(scriptName+&quot;::DEBUG jsonElement OUT key:&quot;+strElement+&quot; value: &quot;+jsonElement); 
		logger.info(scriptName+&quot;::DEBUG typeof jsonElement OUT: &quot;+typeof(jsonElement));
		logger.info(&quot;&quot;);
	}
	return jsonElement;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>a53342c5-cb0d-47b5-b156-cd559fbd40ac</id>
            <name>random_date_after_date</name>
            <revision>7</revision>
            <lastModified>
              <time>1658169955060</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	This function will produce a random date based on a provided date and number of days argument.

	@param {String} start - enter the starting date (&apos;YYYY&apos;, &apos;MM&apos;, &apos;DD&apos;) (e.g. &apos;2021&apos;, &apos;09&apos;, &apos;13&apos;)
	@param {String} days -  number of days (positive or negative) (e.g. 365, 3000, -365)
	@return {String} return description
*/
function random_date_after_date(start, days) {
	
	// randomDateAfterDate(new Date(2021, 4, 5), -365) 
	var scriptName= &apos;random_date_after_date&apos;;
	var debug= 1;
	
	// if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; start= &apos;+start+&apos; number of days: &apos;+days);
	// }
	
	var strRandom= Math.random()*days*10000;
	var strStringRandom= strRandom.toString();
	var strRandom= strStringRandom.substring(0,4);
	
	var newDate= new Date(start.getTime() + strRandom);
	// Fri Jun 26 2020 08:59:35 GMT-0600 (GMT-06:00)
	var strDate= newDate.getFullYear() + &quot;&quot; + addLeadingZeros(newDate.getMonth() + 1) + &quot;&quot; + addLeadingZeros(newDate.getDate());
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; random date generated: &apos;+strDate);
	}

	return strDate;
}

function addLeadingZeros(n) {
  
  if (n &lt;= 9) {
    return &quot;0&quot; + n;
  }
  
  return n;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>b527f706-5c50-4f44-bee5-d16dd9edd8f0</id>
            <name>random_generator</name>
            <revision>3</revision>
            <lastModified>
              <time>1653591827816</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	This function will produce a random number based on the number of characters provided into the numOfChars argument.

	@param {String} numOfChars - enter the number of random characters to be returned
	@return {String} return description
*/
function random_generator(numOfChars) {
	var scriptName= &apos;random_generator&apos;;
	var debug= 0;
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; evaluate number of characters: &apos;+numOfChars);
	}
	
	var strNumOfChars= &apos;&apos;+numOfChars+&apos;&apos;;
	var cntNumOfChars= strNumOfChars.padEnd(numOfChars,0);
	var strRandom= (Math.random()*cntNumOfChars).toFixed();
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; random number generated: &apos;+strRandom);
	}
	
	return strRandom;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>fefafe84-cb17-415b-b96e-ff00063c267a</id>
            <name>sendHttpsPostClientCert</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911262729</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**

	sendHttpsPostClientCert(state, url, certificatePath, certificatePassword) - Returns custom HTTP response
	
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} state - arg1 description
	@param {String} url - arg2 description
	@param {String} certificatePath - arg3 description
	@param {String} certificatePasswordte - arg4 description
	@return {String} return description
*/
function sendHttpsPostClientCert(state, url, certificatePath, certificatePassword) {
	// write code here.

	var scriptName= &quot;sendHttpsPostClientCert&quot;;
	var messageBody = messageObject.getEncodedData();
	var httpsSender = new Packages.com.xti.util.HTTPSSender(certificatePath, certificatePassword);

	// Set all the necessary parameters...
	httpsSender.setURL(url);
	httpsSender.setMessageBody(messageBody);

	logger.info(scriptName+&quot;::DEBUG Sending message to &quot; + url + &quot; - &quot; + messageBody);

	// Send the message to the URL...
	try {
		httpsSender.send();
		var retString = httpsSender.getReturnValue();
		retString = retString.substr(0, retString.indexOf(&quot;MSA&quot;)) + &quot;\r&quot; + retString.substr(retString.indexOf(&quot;MSA&quot;));
		var responseMessage = new Packages.com.mirth.connect.model.converters.SerializerFactory.getHL7Serializer().toXML(retString);
		channelMap.put(&apos;responseMessage&apos;,responseMessage);

		if (responseMessage[&apos;MSA&apos;][&apos;MSA.1&apos;][&apos;MSA.1.1&apos;].toString() == &apos;AA&apos;) {
			logger.info(scriptName+&quot;::DEBUG HTTPS send success. Return value= &quot; + retString);
		} else {
			logger.info(scriptName+&quot;::DEBUG HTTPS send failure. Return value= &quot; + retString);
			throw(&quot;HTTPS send failure. Return value=&quot; + retString);
		}
	} catch (e) {
		logger.info(scriptName+&quot;::DEBUG Error message= &quot; + e.message);
		throw(e.message);
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>37fab7a4-d254-46f6-925b-1c4bd8bacc48</id>
            <name>set24Hrs</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911263134</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	set24Hrs - Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function set24Hrs(d){

  if (d.slice(-2) === &quot;PM&quot;){
      var hrs = parseInt(d.slice(-7,-5))
      var mins = d.slice(-4,-2)
      hrs = hrs + 12
      var dd = d.slice(0,9) + &quot; &quot; + hrs + &quot;:&quot; + mins;
      return dd;
  } else if(d.slice(-2) === &quot;AM&quot;){
      return (d.slice(0, 16));
  } else {
      throw (&quot;UNRECOGNIZED_FORMAT&quot;,&quot;set24Hrs() Received Unrecognized Formatted String&quot;);
  }
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.0.0">
        <id>690e66f5-be75-4877-9354-42bb679b7bf6</id>
        <name>CCDtoXDS</name>
        <revision>21</revision>
        <lastModified>
          <time>1661376358782</time>
          <timezone>GMT-06:00</timezone>
        </lastModified>
        <description>CCDtoXDS</description>
        <includeNewChannels>false</includeNewChannels>
        <enabledChannelIds>
          <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
          <string>38e80069-5a80-4483-9a22-02c928973719</string>
          <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
          <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
          <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
          <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
          <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
          <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
          <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
          <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
          <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
          <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
          <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
          <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
          <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
          <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
          <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
          <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
          <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
          <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
          <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
          <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
          <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
          <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
          <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
          <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
          <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
          <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
          <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
          <string>a757905f-315a-43be-a624-38780a3d7574</string>
          <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
          <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
          <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
          <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
          <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
          <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
          <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
          <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
          <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
          <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
          <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
          <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
          <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
          <string>c65024ed-4660-4423-9636-cb6309cae138</string>
          <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
          <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
          <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
          <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
          <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
          <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
          <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
          <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
          <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
          <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
          <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
          <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
          <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
          <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
          <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
          <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
          <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
          <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="4.0.0">
            <id>21901337-48c5-4cce-b4ff-ffdb3a14d9ba</id>
            <name>getAddress</name>
            <revision>16</revision>
            <lastModified>
              <time>1659055557599</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**  getAddress(address) - Desc: This function receives CCD/CCDA msg and returns from Address Object

   	@param {String} msg - this contains the raw message (string)
	@return {object} objAddress - this contains the patientRole elements composed into a single objPatientRole object.
	
	History
	2022-07-28 JER - Modify the streetAddressLine if multiple streetAddressLine element objects
	2021-09-20 JER - Modified to incorporate evaluation of multiple patientRole Id(s) in the case there are multiple patient identifiers
	2021-09-20 JER - Modified to patient.name incorporate evaluation of multiple patient name child elements in the case there are multiple patient identifiers
*/
function getAddress(address) {
 
	// define variables
	var debug= 0;
	var scriptName= &apos;getAddress&apos;;
	var arrAddresses= new Array();
	
	if(debug&gt;0) { logger.error(scriptName+&apos; msg= &apos;+msg); }
	if (typeof(address) !== &apos;undefined&apos;) {

		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; address.length= &apos;+address.length()+&apos; address= &apos;+address); }			
		
		if(address.length()&gt;1) {
			// for each addr element
			var j= 0;
			for(var i= 0;i&lt;1;i++) {

				var objAddress= new Object();
				objAddress.id= j;
				if(address[i][&apos;@use&apos;]) {
					objAddress.use= address[i][&apos;@use&apos;].toString();
				} // end if address element @use property is not null

				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; address[&apos;+i+&apos;].children()= &apos;+address[i].children()); }
				
				// 2022-07-28 JER - Modify the streetAddressLine if multiple streetAddressLine element objects
				var strStreetAddressLine= &apos;&apos;; var lenStreetAddressLine= address[i].streetAddressLine.length();
				for(var j= 0;j&lt;address[i].streetAddressLine.length();j++) {
					if(lenStreetAddressLine&gt;1) {
						strStreetAddressLine+= address[i].streetAddressLine[j].toString()+&apos; &apos;;
					} else {
						strStreetAddressLine=  address[i].streetAddressLine[j].toString();
					} // end if 
				} // end for 
				objAddress.streetAddressLine= strStreetAddressLine;
				
				/*
				if(address[i].streetAddressLine.toString().length&gt;0) {
					objAddress.streetAddressLine=	address[i].streetAddressLine.toString();
				} else {
					objAddress.streetAddressLine=	&quot;&quot;; 
				} // end if streetAddressLine
				*/	
					
					if(address[i].county.toString().length&gt;0) {
						objAddress.county=			address[i].county.toString()
					} else {
						objAddress.county=	&quot;&quot;; 
					} // end if county element
					
					if(address[i].city.toString().length&gt;0) {
						objAddress.city=			address[i].city.toString()
					} else {
						objAddress.city=	&quot;&quot;; 
					} // end if city element
					
					if(address[i].state.toString().length&gt;0) {
						objAddress.state=			address[i].state.toString()
					} else {
						objAddress.state= &quot;&quot;;
					} // end if state element
					
					if(address[i].postalCode.toString().length&gt;0) {
						objAddress.postalCode=		address[i].postalCode.toString()
					} else {
						objAddress.postalCode= &quot;&quot;;
					} // end if postalCode element
					
					if(address[i].useablePeriod) {
						if(address[i].useablePeriod.children().length()&gt;0) {
							for each(child in address[i].useablePeriod.children()) {
								if(child.localName()== &apos;low&apos;) {
									objAddress.beginDate=	child[&apos;@low&apos;].toString();
								}
								if(child.localName()== &apos;high&apos;) {
									objAddress.endDate=		child[&apos;@high&apos;].toString();
								}
							} // end for each
						} // end if 
					} // end if useablePeriod element
					arrAddresses.push(objAddress);
				//} // for each child element
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;function arrAddress: &apos;+JSON.stringify(arrAddresses)); }
				j++;
			} // for each address element 
		} else {
			if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; address.children()= &apos;+JSON.stringify(address.children())); }
			var objAddress= new Object();
			objAddress.id= i;
			if(address[&apos;@use&apos;]) {
				objAddress.use= address[&apos;@use&apos;].toString();
			} // end if address element @use property is not null

			if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; address.children()= &apos;+address.children()); }
				
				// for each(child in address.children()) {
				
					if(address.streetAddressLine.toString().length&gt;0) {
						objAddress.streetAddressLine=	address.streetAddressLine.toString();
					} else {
						objAddress.streetAddressLine=	&quot;&quot;; 
					} // end if streetAddressLine
					
					if(address.county.toString().length&gt;0) {
						objAddress.county=			address.county.toString()
					} else {
						objAddress.county=	&quot;&quot;; 
					} // end if county element
					
					if(address.city.toString().length&gt;0) {
						objAddress.city=			address.city.toString()
					} else {
						objAddress.city=	&quot;&quot;; 
					} // end if city element
					
					if(address.state.toString().length&gt;0) {
						objAddress.state=			address.state.toString()
					} else {
						objAddress.state= &quot;&quot;;
					} // end if state element
					
					if(address.postalCode.toString().length&gt;0) {
						objAddress.postalCode=		address.postalCode.toString()
					} else {
						objAddress.postalCode= &quot;&quot;;
					} // end if postalCode element
					
					if(address.useablePeriod) {
						if(address.useablePeriod.children().length()&gt;0) {
							for each(child in address.useablePeriod.children()) {
								if(child.localName()== &apos;low&apos;) {
									objAddress.beginDate=	child[&apos;@low&apos;].toString();
								}
								if(child.localName()== &apos;high&apos;) {
									objAddress.endDate=		child[&apos;@high&apos;].toString();
								}
							} // end for each
						} // end if 
					} // end if useablePeriod element
					arrAddresses.push(objAddress);
				// } // for each child element
				
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;function arrAddress: &apos;+JSON.stringify(arrAddresses)); }

			arrAddresses= objAddress;
			if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;function arrAddress: &apos;+JSON.stringify(arrAddresses)); }
		} // end if number of addr elements

		channelMap.put(&apos;arrAddresses&apos;,JSON.stringify(arrAddresses));
		return arrAddresses;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>6b3af922-f209-40b0-a3d2-074f147abe37</id>
            <name>getAssignedAuthor</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911325519</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getAssignedAuthor(msg)

  	- Desc: This function receives CCD assignedAuthor XML Object and returns JavaScript object
  	- Modified 
  	2018-02-24 04:18 CT JER - Modified the msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;].toString() evaluation !== undefined to length&gt;0
	
   	@param {XML} msg - this contains the raw message (string)
	@return {object} getAssignedAuthor - contains getAssignedAuthor JS object and related properties.
*/

function getAssignedAuthor(msg) {

	var debug= 0;
	var objAssignedAuthor= new Object;

	if(debug&gt;0) { 
		logger.error(&apos;getAssignedAuthor msg: &apos;+msg);
		logger.error(&apos;getAssignedAuthor msg[assignedAuthor]: &apos;+JSON.stringify(msg[&apos;assignedAuthor&apos;])+
		&apos; typeof: &apos;+msg[&apos;assignedAuthor&apos;]+
		&apos; length: &apos;+msg[&apos;assignedAuthor&apos;].toString().length); 
	} // end if 
	
	if(typeof msg[&apos;assignedAuthor&apos;] !== &apos;undefined&apos;) {
		if(msg[&apos;assignedAuthor&apos;].children().length()&gt;0) {
			
			// &lt;assignedAuthor classCode=&quot;ASSIGNED&quot;&gt;
			// set assignedAuthor classCode
			if(typeof msg[&apos;assignedAuthor&apos;][&apos;@classCode&apos;] !== &apos;undefined&apos;) {
				if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][@classCode]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;@classCode&apos;].toString()); }
				objAssignedAuthor.classCode= msg[&apos;assignedAuthor&apos;][&apos;@classCode&apos;].toString();
			} // end if
			
			// &lt;id assigningAuthorityName=&quot;INLP_FIN&quot; extension=&quot;INLP&quot; root=&quot;2.16.840.1.113883.3.2139.200&quot;/&gt;
			// set assignedAuthor Id
			if(typeof msg[&apos;assignedAuthor&apos;][&apos;id&apos;] !== &apos;undefined&apos;) {
				// set assignedAuthor Id assigningAuthorityName
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][id][@assigningAuthorityName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString()); }
					objAssignedAuthor.assigningAuthorityName= msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString();
				} // end if
				// set assignedAuthor Id root
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@root&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][id][@root]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@root&apos;].toString()); }
					objAssignedAuthor.root= msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@root&apos;].toString();
				} // end if
				// set assignedAuthor Id extension
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@extension&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][id][@extension]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@extension&apos;].toString()); }
					objAssignedAuthor.extension= msg[&apos;assignedAuthor&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
				} // end if
			} // end if
			
			// set assignedAuthor Code
			if(typeof msg[&apos;assignedAuthor&apos;][&apos;code&apos;] !== &apos;undefined&apos;) {
				// set assignedAuthor code code
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@code&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][code][@code]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@code&apos;].toString()); }
					objAssignedAuthor.code= msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
				} // end if
				// set assignedAuthor code codeSystemOid
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][code][@codeSystem]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString()); }
					objAssignedAuthor.codeSystem= msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString();
				} // end if
				// set assignedAuthor code codeSystemName
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][code][@codeSystemName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;].toString()); }
					objAssignedAuthor.codeSystemName= msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;].toString();
				} // end if
				// set assignedAuthor code displayName
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@displayName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][code][@displayName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString()); }
					objAssignedAuthor.codeDisplayName= msg[&apos;assignedAuthor&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
				} // end if
			} // end if
			
	
			// set assignedAuthor assignedAuthoringDevice
			/* &lt;assignedAuthoringDevice&gt;&lt;manufacturerModelName&gt;Cerner Corporation&lt;/manufacturerModelName&gt;&lt;softwareName&gt;Millennium Clinical Document Generator&lt;/softwareName&gt;&lt;/assignedAuthoringDevice&gt; */
			if(typeof msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;] !== &apos;undefined&apos;) {
				// get manufacturer
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;manufacturerModelName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][assignedAuthoringDevice][manufacturerModelName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;manufacturerModelName&apos;].toString()); }
					objAssignedAuthor.assignedAuthorizingDevice_manufacturer= msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;manufacturerModelName&apos;].toString();
				} // end if 
				// get softwareName
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;softwareName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][assignedAuthoringDevice][softwareName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;softwareName&apos;].toString()); }
					objAssignedAuthor.assignedAuthorizingDevice_softwareName= msg[&apos;assignedAuthor&apos;][&apos;assignedAuthoringDevice&apos;][&apos;softwareName&apos;].toString();
				} // end if 
			} // end if 
			
			// set assignedAuthor representedOrganization
			/*  &lt;representedOrganization classCode=&quot;ORG&quot; determinerCode=&quot;INSTANCE&quot;&gt;&lt;id assigningAuthorityName=&quot;INLP_FIN&quot; extension=&quot;INLP&quot; root=&quot;2.16.840.1.113883.3.2139.200&quot;/&gt;&lt;id root=&quot;2.16.840.1.113883.3.2139&quot;/&gt;&lt;name&gt;La Porte Hospital&lt;/name&gt;
			*/

			if(debug&gt;0) { 
				logger.error(&apos;msg[assignedAuthor][representedOrganization]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;]+
					&apos; typeof: &apos;+typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;]+
					&apos; toString: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;].toString()+
					&apos; length: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;].toString().length); 
			}
			
			if(msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;].toString().length&gt;0) {
				if(typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;] !== &apos;undefined&apos;) {
					// set representedOrganization Id assigningAuthorityName
					if(typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][representedOrganization][id][@assigningAuthorityName]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString()); }
						objAssignedAuthor.representedOrganization_assigningAuthorityName= msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString();
					} // end if
					// set representedOrganization Id extension
					if(typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@extension&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][representedOrganization][id][@extension]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@extension&apos;].toString()); }
						objAssignedAuthor.representedOrganization_extension= msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@extension&apos;].toString();
					} // end if
					// set representedOrganization Id root
					if(typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@root&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][representedOrganization][id][@root]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@root&apos;].toString()); }
						objAssignedAuthor.representedOrganization_root= msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][0][&apos;@root&apos;].toString();
					} // end if
				} // end if 
			} // end if
				
			// check for assignedAuthor representedOrganization name child element
			if(typeof msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;name&apos;] !== &apos;undefined&apos;) {
				if(msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;name&apos;].toString().length&gt;0) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][representedOrganization][name]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;name&apos;].toString()); }
					objAssignedAuthor.representedOrganizationName= msg[&apos;assignedAuthor&apos;][&apos;representedOrganization&apos;][&apos;name&apos;].toString();	// Walgreens Drug Store 12562
				} else if (msg[&apos;assignedAuthor&apos;][&apos;assignedPerson&apos;][&apos;name&apos;].toString().length&gt;0) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedAuthor][assignedPerson][name]: &apos;+msg[&apos;assignedAuthor&apos;][&apos;assignedPerson&apos;][&apos;name&apos;].toString()); }
					objAssignedAuthor.representedOrganizationName= msg[&apos;assignedAuthor&apos;][&apos;assignedPerson&apos;][&apos;name&apos;].toString();	// Walgreens Drug Store 12562
				} // end if
			} // end if 
		} // end if
	} // end if 
	return objAssignedAuthor;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>a303a44c-4750-4b83-893f-cecf38ee1c7c</id>
            <name>getAssignedAuthorAddress</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911325540</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** setAssignedAuthorAddress(msg)

  	- Desc: This setAssignedAuthorAddress function receives message and returns objAssignedAuthorAddress toXMLString
  	- Modified:
  	2019-11-20 22:20 CST - Under development
	
   	@param {msg} - this contains the Javascript message document 
	@return {XML} objAssignedAuthorAddress - contains objAssignedAuthorAddress in XML Object string.

	Reference: https://gazelle.ihe.net/XDStarClient/rimihe-templates/rimihe-Author_XDSDocumentEntry.html
		
*/

function getAssignedAuthorAddress(msg) {

	var debug= 0;
	var arrParticipant= new Array();
	var strFunctionName= &apos;getAssignedAuthorAddress&apos;;
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; msg[author][assignedAuthor]: &apos;+msg[&apos;author&apos;][&apos;assignedAuthor&apos;].toXMLString());
		logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; msg[author][assignedAuthor][addr]: &apos;+msg[&apos;author&apos;][&apos;assignedAuthor&apos;][&apos;addr&apos;].toXMLString());
	} // end if 
		
	var objAssignedAuthorAddress= new Object;
	if(msg.author.assignedAuthor.children().length()&gt;0) {
		
		if(debug&gt;0) { 
			logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; AssignedAuthor.children().length: &apos;+msg.author.assignedAuthor.children().length()+&apos; children names: &apos;+msg.author.assignedAuthor.children());
		} // end if 
		if((msg[&apos;author&apos;][&apos;assignedAuthor&apos;][&apos;addr&apos;] !== &apos;undefined&apos;)&amp;&amp;(msg[&apos;author&apos;][&apos;assignedAuthor&apos;][&apos;addr&apos;].toString().length&gt;0)) {
			
			for each (child in msg.author.assignedAuthor.children()) {
					
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; child.fullName: &apos;+child.name()+&apos; child.text: &apos;+child.name+&apos; child.localName(): &apos;+child.localName());
				} // end if 
				if(child.localName()== &apos;addr&apos;) {
					if((child.toString() !== &apos;undefined&apos;)&amp;&amp;(child.toString().length&gt;0)) {
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; addr.toXMLString: &apos;+child.toXMLString());
						} // end if 
						objAssignedAuthorAddress.addr= child.toXMLString();
					} // end if 
				} // end if 
			} // end for each
		} // end if
		channelMap.put(&apos;objAssignedAuthorAddress&apos;,objAssignedAuthorAddress);
	} // end if

} // end proc</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>ee2d85ee-4285-4f11-9947-e1a96874d3f5</id>
            <name>getAssignedEntity</name>
            <revision>2</revision>
            <lastModified>
              <time>1654011867722</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getAssignedEntity(msg)

  	- Desc: This function receives CCD assignedEntity XML Object and returns JavaScript object
  	- Modified 	
  	2020-01-29 19:25 CT JER - Modified to comment out the debug statement to echo the toXMLString msg[assignedEntity][assignedPerson][name][given]
	2018-04-22 16:43 CT JER - Modified to include the storing of the id.root element.attribute for reference purposes
	2018-04-15 23:42 CT JER - Modified to include additional if no value or sizeable value handling (length()&gt;1, length= 1 and the else) for givenName element value.
	2018-02-16 17:48 CT JER - Added the assignedPerson Name suffix and the representedOrganization Name

   	@param {XML} msg - this contains the raw message (string)
	@return {object} objAssignedEntity - contains objAssignedEntity JS object and related properties.
*/

function getAssignedEntity(msg) {

	var debug= 0;
	var objAssignedEntity= new Object;
	default xml namespace = &apos;urn:hl7-org:v3&apos;;
	// &lt;given xmlns=&quot;urn:hl7-org:v3&quot;&gt;Julius&lt;/given&gt;&lt;given xmlns=&quot;urn:hl7-org:v3&quot;&gt;R&lt;/given&gt;
	
	if(typeof msg[&apos;assignedEntity&apos;] !== &apos;undefined&apos;) {
		if(msg[&apos;assignedEntity&apos;].children().length()&gt;0) {
			
			// set assignedEntity classCode
			if(typeof msg[&apos;assignedEntity&apos;][&apos;@classCode&apos;] !== &apos;undefined&apos;) {
				if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][@classCode]: &apos;+msg[&apos;assignedEntity&apos;][&apos;@classCode&apos;].toString()); }
				objAssignedEntity.classCode= msg[&apos;assignedEntity&apos;][&apos;@classCode&apos;].toString();
			} // end if
			
			// set assignedEntity Id
			if(typeof msg[&apos;assignedEntity&apos;][&apos;id&apos;][0] !== &apos;undefined&apos;) {
				// set assignedEntity Id assigningAuthorityName
				if(typeof msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@assigningAuthorityName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][id][0][@assigningAuthorityName]: &apos;+msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@assigningAuthorityName&apos;].toString()); }
					objAssignedEntity.assigningAuthorityName= msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@assigningAuthorityName&apos;].toString();
				} // end if
				// set assignedEntity Id root
				if(typeof msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@root&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][id][0][@root]: &apos;+msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@root&apos;].toString()); }
					objAssignedEntity.root= msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@root&apos;].toString();
				} // end if
				// set assignedEntity Id extension
				if(typeof msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@extension&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][id][0][@extension]: &apos;+msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@extension&apos;].toString()); }
					objAssignedEntity.extension= msg[&apos;assignedEntity&apos;][&apos;id&apos;][0][&apos;@extension&apos;].toString();
				} // end if
			} // end if
			
			// set assignedEntity Code
			if(typeof msg[&apos;assignedEntity&apos;][&apos;code&apos;] !== &apos;undefined&apos;) {
				// set assignedEntity code code
				if(typeof msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@code&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][code][@code]: &apos;+msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@code&apos;].toString()); }
					objAssignedEntity.code= msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@code&apos;].toString();
				} // end if
				// set assignedEntity code codeSystemOid
				if(typeof msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystem&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][code][@codeSystem]: &apos;+msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString()); }
					objAssignedEntity.codeSystem= msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystem&apos;].toString();
				} // end if
				// set assignedEntity code codeSystemName
				if(typeof msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][code][@codeSystemName]: &apos;+msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;].toString()); }
					objAssignedEntity.codeSystemName= msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@codeSystemName&apos;].toString();
				} // end if
				// set assignedEntity code displayName
				if(typeof msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@displayName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][code][@displayName]: &apos;+msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString()); }
					objAssignedEntity.codeDisplayName= msg[&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@displayName&apos;].toString();
				} // end if
			} // end if

		
			// set assignedEntity assignedPerson name
			if(typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;] !== &apos;undefined&apos;) {
				if(debug&gt;0) { 
					logger.error(&apos;toXMLString msg[assignedEntity][assignedPerson][name][given]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].toXMLString()+
					&apos;msg[assignedEntity][assignedPerson][name][given]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].toString()+
					&apos; typeof: &apos;+typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;]+
					&apos; length: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].length()
					);
				}
				if(typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;] !== &apos;undefined&apos;) {
					// get assignedEntity Given name	
					if((typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;] !== &apos;undefined&apos;)||(msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].toString().length&gt;0)) {	
						if(debug&gt;0) { 
							logger.error(&apos;msg[assignedEntity][assignedPerson][name][given]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;][0].toString()); 
						} // end if 
						if(msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].length()&gt;1) {
							objAssignedEntity.givenName= msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;][0].toString();
						} else if(msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].length()== 1) {
							objAssignedEntity.givenName= msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;given&apos;].toString();
						} else {
							objAssignedEntity.givenName= &apos;&apos;;
						} // end if 
					} // end if 
					// get assignedEntity Family name	
					if((typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;family&apos;] !== &apos;undefined&apos;)||(msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;family&apos;].length&gt;0)) {	
						if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][assignedPerson][name][family]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;family&apos;].toString().replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;)); }
						objAssignedEntity.familyName= msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;family&apos;].toString().replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;);
					} // end if
					// get assignedEntity Suffix
					if(debug&gt;0) { logger.error(&apos;getAssignedEntity msg[assignedEntity][assignedPerson][name][suffix]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;]+
						&apos; typeof: &apos;+typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;]+
						&apos; length: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;].toString().length);
					} // end if logger.error
					if((typeof msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;] !== &apos;undefined&apos;)||(msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;].toString().length&gt;0)) {	
						if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][assignedPerson][name][suffix]: &apos;+msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;].toString()); }
						objAssignedEntity.suffix= msg[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;][&apos;name&apos;][&apos;suffix&apos;].toString();
					} // end if 
				} // end if 
			} // end if 
			
			// set assignedEntity representedOrganization
			if(typeof msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;] !== &apos;undefined&apos;) {
				// check for assignedEntity representedOrganization name child element
				if(typeof msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;name&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][representedOrganization][name]: &apos;+msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;name&apos;].toString()); }
					objAssignedEntity.representedOrganizationName= msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;name&apos;].toString();	// Walgreens Drug Store 12562
				} // end if
				
				if(typeof msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;id&apos;] !== &apos;undefined&apos;) {
					if(typeof msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;root&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[assignedEntity][representedOrganization][id][root]: &apos;+msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;root&apos;].toString()); }
						objAssignedEntity.representedOrganizationIdRoot= msg[&apos;assignedEntity&apos;][&apos;representedOrganization&apos;][&apos;id&apos;][&apos;root&apos;].toString();	// 12562
					} // end if 
				} // end if
			} // end if
		} // end if
	} // end if 

	if(objAssignedEntity.toString().length&gt;0) {
		channelMap.put(&apos;assignedEntity&apos;,objAssignedEntity);
	}
	
	return objAssignedEntity;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>e2cc3ab2-6619-43f6-b77e-bb2f56a8670f</id>
            <name>getAuthorPerson</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911325323</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getAuthorPerson(object)

  	- Desc: This function receives Javascript Object and returns AuthorPerson string
  	- Modified:
	2018-02-18 10:12 CT JER - Modified to accommodate the changes to the objAssignedEntity
  	2018-02-16 10:40 CT JER - Removed the objAuthor instances reference and left the references specific to JS Rhino XPath
  	2018-02-15 16:01 CT JER - Modified included additional typeof and for each object

   	@param {object} objAuthor - this contains the Javascript Object (object)
	@return {string} strAuthorPerson - contains authorPerson string containing the required HL7.Composite.XCN datatype and related properties.
	
	[2018-02-18 10:11:47,629]  ERROR (transformer:?): objAuthor= ({assigningAuthorityName:&quot;INLP_FIN&quot;, extension:&quot;3100004118&quot;, root:&quot;2.16.840.1.113883.3.2139.200&quot;, startTime:&quot;20180208041500&quot;, stopTime:&quot;20180208075000&quot;, dispositionCode:&quot;&quot;, dispositionCodeSystemOid:&quot;&quot;, dispositionCodeSystemName:&quot;&quot;, dispositionDisplayName:&quot;Home or Self Care&quot;, encounterParticipant_code:&quot;ATND&quot;, assignedEntity_root:&quot;2.16.840.1.113883.3.2139.300&quot;, assignedEntity_extension:&quot;8284&quot;, assignedEntity_assigningAuthorityName:&quot;LPS_ORG_DOC&quot;, assignedEntity_code:&quot;&quot;, assignedEntity_codeSystem:&quot;&quot;, assignedEntity_codeSystemName:&quot;&quot;, assignedEntity_codeDisplayName:&quot;&quot;, assignedEntity_givenName:&quot;Robert&quot;, assignedEntity_familyName:&quot;Riggs&quot;})
	
*/

function getAuthorPerson(objAuthor) {

	var debug= 0;
	var cntObject= 0;
	var strAuthorPerson= &apos;&apos;;
	if(debug&gt;0) { 
		logger.error(&quot;getAuthorPerson objAuthor= &quot;+objAuthor.toSource()); 
		// logger.error(&quot;objAuthor JSON= &quot;+JSON.stringify(objAuthor, null, 4));
	}

	if(typeof objAuthor !== &apos;undefined&apos;) {	
	
		// replaced the assignedId with assignedEntity_extension
		if(typeof objAuthor.assignedEntity_extension !== &apos;undefined&apos;) {
			if(objAuthor.assignedEntity_extension.toString().length&gt;0) {
				if(debug&gt;0) { logger.error(&apos;objAuthor.assignedEntity_extension: &apos;+objAuthor.assignedEntity_extension.toString()); }
				strAuthorPerson += objAuthor.assignedEntity_extension.toString();
			} // end if 
		} // end if 

	
		// replaced the assignedPersonLastName with assignedEntity_familyName
		if(typeof objAuthor.assignedEntity_familyName !== &apos;undefined&apos;) {
			if(debug&gt;0) { logger.error(&apos;objAuthor.assignedEntity_familyName: &apos;+objAuthor.assignedEntity_familyName.toString()); }
			if(objAuthor.assignedEntity_familyName.toString().length&gt;0) {
				strAuthorPerson += &quot;^&quot;+objAuthor.assignedEntity_familyName.toString();
			} else {
				strAuthorPerson += &quot;^&quot;;
			} // end if 
		} // end if 
		// replaced the assignedPersonFirstName with assignedEntity_givenName
		if(typeof objAuthor.assignedEntity_givenName !== &apos;undefined&apos;) {
			// replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;) to remove namespaces
			// objAuthor.assignedEntity_givenName.toString().replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;)); }
			if(debug&gt;0) { 
				logger.error(&apos;objAuthor.assignedEntity_givenName: &apos;+objAuthor.assignedEntity_givenName.toString());
			} // end if 
			if(objAuthor.assignedEntity_givenName.toString().length&gt;0) {
				// strAuthorPerson += &quot;^&quot;+objAuthor.assignedEntity_givenName.toString().replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;);
				strAuthorPerson += &quot;^&quot;+objAuthor.assignedEntity_givenName;
			} else {
				strAuthorPerson += &quot;^&quot;;
			} // end if 
		} // end if

		 
		// replace the assignedPersonSuffix with assignedEntity_suffix
		if(typeof objAuthor.assignedEntity_suffix !== &apos;undefined&apos;) {
			if(debug&gt;0) { logger.error(&apos;objAuthor.assignedEntity_suffix: &apos;+objAuthor.assignedEntity_suffix.toString()); }
			if(objAuthor.assignedEntity_suffix.toString().length&gt;0) {
				strAuthorPerson += &quot;^^&quot;+objAuthor.assignedEntity_suffix.toString();
			} else {
				strAuthorPerson += &quot;^^&quot;;
			} // end if 
		} // end if 
		// replace the assignedRoot with assignedEntity_root
		if(typeof objAuthor.assignedEntity_root !== &apos;undefined&apos;) {
			if(debug&gt;0) { logger.error(&apos;objAuthor.assignedEntity_root: &apos;+objAuthor.assignedEntity_root.toString()); }
			if (objAuthor.assignedEntity_root.toString().length&gt;0) {
				strAuthorPerson += &quot;^^^^^&amp;amp;&quot;+objAuthor.assignedEntity_root.toString()+&quot;&amp;amp;ISO&quot;;
			} else {
				strAuthorPerson += &quot;^^^^^&quot;;
			} // end if
		} // end if
	} // end if 

	if(debug&gt;0) { logger.error(&quot;getAuthorPerson.strAuthorPerson: &quot;+strAuthorPerson); }
	return strAuthorPerson;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>e7b0d95b-2bde-43e7-ab61-ea1572002360</id>
            <name>getAuthors</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911325559</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getAuthors(msg)

	- Desc: This function receives CCD msg and returns an array of Author objects 
	- Modified
	2018-02-18 13:38 CT JER - Modified to accommodate the changes to call the objAssignedAuthor function
	2018-02-10 11:32 CT JER - Verified per the HL7 Rim model 1..* assignedAuthors elements (1..* more authors) list objects persist to arrAuthors.
	2018-02-08 03:58 CT JER - Modified for additional handling verify typeof !== &apos;undefined&apos; and two conditionals to set authorInstitution property
	
	@param {String} msg - Raw msg
	@return {Array} return array of Author objects
*/
function getAuthors(msg) {
	
	var debug= 0;
	// uncertain if more than one assignedAuthor per ClinicalDocument
	if(debug&gt;0) { logger.error(&apos;getAuthor of msg[author]: &apos;+msg[&apos;author&apos;]); }
	
	var objAuthor= new Object;			
	var objAssignedAuthor= getAssignedAuthor(msg[&apos;author&apos;]);

	if(typeof objAssignedAuthor !== &apos;undefined&apos;) {
	
		// get assigningAuthorityName
		if((typeof objAssignedAuthor.assigningAuthorityName !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.assigningAuthorityName.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][id][@assigningAuthorityName]: &apos;+objAssignedAuthor.assigningAuthorityName.toString()); }
			objAuthor.IdAssigningAuthorityName= objAssignedAuthor.assigningAuthorityName.toString();
		} // end if
		// get root
		if((typeof objAssignedAuthor.root !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.root.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][id][@root]: &apos;+objAssignedAuthor.root.toString()); }
			objAuthor.Idroot= objAssignedAuthor.root.toString();
		} // end if
		// get extension
		if((typeof objAssignedAuthor.extension !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.extension.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][id][@extension]: &apos;+objAssignedAuthor.extension.toString()); }
			objAuthor.Idextension= objAssignedAuthor.extension.toString();
		} // end if			
	
		// get assignedAuthorizingDevice manufacturer -&gt; set manufacturer
		if((typeof objAssignedAuthor.assignedAuthorizingDevice_manufacturer !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.assignedAuthorizingDevice_manufacturer.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][assignedAuthoringDevice][manufacturerModelName]: &apos;+objAssignedAuthor.assignedAuthorizingDevice_manufacturer.toString()); }
			objAuthor.authorizingDevice= objAssignedAuthor.assignedAuthorizingDevice_manufacturer.toString();
		} // end if			
	
		// get assignedAuthorizingDevice softwareName -&gt; set softwareName
		if((typeof objAssignedAuthor.assignedAuthorizingDevice_softwareName !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.assignedAuthorizingDevice_softwareName.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][assignedAuthoringDevice][softwareName]: &apos;+objAssignedAuthor.assignedAuthorizingDevice_softwareName.toString()); }
			objAuthor.softwareName= objAssignedAuthor.assignedAuthorizingDevice_softwareName.toString();
		} // end if	
				
		// get objAssignedAuthor representedOrganization_assigningAuthorityName -&gt; set assigningAuthorityName
		if((typeof objAssignedAuthor.representedOrganization_assigningAuthorityName !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.representedOrganization_assigningAuthorityName.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][representedOrganization][id][assigingAuthorityName]: &apos;+objAssignedAuthor.representedOrganization_assigningAuthorityName.toString()); }
			objAuthor.representedOrganization_assigingAuthorityName= objAssignedAuthor.representedOrganization_assigningAuthorityName.toString();
		} // end if				
	
		// get objAssignedAuthor representedOrganization_extension -&gt; set extension
		if((typeof objAssignedAuthor.representedOrganization_extension !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.representedOrganization_extension.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][representedOrganization][id][extension]: &apos;+objAssignedAuthor.representedOrganization_extension.toString()); }
			objAuthor.representedOrganization_extension= objAssignedAuthor.representedOrganization_extension.toString();
		} // end if	
	
		// get objAssignedAuthor representedOrganization_root -&gt; set root
		if((typeof objAssignedAuthor.representedOrganization_root !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.representedOrganization_root.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][representedOrganization][id][root]: &apos;+objAssignedAuthor.representedOrganization_root.toString()); }
			objAuthor.representedOrganization_root= objAssignedAuthor.representedOrganization_root.toString();
		} // end if
				
		// get objAssignedAuthor.representedOrganizationName -&gt; set representedOrganizationName
		if((typeof objAssignedAuthor.representedOrganizationName !== &apos;undefined&apos;)&amp;&amp;(objAssignedAuthor.representedOrganizationName.toString().length&gt;0)) {
			if(debug&gt;0) { logger.error(&apos;msg[author][assignedAuthor][representedOrganization][name]: &apos;+objAssignedAuthor.representedOrganizationName.toString()); }
			objAuthor.authorInstitution= objAssignedAuthor.representedOrganizationName.toString();
		} // end if
	} // end if 
	
	return objAuthor;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>d3986b7b-37b0-4f49-a339-b77570df76a6</id>
            <name>getCCDASectionMap</name>
            <revision>1</revision>
            <lastModified>
              <time>1656369794466</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getCCDASectionMap(code)

  	- Desc: This function receives the templateId code and returns the mapped CCDA Section titlename

   	@param {String} msg - this contains the raw message (string)
	@return {object} objPatientRole - this contains the patientRole elements composed into a single objPatientRole object.
	
	History
*/
function getCCDASectionMap(code) {

	var debug= 0;
	var scriptName= &apos;getCCDASectionMap&apos;;
	
	if(code== &quot;2.16.840.1.113883.10.20.22.2.22&quot;) return &apos;Encounter Details&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.6&quot;)  return &apos;Allergies&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.1&quot;)  return &apos;Medications&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.5&quot;)  return &apos;Active Problems&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.2&quot;)  return &apos;Immunizations&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.17&quot;) return &apos;Social History&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.4&quot;)  return &apos;Vital Signs&apos;;
	if(code== &quot;1.3.6.1.4.1.19376.1.5.3.1.3.4&quot;)   return &apos;Progress Notes&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.65&quot;) return &apos;Miscellaneous Notes&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.10&quot;) return &apos;Plan of Treatment&apos;; 
	if(code== &quot;2.16.840.1.113883.10.20.22.2.7&quot;)  return &apos;Procedures&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.3&quot;)  return &apos;Results&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.8&quot;)  return &apos;Visit Diagnoses&apos;;
	if(code== &quot;2.16.840.1.113883.10.20.22.2.18&quot;) return &apos;Insurance&apos;;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>6fa24651-0c70-4d88-95b6-a50ba345cdfc</id>
            <name>getClinicalDocumentInfo</name>
            <revision>3</revision>
            <lastModified>
              <time>1661276497143</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getClinicalDocumentInfo(msg)

  	- Desc: This function receives CCD msg and returns clinicalDocumentInfo object
  	- Modified:
 	2018-02-10 11:20 CT JER - Modified to include capturing the SetId and versionNumber attributes

   	@param {String} msg - this contains the raw message (string)
	@return {object} objClinDocInfo - this contains a clinical document info element specific values composed into a single objClinDocInfo object.
	History 
	2022-08-23 JER - Added channelMap to capture the CCDA Document Header Information
	2021-09-20 JER - Modified to incorporate logger.error prior to returning function value
*/
function getClinicalDocumentInfo(msg) {
	var scriptName= &apos;getClinicalDocumentInfo&apos;;
	var debug= 0;
	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function BEGIN msg: &apos;+msg); }
		
		var objClinDocInfo= new Object();
		
		objClinDocInfo.extension=				msg[&apos;id&apos;][&apos;@extension&apos;].toString();
		objClinDocInfo.root=					msg[&apos;id&apos;][&apos;@root&apos;].toString();	
		objClinDocInfo.assigningAuthorityName=		msg[&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString();
		objClinDocInfo.code=					msg[&apos;code&apos;][&apos;@code&apos;].toString();
		objClinDocInfo.codeSystemOid=				msg[&apos;code&apos;][&apos;@codeSystem&apos;].toString();
		objClinDocInfo.codeSystemName=			msg[&apos;code&apos;][&apos;@codeSystemName&apos;].toString();
		objClinDocInfo.displayName=				msg[&apos;code&apos;][&apos;@displayName&apos;].toString();
		objClinDocInfo.title=					msg[&apos;title&apos;].toString();
		objClinDocInfo.creationTime=				msg[&apos;effectiveTime&apos;][&apos;@value&apos;].toString().substring(0,14);
		objClinDocInfo.confCode=					msg[&apos;confidentialityCode&apos;][&apos;@code&apos;].toString();
		objClinDocInfo.confCodeSystemOid=			msg[&apos;confidentialityCode&apos;][&apos;@codeSystem&apos;].toString();
		objClinDocInfo.languageCode=				msg[&apos;languageCode&apos;][&apos;@code&apos;].toString();
		objClinDocInfo.setIdExtension=			msg[&apos;setId&apos;][&apos;@extension&apos;].toString();
		objClinDocInfo.setIdRoot=				msg[&apos;setId&apos;][&apos;@root&apos;].toString();	
		objClinDocInfo.setIdAssigningAuthorityName=	msg[&apos;setId&apos;][&apos;@assigningAuthorityName&apos;].toString();
		objClinDocInfo.documentVersion=			msg[&apos;versionNumber&apos;][&apos;@value&apos;].toString();

		// 2022-08-23 JER - Added channelMap to capture the CCDA Document Header Information
		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function objClinDocInfo: &apos;+JSON.stringify(objClinDocInfo)); }
		channelMap.put(&apos;ClinDocInfo&apos;,JSON.stringify(objClinDocInfo));
		
		return objClinDocInfo;

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>70cd4591-c02c-43e3-8da1-b6c7f3debd3b</id>
            <name>getCustodian</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911325472</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getCustodian(msg)

	- Desc: This function receives CCD msg and returns an array of custodian objects 
	- Modified
	2018-02-11 17:49 CT JER - Newly created to store the custodian objects

	@param {String} msg - Raw msg
	@return {Array} return array of custodian objects
*/
function getCustodian(msg) {
	
	var debug= 0;
	var objCounter= 1;
	var arrCustodian= new Array();

	// uncertain if more than one assignedCustodians per ClinicalDocument
	for each(custodian in msg[&apos;custodian&apos;][0]) {
		var objCustodian= new Object;
		objCustodian.id= objCounter;
		if(custodian.children().length()&gt;0) {
			if(debug&gt;0) { logger.error(&apos;custodian children()= &apos;+custodian.children()); }
			for each(child in custodian.children()) {
				// each assignedCustodian
				if(child.localName()== &apos;assignedCustodian&apos;) {
					// &lt;id assigningAuthorityName=&quot;HMS HOSPITAL NUMBER&quot; extension=&quot;134&quot; root=&quot;2.16.840.1.113883.3.1579.834848495152.134.500&quot;/&gt;
					if(typeof child.representedCustodianOrganization.id !== &apos;undefined&apos;) {
						objCustodian.representedOrganization_AssignAuthorityName=	child.representedCustodianOrganization.id.@assigningAuthorityName.toString();
						objCustodian.representedOrganization_Extension=  			child.representedCustodianOrganization.id.@extension.toString();
						objCustodian.representedOrganization_Root=  				child.representedCustodianOrganization.id.@root.toString();
					} // end if
					// e.g &lt;name&gt;HILL REGIONAL HOSPITAL&lt;/name&gt;
					if(typeof child.representedOrganziation.name !== &apos;undefined&apos;) {
						objCustodian.representedOrganization=					child.representedCustodianOrganization.name.toString();
					}
					// &lt;telecom use=&quot;WP&quot; value=&quot;tel:(254)580-8500&quot;/&gt;
					if(typeof child.representedOrganziation.telecom !== &apos;undefined&apos;) {
						objCustodian.representedOrganization_telecom=			child.representedCustodianOrganization.telecom.@value.toString();
					}
					// &lt;addr use=&quot;WP&quot;&gt;&lt;streetAddressLine&gt;101 CIRCLE DRIVE&lt;/streetAddressLine&gt;&lt;city&gt;HILLSBORO&lt;/city&gt;&lt;state&gt;TX&lt;/state&gt;&lt;postalCode&gt;766450000&lt;/postalCode&gt;&lt;/addr&gt;
					if(typeof child.representedOrganziation.addr !== &apos;undefined&apos;) {
						objCustodian.representedOrganization_streetAddress=				child.representedCustodianOrganization.addr.streetAddressLine.toString();
						objCustodian.representedOrganization_city=						child.representedCustodianOrganization.addr.city.toString();
						objCustodian.representedOrganization_state=						child.representedCustodianOrganization.addr.state.toString();
						objCustodian.representedOrganization_postalCode=					child.representedCustodianOrganization.addr.postalCode.toString();
					} // end if
				}
			} // end for each
		} // end if 
		objCounter++;
	} // end for each
	arrCustodian.push(objCustodian);

	return arrCustodian;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>b0e1a23f-7003-4f27-a819-985f89f80e87</id>
            <name>getEncounter</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911325138</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getEncounter(msg)

  	- Desc: This function receives CCD msg and returns Encounter object
  	- Modified
  	2018-02-18 20:23 CT JER - Modified to include the addition of healthcareFacility Location Name - use for HealthcareFacilityTypeCode displayName
  	2018-02-16 17:33 CT JER - Added association to the getAssignedEntity to retrieve the assignedEntity related elements and attributes
  	2018-02-16 15:55 CT JER - Added handling for DischargeDisposition elements and attributes
  	2018-02-11 17:34 CT JER - Modified startTime and stopTime by applying the substring(0,14) function to remove the datetime offset
  	2018-02-10 11:27 CT JER - Corrected the setting of the objEncounter extension, root, startTime and stopTime
  	

   	@param {String} msg - this contains the raw message (string)
	@return {object} objEncounter - contains objEncounter object and related properties.
*/

function getEncounter(msg) {

var debug= 0;

	if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;] !== &apos;undefined&apos;) {
		if(msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;].children().length()&gt;0) {
			var objEncounter= new Object;
			
			// &lt;id assigningAuthorityName=&quot;HMS PATIENT ACCOUNT NUMBER&quot; extension=&quot;3480487&quot; root=&quot;2.16.840.1.113883.3.1579.834848495152.134.300&quot;/&gt;
			if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;] !== &apos;undefined&apos;) {
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][id][@assigningAuthorityName]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString()); }
					objEncounter.assigningAuthorityName= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString();
				} // end if
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@extension&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][id][@extension]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@extension&apos;].toString()); }
					objEncounter.extension= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
				} // end if
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@root&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][id][@root]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@root&apos;].toString()); }
					objEncounter.root= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;id&apos;][&apos;@root&apos;].toString();
				} // end if
			} // end if
			
			// &lt;effectiveTime&gt;&lt;low value=&quot;20180203075200-0600&quot;/&gt;&lt;high value=&quot;20180203075200-0600&quot;/&gt;&lt;/effectiveTime&gt;
			if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;] !== &apos;undefined&apos;) {
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;low&apos;][&apos;@value&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][effectiveTime][low][@value]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;low&apos;][&apos;@value&apos;].toString()); }
					objEncounter.startTime= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;low&apos;][&apos;@value&apos;].toString().substring(0,14);
				} // end if
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;high&apos;][&apos;@value&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][effectiveTime][high][@value]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;high&apos;][&apos;@value&apos;].toString()); }
					objEncounter.stopTime= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;effectiveTime&apos;][&apos;high&apos;][&apos;@value&apos;].toString().substring(0,14);
				} // end if
			} // end if
			
			//  &lt;dischargeDispositionCode code=&quot;1&quot; codeSystem=&quot;2.16.840.1.113883.12.112&quot; codeSystemName=&quot;HL7 Discharge Disposition&quot; displayName=&quot;DISCHARGED HOME/SELF CARE&quot;/&gt;
			if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;] !== &apos;undefined&apos;) {
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@code&apos;] !== &apos;undefined&apos;) {
					// get DischargeDisposition Code
					if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@code&apos;] !== &apos;undefined&apos;) {&#xd;						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][dischargeDispositionCode][@code]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@code&apos;].toString()); }
						objEncounter.dispositionCode= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@code&apos;].toString();
					} // end if
					// get DischargeDisposition CodeSystemOid
					if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystem&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][dischargeDispositionCode][@codeSystem]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystem&apos;].toString()); }
						objEncounter.dispositionCodeSystemOid= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystem&apos;].toString();
					} // end if
					// get DischargeDisposition CodeSystemName
					if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystemName&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][dischargeDispositionCode][@codeSystemName]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystemName&apos;].toString()); }						
						objEncounter.dispositionCodeSystemName= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@codeSystemName&apos;].toString();
					} // end if
					// get DischargeDisposition DisplayName
					if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@displayName&apos;] !== &apos;undefined&apos;) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][dischargeDispositionCode][@displayName]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@displayName&apos;].toString()); }
						objEncounter.dispositionDisplayName= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;@displayName&apos;].toString();
					} // end if
				} // end if 
				// get DischargeDisposition originalText
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;originalText&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][dischargeDispositionCode][originalText]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;originalText&apos;].toString()); }
					objEncounter.dispositionDisplayName= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;dischargeDispositionCode&apos;][&apos;originalText&apos;].toString();
				} // end if 
			} // end if 	
				
			// get encounterParticipant assignedEntity
			if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;encounterParticipant&apos;] !== &apos;undefined&apos;) {
					
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;encounterParticipant&apos;][&apos;@typeCode&apos;] !== &apos;undefined&apos;) {
					if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][@typeCode]: &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;encounterParticipant&apos;][&apos;@typeCode&apos;].toString()); }
					objEncounter.encounterParticipant_code= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;encounterParticipant&apos;][&apos;@typeCode&apos;].toString();
				} // end if
				
				// call getAssignedEntity
				var objAssignedEntity= getAssignedEntity(msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;encounterParticipant&apos;]);
				if(objAssignedEntity !== &apos;undefined&apos;) {
				
					// get assignedEntity Root
					if(objAssignedEntity.root != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][id][@root]: &apos;+objAssignedEntity.root.toString()); }
						objEncounter.assignedEntity_root= objAssignedEntity.root.toString();
					} // end if
					// get assignedEntity Extension
					if(objAssignedEntity.extension != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][id][@extension]: &apos;+objAssignedEntity.extension.toString()); }
						objEncounter.assignedEntity_extension= objAssignedEntity.extension.toString();
					} // end if
					// get assignedEntity AssigningAuthorityName
					if(objAssignedEntity.assigningAuthorityName != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][id][@assigningAuthorityName]: &apos;+objAssignedEntity.assigningAuthorityName.toString()); }
						objEncounter.assignedEntity_assigningAuthorityName= objAssignedEntity.assigningAuthorityName.toString();
					} // end if
					
					// get assignedEntity code
					if(objAssignedEntity.code != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][code][@code]: &apos;+objAssignedEntity.code.toString()); }
						objEncounter.assignedEntity_code= objAssignedEntity.code.toString();
					} // end if
					// get assignedEntity codeSystem
					if(objAssignedEntity.codeSystem != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][code][@codeSystem]: &apos;+objAssignedEntity.codeSystem.toString()); }
						objEncounter.assignedEntity_codeSystem= objAssignedEntity.codeSystem.toString();
					} // end if
					// get assignedEntity codeSystemName
					if(objAssignedEntity.codeSystemName != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][code][@codeSystemName]: &apos;+objAssignedEntity.codeSystemName.toString()); }
						objEncounter.assignedEntity_codeSystemName= objAssignedEntity.codeSystemName.toString();
					} // end if
					// get assignedEntity displayName
					if(objAssignedEntity.codeDisplayName != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][code][@displayName]: &apos;+objAssignedEntity.codeDisplayName.toString()); }
						objEncounter.assignedEntity_codeDisplayName= objAssignedEntity.codeDisplayName.toString();
					} // end if

					// get assignedEntity Author GivenName
					if(objAssignedEntity.givenName != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][assignedPerson][name][@given]: &apos;+objAssignedEntity.givenName.toString()); }
						objEncounter.assignedEntity_givenName= objAssignedEntity.givenName.toString();
					} // end if
					// get assignedEntity Author FamilyName
					if(objAssignedEntity.familyName != null) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][encounterParticipant][assignedEntity][assignedPerson][name][@family]: &apos;+objAssignedEntity.familyName.toString()); }
						objEncounter.assignedEntity_familyName= objAssignedEntity.familyName.toString();
					} // end if					
				} // end if 
			} // end if 
			
			// get HealthcareFacilityTypeCode
			if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthCareFacility&apos;] !== &apos;undefined&apos;) {
	
				// set healthcareFacility classCode
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;@classCode&apos;] !== &apos;undefined&apos;) {
					if((typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;@classCode&apos;] != null)&amp;&amp;(msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;@classCode&apos;].toString().length&gt;0)) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][location][healthcareFacility][@classCode].toString(): &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;@classCode&apos;].toString()); }
						objEncounter.healthcareFacility_classCode= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;@classCode&apos;].toString();
					} // end if 
				} // end if

				// set healthcareFacility Location 
				if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;] !== &apos;undefined&apos;) {
	
					// set healthcareFacility Location classCode
					if((typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;@classCode&apos;] != null)&amp;&amp;(msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;@classCode&apos;].toString().length&gt;0)) {
						if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][location][healthcareFacility][location][@classCode].toString(): &apos;+msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;@classCode&apos;].toString()); }
						objEncounter.healthcareFacilityLocation_classCode= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;@classCode&apos;].toString();
					} // end if 

					// set healthcareFacility Location Name - use for HealthcareFacilityTypeCode displayName
					if(typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;name&apos;] !== &apos;undefined&apos;) {
						if((typeof msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;name&apos;] != null)&amp;&amp;(msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;name&apos;].toString().length&gt;0)) {
							if(debug&gt;0) { logger.error(&apos;msg[componentOf][encompassingEncounter][location][healthcareFacility][location][name].toString(): &apos;+msg.componentOf.encompassingEncounter.location.healthcareFacility.location.name.toString()); }
							objEncounter.healthcareFacilityLocation_name= msg[&apos;componentOf&apos;][&apos;encompassingEncounter&apos;][&apos;location&apos;][&apos;healthcareFacility&apos;][&apos;location&apos;][&apos;name&apos;].toString();
							channelMap.put(healthcareFacilityDisplayName,objEncounter.healthcareFacilityLocation_name);
						} // end if 
					} // end if
				} // end if 
			} // end if 
		} // end if 
	} // end if
		
	return objEncounter;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>811b8224-4f41-4d15-8869-bbc5083c5533</id>
            <name>getEncounterDetails</name>
            <revision>9</revision>
            <lastModified>
              <time>1657116996485</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**  getEncounterDetails(object) - Desc: This function evaluates the Encounter Details Section of the CCDA to create arrObservations array of objObservations objects 

   	@param {String} msg - this contains the raw message (string)
	@return {object} objPatientRole - this contains the patientRole elements composed into a single objPatientRole object.
	
	History
	2021-09-20 JER - Modified to incorporate evaluation of multiple patientRole Id(s) in the case there are multiple patient identifiers
	2021-09-20 JER - Modified to patient.name incorporate evaluation of multiple patient name child elements in the case there are multiple patient identifiers
*/
function getEncounterDetails(section) {

	// define variables
	var debug= 0;
	var scriptName= &apos;getEncounterDetails&apos;;
	var arrObservations= [];
	
	// if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(section)= &apos;+typeof(section)+&apos; section= &apos;+section); 
	// }

	logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A&apos;+&apos;\n&apos;);
	
	if (typeof(section[&apos;entry&apos;][&apos;encounter&apos;][&apos;entryRelationship&apos;][&apos;act&apos;] !== &apos;undefined&apos;)) {
		
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B act.children()= &apos;+section[&apos;entry&apos;][&apos;encounter&apos;][&apos;entryRelationship&apos;][&apos;act&apos;].children()+&apos;\n&apos;);
		
		var cnt= 0;
		for(child in section[&apos;entry&apos;][&apos;encounter&apos;][&apos;entryRelationship&apos;][&apos;act&apos;].children()) {
			
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C&apos;+&apos;\n&apos;);
			
			if(child.localName()== &apos;entryRelationship&apos;) {
				if (child[&apos;@typeCode&apos;].toString() == &apos;SUBJ&apos;) {
					
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D&apos;+&apos;\n&apos;);
					var objObservation= new Object();
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos;: entryRelationship.act= &apos;+entryRelationship[&apos;@typeCode&apos;].toString()+&apos; of entryRelationship= &apos;+entryRelationship);
					objObservation.id= cnt;
					objObservation.typeCode= &apos;SUBJ&apos;;

					cnt++;
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos;: objObservation= &apos;+objObservation);
					arrObservations.push(objObservation);
				}
			}
		}
	}
	
	channelMap.put(&apos;arrObservations&apos;,arrObservations);
	return arrObservations;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>f9d47f7b-aeaa-4232-a93c-99e8045a89e0</id>
            <name>getEthnicGroupCode</name>
            <revision>14</revision>
            <lastModified>
              <time>1661352317364</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**  getEthnicGroupCode(ethnicity) - Desc: This function receives CCD/CCDA msg and returns from getEthnicGroupCode Object

   	@param {String} msg - this contains the raw message (string)
	@return {object} objEthnicity - this contains the elements composed into a single objEthnicity object.
	
	History
	2022-08-21 JER - Handling of nullFlavor property with UNK value
	2022-08-17 JER - Modifying arrEthnicity from array to objEthnicity as a singular object
	2021-09-20 JER - leveraging the getTelecom for getEthnicGroupCode script
*/
function getEthnicGroupCode(ethnicity) {
 
	// define variables
	var debug= 0;
	var scriptName= &apos;getEthnicGroupCode&apos;;
	// var arrEthnicity= new Array();
	
	if(debug&gt;0) { logger.error(scriptName+&apos; ethnicity= &apos;+ethnicity); }
	if (typeof(ethnicity) !== &apos;undefined&apos;) {

		if(debug&gt;0) { 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; object.length= &apos;+ethnicity.length+&apos; value= &apos;+ethnicity);
		}
		
		var j= 0;
		for(var i= 0;i&lt;ethnicity.length();i++) {

			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(ethnicity[&apos;+i+&apos;][@code])= &apos;+typeof(ethnicity[i][&apos;@code&apos;])+&apos; ethnicity[@code]= &apos;+ethnicity[i][&apos;@code&apos;]);
			}

			var objEthnicity= new Object();
			// 2022-08-19 JER - Added evaluation of code if undefined or has toString gt zero (0) 
			if((typeof(ethnicity[i][&apos;@code&apos;])!== &apos;undefined&apos;)&amp;&amp;(ethnicity[i][&apos;@code&apos;].toString().length&gt;0)) {

				if(debug&gt; 0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; ethnicity[&apos;+i+&apos;][@code]: &apos;+ethnicity[i][&apos;@code&apos;].toString()); }
					
				objEthnicity.id= j;
				objEthnicity.code= ethnicity[i][&apos;@code&apos;].toString();
				objEthnicity.codeSystem= ethnicity[i][&apos;@codeSystem&apos;].toString();
				objEthnicity.codeSystemName= ethnicity[i][&apos;@codeSystemName&apos;].toString();
				objEthnicity.displayName= ethnicity[i][&apos;@displayName&apos;].toString();

			} else {
				logger.error(&apos;B&apos;);
				if(debug&gt; 0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; ethnicity[&apos;+i+&apos;][@code]: &apos;+ethnicity[i][&apos;@code&apos;].toString()); }
					
				objEthnicity.id= j;
				objEthnicity.code= &apos;LA4489-6&apos;;
				objEthnicity.codeSystem= &apos;1.3.6.1.4.1.12009.10.1.1817&apos;;
				objEthnicity.codeSystemName= &apos;LOINC UCUM Codes for Electronic Messaging&apos;
				objEthnicity.displayName= &apos;Unknown&apos;
					
				if(debug&gt;0) {
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function objEthnicity: &apos;+JSON.stringify(objEthnicity));
				}
			} // end if 
				
			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function objEthnicity: &apos;+JSON.stringify(objEthnicity)); 
			}
			j++;
		} // for each address element 

		//2022-08-17 JER - Modifying arrEthnicity from array to objEthnicity as a singular object
		// channelMap.put(&apos;arrEthnicity&apos;,JSON.stringify(arrEthnicity));
		// return arrEthnicity;
		if(objEthnicity) {
			return objEthnicity;
		} // end if 
	} else {
		return;
	} // end if 
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>b6a4ff9d-f944-409f-8d73-46f34fa598dc</id>
            <name>getLanguageCommunication</name>
            <revision>3</revision>
            <lastModified>
              <time>1660773608059</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**  getLanguageCommunication(language) - Desc: This function receives CCD/CCDA msg and returns from getLanguageCommunication Object

   	@param {String} msg - this contains the raw message (string)
	@return {object} objLanguage - this contains the elements composed into a single objLanguage object.
	
	History
	2022-08-17 JER - Modifying arrLanguage from array to objLanguage as a singular object
	2021-09-20 JER - leveraging the getTelecom for getLanguageCommunication script
*/
function getLanguageCommunication(language) {
 
	// define variables
	var debug= 0;
	var scriptName= &apos;getLanguageCommunication&apos;;
	// var arrLanguage= new Array();
	
	if(debug&gt;0) { logger.error(scriptName+&apos; language= &apos;+language); }
	if (typeof(language) !== &apos;undefined&apos;) {

		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; object.length= &apos;+language.length()+&apos; value= &apos;+language);	}			
		
		if(language[&apos;languageCode&apos;].length()&gt;0) {
			// for each language element
			var j= 0;
			for(var i= 0;i&lt;language[&apos;languageCode&apos;].length();i++) {

				var objLanguage= new Object();
				// objLanguage.id= j;
				if(language[&apos;languageCode&apos;][i][&apos;@code&apos;].toString().length&gt;0) {
					
					if(debug&gt; 0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; language[languageCode][&apos;+i+&apos;][@code]: &apos;+language[&apos;languageCode&apos;][i][&apos;@code&apos;].toString()); }
					
					objLanguage.code= language[&apos;languageCode&apos;][i][&apos;@code&apos;].toString();
					objLanguage.codeSystem= language[&apos;languageCode&apos;][i][&apos;@codeSystem&apos;].toString();
					objLanguage.codeSystemName= language[&apos;languageCode&apos;][i][&apos;@codeSystemName&apos;].toString();
					objLanguage.displayName= language[&apos;languageCode&apos;][i][&apos;@displayName&apos;].toString();
				} // end if 

				// 2022-08-17 JER - Modifying arrLanguage from array to objLanguage as a singular object
				// arrLanguage.push(objLanguage);
				
				//} // for each child element
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function objLanguage: &apos;+JSON.stringify(objLanguage)); }
				j++;
			} // for each address element 
		} // end if 

		// 2022-08-17 JER - Modifying arrLanguage from array to objLanguage as a singular object
		// channelMap.put(&apos;arrLanguage&apos;,JSON.stringify(arrLanguage));
		// return arrLanguage;
		return objLanguage;
	} else {
		return;
	} // end if 
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>f9b60e30-9568-4d8e-8a7a-e3760ff98cf2</id>
            <name>getParticipant</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911325443</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getParticipant(msg)

  	- Desc: This function receives CCD msg and returns Participant objects
  	- Modified
	2019-11-21 CT JER - Copy of the getPerformer function

   	@param {String} msg - this contains the raw message (string)
	@return {array} arrParticipant - contains arrParticipant array contains objParticipant objects and related properties.
*/

function getParticipant(msg) {

	var debug= 0;
	var arrParticipant= new Array();

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; msg[component][structuredBody][component][section][entry]..*[participant]: &apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][&apos;section&apos;][&apos;entry&apos;]..*[&apos;participant&apos;].toXMLString()); 
		logger.error(&apos;DEBUG::&apos;+strFunctionName+&apos; msg[component][structuredBody][component][section][entry]..*[participant][@addr]: &apos;+msg[&apos;component&apos;][&apos;structuredBody&apos;][&apos;component&apos;][&apos;section&apos;][&apos;entry&apos;]..*[&apos;participant&apos;][&apos;@addr&apos;].toXMLString()); 
	} // end if 
	
	for each (participant in msg[component][structuredBody][component][section][entry]..*[participant]) {
	
		if((participant !== &apos;undefined&apos;)&amp;&amp;(participant.toString().length()&gt;0)) {
			var strPartCount= 0;
			if(debug&gt;0) { logger.error(&apos;participant[&apos;+strPartCount+&apos;]: &apos;+participant); }
			
			var objParticipant= new Object;
			if(participant.children().length()&gt;0) {
					
					if(debug&gt;0) { logger.error(&apos;Participant.children().length: &apos;+participant.children().length()+&apos; children names: &apos;+participant.children()); }
					// str = str.replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;);
					
					if(participant[&apos;addr&apos;] != null) {
						// check for functionCode element and it&apos;s attributes
						if(typeof participant[&apos;addr&apos;] !== &apos;undefined&apos;) {
							// check for functionCode code attribute
							if(participant[&apos;addr&apos;].toString().length&gt;0) {
								// get Participant Address
								if(debug&gt;0) { logger.error(&apos;participant[addr].toString(): &apos;+participant[&apos;addr&apos;].toXMLString()); }
								objParticipant.addr= participant[&apos;addr&apos;].toString();				// PP
							} // end if 
						} // end if 
						
					} // end if 

				} // end if
			//} // end if 
			arrParticipant.push(objParticipant);
			strPartCount++;
		} // end for each
	} // end if
	channelMap.put(&apos;objParticipant&apos;,arrParticipant);
	return arrParticipant;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>ddf9102b-8eaa-451e-875c-d359ef078c35</id>
            <name>getPatientRole</name>
            <revision>28</revision>
            <lastModified>
              <time>1660679866865</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getPatientRole(msg)

  	- Desc: This function receives CCD msg and returns from patientRole Object

   	@param {String} msg - this contains the raw message (string)
	@return {object} objPatientRole - this contains the patientRole elements composed into a single objPatientRole object.
	
	History
	2022-08-16 JER - Removed this code from the getPatientRole and add to the channel transformer separate these values from the patientRole object
	2022-08-14 JER - Modified/Add the patient/raceCode, patient/ethnicGroupCode and patient/languageCommunication coded element
	2022-07-28 JER - Modified to evaluate multiple name.given elements with the first as firstName and secondary elements as middleNames
	2021-09-20 JER - Modified to incorporate evaluation of multiple patientRole Id(s) in the case there are multiple patient identifiers
	2021-09-20 JER - Modified to patient.name incorporate evaluation of multiple patient name child elements in the case there are multiple patient identifiers
*/
function getPatientRole(msg) {

	// define variables
	var debug= 0;
	var scriptName= &apos;getPatientRole&apos;;
	var arrPatientIds= new Array();
	default xml namespace = new Namespace(&apos;urn:hl7-org:v3&apos;);
	
	if(debug&gt;0) { logger.error(scriptName+&apos; msg= &apos;+msg); }
	if (typeof(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;].toString()) !== &apos;undefined&apos;) {

		var objPatientRole= new Object();
		
		// 2021-09-20 JER - Modified to incorporate evaluation of multiple patientRole Id(s) in the case there are multiple patient identifiers
		if (typeof(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;]) !== &apos;undefined&apos;) {
			
			if(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;].length()&gt;0) {
				if(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;].length()&gt; 1) {
					for each(child in msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;]) {
					
						var objPatientId= new Object();
						objPatientId.patientId=						child[&apos;@extension&apos;].toString();
						objPatientId.assigningAuthorityOid=			child[&apos;@root&apos;].toString();
						objPatientId.assigningAuthorityName= 			child[&apos;@assigningAuthorityName&apos;].toString();
						arrPatientIds.push(objPatientId);
						if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function evaluate recordTarget.patientRole.Id objPatientId: &apos;+JSON.stringify(objPatientId)); }
					
					} // end for each 
					objPatientRole.patientIds=		arrPatientIds;
				} else {
					objPatientRole.patientId=					msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
					objPatientRole.assigningAuthorityOid=			msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;][&apos;@root&apos;].toString();
					objPatientRole.assigningAuthorityName= 			msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;id&apos;][&apos;@assigningAuthorityName&apos;].toString();;
				}
			} // end if 
		} // end if 

		objPatientRole.address= getAddress(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;addr&apos;])
		
		// 2021-09-20 JER - Modified to patient.name incorporate evaluation of multiple patient name child elements in the case there are multiple patient identifiers
		for(var i= 0;i&lt;msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;].length();i++) {
			
			if (typeof(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][i]) !== &apos;undefined&apos;) {
				if(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][i][&apos;@use&apos;] == &apos;L&apos;) {

					if(debug&gt;0) { 
						logger.error(&apos;recordTarget.patientRole.patient.name= &apos;+JSON.stringify(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][0].toString())); 
					}
					// 2022-07-28 JER - Modified to evaluate multiple name.given elements with the first as firstName and secondary elements as middleNames
					objPatientRole.lastName=	msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][i][&apos;family&apos;].toString();
					for(var j= 0;j&lt;msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][i][&apos;given&apos;].length();j++) {
						if(j==0) {
							objPatientRole.firstName=	msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][i][&apos;given&apos;][j].toString();
						} else {
							objPatientRole.middleName=	msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;name&apos;][i][&apos;given&apos;][j].toString();
						}
					} // end for 
				} // end if 
			} // end if
			 
		} // end for

		objPatientRole.gender=			msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;administrativeGenderCode&apos;][&apos;@code&apos;].toString();
		objPatientRole.dateOfBirth=		msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;birthTime&apos;][&apos;@value&apos;].toString();
		// objPID.dateOfBirth=			convertDate(msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].text().toString(),&quot;MM-dd-yyyy&quot;);
		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; phoneNumber= &apos;+msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;telecom&apos;]); }
		objPatientRole.telecom=			getTelecom(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;telecom&apos;]);
		// objPatientRole.phoneNumber=	msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;telecom&apos;][&apos;@value&apos;].toString();

		/* 2022-08-16 JER - Removed this code from the getPatientRole and add to the channel transformer separate these values from the patientRole object */
		/*
		// 2022-08-14 JER - Modified/Add the patient/raceCode coded element
		if(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;raceCode&apos;]) {
			objPatientRole.race= 		getRaceCode(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;raceCode&apos;]);
		} // end if
		
		// 2022-08-14 JER - Modified/Add the patient/ethnicGroupCode coded element
		if(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;ethnicGroupCode&apos;]) {
			objPatientRole.ethnicity= 	getEthnicGroupCode(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;ethnicGroupCode&apos;]);
		} // end if 

		// 2022-08-14 JER - Modified/Add the patient/languageCommunication coded element
		if(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;languageCommunication&apos;]) {
			objPatientRole.language= 	getLanguageCommunication(msg[&apos;recordTarget&apos;][&apos;patientRole&apos;][&apos;patient&apos;][&apos;languageCommunication&apos;]);
		} // end if 
		*/
		
		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;function F objPatientRole: &apos;+JSON.stringify(objPatientRole)); }
		channelMap.put(&apos;objPatientRole&apos;,objPatientRole);
		return objPatientRole;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>ceb659b6-95fb-4a37-8bb1-7198343b0976</id>
            <name>getPerformer</name>
            <revision>5</revision>
            <lastModified>
              <time>1657116983503</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getPerformer(msg)

  	- Desc: This function receives CCD msg and returns Performer objects
  	- Modified
	2018-02-16 18:21 CT JER - Modified call the getAssignedEntity function to reference the serviceEvent\assignedEntity child elements and attributes instead of using XPath assignments - reusability of the getAssignedEntities
	2018-02-16 10:40 CT JER - Corrected typo error still referencing performerChild object no longer in reference/deprecated usage of performer[&apos;functionCode&apos;][&apos;@displayName&apos;] XPath reference
	2018-02-15 08:37 CT JER - Modified changed from usage of children(), child and attribute XML ECMAScript E4X calls to specific XMLPath calls
  	2018-02-14 17:19 CT JER - Modified to provide additional handling typeof != &apos;undefined&apos; on the functionCode element and child elements and their attributes
	2018-02-07 11:44 CT JER - Modified for additional handling verify typeof !== &apos;undefined&apos;

   	@param {String} msg - this contains the raw message (string)
	@return {array} arrPerformer - contains arrPerformer array contains objPerformer objects and related properties.
*/

function getPerformer(msg) {

	var debug= 0;
	var arrPerformer= new Array();

	if(msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;] !== &apos;undefined&apos;) {
		var strPerfCount= 0;
		for each (performer in msg[&apos;documentationOf&apos;][&apos;serviceEvent&apos;][&apos;performer&apos;][0]) {
			if(debug&gt;0) { logger.error(&apos;performer[&apos;+strPerfCount+&apos;]: &apos;+performer); }
			//if(typeof performer !== &apos;undefined&apos;) {
				var objPerformer= new Object;
				if(performer.children().length()&gt;0) {
					
					if(debug&gt;0) { logger.error(&apos;Performer.children().length: &apos;+performer.children().length()+&apos; children names: &apos;+performer.children()); }
					// str = str.replace(/xmlns=\&quot;(.*?)\&quot;/g, &apos;&apos;);
					
					if(performer[&apos;functionCode&apos;][&apos;@code&apos;] != null) {
						// check for functionCode element and it&apos;s attributes
						if(typeof performer[&apos;functionCode&apos;][&apos;@code&apos;] !== &apos;undefined&apos;) {
							// check for functionCode code attribute
							if(performer[&apos;functionCode&apos;][&apos;@code&apos;].toString().length&gt;0) {
								// get Provider Role
								if(debug&gt;0) { logger.error(&apos;performer[functionCode][@code].toString(): &apos;+performer[&apos;functionCode&apos;][&apos;@code&apos;].toString()); }
								objPerformer.functionCode= performer[&apos;functionCode&apos;][&apos;@code&apos;].toString();				// PP
							} // end if 
						} // end if 
						// check for functionCode displayName attribute
						if(typeof performer[&apos;functionCode&apos;][&apos;@displayName&apos;] !=null) {
							// check for functionCode displayName attribute
							if(performer[&apos;functionCode&apos;][&apos;@displayName&apos;].toString().length&gt;0) {
								// get Provider Role
								if(debug&gt;0) { logger.error(&apos;performer[functionCode][@displayName].toString(): &apos;+performer[&apos;functionCode&apos;][&apos;@displayName&apos;].toString()); }
								objPerformer.functionDisplayNmae= performer[&apos;functionCode&apos;][&apos;@displayName&apos;].toString();						// PP
							} // end if 
						} // end if 
						if(typeof performer[&apos;functionCode&apos;][&apos;@codeSystem&apos;] !=null) {
							// check for functionCode codeSystem attribute
							if(performer[&apos;functionCode&apos;][&apos;@codeSystem&apos;].toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[functionCode][@codeSystem].toString(): &apos;+performer[&apos;functionCode&apos;][&apos;@codeSystem&apos;].toString()); }
								objPerformer.functionCodeSystem= performer[&apos;functionCode&apos;][&apos;@codeSystem&apos;].toString(); 		// 2.16.840.1.113883.12.443
							} // end if 
						} // end if
					} // end if

					channelMap.put(&apos;Performer&apos;,objPerformer);

					var objAssignedEntity= getAssignedEntity(performer);
					if(objAssignedEntity !== &apos;undefined&apos;) {
						
						// check for assignedEntity id assigningAuthorityName 
						if(typeof objAssignedEntity.assigningAuthorityName !== &apos;undefined&apos;) {
							if(objAssignedEntity.assigningAuthorityName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][id][@assigningAuthorityName].toString(): &apos;+objAssignedEntity.assigningAuthorityName.toString()); }
								objPerformer.assignedEntity_assigningAuthorityName= objAssignedEntity.assigningAuthorityName.toString(); 		// 2.16.840.1.113883.12.443
							} // end if							
						} // end if 
						
						// check for assignedEntity id root 
						if(typeof objAssignedEntity.root !== &apos;undefined&apos;) {
							if(objAssignedEntity.root.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][id][@root].toString(): &apos;+objAssignedEntity.root.toString()); }
								objPerformer.assignedEntity_root= objAssignedEntity.root.toString(); 		// 2.16.840.1.113883.12.443
							} // end if							
						} // end if 

						// check for assignedEntity id extension 
						if(typeof objAssignedEntity.extension !== &apos;undefined&apos;) {
							if(objAssignedEntity.extension.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][id][@extension].toString(): &apos;+objAssignedEntity.extension.toString()); }
								objPerformer.assignedEntity_extension= objAssignedEntity.extension.toString(); 		// 2.16.840.1.113883.12.443
							} // end if							
						} // end if 

						
						// &lt;code code=&quot;208D00000X&quot; codeSystem=&quot;2.16.840.1.113883.6.101&quot; codeSystemName=&quot;NUCC Health Care Provider Taxonomy&quot; displayName=&quot;General Practice&quot;/&gt;
						// check for assignedEntity code element
						if(typeof objAssignedEntity.code !== &apos;undefined&apos;) {
							if(objAssignedEntity.code.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][code][@code].toString(): &apos;+objAssignedEntity.code.toString()); }
								objPerformer.assignedEntity_code= objAssignedEntity.code.toString(); 				// 208D00000X
							} // end if							
						} // end if 

						// check for assignedEntity codeSystem element
						if(typeof objAssignedEntity.codeSystem !== &apos;undefined&apos;) {
							if(objAssignedEntity.codeSystem.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][code][@codeSystem].toString(): &apos;+objAssignedEntity.codeSystem.toString()); }
								objPerformer.assignedEntity_codeSystem= objAssignedEntity.codeSystem.toString(); 			// 2.16.840.1.113883.6.101
							} // end if							
						} // end if 
						
						// check for assignedEntity codeSystemName element
						if(typeof objAssignedEntity.codeSystemName !== &apos;undefined&apos;) {
							if(objAssignedEntity.codeSystemName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][code][@codeSystemName].toString(): &apos;+objAssignedEntity.codeSystemName.toString()); }
								objPerformer.assignedEntity_codeSystemName= objAssignedEntity.codeSystemName.toString(); 		// NUCC Health Care Provider Taxonomy
							} // end if							
						} // end if 

						// check for assignedEntity displayName element
						if(typeof objAssignedEntity.displayName !== &apos;undefined&apos;) {
							if(objAssignedEntity.displayName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][code][@displayName].toString(): &apos;+objAssignedEntity.displayName.toString()); }
								objPerformer.assignedEntity_displayName= objAssignedEntity.codeSystemName.toString(); 		// NUCC Health Care Provider Taxonomy
							} // end if							
						} // end if 						

						
						// check for assignedEntity assignedPerson Given name
						if(typeof objAssignedEntity.givenName !== &apos;undefined&apos;) {
							if(objAssignedEntity.givenName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][assignedPerson][name][given].toString(): &apos;+objAssignedEntity.givenName.toString()); }
								objPerformer.assignedEntity_givenName= objAssignedEntity.givenName.toString(); 		// NUCC Health Care Provider Taxonomy
							} // end if							
						} // end if
						
						// check for assignedEntity assignedPerson Family name
						if(typeof objAssignedEntity.familyName !== &apos;undefined&apos;) {
							if(objAssignedEntity.familyName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][assignedPerson][name][family].toString(): &apos;+objAssignedEntity.familyName.toString()); }
								objPerformer.assignedEntity_familyName= objAssignedEntity.familyName.toString(); 		// NUCC Health Care Provider Taxonomy
							} // end if							
						} // end if

						if(debug&gt;0) { logger.error(&apos;getPerformer objAssignedEntity.suffix: &apos;+objAssignedEntity.suffix+
							&apos; typeof: &apos;+typeof objAssignedEntity.suffix); }
							
						// check for assignedEntity assignedPerson Suffix
						if(typeof objAssignedEntity.suffix !== &apos;undefined&apos;) {
							if(objAssignedEntity.suffix.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][assignedPerson][name][suffix].toString(): &apos;+objAssignedEntity.suffix.toString()); }
								objPerformer.assignedEntity_suffix= objAssignedEntity.suffix.toString(); 		// NUCC Health Care Provider Taxonomy
							} // end if							
						} // end if
						
						
						// check for assignedEntity representedOrganization name
						if(typeof objAssignedEntity.representedOrganizationName !== &apos;undefined&apos;) {
							if(objAssignedEntity.representedOrganizationName.toString().length&gt;0) {
								if(debug&gt;0) { logger.error(&apos;performer[assignedEntity][representedOrganization][name].toString(): &apos;+objAssignedEntity.representedOrganizationName.toString()); }
								objPerformer.assignedEntity_representedOrganization= objAssignedEntity.representedOrganizationName.toString(); 		// Walgreens Drug Store 12562
							} // end if							
						} // end if
						
					} // end if 

				} // end if
			//} // end if 
			
			if(objPerformer.toString().length&gt;0) {
				channelMap.put(&apos;objPerformer&apos;,objPerformer);
			}
			
			arrPerformer.push(objPerformer);
			strPerfCount++;
		} // end for each
	} // end if

	if(arrPerformer.toString().length&gt;0) {
		channelMap.put(&apos;arrPerformer&apos;,arrPerformer);
	}
	
	return arrPerformer;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>1a0a3a57-4870-42f3-bb1a-bb5c3cc79ad9</id>
            <name>getRaceCode</name>
            <revision>25</revision>
            <lastModified>
              <time>1661352336919</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**  getRace(race) - Desc: This function receives CCD/CCDA msg and returns from RaceCode Object

   	@param {String} msg - this contains the raw message (string)
	@return {object} objRace - this contains the elements composed into a single objRace object.
	
	History
	2022-08-21 JER - Handling of nullFlavor property with UNK value
	2022-08-19 JER - Added evaluation of code if undefined or has toString gt zero (0)
	2022-08-19 JER - perform finalize review to confirm objRace has populated with value
	2022-08-17 JER - Modifying arrRace from array to objRace as a singular object
	2021-09-20 JER - leveraging the getTelecom for getRaceCode script
*/
function getRaceCode(race) {
 
	// define variables
	var debug= 0;
	var scriptName= &apos;getRaceCode&apos;;
	// 2022-08-17 JER - Modifying arrRace from array to objRace as a singular object
	// var arrRace= new Array();
	
	if(debug&gt;0) { logger.error(scriptName+&apos; race= &apos;+race); }
	if (typeof(race) !== &apos;undefined&apos;) {

		if(debug&gt;0) { 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(race)= &apos;+typeof(race)+&apos; object.length= &apos;+race.length()+&apos; value= &apos;+race);	
		}			
		

		// if(race.length()&gt;0) {
			// for each race element
			var j= 0;
			for(var i= 0;i&lt;race.length();i++) {

			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(race[&apos;+i+&apos;][@code])= &apos;+typeof(race[i][&apos;@code&apos;])+&apos; race[@code]= &apos;+race[i][&apos;@code&apos;]);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; PART 1: typeof(race[&apos;+i+&apos;][@code])= &apos;+typeof(race[i][&apos;@code&apos;]));
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; PART 2: race[&apos;+i+&apos;][@code].toString().length= &apos;+race[i][&apos;@code&apos;].toString().length);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof(race[&apos;+i+&apos;][@code])= &apos;+typeof(race[i][&apos;@code&apos;])+&apos; race[&apos;+i+&apos;][@code].toString().length= &apos;+race[i][&apos;@code&apos;].toString().length+&apos; EVALUATION= &apos;+((typeof(race[i][&apos;@code&apos;]) !== &apos;undefined&apos;)&amp;&amp;(race[i][&apos;@code&apos;].toString().length&gt;0)));
			}
				
				var objRace= new Object();
				// 2022-08-19 JER - Added evaluation of code if undefined or has toString gt zero (0) 
				if((typeof(race[i][&apos;@code&apos;])!== &apos;undefined&apos;)&amp;&amp;(race[i][&apos;@code&apos;].toString().length&gt;0)) {
					// objRace.id= j;
					//if(race[i][&apos;@code&apos;].toString().length&gt;0) {
					
						if(debug&gt; 0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; race[&apos;+i+&apos;][@code]: &apos;+race[i][&apos;@code&apos;].toString()); }
					
						objRace.code= race[i][&apos;@code&apos;].toString();
						objRace.codeSystem= race[i][&apos;@codeSystem&apos;].toString();
						objRace.codeSystemName= race[i][&apos;@codeSystemName&apos;].toString();
						objRace.displayName= race[i][&apos;@displayName&apos;].toString();
					//} // end if 
				
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function objRace: &apos;+JSON.stringify(objRace)); 
					}
				} else {
					var objRace= new Object();
					// objRace.id= j;
					
					objRace.code= &apos;LA4489-6&apos;;
					objRace.codeSystem= &apos;1.3.6.1.4.1.12009.10.1.1817&apos;;
					objRace.codeSystemName= &apos;LOINC UCUM Codes for Electronic Messaging&apos;
					objRace.displayName= &apos;Unknown&apos;
					
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; function objRace: &apos;+JSON.stringify(objRace)); 
					}
				} // end if 
				j++;
			} // for each address element 
		// } // end if 

		// 2022-08-17 JER - Modifying arrRace from array to objRace as a singular object
		// channelMap.put(&apos;arrRace&apos;,JSON.stringify(arrRace));
		// return arrRace;
		// 2022-08-19 JER - perform finalize review to confirm objRace has populated with value
		if(objRace) {
			return objRace;
		} // end if 
	} else {
		return;
	} // end if 
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>a3b08547-8ed2-4097-a7e7-ea43e052f13b</id>
            <name>getServiceEvent</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911325104</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getServiceEvent(msg)

  	- Desc: This function receives CCD msg and returns Service Event objects
  	- Modified:
	2018-11-12 JER - Modified additional debugging for function
  	2018-02-14 JER - Modified to capture the serviceEvent ClassCode and DisplayName attribute values
  	2018-02-12 JER - multiple documentationOf (1..M) with (1..1) serviceEvents

   	@param {String} msg - this contains the raw message (string)
	@return {array} arrServiceEvents - this array contains list of objServiceEvent objects composed into the arrServiceEvents
*/
function getServiceEvent(msg) {

	// define variables
	var scriptName= &apos;getServiceEvent&apos;;
	var arrServiceEvent= new Array();
	var tSrvcCount= 1;
	var debug= 0;
	if(debug&gt;0) { logger.error(&apos;Function: &apos;+scriptName+&apos; msg[documentationOf]= &apos;+msg[&apos;documentationOf&apos;].toXMLString()); }

	if(msg[&apos;documentationOf&apos;] !== &apos;undefined&apos;) {
		for each(documentationOf in msg[&apos;documentationOf&apos;]) {
			if(documentationOf.serviceEvent !== &apos;undefined&apos;) {
				for each(serviceEvent in documentationOf.serviceEvent) {
					var objServiceEvent= new Object();
					objServiceEvent.id= 	tSrvcCount;
					if(typeof serviceEvent.@classCode !== &apos;undefined&apos;) {
						if(serviceEvent.@classCode.length()&gt;0) {
							objServiceEvent.classCode=	serviceEvent.@classCode.toString();
						} // end if 
					} // end if 
					if(serviceEvent.children().length()&gt;0) {
						if(typeof serviceEvent.id.@extension !== &apos;undefined&apos;) {
							objServiceEvent.extension=	serviceEvent.id.@extension.toString();
						} else {
							objServiceEvent.extension=    &apos;&apos;;
						} // end if
						if(typeof serviceEvent.id.@root !== &apos;undefined&apos;) {
							objServiceEvent.root=		serviceEvent.id.@root.toString();
						} else {
							objServiceEvent.root=		&apos;&apos;;
						} // end if
						if(typeof serviceEvent.code.@displayName !== &apos;undefined&apos;) {
							objServiceEvent.displayName=	serviceEvent.code.@displayName.toString();
						} else {
							objServiceEvent.displayName=    &apos;&apos;;
						} // end if
						if(typeof serviceEvent.effectiveTime.low.@value !== &apos;undefined&apos;) {
							objServiceEvent.startTime=	serviceEvent.effectiveTime.low.@value.toString().substring(0,14);
						} else {
							objServiceEvent.startTime=	&apos;&apos;;
						} // end if
						if(typeof serviceEvent.effectiveTime.high.@value !== &apos;undefined&apos;) {
							objServiceEvent.stopTime=	serviceEvent.effectiveTime.high.@value.toString().substring(0,14);
						} else {
							objServiceEvent.stopTime=	&apos;&apos;;
						} // end if
					} // end if 
					arrServiceEvent.push(objServiceEvent);
				} // end for each	
			} // end if 
		} // end for each
	} // end if 

	if(debug&gt;0) { logger.error(&apos;Function: &apos;+scriptName+&apos; arrServiceEvent= &apos;+JSON.stringify(arrServiceEvent, null, 4)); }
	
	return arrServiceEvent;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>24958132-05d2-43f5-ab96-d4055c40804c</id>
            <name>getTelecom</name>
            <revision>18</revision>
            <lastModified>
              <time>1656365508834</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**  getTelecom(telecom) - Desc: This function receives CCD/CCDA msg and returns from Telecom Object

   	@param {String} msg - this contains the raw message (string)
	@return {object} objAddress - this contains the elements composed into a single objTelecom object.
	
	History
	2021-09-20 JER - Modified to incorporate evaluation of multiple patientRole Id(s) in the case there are multiple patient identifiers
	2021-09-20 JER - Modified to patient.name incorporate evaluation of multiple patient name child elements in the case there are multiple patient identifiers
*/
function getTelecom(telecom) {
 
	// define variables
	var debug= 0;
	var scriptName= &apos;getTelecom&apos;;
	var arrTelecom= new Array();
	
	if(debug&gt;0) { logger.error(scriptName+&apos; telecom= &apos;+telecom); }
	if (typeof(telecom) !== &apos;undefined&apos;) {

		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; object.length= &apos;+telecom.length()+&apos; value= &apos;+telecom);	}			
		
		if(telecom.length()&gt;0) {
			// for each addr element
			var j= 0;
			for(var i= 0;i&lt;telecom.length();i++) {

				var objTelecom= new Object();
				objTelecom.id= j;
				if(telecom[i][&apos;@value&apos;].toString().length&gt; 0) {
					if(telecom[i][&apos;@value&apos;].toString().indexOf(&apos;:&apos;)&gt;-1) {
						
						if(debug&gt; 0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; telecom[&apos;+i+&apos;][@value]: &apos;+telecom[i][&apos;@value&apos;].toString()); }
						
						var lstTelecom=	telecom[i][&apos;@value&apos;].toString().split(&apos;:&apos;);
						var varName= lstTelecom[0];
						
						if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; varName: &apos;+varName); }
						
						switch (varName) {
							case &quot;tel&quot;: 	objTelecom.type= varName; break;
							case &quot;fax&quot;: 	objTelecom.type= varName; break;
							case &quot;mailto&quot;: 	objTelecom.type= varName; break;
							default: 		objTelecom.type= varName; break;
						} // end switch 
						// remove the + character from the value
						objTelecom.value= lstTelecom[1].replace(&apos;+&apos;,&apos;&apos;);
					} else {
						objTelecom.value= telecom[i][&apos;@value&apos;].toString().replace(&apos;+&apos;,&apos;&apos;);
					} // end if 
				} // end if 
				
				arrTelecom.push(objTelecom);
				
				//} // for each child element
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;function arrTelecom: &apos;+JSON.stringify(arrTelecom)); }
				j++;
			} // for each address element 
		} // end if 

		channelMap.put(&apos;arrTelecom&apos;,JSON.stringify(arrTelecom));
		return arrTelecom;
	} else {
		return;
	} // end if 
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>39531322-8698-4cdf-9824-d225f1bc60ea</id>
            <name>getXdsAuthorPerson</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911325271</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getXdsAuthorPerson

	- Desc: This function receives Author Object and returns a CCD authorPerson XML
	- Modified:
	2018-02-25 12:35 PM CST - Perform additional checks on the supplied object typeof and null checks

	@param {object} objAuthor - the objAuthor object passed input argument
	@return {XML} return stringXML containing the newly devised XML containing the authorPerson

*/
function getXdsAuthorPerson(objAuthor) {

	// 0^Allscripts^System^^^^^^&amp;amp;1.3.6.1.4.1.22812.4.10065404.0.3.3
	var authorPerson= &apos;&apos;;
	var debug= 0;

	if(debug&gt;0) { logger.error(&apos;getXdsAuthorPerson Input objAuthor: &apos;+objAuthor); }

	// Author Id Extension
	if((typeof objAuthor.extension !== &apos;undefined&apos;)&amp;&amp;(objAuthor.extension != null)) {
		if(objAuthor.extension.toString().length&gt;0) {
			if(debug&gt;0) { logger.error(&apos;objAuthor.extension: &apos;+objAuthor.extension.toString()); }
			authorPerson += objAuthor.extension.toString()+&apos;^&apos;;
		} else {
			authorPerson += &apos;^&apos;;
		} // end if
	} else {
		authorPerson += &apos;^&apos;;
	} // end if 

	// Author LastName
	if((typeof objAuthor.idExtension !== &apos;undefined&apos;)&amp;&amp;(objAuthor.idExtension != null)) {
		if(objAuthor.idExtension.toString().length&gt;0) {
			authorPerson += objAuthor.idExtension.toString()+&apos;^&apos;;
		} else {
			authorPerson += &apos;^&apos;;
		} // end if
	} else {
		authorPerson += &apos;^&apos;;
	} // end if 

	// Author FirstName
	if((typeof objAuthor.idExtension !== &apos;undefined&apos;)&amp;&amp;(objAuthor.idExtension != null)) {
		if(objAuthor.idExtension.toString().length&gt;0) {
			authorPerson += objAuthor.idExtension.toString()+&apos;^&apos;;
		} else {
			authorPerson += &apos;^&apos;;
		} // end if
	} else {
		authorPerson += &apos;^&apos;;
	} // end if 


	// Author Id Root - objAssignedAuthor.root
	if((typeof objAuthor.root !== &apos;undefined&apos;)&amp;&amp;(objAuthor.root != null)) {
		if(objAuthor.root.toString().length&gt;0) {
			if(debug&gt;0) { logger.error(&apos;objAuthor.root: &apos;+objAuthor.root.toString()); }
			authorPerson += &apos;^^^^^&apos;+objAuthor.root.toString();
		} else {
			authorPerson += &apos;^^^^^&apos;;
		} // end if
	} else {
		authorPerson += &apos;^^^^^&apos;; 
	} // end if

	if(debug) { logger.error(&apos;getXdsAuthorPerson authorPerson: &apos;+authorPerson); }
	channelMap.put(&apos;authorPerson&apos;,authorPerson);	

	return authorPerson;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>bac30250-f269-474b-a628-e41b4a27ca54</id>
            <name>getXdsSourcePatientId</name>
            <revision>2</revision>
            <lastModified>
              <time>1654275735219</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getXdsSourcePatientId(object)

  	 - Desc: This function receives patientRole JavaScript Object and returns a sourcePatientId String

	@param {object} objPatientRole - the objPatientRole object passed input argument
	@return {string} return string containing the newly devised string containing the sourcePatientId
*/
// @return {XML} return stringXML containing the newly devised XML containing the sourcePatientInfo
function getXdsSourcePatientId(objPatientRole) {

	var debug= 0;
	/*
	var objSourcePatientId= new Object;
	//if (msg.namespace() != undefined) { default xml namespace = msg.namespace(); } else { default xml namespace = &apos;&apos;; }
	var rim = new Namespace(&apos;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&apos;);

	var stringXML= new XML(&apos;&lt;ValueList/&gt;&apos;);
	*/
	if(typeof objPatientRole.patientId !== &apos;undefined&apos;) {
		var pid_3=  objPatientRole.patientId+&quot;^^^&amp;amp;&quot;+objPatientRole.assigningAuthorityOid+&quot;&amp;amp;ISO&quot;;
		if(debug&gt;1) { logger.error(&quot;objPatientRole.patientid: &quot;+objPatientRole.patientId.toString()); }
	} else { var pid_3= &apos;&apos;; }
			
	// var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_3+&apos;&lt;/Value&gt;&apos;);
	var strSourcePatientId= pid_3;

	return strSourcePatientId;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>cc1f343b-bfa4-4994-9402-bb78c1ad6388</id>
            <name>getXdsSourcePatientInfo</name>
            <revision>3</revision>
            <lastModified>
              <time>1654275670549</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getXdsSourcePatientInfo(object)

  	- Desc: This function receives patientRole JavaScript Object and returns a XML SourcePatientInfo JavaScript object

	@param {object} objPatientRole - the objPatientRole object passed input argument
	@return {object} return object containing the newly devised string for XML containing the sourcePatientInfo
*/
// @return {XML} return stringXML containing the newly devised XML containing the sourcePatientInfo
function getXdsSourcePatientInfo(objPatientRole) {

	var objSourcePatientInfo= new Object;
	var rim = new Namespace(&apos;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&apos;);
	var stringXML= new XML(&apos;&lt;ValueList/&gt;&apos;);
	
	var pid_3=  &quot;PID-3|&quot;+objPatientRole.patientId+&quot;^^^&quot;+objPatientRole.assigningAuthorityName+&quot;&amp;amp;&quot;+objPatientRole.assigningAuthorityOid+&quot;&amp;amp;ISO&quot;
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_3+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid3= pid_3;
	
	var pid_5=  &quot;PID-5|&quot;+objPatientRole.lastName+&quot;^&quot;+objPatientRole.firstName+&quot;^^^^&quot;
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_5+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid5= pid_5;
	
	var pid_7=  &quot;PID-7|&quot;+objPatientRole.dateOfBirth
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_7+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid7= pid_7;
	
	var pid_8=  &quot;PID-8|&quot;+objPatientRole.gender
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_8+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid8= pid_8;
	
	var pid_11= &quot;PID-11|&quot;+objPatientRole.streetAddress+&quot;^^&quot;+objPatientRole.city+&quot;^&quot;+objPatientRole.state+&quot;^&quot;+objPatientRole.postalCode+&quot;^&quot;+objPatientRole.country
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_11+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid11= pid_11;
	
	var pid_13= &quot;PID-13|&quot;+objPatientRole.phoneNumber
	var stringXML= stringXML.appendChild(&apos;&lt;Value&gt;&apos;+pid_13+&apos;&lt;/Value&gt;&apos;);
	objSourcePatientInfo.pid13= pid_13;
	
	return objSourcePatientInfo;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>d78fd3dc-2f75-4b0e-ab30-1e7eea48e0c1</id>
            <name>setXdsAuthor</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911325343</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** setXdsMetadataAuthor(object)

  	- Desc: This setXdsAuthor function receives Javascript Array of Objects and author XML string
  	- Modified:
  	2018-02-26 19:20 CST - Under development
	2018-02-25 12:40PM CST - Replacement of the Call getPerformer, getAuthor and usage of objEncounter transformation function.

   	@param {object} arrPerformer - this contains the Javascript Object (object) - could pass in 
	@return {XML} authorXML - contains authorXML XML Object string to build out the Template : XDSDocumentEntry.author (urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d) XML scheme.

	Reference: https://gazelle.ihe.net/XDStarClient/rimihe-templates/rimihe-Author_XDSDocumentEntry.html
		
*/

function setXdsMetadataAuthor(arrAuthors) {

	var debug= 1;
	var i= 0;
	
	if(debug&gt;0) { logger.error(&apos;setXdsAuthor arrAuthors: &apos;+JSON.stringify(arrAuthors)); } 
	
	if(typeof arrAuthor !== &apos;undefined&apos;) {
		if(arrAuthor.length&gt;1) {
			for each(objAuthor in arrAuthors) {
				if(debug&gt;0) { logger.error(&apos;objAuthor[&apos;+i+&apos;]: &apos;+JSON.stringify(objAuthor)+
					&apos; typeof: &apos;+typeof objAuthor+
					&apos; length: &apos;+objAuthor.length());
				} // end if 
		
				var authorXML = new XML(&apos;&lt;rim:Classification id=&quot;${uuid}&quot; classificationScheme=&quot;urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d&quot; classifiedObject=&quot;${extrinsicObjectUUID}&quot;&gt;&lt;/rim:Classification&gt;&apos;);

				// need to confirm the objAuthor contains the representedOrganization
				// create Author Person - using either objAuthor.assignedEntity_familyName OR objEncounter.assignedEntity_familyName call the getAuthorPerson function
				if((typeof objAuthor.assignedEntity_familyName !== &apos;undefined&apos;)&amp;&amp;(objAuthor.assignedEntity_familyName.toString() != null)) { 
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorPerson&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
					xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= getAuthorPerson(objAuthor);
				} else {
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorPerson&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
				} // end if 
		
				// create Author Institution - objAuthor.authorInstitution
				if((typeof objAuthor.authorInstitution !== &apos;undefined&apos;)&amp;&amp;(objAuthor.authorInstitution.toString() != null)) {
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorInstitution&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
					xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.authorInstitution.toString();
				} else {
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorInstitution&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
				} // end if
		
				// create Author Role 
				// objPerformers.functionDisplayName
				if((typeof objAuthor.functionDisplayName !== &apos;undefined&apos;)&amp;&amp;(objAuthor.functionDisplayName.toString() != null)) {
					if(objAuthor.functionDisplayName.toString().length&gt;0) {
						var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorRole&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
						xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.functionDisplayName.toString();
					} // end if 
					// objEncounter.encounterParticipant_code
				} else if((typeof objAuthor.encounterParticipant_code !== &apos;undefined&apos;)&amp;&amp;(objAuthor.encounterParticipant_code.toString() != null)) {
					if(objAuthor.encounterParticipant_code.toString().length&gt;0) {
						var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorRole&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
						xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.functionDisplayName.toString();
					} // end if 
				// objEncounter.assignedEntity_codeDisplayName
				} else if((typeof objAuthor.assignedEntity_codeDisplayName !== &apos;undefined&apos;)&amp;&amp;(objAuthor.assignedEntity_codeDisplayName.toString() != null)) {
					if(objAuthor.assignedEntity_codeDisplayName.toString().length&gt;0) {
						var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorRole&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
						xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.assignedEntity_codeDisplayName.toString();
					} // end if 
				} else {
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorRole&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;Medical Doctor&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
				} // end if 
		
				// create Author Specialty
				// objPerformers.assignedDisplayName
				if((typeof objAuthor.assignedDisplayName !== &apos;undefined&apos;)&amp;&amp;(objAuthor.assignedDisplayName.toString() != null)) {
					if(objAuthor.assignedDisplayName.toString().length&gt;0) {
						var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
						xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.assignedDisplayName.toString();
					} // end if 
				// objEncounter.assignedEntity_codeDisplayName
				} else if((typeof objAuthor.assignedEntity_codeDisplayName !== &apos;undefined&apos;)&amp;&amp;(objAuthor.assignedEntity_codeDisplayName.toString() != null)) {
					if(objAuthor.assignedEntity_codeDisplayName.toString().length&gt;0) {
						var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
						xmlAuthor[&apos;rim:Slot&apos;][&apos;rim:ValueList&apos;][&apos;rim:Value&apos;]= objAuthor.assignedEntity_codeDisplayName.toString();
					} // end if 
				} else {
					var xmlAuthor= new XML(&apos;&lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;&lt;rim:ValueList&gt;&lt;rim:Value&gt;General Medicine&lt;/rim:Value&gt;&lt;/rim:ValueList&gt;&lt;/rim:Slot&gt;&apos;);
				} // end if 
			} // end for each
		} // end if 
	} else {		
		var classificationXML=     [&apos;rim:Classification&apos;][&apos;@id&apos;]=&quot;1234&quot;; 
		classificationXML+=        [&apos;rim:Classification&apos;][&apos;@ClassificationScheme&apos;]= &quot;urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d&quot;;
		classificationXML+=        [&apos;rim:Classification&apos;][&apos;@classifiedObject&apos;]= &quot;&quot;;
		var authorXML = new XML(classificationXML);
			
		var authorPersonXML=    	new XML(&apos;&lt;rim:Slot name=&quot;authorPerson&quot;&gt;&lt;/rim:Slot&gt;&apos;);
		authorPersonXML+= 		new XML(&apos;&lt;rim:ValueList&gt;&lt;/rim:ValueList&gt;&apos;);
		authorPersonXML+=	 	new XML(&apos;&lt;rim:Value&gt;&lt;/rim:Value&gt;&apos;);
		authorXML+= authorPersonXML; 

		var authorInstitutionXML=    new XML(&apos;&lt;rim:Slot name=&quot;authorInstitution&quot;&gt;&lt;/rim:Slot&gt;&apos;);
		authorInstitutionXML+= 		new XML(&apos;&lt;rim:ValueList&gt;&lt;/rim:ValueList&gt;&apos;);
		authorInstitutionXML+=		new XML(&apos;&lt;rim:Value&gt;&lt;/rim:Value&gt;&apos;);
		authorXML+= authorInstitutionXML;

		var authorRoleXML=  new XML(&apos;&lt;rim:Slot name=&quot;authorRole&quot;&gt;&lt;/rim:Slot&gt;&apos;);
		authorRoleXML+= 	new XML(&apos;&lt;rim:ValueList&gt;&lt;/rim:ValueList&gt;&apos;);
		authorRoleXML+=	new XML(&apos;&lt;rim:Value&gt;&lt;/rim:Value&gt;&apos;);
		authorXML+= autorRoleXML;
		
		var authorSpecialtyXML =		new XML(&apos;&lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;&lt;/rim:Slot&gt;&apos;);
		authorSpecialtyXML+= new XML(&apos;&lt;rim:ValueList&gt;&lt;/rim:ValueList&gt;&apos;);
		authorSpecialtyXML+= new XML(&apos;&lt;rim:Value&gt;&lt;/rim:Value&gt;&apos;);
		authorXML+= authorSpecialtyXML;
				
	} // end if 	
		
	return authorXML;
} // end function</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.0.0">
        <id>bb20e704-b235-464b-a0db-46e961761555</id>
        <name>FiveSixHealthcare-Utilities</name>
        <revision>14</revision>
        <lastModified>
          <time>1672445597958</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>false</includeNewChannels>
        <enabledChannelIds>
          <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
          <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
          <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
          <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
          <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
          <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
          <string>72383579-097e-4205-b030-ce272c90b835</string>
          <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
          <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
          <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
          <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
          <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
          <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
          <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
          <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
          <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
          <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
          <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
          <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
          <string>14b7de16-de3e-4994-b123-b4d0d3d712aa</string>
          <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
          <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
          <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
          <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
          <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
          <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
          <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
          <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
          <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
          <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
          <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
          <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
          <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
          <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
          <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
          <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
          <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
          <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
          <string>a757905f-315a-43be-a624-38780a3d7574</string>
          <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
          <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
          <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
          <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
          <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
          <string>38e80069-5a80-4483-9a22-02c928973719</string>
          <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
          <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
          <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
          <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
          <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
          <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
          <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
          <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
          <string>076d39da-7152-40db-91a1-1746167239e9</string>
          <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
          <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
          <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
          <string>c65024ed-4660-4423-9636-cb6309cae138</string>
          <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
          <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
          <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
          <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
          <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
          <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
          <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
          <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
          <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
          <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
          <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
          <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
          <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
          <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
          <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
          <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
          <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
          <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
          <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
          <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
          <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
          <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="4.0.0">
            <id>c7de9b91-9a41-43eb-8b27-83f2ae0a2fba</id>
            <name>executeQueryVerifyCode</name>
            <revision>13</revision>
            <lastModified>
              <time>1662998298586</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Creates and executes database statements

	@param {Boolean} recreate - If true, the connection will always be closed and created anew.
	@return {DatabaseConnection} The database connection object.

	History:
	2022-09-12 JER - modify from pushing row columns (i.e. properties) into array concentnate a string
	2022-08-23 JER - Modified the name from executeOperationMSSQL to executeQueryVerifyCode
	2022-08-03 JER - Addedd the IF conditional to evaluate either the pre-existing query_verify_code or executing a different SQL stored procedure or SQL statement
	2022-07-31 JER - Modified executeOperationMSSQL function to evaluate the code_values.code_value and code_values.code_value_description fields
*/
// executeOperation(&apos;executeCachedQuery&apos;,&apos;EXEC query_verify_code(&apos;419199007&apos;)&apos;)
// function executeOperation(operation, expression, parameters) {
function executeQueryVerifyCode(operation, sqlStatement) {
	var scriptName= &apos;executeQueryVerifyCode&apos;;
	var dbConn = getMSSQLDatabaseConnection(&apos;true&apos;);
	var resultArray= new Array();
	var resultList = new Array();
	var attempts = 0;
	var debug= 0;
	// package org.apache.commons.lang3.math.NumberUtils;
	var maxAttempts = org.apache.commons.lang3.math.NumberUtils.toInt($(&apos;sqlDBMaxRetries&apos;) + &apos;&apos;, 0) + 1;

	//while (attempts &lt; maxAttempts) {
	//	attempts++;

		// try {

			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; dbConn.&apos;+operation+&apos;(&apos;+sqlStatement+&apos;)&apos;); 
			}
			var resultOperation= dbConn.executeCachedQuery(sqlStatement);
			var resultSize= resultOperation.size();
			
			// 2022-08-03 JER - Addedd the IF conditional to evaluate either the pre-existing query_verify_code or executing a different SQL stored procedure or SQL statement
			// EXEC query_verify_code &apos;&quot;+observationValue+&quot;&apos;,
			if(sqlStatement.toString().indexOf(&apos;query_verify_code&apos;)&gt;-1) {
				var filterResult= false;
				var operationCnt= 0;
			
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; dbConn.resultOperation size: &apos;+resultSize+&apos; results: &apos;+resultOperation); }

				while (resultOperation.next()) {

					var pra_equivalent_json_section = resultOperation.getString(&apos;pra_equivalent_json_section&apos;);
					var pra_equivalent_field = resultOperation.getString(&apos;pra_equivalent_field&apos;);
					var pra_equivalent_json_section_order = resultOperation.getString(&apos;sort_order&apos;);
					var pra_equivalent_field_code_value = resultOperation.getString(&apos;code_value&apos;);
					var pra_equivalent_field_code_value_description = resultOperation.getString(&apos;code_value_description&apos;);

					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pra_equivalent_json_section: &apos;+pra_equivalent_json_section+&apos; pra_equivalent_field: &apos;+pra_equivalent_field+&apos; pra_equivalent_json_section_order: &apos;+pra_equivalent_json_section_order);
					}
				
					// 2022-07-11 JER - Added evaluation of PRA JSON Section value
					if((typeof(pra_equivalent_json_section)== &apos;undefined&apos;) ||(pra_equivalent_json_section== &apos;NULL&apos;)||(pra_equivalent_json_section== &apos;null&apos;)) {
						if(typeof(pra_equivalent_json_section)== &apos;undefined&apos;) {
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; query failed to return a valid value. As it returned: &apos;+typeof(pra_equivalent_json_section));
							filterResult= true;
						} else {
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; query failed to return a valid value. As it returned: &apos;+pra_equivalent_json_section.toString());
							filterResult= true;
						}
					}
					// 2022-07-11 JER - Added evaluation of PRA JSON field value
					if((typeof(pra_equivalent_field)== &apos;undefined&apos;)||(pra_equivalent_field== &apos;NULL&apos;)||(pra_equivalent_field== &apos;null&apos;)) {
						if(typeof(pra_equivalent_field)== &apos;undefined&apos;) {
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; query failed to return a valid value. As it returned: &apos;+typeof(pra_equivalent_field));
							filterResult= true;
						} else {
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; query failed to return a valid value. As it returned: &apos;+pra_equivalent_field.toString());
							filterResult= true;
						}
					}
					if(filterResult== false) {

						var arr_pra_equivalent_json_section_field= new Array();
						
						arr_pra_equivalent_json_section_field.push(pra_equivalent_json_section);
						arr_pra_equivalent_json_section_field.push(pra_equivalent_field);
						arr_pra_equivalent_json_section_field.push(pra_equivalent_json_section_order);
						arr_pra_equivalent_json_section_field.push(pra_equivalent_field_code_value);
						arr_pra_equivalent_json_section_field.push(pra_equivalent_field_code_value_description);

						// 2022-09-12 JER - modify from pushing row columns (i.e. properties) into array concentnate a string
						var str_pra_equivalent_json_section_field= arr_pra_equivalent_json_section_field.join(&apos;|&apos;); 

						if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos;[&apos;+operationCnt+&apos;] query successfully return a valid values : {&apos;+str_pra_equivalent_json_section_field+&apos;}&apos;); }
						// resultArray.push(arr_pra_equivalent_json_section_field);
						resultArray.push(str_pra_equivalent_json_section_field);
					} else {
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos;[&apos;+operationCnt+&apos;] query failed to return a valid value filteredResults: &apos;+filterResults);
					}
					resultList.push(resultArray);
					operationCnt++;
				}
			} // end if 
		/*
		} finally {
			if (dbConn) {
				dbConn.close;
			}
		}
		*/
			
		/*
			if (attempts &gt;= maxAttempts) {
				var errorMessage = &apos;Unable to execute statement.\n&apos;;
				errorMessage += &apos;Expression: &apos; + expression + &apos;\n&apos;;
				if (parameters) {
					errorMessage += &apos;Parameters: &apos; + java.util.Arrays.asList(parameters).toString();
				}
				logger.error(errorMessage, e.javaException);
				throw e;
			}

			java.lang.Thread.sleep(1000);
		}
	} */

	if(debug&gt;0) { 
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof: &apos;+typeof(resultList)+&apos; length: &apos;+resultList.length);
	} // end if 

	if (dbConn) { dbConn.close; }
	channelMap.put(&apos;resultList&apos;,resultList);
	// channelMap.put(&apos;resultArray&apos;,resultArray);
	// return resultArray;
	return resultList;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>5ca3bcb3-47d5-4c4d-b325-70cf3b4968e6</id>
            <name>executeSQLStatement</name>
            <revision>14</revision>
            <lastModified>
              <time>1661563946684</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Creates and executes database statements

	@param {Boolean} recreate - If true, the connection will always be closed and created anew.
	@return {DatabaseConnection} The database connection object.

	History:
	2022-08-24 JER - Modified moving the dbConn and the conditional (while or if-then) logic into the same parent if-then code block
	2022-08-23 JER - Modified the name from executeOperationMSSQL to executeSQLStatement
	2022-08-03 JER - Addedd the IF conditional to evaluate either the pre-existing query_verify_code or executing a different SQL stored procedure or SQL statement
	2022-07-31 JER - Modified executeOperationMSSQL function to evaluate the code_values.code_value and code_values.code_value_description fields
*/
// executeOperation(&apos;executeCachedQuery&apos;,&apos;EXEC &apos;query_verify_code(&apos;419199007&apos;)&apos;)
// function executeOperation(operation, expression, parameters) {
function executeSQLStatement(operation, sqlStatement, resultColumns) {
	var scriptName= &apos;executeSQLStatement&apos;;
	var dbConn = getMSSQLDatabaseConnection(&apos;true&apos;);
	var attempts = 0;
	var debug= 0;
	// package org.apache.commons.lang3.math.NumberUtils;
	var maxAttempts = org.apache.commons.lang3.math.NumberUtils.toInt($(&apos;sqlDBMaxRetries&apos;) + &apos;&apos;, 0) + 1;

	//while (attempts &lt; maxAttempts) {
	//	attempts++;

		// try {

			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; dbConn operation: &apos;+operation+&apos; sqlStatement: &apos;+sqlStatement)
			}
			
			if(operation== &apos;SELECT&apos;) {
				var resultOperation= dbConn.executeCachedQuery(sqlStatement);
				var resultSize= resultOperation.size();
				
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; dbConn.resultOperation size: &apos;+resultSize+&apos; results: &apos;+resultOperation); }
				
				while (resultOperation.next()) {
					// if resultColumns contains a string of column headers
					if((typeof(resultColumns)!== &apos;undefined&apos;)&amp;&amp;(resultColumns.toString().length&gt;0)) {
						var i=0;
						var objResultOperation= new Object();
						objResultOperation[&apos;id&apos;]= i;
						for each(column in resultColumns) {
							objResultOperation[column]= resultOperation.getString(i);
							i++;
						} // end for each
				
						var returnResult= objResultOperation;
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; executeCachedQuery specific COLUMNS SELECT returnResult: &apos;+returnResult);
						} // end if
					// no resultColumns either undefined or no column headers string length using SELECT TOP 1 * ...
					} else {
						var returnResult= resultOperation.getString(1);
						if(debug&gt;0) { 
							logger.error(&apos;DEBUG::&apos;+scriptName+&apos; executeCachedQuery SELECT returnResult: &apos;+returnResult);
						} // end if
					} // end if 
				} // end while
				
			} else {
				var resultOperation= dbConn.executeUpdate(sqlStatement);
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; dbConn.resultOperation result: &apos;+resultOperation); }
				
				if(resultOperation) {
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; **** SQL SUCCESS ****: RESULT=&apos; + resultOperation.toString());
					} // end if 
				} else {
					if(debug&gt;0) { 
						logger.error(&apos;DEBUG::&apos;+scriptName+&apos; **** SQL FAILED  ****: RESULT=&apos; + resultOperation.toString());
					} // end if 
				} // end if
				var returnResult= resultOperation;
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; executeUpdate on INSERT returnResult: &apos;+returnResult);
				} // end if
				
			} // end if 

		/*
		} finally {
			if (dbConn) {
				dbConn.close;
			}
		}
		*/
			
		/*
			if (attempts &gt;= maxAttempts) {
				var errorMessage = &apos;Unable to execute statement.\n&apos;;
				errorMessage += &apos;Expression: &apos; + expression + &apos;\n&apos;;
				if (parameters) {
					errorMessage += &apos;Parameters: &apos; + java.util.Arrays.asList(parameters).toString();
				}
				logger.error(errorMessage, e.javaException);
				throw e;
			}

			java.lang.Thread.sleep(1000);
		}
	} */

	if (dbConn) { dbConn.close; }
	return returnResult;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>e0281ac2-137c-41fb-b616-da806c6f676b</id>
            <name>getMSSQLDatabaseConnection</name>
            <revision>28</revision>
            <lastModified>
              <time>1659574033145</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Creates and instantiates database connection from the global channel map, creating a new one if necessary.

	@param {Boolean} recreate - If true, the connection will always be closed and created anew.
	@return {DatabaseConnection} The database connection object.

	History:
	2022-07-31 JER - Modified executeOperationMSSQL function to evaluate the code_values.code_value and code_values.code_value_description fields
*/
function getMSSQLDatabaseConnection(recreate) {
	var scriptName= &apos;getMSSQLDatabaseConnection&apos;;
	var dbConn = $gc(&apos;dbConn&apos;);
	var debug= 0;

	if (!dbConn || recreate) {
		if (dbConn) {
			try {
				dbConn.close(); 	
			} catch (e) {}
		}

		if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; fmiMSSQLDriverString= &apos;+$(&apos;fmiMSSQLDriverString&apos;)+&apos; URL= &apos;+$(&apos;fmiMSSQLUrl&apos;)+&apos; userId= &apos;+$(&apos;fmiMSSQLUserId&apos;)+&apos; password= &apos;+$(&apos;fmiMSSQLPassword&apos;)); }
		dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;fmiMSSQLDriverString&apos;), $(&apos;fmiMSSQLUrl&apos;), $(&apos;fmiMSSQLUserId&apos;), $(&apos;fmiMSSQLPassword&apos;));
		$gc(&apos;dbConn&apos;, dbConn);
	}

	return dbConn;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>18ae91f3-476c-4bc0-b5f1-0b89efafd306</id>
            <name>getMySQLDatabaseConnection</name>
            <revision>19</revision>
            <lastModified>
              <time>1657046983417</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Creates and instantiates database connection from the global channel map, creating a new one if necessary.

	@param {Boolean} recreate - If true, the connection will always be closed and created anew.
	@return {DatabaseConnection} The database connection object.
*/
function getMySQLDatabaseConnection(recreate) {
	var scriptName= &apos;getMySQLDatabaseConnection&apos;;
	var dbConn = $gc(&apos;dbConn&apos;);
	var debug= 0;

	if (!dbConn || recreate) {
		if (dbConn) {
			try {
				dbConn.close();
			} catch (e) {}
		}

		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; mysqlDriverString= &apos;+$(&apos;fmiMySqlDriverString&apos;)+&apos; URL= &apos;+$(&apos;fmiMySqlUrl&apos;)+&apos; userId= &apos;+$(&apos;fmiMySqlUserId&apos;)+&apos; password= &apos;+$(&apos;fmiMySqlPassword&apos;));
		dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;fmiMySqlDriverString&apos;), $(&apos;fmiMySqlUrl&apos;), $(&apos;fmiMySqlUserId&apos;), $(&apos;fmiMySqlPassword&apos;));
		$gc(&apos;dbConn&apos;, dbConn);
	}

	return dbConn;
}

// executeOperation(&apos;executeCachedQuery&apos;,&apos;CALL query_verify_code(&apos;419199007&apos;)&apos;)
// function executeOperation(operation, expression, parameters) {
function executeOperationMySQL(operation, selectStatement) {
	var scriptName= &apos;executeOperationMySQL&apos;;
	var dbConn = getMySQLDatabaseConnection();
	var attempts = 0;
	var debug= 0;
	// package org.apache.commons.lang3.math.NumberUtils;
	var maxAttempts = org.apache.commons.lang3.math.NumberUtils.toInt($(&apos;sqlDBMaxRetries&apos;) + &apos;&apos;, 0) + 1;

	//while (attempts &lt; maxAttempts) {
	//	attempts++;

		// try {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; dbConn.&apos;+operation+&apos;(&apos;+selectStatement+&apos;)&apos;);
		var resultOperation= dbConn.executeCachedQuery(selectStatement);
		var resultSize= resultOperation.size();
		
		/*
		try {

			if (parameters) {
				for (var i in parameters) {
					var param = parameters[i];
					if (param instanceof Number) {
						parameters[i] = new java.lang.Integer(param);
					}
				}

				logger.error(&apos;DEBUG:: functionA: &apos;+scriptName+&apos; dbConn[&apos;+operation+&apos;](&apos;+expression+&apos;, java.util.Arrays.asList(&apos;+parameters+&apos;))&apos;);
				// logger.error(&apos;DEBUG:: function: &apos;+scriptName+&apos; dbConn[&apos;+operation+&apos;](&apos;+expression+&apos;, &apos;+parameters+&apos;)&apos;);
				// return dbConn[operation](expression, java.util.Arrays.asList(parameters));
				return dbConn[operation](expression, parameters);
				
			} else {
				
				logger.error(&apos;DEBUG:: functionB: &apos;+scriptName+&apos; operation: &apos;+operation+&apos; expression: &apos;+expression);
				return dbConn[operation](expression);
				
			}
		} catch (e) {
			logger.info(&apos;Error executing statement, checking if valid...&apos;);

			try {
				logger.error(&apos;DEBUG:: dbConn.executeCacheQuery(&apos;+expression+&apos;(&apos;+parameters+&apos;))&apos;);
				dbConn.executeCachedQuery(expression(&apos;&apos;+parameters+&apos;&apos;));
			} catch (e2) {
				logger.info(&apos;Connection invalid, recreating...&apos;);

				try {
					dbConn = getDatabaseConnection(true);
				} catch (e3) {}
			}
			*/

		// } finally {
		if (dbConn) {
			dbConn.close;
		}
		// }
			
		/*
			if (attempts &gt;= maxAttempts) {
				var errorMessage = &apos;Unable to execute statement.\n&apos;;
				errorMessage += &apos;Expression: &apos; + expression + &apos;\n&apos;;
				if (parameters) {
					errorMessage += &apos;Parameters: &apos; + java.util.Arrays.asList(parameters).toString();
				}
				logger.error(errorMessage, e.javaException);
				throw e;
			}

			java.lang.Thread.sleep(1000);
		}
	} */
	return resultSize;
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.0.0">
        <id>ee8d4c72-de8a-4e42-8de4-e56376c99c69</id>
        <name>HL7v3</name>
        <revision>4</revision>
        <lastModified>
          <time>1690140133399</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description>HL7v3 Library</description>
        <includeNewChannels>false</includeNewChannels>
        <enabledChannelIds>
          <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
          <string>38e80069-5a80-4483-9a22-02c928973719</string>
          <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
          <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
          <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
          <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
          <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
          <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
          <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
          <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
          <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
          <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
          <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
          <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
          <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
          <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
          <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
          <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
          <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
          <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
          <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
          <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
          <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
          <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
          <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
          <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
          <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
          <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
          <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
          <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
          <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
          <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
          <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
          <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
          <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
          <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
          <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
          <string>72383579-097e-4205-b030-ce272c90b835</string>
          <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
          <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
          <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
          <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
          <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
          <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
          <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
          <string>3792b059-e098-436c-81fe-23502ef5042b</string>
          <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
          <string>a757905f-315a-43be-a624-38780a3d7574</string>
          <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
          <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
          <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
          <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
          <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
          <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
          <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
          <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
          <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
          <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
          <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
          <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
          <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
          <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
          <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
          <string>c65024ed-4660-4423-9636-cb6309cae138</string>
          <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
          <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
          <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
          <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
          <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
          <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
          <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
          <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
          <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
          <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
          <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
          <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
          <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
          <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
          <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
          <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
          <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
          <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
          <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
          <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="4.0.0">
            <id>46863fa1-cc19-42b4-b713-5048a69d7fe1</id>
            <name>getHL7v3AdministrativeGender</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911325383</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getHL7v3AdministrativeGender(code)

  	- Desc: This function receives a code system code (string) and returns adminGender array contains both the code and displayName

   	@param {String} code - this contains a code system code (string)
	@return {array} adminGender - this array contains the Gender and DisplayName (key,value) pair in the adminGender array.
*/

function getHL7v3AdministrativeGender(code) {

	// define local variables
	var adminGender= {};
	adminGender.codeSystem= &quot;2.16.840.1.133883.5.1&quot;
	adminGender.codeSystemName= &quot;HL7 AdministrativeGender&quot;;

	if(&quot;M&quot; == code) {
		adminGender.code= &quot;M&quot;;
		adminGender.displayName= &quot;Male&quot;;
	} else if (&quot;F&quot; == code) {
		adminGender.code= &quot;F&quot;;
		adminGender.displayName= &quot;Female&quot;;
	} else {
		adminGender.code= &quot;UN&quot;;
		adminGender.displayName= &quot;Undifferentiated&quot;;
	}

	return adminGender;

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>e48db441-8556-4a03-a3e2-d018a8f9f608</id>
            <name>getHL7v3Confidentiality</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911325172</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** getHL7v3Confidentiality(code)

  	- Desc: This function receives a code system code (string) and returns confidentiality array contains both the code and displayName

   	@param {String} code - this contains a code system code (string)
	@return {array} confidentiality - this array contains the Confidentiality Code and DisplayName (key,value) pair in the confidentialityCode array.
*/

function getHL7v3Confidentiality(code) {

	// define local variables
	var confidentiality= {};
	confidentiality.codeSystem= &quot;2.16.840.1.113883.5.25&quot;
	confidentiality.codeSystemName= &quot;HL7 Confidentiality&quot;;

	if(&quot;N&quot; == code) {
		confidentiality.code= &quot;N&quot;;
		confidentiality.displayName= &quot;Normal&quot;;
	} else if (&quot;R&quot; == code) {
		confidentiality.code= &quot;R&quot;;
		confidentiality.displayName= &quot;Restricted&quot;;
	} else {
		confidentiality.code= &quot;V&quot;;
		confidentiality.displayName= &quot;Very Restricted&quot;;
	}

	return confidentiality;

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>759504b7-8f74-4a3a-bd4a-1a6ff876f59a</id>
            <name>getMCCI_IN000002()</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911325420</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	getMCCI_IN000002() Desc:  Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getMCCI_IN000002() { 
	var mcci = &apos;&lt;MCCI_IN000002UV01 ITSVersion=&quot;XML_1.0&quot;&gt;&apos; + 
		&apos;&lt;id root=&quot;2.16.840.1.113883.1.3&quot; extension=&quot;&quot;/&gt;&apos; + 
		&apos;&lt;creationTime value=&quot;&quot;/&gt;&apos; + 
		&apos;&lt;versionCode controlInformationRoot=&quot;2.16.840.1.113883.11.19373&quot; code=&quot;V3PR1&quot;/&gt;&apos; + 
		&apos;&lt;interactionId root=&quot;2.16.840.1.113883.1.6&quot; extension=&quot;MCCI_IN000002UV01&quot;/&gt;&apos; + 
		&apos;&lt;processingCode code=&quot;D&quot;/&gt;&apos; + 
		&apos;&lt;processingModeCode code=&quot;T&quot;/&gt;&apos; +
		&apos;&lt;acceptAckCode code=&quot;NE&quot;/&gt;&apos; + 
		&apos;&lt;receiver typeCode=&quot;RCV&quot;&gt;&apos; + 
			&apos;&lt;device classCode=&quot;DEV&quot; determinerCode=&quot;INSTANCE&quot;&gt;&apos; + 
				&apos;&lt;id controlInformationRoot=&quot;2.16.840.1.113883.3.40.5.1&quot; controlInformationExtension=&quot;Organization&quot;/&gt;&apos; + 
				&apos;&lt;asAgent classCode=&quot;AGNT&quot;&gt;&apos; + 
					&apos;&lt;representedOrganization classCode=&quot;ORG&quot; determinerCode=&quot;INSTANCE&quot;&gt;&apos; + 
						&apos;&lt;id controlInformationRoot=&quot;2.16.840.1.113883.3.51.200&quot; controlInformationExtension=&quot;&quot;/&gt;&apos; + 
					&apos;&lt;/representedOrganization&gt;&apos; + 
				&apos;&lt;/asAgent&gt;&apos; + 
			&apos;&lt;/device&gt;&apos; + 
		&apos;&lt;/receiver&gt;&apos; + 
		&apos;&lt;sender typeCode=&quot;SND&quot;&gt;&apos; + 
			&apos;&lt;device classCode=&quot;DEV&quot; determinerCode=&quot;INSTANCE&quot;&gt;&apos; + 
				&apos;&lt;id controlInformationRoot=&quot;2.16.840.1.113883.3.40.5.2&quot; controlInformationExtension=&quot;Organization&quot;/&gt;&apos; + 
				&apos;&lt;asAgent classCode=&quot;AGNT&quot;&gt;&apos; + 
					&apos;&lt;representedOrganization classCode=&quot;ORG&quot; determinerCode=&quot;INSTANCE&quot;&gt;&apos; + 
						&apos;&lt;id controlInformationRoot=&quot;2.16.840.1.113883.3.51.200&quot; controlInformationExtension=&quot;&quot;/&gt;&apos; + 
					&apos;&lt;/representedOrganization&gt;&apos; + 
				&apos;&lt;/asAgent&gt;&apos; + 
			&apos;&lt;/device&gt;&apos; + 
		&apos;&lt;/sender&gt;&apos; + 
		&apos;&lt;acknowledgement typeCode=&quot;AE&quot;&gt;&apos; + 
			&apos;&lt;targetMessage&gt;&apos; + 
				&apos;&lt;id root=&quot;2.16.840.1.113883.1.3&quot; extension=&quot;&quot;/&gt;&apos; + 
			&apos;&lt;/targetMessage&gt;&apos; + 
			&apos;&lt;acknowledgementDetail&gt;&apos; + 
				&apos;&lt;code code=&quot;&quot;/&gt;&apos; + 
				&apos;&lt;text value=&quot;&quot;/&gt;&apos; + 
			&apos;&lt;/acknowledgementDetail&gt;&apos; + 
		&apos;&lt;/acknowledgement&gt;&apos; + 
	&apos;&lt;/MCCI_IN000002UV01&gt;&apos;; 
		
	return mcci;
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.0.0">
        <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
        <name>WebPT-Common</name>
        <revision>2</revision>
        <lastModified>
          <time>1678715257049</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>3792b059-e098-436c-81fe-23502ef5042b</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="4.0.0">
            <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
            <name>Check if String contains</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122790</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>COMPILED_CODE</type>
              <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
            <name>Check if String contains HTTP code</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122593</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>COMPILED_CODE</type>
              <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>8515e088-5c50-47ee-9e2f-9fad1ecf48bd</id>
            <name>Check if String is JSON</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123309</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Added by Kirby Knight
	12/21/2020
	Test for JSON

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>5f2f84ba-3e66-4be3-8260-8fbd8258bd92</id>
            <name>Check if the PDF is valid</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122055</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
//This function is used for checking the word &quot;PDF&quot; in inbound attachment.
function isValidBase64PDF(base64) {
	const ENCODED_PDF_SIGN = &quot;JVBERi&quot;; // %PDF sign
	const PDF_EOF = &quot;JSVFT0YNCg&quot;; // %EOF
	var pdfBase64Size = (base64.length() * (3 / 4)) - 1;
	
	return (base64.indexOf(ENCODED_PDF_SIGN) != -1 &amp;&amp; base64.indexOf(PDF_EOF) != -1 &amp;&amp; pdf_base64_size &gt; 36);
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
            <name>Convert JSON date to HL7v2 date</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122137</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
            <name>Convert JSON datetime to HL7v2 datetime</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122430</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>bb21449a-df39-48c6-be52-24106c8df4c4</id>
            <name>Destination Formatting</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122703</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Kirby Knight 03/10/2021
	
	This function will remove all other ROOT.Meta.Destinations nodes that are not passed in the
	destination variable and removes the ROOT.Meta.Destinations[x].Destination node

	@param {Any} destination - 
	@return {String} return description
*/
function formatDestinations(destination) {
var arrDestinations = msg[&apos;Meta&apos;][&apos;Destinations&apos;];
	//  Start at the end of the array because of the posibility of deleted array items 
	for (var i = arrDestinations.length - 1; i &gt;= 0; i--) {
		if (arrDestinations[i][&apos;Destination&apos;] == destination){
			delete arrDestinations[i][&apos;Destination&apos;]
		}else if (arrDestinations[i][&apos;Destination&apos;] != destination){
			arrDestinations.splice(i, 1);
		}
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
            <name>Extract JSON node data</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121748</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>7ed44f8a-fa40-4f3e-9426-3021604eabe0</id>
            <name>Get Feature Value by Name and Database</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123262</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Returns a string containing the feature value (system property) for a specific client database.

	@param {String} featureName - name of the feature, ie: &quot;BetterPTBidirectionalScheduling&quot;
	@param {String} databaseIdentifier - database name or databaseID / TenantID
	@param {String} databaseIdentifierType - what value is provided in databaseIdentifier. current options include &quot;ID&quot; or &quot;NAME&quot;
	@return {String} returns feature value
*/
function getFeatureValueByNameDatabase(featureName, databaseIdentifier, databaseIdentifierType) {
	var paramList = new Packages.java.util.ArrayList();
	paramList.add(featureName);
	paramList.add(databaseIdentifier);
	paramList.add(databaseIdentifierType);
	
	var sSQL = &apos;EXEC [dbo].[pr_FeatureValueByNameDatabase] ?, ?, ?&apos;;
	
	try {
		var result = executeSharedDBStatementFhirCh(sSQL, true, paramList);
		var featureValue ;
		if(result.next()){			//Added
		 featureValue = result.getString(1);
		}
		return featureValue;
	} catch (e) {
		logger.error(e);
	}
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>9842be2c-c633-42ac-87f1-f91aca9e370f</id>
            <name>JSON Patient IDs</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121776</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	This function populates the MR and PI patient IDS to channelMap

	@return {String} return description
*/
function jsonPatientIds() {
	for each (patId in msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) {
	if (patId[&apos;IDType&apos;].toString() == &apos;MR&apos;){
		channelMap.put(&apos;extPatId&apos;, patId[&apos;ID&apos;].toString());
	}else if(patId[&apos;IDType&apos;].toString() == &apos;PI&apos;){
		channelMap.put(&apos;patId&apos;, patId[&apos;ID&apos;].toString());
	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
            <name>Verify JSON node for existance</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122542</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.0.0">
        <id>394664c0-d536-4310-970e-181dc03ee7da</id>
        <name>WebPT-Conversions</name>
        <revision>2</revision>
        <lastModified>
          <time>1690140133427</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
          <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
          <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
          <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
          <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
          <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
          <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
          <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
          <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
          <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
          <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
          <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
          <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
          <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
          <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
          <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
          <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
          <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
          <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
          <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
          <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
          <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
          <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
          <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
          <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
          <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
          <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
          <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
          <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
          <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
          <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
          <string>72383579-097e-4205-b030-ce272c90b835</string>
          <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
          <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
          <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
          <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
          <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
          <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
          <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
          <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
          <string>3792b059-e098-436c-81fe-23502ef5042b</string>
          <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
          <string>a757905f-315a-43be-a624-38780a3d7574</string>
          <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
          <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
          <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
          <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
          <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
          <string>38e80069-5a80-4483-9a22-02c928973719</string>
          <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
          <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
          <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
          <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
          <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
          <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
          <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
          <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
          <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
          <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
          <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
          <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
          <string>c65024ed-4660-4423-9636-cb6309cae138</string>
          <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
          <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
          <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
          <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
          <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
          <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
          <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
          <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
          <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
          <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
          <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
          <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
          <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
          <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
          <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
          <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
          <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
          <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
          <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
          <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
          <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
          <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
          <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="4.0.0">
            <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
            <name>Convert FHIR codes to HL7v2 codes</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122899</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.0.0">
        <id>2fc8cbf3-0d92-4d1d-a3d6-136c09bd9f2a</id>
        <name>WebPT-Custom Database Functions</name>
        <revision>5</revision>
        <lastModified>
          <time>1703964939898</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
          <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
          <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
          <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
          <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
          <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
          <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
          <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
          <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
          <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
          <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
          <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
          <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
          <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
          <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
          <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
          <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
          <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
          <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
          <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
          <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
          <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
          <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
          <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
          <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
          <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
          <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
          <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
          <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
          <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
          <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
          <string>72383579-097e-4205-b030-ce272c90b835</string>
          <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
          <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
          <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
          <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
          <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
          <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
          <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
          <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
          <string>3792b059-e098-436c-81fe-23502ef5042b</string>
          <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
          <string>a757905f-315a-43be-a624-38780a3d7574</string>
          <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
          <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
          <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
          <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
          <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
          <string>38e80069-5a80-4483-9a22-02c928973719</string>
          <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
          <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
          <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
          <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
          <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
          <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
          <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
          <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
          <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
          <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
          <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
          <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
          <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
          <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
          <string>c65024ed-4660-4423-9636-cb6309cae138</string>
          <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
          <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
          <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
          <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
          <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
          <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
          <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
          <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
          <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
          <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
          <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
          <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
          <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
          <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
          <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
          <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
          <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
          <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
          <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
          <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
          <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
          <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
          <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
          <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
          <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
          <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="4.0.0">
            <id>23c0b510-63e4-40fa-a4e1-7b2b92ce9a96</id>
            <name>Execute Statement Shared DB Conn clientDb Ch</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122401</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
Executes a SQL statement using a shared database connection stored in the Global Map. If the
connection does not exist, creates it.

@param {String} statement - The SQL statement to execute
@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
@param {List} paramList - A Java List object containing the parameters for the statement (optional)
 */
function executeSharedDBStatementclientDbCh(statement, isQuery, paramList) {
    var result;

    try {
        var dbConnclientDbCh = globalChannelMap.get(&quot;dbConnclientDbCh&quot;);

        if (dbConnclientDbCh == null || dbConnclientDbCh.getConnection().isClosed()) {
            dbConnclientDbCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;), $(&apos;dbClient&apos;), $(&apos;dbUserFhir&apos;), $(&apos;dbPwFhir&apos;));
            globalChannelMap.put(&quot;dbConnclientDbCh&quot;, dbConnclientDbCh);
        }

        if (paramList == undefined) {
            paramList = new Packages.java.util.ArrayList();
        }

        if (isQuery) {
            result = dbConnclientDbCh.executeCachedQuery(statement, paramList);
        } else {
            result = dbConnclientDbCh.executeUpdate(statement, paramList);
        }
    } catch (e) {
        logger.error(e);
    }
    finally {
        return result;
    }
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>4efb3110-a83f-48b5-93ad-79c847b51865</id>
            <name>Execute Statement Shared DB Conn clntAcl Ch</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123455</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClntAclCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnClntAclCh = globalChannelMap.get(&quot;dbConnClntAclCh&quot;);

		if (dbConnClntAclCh == null || dbConnClntAclCh.getConnection().isClosed())
		{
			dbConnClntAclCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbClntAcl&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnClntAclCh&quot;, dbConnClntAclCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnClntAclCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnClntAclCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>d96d45dd-57f7-4aa9-9bf4-e464d31b94c6</id>
            <name>Execute Statement Shared DB Conn FHIR</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121922</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhir(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhir.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhir.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>6014068e-c021-4a38-9fa6-6f38f6a2cdab</id>
            <name>Execute Statement Shared DB Conn FHIR Ch</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123492</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhirCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhirCh = globalChannelMap.get(&quot;dbConnFhirCh&quot;);

		if (dbConnFhirCh == null || dbConnFhirCh.getConnection().isClosed())
		{
			dbConnFhirCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnFhirCh&quot;, dbConnFhirCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhirCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhirCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>fbd5c4a1-b816-4496-acdf-067005f1d376</id>
            <name>Execute Statement Shared DB Conn Translations Ch</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123008</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementTranslationsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnTranslationsCh = globalChannelMap.get(&quot;dbConnTranslationsCh&quot;);

		if (dbConnTranslationsCh == null || dbConnTranslationsCh.getConnection().isClosed())
		{
			dbConnTranslationsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlTranslations&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnTranslationsCh&quot;, dbConnTranslationsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnTranslationsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnTranslationsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>5d1a5577-4ba4-4d1e-b6cd-e2d924164909</id>
            <name>Execute Statement with Shared DB Conn ODS Ch</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122280</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdsCh = globalChannelMap.get(&quot;dbConnOdsCh&quot;);

		if (dbConnOdsCh == null || dbConnOdsCh.getConnection().isClosed())
		{
			dbConnOdsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOds&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdsCh&quot;, dbConnOdsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>3991db14-0c0b-4123-952c-5164c1ded501</id>
            <name>Execute Statement with Shared DB Conn ODW Ch</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122960</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.  THis connects to the ODW db in Azure

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdwCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdwCh = globalChannelMap.get(&quot;dbConnOdwCh&quot;);

		if (dbConnOdwCh == null || dbConnOdwCh.getConnection().isClosed())
		{
			dbConnOdwCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOdw&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdwCh&quot;, dbConnOdwCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdwCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdwCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>fae08c88-7550-479a-b8ed-ffef47e8eed9</id>
            <name>executeSharedDBStatementClient</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121956</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClient(statement, isQuery, paramList, dbname)
{
	var result;
 	var dburl= &apos;jdbc:sqlserver://AZW1DEV-SQL02.clinicient.com:1433;databaseName=&apos;+dbname+&apos;&apos;;
	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),dburl,$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			
			//globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		result = dbConnFhir.executeCachedQuery(statement);
	
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.0.0">
        <id>ed20a457-5beb-4aea-9bb9-cf91112ccc56</id>
        <name>WebPT-Default Functions</name>
        <revision>10</revision>
        <lastModified>
          <time>1690140133487</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
          <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
          <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
          <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
          <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
          <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
          <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
          <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
          <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
          <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
          <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
          <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
          <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
          <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
          <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
          <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
          <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
          <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
          <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
          <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
          <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
          <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
          <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
          <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
          <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
          <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
          <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
          <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
          <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
          <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
          <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
          <string>72383579-097e-4205-b030-ce272c90b835</string>
          <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
          <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
          <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
          <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
          <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
          <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
          <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
          <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
          <string>3792b059-e098-436c-81fe-23502ef5042b</string>
          <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
          <string>a757905f-315a-43be-a624-38780a3d7574</string>
          <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
          <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
          <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
          <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
          <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
          <string>38e80069-5a80-4483-9a22-02c928973719</string>
          <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
          <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
          <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
          <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
          <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
          <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
          <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
          <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
          <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
          <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
          <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
          <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
          <string>c65024ed-4660-4423-9636-cb6309cae138</string>
          <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
          <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
          <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
          <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
          <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
          <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
          <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
          <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
          <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
          <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
          <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
          <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
          <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
          <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
          <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
          <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
          <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
          <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
          <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
          <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
          <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
          <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
          <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="4.0.0">
            <id>a8a9a0c8-9322-46dc-bef8-011eb3d70291</id>
            <name>Create Header for CSV</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121678</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	This creates a header for csv files based on the contents of the header variable.  The header
	variable is populated in the channel from the outbound msg template

	@return {String} return description
*/
function createHeader() {
	//Destination transformer.  this creates the header for each new file

	var path = java.nio.file.Paths.get($(&apos;filePath&apos;)+$(&apos;fileName&apos;));
	var bytes = (new java.lang.String($(&apos;header&apos;))).getBytes(&quot;UTF-8&quot;);
	try {
	  java.nio.file.Files.write(path, bytes, java.nio.file.StandardOpenOption.CREATE_NEW);
	}
	catch (e) {
	  //logger.info(&quot; should throw IOException if file already exists&quot;);
	
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>5a886a1f-dab1-41b5-94c6-1a639907d7da</id>
            <name>Filter Message Evaluate Received Checksum</name>
            <revision>33</revision>
            <lastModified>
              <time>1678916806664</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**  This code works by calculating a checksum for each provided message.  We save off the most recent 100 unique checksum values in a global 
	array so if the current message has been recently received we are able to ignore it.
	
	@author:  	Jeffrey Ritz
	@scriptName: 	filterEvaluateReceivedChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {boolean} filter - return filter boolean (true= filter msg, false= do not filter msg)
		persist received_checksum global ChannelMap array
		persist filterMessage ChannelMap variable
	@history
*/
function filterEvaluateReceivedChecksum(msg) {	

	var scriptName= &apos;filterEvaluateReceivedChecksum&apos;
	var filter = false;
	var received_len_limit = 999;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B connectorMessage.getRawData() typeof: &apos;+typeof(connectorMessage.getRawData())+&apos; msg: &apos;+connectorMessage.getRawData());
	} // end if 
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	// var dataBytes = new java.lang.String(connectorMessage.getRawData()).getBytes(&apos;UTF-8&apos;);
	// message = new String(message.getBytes(&quot;utf-8&quot;), &quot;utf-8&quot;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	// var dataBytes = new java.lang.String(msg.getBytes(&apos;UTF-8&apos;));
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);

	// var messageObjectgetBytes= checksum.update(connectorMessage.getRawData().getBytes());
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 
	
	$c(&apos;checksum&apos;, checksum.getValue());
	
	//grab the global channel map variable holding the last X unique checksums that we&apos;ve received
	var received = $gc(&apos;received_checksums&apos;);
	
	if (received == undefined) {
		var received = new Array();
		received.push(checksum.getValue());
	} else {
		//check if we&apos;ve recently received this message, skip it if so
		if (received.indexOf(checksum.getValue()) &gt; -1) {
			filter = true;
		//we haven&apos;t seen it recently, so remember it and allow it through
		} else {
			var received_len = received.length;
			if (received_len &gt; received_len_limit) {
				//remove oldest/first entry, shift all entries forward, and add new entry to end
				received.shift();
				received[received_len_limit] = checksum.getValue();
			} else {
				//add new entry to end of array
				received[received_len] = checksum.getValue();
			} // end if 
		} // end if 
	} // end if 

	 //debug code
	/*for (x=0; x&lt;=received_len_limit; x++) {
		$c(&apos;received-&apos;+x, received[x]);
	} */

	$c(&apos;filterMessage&apos;,filter);
	$gc(&apos;received_checksums&apos;,received);

	return filter;

} // end function</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>fbd0484d-74a2-48e4-aedd-f97c2fcefa16</id>
            <name>Get Message Checksum</name>
            <revision>12</revision>
            <lastModified>
              <time>1678916806703</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**  This code works by calculating and reutrning a checksum for each provided message
	
	@author:  	Jeffrey Ritz
	@scriptName: 	getMessageChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {object} result - return checksum value
	@history
	2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() to remove the exponential representation of the number value
*/
function getMessageChecksum(msg) {	

	var scriptName= &apos;getMessageChecksum&apos;;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	} // end if 
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 

	var checksumValue= checksum.getValue();
	// 2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() 
	var arrChecksumValue= new Array(); 
	arrChecksumValue.push(checksumValue);
	$c(&apos;checksum&apos;, arrChecksumValue);

	return checksumValue;

} // end function</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>91db9bd1-ca92-4dcc-bba4-e1ece603fc87</id>
            <name>Remove Child Object From Parent Object Json</name>
            <revision>22</revision>
            <lastModified>
              <time>1678916845037</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**  This function will remove a JSON child object and it&apos;s descendents from a parent object JSON
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeChildObjectFromParentObjectJson.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
		{string} parentObject - place the name of the string to be designated as the parent object in the JSON
		{string} childObject  - place the name of the string to be designated as the child object to be deleted from the JSON
	@param {object} msg - return modified Json object msg excluding specified Json child object
	@history
*/
function removeChildObjectFromParentObjectJson(msg, parentObject, childObject) {
	
	var scriptName= &apos;removeChildObjectFromParentObjectJson&apos;;
	var debug= 0;

	//var strObjJson= JSON.parse(msg);
	var strObjJson= JSON.stringify(msg);
	
	//var objJson= JSON.parse(msg);
	var newParentObjects= new Object();
	var parentObjects= msg;
	var arrParentObjects= new Array();
	var arrTransactionObjects= new Array();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof parentObjects: &apos;+typeof(parentObjects));
	for (var key in parentObjects) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof key: &apos;+typeof(key)+&apos; key: &apos;+key);
		if(key== parentObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof objJson[key]: &apos;+typeof(parentObjects[key])+&apos; parentObjects[key]: &apos;+JSON.stringify(parentObjects[key]));
			
			var newChildObjects= new Object();
			var childObjects= parentObjects[key];
			var arrChildObjects= new Array();
			
			for(var key2 in childObjects) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key2: &apos;+typeof(key2)+&apos; key2: &apos;+key2+&apos; childObject: &apos;+childObject);
				for(var key3 in childObjects[key2]) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key3: &apos;+typeof(key3)+&apos; key3: &apos;+key3+&apos; childObject: &apos;+childObject);
					if(key3== childObject) {
						var transactionObject= new Object();
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; childObject typeof: &apos;+typeof(childObjects[key2][key3])+&apos; childObject: &apos;+JSON.stringify(childObjects[key2][key3]));
						transactionObject.key= key3;
						transactionObject.value= childObjects[key2][key3];
						delete childObjects[key2][key3];
						if(debug&gt;0) logger.info(&apos;DEBUG::&apos;+scriptName+&apos; DELETE childObject: &apos;+key3+&apos; of parentObject: &apos;+JSON.stringify(childObjects[key2]));
						arrTransactionObjects.push(transactionObject);
					} // end if
				} // end for 
				arrChildObjects.push(childObjects[key2]);
			} // end for
			newParentObjects[key]= arrChildObjects;
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add all child keys: &apos;+JSON.stringify(arrChildObjects)+&apos; into ParentObject[&apos;+key+&apos;]: &apos;+newParentObjects[key]);
		} else {
			newParentObjects[key]= parentObjects[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+parentObjects[key]+&apos; string: &apos;+JSON.stringify(parentObjects[key]));
		} // end if
		arrParentObjects.push(newParentObjects);
	} // end for 
	var newMsg= arrParentObjects;
	channelMap.put(&apos;removeChildObjectMsg&apos;,newMsg);
	channelMap.put(&apos;removedChildTransIds&apos;,arrTransactionObjects);
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));
	return newMsg;
	
} </code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>2ff28338-dfb6-445d-a04e-c74b5486a08c</id>
            <name>Remove Object From Json</name>
            <revision>26</revision>
            <lastModified>
              <time>1703964988318</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**  Desc: This function will remove a JSON object and it&apos;s descendents from the msg
	
	fileName: 	removeObjectFromJson.js
	name:		Remove Object From Json	
	Authored:  	Jeffrey Ritz
	Created: 		2023-03-09
	Details:
		@param IN {string} msg - provide parent JSON object (i.e. Inbound connectorMessage.getRawData() - msg)
		@param IN {string} removeObject - provide JSON object to evaluate and remove from parent JSON object (msg)
		OUT (object) newMsg - return JSON object from processing
	@history
	2023-03-15 JER - Modified to include removeObject function parameter to specify specific JSON object by referencing key to be removed
*/
function removeObjectFromJson(msg, removeObject) {
	
	var scriptName= &apos;removeObjectFromJson&apos;;
	var debug= 0;
	//var objJson= JSON.stringify(msg);
	var objJson= JSON.parse(msg);
	var newObjJson= new Object();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof objJson: &apos;+typeof(objJson)+&apos; objJSON: &apos;+JSON.stringify(objJson));
	for (var key in objJson) {
		if(key== removeObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; DELETE key: &apos;+key);
			// delete objJson[key];
		} else {
			newObjJson[key]= objJson[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+objJson[key]+&apos; string: &apos;+JSON.stringify(objJson[key]));
		} // end if 
	} // end for 
	var newMsg= newObjJson;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));

	// return JSON.stringify(newMsg);
	return newMsg;
} 
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>993a6fd8-454a-4133-ba32-dbcfea71582b</id>
            <name>Update EDITransactionLog</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123233</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	The purpose of this function is to update the status in Insight.
	Populate the channel map with the following variables functionalGroupControlNumber, status, eventDate

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateStatus () {

	//  Build the llst of paramters to pass to the database
	var paramList = new Packages.java.util.ArrayList();
	paramList.add($(&apos;functionalGroupControlNumber&apos;));
	paramList.add($(&apos;eventDate&apos;));  //dateTime in the acknoledged field in this format (&quot;2017-07-31 14:15:01.577&quot;)
	paramList.add(new java.lang.Integer(parseInt($(&apos;status&apos;), 10)));
	
//	logger.info(&quot;updateStatus &quot;+paramList);

	//  SQL Statement and paramters that will be sent to SQL
	var statement = &quot;EXEC dbo.pr_EDITransactionLog_Update ?, ?, ?&quot;;
	//  Code template used for establishiing connection and passing the sql statement and parameter list  
	var result = executeSharedDBStatementFhirCh(statement, false, paramList);
	return result;
	
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>42cb290e-5fb0-46b8-82db-576ea1e1ba0d</id>
            <name>Update EDITransactionLog from responseStatus in the response transformer </name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123356</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Call this in the response transformer on the destination.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateReponseStatus() {
	var status = 0;
	if (responseStatus == SENT){
		var status = 1;
		channelMap.put(&apos;status&apos;,status);
	}

updateStatus()
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>2223579b-f914-4be7-a575-f1a2a2aa1ae2</id>
            <name>ValidateToString</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123044</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} mapping - 
	@param {Any} defaultValue - 
	@param {Any} replacement - 
	@return {String} return description
*/
function validateToString(mapping, defaultValue, replacement) {
    if (mapping == null) {
        mapping = &apos;&apos;;
    }
    return validate(mapping, defaultValue, replacement).toString() + &apos;&apos;;
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.0.0">
        <id>8c9a8268-4ef0-43e9-ae5b-bf8895f0b80c</id>
        <name>WebPT-FORMAT</name>
        <revision>4</revision>
        <lastModified>
          <time>1703964939902</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description>Include any functions or codes with 
-date &amp; time formating related
-data type formatting</description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
          <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
          <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
          <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
          <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
          <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
          <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
          <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
          <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
          <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
          <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
          <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
          <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
          <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
          <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
          <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
          <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
          <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
          <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
          <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
          <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
          <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
          <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
          <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
          <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
          <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
          <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
          <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
          <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
          <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
          <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
          <string>72383579-097e-4205-b030-ce272c90b835</string>
          <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
          <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
          <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
          <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
          <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
          <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
          <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
          <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
          <string>3792b059-e098-436c-81fe-23502ef5042b</string>
          <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
          <string>a757905f-315a-43be-a624-38780a3d7574</string>
          <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
          <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
          <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
          <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
          <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
          <string>38e80069-5a80-4483-9a22-02c928973719</string>
          <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
          <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
          <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
          <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
          <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
          <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
          <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
          <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
          <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
          <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
          <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
          <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
          <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
          <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
          <string>c65024ed-4660-4423-9636-cb6309cae138</string>
          <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
          <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
          <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
          <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
          <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
          <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
          <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
          <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
          <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
          <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
          <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
          <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
          <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
          <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
          <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
          <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
          <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
          <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
          <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
          <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
          <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
          <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
          <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
          <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
          <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
          <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="4.0.0">
            <id>920c9ead-70a6-4168-9d95-89261b73ae44</id>
            <name>12digitDateTime</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123520</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
Take any 12 digit string yyyyMMddHHmm and change to MM/dd/yyyy HH:mm 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm
*/
function yyyyMMddHHmm(string) {
	return DateUtil.convertDate(&quot;yyyyMMddHHmm&quot;, &quot;MM/dd/yyyy HH:mm&quot;, string);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>fe2689ec-1946-46d5-8dd6-8fbbf106e1e6</id>
            <name>14digitDateTime</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122871</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Take 14 digit string yyyyMMddHHmmss and change to MM/dd/yyyy HH:mm:ss 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm:ss
*/
function yyyyMMddHHmmss(string) {
	if (string.length == 14) {
		  return DateUtil.convertDate(&quot;yyyyMMddHHmmss&quot;, &quot;MM/dd/yyyy HH:mm:ss&quot;, string);
	}
	else {
		return &quot;unregcognized string&quot;;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>b9db35e2-d5bd-48a1-8cc6-3475c698d7b4</id>
            <name>currentDT_yyyy-MM-dd HH:mm:ss.SSS</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123114</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Author: Kirby Knight
	Date Modified:  11/09/2020
	Retund the current date/time down to the millisecond

	@return {String} return description
*/
function currentDtToMilliseconds() {
	return DateUtil.getCurrentDate(&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>7e747999-4bec-43fc-978d-7049d3543cf0</id>
            <name>fixHL7NodeOrder</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123155</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/

function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>dfedacf6-773b-413e-b78d-1bf16a92071d</id>
            <name>formatHL7Date</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121643</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Take any eight digit HL7 message data string (yyyyMMdd) and formats it human-readable format (MM/dd/yyyy)
	such as 20090612 -&gt; 06/12/2009

	@param {String} arg1 - 8 digit HL7 message data string yyyyMMdd
	@return {String} return date format as MM/dd/yyyy
*/
function formatHL7Date(string) {
	return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;MM/dd/yyyy&quot;, string);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>a8f54921-2cb6-4134-8806-3c4e10a757d9</id>
            <name>getCurrentLocalTime</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122014</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = getCurrentLocalTimestamp();

	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestamp() {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(&quot;EST&quot;)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>6c5f1bd8-ebbf-4c8e-b465-0be8ccaba0d0</id>
            <name>getCurrentLocalTimeToMs</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123077</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**

	Gets the current local date/time to the milliseconds
	Converts to the timezone that is passed in Examples (America/New_York, America/Chicago, America/Phoenix )

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestampToMs(timeZone) {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timeZone)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>78d74c5b-c881-404a-ad96-4e909e1a19f3</id>
            <name>phoneToE164</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121982</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Convert Insight phone number to E164 format 5554446666 to +15554446666

	@param {Any} phoneIn - 
	@return {String} return description
*/
function phoneToE164(phoneIn) {
	logger.info(&apos;L1 &apos;+phoneIn);
	if(phoneIn != null ){
	//phoneIn = &apos;+1&apos; + phoneIn.toString(); 
	logger.info(&apos;L2 &apos;+phoneIn);
	return &apos;+1&apos; + phoneIn.toString(); 
	} else{
		return null;
	}
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.0.0">
        <id>6a32d94d-408c-4e10-9799-e45e150b5c1f</id>
        <name>WebPT-MISC</name>
        <revision>4</revision>
        <lastModified>
          <time>1703964939909</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description>miscellaneous javascript</description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
          <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
          <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
          <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
          <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
          <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
          <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
          <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
          <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
          <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
          <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
          <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
          <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
          <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
          <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
          <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
          <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
          <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
          <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
          <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
          <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
          <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
          <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
          <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
          <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
          <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
          <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
          <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
          <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
          <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
          <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
          <string>72383579-097e-4205-b030-ce272c90b835</string>
          <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
          <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
          <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
          <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
          <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
          <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
          <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
          <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
          <string>3792b059-e098-436c-81fe-23502ef5042b</string>
          <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
          <string>a757905f-315a-43be-a624-38780a3d7574</string>
          <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
          <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
          <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
          <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
          <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
          <string>38e80069-5a80-4483-9a22-02c928973719</string>
          <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
          <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
          <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
          <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
          <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
          <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
          <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
          <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
          <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
          <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
          <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
          <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
          <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
          <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
          <string>c65024ed-4660-4423-9636-cb6309cae138</string>
          <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
          <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
          <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
          <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
          <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
          <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
          <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
          <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
          <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
          <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
          <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
          <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
          <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
          <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
          <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
          <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
          <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
          <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
          <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
          <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
          <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
          <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
          <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
          <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
          <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
          <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="4.0.0">
            <id>84b4f1c7-f82d-4140-9fbd-98a95f68ff32</id>
            <name>getChannelState</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122648</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetChannelState(channel_id) {

    var channel_status = &quot;NA&quot;;

    var channel_count = parseInt(Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().size());

    for(var i=0;i&lt;channel_count;i++) {
        if (channel_id == Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getChannelId()) {
            channel_status = Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getState();
        }
    }

    return channel_status;

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>715435a9-cb15-4e8f-bc5b-4249eaea6e17</id>
            <name>momentjs</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122487</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>COMPILED_CODE</type>
              <code>/**
	Testing MIRTH-3794 using external JavaScript library &quot;moment.js&quot;
*/
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=b():&quot;function&quot;==typeof define&amp;&amp;define.amd?define(b):a.moment=b()}(this,function(){&quot;use strict&quot;;function a(){return Hc.apply(null,arguments)}function b(a){Hc=a}function c(a){return&quot;[object Array]&quot;===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||&quot;[object Date]&quot;===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c&lt;a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&amp;&amp;(a[c]=b[c]);return f(b,&quot;toString&quot;)&amp;&amp;(a.toString=b.toString),f(b,&quot;valueOf&quot;)&amp;&amp;(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ca(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&amp;&amp;(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow&lt;0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&amp;&amp;(a._isValid=a._isValid&amp;&amp;0===b.charsLeftOver&amp;&amp;0===b.unusedTokens.length&amp;&amp;void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if(&quot;undefined&quot;!=typeof b._isAMomentObject&amp;&amp;(a._isAMomentObject=b._isAMomentObject),&quot;undefined&quot;!=typeof b._i&amp;&amp;(a._i=b._i),&quot;undefined&quot;!=typeof b._f&amp;&amp;(a._f=b._f),&quot;undefined&quot;!=typeof b._l&amp;&amp;(a._l=b._l),&quot;undefined&quot;!=typeof b._strict&amp;&amp;(a._strict=b._strict),&quot;undefined&quot;!=typeof b._tzm&amp;&amp;(a._tzm=b._tzm),&quot;undefined&quot;!=typeof b._isUTC&amp;&amp;(a._isUTC=b._isUTC),&quot;undefined&quot;!=typeof b._offset&amp;&amp;(a._offset=b._offset),&quot;undefined&quot;!=typeof b._pf&amp;&amp;(a._pf=j(b)),&quot;undefined&quot;!=typeof b._locale&amp;&amp;(a._locale=b._locale),Jc.length&gt;0)for(c in Jc)d=Jc[c],e=b[d],&quot;undefined&quot;!=typeof e&amp;&amp;(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),Kc===!1&amp;&amp;(Kc=!0,a.updateOffset(this),Kc=!1)}function o(a){return a instanceof n||null!=a&amp;&amp;null!=a._isAMomentObject}function p(a){return 0&gt;a?Math.ceil(a):Math.floor(a)}function q(a){var b=+a,c=0;return 0!==b&amp;&amp;isFinite(b)&amp;&amp;(c=p(b)),c}function r(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e&gt;d;d++)(c&amp;&amp;a[d]!==b[d]||!c&amp;&amp;q(a[d])!==q(b[d]))&amp;&amp;g++;return g+f}function s(){}function t(a){return a?a.toLowerCase().replace(&quot;_&quot;,&quot;-&quot;):a}function u(a){for(var b,c,d,e,f=0;f&lt;a.length;){for(e=t(a[f]).split(&quot;-&quot;),b=e.length,c=t(a[f+1]),c=c?c.split(&quot;-&quot;):null;b&gt;0;){if(d=v(e.slice(0,b).join(&quot;-&quot;)))return d;if(c&amp;&amp;c.length&gt;=b&amp;&amp;r(e,c,!0)&gt;=b-1)break;b--}f++}return null}function v(a){var b=null;if(!Lc[a]&amp;&amp;&quot;undefined&quot;!=typeof module&amp;&amp;module&amp;&amp;module.exports)try{b=Ic._abbr,require(&quot;./locale/&quot;+a),w(b)}catch(c){}return Lc[a]}function w(a,b){var c;return a&amp;&amp;(c=&quot;undefined&quot;==typeof b?y(a):x(a,b),c&amp;&amp;(Ic=c)),Ic._abbr}function x(a,b){return null!==b?(b.abbr=a,Lc[a]=Lc[a]||new s,Lc[a].set(b),w(a),Lc[a]):(delete Lc[a],null)}function y(a){var b;if(a&amp;&amp;a._locale&amp;&amp;a._locale._abbr&amp;&amp;(a=a._locale._abbr),!a)return Ic;if(!c(a)){if(b=v(a))return b;a=[a]}return u(a)}function z(a,b){var c=a.toLowerCase();Mc[c]=Mc[c+&quot;s&quot;]=Mc[b]=a}function A(a){return&quot;string&quot;==typeof a?Mc[a]||Mc[a.toLowerCase()]:void 0}function B(a){var b,c,d={};for(c in a)f(a,c)&amp;&amp;(b=A(c),b&amp;&amp;(d[b]=a[c]));return d}function C(b,c){return function(d){return null!=d?(E(this,b,d),a.updateOffset(this,c),this):D(this,b)}}function D(a,b){return a._d[&quot;get&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b]()}function E(a,b,c){return a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b](c)}function F(a,b){var c;if(&quot;object&quot;==typeof a)for(c in a)this.set(c,a[c]);else if(a=A(a),&quot;function&quot;==typeof this[a])return this[a](b);return this}function G(a,b,c){var d=&quot;&quot;+Math.abs(a),e=b-d.length,f=a&gt;=0;return(f?c?&quot;+&quot;:&quot;&quot;:&quot;-&quot;)+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function H(a,b,c,d){var e=d;&quot;string&quot;==typeof d&amp;&amp;(e=function(){return this[d]()}),a&amp;&amp;(Qc[a]=e),b&amp;&amp;(Qc[b[0]]=function(){return G(e.apply(this,arguments),b[1],b[2])}),c&amp;&amp;(Qc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function I(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,&quot;&quot;):a.replace(/\\/g,&quot;&quot;)}function J(a){var b,c,d=a.match(Nc);for(b=0,c=d.length;c&gt;b;b++)Qc[d[b]]?d[b]=Qc[d[b]]:d[b]=I(d[b]);return function(e){var f=&quot;&quot;;for(b=0;c&gt;b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function K(a,b){return a.isValid()?(b=L(b,a.localeData()),Pc[b]=Pc[b]||J(b),Pc[b](a)):a.localeData().invalidDate()}function L(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Oc.lastIndex=0;d&gt;=0&amp;&amp;Oc.test(a);)a=a.replace(Oc,c),Oc.lastIndex=0,d-=1;return a}function M(a){return&quot;function&quot;==typeof a&amp;&amp;&quot;[object Function]&quot;===Object.prototype.toString.call(a)}function N(a,b,c){dd[a]=M(b)?b:function(a){return a&amp;&amp;c?c:b}}function O(a,b){return f(dd,a)?dd[a](b._strict,b._locale):new RegExp(P(a))}function P(a){return a.replace(&quot;\\&quot;,&quot;&quot;).replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,&quot;\\$&amp;&quot;)}function Q(a,b){var c,d=b;for(&quot;string&quot;==typeof a&amp;&amp;(a=[a]),&quot;number&quot;==typeof b&amp;&amp;(d=function(a,c){c[b]=q(a)}),c=0;c&lt;a.length;c++)ed[a[c]]=d}function R(a,b){Q(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function S(a,b,c){null!=b&amp;&amp;f(ed,a)&amp;&amp;ed[a](b,c._a,c,a)}function T(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function U(a){return this._months[a.month()]}function V(a){return this._monthsShort[a.month()]}function W(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12&gt;d;d++){if(e=h([2e3,d]),c&amp;&amp;!this._longMonthsParse[d]&amp;&amp;(this._longMonthsParse[d]=new RegExp(&quot;^&quot;+this.months(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;),this._shortMonthsParse[d]=new RegExp(&quot;^&quot;+this.monthsShort(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;)),c||this._monthsParse[d]||(f=&quot;^&quot;+this.months(e,&quot;&quot;)+&quot;|^&quot;+this.monthsShort(e,&quot;&quot;),this._monthsParse[d]=new RegExp(f.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),c&amp;&amp;&quot;MMMM&quot;===b&amp;&amp;this._longMonthsParse[d].test(a))return d;if(c&amp;&amp;&quot;MMM&quot;===b&amp;&amp;this._shortMonthsParse[d].test(a))return d;if(!c&amp;&amp;this._monthsParse[d].test(a))return d}}function X(a,b){var c;return&quot;string&quot;==typeof b&amp;&amp;(b=a.localeData().monthsParse(b),&quot;number&quot;!=typeof b)?a:(c=Math.min(a.date(),T(a.year(),b)),a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+&quot;Month&quot;](b,c),a)}function Y(b){return null!=b?(X(this,b),a.updateOffset(this,!0),this):D(this,&quot;Month&quot;)}function Z(){return T(this.year(),this.month())}function $(a){var b,c=a._a;return c&amp;&amp;-2===j(a).overflow&amp;&amp;(b=c[gd]&lt;0||c[gd]&gt;11?gd:c[hd]&lt;1||c[hd]&gt;T(c[fd],c[gd])?hd:c[id]&lt;0||c[id]&gt;24||24===c[id]&amp;&amp;(0!==c[jd]||0!==c[kd]||0!==c[ld])?id:c[jd]&lt;0||c[jd]&gt;59?jd:c[kd]&lt;0||c[kd]&gt;59?kd:c[ld]&lt;0||c[ld]&gt;999?ld:-1,j(a)._overflowDayOfYear&amp;&amp;(fd&gt;b||b&gt;hd)&amp;&amp;(b=hd),j(a).overflow=b),a}function _(b){a.suppressDeprecationWarnings===!1&amp;&amp;&quot;undefined&quot;!=typeof console&amp;&amp;console.warn&amp;&amp;console.warn(&quot;Deprecation warning: &quot;+b)}function aa(a,b){var c=!0;return g(function(){return c&amp;&amp;(_(a+&quot;\n&quot;+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function ba(a,b){od[a]||(_(b),od[a]=!0)}function ca(a){var b,c,d=a._i,e=pd.exec(d);if(e){for(j(a).iso=!0,b=0,c=qd.length;c&gt;b;b++)if(qd[b][1].exec(d)){a._f=qd[b][0];break}for(b=0,c=rd.length;c&gt;b;b++)if(rd[b][1].exec(d)){a._f+=(e[6]||&quot; &quot;)+rd[b][0];break}d.match(ad)&amp;&amp;(a._f+=&quot;Z&quot;),va(a)}else a._isValid=!1}function da(b){var c=sd.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ca(b),void(b._isValid===!1&amp;&amp;(delete b._isValid,a.createFromInputFallback(b))))}function ea(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970&gt;a&amp;&amp;h.setFullYear(a),h}function fa(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970&gt;a&amp;&amp;b.setUTCFullYear(a),b}function ga(a){return ha(a)?366:365}function ha(a){return a%4===0&amp;&amp;a%100!==0||a%400===0}function ia(){return ha(this.year())}function ja(a,b,c){var d,e=c-b,f=c-a.day();return f&gt;e&amp;&amp;(f-=7),e-7&gt;f&amp;&amp;(f+=7),d=Da(a).add(f,&quot;d&quot;),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ka(a){return ja(a,this._week.dow,this._week.doy).week}function la(){return this._week.dow}function ma(){return this._week.doy}function na(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function oa(a){var b=ja(this,1,4).week;return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function pa(a,b,c,d,e){var f,g=6+e-d,h=fa(a,0,1+g),i=h.getUTCDay();return e&gt;i&amp;&amp;(i+=7),c=null!=c?1*c:e,f=1+g+7*(b-1)-i+c,{year:f&gt;0?a:a-1,dayOfYear:f&gt;0?f:ga(a-1)+f}}function qa(a){var b=Math.round((this.clone().startOf(&quot;day&quot;)-this.clone().startOf(&quot;year&quot;))/864e5)+1;return null==a?b:this.add(a-b,&quot;d&quot;)}function ra(a,b,c){return null!=a?a:null!=b?b:c}function sa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ta(a){var b,c,d,e,f=[];if(!a._d){for(d=sa(a),a._w&amp;&amp;null==a._a[hd]&amp;&amp;null==a._a[gd]&amp;&amp;ua(a),a._dayOfYear&amp;&amp;(e=ra(a._a[fd],d[fd]),a._dayOfYear&gt;ga(e)&amp;&amp;(j(a)._overflowDayOfYear=!0),c=fa(e,0,a._dayOfYear),a._a[gd]=c.getUTCMonth(),a._a[hd]=c.getUTCDate()),b=0;3&gt;b&amp;&amp;null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7&gt;b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[id]&amp;&amp;0===a._a[jd]&amp;&amp;0===a._a[kd]&amp;&amp;0===a._a[ld]&amp;&amp;(a._nextDay=!0,a._a[id]=0),a._d=(a._useUTC?fa:ea).apply(null,f),null!=a._tzm&amp;&amp;a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&amp;&amp;(a._a[id]=24)}}function ua(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=ra(b.GG,a._a[fd],ja(Da(),1,4).year),d=ra(b.W,1),e=ra(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=ra(b.gg,a._a[fd],ja(Da(),f,g).year),d=ra(b.w,1),null!=b.d?(e=b.d,f&gt;e&amp;&amp;++d):e=null!=b.e?b.e+f:f),h=pa(c,d,e,g,f),a._a[fd]=h.year,a._dayOfYear=h.dayOfYear}function va(b){if(b._f===a.ISO_8601)return void ca(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=&quot;&quot;+b._i,i=h.length,k=0;for(e=L(b._f,b._locale).match(Nc)||[],c=0;c&lt;e.length;c++)f=e[c],d=(h.match(O(f,b))||[])[0],d&amp;&amp;(g=h.substr(0,h.indexOf(d)),g.length&gt;0&amp;&amp;j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Qc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),S(f,d,b)):b._strict&amp;&amp;!d&amp;&amp;j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length&gt;0&amp;&amp;j(b).unusedInput.push(h),j(b).bigHour===!0&amp;&amp;b._a[id]&lt;=12&amp;&amp;b._a[id]&gt;0&amp;&amp;(j(b).bigHour=void 0),b._a[id]=wa(b._locale,b._a[id],b._meridiem),ta(b),$(b)}function wa(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&amp;&amp;12&gt;b&amp;&amp;(b+=12),d||12!==b||(b=0),b):b}function xa(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e&lt;a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&amp;&amp;(b._useUTC=a._useUTC),b._f=a._f[e],va(b),k(b)&amp;&amp;(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d&gt;f)&amp;&amp;(d=f,c=b));g(a,c||b)}function ya(a){if(!a._d){var b=B(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ta(a)}}function za(a){var b=new n($(Aa(a)));return b._nextDay&amp;&amp;(b.add(1,&quot;d&quot;),b._nextDay=void 0),b}function Aa(a){var b=a._i,e=a._f;return a._locale=a._locale||y(a._l),null===b||void 0===e&amp;&amp;&quot;&quot;===b?l({nullInput:!0}):(&quot;string&quot;==typeof b&amp;&amp;(a._i=b=a._locale.preparse(b)),o(b)?new n($(b)):(c(e)?xa(a):e?va(a):d(b)?a._d=b:Ba(a),a))}function Ba(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):&quot;string&quot;==typeof f?da(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ta(b)):&quot;object&quot;==typeof f?ya(b):&quot;number&quot;==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ca(a,b,c,d,e){var f={};return&quot;boolean&quot;==typeof c&amp;&amp;(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,za(f)}function Da(a,b,c,d){return Ca(a,b,c,d,!1)}function Ea(a,b){var d,e;if(1===b.length&amp;&amp;c(b[0])&amp;&amp;(b=b[0]),!b.length)return Da();for(d=b[0],e=1;e&lt;b.length;++e)(!b[e].isValid()||b[e][a](d))&amp;&amp;(d=b[e]);return d}function Fa(){var a=[].slice.call(arguments,0);return Ea(&quot;isBefore&quot;,a)}function Ga(){var a=[].slice.call(arguments,0);return Ea(&quot;isAfter&quot;,a)}function Ha(a){var b=B(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=y(),this._bubble()}function Ia(a){return a instanceof Ha}function Ja(a,b){H(a,0,0,function(){var a=this.utcOffset(),c=&quot;+&quot;;return 0&gt;a&amp;&amp;(a=-a,c=&quot;-&quot;),c+G(~~(a/60),2)+b+G(~~a%60,2)})}function Ka(a){var b=(a||&quot;&quot;).match(ad)||[],c=b[b.length-1]||[],d=(c+&quot;&quot;).match(xd)||[&quot;-&quot;,0,0],e=+(60*d[1])+q(d[2]);return&quot;+&quot;===d[0]?e:-e}function La(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Da(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Da(b).local()}function Ma(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Na(b,c){var d,e=this._offset||0;return null!=b?(&quot;string&quot;==typeof b&amp;&amp;(b=Ka(b)),Math.abs(b)&lt;16&amp;&amp;(b=60*b),!this._isUTC&amp;&amp;c&amp;&amp;(d=Ma(this)),this._offset=b,this._isUTC=!0,null!=d&amp;&amp;this.add(d,&quot;m&quot;),e!==b&amp;&amp;(!c||this._changeInProgress?bb(this,Ya(b-e,&quot;m&quot;),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ma(this)}function Oa(a,b){return null!=a?(&quot;string&quot;!=typeof a&amp;&amp;(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Pa(a){return this.utcOffset(0,a)}function Qa(a){return this._isUTC&amp;&amp;(this.utcOffset(0,a),this._isUTC=!1,a&amp;&amp;this.subtract(Ma(this),&quot;m&quot;)),this}function Ra(){return this._tzm?this.utcOffset(this._tzm):&quot;string&quot;==typeof this._i&amp;&amp;this.utcOffset(Ka(this._i)),this}function Sa(a){return a=a?Da(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Ta(){return this.utcOffset()&gt;this.clone().month(0).utcOffset()||this.utcOffset()&gt;this.clone().month(5).utcOffset()}function Ua(){if(&quot;undefined&quot;!=typeof this._isDSTShifted)return this._isDSTShifted;var a={};if(m(a,this),a=Aa(a),a._a){var b=a._isUTC?h(a._a):Da(a._a);this._isDSTShifted=this.isValid()&amp;&amp;r(a._a,b.toArray())&gt;0}else this._isDSTShifted=!1;return this._isDSTShifted}function Va(){return!this._isUTC}function Wa(){return this._isUTC}function Xa(){return this._isUTC&amp;&amp;0===this._offset}function Ya(a,b){var c,d,e,g=a,h=null;return Ia(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:&quot;number&quot;==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=yd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:0,d:q(h[hd])*c,h:q(h[id])*c,m:q(h[jd])*c,s:q(h[kd])*c,ms:q(h[ld])*c}):(h=zd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:Za(h[2],c),M:Za(h[3],c),d:Za(h[4],c),h:Za(h[5],c),m:Za(h[6],c),s:Za(h[7],c),w:Za(h[8],c)}):null==g?g={}:&quot;object&quot;==typeof g&amp;&amp;(&quot;from&quot;in g||&quot;to&quot;in g)&amp;&amp;(e=_a(Da(g.from),Da(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ha(g),Ia(a)&amp;&amp;f(a,&quot;_locale&quot;)&amp;&amp;(d._locale=a._locale),d}function Za(a,b){var c=a&amp;&amp;parseFloat(a.replace(&quot;,&quot;,&quot;.&quot;));return(isNaN(c)?0:c)*b}function $a(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,&quot;M&quot;).isAfter(b)&amp;&amp;--c.months,c.milliseconds=+b-+a.clone().add(c.months,&quot;M&quot;),c}function _a(a,b){var c;return b=La(b,a),a.isBefore(b)?c=$a(a,b):(c=$a(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function ab(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(ba(b,&quot;moment().&quot;+b+&quot;(period, number) is deprecated. Please use moment().&quot;+b+&quot;(number, period).&quot;),f=c,c=d,d=f),c=&quot;string&quot;==typeof c?+c:c,e=Ya(c,d),bb(this,e,a),this}}function bb(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&amp;&amp;b._d.setTime(+b._d+f*d),g&amp;&amp;E(b,&quot;Date&quot;,D(b,&quot;Date&quot;)+g*d),h&amp;&amp;X(b,D(b,&quot;Month&quot;)+h*d),e&amp;&amp;a.updateOffset(b,g||h)}function cb(a,b){var c=a||Da(),d=La(c,this).startOf(&quot;day&quot;),e=this.diff(d,&quot;days&quot;,!0),f=-6&gt;e?&quot;sameElse&quot;:-1&gt;e?&quot;lastWeek&quot;:0&gt;e?&quot;lastDay&quot;:1&gt;e?&quot;sameDay&quot;:2&gt;e?&quot;nextDay&quot;:7&gt;e?&quot;nextWeek&quot;:&quot;sameElse&quot;;return this.format(b&amp;&amp;b[f]||this.localeData().calendar(f,this,Da(c)))}function db(){return new n(this)}function eb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this&gt;+a):(c=o(a)?+a:+Da(a),c&lt;+this.clone().startOf(b))}function fb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+a&gt;+this):(c=o(a)?+a:+Da(a),+this.clone().endOf(b)&lt;c)}function gb(a,b,c){return this.isAfter(a,c)&amp;&amp;this.isBefore(b,c)}function hb(a,b){var c;return b=A(b||&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this===+a):(c=+Da(a),+this.clone().startOf(b)&lt;=c&amp;&amp;c&lt;=+this.clone().endOf(b))}function ib(a,b,c){var d,e,f=La(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=A(b),&quot;year&quot;===b||&quot;month&quot;===b||&quot;quarter&quot;===b?(e=jb(this,f),&quot;quarter&quot;===b?e/=3:&quot;year&quot;===b&amp;&amp;(e/=12)):(d=this-f,e=&quot;second&quot;===b?d/1e3:&quot;minute&quot;===b?d/6e4:&quot;hour&quot;===b?d/36e5:&quot;day&quot;===b?(d-g)/864e5:&quot;week&quot;===b?(d-g)/6048e5:d),c?e:p(e)}function jb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,&quot;months&quot;);return 0&gt;b-f?(c=a.clone().add(e-1,&quot;months&quot;),d=(b-f)/(f-c)):(c=a.clone().add(e+1,&quot;months&quot;),d=(b-f)/(c-f)),-(e+d)}function kb(){return this.clone().locale(&quot;en&quot;).format(&quot;ddd MMM DD YYYY HH:mm:ss [GMT]ZZ&quot;)}function lb(){var a=this.clone().utc();return 0&lt;a.year()&amp;&amp;a.year()&lt;=9999?&quot;function&quot;==typeof Date.prototype.toISOString?this.toDate().toISOString():K(a,&quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;):K(a,&quot;YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;)}function mb(b){var c=K(this,b||a.defaultFormat);return this.localeData().postformat(c)}function nb(a,b){return this.isValid()?Ya({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.from(Da(),a)}function pb(a,b){return this.isValid()?Ya({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function qb(a){return this.to(Da(),a)}function rb(a){var b;return void 0===a?this._locale._abbr:(b=y(a),null!=b&amp;&amp;(this._locale=b),this)}function sb(){return this._locale}function tb(a){switch(a=A(a)){case&quot;year&quot;:this.month(0);case&quot;quarter&quot;:case&quot;month&quot;:this.date(1);case&quot;week&quot;:case&quot;isoWeek&quot;:case&quot;day&quot;:this.hours(0);case&quot;hour&quot;:this.minutes(0);case&quot;minute&quot;:this.seconds(0);case&quot;second&quot;:this.milliseconds(0)}return&quot;week&quot;===a&amp;&amp;this.weekday(0),&quot;isoWeek&quot;===a&amp;&amp;this.isoWeekday(1),&quot;quarter&quot;===a&amp;&amp;this.month(3*Math.floor(this.month()/3)),this}function ub(a){return a=A(a),void 0===a||&quot;millisecond&quot;===a?this:this.startOf(a).add(1,&quot;isoWeek&quot;===a?&quot;week&quot;:a).subtract(1,&quot;ms&quot;)}function vb(){return+this._d-6e4*(this._offset||0)}function wb(){return Math.floor(+this/1e3)}function xb(){return this._offset?new Date(+this):this._d}function yb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function zb(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Ab(){return k(this)}function Bb(){return g({},j(this))}function Cb(){return j(this).overflow}function Db(a,b){H(0,[a,a.length],0,b)}function Eb(a,b,c){return ja(Da([a,11,31+b-c]),b,c).week}function Fb(a){var b=ja(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Gb(a){var b=ja(this,1,4).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Hb(){return Eb(this.year(),1,4)}function Ib(){var a=this.localeData()._week;return Eb(this.year(),a.dow,a.doy)}function Jb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Kb(a,b){return&quot;string&quot;!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),&quot;number&quot;==typeof a?a:null):parseInt(a,10)}function Lb(a){return this._weekdays[a.day()]}function Mb(a){return this._weekdaysShort[a.day()]}function Nb(a){return this._weekdaysMin[a.day()]}function Ob(a){var b,c,d;for(this._weekdaysParse=this._weekdaysParse||[],b=0;7&gt;b;b++)if(this._weekdaysParse[b]||(c=Da([2e3,1]).day(b),d=&quot;^&quot;+this.weekdays(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysShort(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysMin(c,&quot;&quot;),this._weekdaysParse[b]=new RegExp(d.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),this._weekdaysParse[b].test(a))return b}function Pb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Kb(a,this.localeData()),this.add(a-b,&quot;d&quot;)):b}function Qb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,&quot;d&quot;)}function Rb(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Sb(a,b){H(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Tb(a,b){return b._meridiemParse}function Ub(a){return&quot;p&quot;===(a+&quot;&quot;).toLowerCase().charAt(0)}function Vb(a,b,c){return a&gt;11?c?&quot;pm&quot;:&quot;PM&quot;:c?&quot;am&quot;:&quot;AM&quot;}function Wb(a,b){b[ld]=q(1e3*(&quot;0.&quot;+a))}function Xb(){return this._isUTC?&quot;UTC&quot;:&quot;&quot;}function Yb(){return this._isUTC?&quot;Coordinated Universal Time&quot;:&quot;&quot;}function Zb(a){return Da(1e3*a)}function $b(){return Da.apply(null,arguments).parseZone()}function _b(a,b,c){var d=this._calendar[a];return&quot;function&quot;==typeof d?d.call(b,c):d}function ac(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function bc(){return this._invalidDate}function cc(a){return this._ordinal.replace(&quot;%d&quot;,a)}function dc(a){return a}function ec(a,b,c,d){var e=this._relativeTime[c];return&quot;function&quot;==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function fc(a,b){var c=this._relativeTime[a&gt;0?&quot;future&quot;:&quot;past&quot;];return&quot;function&quot;==typeof c?c(b):c.replace(/%s/i,b)}function gc(a){var b,c;for(c in a)b=a[c],&quot;function&quot;==typeof b?this[c]=b:this[&quot;_&quot;+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+&quot;|&quot;+/\d{1,2}/.source)}function hc(a,b,c,d){var e=y(),f=h().set(d,b);return e[c](f,a)}function ic(a,b,c,d,e){if(&quot;number&quot;==typeof a&amp;&amp;(b=a,a=void 0),a=a||&quot;&quot;,null!=b)return hc(a,b,c,e);var f,g=[];for(f=0;d&gt;f;f++)g[f]=hc(a,f,c,e);return g}function jc(a,b){return ic(a,b,&quot;months&quot;,12,&quot;month&quot;)}function kc(a,b){return ic(a,b,&quot;monthsShort&quot;,12,&quot;month&quot;)}function lc(a,b){return ic(a,b,&quot;weekdays&quot;,7,&quot;day&quot;)}function mc(a,b){return ic(a,b,&quot;weekdaysShort&quot;,7,&quot;day&quot;)}function nc(a,b){return ic(a,b,&quot;weekdaysMin&quot;,7,&quot;day&quot;)}function oc(){var a=this._data;return this._milliseconds=Wd(this._milliseconds),this._days=Wd(this._days),this._months=Wd(this._months),a.milliseconds=Wd(a.milliseconds),a.seconds=Wd(a.seconds),a.minutes=Wd(a.minutes),a.hours=Wd(a.hours),a.months=Wd(a.months),a.years=Wd(a.years),this}function pc(a,b,c,d){var e=Ya(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function qc(a,b){return pc(this,a,b,1)}function rc(a,b){return pc(this,a,b,-1)}function sc(a){return 0&gt;a?Math.floor(a):Math.ceil(a)}function tc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f&gt;=0&amp;&amp;g&gt;=0&amp;&amp;h&gt;=0||0&gt;=f&amp;&amp;0&gt;=g&amp;&amp;0&gt;=h||(f+=864e5*sc(vc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=p(f/1e3),i.seconds=a%60,b=p(a/60),i.minutes=b%60,c=p(b/60),i.hours=c%24,g+=p(c/24),e=p(uc(g)),h+=e,g-=sc(vc(e)),d=p(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function uc(a){return 4800*a/146097}function vc(a){return 146097*a/4800}function wc(a){var b,c,d=this._milliseconds;if(a=A(a),&quot;month&quot;===a||&quot;year&quot;===a)return b=this._days+d/864e5,c=this._months+uc(b),&quot;month&quot;===a?c:c/12;switch(b=this._days+Math.round(vc(this._months)),a){case&quot;week&quot;:return b/7+d/6048e5;case&quot;day&quot;:return b+d/864e5;case&quot;hour&quot;:return 24*b+d/36e5;case&quot;minute&quot;:return 1440*b+d/6e4;case&quot;second&quot;:return 86400*b+d/1e3;case&quot;millisecond&quot;:return Math.floor(864e5*b)+d;default:throw new Error(&quot;Unknown unit &quot;+a)}}function xc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*q(this._months/12)}function yc(a){return function(){return this.as(a)}}function zc(a){return a=A(a),this[a+&quot;s&quot;]()}function Ac(a){return function(){return this._data[a]}}function Bc(){return p(this.days()/7)}function Cc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Dc(a,b,c){var d=Ya(a).abs(),e=ke(d.as(&quot;s&quot;)),f=ke(d.as(&quot;m&quot;)),g=ke(d.as(&quot;h&quot;)),h=ke(d.as(&quot;d&quot;)),i=ke(d.as(&quot;M&quot;)),j=ke(d.as(&quot;y&quot;)),k=e&lt;le.s&amp;&amp;[&quot;s&quot;,e]||1===f&amp;&amp;[&quot;m&quot;]||f&lt;le.m&amp;&amp;[&quot;mm&quot;,f]||1===g&amp;&amp;[&quot;h&quot;]||g&lt;le.h&amp;&amp;[&quot;hh&quot;,g]||1===h&amp;&amp;[&quot;d&quot;]||h&lt;le.d&amp;&amp;[&quot;dd&quot;,h]||1===i&amp;&amp;[&quot;M&quot;]||i&lt;le.M&amp;&amp;[&quot;MM&quot;,i]||1===j&amp;&amp;[&quot;y&quot;]||[&quot;yy&quot;,j];return k[2]=b,k[3]=+a&gt;0,k[4]=c,Cc.apply(null,k)}function Ec(a,b){return void 0===le[a]?!1:void 0===b?le[a]:(le[a]=b,!0)}function Fc(a){var b=this.localeData(),c=Dc(this,!a,b);return a&amp;&amp;(c=b.pastFuture(+this,c)),b.postformat(c)}function Gc(){var a,b,c,d=me(this._milliseconds)/1e3,e=me(this._days),f=me(this._months);a=p(d/60),b=p(a/60),d%=60,a%=60,c=p(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0&gt;m?&quot;-&quot;:&quot;&quot;)+&quot;P&quot;+(g?g+&quot;Y&quot;:&quot;&quot;)+(h?h+&quot;M&quot;:&quot;&quot;)+(i?i+&quot;D&quot;:&quot;&quot;)+(j||k||l?&quot;T&quot;:&quot;&quot;)+(j?j+&quot;H&quot;:&quot;&quot;)+(k?k+&quot;M&quot;:&quot;&quot;)+(l?l+&quot;S&quot;:&quot;&quot;):&quot;P0D&quot;}var Hc,Ic,Jc=a.momentProperties=[],Kc=!1,Lc={},Mc={},Nc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Pc={},Qc={},Rc=/\d/,Sc=/\d\d/,Tc=/\d{3}/,Uc=/\d{4}/,Vc=/[+-]?\d{6}/,Wc=/\d\d?/,Xc=/\d{1,3}/,Yc=/\d{1,4}/,Zc=/[+-]?\d{1,6}/,$c=/\d+/,_c=/[+-]?\d+/,ad=/Z|[+-]\d\d:?\d\d/gi,bd=/[+-]?\d+(\.\d{1,3})?/,cd=/[0-9]*[&apos;a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,dd={},ed={},fd=0,gd=1,hd=2,id=3,jd=4,kd=5,ld=6;H(&quot;M&quot;,[&quot;MM&quot;,2],&quot;Mo&quot;,function(){return this.month()+1}),H(&quot;MMM&quot;,0,0,function(a){return this.localeData().monthsShort(this,a)}),H(&quot;MMMM&quot;,0,0,function(a){return this.localeData().months(this,a)}),z(&quot;month&quot;,&quot;M&quot;),N(&quot;M&quot;,Wc),N(&quot;MM&quot;,Wc,Sc),N(&quot;MMM&quot;,cd),N(&quot;MMMM&quot;,cd),Q([&quot;M&quot;,&quot;MM&quot;],function(a,b){b[gd]=q(a)-1}),Q([&quot;MMM&quot;,&quot;MMMM&quot;],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[gd]=e:j(c).invalidMonth=a});var md=&quot;January_February_March_April_May_June_July_August_September_October_November_December&quot;.split(&quot;_&quot;),nd=&quot;Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec&quot;.split(&quot;_&quot;),od={};a.suppressDeprecationWarnings=!1;var pd=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,qd=[[&quot;YYYYYY-MM-DD&quot;,/[+-]\d{6}-\d{2}-\d{2}/],[&quot;YYYY-MM-DD&quot;,/\d{4}-\d{2}-\d{2}/],[&quot;GGGG-[W]WW-E&quot;,/\d{4}-W\d{2}-\d/],[&quot;GGGG-[W]WW&quot;,/\d{4}-W\d{2}/],[&quot;YYYY-DDD&quot;,/\d{4}-\d{3}/]],rd=[[&quot;HH:mm:ss.SSSS&quot;,/(T| )\d\d:\d\d:\d\d\.\d+/],[&quot;HH:mm:ss&quot;,/(T| )\d\d:\d\d:\d\d/],[&quot;HH:mm&quot;,/(T| )\d\d:\d\d/],[&quot;HH&quot;,/(T| )\d\d/]],sd=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=aa(&quot;moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.&quot;,function(a){a._d=new Date(a._i+(a._useUTC?&quot; UTC&quot;:&quot;&quot;))}),H(0,[&quot;YY&quot;,2],0,function(){return this.year()%100}),H(0,[&quot;YYYY&quot;,4],0,&quot;year&quot;),H(0,[&quot;YYYYY&quot;,5],0,&quot;year&quot;),H(0,[&quot;YYYYYY&quot;,6,!0],0,&quot;year&quot;),z(&quot;year&quot;,&quot;y&quot;),N(&quot;Y&quot;,_c),N(&quot;YY&quot;,Wc,Sc),N(&quot;YYYY&quot;,Yc,Uc),N(&quot;YYYYY&quot;,Zc,Vc),N(&quot;YYYYYY&quot;,Zc,Vc),Q([&quot;YYYYY&quot;,&quot;YYYYYY&quot;],fd),Q(&quot;YYYY&quot;,function(b,c){c[fd]=2===b.length?a.parseTwoDigitYear(b):q(b)}),Q(&quot;YY&quot;,function(b,c){c[fd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return q(a)+(q(a)&gt;68?1900:2e3)};var td=C(&quot;FullYear&quot;,!1);H(&quot;w&quot;,[&quot;ww&quot;,2],&quot;wo&quot;,&quot;week&quot;),H(&quot;W&quot;,[&quot;WW&quot;,2],&quot;Wo&quot;,&quot;isoWeek&quot;),z(&quot;week&quot;,&quot;w&quot;),z(&quot;isoWeek&quot;,&quot;W&quot;),N(&quot;w&quot;,Wc),N(&quot;ww&quot;,Wc,Sc),N(&quot;W&quot;,Wc),N(&quot;WW&quot;,Wc,Sc),R([&quot;w&quot;,&quot;ww&quot;,&quot;W&quot;,&quot;WW&quot;],function(a,b,c,d){b[d.substr(0,1)]=q(a)});var ud={dow:0,doy:6};H(&quot;DDD&quot;,[&quot;DDDD&quot;,3],&quot;DDDo&quot;,&quot;dayOfYear&quot;),z(&quot;dayOfYear&quot;,&quot;DDD&quot;),N(&quot;DDD&quot;,Xc),N(&quot;DDDD&quot;,Tc),Q([&quot;DDD&quot;,&quot;DDDD&quot;],function(a,b,c){c._dayOfYear=q(a)}),a.ISO_8601=function(){};var vd=aa(&quot;moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return this&gt;a?this:a}),wd=aa(&quot;moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return a&gt;this?this:a});Ja(&quot;Z&quot;,&quot;:&quot;),Ja(&quot;ZZ&quot;,&quot;&quot;),N(&quot;Z&quot;,ad),N(&quot;ZZ&quot;,ad),Q([&quot;Z&quot;,&quot;ZZ&quot;],function(a,b,c){c._useUTC=!0,c._tzm=Ka(a)});var xd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var yd=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,zd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Ya.fn=Ha.prototype;var Ad=ab(1,&quot;add&quot;),Bd=ab(-1,&quot;subtract&quot;);a.defaultFormat=&quot;YYYY-MM-DDTHH:mm:ssZ&quot;;var Cd=aa(&quot;moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.&quot;,function(a){return void 0===a?this.localeData():this.locale(a)});H(0,[&quot;gg&quot;,2],0,function(){return this.weekYear()%100}),H(0,[&quot;GG&quot;,2],0,function(){return this.isoWeekYear()%100}),Db(&quot;gggg&quot;,&quot;weekYear&quot;),Db(&quot;ggggg&quot;,&quot;weekYear&quot;),Db(&quot;GGGG&quot;,&quot;isoWeekYear&quot;),Db(&quot;GGGGG&quot;,&quot;isoWeekYear&quot;),z(&quot;weekYear&quot;,&quot;gg&quot;),z(&quot;isoWeekYear&quot;,&quot;GG&quot;),N(&quot;G&quot;,_c),N(&quot;g&quot;,_c),N(&quot;GG&quot;,Wc,Sc),N(&quot;gg&quot;,Wc,Sc),N(&quot;GGGG&quot;,Yc,Uc),N(&quot;gggg&quot;,Yc,Uc),N(&quot;GGGGG&quot;,Zc,Vc),N(&quot;ggggg&quot;,Zc,Vc),R([&quot;gggg&quot;,&quot;ggggg&quot;,&quot;GGGG&quot;,&quot;GGGGG&quot;],function(a,b,c,d){b[d.substr(0,2)]=q(a)}),R([&quot;gg&quot;,&quot;GG&quot;],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),H(&quot;Q&quot;,0,0,&quot;quarter&quot;),z(&quot;quarter&quot;,&quot;Q&quot;),N(&quot;Q&quot;,Rc),Q(&quot;Q&quot;,function(a,b){b[gd]=3*(q(a)-1)}),H(&quot;D&quot;,[&quot;DD&quot;,2],&quot;Do&quot;,&quot;date&quot;),z(&quot;date&quot;,&quot;D&quot;),N(&quot;D&quot;,Wc),N(&quot;DD&quot;,Wc,Sc),N(&quot;Do&quot;,function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),Q([&quot;D&quot;,&quot;DD&quot;],hd),Q(&quot;Do&quot;,function(a,b){b[hd]=q(a.match(Wc)[0],10)});var Dd=C(&quot;Date&quot;,!0);H(&quot;d&quot;,0,&quot;do&quot;,&quot;day&quot;),H(&quot;dd&quot;,0,0,function(a){return this.localeData().weekdaysMin(this,a)}),H(&quot;ddd&quot;,0,0,function(a){return this.localeData().weekdaysShort(this,a)}),H(&quot;dddd&quot;,0,0,function(a){return this.localeData().weekdays(this,a)}),H(&quot;e&quot;,0,0,&quot;weekday&quot;),H(&quot;E&quot;,0,0,&quot;isoWeekday&quot;),z(&quot;day&quot;,&quot;d&quot;),z(&quot;weekday&quot;,&quot;e&quot;),z(&quot;isoWeekday&quot;,&quot;E&quot;),N(&quot;d&quot;,Wc),N(&quot;e&quot;,Wc),N(&quot;E&quot;,Wc),N(&quot;dd&quot;,cd),N(&quot;ddd&quot;,cd),N(&quot;dddd&quot;,cd),R([&quot;dd&quot;,&quot;ddd&quot;,&quot;dddd&quot;],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),R([&quot;d&quot;,&quot;e&quot;,&quot;E&quot;],function(a,b,c,d){b[d]=q(a)});var Ed=&quot;Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday&quot;.split(&quot;_&quot;),Fd=&quot;Sun_Mon_Tue_Wed_Thu_Fri_Sat&quot;.split(&quot;_&quot;),Gd=&quot;Su_Mo_Tu_We_Th_Fr_Sa&quot;.split(&quot;_&quot;);H(&quot;H&quot;,[&quot;HH&quot;,2],0,&quot;hour&quot;),H(&quot;h&quot;,[&quot;hh&quot;,2],0,function(){return this.hours()%12||12}),Sb(&quot;a&quot;,!0),Sb(&quot;A&quot;,!1),z(&quot;hour&quot;,&quot;h&quot;),N(&quot;a&quot;,Tb),N(&quot;A&quot;,Tb),N(&quot;H&quot;,Wc),N(&quot;h&quot;,Wc),N(&quot;HH&quot;,Wc,Sc),N(&quot;hh&quot;,Wc,Sc),Q([&quot;H&quot;,&quot;HH&quot;],id),Q([&quot;a&quot;,&quot;A&quot;],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),Q([&quot;h&quot;,&quot;hh&quot;],function(a,b,c){b[id]=q(a),j(c).bigHour=!0});var Hd=/[ap]\.?m?\.?/i,Id=C(&quot;Hours&quot;,!0);H(&quot;m&quot;,[&quot;mm&quot;,2],0,&quot;minute&quot;),z(&quot;minute&quot;,&quot;m&quot;),N(&quot;m&quot;,Wc),N(&quot;mm&quot;,Wc,Sc),Q([&quot;m&quot;,&quot;mm&quot;],jd);var Jd=C(&quot;Minutes&quot;,!1);H(&quot;s&quot;,[&quot;ss&quot;,2],0,&quot;second&quot;),z(&quot;second&quot;,&quot;s&quot;),N(&quot;s&quot;,Wc),N(&quot;ss&quot;,Wc,Sc),Q([&quot;s&quot;,&quot;ss&quot;],kd);var Kd=C(&quot;Seconds&quot;,!1);H(&quot;S&quot;,0,0,function(){return~~(this.millisecond()/100)}),H(0,[&quot;SS&quot;,2],0,function(){return~~(this.millisecond()/10)}),H(0,[&quot;SSS&quot;,3],0,&quot;millisecond&quot;),H(0,[&quot;SSSS&quot;,4],0,function(){return 10*this.millisecond()}),H(0,[&quot;SSSSS&quot;,5],0,function(){return 100*this.millisecond()}),H(0,[&quot;SSSSSS&quot;,6],0,function(){return 1e3*this.millisecond()}),H(0,[&quot;SSSSSSS&quot;,7],0,function(){return 1e4*this.millisecond()}),H(0,[&quot;SSSSSSSS&quot;,8],0,function(){return 1e5*this.millisecond()}),H(0,[&quot;SSSSSSSSS&quot;,9],0,function(){return 1e6*this.millisecond()}),z(&quot;millisecond&quot;,&quot;ms&quot;),N(&quot;S&quot;,Xc,Rc),N(&quot;SS&quot;,Xc,Sc),N(&quot;SSS&quot;,Xc,Tc);var Ld;for(Ld=&quot;SSSS&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)N(Ld,$c);for(Ld=&quot;S&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)Q(Ld,Wb);var Md=C(&quot;Milliseconds&quot;,!1);H(&quot;z&quot;,0,0,&quot;zoneAbbr&quot;),H(&quot;zz&quot;,0,0,&quot;zoneName&quot;);var Nd=n.prototype;Nd.add=Ad,Nd.calendar=cb,Nd.clone=db,Nd.diff=ib,Nd.endOf=ub,Nd.format=mb,Nd.from=nb,Nd.fromNow=ob,Nd.to=pb,Nd.toNow=qb,Nd.get=F,Nd.invalidAt=Cb,Nd.isAfter=eb,Nd.isBefore=fb,Nd.isBetween=gb,Nd.isSame=hb,Nd.isValid=Ab,Nd.lang=Cd,Nd.locale=rb,Nd.localeData=sb,Nd.max=wd,Nd.min=vd,Nd.parsingFlags=Bb,Nd.set=F,Nd.startOf=tb,Nd.subtract=Bd,Nd.toArray=yb,Nd.toObject=zb,Nd.toDate=xb,Nd.toISOString=lb,Nd.toJSON=lb,Nd.toString=kb,Nd.unix=wb,Nd.valueOf=vb,Nd.year=td,Nd.isLeapYear=ia,Nd.weekYear=Fb,Nd.isoWeekYear=Gb,Nd.quarter=Nd.quarters=Jb,Nd.month=Y,Nd.daysInMonth=Z,Nd.week=Nd.weeks=na,Nd.isoWeek=Nd.isoWeeks=oa,Nd.weeksInYear=Ib,Nd.isoWeeksInYear=Hb,Nd.date=Dd,Nd.day=Nd.days=Pb,Nd.weekday=Qb,Nd.isoWeekday=Rb,Nd.dayOfYear=qa,Nd.hour=Nd.hours=Id,Nd.minute=Nd.minutes=Jd,Nd.second=Nd.seconds=Kd,
Nd.millisecond=Nd.milliseconds=Md,Nd.utcOffset=Na,Nd.utc=Pa,Nd.local=Qa,Nd.parseZone=Ra,Nd.hasAlignedHourOffset=Sa,Nd.isDST=Ta,Nd.isDSTShifted=Ua,Nd.isLocal=Va,Nd.isUtcOffset=Wa,Nd.isUtc=Xa,Nd.isUTC=Xa,Nd.zoneAbbr=Xb,Nd.zoneName=Yb,Nd.dates=aa(&quot;dates accessor is deprecated. Use date instead.&quot;,Dd),Nd.months=aa(&quot;months accessor is deprecated. Use month instead&quot;,Y),Nd.years=aa(&quot;years accessor is deprecated. Use year instead&quot;,td),Nd.zone=aa(&quot;moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779&quot;,Oa);var Od=Nd,Pd={sameDay:&quot;[Today at] LT&quot;,nextDay:&quot;[Tomorrow at] LT&quot;,nextWeek:&quot;dddd [at] LT&quot;,lastDay:&quot;[Yesterday at] LT&quot;,lastWeek:&quot;[Last] dddd [at] LT&quot;,sameElse:&quot;L&quot;},Qd={LTS:&quot;h:mm:ss A&quot;,LT:&quot;h:mm A&quot;,L:&quot;MM/DD/YYYY&quot;,LL:&quot;MMMM D, YYYY&quot;,LLL:&quot;MMMM D, YYYY h:mm A&quot;,LLLL:&quot;dddd, MMMM D, YYYY h:mm A&quot;},Rd=&quot;Invalid date&quot;,Sd=&quot;%d&quot;,Td=/\d{1,2}/,Ud={future:&quot;in %s&quot;,past:&quot;%s ago&quot;,s:&quot;a few seconds&quot;,m:&quot;a minute&quot;,mm:&quot;%d minutes&quot;,h:&quot;an hour&quot;,hh:&quot;%d hours&quot;,d:&quot;a day&quot;,dd:&quot;%d days&quot;,M:&quot;a month&quot;,MM:&quot;%d months&quot;,y:&quot;a year&quot;,yy:&quot;%d years&quot;},Vd=s.prototype;Vd._calendar=Pd,Vd.calendar=_b,Vd._longDateFormat=Qd,Vd.longDateFormat=ac,Vd._invalidDate=Rd,Vd.invalidDate=bc,Vd._ordinal=Sd,Vd.ordinal=cc,Vd._ordinalParse=Td,Vd.preparse=dc,Vd.postformat=dc,Vd._relativeTime=Ud,Vd.relativeTime=ec,Vd.pastFuture=fc,Vd.set=gc,Vd.months=U,Vd._months=md,Vd.monthsShort=V,Vd._monthsShort=nd,Vd.monthsParse=W,Vd.week=ka,Vd._week=ud,Vd.firstDayOfYear=ma,Vd.firstDayOfWeek=la,Vd.weekdays=Lb,Vd._weekdays=Ed,Vd.weekdaysMin=Nb,Vd._weekdaysMin=Gd,Vd.weekdaysShort=Mb,Vd._weekdaysShort=Fd,Vd.weekdaysParse=Ob,Vd.isPM=Ub,Vd._meridiemParse=Hd,Vd.meridiem=Vb,w(&quot;en&quot;,{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===q(a%100/10)?&quot;th&quot;:1===b?&quot;st&quot;:2===b?&quot;nd&quot;:3===b?&quot;rd&quot;:&quot;th&quot;;return a+c}}),a.lang=aa(&quot;moment.lang is deprecated. Use moment.locale instead.&quot;,w),a.langData=aa(&quot;moment.langData is deprecated. Use moment.localeData instead.&quot;,y);var Wd=Math.abs,Xd=yc(&quot;ms&quot;),Yd=yc(&quot;s&quot;),Zd=yc(&quot;m&quot;),$d=yc(&quot;h&quot;),_d=yc(&quot;d&quot;),ae=yc(&quot;w&quot;),be=yc(&quot;M&quot;),ce=yc(&quot;y&quot;),de=Ac(&quot;milliseconds&quot;),ee=Ac(&quot;seconds&quot;),fe=Ac(&quot;minutes&quot;),ge=Ac(&quot;hours&quot;),he=Ac(&quot;days&quot;),ie=Ac(&quot;months&quot;),je=Ac(&quot;years&quot;),ke=Math.round,le={s:45,m:45,h:22,d:26,M:11},me=Math.abs,ne=Ha.prototype;ne.abs=oc,ne.add=qc,ne.subtract=rc,ne.as=wc,ne.asMilliseconds=Xd,ne.asSeconds=Yd,ne.asMinutes=Zd,ne.asHours=$d,ne.asDays=_d,ne.asWeeks=ae,ne.asMonths=be,ne.asYears=ce,ne.valueOf=xc,ne._bubble=tc,ne.get=zc,ne.milliseconds=de,ne.seconds=ee,ne.minutes=fe,ne.hours=ge,ne.days=he,ne.weeks=Bc,ne.months=ie,ne.years=je,ne.humanize=Fc,ne.toISOString=Gc,ne.toString=Gc,ne.toJSON=Gc,ne.locale=rb,ne.localeData=sb,ne.toIsoString=aa(&quot;toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)&quot;,Gc),ne.lang=Cd,H(&quot;X&quot;,0,0,&quot;unix&quot;),H(&quot;x&quot;,0,0,&quot;valueOf&quot;),N(&quot;x&quot;,_c),N(&quot;X&quot;,bd),Q(&quot;X&quot;,function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),Q(&quot;x&quot;,function(a,b,c){c._d=new Date(q(a))}),a.version=&quot;2.10.6&quot;,b(Da),a.fn=Od,a.min=Fa,a.max=Ga,a.utc=h,a.unix=Zb,a.months=jc,a.isDate=d,a.locale=w,a.invalid=l,a.duration=Ya,a.isMoment=o,a.weekdays=lc,a.parseZone=$b,a.localeData=y,a.isDuration=Ia,a.monthsShort=kc,a.weekdaysMin=nc,a.defineLocale=x,a.weekdaysShort=mc,a.normalizeUnits=A,a.relativeTimeThreshold=Ec;var oe=a;return oe});</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>2c64669f-f07e-4365-bf64-c559ace83004</id>
            <name>stopOnErrorCount</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122375</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Function to Stop a channel if it reaches a particular error count. 
	Also sends an alert message via another channel (this sends a sms via our monitoring system).

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function stopOnErrorCount(cid, errorCount) {
	var channelStatisticsController = Packages.com.mirth.connect.server.controllers.ChannelStatisticsController.getInstance();
	var channelStatusController = Packages.com.mirth.connect.server.controllers.ChannelStatusController.getInstance();
	var stats = channelStatisticsController.getStatistics(cid);
	// var numOfQueued = stats.queued;
	var numOfErrors = stats.error;

	if(numOfErrors &gt; errorCount )
	{
		//Stop Me
		channelStatusController.stopChannel(cid);
		//Alert msg sent to _SVHALERT channel
		var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
		var channelName = channelController.getDeployedChannelById(cid).getName();
		var alertmsg = &apos;mirth01 mirth_channel_status codeTemplate_stopOnErrorCount 0 &apos; +
					   &apos;channel &apos; + channelName + &apos; stopped&apos;;
		router.routeMessage(&apos;_SVHALERT&apos;, alertmsg);
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>08044817-3504-4fc1-80ee-404870195151</id>
            <name>test</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122745</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>COMPILED_CODE</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.
	searchword
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function testfunc(arg1) {
	return arg1;
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.0.0">
        <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
        <name>WebPT-Mirth</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476121602</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>3792b059-e098-436c-81fe-23502ef5042b</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="4.0.0">
            <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
            <name>Fix HL7v2 Node Order</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121804</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.0.0">
        <id>35f4c250-08b4-4e42-8e60-f85aa98dfe50</id>
        <name>WebPT-Translations</name>
        <revision>4</revision>
        <lastModified>
          <time>1703964939924</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
          <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
          <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
          <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
          <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
          <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
          <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
          <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
          <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
          <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
          <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
          <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
          <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
          <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
          <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
          <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
          <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
          <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
          <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
          <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
          <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
          <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
          <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
          <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
          <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
          <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
          <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
          <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
          <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
          <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
          <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
          <string>72383579-097e-4205-b030-ce272c90b835</string>
          <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
          <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
          <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
          <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
          <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
          <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
          <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
          <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
          <string>3792b059-e098-436c-81fe-23502ef5042b</string>
          <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
          <string>a757905f-315a-43be-a624-38780a3d7574</string>
          <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
          <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
          <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
          <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
          <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
          <string>38e80069-5a80-4483-9a22-02c928973719</string>
          <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
          <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
          <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
          <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
          <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
          <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
          <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
          <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
          <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
          <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
          <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
          <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
          <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
          <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
          <string>c65024ed-4660-4423-9636-cb6309cae138</string>
          <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
          <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
          <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
          <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
          <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
          <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
          <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
          <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
          <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
          <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
          <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
          <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
          <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
          <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
          <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
          <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
          <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
          <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
          <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
          <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
          <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
          <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
          <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
          <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
          <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
          <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="4.0.0">
            <id>be8f057b-2640-4613-b2e7-83326c59169c</id>
            <name>AddZeros</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122826</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function addZeroes(num) {
   return num.toLocaleString(&quot;en&quot;, {useGrouping: false, minimumFractionDigits: 2})
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>51913864-7702-489a-b7c6-54992c12b19d</id>
            <name>FindLookupValueWithDefault</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122218</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function FindLookupValueWithDefault ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        //obj.LeftValue = LeftValue;
        //obj.RightValue1 = DefaultValue1;
        //obj.RightValue2   = DefaultValue2; 
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);
            var result = pattern.test(LeftValue );

            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>c276be9f-c8f1-4dea-8df0-e000c6745271</id>
            <name>FindLookupValueWithInsuranceId</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122080</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function FindLookupValueWithInsuranceId ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);             
            var result = pattern.test(LeftValue );
	
            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>7d746da2-58c6-44eb-ad5c-c5bfd0a0c537</id>
            <name>UseExternalProblemID</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122349</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalProblemID() {

if ([&apos;2804&apos;, &apos;2822&apos;].indexOf($(&apos;tenantId&apos;) + &apos;&apos;) &gt; -1) {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitexternalproblemid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitaccountnumber&apos;].toString();
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>07730e85-7f30-4ddf-90a4-78183c896ab5</id>
            <name>UseExternalVisitID</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122192</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalVisitID() {
	
if ($(&apos;tenantId&apos;)  == &apos;9999&apos; ) {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitexternalvisitid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitvisitnumber&apos;].toString();
}
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.0.0">
        <id>81eb36d5-e0f8-4ec0-ad53-1875c50888b4</id>
        <name>XDS</name>
        <revision>5</revision>
        <lastModified>
          <time>1672160898860</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description>XDS Library</description>
        <includeNewChannels>false</includeNewChannels>
        <enabledChannelIds>
          <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
          <string>38e80069-5a80-4483-9a22-02c928973719</string>
          <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
          <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
          <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
          <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
          <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
          <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
          <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
          <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
          <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
          <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
          <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
          <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
          <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
          <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
          <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
          <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
          <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
          <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
          <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
          <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
          <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
          <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
          <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
          <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
          <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
          <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
          <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
          <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
          <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
          <string>72383579-097e-4205-b030-ce272c90b835</string>
          <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
          <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
          <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
          <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
          <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
          <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
          <string>a757905f-315a-43be-a624-38780a3d7574</string>
          <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
          <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
          <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
          <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
          <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
          <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
          <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
          <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
          <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
          <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
          <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
          <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
          <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
          <string>076d39da-7152-40db-91a1-1746167239e9</string>
          <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
          <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
          <string>c65024ed-4660-4423-9636-cb6309cae138</string>
          <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
          <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
          <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
          <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
          <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
          <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
          <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
          <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
          <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
          <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
          <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
          <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
          <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
          <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
          <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
          <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
          <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
          <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
          <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
          <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
          <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
          <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="4.0.0">
            <id>5a64c60b-b615-4297-8876-8d908e4f8826</id>
            <name>createXdsExtrinsicClassification</name>
            <revision>1</revision>
            <lastModified>
              <time>1650911325299</time>
              <timezone>GMT-06:00</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/** createXdsExtrinsicClassification(msg)

  	- Desc: This function receives CCD msg and returns XdsExtrinsicClassification XML object
	- Modification:
	2018-10-30 jer - additional debug and namespace logic
	
   	@param {object} objObject 	- this contains a CCD object (i.e. author, performer, participant, etc.)
	@param {string} objType		- this contains a string to identify the type of Object (i.e. author, performer, participant, etc.)
	@return {string} strXML 		- contains the XML string to be inserted into an XML Soap Envelope
**/
function createXdsExtrinsicClassification(objObject, objType) {		
	
	var scriptName= &apos;createXdsExtrinsicClassification&apos;;
	
	// build Classification XML
	var tmp = new XML();
	// var tmp = new XML(&quot;&lt;classification&gt;&lt;/classification&gt;&quot;);
	
	default xml namespace= &apos;urn:ihe:iti:xds-b:2007&apos;;
	var rim= new Namespace(&apos;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&apos;);
	tmp.addNamespace(rim);
	
	logger.error(scriptName+&apos;::objObject: &apos;+JSON.stringify(objObject, null, 4)+&apos; typeof: &apos;+typeof(objObject));
	logger.error(scriptName+&apos;::objType: &apos;+objType+&apos; typeof: &apos;+typeof(objType)+&apos; length: &apos;+objType.length);
	
	if (objType== &apos;author&apos;) {
		var classificationScheme= &quot;urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d&quot;;
		var classifiedObject= $(&apos;extrinsicObjectUUID&apos;);
	} // end if

	/*
	var rootElement = new XML(&apos;&lt;&apos;+rootElementTag+&apos;&gt;&lt;/&apos;+rootElementTag+&apos;&gt;&apos;);
	rootElement.addNamespace(new Namespace(&apos;xsi&apos;, &apos;http://www.w3.org/2001/XMLSchema-instance&apos;));
	rootElement[&apos;@xsi:schemaLocation&apos;]=&apos;urn:hl7-org:v3 ../../schema/HL7V3/NE2008/multicacheschemas/PRPA_IN201305UV02.xsd&apos;;
	*/
		
	// tmp.addNamespace(new Namespace(&apos;rim&apos;, &apos;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&apos;));
	// &lt;rim:Classification id=&quot;cl01&quot; classificationScheme=&quot;urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d&quot; classifiedObject=&quot;775a43ca-adf2-445e-bd4b-936d08f033ab&quot;&gt;
	// createSegment(&apos;rim:Classification&apos;,tmp);
	logger.error(scriptName+&apos;::xml.toXMLString: &apos;+tmp.toXMLString()+&apos; typeof: &apos;+typeof(tmp));
	
	tmp.rim::[&apos;classification&apos;][&apos;@id&apos;]= UUIDGenerator.getUUID().toString();
	tmp.rim::[&apos;classification&apos;][&apos;@classificationScheme&apos;]= 	classificationScheme;
	tmp.rim::[&apos;classification&apos;][&apos;@classifiedObject&apos;]=		classifiedObject;
	logger.error(scriptName+&apos;::xml.toXMLString: &apos;+tmp.toXMLString()+&apos; typeof: &apos;+typeof(tmp));
	
	if (objType== &apos;Author&apos;) {
		for (var property in objObject) {
			if (objObject.hasOwnProperty(property)) {
				logger.error(property, objObject[property]);
			} // end if
		} // end for
	} // end if

/*
			createSegment(&apos;rim:Slot&apos;,msg);				
			msg[&apos;Classification&apos;][&apos;Slot&apos;][&apos;@name&apos;]
							&lt;rim:Slot name=&quot;authorPerson&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;1073533246^Kalish^Michael^^MD^^^^&amp;amp;2.16.840.1.113883.4.6&amp;amp;ISO&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorInstitution&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;Carolina Kidney Associates&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorRole&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;Medical Doctor&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                            &lt;rim:Slot name=&quot;authorSpecialty&quot;&gt;
                                &lt;rim:ValueList&gt;
                                    &lt;rim:Value&gt;General Medicine&lt;/rim:Value&gt;
                                &lt;/rim:ValueList&gt;
                            &lt;/rim:Slot&gt;
                        &lt;/rim:Classification&gt;
	
*/
	var XMLmessage = SerializerFactory.getSerializer(&apos;XML&apos;).fromXML(tmp);
	return XMLmessage;
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
    </codeTemplateLibraries>
    <channelTags>
      <channelTag>
        <id>a93f3fdd-2d93-4042-9986-4aedde58e025</id>
        <name>CCDA</name>
        <channelIds>
          <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
          <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
          <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
          <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
        </channelIds>
        <backgroundColor>
          <red>255</red>
          <green>0</green>
          <blue>0</blue>
          <alpha>255</alpha>
        </backgroundColor>
      </channelTag>
      <channelTag>
        <id>0283051d-047b-4fc5-845c-85b497448baa</id>
        <name>FiveSix</name>
        <channelIds>
          <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
        </channelIds>
        <backgroundColor>
          <red>255</red>
          <green>0</green>
          <blue>0</blue>
          <alpha>255</alpha>
        </backgroundColor>
      </channelTag>
    </channelTags>
  </exportData>
</channel>