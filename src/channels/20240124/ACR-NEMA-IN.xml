<channel version="4.0.0">
  <id>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</id>
  <nextMetaDataId>2</nextMetaDataId>
  <name>ACR-NEMA-IN</name>
  <description></description>
  <revision>1</revision>
  <sourceConnector version="4.0.0">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.dimse.DICOMReceiverProperties" version="4.0.0">
      <pluginProperties/>
      <listenerConnectorProperties version="4.0.0">
        <host>127.0.0.1</host>
        <port>2100</port>
      </listenerConnectorProperties>
      <sourceConnectorProperties version="4.0.0">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <applicationEntity>ACRIN</applicationEntity>
      <localHost></localHost>
      <localPort></localPort>
      <localApplicationEntity></localApplicationEntity>
      <soCloseDelay>50</soCloseDelay>
      <releaseTo>5</releaseTo>
      <requestTo>5</requestTo>
      <idleTo>60</idleTo>
      <reaper>10</reaper>
      <rspDelay>0</rspDelay>
      <pdv1>false</pdv1>
      <sndpdulen>16</sndpdulen>
      <rcvpdulen>16</rcvpdulen>
      <async>0</async>
      <bigEndian>false</bigEndian>
      <bufSize>1</bufSize>
      <defts>false</defts>
      <dest></dest>
      <nativeData>false</nativeData>
      <sorcvbuf>0</sorcvbuf>
      <sosndbuf>0</sosndbuf>
      <tcpDelay>true</tcpDelay>
      <keyPW></keyPW>
      <keyStore></keyStore>
      <keyStorePW></keyStorePW>
      <noClientAuth>true</noClientAuth>
      <nossl2>true</nossl2>
      <tls>notls</tls>
      <trustStore></trustStore>
      <trustStorePW></trustStorePW>
    </properties>
    <transformer version="4.0.0">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
          <name>New Step</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>msg[&apos;tag00200013&apos;].setChildren(&quot;1&quot;);</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
      </elements>
      <inboundTemplate encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjxkaWNvbT4KICAgIDx0YWcwMDAyMDAwMCBsZW49IjQiIHRhZz0iMDAwMjAwMDAiIHZyPSJVTCI+MjE0PC90YWcwMDAyMDAwMD4KICAgIDx0YWcwMDAyMDAwMSBsZW49IjIiIHRhZz0iMDAwMjAwMDEiIHZyPSJPQiI+MDBcMDE8L3RhZzAwMDIwMDAxPgogICAgPHRhZzAwMDIwMDAyIGxlbj0iMjYiIHRhZz0iMDAwMjAwMDIiIHZyPSJVSSI+MS4yLjg0MC4xMDAwOC41LjEuNC4xLjEuMTwvdGFnMDAwMjAwMDI+CiAgICA8dGFnMDAwMjAwMDMgbGVuPSI2MCIgdGFnPSIwMDAyMDAwMyIgdnI9IlVJIj4xLjMuNi4xLjQuMS41OTYyLjk5LjEuNDIwODc0MDE4LjM4NDgzMjA2OS4xMjY3NDM2MjU5MTA2LjcuMDwvdGFnMDAwMjAwMDM+CiAgICA8dGFnMDAwMjAwMTAgbGVuPSIyMCIgdGFnPSIwMDAyMDAxMCIgdnI9IlVJIj4xLjIuODQwLjEwMDA4LjEuMi4xPC90YWcwMDAyMDAxMD4KICAgIDx0YWcwMDAyMDAxMiBsZW49IjIyIiB0YWc9IjAwMDIwMDEyIiB2cj0iVUkiPjEuMy42LjEuNC4xLjU5NjIuOTkuMjwvdGFnMDAwMjAwMTI+CiAgICA8dGFnMDAwMjAwMTMgbGVuPSIxNiIgdGFnPSIwMDAyMDAxMyIgdnI9IlNIIj5QSVhFTE1FREpBVkEwMDE8L3RhZzAwMDIwMDEzPgogICAgPHRhZzAwMDIwMDE2IGxlbj0iOCIgdGFnPSIwMDAyMDAxNiIgdnI9IkFFIj5QSVhFTE1FRDwvdGFnMDAwMjAwMTY+CiAgICA8dGFnMDAwODAwMTAgbGVuPSIxMiIgdGFnPSIwMDA4MDAxMCIgdnI9IkNTIj5BQ1ItTkVNQSAyLjA8L3RhZzAwMDgwMDEwPgogICAgPHRhZzAwMDgwMDE2IGxlbj0iMjYiIHRhZz0iMDAwODAwMTYiIHZyPSJVSSI+MS4yLjg0MC4xMDAwOC41LjEuNC4xLjEuMTwvdGFnMDAwODAwMTY+CiAgICA8dGFnMDAwODAwMTggbGVuPSI2MCIgdGFnPSIwMDA4MDAxOCIgdnI9IlVJIj4xLjMuNi4xLjQuMS41OTYyLjk5LjEuNDIwODc0MDE4LjM4NDgzMjA2OS4xMjY3NDM2MjU5MTA2LjcuMDwvdGFnMDAwODAwMTg+CiAgICA8dGFnMDAwODAwMjAgbGVuPSI4IiB0YWc9IjAwMDgwMDIwIiB2cj0iREEiPjIwMTAwMjE5PC90YWcwMDA4MDAyMD4KICAgIDx0YWcwMDA4MDAyMSBsZW49IjAiIHRhZz0iMDAwODAwMjEiIHZyPSJEQSIvPgogICAgPHRhZzAwMDgwMDIzIGxlbj0iOCIgdGFnPSIwMDA4MDAyMyIgdnI9IkRBIj4yMDEwMDIxOTwvdGFnMDAwODAwMjM+CiAgICA8dGFnMDAwODAwMzAgbGVuPSIxMiIgdGFnPSIwMDA4MDAzMCIgdnI9IlRNIj4xMDQ2NTguMDAwMDwvdGFnMDAwODAwMzA+CiAgICA8dGFnMDAwODAwMzMgbGVuPSIxMiIgdGFnPSIwMDA4MDAzMyIgdnI9IlRNIj4xMDQ2MTUuMDAwMDwvdGFnMDAwODAwMzM+CiAgICA8dGFnMDAwODAwNDAgbGVuPSIyIiB0YWc9IjAwMDgwMDQwIiB2cj0iVVMiPjA8L3RhZzAwMDgwMDQwPgogICAgPHRhZzAwMDgwMDUwIGxlbj0iMCIgdGFnPSIwMDA4MDA1MCIgdnI9IlNIIi8+CiAgICA8dGFnMDAwODAwNjAgbGVuPSIyIiB0YWc9IjAwMDgwMDYwIiB2cj0iQ1MiPkRSPC90YWcwMDA4MDA2MD4KICAgIDx0YWcwMDA4MDA3MCBsZW49IjgiIHRhZz0iMDAwODAwNzAiIHZyPSJMTyI+SU1JWCBBRFI8L3RhZzAwMDgwMDcwPgogICAgPHRhZzAwMDgwMDkwIGxlbj0iMCIgdGFnPSIwMDA4MDA5MCIgdnI9IlBOIi8+CiAgICA8dGFnMDAwODEwOTAgbGVuPSIwIiB0YWc9IjAwMDgxMDkwIiB2cj0iTE8iLz4KICAgIDx0YWcwMDEwMDAxMCBsZW49IjEwIiB0YWc9IjAwMTAwMDEwIiB2cj0iUE4iPk5BTUVeTk9ORTwvdGFnMDAxMDAwMTA+CiAgICA8dGFnMDAxMDAwMjAgbGVuPSI0IiB0YWc9IjAwMTAwMDIwIiB2cj0iTE8iPk5PSUQ8L3RhZzAwMTAwMDIwPgogICAgPHRhZzAwMTAwMDMwIGxlbj0iMCIgdGFnPSIwMDEwMDAzMCIgdnI9IkRBIi8+CiAgICA8dGFnMDAxMDAwNDAgbGVuPSIwIiB0YWc9IjAwMTAwMDQwIiB2cj0iQ1MiLz4KICAgIDx0YWcwMDEyMDA2MiBsZW49IjQiIHRhZz0iMDAxMjAwNjIiIHZyPSJDUyI+WUVTPC90YWcwMDEyMDA2Mj4KICAgIDx0YWcwMDEyMDA2MyBsZW49IjkyIiB0YWc9IjAwMTIwMDYzIiB2cj0iTE8iPkRlaWRlbnRpZmllZFxEZXNjcmlwdG9ycyByZW1vdmVkIGV4Y2VwdCBzZXJpZXNcUGF0aWVudCBDaGFyYWN0ZXJpc3RpY3MgcmVtb3ZlZFxVSURzIHJlbWFwcGVkPC90YWcwMDEyMDA2Mz4KICAgIDx0YWcwMDE4MTAyMCBsZW49IjE0IiB0YWc9IjAwMTgxMDIwIiB2cj0iTE8iPjA4LjA0LjA5XDIuMDFDPC90YWcwMDE4MTAyMD4KICAgIDx0YWcwMDE4MTE1RSBsZW49IjAiIHRhZz0iMDAxODExNUUiIHZyPSJEUyIvPgogICAgPHRhZzAwMTg2MDAwIGxlbj0iMCIgdGFnPSIwMDE4NjAwMCIgdnI9IkRTIi8+CiAgICA8dGFnMDAxOEEwMDEgbGVuPSItMSIgdGFnPSIwMDE4QTAwMSIgdnI9IlNRIj4KICAgICAgICA8aXRlbSBsZW49Ii0xIiBvZmY9IjgyOCI+CiAgICAgICAgICAgIDx0YWcwMDA4MDA3MCBsZW49IjgiIHRhZz0iMDAwODAwNzAiIHZyPSJMTyI+UGl4ZWxNZWQ8L3RhZzAwMDgwMDcwPgogICAgICAgICAgICA8dGFnMDAwODEwMTAgbGVuPSI4IiB0YWc9IjAwMDgxMDEwIiB2cj0iU0giPlBJWEVMTUVEPC90YWcwMDA4MTAxMD4KICAgICAgICAgICAgPHRhZzAwMDgxMDkwIGxlbj0iMTIiIHRhZz0iMDAwODEwOTAiIHZyPSJMTyI+RGljb21DbGVhbmVyPC90YWcwMDA4MTA5MD4KICAgICAgICAgICAgPHRhZzAwMTgxMDIwIGxlbj0iMjgiIHRhZz0iMDAxODEwMjAiIHZyPSJMTyI+V2VkIEZlYiAxNyAxMjoyNzozMSBFU1QgMjAxMDwvdGFnMDAxODEwMjA+CiAgICAgICAgICAgIDx0YWcwMDE4QTAwMiBsZW49IjI0IiB0YWc9IjAwMThBMDAyIiB2cj0iRFQiPjIwMTAwMzAxMTA0MDEwLjU0MCswMTAwPC90YWcwMDE4QTAwMj4KICAgICAgICAgICAgPHRhZzAwMThBMDAzIGxlbj0iOCIgdGFnPSIwMDE4QTAwMyIgdnI9IlNUIj5DbGVhbmVkPC90YWcwMDE4QTAwMz4KICAgICAgICAgICAgPHRhZzAwNDBBMTcwIGxlbj0iLTEiIHRhZz0iMDA0MEExNzAiIHZyPSJTUSI+CiAgICAgICAgICAgICAgICA8aXRlbSBsZW49Ii0xIiBvZmY9Ijk4NCI+CiAgICAgICAgICAgICAgICAgICAgPHRhZzAwMDgwMTAwIGxlbj0iNiIgdGFnPSIwMDA4MDEwMCIgdnI9IlNIIj4xMDkxMDM8L3RhZzAwMDgwMTAwPgogICAgICAgICAgICAgICAgICAgIDx0YWcwMDA4MDEwMiBsZW49IjQiIHRhZz0iMDAwODAxMDIiIHZyPSJTSCI+RENNPC90YWcwMDA4MDEwMj4KICAgICAgICAgICAgICAgICAgICA8dGFnMDAwODAxMDQgbGVuPSIyMCIgdGFnPSIwMDA4MDEwNCIgdnI9IkxPIj5Nb2RpZnlpbmcgRXF1aXBtZW50PC90YWcwMDA4MDEwND4KICAgICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgPC90YWcwMDQwQTE3MD4KICAgICAgICA8L2l0ZW0+CiAgICA8L3RhZzAwMThBMDAxPgogICAgPHRhZzAwMjAwMDBEIGxlbj0iNjAiIHRhZz0iMDAyMDAwMEQiIHZyPSJVSSI+MS4zLjYuMS40LjEuNTk2Mi45OS4xLjQyMDg3NDAxOC4zODQ4MzIwNjkuMTI2NzQzNjI1OTEwNi44LjA8L3RhZzAwMjAwMDBEPgogICAgPHRhZzAwMjAwMDBFIGxlbj0iNjAiIHRhZz0iMDAyMDAwMEUiIHZyPSJVSSI+MS4zLjYuMS40LjEuNTk2Mi45OS4xLjQyMDg3NDAxOC4zODQ4MzIwNjkuMTI2NzQzNjI1OTEwNi45LjA8L3RhZzAwMjAwMDBFPgogICAgPHRhZzAwMjAwMDEwIGxlbj0iMCIgdGFnPSIwMDIwMDAxMCIgdnI9IlNIIi8+CiAgICA8dGFnMDAyMDAwMTEgbGVuPSIyIiB0YWc9IjAwMjAwMDExIiB2cj0iSVMiPjE8L3RhZzAwMjAwMDExPgogICAgPHRhZzAwMjAwMDEyIGxlbj0iMCIgdGFnPSIwMDIwMDAxMiIgdnI9IklTIi8+CiAgICA8dGFnMDAyMDAwMTMgbGVuPSIyIiB0YWc9IjAwMjAwMDEzIiB2cj0iSVMiPjE8L3RhZzAwMjAwMDEzPgogICAgPHRhZzAwMjAwMDIwIGxlbj0iMCIgdGFnPSIwMDIwMDAyMCIgdnI9IkNTIi8+CiAgICA8dGFnMDAyODAwMDIgbGVuPSIyIiB0YWc9IjAwMjgwMDAyIiB2cj0iVVMiPjE8L3RhZzAwMjgwMDAyPgogICAgPHRhZzAwMjgwMDA0IGxlbj0iMTIiIHRhZz0iMDAyODAwMDQiIHZyPSJDUyI+TU9OT0NIUk9NRTI8L3RhZzAwMjgwMDA0PgogICAgPHRhZzAwMjgwMDEwIGxlbj0iMiIgdGFnPSIwMDI4MDAxMCIgdnI9IlVTIj4yMDAwPC90YWcwMDI4MDAxMD4KICAgIDx0YWcwMDI4MDAxMSBsZW49IjIiIHRhZz0iMDAyODAwMTEiIHZyPSJVUyI+MjAwMDwvdGFnMDAyODAwMTE+CiAgICA8dGFnMDAyODAwMzAgbGVuPSIxNCIgdGFnPSIwMDI4MDAzMCIgdnI9IkRTIj4wLjIwMDBcMC4yMDAwPC90YWcwMDI4MDAzMD4KICAgIDx0YWcwMDI4MDEwMCBsZW49IjIiIHRhZz0iMDAyODAxMDAiIHZyPSJVUyI+MTY8L3RhZzAwMjgwMTAwPgogICAgPHRhZzAwMjgwMTAxIGxlbj0iMiIgdGFnPSIwMDI4MDEwMSIgdnI9IlVTIj4xMjwvdGFnMDAyODAxMDE+CiAgICA8dGFnMDAyODAxMDIgbGVuPSIyIiB0YWc9IjAwMjgwMTAyIiB2cj0iVVMiPjExPC90YWcwMDI4MDEwMj4KICAgIDx0YWcwMDI4MDEwMyBsZW49IjIiIHRhZz0iMDAyODAxMDMiIHZyPSJVUyI+MDwvdGFnMDAyODAxMDM+CiAgICA8dGFnMDAyODAyMDAgbGVuPSIyIiB0YWc9IjAwMjgwMjAwIiB2cj0iVVMiPjMyNzM2PC90YWcwMDI4MDIwMD4KICAgIDx0YWcwMDI4MTA1MCBsZW49IjQiIHRhZz0iMDAyODEwNTAiIHZyPSJEUyI+MjA0ODwvdGFnMDAyODEwNTA+CiAgICA8dGFnMDAyODEwNTEgbGVuPSI0IiB0YWc9IjAwMjgxMDUxIiB2cj0iRFMiPjQwOTU8L3RhZzAwMjgxMDUxPgo8L2RpY29tPgo=</inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>DICOM</inboundDataType>
      <outboundDataType>DICOM</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="4.0.0"/>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="4.0.0"/>
    </transformer>
    <filter version="4.0.0">
      <elements/>
    </filter>
    <transportName>DICOM Listener</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="4.0.0">
      <metaDataId>1</metaDataId>
      <name>Destinazione 1</name>
      <properties class="com.mirth.connect.connectors.dimse.DICOMDispatcherProperties" version="4.0.0">
        <pluginProperties/>
        <destinationConnectorProperties version="4.0.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <host>127.0.0.1</host>
        <port>11112</port>
        <applicationEntity>ACROUT</applicationEntity>
        <localHost></localHost>
        <localPort></localPort>
        <localApplicationEntity></localApplicationEntity>
        <template>${DICOMMESSAGE}</template>
        <acceptTo>5</acceptTo>
        <async>0</async>
        <bufSize>1</bufSize>
        <connectTo>0</connectTo>
        <priority>high</priority>
        <passcode></passcode>
        <pdv1>false</pdv1>
        <rcvpdulen>16</rcvpdulen>
        <reaper>10</reaper>
        <releaseTo>5</releaseTo>
        <rspTo>60</rspTo>
        <shutdownDelay>1000</shutdownDelay>
        <sndpdulen>16</sndpdulen>
        <soCloseDelay>50</soCloseDelay>
        <sorcvbuf>0</sorcvbuf>
        <sosndbuf>0</sosndbuf>
        <stgcmt>false</stgcmt>
        <tcpDelay>true</tcpDelay>
        <ts1>false</ts1>
        <uidnegrsp>false</uidnegrsp>
        <username></username>
        <keyPW></keyPW>
        <keyStore></keyStore>
        <keyStorePW></keyStorePW>
        <noClientAuth>true</noClientAuth>
        <nossl2>true</nossl2>
        <tls>notls</tls>
        <trustStore></trustStore>
        <trustStorePW></trustStorePW>
      </properties>
      <transformer version="4.0.0">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.0.0">
            <name>InserisciUno</name>
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <script></script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjxkaWNvbT4KICAgIDx0YWcwMDAyMDAwMCBsZW49IjQiIHRhZz0iMDAwMjAwMDAiIHZyPSJVTCI+MjE0PC90YWcwMDAyMDAwMD4KICAgIDx0YWcwMDAyMDAwMSBsZW49IjIiIHRhZz0iMDAwMjAwMDEiIHZyPSJPQiI+MDBcMDE8L3RhZzAwMDIwMDAxPgogICAgPHRhZzAwMDIwMDAyIGxlbj0iMjYiIHRhZz0iMDAwMjAwMDIiIHZyPSJVSSI+MS4yLjg0MC4xMDAwOC41LjEuNC4xLjEuMTwvdGFnMDAwMjAwMDI+CiAgICA8dGFnMDAwMjAwMDMgbGVuPSI2MCIgdGFnPSIwMDAyMDAwMyIgdnI9IlVJIj4xLjMuNi4xLjQuMS41OTYyLjk5LjEuNDIwODc0MDE4LjM4NDgzMjA2OS4xMjY3NDM2MjU5MTA2LjcuMDwvdGFnMDAwMjAwMDM+CiAgICA8dGFnMDAwMjAwMTAgbGVuPSIyMCIgdGFnPSIwMDAyMDAxMCIgdnI9IlVJIj4xLjIuODQwLjEwMDA4LjEuMi4xPC90YWcwMDAyMDAxMD4KICAgIDx0YWcwMDAyMDAxMiBsZW49IjIyIiB0YWc9IjAwMDIwMDEyIiB2cj0iVUkiPjEuMy42LjEuNC4xLjU5NjIuOTkuMjwvdGFnMDAwMjAwMTI+CiAgICA8dGFnMDAwMjAwMTMgbGVuPSIxNiIgdGFnPSIwMDAyMDAxMyIgdnI9IlNIIj5QSVhFTE1FREpBVkEwMDE8L3RhZzAwMDIwMDEzPgogICAgPHRhZzAwMDIwMDE2IGxlbj0iOCIgdGFnPSIwMDAyMDAxNiIgdnI9IkFFIj5QSVhFTE1FRDwvdGFnMDAwMjAwMTY+CiAgICA8dGFnMDAwODAwMTAgbGVuPSIxMiIgdGFnPSIwMDA4MDAxMCIgdnI9IkNTIj5BQ1ItTkVNQSAyLjA8L3RhZzAwMDgwMDEwPgogICAgPHRhZzAwMDgwMDE2IGxlbj0iMjYiIHRhZz0iMDAwODAwMTYiIHZyPSJVSSI+MS4yLjg0MC4xMDAwOC41LjEuNC4xLjEuMTwvdGFnMDAwODAwMTY+CiAgICA8dGFnMDAwODAwMTggbGVuPSI2MCIgdGFnPSIwMDA4MDAxOCIgdnI9IlVJIj4xLjMuNi4xLjQuMS41OTYyLjk5LjEuNDIwODc0MDE4LjM4NDgzMjA2OS4xMjY3NDM2MjU5MTA2LjcuMDwvdGFnMDAwODAwMTg+CiAgICA8dGFnMDAwODAwMjAgbGVuPSI4IiB0YWc9IjAwMDgwMDIwIiB2cj0iREEiPjIwMTAwMjE5PC90YWcwMDA4MDAyMD4KICAgIDx0YWcwMDA4MDAyMSBsZW49IjAiIHRhZz0iMDAwODAwMjEiIHZyPSJEQSIvPgogICAgPHRhZzAwMDgwMDIzIGxlbj0iOCIgdGFnPSIwMDA4MDAyMyIgdnI9IkRBIj4yMDEwMDIxOTwvdGFnMDAwODAwMjM+CiAgICA8dGFnMDAwODAwMzAgbGVuPSIxMiIgdGFnPSIwMDA4MDAzMCIgdnI9IlRNIj4xMDQ2NTguMDAwMDwvdGFnMDAwODAwMzA+CiAgICA8dGFnMDAwODAwMzMgbGVuPSIxMiIgdGFnPSIwMDA4MDAzMyIgdnI9IlRNIj4xMDQ2MTUuMDAwMDwvdGFnMDAwODAwMzM+CiAgICA8dGFnMDAwODAwNDAgbGVuPSIyIiB0YWc9IjAwMDgwMDQwIiB2cj0iVVMiPjA8L3RhZzAwMDgwMDQwPgogICAgPHRhZzAwMDgwMDUwIGxlbj0iMCIgdGFnPSIwMDA4MDA1MCIgdnI9IlNIIi8+CiAgICA8dGFnMDAwODAwNjAgbGVuPSIyIiB0YWc9IjAwMDgwMDYwIiB2cj0iQ1MiPkRSPC90YWcwMDA4MDA2MD4KICAgIDx0YWcwMDA4MDA3MCBsZW49IjgiIHRhZz0iMDAwODAwNzAiIHZyPSJMTyI+SU1JWCBBRFI8L3RhZzAwMDgwMDcwPgogICAgPHRhZzAwMDgwMDkwIGxlbj0iMCIgdGFnPSIwMDA4MDA5MCIgdnI9IlBOIi8+CiAgICA8dGFnMDAwODEwOTAgbGVuPSIwIiB0YWc9IjAwMDgxMDkwIiB2cj0iTE8iLz4KICAgIDx0YWcwMDEwMDAxMCBsZW49IjEwIiB0YWc9IjAwMTAwMDEwIiB2cj0iUE4iPk5BTUVeTk9ORTwvdGFnMDAxMDAwMTA+CiAgICA8dGFnMDAxMDAwMjAgbGVuPSI0IiB0YWc9IjAwMTAwMDIwIiB2cj0iTE8iPk5PSUQ8L3RhZzAwMTAwMDIwPgogICAgPHRhZzAwMTAwMDMwIGxlbj0iMCIgdGFnPSIwMDEwMDAzMCIgdnI9IkRBIi8+CiAgICA8dGFnMDAxMDAwNDAgbGVuPSIwIiB0YWc9IjAwMTAwMDQwIiB2cj0iQ1MiLz4KICAgIDx0YWcwMDEyMDA2MiBsZW49IjQiIHRhZz0iMDAxMjAwNjIiIHZyPSJDUyI+WUVTPC90YWcwMDEyMDA2Mj4KICAgIDx0YWcwMDEyMDA2MyBsZW49IjkyIiB0YWc9IjAwMTIwMDYzIiB2cj0iTE8iPkRlaWRlbnRpZmllZFxEZXNjcmlwdG9ycyByZW1vdmVkIGV4Y2VwdCBzZXJpZXNcUGF0aWVudCBDaGFyYWN0ZXJpc3RpY3MgcmVtb3ZlZFxVSURzIHJlbWFwcGVkPC90YWcwMDEyMDA2Mz4KICAgIDx0YWcwMDE4MTAyMCBsZW49IjE0IiB0YWc9IjAwMTgxMDIwIiB2cj0iTE8iPjA4LjA0LjA5XDIuMDFDPC90YWcwMDE4MTAyMD4KICAgIDx0YWcwMDE4MTE1RSBsZW49IjAiIHRhZz0iMDAxODExNUUiIHZyPSJEUyIvPgogICAgPHRhZzAwMTg2MDAwIGxlbj0iMCIgdGFnPSIwMDE4NjAwMCIgdnI9IkRTIi8+CiAgICA8dGFnMDAxOEEwMDEgbGVuPSItMSIgdGFnPSIwMDE4QTAwMSIgdnI9IlNRIj4KICAgICAgICA8aXRlbSBsZW49Ii0xIiBvZmY9IjgyOCI+CiAgICAgICAgICAgIDx0YWcwMDA4MDA3MCBsZW49IjgiIHRhZz0iMDAwODAwNzAiIHZyPSJMTyI+UGl4ZWxNZWQ8L3RhZzAwMDgwMDcwPgogICAgICAgICAgICA8dGFnMDAwODEwMTAgbGVuPSI4IiB0YWc9IjAwMDgxMDEwIiB2cj0iU0giPlBJWEVMTUVEPC90YWcwMDA4MTAxMD4KICAgICAgICAgICAgPHRhZzAwMDgxMDkwIGxlbj0iMTIiIHRhZz0iMDAwODEwOTAiIHZyPSJMTyI+RGljb21DbGVhbmVyPC90YWcwMDA4MTA5MD4KICAgICAgICAgICAgPHRhZzAwMTgxMDIwIGxlbj0iMjgiIHRhZz0iMDAxODEwMjAiIHZyPSJMTyI+V2VkIEZlYiAxNyAxMjoyNzozMSBFU1QgMjAxMDwvdGFnMDAxODEwMjA+CiAgICAgICAgICAgIDx0YWcwMDE4QTAwMiBsZW49IjI0IiB0YWc9IjAwMThBMDAyIiB2cj0iRFQiPjIwMTAwMzAxMTA0MDEwLjU0MCswMTAwPC90YWcwMDE4QTAwMj4KICAgICAgICAgICAgPHRhZzAwMThBMDAzIGxlbj0iOCIgdGFnPSIwMDE4QTAwMyIgdnI9IlNUIj5DbGVhbmVkPC90YWcwMDE4QTAwMz4KICAgICAgICAgICAgPHRhZzAwNDBBMTcwIGxlbj0iLTEiIHRhZz0iMDA0MEExNzAiIHZyPSJTUSI+CiAgICAgICAgICAgICAgICA8aXRlbSBsZW49Ii0xIiBvZmY9Ijk4NCI+CiAgICAgICAgICAgICAgICAgICAgPHRhZzAwMDgwMTAwIGxlbj0iNiIgdGFnPSIwMDA4MDEwMCIgdnI9IlNIIj4xMDkxMDM8L3RhZzAwMDgwMTAwPgogICAgICAgICAgICAgICAgICAgIDx0YWcwMDA4MDEwMiBsZW49IjQiIHRhZz0iMDAwODAxMDIiIHZyPSJTSCI+RENNPC90YWcwMDA4MDEwMj4KICAgICAgICAgICAgICAgICAgICA8dGFnMDAwODAxMDQgbGVuPSIyMCIgdGFnPSIwMDA4MDEwNCIgdnI9IkxPIj5Nb2RpZnlpbmcgRXF1aXBtZW50PC90YWcwMDA4MDEwND4KICAgICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgPC90YWcwMDQwQTE3MD4KICAgICAgICA8L2l0ZW0+CiAgICA8L3RhZzAwMThBMDAxPgogICAgPHRhZzAwMjAwMDBEIGxlbj0iNjAiIHRhZz0iMDAyMDAwMEQiIHZyPSJVSSI+MS4zLjYuMS40LjEuNTk2Mi45OS4xLjQyMDg3NDAxOC4zODQ4MzIwNjkuMTI2NzQzNjI1OTEwNi44LjA8L3RhZzAwMjAwMDBEPgogICAgPHRhZzAwMjAwMDBFIGxlbj0iNjAiIHRhZz0iMDAyMDAwMEUiIHZyPSJVSSI+MS4zLjYuMS40LjEuNTk2Mi45OS4xLjQyMDg3NDAxOC4zODQ4MzIwNjkuMTI2NzQzNjI1OTEwNi45LjA8L3RhZzAwMjAwMDBFPgogICAgPHRhZzAwMjAwMDEwIGxlbj0iMCIgdGFnPSIwMDIwMDAxMCIgdnI9IlNIIi8+CiAgICA8dGFnMDAyMDAwMTEgbGVuPSIyIiB0YWc9IjAwMjAwMDExIiB2cj0iSVMiPjE8L3RhZzAwMjAwMDExPgogICAgPHRhZzAwMjAwMDEyIGxlbj0iMCIgdGFnPSIwMDIwMDAxMiIgdnI9IklTIi8+CiAgICA8dGFnMDAyMDAwMTMgbGVuPSIyIiB0YWc9IjAwMjAwMDEzIiB2cj0iSVMiPjE8L3RhZzAwMjAwMDEzPgogICAgPHRhZzAwMjAwMDIwIGxlbj0iMCIgdGFnPSIwMDIwMDAyMCIgdnI9IkNTIi8+CiAgICA8dGFnMDAyODAwMDIgbGVuPSIyIiB0YWc9IjAwMjgwMDAyIiB2cj0iVVMiPjE8L3RhZzAwMjgwMDAyPgogICAgPHRhZzAwMjgwMDA0IGxlbj0iMTIiIHRhZz0iMDAyODAwMDQiIHZyPSJDUyI+TU9OT0NIUk9NRTI8L3RhZzAwMjgwMDA0PgogICAgPHRhZzAwMjgwMDEwIGxlbj0iMiIgdGFnPSIwMDI4MDAxMCIgdnI9IlVTIj4yMDAwPC90YWcwMDI4MDAxMD4KICAgIDx0YWcwMDI4MDAxMSBsZW49IjIiIHRhZz0iMDAyODAwMTEiIHZyPSJVUyI+MjAwMDwvdGFnMDAyODAwMTE+CiAgICA8dGFnMDAyODAwMzAgbGVuPSIxNCIgdGFnPSIwMDI4MDAzMCIgdnI9IkRTIj4wLjIwMDBcMC4yMDAwPC90YWcwMDI4MDAzMD4KICAgIDx0YWcwMDI4MDEwMCBsZW49IjIiIHRhZz0iMDAyODAxMDAiIHZyPSJVUyI+MTY8L3RhZzAwMjgwMTAwPgogICAgPHRhZzAwMjgwMTAxIGxlbj0iMiIgdGFnPSIwMDI4MDEwMSIgdnI9IlVTIj4xMjwvdGFnMDAyODAxMDE+CiAgICA8dGFnMDAyODAxMDIgbGVuPSIyIiB0YWc9IjAwMjgwMTAyIiB2cj0iVVMiPjExPC90YWcwMDI4MDEwMj4KICAgIDx0YWcwMDI4MDEwMyBsZW49IjIiIHRhZz0iMDAyODAxMDMiIHZyPSJVUyI+MDwvdGFnMDAyODAxMDM+CiAgICA8dGFnMDAyODAyMDAgbGVuPSIyIiB0YWc9IjAwMjgwMjAwIiB2cj0iVVMiPjMyNzM2PC90YWcwMDI4MDIwMD4KICAgIDx0YWcwMDI4MTA1MCBsZW49IjQiIHRhZz0iMDAyODEwNTAiIHZyPSJEUyI+MjA0ODwvdGFnMDAyODEwNTA+CiAgICA8dGFnMDAyODEwNTEgbGVuPSI0IiB0YWc9IjAwMjgxMDUxIiB2cj0iRFMiPjQwOTU8L3RhZzAwMjgxMDUxPgo8L2RpY29tPgo=</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>DICOM</inboundDataType>
        <outboundDataType>DICOM</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="4.0.0"/>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="4.0.0"/>
      </transformer>
      <responseTransformer version="4.0.0">
        <elements/>
        <inboundDataType>DICOM</inboundDataType>
        <outboundDataType>DICOM</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="4.0.0"/>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.dicom.DICOMDataTypeProperties" version="4.0.0"/>
      </responseTransformer>
      <filter version="4.0.0">
        <elements/>
      </filter>
      <transportName>DICOM Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
return;</postprocessingScript>
  <deployScript>// This script executes once when the mule engine is started
// You only have access to the globalMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the mule engine is stopped
// You only have access to the globalMap here to persist data
return;</undeployScript>
  <properties version="4.0.0">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="4.0.0">
      <className>com.mirth.connect.server.attachments.dicom.DICOMAttachmentHandlerProvider</className>
      <type>DICOM</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>false</enabled>
      <lastModified>
        <time>1692314885598</time>
        <timezone>America/Chicago</timezone>
      </lastModified>
      <pruningSettings>
        <pruneMetaDataDays>10</pruneMetaDataDays>
        <archiveEnabled>true</archiveEnabled>
        <pruneErroredMessages>false</pruneErroredMessages>
      </pruningSettings>
    </metadata>
    <codeTemplateLibraries>
      <codeTemplateLibrary version="4.0.0">
        <id>10e63131-3e24-4419-a268-ed823aba5790</id>
        <name>Molecular Designs Code Templates</name>
        <revision>39</revision>
        <lastModified>
          <time>1695240089339</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description>This library contains code templates created by Datica Mirth OCI channels and Molecular Designs</description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
          <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
          <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
          <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
          <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
          <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
          <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
          <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
          <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
          <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
          <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
          <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
          <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
          <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
          <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
          <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
          <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
          <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
          <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
          <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
          <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
          <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
          <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
          <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
          <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
          <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
          <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
          <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
          <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
          <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
          <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
          <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
          <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
          <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
          <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
          <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
          <string>72383579-097e-4205-b030-ce272c90b835</string>
          <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
          <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
          <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
          <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
          <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
          <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
          <string>3792b059-e098-436c-81fe-23502ef5042b</string>
          <string>a757905f-315a-43be-a624-38780a3d7574</string>
          <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
          <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
          <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
          <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
          <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
          <string>38e80069-5a80-4483-9a22-02c928973719</string>
          <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
          <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
          <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
          <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
          <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
          <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
          <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
          <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
          <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
          <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
          <string>c65024ed-4660-4423-9636-cb6309cae138</string>
          <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
          <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
          <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
          <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
          <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
          <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
          <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
          <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
          <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
          <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
          <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
          <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
          <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
          <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
          <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
          <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
          <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
          <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
          <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
          <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
          <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
          <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
          <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="4.0.0">
            <id>b1789859-2c5e-4720-a617-17bb12289034</id>
            <name> Perform sFTP Put Action (ip, port, user, pass, filename, msg)</name>
            <revision>1</revision>
            <lastModified>
              <time>1687559459553</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Desc: Perform sFTP Put Javascript to connect over SFTP and Put a file on the remote disk
	Name:  Perform sFTP Put Action (ip, port, user, pass, filename, msg)
	@param {String} ip - provide the IP address
		  {String} port - provide the port number
		  {String} user - provide the username
		  {String} pass - provide the password
		  {String} filename - provide the filename
		  {String} msg - XML presentation of the message to be sent as a file
	@return {String} return response (Success or Failure)
*/
function sftpPut(ip, port, user, pass, filename, msg){
	importPackage(com.jcraft.jsch);
	importPackage(java.io);
	importPackage(java.lang);
	importPackage(java.nio.charset);
	
	function toByteArray(str){
		var bytes = [];
		for (var i = 0; i &lt; str.length; ++i) {
    		bytes.push(str.charCodeAt(i));
		}
		return bytes;
	}
	
	// testing vars
	var debug= 0;
	
	//create object.
	var jsch = new JSch();
	jsch.setConfig(&apos;StrictHostKeyChecking&apos;,&apos;no&apos;);
	var session = jsch.getSession(user,ip,port);
	session.setPassword(pass);
	session.setTimeout(10000);
	session.connect();
	var channel = session.openChannel(&apos;sftp&apos;);
	var ioexception = new Packages.java.io.IOException;
	channel.connect();
	if(debug&gt;0) {logger.info(&apos;Connected to SFTP: &apos;);}
	if(debug&gt;0) {logger.info(&apos;Home Directory: &apos; + channel.getHome());}
	channel.cd(&apos;/&apos;); //Folder on the SFTP server where file will be found

	var filename = filename;
	var filebody = msg;
	channel.put(filebody);

	channel.disconnect();
	session.disconnect();	
	return;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>f435d6e5-73bb-4515-8a35-5c6409576e03</id>
            <name>contains_number</name>
            <revision>16</revision>
            <lastModified>
              <time>1670430449839</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Desc: This script is used to evaluate a string if contains a number

	scriptName: contains_number
	@param {String} arg1 - arg1 description
	@return {boolean} return true or false depending if isNaN() - if isNan() -&gt; return true otherwise -&gt; return false
	e.g., write_msg_to_disk($(&apos;rawhl7&apos;),api_error_directory,$(&apos;ark_uuid&apos;));
	History:
*/
function contains_number(text) {

	var scriptName= &apos;contains_number&apos;;
	var debug= 0;

	if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; verify text: &apos;+text); }

	if((typeof(text) !== &apos;undefined&apos;) &amp;&amp; (text.toString().length&gt;0))  {

		if((text.toString()== &apos;DETECTED&apos;)||(text.toString()== &apos;TRUE&apos;)) {
			return false;
		} else if(text.toString()== &apos;NOT DETECTED&apos;) {
			return false;
		} else if(text.toString()== &apos;INVALID&apos;) {
			return false;
		} else {
			var arrText= text.toString().split(&apos;&apos;);
			if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; arrText: &apos;+JSON.stringify(arrText)); }
			// curObservationValue.toString() !== &apos;NaN&apos;)
			for each(strElement in arrText) {
				// if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; element: &apos;+element+&apos; isNaN(): &apos;+element.toString().isNaN()); }
				if(debug&gt;0) { 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof element: &apos;+typeof(strElement));
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; toString: &apos;+strElement.toString());
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; element toString() !== isNaN(): &apos;+(strElement.toString()!== &apos;NaN&apos;)); 
				}
				if(strElement.toString() !== &apos;NaN&apos;) {
					return true;
				} // end if
			} // end for
		} // end if 
		return false;
	} // end if
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>96be75c3-dddb-4d84-83e1-7484a54f6d7f</id>
            <name>Convert HL7 Date Format to ISO</name>
            <revision>1</revision>
            <lastModified>
              <time>1665512795175</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Converts standard HL7 v2.x date format to human-readable ISO date format
*/

/*
	Author: Datica Inc.
	toISODate: Returns an ISO-formatted date string with specified timezone offset

	Arguments
	---------
		Required
		--------
			hl7DateString:		An HL7-formatted date string (ex: &quot;yyyyMMddHHmmss&quot;

		Optional
		--------
			timezome:			A timezone identifier string corresponding to one of the java.util.TimeZone values (ex: &quot;US/Central&quot;)
*/

function toISODate( hl7DateString, timezone ) {
	var isoDate;
	var dateString;
	var hl7Formatter;
	var isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);

	if (timezone) {
		isoFormatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timezone));
	}
	
	if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString.substring(0,13)) &amp;&amp; hl7DateString.length &gt; 14 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmssZ&quot;);
	}
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 14 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
	} 
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 12 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);
	} 
	else if ( hl7DateString != null &amp;&amp; !isNaN(hl7DateString) &amp;&amp; hl7DateString &gt; 0 &amp;&amp; hl7DateString.length == 8 ) {
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMdd&quot;);
	} 
	else dateString = hl7DateString;
	
	try {
		if (hl7Formatter) {
			isoDate = hl7Formatter.parse(hl7DateString);
			isoDate = isoFormatter.format(isoDate);
			dateString = new String(isoDate);
		}
	} catch (err) {
		dateString = hl7DateString;
	} finally {
		return dateString;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>f4574fa7-05b8-420b-b6a2-a1cb6e3fe1f5</id>
            <name>Convert HL7 Ethnic Code to Ethnicity Coded Element (CWS) data type</name>
            <revision>1</revision>
            <lastModified>
              <time>1684362812785</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Convert HL7 Ethnic Code to Ethnicity Coded ELement (CWS) data type

	@scriptName: hl7_modify_ethnic_code_pid22_to_ethnic_coded_element
	@descName:   Convert HL7 Ethnic Code to Ethnicity Coded ELement Data Type
	@authorName: Jeffrey Ritz
	Parameters:
	@param {XML} pid22 - contains the XML HL7 representation of the PID-22 element
	@return {XML} newEthnicity - returns the modified XML HL7 representation of the PID-22 element
*/
function hl7_modify_ethnic_code_pid22_to_ethnic_coded_element(pid22) {

	var scriptName= &apos;hl7_modify_ethnic_code_pid22_to_ethnic_coded_element&apos;
	var debug= 0;

	// 2023-03-07 JER - Added code per Streamline Issues List - 20220306 item# 3
	// https://phinvads.cdc.gov/vads/ViewValueSet.action?id=2088950C-6EF8-E111-B875-001A4BE7FA90
	var newEthnicity= new XML(&apos;&lt;PID.22&gt;&lt;/PID.22&gt;&apos;);

	if(typeof(pid22)!== &apos;undefined&apos;) {
	
		for each(element in pid22) {

			if(element[&apos;PID.22.1&apos;].toString().length&gt;0) {
				var pid221= element[&apos;PID.22.1&apos;].toString();
				switch (pid221) {
					case &apos;H&apos;: 
						var strPid22= pid221+&apos;^Hispanic or Latino^HL70189&apos;;
						break;
					case &apos;N&apos;: 
						var strPid22= pid221+&apos;^Not Hispanic or Latino^HL70189&apos;;
						break;
					case &apos;U&apos;:
						var strPid22= pid221+&apos;^Unknown^HL70189&apos;;
						break;
					default: 
						var strPid22= &apos;U^Unknown^HL70189&apos;;
				} // end switch
			} else {
				var strPid22= &apos;&apos;;
			} // end if 
			newEthnicity.appendChild(strPid22);
		} // end for each
		
	} // end if 

	return newEthnicity;

} // end function</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>f3cf4590-3887-434e-bd9f-e94556abaaee</id>
            <name>Convert HL7 Ethnic Code to Ethnicity Coded Element Data Type</name>
            <revision>2</revision>
            <lastModified>
              <time>1682526446368</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Convert HL7 Ethnic Code to Ethnicity Coded Element (CWS) data type

	@scriptName: hl7_modify_ethnic_code_pid22_to_ethnic_coded_element
	@descName:   Convert HL7 Ethnic Code to Ethnicity Coded Element Data Type
	@authorName: Jeffrey Ritz
	Parameters:
	@param {XML} pid22 - contains the XML HL7 representation of the PID-22 element
	@return {XML} newEthnicity - returns the modified XML HL7 representation of the PID-22 element
*/
function hl7_modify_ethnic_code_pid22_to_ethnic_coded_element(pid22) {

	var scriptName= &apos;hl7_modify_ethnic_code_pid22_to_ethnic_coded_element&apos;
	var debug= 0;

	// 2023-03-07 JER - Added code per Streamline Issues List - 20220306 item# 3
	// https://phinvads.cdc.gov/vads/ViewValueSet.action?id=2088950C-6EF8-E111-B875-001A4BE7FA90
	var newEthnicity= new XML(&apos;&lt;PID.22&gt;&lt;/PID.22&gt;&apos;);

	if(typeof(pid22)!== &apos;undefined&apos;) {
	
		for each(element in pid22) {

			if(element[&apos;PID.22.1&apos;].toString().length&gt;0) {
				var pid221= element[&apos;PID.22.1&apos;].toString();
				switch (pid221) {
					case &apos;H&apos;: 
						var strPid22= pid221+&apos;^Hispanic or Latino^HL70189&apos;;
						break;
					case &apos;N&apos;: 
						var strPid22= pid221+&apos;^Not Hispanic or Latino^HL70189&apos;;
						break;
					case &apos;U&apos;:
						var strPid22= pid221+&apos;^Unknown^HL70189&apos;;
						break;
					default: 
						var strPid22= &apos;U^Unknown^HL70189&apos;;
				} // end switch
			} else {
				var strPid22= &apos;&apos;;
			} // end if 
			newEthnicity.appendChild(strPid22);
		} // end for each
		
	} // end if 

	return newEthnicity;

} // end function</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>d7a12547-25f0-4062-b86f-5fdf6eaa4dd1</id>
            <name>Convert ISO Date Format to HL7</name>
            <revision>1</revision>
            <lastModified>
              <time>1665512795228</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Converts ISO date format to HL7 v2 format
*/

/*
	Author: Datica Inc.
	toHL7Date: Returns an HL7-formatted date string with specified timezone offset

	Arguments
	---------
		Required
		--------
			isoDateString:		An ISO-formatted date string (ex: &quot;yyyy-MM-ddTHH:mm:ssZ&quot;

		Optional
		--------
			timezome:			A timezone identifier string corresponding to one of the java.util.TimeZone values (ex: &quot;US/Central&quot;)
*/

function toHL7Date( isoDateString, timezone ) 
{
	var hl7Date;
	var dateString;
	var isoFormatter;
	var hl7Formatter;

	// ISO Date Format: yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;
	if ( isoDateString != null &amp;&amp; isoDateString.length &lt;= 25 &amp;&amp; isoDateString.length &gt;= 22) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmssZ&quot;);
		if (timezone) {
			hl7Formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timezone));
		}
	}
	// ISO Date Format: yyyy-MM-dd HH:mm:ss
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 19 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);
	}
	// ISO Date Format: yyyy-MM-dd HH:mm
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 16 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);	
	} 
	// ISO Date Format: yyyy-MM-dd
	else if ( isoDateString != null &amp;&amp; isoDateString.length == 10 ) {
		isoFormatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
		hl7Formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMdd&quot;);	
	}
	// None of the above, return original date string.
	else dateString = isoDateString;

	try {
		if (isoFormatter) {
			hl7Date = isoFormatter.parse(isoDateString);
			hl7Date = hl7Formatter.format(hl7Date);
			dateString = new String(hl7Date);
		}
	} catch (err) {
		dateString = isoDateString;
	} finally {
		return dateString;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>060b8f26-61b5-4185-bc65-cff05085bfe2</id>
            <name>Filter Non Detected Observation Results</name>
            <revision>3</revision>
            <lastModified>
              <time>1678138972714</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Evaluate the OBX-5.1 values for Detected vs Non-Detected result values to determine if needed to filter the observation results
		
	fileName:		filter_non_detected_observations_results.js
	name:		Filter Non Detected Observation Results
	authored:		Jeffrey Ritz
	created:		2023-02-22
	desc:		Evaluate the OBX-5.1 values for Detected vs Non-Detected result values
	specimenDetected= true  -&gt; desired specimens detected used to permit the entire message to be sent
	specimenDetected= false -&gt; desired specimens detected used to filter the entire message
	history:
	2024-02-24 JER - Clone of the remove_observations_from_observation_result_codes.js function
*/
function filter_non_detected_observations_results(msg) {
	
	var scriptName= &apos;filter_non_detected_observations_results&apos;;
	var debug= 1;
	var detected= false;
	var i= 1;	// used for the OBX children objects
	var j= 1;	// used for all msg children objects
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);
	
	// for each segment - child per msg.children()
	for each(child in msg.children()) {
	
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof: &apos;+typeof(child)+&apos; localName: &apos;+child.localName()+&apos; child: &apos;+child);
	
		if(child.localName()== &apos;OBX&apos;) {
		
			// process each OBX
			var curObservationValue=child[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString().toUpperCase();
				
			// evaluate if element value is numerical exponential
			if(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1) {
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; determined value contains an exponential 1.00E value: &apos;+(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1)); }
			}
				
			// evaluate if element value is number 
			if(parseInt(curObservationValue.toString() !== &apos;NaN&apos;)) {
				if(debug&gt;0) { logger.error(&apos;DEBUG::&apos;+scriptName+&apos; determined value contains IS a number: &apos;+parseInt(curObservationValue.toString()!== &apos;NaN&apos;)); }
			}
	
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] curObservationValue: &apos;+curObservationValue);
			
			// 2022-10-17 JER - Added evaluate if NaN - only 
			if((curObservationValue== &apos;DETECTED&apos;)||(curObservationValue== &apos;TRUE&apos;)||(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1)||parseInt(curObservationValue.toString()!== &apos;NaN&apos;)) {
				detected= true;
			} // end if 
				
			i++;
		}  // end if 
		j++;
	} // end for
	
	channelMap.put(&apos;specimenDetected&apos;,detected); // true, false, invalid
	
	if(detected== true) {
		return true;
	} else {
		return false;
	}
} 
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>4cb42e06-7c9a-4fd2-bcb5-b9f4053a9c19</id>
            <name>Get Segments After a Particular Segment</name>
            <revision>3</revision>
            <lastModified>
              <time>1684206232165</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Returns an array of segments with the specified name that come after a given segment in the message.
*/
/*
	Author: Nick Rupley
	Date Modified: 2/13/2013
	getSegmentsAfter: Returns an array of segments with the specified name that come after a given segment in the message.

	Arguments
	---------
		Required
		--------
			root:			The root HL7Message node of the message, or the parent of the segment node.
			startSeg:		The segment AFTER which to start collecting segments.
			segName:		The name (String or RegExp) of the segments you want to collect.

		Optional
		--------
			consecutiveInd:	If true, indicates that the segments are expected to come directly after startSeg. 
							If false, segments are collected until another segment with the same name as startSeg is encountered.
							Defaults to false.
			stopSegNames:	An array of segment names that, when encountered, stop the collection of segments.
*/

function getSegmentsAfter(root, startSeg, segName, consecutiveInd, stopSegNames) {
	function test(str) {
		return segName instanceof RegExp ? segName.test(str) : segName === str;
	}

	// The index to start collection is the next one up from the starting segment
	var index = startSeg.childIndex()+1;
	// The return array
	var out = [];
	// Boolean placeholder to stop iteration
	var done = false;
	// Object that will contain all of the stopSegNames strings, bound to a truthy value (1)
	var stopNames = {};
	// Indicates whether we have any stop segments
	var stopNamesInd = false;
	// If stopSegNames is defined
	if (stopSegNames !== undefined &amp;&amp; stopSegNames !== null) {
		// Set our indicator to true
		stopNamesInd = true;
		// Add each string in the array to our object
		for each (name in stopSegNames)
			stopNames[name] = 1;
	}

	// Iterate through each child in the root, starting at the segment after startSeg, and
	// ending at the final segment, or when the done flag is set to true.
	while (index &lt; root.children().length() &amp;&amp; !done) {
		// If a stop segment is encountered, stop iteration
		if (stopNamesInd &amp;&amp; root.children()[index].name().toString() in stopNames)
			done = true;
		// If a segment with the same name as startSeg is encountered, stop iteration
		else if (root.children()[index].name().toString() == startSeg.name().toString() &amp;&amp; !consecutiveInd)
			done = true;
		// If we&apos;re only collecting consecutive segments and we encounter a segment with a name other than segName, stop iteration
		else if (!test(root.children()[index].name().toString()) &amp;&amp; consecutiveInd)
			done = true;
		// If all previous tests passed, and the current segment has a name of segName, then add it to our array
		else if (test(root.children()[index].name().toString()))
			out.push(root.children()[index]);
		// Increment our index counter
		index++;
	}

	// Return the output array
	return out;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>45a0316e-0d5a-42b6-b7cc-d786a97cceba</id>
            <name>Is Message Observation Value Detected</name>
            <revision>9</revision>
            <lastModified>
              <time>1695836657922</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Desc: This script is used to evaluate the provided messageObservation Value (OBX-5) to determine if the value should 
	be designated as DETECTED or NON-DETECTED

	@param {String} messageObservationValue - this only argument is the OBX-5 value provided to be evaluated by this script
	@return {String} return - to return the detected boolean value of detected= true or non-detected= false (true|false) 
	history
	2023-09-27 JER - Modified to include Conversion from Exponential value (1.00E10 or 9.44E1) to Number with Precision
*/
function isMessageObservationValueDetected(messageObservationValue) {

	var scriptName= &apos;isMessageObservationValueDetected&apos;;
	var debug= 0;
	var blnDetected= false;
	
	if(debug&gt;0) logger.debug(&apos;DEBUG::&apos;+scriptName+&apos; evaluate messageObservationValue: &apos;+messageObservationValue);

	if((messageObservationValue.indexOf(&apos;.&apos;)&gt;-1) &amp;&amp; (messageObservationValue.indexOf(&apos;E&apos;)&gt;-1)) {
		messageObservationValue= Number(messageObservationValue).toPrecision();
		if(debug&gt;0) logger.debug(&apos;DEBUG::&apos;+scriptName+&apos; messageObservationValue CONTAINS an exponential value add precision: &apos;+messageObservationValue.toString()+&apos; type: &apos;+typeof(messageObservationValue));
	} // end if 

	// 2023-09-27 JER - Conversion from Exponential value (1.00E10 or 9.44E1) to Number with Precision 
	if(isNaN(messageObservationValue) == false) {
		blnDetected= true;
		if(debug&gt;0) logger.debug(&apos;DEBUG::&apos;+scriptName+&apos; messageObservationValue isNAN: &apos;+isNaN(messageObservationValue)+&apos; value: &apos;+messageObservationValue.toString().toUpperCase()+&apos; blnDetected: &apos;+blnDetected);
	// evaluate if element value is numerical exponential
	} else if(messageObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1) {
		// IS AN EXPONENTIAL NUMERIC EXPRESSION (1.00E10, ETC.)
		blnDetected= true;
		if(debug&gt;0) logger.debug(&apos;DEBUG::&apos;+scriptName+&apos; messageObservationValue CONTAINS an exponential 1.00E value: &apos;+messageObservationValue.toString()+&apos; blnDetected: &apos;+blnDetected);
	} else if(messageObservationValue.toString().toUpperCase().indexOf(&apos;INVALID&apos;)&gt;-1) {				
		// INVALID
		blnDetected= false;
		if(debug&gt;0) logger.debug(&apos;DEBUG::&apos;+scriptName+&apos; messageObservationValue CONTAINS an INVALID text value: &apos;+messageObservationValue.toString().toUpperCase()+&apos; blnDetected: &apos;+blnDetected);
	} else if(messageObservationValue.toString().toUpperCase().indexOf(&apos;NOT DETECTED&apos;)&gt;-1) {
		// NON-DETECTED
		blnDetected= false;
		if(debug&gt;0) logger.debug(&apos;DEBUG::&apos;+scriptName+&apos; messageObservationValue CONTAINS NOT DETECTED text value: &apos;+messageObservationValue.toString().toUpperCase()+&apos; blnDetected: &apos;+blnDetected);
	} else if (parseInt(messageObservationValue.toString() !== &apos;NaN&apos;)) {
		// IS A NUMBER
		blnDetected= true;
		if(debug&gt;0) logger.debug(&apos;DEBUG::&apos;+scriptName+&apos; messageObservationValue CONTAINS a number value: &apos;+messageObservationValue.toString()+&apos; blnDetected: &apos;+blnDetected);
	} else if(messageObservationValue.toString().toUpperCase()== &apos;DETECTED&apos;) {
		// DETECTED
		blnDetected= true;
		if(debug&gt;0) logger.debug(&apos;DEBUG::&apos;+scriptName+&apos; messageObservationValue CONTAINS a number value: &apos;+messageObservationValue.toString()+&apos; blnDetected: &apos;+blnDetected);
	} // end if 
	
	if(blnDetected== true) {
		return &apos;DETECTED&apos;;
	} else {
		return &apos;NOT DETECTED&apos;;
	} // end if 
	
} // end function</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>11196ba8-3264-42a9-a59a-7a3cc2ca6754</id>
            <name>Remove Duplicate Segments</name>
            <revision>9</revision>
            <lastModified>
              <time>1685384555341</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
Desc:  Evaluate the OBX versus the observed result code (OBX-3.1) evaluated against Configuration Setting variable: ADPHNotifiablePathogens to determine whether to exclude the Observation Results (OBX) segments from the message and set the pathogenDetected channelMap variable.
	
	fileName:		remove_duplicate_segments.js
	name:		Remove Duplicate Segments
	@authored:	Jeffrey Ritz
	@created:		2023-05-29
	@description:	Remove duplicate segments

	history:
	2023-02-27 JER - Cloned the Remove Observations From Observation Result Codes
*/
function remove_duplicate_segments(msg, removeDuplicateSegmentName) {
	
	var scriptName= &apos;remove_duplicate_segments&apos;;
	var debug= 0;
	var arrRemoveDuplicateSegments= new Array();

	// 2023-04-26 JER - Modified to determine if should evaluate detectable or not
	
	// var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);

	var lastSegmentName= &apos;&apos;;
	var lastSegmentIndex= 0;
	var lastSegment= &apos;&apos;;
	var arrDeleteSegments= new Array();

	var i= 0;
	for each(seg in msg.children()) {
		
		var segmentName= seg.name();
		if(segmentName== removeDuplicateSegmentName) {
		
			var getSegmentIndex= seg.childIndex();
		
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; segment[&apos;+i+&apos;] getSegmentIndex: &apos;+getSegmentIndex+&apos; segment: &apos;+seg);

			if(segmentName== lastSegmentName) {

				var strRemoveDuplicateSegments= segmentName+&apos;[&apos;+lastSegmentIndex+&apos;]: &apos;+seg;
				arrRemoveDuplicateSegments.push(strRemoveDuplicateSegments);
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; found seg[&apos;+i+&apos;] segmentName: &apos;+segmentName+&apos; lastSegmentName: &apos;+lastSegmentName+&apos; IF segmentName== lastSegmentName: &apos;+(segmentName== lastSegmentName)+&apos; DELETE last segment: &apos;+lastSegment);
				delete msg.children()[lastSegmentIndex]; 
			} 

			lastSegment= seg;
			lastSegmentIndex= getSegmentIndex;
			lastSegmentName= segmentName;
		} // end if 
		
	} // end for each 

	if(arrRemoveDuplicateSegments.length&gt;0) channelMap.put(&apos;removeDuplicateSegments&apos;,arrRemoveDuplicateSegments);
	return msg;

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>25d364f7-09cf-4470-8694-a5930e88d2e3</id>
            <name>Remove Non Desired HL7 Segments</name>
            <revision>9</revision>
            <lastModified>
              <time>1678129664685</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Desc: Remove non-desired HL7 Segments from the HL7 message 
	&#xd;
	@fileName:	remove_non_desired_hl7_segments.js
	@name:		Remove Non Desired HL7 Segments
	@authored:	Jeffrey Ritz
	@created:		2023-03-01
	@description:	Remove non-desired HL7 Segments from Message
	@return:		XML Object - returns the HL7 XML representation of the HL7 message excluding the non-desired segments

	history:
	2023-03-02 JER - remove the carriage return line feeds from the segmentsFiltered channelMap variable
	2023-02-27 JER - Cloned the Remove Observations From Observation Result Codes
*/
function remove_non_desired_hl7_segments(msg, removeSegmentsList) {
	
	var scriptName= &apos;remove_non_desired_hl7_segments&apos;;
	var debug= 0;
	var detected= false;
	var i= 0;
	var segmentsFiltered = new Array();
	var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);
	
	// for each segment - child per msg.children()
	for each(child in msg.children()) {
	
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof: &apos;+typeof(child)+&apos; localName: &apos;+child.localName()+&apos; child: &apos;+child);

		if(child.localName()== &apos;MSH&apos;) {
			var msgCtrlId= child[&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
		}
	
		if(removeSegmentsList.indexOf(child.localName())&lt;0) {
		
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] determined segment: &apos;+child.localName()+&apos; KEEP IT as is NOT CONTAINED in the removeSegments List of: &apos;+removeSegmentsList); 
			tmp.appendChild(child);
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] ADD SEGMENT: &apos;+child.localName());
		} else {
			// 2023-03-01 JER - Added the collective observationFiltered channelMap variable to capture the array of filtered observations
			var segmentFiltered= &apos;Filtered segment[&apos;+i+&apos;]: &apos;+child.localName()+&apos;\r\n&apos;;
			segmentsFiltered.push(segmentFiltered);
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; determined segment[&apos;+i+&apos;]: &apos;+child.localName()+&apos; REMOVE IT as it IS CONTAINED in the removeSegments List of: &apos;+removeSegmentsList); 
		} // end if 	
		i++;
		
	} // end for

	// 2023-03-02 JER - remove the carriage return line feeds from the segmentsFiltered channelMap variable
	var strSegmentsFiltered= segmentsFiltered;
	var segmentsFiltered= segmentsFiltered.toString().replace(/[\r][\n]/g,&apos;&apos;);
	channelMap.put(&apos;segmentsFiltered&apos;,segmentsFiltered);
	channelMap.put(&apos;remove_segments_msg&apos;,tmp);

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg: &apos;+msgCtrlId+&apos; non-desired REMOVED segments: &apos;+&apos;\r\n&apos;+strSegmentsFiltered);
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; remove_segments_msg: &apos;+$c(&apos;remove_segments_msg&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; tmp: &apos;+$c(&apos;remove_segments_msg&apos;));
	} // end if 
	
	return tmp;
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>9b1fdd3d-b72c-4e06-af09-29acc6c98903</id>
            <name>Remove Observations From Observation Alternative Codes</name>
            <revision>3</revision>
            <lastModified>
              <time>1682530152063</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Desc:  Evaluate the OBX versus the observation identifier alternative identifier code (OBX-3.4) evaluated against Configuration Setting variable: TNRemoveObservations
	to determine whether to exclude the Observation Results (OBX) segments from the message and set the pathogenDetected channelMap variable.
	
	fileName:		remove_observations_from_observation_alternative_code.js
	name:		Remove Observations From Observation Alternative Codes
	authored:		Jeffrey Ritz
	created:		2023-04-18
	description:	Evaluate the OBX versus the observed result code (OBX-3.4) evaluated against Configuration Setting variable: TNRemoveObservations
	to determine whether to exclude the Observation Results (OBX) segments from the message. 
	history:
	2023-04-18 JER - Cloned the pre-existing remove_observations_from_observation_result_codes 
*/
function remove_observations_from_observation_alternative_code(msg, removeObservations) {
	
	var scriptName= &apos;remove_observations_from_observation_alternative_code&apos;;
	var debug= 0;
	// allowedObservations
	var allowedObservationsCount= 0;
	var allowedObservations= new Array();
	// removedObservations
	var removedObservationsCount= 0;
	var removedObservations= new Array();
	
	var i= 1;
	var j= 1;

	var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);
	
	// for each segment - child per msg.children()
	for each(child in msg.children()) {
	
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof: &apos;+typeof(child)+&apos; localName: &apos;+child.localName()+&apos; child: &apos;+child);

		if(child.localName()== &apos;MSH&apos;) {
			var msgCtrlId= child[&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
		}
	
		if(child.localName()== &apos;OBX&apos;) {
		
			// process each OBX
			// 2023-03-02 JER - Modification to evaluate differences between CWE (Coded Extended) vs ST (String) data type 
			var obx21= child[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString();
			// if(child[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString()== &apos;CWE&apos;) {
			var obx31= child[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
			var obx32= child[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
			var obx34= child[&apos;OBX.3&apos;][&apos;OBX.3.4&apos;].toString();
			var obx51= child[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
			// } // end if 
			var curObservationValue= obx51;
			
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; obx21: &apos;+obx21+&apos; obx34: &apos;+obx34+&apos; obx51: &apos;+obx51+&apos; observedValue: &apos;+curObservationValue);
			
			if(debug&gt;0) {
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;] obx34 typeof: &apos;+typeof(obx34)+&apos; obx34: &apos;+obx34);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;] TNRemoveObservations: &apos;+removeObservations);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;] removeObservations.indexOf(obx34): &apos;+removeObservations.indexOf(obx34));
			}
			
			if(removeObservations.indexOf(obx34)&lt;0) {		

				// 2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] FOUND TN Remove Observation OBX-3.1: &apos;+obx31+&apos; value: &apos;+curObservationValue+&apos; from the list of codes: &apos;+removeObservations+&apos; evaluation: &apos;+removeObservations.indexOf(obx34)+&apos; to ADD this observation OBX Segment.&apos;); 
				
				tmp.appendChild(child);
				allowedObservationsCount++;
				var strAllowedObservations= &apos;Allowed Observations[&apos;+allowedObservationsCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32;
				allowedObservations.push(obx31);
				
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; removeObservations[&apos;+i+&apos;] allowObservations:&apos; +strAllowedObservations);
				
			} else {
				
				// 2023-03-01 JER - Added the collective observationFiltered channelMap variable to capture the array of filtered observations
				removedObservationsCount++;
				var strRemovedObservations= &apos;Filtered Observation[&apos;+removedObservationsCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32+&apos;\r\n&apos;;
				removedObservations.push(obx31);

				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; removeObservations[&apos;+i+&apos;] removedObservations:&apos; +strRemovedObservations);
			
			}
			i++;
		} else {
			// 2023-02-24 JER - Modified to use appendChild E4X denoted XML function
			tmp.appendChild(child);
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] ADD SEGMENT: &apos;+child.localName());
		} // end for
		
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; tmp[&apos;+j+&apos;] contains: &apos;+tmp);
		j++;
		
	} // end for

	// 2023-03-02 JER - remove the carriage return line feeds from the observationsFiltered channelMap variable
	// var observationsFiltered= observationsFiltered.toString().replace(/[\r][\n]/g,&apos;&apos;);
	channelMap.put(&apos;allowedObservations&apos;,allowedObservations);
	channelMap.put(&apos;removedObservations&apos;,removedObservations);

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg: &apos;+msgCtrlId+&apos; allowed observations: &apos;+$c(&apos;allowedObservations&apos;)+&apos; and removed observations: &apos;+$c(&apos;removedObservations&apos;));
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; tmp: &apos;+tmp);
	} // end if 
	
	return tmp;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>227e3592-01f0-4d39-b1aa-6aeda30489e2</id>
            <name>Remove Observations From Observation Alternative Codes (NEW)</name>
            <revision>1</revision>
            <lastModified>
              <time>1684206232287</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Desc:  Evaluate the OBX versus the observation identifier alternative identifier code (OBX-3.4) evaluated against Configuration Setting variable: TNRemoveObservations
	to determine whether to exclude the Observation Results (OBX) segments from the message and set the pathogenDetected channelMap variable.
	
	fileName:		remove_observations_from_observation_alternative_code_new.js
	name:		Remove Observations From Observation Alternative Codes (NEW)
	authored:		Jeffrey Ritz
	created:		2023-04-18
	description:	Evaluate the OBX versus the observed result code (OBX-3.4) evaluated against Configuration Setting variable: TNRemoveObservations
	to determine whether to exclude the Observation Results (OBX) segments from the message. 
	history:
	2023-05-08 JER - Modified to include a removeNonDetected variable if provided with a 1 - then remove nonDetected observations
	2023-05-08 JER - Modified to evaluate observation types (CWE) differently than other coded values
	2023-04-18 JER - Cloned the pre-existing remove_observations_from_observation_result_codes 
*/
function remove_observations_from_observation_alternative_code_new(msg, removeObservations, removeNonDetected) {
	
	var scriptName= &apos;remove_observations_from_observation_alternative_code_new&apos;;
	var debug= 0;
	var detected= false;
	var pathogenDetected= false;
	
	// allowedObservations
	var allowedObservationsCount= 0;
	var allowedObservations= new Array();
	
	// removedObservations
	var removedObservationsCount= 0;
	var removedObservations= new Array();
	if(typeof(removeNonDetected)== undefined) var removeNonDetected= 0;
	
	var i= 1;
	var j= 1;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; removeObservations: &apos;+removeObservations+&apos; removeNonDetected: &apos;+removeNonDetected); 

	// var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);
	

	for each(seg in msg..OBR) {
	
		var perSegAllowedObservationSegments= 0;
		
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof: &apos;+typeof(seg)+&apos; seg[&apos;+j+&apos;]: &apos;+seg);
	
		var allowedObservationSegments= 0;
		for each(obx in getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBX&apos;,false,&apos;OBR&apos;)) {
			
			// process each OBX
			var obx21= obx[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString;
			var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
			var obx32= obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
			var obx34= obx[&apos;OBX.3&apos;][&apos;OBX.3.4&apos;].toString();
			var obx51= obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
			
			// 2023-02-27 JER - Modified from OBX.5.1 to OBX.5.2
			if(obx[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString()== &apos;CWE&apos;) {
				var observationCode= obx34;
				var curObservationValue=	obx[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
			} else {
				var observationCode= obx31;
				var curObservationValue=	obx51.toString().toUpperCase();
			} // end if
						
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+j+&apos;] observationCode: &apos;+observationCode+&apos; obx31: &apos;+obx31+&apos; obx32: &apos;+obx32+&apos; obx51: &apos;+obx51+&apos; curObservationValue: &apos;+curObservationValue);
			
			if(debug&gt;0) { 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] curObservationValue: &apos;+curObservationValue);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] observationCode: &apos;+observationCode+&apos; removeObservations: &apos;+removeObservations+&apos; EVAL: &apos;+removeObservations.indexOf(observationCode));
			} // end if 
			
			// 2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
			if(removeObservations.indexOf(observationCode)&gt;-1) {	

				// 2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] FOUND Observation Code: &apos;+observationCode+&apos; value: &apos;+curObservationValue+&apos; from the list of codes: &apos;+removeObservations+&apos; evaluation: &apos;+removeObservations.indexOf(observationCode)+&apos; to REMOVE this observation OBX Segment.&apos;); 

				removedObservationsCount++;
				var strObservationCode= observationCode+&apos;:&apos;+curObservationValue;
				var strRemovedObservations= &apos;Filtered Observation[&apos;+removedObservationsCount+&apos;] Observation CODE: &apos;+observationCode+&apos; DESCRIPTION: &apos;+obx32+&apos; obx34: &apos;+obx34+&apos; curObservationValue: &apos;+curObservationValue+&apos;\t\r\n&apos;;
				removedObservations.push(strObservationCode);
						
				delete msg.children()[obx.childIndex()];
						
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; REMOVE removable Non-Detected observation CODE: &apos;+observationCode+&apos; removeObservations[&apos;+removedObservationsCount+&apos;] removedObservations:&apos; +strRemovedObservations);
			
			} else {
				
				pathogenDetected= true;
						
				perSegAllowedObservationSegments++;
				allowedObservationsCount++;
				var strObservationCode= observationCode+&apos;:&apos;+curObservationValue;
				var strAllowedObservations= &apos;Allowed Observations[&apos;+allowedObservationsCount+&apos;] Observation CODE: &apos;+observationCode+&apos; DESCRIPTION: &apos;+obx32+ &apos;obx34: &apos;+obx34;
				allowedObservations.push(strObservationCode);
					
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; PERMITTED removable Detected observation CODE: &apos;+observationCode+&apos; allowedObservations[&apos;+allowedObservationsCount+&apos;] allowObservations:&apos; +strAllowedObservations);
			
			} // end if 
			
			j++;
			
		} // end for 
		i++;
		
		// 2024-04-26 JER - Modified to evaluate if any allowedObservations are found - if none then remove associated OBR and SPM segments
		if(perSegAllowedObservationSegments&lt;1) {

			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;SPM&apos;,true,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;TEST::&apos;+scriptName+&apos; SPM getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()+1]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()+1]; 

			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBR&apos;,false,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;TEST::&apos;+scriptName+&apos; OBR getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()]; 
			
		} // end if 
		
	} // end for each

	channelMap.put(&apos;altAllowedObservations&apos;,allowedObservations);
	channelMap.put(&apos;altRemovedObservations&apos;,removedObservations);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; allowedObservations: &apos;+allowedObservations);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; removedObservations: &apos;+removedObservations);
	} // end if 
	
	channelMap.put(&apos;pathogenDetected&apos;,pathogenDetected); // true, false, invalid
	channelMap.put(&apos;modified_msg&apos;,msg);
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pathogenDetected: &apos;+$c(&apos;pathogenDetected&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg: &apos;+$c(&apos;modified_msg&apos;));
	} // end if 
	
	return msg;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>38330d91-1b7c-4159-9530-f55314118d06</id>
            <name>Remove Observations From Observation Result Codes</name>
            <revision>65</revision>
            <lastModified>
              <time>1684206231981</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Desc:  Evaluate the OBX versus the observed result code (OBX-3.1) evaluated against Configuration Setting variable: ADPHNotifiablePathogens
	to determine whether to exclude the Observation Results (OBX) segments from the message and set the pathogenDetected channelMap variable.
	
	fileName:		remove_observations_from_observation_result_codes.js
	name:		Remove Observations From Observation Result Codes
	authored:		Jeffrey Ritz
	created:		2023-02-22
	description:	Evaluate the OBX versus the observed result code (OBX-3.1) evaluated against Configuration Setting variable: ADPHNotifiablePathogens
	to determine whether to exclude the Observation Results (OBX) segments from the message and set the pathogenDetected channelMap variable.
	pathogenDetected= true -&gt; desired pathogens detected persist the observation result OBX segment in the transformed message (msg)
	pathogenDetected= false -&gt; failed to observe the desired pathogen or Non-Detected result remove observation result from OBX segment in transformed message (msg)
	history:
	2023-04-20 JER - Modified changed from OBX.3.4 to OBX.3.1
	2023-03-06 JER - Modified to incorporate the count of the detected in OBX[OBX.1][OBX.1.1]
	2023-03-03 JER - Moved the curObservationValue was moved up to be evaluated and accompanying logger.error statement
	2023-03-02 JER - Modification to evaluate differences between CWE (Coded Extended) vs ST (String) data type
		if obx-2.1 is EQ CWE reference observation code from obx-3.4
		if obx-2.1 is NE CWE (e.g. ST) reference observation code from obx-3.1
	2023-03-02 JER - remove the carriage return line feeds from the observationsFiltered channelMap variable
	2023-03-01 JER - Added the collective observationFiltered channelMap variable to capture the array of filtered observations obx31 and obx32 values
	2023-02-27 JER - Modified from: $cfg(&apos;ADPHNotifiablePathogens&apos;) to: allowedObservationCodeList
	2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
	2023-02-23 JER - Converted transformer to code_template 
*/
function remove_observations_from_observation_result_codes(msg, allowedObservationCodeList) {
	
	var scriptName= &apos;remove_observations_from_observation_result_codes&apos;;
	var debug= 0;
	var detected= false;
	var nonDetectedFilteredCount= 0;
	var nonDetectedFiltered= new Array();
	var permittedPathogenOrder= false;
	var i= 1;
	var j= 1;
	var observationsFiltered = new Array();
	var observationsFilteredCount= 0;
	var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);
	
	// for each segment - child per msg.children()
	for each(child in msg.children()) {
	
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof: &apos;+typeof(child)+&apos; localName: &apos;+child.localName()+&apos; child: &apos;+child);

		if(child.localName()== &apos;MSH&apos;) {
			var msgCtrlId= child[&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString();
		}
	
		if(child.localName()== &apos;OBX&apos;) {
		
			// process each OBX
			// 2023-03-02 JER - Modification to evaluate differences between CWE (Coded Extended) vs ST (String) data type 
			var obx21= child[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString();
			if(child[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString()== &apos;CWE&apos;) {
				// 2023-04-20 JER - Modified changed from OBX.3.4 to OBX.3.1
				var obx31= child[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
				var obx51= child[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
			} else if(child[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString()== &apos;ST&apos;) {
				var obx31= child[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
				var obx51= child[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString().toUpperCase();
			} else {
				var obx31= child[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
				var obx51= child[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString().toUpperCase();
			} // end if 
			var obx32= child[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
			var curObservationValue= obx51;
			
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; obx21: &apos;+obx21+&apos; obx31: &apos;+obx31+&apos; obx32: &apos;+obx32+&apos; obx51: &apos;+obx51+&apos; observedValue: &apos;+curObservationValue);
			
			if(debug&gt;0) {
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;] typeof: &apos;+typeof(obx31)+&apos; obx31: &apos;+obx31);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;] ADPHNotifiablePathogens: &apos;+$cfg(&apos;ADPHNotifiablePathogens&apos;));
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;] obx31 contained in ADPHNotifiablePathogens evaluation: &apos;+$cfg(&apos;ADPHNotifiablePathogens&apos;).indexOf(obx31));
			}
			
			// 2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
			// if($cfg(&apos;ADPHNotifiablePathogens&apos;).indexOf(obx31)&gt;-1) {
			if(allowedObservationCodeList.indexOf(obx31)&gt;-1) {		
				permittedPathogenOrder= true;

				// 2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] FOUND ADPH Notifiable Pathogens: &apos;+obx31+&apos; value: &apos;+curObservationValue+&apos; from the list of codes: &apos;+allowedObservationCodeList+&apos; evaluation: &apos;+allowedObservationCodeList.indexOf(obx31)+&apos; permitted Order Observation OBX Segment.&apos;); 
				
				// evaluate if element value is numerical exponential
				if(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; determined value contains an exponential 1.00E value: &apos;+(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1));
				}
	
				if(debug&gt;0) {
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;].5.1 (curObservationValue== DETECTED): &apos;+(curObservationValue== &apos;DETECTED&apos;));
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;].5.1 (curObservationValue== TRUE): &apos;+(curObservationValue== &apos;TRUE&apos;));
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;].5.1 (curObservationValue.toString().indexOf(1.00E)&gt;-1): &apos;+(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1));
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;].5.1 parseInt(curObservationValue)!== NaN): &apos;+(parseInt(curObservationValue) !== &apos;NaN&apos;));
				} // end if 
				
				// 2022-10-17 JER - Added evaluate if NaN - only 
				if(((curObservationValue== &apos;DETECTED&apos;)&amp;&amp;(parseInt(curObservationValue) !== &apos;NaN&apos;))||(curObservationValue== &apos;TRUE&apos;)||(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1)) {
					detected= true;
					// 2023-03-06 JER - Modified to incorporate the count of the detected in OBX[OBX.1][OBX.1.1]
					// child[&apos;OBX.1&apos;][&apos;OBX.1.1&apos;]= detectedCount;
					// detectedCount++;
					// 2023-02-24 JER - Modified to use appendChild E4X denoted XML function
					tmp.appendChild(child);
					//if(debug&gt;0) 
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] DETECTED: &apos;+detected+&apos; ADD SEGMENT: &apos;+child.localName());
				} else {
					nonDetectedFilteredCount++;
					var strNonDetectedFiltered= &apos;Non-Detected[&apos;+nonDetectedFilteredCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32;
					nonDetectedFiltered.push(strNonDetectedFiltered);
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] NOT DETECTED: &apos;+detected+&apos; REMOVE SEGMENT: &apos;+child.localName());
				} // end if 
				
			} else {
					// 2023-03-01 JER - Added the collective observationFiltered channelMap variable to capture the array of filtered observations
					observationsFilteredCount++;
					var observationFiltered= &apos;Observation[&apos;+observationsFilteredCount+&apos;] CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32+&apos;\r\n&apos;;
					observationsFiltered.push(observationFiltered);
					//if(debug&gt;0)
					// 2023-03-05 JER - Modified to include description of failed to find the ADPH Notifiable Pathogen observed results 
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] DID NOT FIND ADPH Notifiable Pathogens: &apos;+obx31+&apos; value: &apos;+curObservationValue+&apos; from the list of codes: &apos;+allowedObservationCodeList+&apos; evaluation: &apos;+allowedObservationCodeList.indexOf(obx31)+&apos; rejected Order Observation OBX Segment.&apos;); 
			}
			i++;
		} else {
			// 2023-02-24 JER - Modified to use appendChild E4X denoted XML function
			// tmp+= child;
			tmp.appendChild(child);
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] ADD SEGMENT: &apos;+child.localName());
		} // end for
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; tmp[&apos;+j+&apos;] contains: &apos;+tmp);
		j++;
	} // end for

	if(observationsFiltered.length&lt;1) {
		observationsFiltered= &apos;NONE&apos;;
	} // end if 
	
	channelMap.put(&apos;pathogenDetected&apos;,detected); // true, false, invalid
	
	var strObservationsFiltered= observationsFiltered;
	// 2023-03-02 JER - remove the carriage return line feeds from the observationsFiltered channelMap variable
	var observationsFiltered= observationsFiltered.toString().replace(/[\r][\n]/g,&apos;&apos;);
	channelMap.put(&apos;observationsFiltered&apos;,observationsFiltered);
	channelMap.put(&apos;nonDetectedFiltered&apos;,nonDetectedFiltered);

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg: &apos;+msgCtrlId+&apos; observation required pathogens: &apos;+$c(&apos;pathogenDetected&apos;)+&apos; these observations were FILTERED: &apos;+&apos;\r\n&apos;+strObservationsFiltered);
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pathogenDetected: &apos;+$c(&apos;pathogenDetected&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; tmp: &apos;+tmp);
	} // end if 
	
	return tmp;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>6a4a40c1-ee91-497a-b8df-e4bf5ea220b8</id>
            <name>Remove Observations From Observation Result Codes (New2)</name>
            <revision>20</revision>
            <lastModified>
              <time>1684421734891</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
Desc:  Evaluate the OBX versus the observed result code (OBX-3.1) evaluated against Configuration Setting variable: ADPHNotifiablePathogens to determine whether to exclude the Observation Results (OBX) segments from the message and set the pathogenDetected channelMap variable.
	
	fileName:		remove_observations_from_observation_result_codes_new2.js
	name:		Remove Observations From Observation Result Codes (New2)
	@authored:	Jeffrey Ritz
	@created:		2023-02-27
	@description:	Remove observations with Non-Detected Results and mark Detected to be Allowed/Filtered

	history:
	2023-05-18 JER - persist the OBR segment childIndex() and msg segment children() the OBR childIndex() remove the prior segment -&gt; ORC segment
	2023-04-26 JER - Modified to determine if should evaluate detectable or not
	2023-04-21 JER - Consider following https://github.com/nextgenhealthcare/connect/discussions/5244
	2023-02-27 JER - Cloned the Remove Observations From Observation Result Codes
*/
function remove_observations_from_observation_result_codes_new2(msg, allowedObservationCodeList, filterDetectable) {
	
	var scriptName= &apos;remove_observations_from_observation_result_codes_new2&apos;;
	var debug= 0;
	var detected= false;
	// Allowed Observations Filtered List
	var nonDetectedFilteredCount= 0;
	var nonDetectedFiltered= new Array();
	// Disallowed Observations Filtered listStyleType
	var disallowedObservationsCount= 0;
	var disallowedObservations= new Array();
	
	var permittedPathogenOrder= false;
	// 2023-04-26 JER - Modified to determine if should evaluate detectable or not
	
	var i= 1;
	var j= 1;
	var k= 1;
	var observationsFiltered = new Array();
	var observationsFilteredCount= 0;
	// var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);

	var num_orc= msg..ORC.length();

	for each(seg in msg..OBR) {	
	
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; seg[&apos;+j+&apos;]: &apos;+seg+&apos; childIndex(): &apos;+seg.childIndex());
		
		// 2023-05-18 JER - persist the OBR segment childIndex()
		var obrChildIndex= seg.childIndex(); 
		
		var allowedObservationSegments= 0;
		for each(obx in getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBX&apos;,false,&apos;OBR&apos;)) {
			
			// process each OBX
			if(obx[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString()== &apos;CWE&apos;) {
				var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.4&apos;].toString();
			} else {
				var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
			} // end if 
			var obx32= obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
			var obx51= obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
			
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+j+&apos;] obx31: &apos;+obx31+&apos; obx32: &apos;+obx32+&apos; obx51: &apos;+obx51);
			
			// 2023-02-27 JER - Modified from OBX.5.1 to OBX.5.2
			if(child[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().length&lt;1) {
				var curObservationValue=obx[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
			} else {
				var curObservationValue=obx51.toString().toUpperCase();
			} // end if 
			
			if(debug&gt;0) {
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] curObservationValue: &apos;+curObservationValue);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] obx31: &apos;+obx31+&apos; EVAL FOUND: &apos;+allowedObservationCodeList.indexOf(obx31)+&apos; allowedObservationCodeList: &apos;+allowedObservationCodeList);
			}
			// 2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
			if(allowedObservationCodeList.indexOf(obx31)&gt;-1) {	

				channelMap.put(&apos;pathogenDetected&apos;,true);
				// evaluate if element value is numerical exponential
				if(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains an exponential 1.00E value: &apos;+(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1));
				} // end if 
				
				// evaluate if element value is number 
				if(parseInt(curObservationValue.toString() !== &apos;NaN&apos;)) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains IS a number: &apos;+parseInt(curObservationValue.toString()!== &apos;NaN&apos;));
				} // end if 

				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; filterDetecteable: &apos;+filterDetecteable);
				// 2023-04-26 JER - Evaluate if allowing either Detected or Non-Detected values
				if(filterDetectable=== true) {

					// 2022-10-17 JER - Added evaluate if NaN - only 
					if((curObservationValue== &apos;DETECTED&apos;)||(curObservationValue== &apos;TRUE&apos;)||(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1)||parseInt(curObservationValue.toString()!== &apos;NaN&apos;)) {
				
						allowedObservationSegments++;
						detected= true;
						//tmp.appendChild(child);
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] DETECTED OBX.5.1 value: &apos;+curObservationValue+&apos; checkDetected: &apos;+filterDetecteable+&apos; DETECTED: &apos;+detected+&apos; KEEP SEGMENT: &apos;+obx);
					} else {
						nonDetectedFilteredCount++;
						var strNonDetectedFiltered= &apos;Non-Detected[&apos;+nonDetectedFilteredCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32;
						nonDetectedFiltered.push(strNonDetectedFiltered);

						delete msg.children()[obx.childIndex()];
					
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] NON-DETECTED OBX.5.1 value: &apos;+curObservationValue+&apos; checkDetected: &apos;+filterDetecteable+&apos; vs NON-DETECTED: &apos;+detected+&apos; REMOVE SEGMENT: &apos;+obx);
				
					} // end if 
				
				// 2023-04-26 JER - Evaluate if allowing either Detected or Non-Detected values
				} else {
					
					allowedObservationSegments++;
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] NO NON-DETECTED FILTER - ALLOW OBX.5.1 value &apos;+curObservationValue+&apos; checkDetected: &apos;+filterDetecteable+&apos; ALLOW ALL Detectable values ALLOW SEGMENT: &apos;+obx);
					
				} // end if 
			
			} else {
				
				disallowedObservationsCount++;
				var strDisallowedObservations= &apos;Disallowed Observations[&apos;+disallowedObservationsCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32;
				disallowedObservations.push(strDisallowedObservations);
				
				delete msg.children()[obx.childIndex()];
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.3.1 value: &apos;+obx31+&apos; DISALLOWED Observation[&apos;+disallowedObservationsCount+&apos;] REMOVE SEGMENT: &apos;+obx);
				
			} // end if 
			j++;
			
		} // end for 
		i++;
		
		// 2024-04-26 JER - Modified to evaluate if any allowedObservations are found - if none then remove associated OBR and SPM segments
		if(allowedObservationSegments&lt;1) {

			/*
			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;SPM&apos;,true,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;TEST::&apos;+scriptName+&apos; SPM getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()]; 
			*/
			
			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBR&apos;,false,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;TEST::&apos;+scriptName+&apos; OBR getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()]; 

			// 2023-05-18 JER - msg segment children() the OBR childIndex() remove the prior segment -&gt; ORC segment
			delete msg.children()[obrChildIndex-1];

			
		} // end if 
		
	} // end for each

	channelMap.put(&apos;specimenDetected&apos;,detected); // true, false, invalid
	channelMap.put(&apos;modified_msg&apos;,msg);
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; specimenDetected: &apos;+$c(&apos;specimenDetected&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg: &apos;+$c(&apos;modified_msg&apos;));
	} // end if 
	
	return msg;

} // end function</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>33061588-3e3a-43ac-8f10-862e5283ffe6</id>
            <name>Remove Observations From Observation Result Codes (New3)</name>
            <revision>2</revision>
            <lastModified>
              <time>1685382852602</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
Desc:  Evaluate the OBX versus the observed result code (OBX-3.1) evaluated against Configuration Setting variable: ADPHNotifiablePathogens to determine whether to exclude the Observation Results (OBX) segments from the message and set the pathogenDetected channelMap variable.
	
	fileName:		remove_observations_from_observation_result_codes_new3.js
	name:		Remove Observations From Observation Result Codes (New3)
	@authored:	Jeffrey Ritz
	@created:		2023-02-27
	@description:	Remove observations with Non-Detected Results and mark Detected to be Allowed/Filtered

	history:
	2023-05-22 JER - Modified to include the set of the curObservationValue of OBX.5.2 based on OBX.2.1 as &apos;CWE&apos;
	2023-05-18 JER - persist the OBR segment childIndex() and msg segment children() the OBR childIndex() remove the prior segment -&gt; ORC segment
	2023-04-26 JER - Modified to determine if should evaluate detectable or not
	2023-04-21 JER - Consider following https://github.com/nextgenhealthcare/connect/discussions/5244
	2023-02-27 JER - Cloned the Remove Observations From Observation Result Codes
*/
function remove_observations_from_observation_result_codes_new3(msg, allowedObservationCodeList, filterDetectable) {
	
	var scriptName= &apos;remove_observations_from_observation_result_codes_new3&apos;;
	var debug= 0;
	var detected= false;
	// Allowed Observations Filtered List
	var nonDetectedFilteredCount= 0;
	var nonDetectedFiltered= new Array();
	var lstNonDetectedFiltered= new Array();
	
	// Allowed Observations Filtered List
	var allowedObservationsCount= 0;
	var allowedObservations= new Array();
	var lstAllowedObservations= new Array();
	
	// Disallowed Observations Filtered listStyleType
	var disallowedObservationsCount= 0;
	var disallowedObservations= new Array();
	var lstDisallowedObservations= new Array();
	
	var permittedPathogenOrder= false;
	// 2023-04-26 JER - Modified to determine if should evaluate detectable or not
	
	var i= 1;
	var j= 1;
	var k= 1;
	var observationsFiltered = new Array();
	var observationsFilteredCount= 0;
	// 2023-05-18 JER - persist all OBR related segment indexes
	var arrObrChildIndex= new Array();
	
	// var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);

	var num_orc= msg..ORC.length();

	for each(seg in msg..OBR) {	

		var allowedObservationSegments= 0;
		
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; seg[&apos;+j+&apos;]: &apos;+seg+&apos; childIndex(): &apos;+seg.childIndex());
		
		// 2023-05-18 JER - persist the OBR segment childIndex()
		var obrChildIndex= seg.childIndex(); 
		
		var allowedObservationSegments= 0;
		for each(obx in getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBX&apos;,false,&apos;OBR&apos;)) {
			
			// process each OBX
			if(obx[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString()== &apos;CWE&apos;) {
				var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.4&apos;].toString();
				// 2023-05-22 JER - Modified to include the set of the curObservationValue of OBX.5.2 based on OBX.2.1 as &apos;CWE&apos;
				var curObservationValue=obx[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
			} else {
				var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
				// 2023-05-22 JER - Modified to include the set of the curObservationValue of OBX.5.2 based on OBX.2.1 as &apos;CWE&apos;
				var curObservationValue=obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
			} // end if 
			var obx32= obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
			var obx51= obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
			
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+j+&apos;] obx31: &apos;+obx31+&apos; obx32: &apos;+obx32+&apos; curObservationValue: &apos;+curObservationValue);
			
			/*
			// 2023-05-22 JER - Modified to include the set of the curObservationValue of OBX.5.2 based on OBX.2.1 as &apos;CWE&apos;
			// 2023-02-27 JER - Modified from OBX.5.1 to OBX.5.2
			if(child[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().length&lt;1) {
				var curObservationValue=obx[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
			} else {
				var curObservationValue=obx51.toString().toUpperCase();
			} // end if 
			*/
			
			if(debug&gt;0) {
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] obx31: &apos;+obx31+&apos; EVAL FOUND: &apos;+allowedObservationCodeList.indexOf(obx31)+&apos; allowedObservationCodeList: &apos;+allowedObservationCodeList);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] curObservationValue: &apos;+curObservationValue);
			}
			
			// 2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
			if(allowedObservationCodeList.indexOf(obx31)&gt;-1) {	

				channelMap.put(&apos;pathogenDetected&apos;,true);
				// evaluate if element value is numerical exponential
				if(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains an exponential 1.00E value: &apos;+(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1));
					curObservationValue= &apos;DETECTED&apos;;
				} // end if 

				// 8.01E+04
				if(curObservationValue.toString().indexOf(&apos;8.01E&apos;)&gt;-1) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains an exponential 8.01E value: &apos;+(curObservationValue.toString().indexOf(&apos;8.01E&apos;)&gt;-1));
					curObservationValue= &apos;DETECTED&apos;;
				} // end if 
				
				// evaluate if element value is number 
				if(parseInt(curObservationValue.toString() !== &apos;NaN&apos;)) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains IS a number: &apos;+parseInt(curObservationValue.toString()!== &apos;NaN&apos;));
					curObservationValue= &apos;DETECTED&apos;;
				} // end if 

				if(debug&gt;0) {
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] obx31: &apos;+obx31+&apos; filterDetectable: &apos;+filterDetectable+&apos; filterDetectable.indexOf(true): &apos;+(filterDetectable.indexOf(&apos;true&apos;)));
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] obx31: &apos;+obx31+&apos; curObservationValue: &apos;+curObservationValue.toUpperCase()+&apos; curObservationValue NEQ NOT DETECTED: &apos;+(curObservationValue.toUpperCase()!== &apos;NOT DETECTED&apos;));
				} // end if
				
				// 2023-04-26 JER - Evaluate if allowing either Detected or Non-Detected values
				if(filterDetectable.indexOf(&apos;true&apos;)&gt;-1) {

					// 2022-10-17 JER - Added evaluate if NaN - only 
					// if((curObservationValue== &apos;DETECTED&apos;)||(curObservationValue== &apos;TRUE&apos;)||(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1)||parseInt(curObservationValue.toString()!== &apos;NaN&apos;)) {
					// 2023-05-22 JER - Modified to evaluate only the string &apos;NOT DETECTED&apos;
					if(curObservationValue.toUpperCase()!== &apos;NOT DETECTED&apos;) {

						// required to evaluate to determine if require to filter ORM and SPM segments
						allowedObservationSegments++;
						
						allowedObservationsCount++;
						detected= true;
						var strAllowedObservations= &apos;OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] Allowed[&apos;+allowedObservationsCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32+&apos; curObservationValue: &apos;+curObservationValue;
						if(allowedObservations.indexOf(strAllowedObservations)&lt;0) {
							allowedObservations.push(strAllowedObservations);
						} // end if 
				
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] DETECTED OBX.5.1 value: &apos;+curObservationValue+&apos; checkDetected: &apos;+filterDetectable+&apos; DETECTED: &apos;+detected+&apos; KEEP SEGMENT: &apos;+obx);
					} else {
						
						nonDetectedFilteredCount++;
						var strNonDetectedFiltered= &apos;OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] Non-Detected[&apos;+nonDetectedFilteredCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32+&apos; curObservationValue: &apos;+curObservationValue;
						if(nonDetectedFiltered.indexOf(strNonDetectedFiltered)&lt;0) {
							nonDetectedFiltered.push(strNonDetectedFiltered);
						} // end if 
						delete msg.children()[obx.childIndex()];
					
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] NON-DETECTED OBX.5.1 value: &apos;+curObservationValue+&apos; checkDetected: &apos;+filterDetectable+&apos; vs NON-DETECTED: &apos;+detected+&apos; REMOVE SEGMENT: &apos;+obx);
				
					} // end if 
				
				// 2023-04-26 JER - Evaluate if allowing either Detected or Non-Detected values
				} else {

					detected= true;
					allowedObservationsCount++;
					var strAllowedObservations= &apos;OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] Allowed[&apos;+allowedObservationsCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32+&apos; curObservationValue: &apos;+curObservationValue;
					if(allowedObservations.indexOf(strAllowedObservations)&lt;0) {
						allowedObservations.push(strAllowedObservations);
					} // end if 
					
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] Allowed Observations OBX.5.1 value &apos;+curObservationValue+&apos; checkDetected: &apos;+filterDetectable+&apos; ALLOW ALL Detectable values ALLOW SEGMENT: &apos;+obx);
					
				} // end if 
			
			} else {
				
				disallowedObservationsCount++;
				var strDisallowedObservations= &apos;OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] Disallowed Observations[&apos;+disallowedObservationsCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32+&apos; curObservationValue: &apos;+curObservationValue;
				if(disallowedObservations.indexOf(strDisallowedObservations)&lt;0) {
					disallowedObservations.push(strDisallowedObservations);
				} // end if 
				
				delete msg.children()[obx.childIndex()];

				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.3.1 value: &apos;+obx31+&apos; DISALLOWED Observation[&apos;+disallowedObservationsCount+&apos;] REMOVE SEGMENT: &apos;+obx);
				
			} // end if 
			j++;
			
		} // end for 
		i++;

		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR childIndex[&apos;+obrChildIndex+&apos;] allowedObservationSegments: &apos;+allowedObservationSegments); 
		
		// 2024-04-26 JER - Modified to evaluate if any allowedObservations are found - if none then remove associated OBR and SPM segments
		if(allowedObservationSegments&lt;1) {

			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;SPM&apos;,true,&apos;OBR&apos;);

			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; delete SPM getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[obrChildIndex+1]+&apos; value: &apos;+getSegment);
			delete msg.children()[obrChildIndex+1]; 
			
			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBR&apos;,false,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; delete OBR getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()]; 

			// if(debug&gt;0) 
			//logger.error(&apos;DEBUG::&apos;+scriptName+&apos; delete segment typeof: &apos;+typeof(msg.children()[obrChildIndex-1])+&apos; index: &apos;+[obrChildIndex-1]+&apos; value: &apos;+msg.children()[obrChildIndex-1]);
			// 2023-05-18 JER - msg segment children() the OBR childIndex() remove the prior segment -&gt; ORC segment
			//delete msg.children()[obrChildIndex-1];

			
		} // end if 

		// per OBR segment push into an overall list to be persisted in channelMap
		lstAllowedObservations.push(allowedObservations);
		lstDisallowedObservations.push(disallowedObservations);
		lstNonDetectedFiltered.push(nonDetectedFiltered);
		
	} // end for each

	
	if(lstAllowedObservations.length&gt;0) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; lstAllowedObservations: &apos;+lstAllowedObservations); 
		channelMap.put(&apos;arrAllowedObservations&apos;,lstAllowedObservations);
	}  // end if 
	
	if(lstDisallowedObservations.length&gt;0) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; lstDisallowedObservations: &apos;+lstDisallowedObservations);  
		channelMap.put(&apos;arrDisallowedObservations&apos;,lstDisallowedObservations); 
	} // end if 
	
	if(lstNonDetectedFiltered.length&gt;0) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; lstNonDetectedFiltered: &apos;+lstNonDetectedFiltered); 
		channelMap.put(&apos;arrNonDetectedFiltered&apos;,lstNonDetectedFiltered); 
	} // end if 

	channelMap.put(&apos;specimenDetected&apos;,detected); // true, false, invalid
	channelMap.put(&apos;modified_msg&apos;,msg);
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; specimenDetected: &apos;+$c(&apos;specimenDetected&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg: &apos;+$c(&apos;modified_msg&apos;));
	} // end if 
	
	return msg;

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>aa4e63f3-ba6f-443a-ad3d-549b334b33fa</id>
            <name>Remove Observations From Observation Result Codes New</name>
            <revision>44</revision>
            <lastModified>
              <time>1693008655886</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
Desc:  Evaluate the OBX versus the observed result code (OBX-3.1) evaluated against Configuration Setting variable: ADPHNotifiablePathogens to determine whether to exclude the Observation Results (OBX) segments from the message and set the pathogenDetected channelMap variable.
	
	fileName:		remove_observations_from_observation_result_codes_new.js
	name:		Remove Observations From Observation Result Codes (New)
	@authored:	Jeffrey Ritz
	@created:		2023-02-27
	@description:	Remove observations with Non-Detected Results and mark Detected to be Allowed/Filtered

	history:
	2023-08-25 JER - Modified moved the static Config Map setting to a function parameterized variable and added debug to check/verify two parameterized variables
	2023-04-26 JER - Modified to determine if should evaluate detectable or not
	2023-04-21 JER - Consider following https://github.com/nextgenhealthcare/connect/discussions/5244
	2023-02-27 JER - Cloned the Remove Observations From Observation Result Codes
*/
function remove_observations_from_observation_result_codes_new(msg, allowedObservationCodeList, filterNotifiablePathogensNonDetectable) {
	
	var scriptName= &apos;remove_observations_from_observation_result_codes_new&apos;;
	var debug= 0;
	var detected= false;
	// Allowed Observations Filtered List
	var nonDetectedFilteredCount= 0;
	var nonDetectedFiltered= new Array();
	// Disallowed Observations Filtered listStyleType
	var disallowedObservationsCount= 0;
	var disallowedObservations= new Array();
	
	var permittedPathogenOrder= false;
	// 2023-04-26 JER - Modified to determine if should evaluate detectable or not
	// 2023-08-25 JER - Modified moved the static Config Map setting to a function parameterized variable and added debug to check/verify two parameterized variables
	// var filterNotifiablePathogensNonDetectable= $cfg(&apos;TNNotifiablePathogensDetectable&apos;);
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; allowedObservationCodeList: &apos;+allowedObservationCodeList);
		logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; filterNotifiablePathogensNonDetectable: &apos;+filterNotifiablePathogensNonDetectable);
	} // end if 
	
	var i= 1;
	var j= 1;
	var observationsFiltered = new Array();
	var observationsFilteredCount= 0;
	// var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);
	
	for each(seg in msg..OBR) {	
	
		logger.error(&apos;TEST::&apos;+scriptName+&apos; seg[&apos;+j+&apos;]: &apos;+seg);
	
		var allowedObservationSegments= 0;
		for each(obx in getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBX&apos;,false,&apos;OBR&apos;)) {
			
			// process each OBX
			var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
			var obx32= obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
			var obx51= obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
			
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+j+&apos;] obx31: &apos;+obx31+&apos; obx32: &apos;+obx32+&apos; obx51: &apos;+obx51);
			
			// 2023-02-27 JER - Modified from OBX.5.1 to OBX.5.2
			if(child[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().length&lt;1) {
				var curObservationValue=obx[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
			} else {
				var curObservationValue=obx51.toString().toUpperCase();
			} // end if 
			
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] curObservationValue: &apos;+curObservationValue);
			
			// 2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
			if(allowedObservationCodeList.indexOf(obx31)&gt;-1) {	
			
				// evaluate if element value is numerical exponential
				if(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains an exponential 1.00E value: &apos;+(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1));
				} // end if 
				
				// evaluate if element value is number 
				if(parseInt(curObservationValue.toString() !== &apos;NaN&apos;)) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains IS a number: &apos;+parseInt(curObservationValue.toString()!== &apos;NaN&apos;));
				} // end if 

				// 2023-04-26 JER - Evaluate if allowing either Detected or Non-Detected values
				if(filterNotifiablePathogensNonDetectable== true) {

					// 2022-10-17 JER - Added evaluate if NaN - only 
					if((curObservationValue== &apos;DETECTED&apos;)||(curObservationValue== &apos;TRUE&apos;)||(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1)||parseInt(curObservationValue.toString()!== &apos;NaN&apos;)) {
				
						allowedObservationSegments++;
						detected= true;
						//tmp.appendChild(child);
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.1 value: &apos;+curObservationValue+&apos; DETECTED: &apos;+detected+&apos; KEEP SEGMENT: &apos;+obx);
					} else {
						nonDetectedFilteredCount++;
						var strNonDetectedFiltered= &apos;Non-Detected[&apos;+nonDetectedFilteredCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32;
						nonDetectedFiltered.push(strNonDetectedFiltered);
				
						delete msg.children()[obx.childIndex()];
					
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.1 value: &apos;+curObservationValue+&apos; NON-DETECTED: &apos;+detected+&apos; REMOVE SEGMENT: &apos;+obx);
				
					} // end if 
				
				// 2023-04-26 JER - Evaluate if allowing either Detected or Non-Detected values
				} else {
					
					allowedObservationSegments++;
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] ALLOW OBX.5.1 value &apos;+curObservationValue+&apos; ALLOW ALL Detectable values ALLOW SEGMENT: &apos;+obx);
					
				} // end if 
			
			} else {
				
				disallowedObservationsCount++;
				var strDisallowedObservations= &apos;Disallowed Observations[&apos;+disallowedObservationsCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32;
				disallowedObservations.push(strDisallowedObservations);
				
				delete msg.children()[obx.childIndex()];
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.3.1 value: &apos;+obx31+&apos; DISALLOWED Observation[&apos;+disallowedObservationsCount+&apos;] REMOVE SEGMENT: &apos;+obx);
				
			} // end if 
			j++;
			
		} // end for 
		i++;
		
		// 2024-04-26 JER - Modified to evaluate if any allowedObservations are found - if none then remove associated OBR and SPM segments
		if(allowedObservationSegments&lt;1) {

			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;SPM&apos;,true,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;TEST::&apos;+scriptName+&apos; SPM getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()+1]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()+1]; 

			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBR&apos;,false,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;TEST::&apos;+scriptName+&apos; OBR getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()]; 
			
		} // end if 
		
	} // end for each

	channelMap.put(&apos;disallowedObservations&apos;,disallowedObservations); 
	channelMap.put(&apos;specimenDetected&apos;,detected); // true, false, invalid
	channelMap.put(&apos;modified_msg&apos;,msg);
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; disallowedObservations: &apos;+$c(&apos;disallowedObservations&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; specimenDetected: &apos;+$c(&apos;specimenDetected&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg: &apos;+$c(&apos;modified_msg&apos;));
	} // end if 
	
	return msg;

} // end function</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>9178bdf8-2739-408f-af89-2253335982ee</id>
            <name>Remove Observations From Observation Result Codes Non-Detected Results</name>
            <revision>2</revision>
            <lastModified>
              <time>1687559459663</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
Desc:  Evaluate the OBX versus the observed result code (OBX-3.1) evaluated against Configuration Setting variable: ADPHNotifiablePathogens to determine whether to exclude the Observation Results (OBX) segments from the message and set the pathogenDetected channelMap variable.
	
	fileName:		remove_observations_from_observation_result_codes_new.js
	name:			Remove Observations From Observation Result Codes (New)
	@authored:		Jeffrey Ritz
	@created:		2023-02-27
	@description:	Remove observations with Non-Detected Results and mark Detected to be Allowed/Filtered

	history:
	2023-05-22 JER - Modified to include the set of the curObservationValue of OBX.5.2 based on OBX.2.1 as &apos;CWE&apos;
	2023-05-18 JER - persist the OBR segment childIndex() and msg segment children() the OBR childIndex() remove the prior segment -&gt; ORC segment
	2023-04-26 JER - Modified to determine if should evaluate detectable or not
	2023-04-21 JER - Consider following https://github.com/nextgenhealthcare/connect/discussions/5244
	2023-02-27 JER - Cloned the Remove Observations From Observation Result Codes
*/
function remove_observations_from_observation_result_codes_new(msg, allowedObservationCodeList, filterDetectable) {
	
	var scriptName= &apos;remove_observations_from_observation_result_codes_new&apos;;
	var debug= 0;
	var detected= false;
	// Allowed Observations Filtered List
	var nonDetectedFilteredCount= 0;
	var nonDetectedFiltered= new Array();
	var lstNonDetectedFiltered= new Array();
	
	// Allowed Observations Filtered List
	var allowedObservationsCount= 0;
	var allowedObservations= new Array();
	var lstAllowedObservations= new Array();
	
	// Disallowed Observations Filtered listStyleType
	var disallowedObservationsCount= 0;
	var disallowedObservations= new Array();
	var lstDisallowedObservations= new Array();
	
	var permittedPathogenOrder= false;
	// 2023-04-26 JER - Modified to determine if should evaluate detectable or not
	
	var i= 1;
	var j= 1;
	var k= 1;
	var observationsFiltered = new Array();
	var observationsFilteredCount= 0;
	// 2023-05-18 JER - persist all OBR related segment indexes
	var arrObrChildIndex= new Array();
	
	// var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);

	var num_orc= msg..ORC.length();

	for each(seg in msg..OBR) {	

		var allowedObservationSegments= 0;
		
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; seg[&apos;+j+&apos;]: &apos;+seg+&apos; childIndex(): &apos;+seg.childIndex());
		
		// 2023-05-18 JER - persist the OBR segment childIndex()
		var obrChildIndex= seg.childIndex(); 
		
		var allowedObservationSegments= 0;
		for each(obx in getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBX&apos;,false,&apos;OBR&apos;)) {
			
			// process each OBX
			if(obx[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString()== &apos;CWE&apos;) {
				var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.4&apos;].toString();
				// 2023-05-22 JER - Modified to include the set of the curObservationValue of OBX.5.2 based on OBX.2.1 as &apos;CWE&apos;
				var curObservationValue=obx[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
			} else {
				var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
				// 2023-05-22 JER - Modified to include the set of the curObservationValue of OBX.5.2 based on OBX.2.1 as &apos;CWE&apos;
				var curObservationValue=obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
			} // end if 
			var obx32= obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
			var obx51= obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
			
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+j+&apos;] obx31: &apos;+obx31+&apos; obx32: &apos;+obx32+&apos; curObservationValue: &apos;+curObservationValue);
			
			/*
			// 2023-05-22 JER - Modified to include the set of the curObservationValue of OBX.5.2 based on OBX.2.1 as &apos;CWE&apos;
			// 2023-02-27 JER - Modified from OBX.5.1 to OBX.5.2
			if(child[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().length&lt;1) {
				var curObservationValue=obx[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
			} else {
				var curObservationValue=obx51.toString().toUpperCase();
			} // end if 
			*/
			
			if(debug&gt;0) {
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] obx31: &apos;+obx31+&apos; EVAL FOUND: &apos;+allowedObservationCodeList.indexOf(obx31)+&apos; allowedObservationCodeList: &apos;+allowedObservationCodeList);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] curObservationValue: &apos;+curObservationValue);
			}
			
			// 2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
			if(allowedObservationCodeList.indexOf(obx31)&gt;-1) {	

				channelMap.put(&apos;pathogenDetected&apos;,true);
				// evaluate if element value is numerical exponential
				if(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains an exponential 1.00E value: &apos;+(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1));
					curObservationValue= &apos;DETECTED&apos;;
				} // end if 

				// 8.01E+04
				if(curObservationValue.toString().indexOf(&apos;8.01E&apos;)&gt;-1) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains an exponential 8.01E value: &apos;+(curObservationValue.toString().indexOf(&apos;8.01E&apos;)&gt;-1));
					curObservationValue= &apos;DETECTED&apos;;
				} // end if 
				
				// evaluate if element value is number 
				if(parseInt(curObservationValue.toString() !== &apos;NaN&apos;)) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains IS a number: &apos;+parseInt(curObservationValue.toString()!== &apos;NaN&apos;));
					curObservationValue= &apos;DETECTED&apos;;
				} // end if 

				if(debug&gt;0) {
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] obx31: &apos;+obx31+&apos; filterDetectable: &apos;+filterDetectable+&apos; filterDetectable.indexOf(true): &apos;+(filterDetectable.indexOf(&apos;true&apos;)));
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] obx31: &apos;+obx31+&apos; curObservationValue: &apos;+curObservationValue.toUpperCase()+&apos; curObservationValue NEQ NOT DETECTED: &apos;+(curObservationValue.toUpperCase()!== &apos;NOT DETECTED&apos;));
				} // end if
				
				// 2023-04-26 JER - Evaluate if allowing either Detected or Non-Detected values
				if(filterDetectable.indexOf(&apos;true&apos;)&gt;-1) {

					// 2022-10-17 JER - Added evaluate if NaN - only 
					// if((curObservationValue== &apos;DETECTED&apos;)||(curObservationValue== &apos;TRUE&apos;)||(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1)||parseInt(curObservationValue.toString()!== &apos;NaN&apos;)) {
					// 2023-05-22 JER - Modified to evaluate only the string &apos;NOT DETECTED&apos;
					if(curObservationValue.toUpperCase()!== &apos;NOT DETECTED&apos;) {

						// required to evaluate to determine if require to filter ORM and SPM segments
						allowedObservationSegments++;
						
						allowedObservationsCount++;
						detected= true;
						var strAllowedObservations= &apos;OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] Allowed[&apos;+allowedObservationsCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32+&apos; curObservationValue: &apos;+curObservationValue;
						if(allowedObservations.indexOf(strAllowedObservations)&lt;0) {
							allowedObservations.push(strAllowedObservations);
						} // end if 
				
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] DETECTED OBX.5.1 value: &apos;+curObservationValue+&apos; checkDetected: &apos;+filterDetectable+&apos; DETECTED: &apos;+detected+&apos; KEEP SEGMENT: &apos;+obx);
					} else {
						
						nonDetectedFilteredCount++;
						var strNonDetectedFiltered= &apos;OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] Non-Detected[&apos;+nonDetectedFilteredCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32+&apos; curObservationValue: &apos;+curObservationValue;
						if(nonDetectedFiltered.indexOf(strNonDetectedFiltered)&lt;0) {
							nonDetectedFiltered.push(strNonDetectedFiltered);
						} // end if 
						delete msg.children()[obx.childIndex()];
					
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] NON-DETECTED OBX.5.1 value: &apos;+curObservationValue+&apos; checkDetected: &apos;+filterDetectable+&apos; vs NON-DETECTED: &apos;+detected+&apos; REMOVE SEGMENT: &apos;+obx);
				
					} // end if 
				
				// 2023-04-26 JER - Evaluate if allowing either Detected or Non-Detected values
				} else {

					detected= true;
					allowedObservationsCount++;
					var strAllowedObservations= &apos;OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] Allowed[&apos;+allowedObservationsCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32+&apos; curObservationValue: &apos;+curObservationValue;
					if(allowedObservations.indexOf(strAllowedObservations)&lt;0) {
						allowedObservations.push(strAllowedObservations);
					} // end if 
					
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] Allowed Observations OBX.5.1 value &apos;+curObservationValue+&apos; checkDetected: &apos;+filterDetectable+&apos; ALLOW ALL Detectable values ALLOW SEGMENT: &apos;+obx);
					
				} // end if 
			
			} else {
				
				disallowedObservationsCount++;
				var strDisallowedObservations= &apos;OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] Disallowed Observations[&apos;+disallowedObservationsCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32+&apos; curObservationValue: &apos;+curObservationValue;
				if(disallowedObservations.indexOf(strDisallowedObservations)&lt;0) {
					disallowedObservations.push(strDisallowedObservations);
				} // end if 
				
				delete msg.children()[obx.childIndex()];

				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.3.1 value: &apos;+obx31+&apos; DISALLOWED Observation[&apos;+disallowedObservationsCount+&apos;] REMOVE SEGMENT: &apos;+obx);
				
			} // end if 
			j++;
			
		} // end for 
		i++;

		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR childIndex[&apos;+obrChildIndex+&apos;] allowedObservationSegments: &apos;+allowedObservationSegments); 
		
		// 2024-04-26 JER - Modified to evaluate if any allowedObservations are found - if none then remove associated OBR and SPM segments
		if(allowedObservationSegments&lt;1) {

			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;SPM&apos;,true,&apos;OBR&apos;);

			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; delete SPM getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[obrChildIndex+1]+&apos; value: &apos;+getSegment);
			delete msg.children()[obrChildIndex+1]; 
			
			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBR&apos;,false,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; delete OBR getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()]; 

			// if(debug&gt;0) 
			//logger.error(&apos;DEBUG::&apos;+scriptName+&apos; delete segment typeof: &apos;+typeof(msg.children()[obrChildIndex-1])+&apos; index: &apos;+[obrChildIndex-1]+&apos; value: &apos;+msg.children()[obrChildIndex-1]);
			// 2023-05-18 JER - msg segment children() the OBR childIndex() remove the prior segment -&gt; ORC segment
			//delete msg.children()[obrChildIndex-1];

			
		} // end if 

		// per OBR segment push into an overall list to be persisted in channelMap
		lstAllowedObservations.push(allowedObservations);
		lstDisallowedObservations.push(disallowedObservations);
		lstNonDetectedFiltered.push(nonDetectedFiltered);
		
	} // end for each

	
	if(lstAllowedObservations.length&gt;0) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; lstAllowedObservations: &apos;+lstAllowedObservations); 
		channelMap.put(&apos;arrAllowedObservations&apos;,lstAllowedObservations);
	}  // end if 
	
	if(lstDisallowedObservations.length&gt;0) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; lstDisallowedObservations: &apos;+lstDisallowedObservations);  
		channelMap.put(&apos;arrDisallowedObservations&apos;,lstDisallowedObservations); 
	} // end if 
	
	if(lstNonDetectedFiltered.length&gt;0) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; lstNonDetectedFiltered: &apos;+lstNonDetectedFiltered); 
		channelMap.put(&apos;arrNonDetectedFiltered&apos;,lstNonDetectedFiltered); 
	} // end if 

	channelMap.put(&apos;specimenDetected&apos;,detected); // true, false, invalid
	channelMap.put(&apos;modified_msg&apos;,msg);
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; specimenDetected: &apos;+$c(&apos;specimenDetected&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg: &apos;+$c(&apos;modified_msg&apos;));
	} // end if 
	
	return msg;

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>d8952806-86fd-4404-b8ed-f3bd375c9eb9</id>
            <name>Remove Observations Non Detected Results New</name>
            <revision>10</revision>
            <lastModified>
              <time>1682539562304</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Desc: Remove observations with Non-Detected Results and mark Detected to be Allowed/Filtered  

	@fileName:	remove_observations_non_detected_results_new.js
	@name:		Remove Observations Non Detected Results (New)
	@authored:	Jeffrey Ritz
	@created:		2023-02-27
	@description:	Remove observations with Non-Detected Results and mark Detected to be Allowed/Filtered

	history:
	2023-04-21 JER - Consider following https://github.com/nextgenhealthcare/connect/discussions/5244
	2023-02-27 JER - Cloned the Remove Observations From Observation Result Codes
*/
function remove_observations_non_detected_results_new(msg) {
	
	var scriptName= &apos;remove_observations_non_detected_results_new&apos;;
	var debug= 0;
	var nonDetectedFiltered= new Array();
	var nonDetectedFilteredCount= 0;
	var detected= false;
	var i= 1;
	var j= 1;
	var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);
	
	for each(seg in msg..OBR) {	
	
		for each(obx in getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBX&apos;,false,&apos;OBR&apos;)) {
			
			// process each OBX
			var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
			var obx32= obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
			var obx51= obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
			
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; child[OBX.5][OBX.5.2]: &apos;+child[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase()+&apos; length: &apos;+child[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().length);
			
			// 2023-02-27 JER - Modified from OBX.5.1 to OBX.5.2
			if(child[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().length&lt;1) {
				var curObservationValue=child[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
			} else {
				var curObservationValue=obx51.toString().toUpperCase();
			} // end if 
			
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] curObservationValue: &apos;+curObservationValue);
			
			// if(debug&gt;0) 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] typeof: &apos;+typeof(obx31)+&apos; obx31: &apos;+obx31+&apos; obx32: &apos;+obx32+&apos; obx51: &apos;+obx51+&apos; curObservationValue: &apos;+curObservationValue);
			
			// evaluate if element value is numerical exponential
			if(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains an exponential 1.00E value: &apos;+(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1));
			} // end if 
				
			// evaluate if element value is number 
			if(parseInt(curObservationValue.toString() !== &apos;NaN&apos;)) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.2 value contains IS a number: &apos;+parseInt(curObservationValue.toString()!== &apos;NaN&apos;));
			} // end if 

			// 2022-10-17 JER - Added evaluate if NaN - only 
			if((curObservationValue== &apos;DETECTED&apos;)||(curObservationValue== &apos;TRUE&apos;)||(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1)||parseInt(curObservationValue.toString()!== &apos;NaN&apos;)) {
				
				detected= true;
				//tmp.appendChild(child);
				// if(debug&gt;0) 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.1 value: &apos;+curObservationValue+&apos; DETECTED: &apos;+detected+&apos; KEEP SEGMENT: &apos;+obx);
				
			} else {
				
				nonDetectedFilteredCount++;
				var strNonDetectedFiltered= &apos;Non-Detected[&apos;+nonDetectedFilteredCount+&apos;] Observation CODE: &apos;+obx31+&apos; DESCRIPTION: &apos;+obx32;
				nonDetectedFiltered.push(strNonDetectedFiltered);
				
				delete msg.children()[obx.childIndex()];
					
				// if(debug&gt;0) 
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] OBX.5.1 value: &apos;+curObservationValue+&apos; NON-DETECTED: &apos;+detected+&apos; REMOVE SEGMENT: &apos;+obx);
				
			} // end if 	
			j++;
			
		} // end for 
		
		if(getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBX&apos;,false,&apos;OBR&apos;).length == 0) {
			// if(debug&gt;0) 
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] REMOVED related segments DELETE segment: &apos;+msg.children()[seg.childIndex()]);
			delete msg.children()[seg.childIndex()];
			
		} // end if 
		
		i++;
	} // end for each

	channelMap.put(&apos;specimenDetected&apos;,detected); // true, false, invalid
	channelMap.put(&apos;modified_msg&apos;,tmp);
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; specimenDetected: &apos;+$c(&apos;specimenDetected&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; tmp: &apos;+$c(&apos;modified_msg&apos;));
	} // end if 
	
	return tmp;

} // end function</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>7ba5e0e9-311b-494f-812f-7afa58f047fe</id>
            <name>Remove Observations Non-Detected Observation Values</name>
            <revision>1</revision>
            <lastModified>
              <time>1684206232224</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Desc:  Evaluate the OBX versus the observation (OBX) segments with removeNonDetected parameter from the message and set the pathogenDetected channelMap variable.
	
	fileName:		remove_observations_non_detected_observation_values.js
	name:		Remove Observations Non-Detected Observation Values
	authored:		Jeffrey Ritz
	created:		2023-05-10
	description:	Evaluate the OBX versus the observed result code (OBX-3.4) evaluated against Configuration Setting variable: TNRemoveObservations
	to determine whether to exclude the Observation Results (OBX) segments from the message. 
	history:
	2023-04-18 JER - Cloned the pre-existing remove_observations_from_observation_result_codes 
*/
function remove_observations_non_detected_observation_values(msg, removeNonDetected) {
	
	var scriptName= &apos;remove_observations_non_detected_observation_values&apos;;
	var debug= 0;
	var detected= false;
	var pathogenDetected= false;
	
	// allowedObservations
	var allowedObservationsCount= 0;
	var allowedObservations= new Array();
	
	// removedObservations
	var removedObservationsCount= 0;
	var removedObservations= new Array();
	if(typeof(removeNonDetected)== undefined) var removeNonDetected= 0;
	
	var i= 1;
	var j= 1;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; removeObservations: &apos;+removeObservations); 

	// var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);
	

	for each(seg in msg..OBR) {
	
		var perSegAllowedObservationSegments= 0;
		
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof: &apos;+typeof(seg)+&apos; seg[&apos;+j+&apos;]: &apos;+seg);
	
		var allowedObservationSegments= 0;
		for each(obx in getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBX&apos;,false,&apos;OBR&apos;)) {
			
			// process each OBX
			var obx21= obx[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString;
			var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
			var obx32= obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
			var obx34= obx[&apos;OBX.3&apos;][&apos;OBX.3.4&apos;].toString();
			var obx51= obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();
			
			// 2023-02-27 JER - Modified from OBX.5.1 to OBX.5.2
			if(obx[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString()== &apos;CWE&apos;) {
				var observationCode= obx34;
				var curObservationValue=	obx[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
			} else {
				var observationCode= obx31;
				var curObservationValue=	obx51.toString().toUpperCase();
			} // end if
						
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+j+&apos;] observationCode: &apos;+observationCode+&apos; obx31: &apos;+obx31+&apos; obx32: &apos;+obx32+&apos; obx51: &apos;+obx51+&apos; curObservationValue: &apos;+curObservationValue);
			
			//if(debug&gt;0) { 
				// logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] curObservationValue: &apos;+curObservationValue);
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] observationCode: &apos;+observationCode+&apos; removeObservations: &apos;+removeObservations+&apos; EVAL: &apos;+removeObservations.indexOf(observationCode));
			//}
			

			// 2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] FOUND Observation Code: &apos;+observationCode+&apos; value: &apos;+curObservationValue+&apos; from the list of codes: &apos;+removeObservations+&apos; evaluation: &apos;+removeObservations.indexOf(observationCode)+&apos; to ADD this observation OBX Segment.&apos;); 
			
			// 2023-04-26 JER - Evaluate if allowing either Detected or Non-Detected values
			if(removeNonDetected&gt;0) {
				
				if(curObservationValue.indexOf(&apos;NOT DETECTED&apos;)&gt;-1) {
					removedObservationsCount++;
					var strObservationCode= observationCode+&apos;:&apos;+curObservationValue;
					var strRemovedObservations= &apos;Filtered Observation[&apos;+removedObservationsCount+&apos;] Observation CODE: &apos;+observationCode+&apos; DESCRIPTION: &apos;+obx32+&apos; obx34: &apos;+obx34+&apos; curObservationValue: &apos;+curObservationValue+&apos;\t\r\n&apos;;
					removedObservations.push(strObservationCode);
						
					delete msg.children()[obx.childIndex()];
						
					// if(debug&gt;0) 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; REMOVE removable Non-Detected observation CODE: &apos;+observationCode+&apos; removeNonDetected: &apos;+removeNonDetected+&apos; removeObservations[&apos;+removedObservationsCount+&apos;] removedObservations:&apos; +strRemovedObservations);
				} else {
					pathogenDetected= true;
						
					perSegAllowedObservationSegments++;
					allowedObservationsCount++;
					var strObservationCode= observationCode+&apos;:&apos;+curObservationValue;
					var strAllowedObservations= &apos;Allowed Observations[&apos;+allowedObservationsCount+&apos;] Observation CODE: &apos;+observationCode+&apos; DESCRIPTION: &apos;+obx32+ &apos;obx34: &apos;+obx34;
					allowedObservations.push(strObservationCode);
					
					// if(debug&gt;0) 
					logger.error(&apos;DEBUG::&apos;+scriptName+&apos; PERMITTED removable Detected observation CODE: &apos;+observationCode+&apos; removeNonDetected: &apos;+removeNonDetected+&apos; allowedObservations[&apos;+allowedObservationsCount+&apos;] allowObservations:&apos; +strAllowedObservations);
				} // end if 
			
			} // end if 
			j++;
			
		} // end for 
		i++;
		
		// 2024-04-26 JER - Modified to evaluate if any allowedObservations are found - if none then remove associated OBR and SPM segments
		if(perSegAllowedObservationSegments&lt;1) {

			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;SPM&apos;,true,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;TEST::&apos;+scriptName+&apos; SPM getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()+1]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()+1]; 

			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBR&apos;,false,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;TEST::&apos;+scriptName+&apos; OBR getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()]; 
			
		} // end if 
		
	} // end for each

	channelMap.put(&apos;allowedObservations&apos;,allowedObservations);
	channelMap.put(&apos;removedObservations&apos;,removedObservations);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; allowedObservations: &apos;+allowedObservations);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; removedObservations: &apos;+removedObservations);
	} // end if 
	
	channelMap.put(&apos;pathogenDetected&apos;,pathogenDetected); // true, false, invalid
	channelMap.put(&apos;modified_msg&apos;,msg);
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; pathogenDetected: &apos;+$c(&apos;pathogenDetected&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg: &apos;+$c(&apos;modified_msg&apos;));
	} // end if 
	
	return msg;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>9b90804b-36fb-4199-9584-7cc94b798c26</id>
            <name>Remove Observations Non-Detected Results</name>
            <revision>14</revision>
            <lastModified>
              <time>1684206232088</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Desc: Remove observations with Non-Detected Results and mark Detected to be Allowed/Filtered  

	@fileName:	remove_observations_non_detected_results.js
	@name:		Remove Observations Non Detected Results
	@authored:	Jeffrey Ritz
	@created:		2023-02-27
	@description:	Remove observations with Non-Detected Results and mark Detected to be Allowed/Filtered

	history:
	2023-02-27 JER - Cloned the Remove Observations From Observation Result Codes
*/
function remove_observations_non_detected_results(msg) {
	
	var scriptName= &apos;remove_observations_non_detected_results&apos;;
	var debug= 0;
	var detected= false;
	var i= 1;
	var j= 1;
	var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);
	
	// for each segment - child per msg.children()
	for each(child in msg.children()) {
	
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof: &apos;+typeof(child)+&apos; localName: &apos;+child.localName()+&apos; child: &apos;+child);
	
		if(child.localName()== &apos;OBX&apos;) {
		
			// process each OBX
			var obx31= child[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
			
			if(debug&gt;0) {
				logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;] typeof: &apos;+typeof(obx31)+&apos; obx31: &apos;+obx31);
			}
			
			// 2023-02-27 JER - Modified from OBX.5.1 to OBX.5.2
			var curObservationValue=child[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
				
			// evaluate if element value is numerical exponential
			if(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; determined value contains an exponential 1.00E value: &apos;+(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1));
			}
				
			// evaluate if element value is number 
			if(parseInt(curObservationValue.toString() !== &apos;NaN&apos;)) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; determined value contains IS a number: &apos;+parseInt(curObservationValue.toString()!== &apos;NaN&apos;));
			}
	
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+i+&apos;].5.1 curObservationValue: &apos;+curObservationValue);
				
			// 2022-10-17 JER - Added evaluate if NaN - only 
			if((curObservationValue== &apos;DETECTED&apos;)||(curObservationValue== &apos;TRUE&apos;)||(curObservationValue.toString().indexOf(&apos;1.00E&apos;)&gt;-1)||parseInt(curObservationValue.toString()!== &apos;NaN&apos;)) {
				detected= true;
				// tmp appended child object from msg.children()
				// 2023-02-24 JER - Modified to use appendChild E4X denoted XML function
				// tmp+= child;
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] determined value CONTAINS: &apos;+curObservationValue+&apos; value - adding this segment.&apos;);
				tmp.appendChild(child);
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] ADD SEGMENT: &apos;+child.localName());
			} else {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] determined value CONTAINS: &apos;+curObservationValue+&apos; value is a Non-Detected or an Un-expected value - skipping this segment.&apos;);
			} // end if 	
			i++;
		} else {
			// 2023-02-24 JER - Modified to use appendChild E4X denoted XML function
			// tmp+= child;
			tmp.appendChild(child);
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; [&apos;+i+&apos;] ADD SEGMENT: &apos;+child.localName());
		} // end for
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; tmp[&apos;+j+&apos;] contains: &apos;+tmp);
		j++;
	} // end for
	
	channelMap.put(&apos;specimenDetected&apos;,detected); // true, false, invalid
	channelMap.put(&apos;modified_msg&apos;,tmp);
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; specimenDetected: &apos;+$c(&apos;specimenDetected&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; tmp: &apos;+$c(&apos;modified_msg&apos;));
	} // end if 
	
	return tmp;
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>cd97709d-5752-447a-b5c0-c49d7f0f9f06</id>
            <name>Remove Observations Using Observation Result Codes</name>
            <revision>3</revision>
            <lastModified>
              <time>1690570753987</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
Desc:  Evaluate the OBX versus the observed result code (OBX-3.1) evaluated against Configuration Setting variable: ADPHNotifiablePathogens to determine whether to exclude the Observation Results (OBX) segments from the message and set the pathogenDetected channelMap variable.
	
	fileName:		remove_observations_using_observation_result_codes.js
	name:			Remove Observations Using Observation Result Codes
	@authored:		Jeffrey Ritz
	@created:		2023-02-27
	@description:	Remove observations with Non-Detected Results and mark Detected to be Allowed/Filtered

	history:
	2023-07-27 JER - Modified to include isCovid boolean argument to determine how to set the observationCode and observationValue
	2023-04-26 JER - Modified to determine if should evaluate detectable or not
	2023-04-21 JER - Consider following https://github.com/nextgenhealthcare/connect/discussions/5244
	2023-02-27 JER - Cloned the Remove Observations From Observation Result Codes
*/
function remove_observations_using_observation_result_codes(msg, allowedObservationCodeList, isCovid) {
	
	var scriptName= &apos;remove_observations_using_observation_result_codes&apos;;
	var debug= 0;
	var detected= false;
	
	// Disallowed Observations Filtered List
	var disallowedObservationsCount= 0;
	var disallowedObservations= new Array();
	
	// Allowed Observations Filtered List
	var allowedObservationsCount= 0;
	var allowedObservations= new Array();
	
	var i= 1;
	var j= 1;
	var observationsFiltered = new Array();
	var observationsFilteredCount= 0;
	// var tmp= new XML(&apos;&lt;HL7Message&gt;&lt;/HL7Message&gt;&apos;);
	var channelName = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance().getDeployedChannelById(channelId).getName();
	channelMap.put(&apos;channelName&apos;,channelName);

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; allowedObservationCodeList: &apos;+allowedObservationCodeList);
	
	for each(seg in msg..OBR) {	
	
		if(debug&gt;0) logger.error(&apos;TEST::&apos;+scriptName+&apos; seg[&apos;+j+&apos;]: &apos;+seg);
	
		var allowedObservationSegments= 0;
		for each(obx in getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBX&apos;,false,&apos;OBR&apos;)) {

			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+channelName+&apos;:&apos;+scriptName+&apos; obx: &apos;+obx);

			var obx32= obx[&apos;OBX.3&apos;][&apos;OBX.3.2&apos;].toString();
			var obx51= obx[&apos;OBX.5&apos;][&apos;OBX.5.1&apos;].toString();

			if(typeof(isCovid)!== undefined) {
				if(isCovid== true) {
					
					var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
					var observationCode=  obx31;
					var observationValue= obx[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
				
				} else {
					// process each OBX
					if(obx[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString()== &apos;CWE&apos;) {
						var obx34= obx[&apos;OBX.3&apos;][&apos;OBX.3.4&apos;].toString();
						var observationCode=  obx34;
						var observationValue= obx[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
					} else {
						var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
						var observationCode=  obx31;
						var observationValue= obx51.toString().toUpperCase();
					} // end if
				} // end if 

			} else {
				// process each OBX
				if(obx[&apos;OBX.2&apos;][&apos;OBX.2.1&apos;].toString()== &apos;CWE&apos;) {
					var obx34= obx[&apos;OBX.3&apos;][&apos;OBX.3.4&apos;].toString();
					var observationCode=  obx34;
					var observationValue= obx[&apos;OBX.5&apos;][&apos;OBX.5.2&apos;].toString().toUpperCase();
				} else {
					var obx31= obx[&apos;OBX.3&apos;][&apos;OBX.3.1&apos;].toString();
					var observationCode=  obx31;
					var observationValue= obx51.toString().toUpperCase();
				} // end if
			} // end if 
			
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBX[&apos;+j+&apos;] observationCode: &apos;+observationCode+&apos; observationValue: &apos;+observationValue+&apos; Eval: &apos;+allowedObservationCodeList.indexOf(observationCode)+&apos; allowedObservationCodeList: &apos;+allowedObservationCodeList);
			
			// 2024-02-24 JER - Modified to leverage the function input parameterized variable orderCodeList to replace hardCoded configuration setting variable
			if(allowedObservationCodeList.indexOf(observationCode)&gt;-1) {	

				allowedObservationsCount++;
				detected= true;
				var logText= &apos;observationCode: &apos;+observationCode+&apos; observationValue: &apos;+observationValue;
				var strAllowedObservation= &apos;Allowed[&apos;+allowedObservationsCount+&apos;] &apos;+logText;
				allowedObservations.push(strAllowedObservation);
				allowedObservationSegments++;

				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] ALLOWED logText: &apos;+logText+&apos; DETECTED: &apos;+detected+&apos; KEEP SEGMENT: &apos;+obx);
			
			} else {
				
				disallowedObservationsCount++;
				var logText= &apos;observationCode: &apos;+observationCode+&apos; observationValue: &apos;+observationValue;
				var strDisallowedObservation= &apos;Disallowed[&apos;+disallowedObservationsCount+&apos;] &apos;+logText;
				disallowedObservations.push(strDisallowedObservation);

				delete msg.children()[obx.childIndex()];
					
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; OBR[&apos;+i+&apos;]OBX[&apos;+j+&apos;] DISALLOWED logText: &apos;+logText+&apos; DETECTED: &apos;+detected+&apos; REMOVE SEGMENT: &apos;+obx);
				
			} // end if 
			j++;
			
		} // end for 
		i++;

		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; allowedObservationSegments: &apos;+allowedObservationSegments);
		
		// 2024-04-26 JER - Modified to evaluate if any allowedObservations are found - if none then remove associated OBR and SPM segments
		if(allowedObservationSegments&lt;1) {

			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;SPM&apos;,true,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;TEST::&apos;+scriptName+&apos; SPM getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()+1]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()+1]; 

			var getSegment= getSegmentsAfter(msg, msg.children()[seg.childIndex()],&apos;OBR&apos;,false,&apos;OBR&apos;);
			if(debug&gt;0) logger.error(&apos;TEST::&apos;+scriptName+&apos; OBR getSegment typeof: &apos;+typeof(getSegment)+&apos; index: &apos;+[seg.childIndex()]+&apos; value: &apos;+getSegment);
			delete msg.children()[seg.childIndex()]; 
			
		} // end if 
		
	} // end for each

	channelMap.put(&apos;specimenDetected&apos;,detected); // true, false, invalid
	channelMap.put(&apos;modified_msg&apos;,msg);

	channelMap.put(&apos;obsvDisallowedObservations&apos;,disallowedObservations);
	channelMap.put(&apos;obsvAllowedObservations&apos;,allowedObservations);
	
	
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; specimenDetected: &apos;+$c(&apos;specimenDetected&apos;));
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg: &apos;+$c(&apos;modified_msg&apos;));
	} // end if 
	
	return msg;

} // end function</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>a5f6198b-5582-4183-be32-759a1508f7b6</id>
            <name>write_msg_to_disk</name>
            <revision>18</revision>
            <lastModified>
              <time>1666983371379</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	This script is used to write a message to a local system destination folder

	@param {String} arg1 - arg1 description
	@return {String} return description
	e.g., write_msg_to_disk($(&apos;rawhl7&apos;),api_error_directory,$(&apos;ark_uuid&apos;));
	History:
	2022-10-28 JER - Modified to make destinationFile String() and then modify FileUtils.write using java.lang.String, boolean, java.lang.String corresponding to 
	public static void write(java.lang.String fileName,boolean append,java.lang.String data)
	https://javadocs.mirthcorp.com/connect/3.12.0/user-api/com/mirth/connect/server/userutil/FileUtil.html
*/
function write_msg_to_disk(msg, destinationFileDirectory, uuid) {

	var scriptName= &apos;write_msg_to_disk&apos;;
	var debug= 0;

	try {
		var destinationFilename= uuid+&apos;.err&apos;;
		var error_hl7_msg= msg;
		var destinationFile= destinationFileDirectory+&apos;\\&apos;+destinationFilename;

		if(debug&gt;0) {
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; destinationFileDirectory: &apos;+destinationFileDirectory);
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; destinationFilename: &apos;+destinationFilename);
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; error_hl7_msg: &apos;+error_hl7_msg);
		} // end if 
		
		// org.apache.commons.io.FileUtils.write(new java.io.File(destinationFileDirectory+&apos;\\&apos;+destinationFilename),false,error_hl7_msg);
		// org.apache.commons.io.FileUtils.write(String(destinationFile),boolean(false),String(error_hl7_msg));
		FileUtil.write(java.lang.String(destinationFile),false,java.lang.String(error_hl7_msg));
		
		return true;
	
	} catch (e) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; ERROR: &apos;+e);
		return false;
	} // end try
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>e9723fd9-6316-42f1-bc83-ad658b2abc7c</id>
            <name>write_msg_to_file</name>
            <revision>2</revision>
            <lastModified>
              <time>1670428915677</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	This script is used to write a message to a destination file providing both a destination folder and the fileName
	
	@param {String} args: 	msg - java.lang.String
							destinationFilename - java.lang.String
							destinationFileDirectory - java.lang.stringify
							append - java.lang.Boolean
							debug - java.lang.Boolean
	@return {boolean} - 	java.lang.boolean;  FileUtil.write success (return true|false)
	Desc:   If append parameter is not provided or has no value the default action is to overwrite the provided file.
	e.g., write_msg_to_file($(&apos;raw&apos;),destinationFilename, destinationFileDirectory);
	History:
	2022-12-06 JER - Modified to include the append and debug parameter arguments to designate whether to overwrite (append= false) or append (append= true) or required to leverage debug statements (debug= true|false)
	2022-10-28 JER - Modified to make destinationFile String() and then modify FileUtils.write using java.lang.String, boolean, java.lang.String corresponding to 
	public static void write(java.lang.String fileName,boolean append,java.lang.String data)
	http://javadocs.mirthcorp.com/connect/3.9.0/user-api/com/mirth/connect/server/userutil/FileUtil.html
*/
function write_msg_to_file(msg, destinationFilename, destinationFileDirectory, append, debug) {

	var scriptName= &apos;write_msg_to_file&apos;;
	if((typeof(debug)== &apos;undefined&apos;)||(debug.toString.length&lt;1)) {
		var debug= false;
	}
	if((typeof(append)== &apos;undefined&apos;)||(append.toString().length&lt;1)) {
		var append= false;  // default overwrite
	} // end if 
	
	try {
		// var destinationFilename= uuid+&apos;.err&apos;;
		var error_msg= msg;
		var destinationFile= destinationFileDirectory+&apos;\\&apos;+destinationFilename;

		if(debug&gt;0) {
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; destinationFileDirectory: &apos;+destinationFileDirectory);
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; destinationFilename: &apos;+destinationFilename);
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; error_msg: &apos;+error_msg);
			logger.error(&apos;DEBUG::&apos;+scriptName+&apos; append: &apos;+append);
		} // end if 
		
		// org.apache.commons.io.FileUtils.write(new java.io.File(destinationFileDirectory+&apos;\\&apos;+destinationFilename),false,error_msg);
		// org.apache.commons.io.FileUtils.write(String(destinationFile),boolean(false),String(error_msg));
		
		// 2022-12-07 JER - Modified to leverage the append parameterized variable
		// com.mirth.connect.server.userutil.FileUtil.write(java.lang.String(destinationFile),false,java.lang.String(error_msg));
		FileUtil.write(java.lang.String(destinationFile),append,java.lang.String(error_msg));
		return true;
	
	} catch (e) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; ERROR: &apos;+e);
		return false;
	} // end try
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.0.0">
        <id>0e6800ae-6d84-4245-9e09-2c1a2f28d8fc</id>
        <name>WebPT-Common</name>
        <revision>2</revision>
        <lastModified>
          <time>1678715257049</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>3792b059-e098-436c-81fe-23502ef5042b</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="4.0.0">
            <id>43f73dbc-f73d-4178-9aa0-b451c05922e2</id>
            <name>Check if String contains</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122790</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>COMPILED_CODE</type>
              <code>/**
	To verify if one string (source) contains another string (target).

	@param {String} arg1 - target string to lookup in the source string
	@return {String} return true if the source string contains the target string
*/
String.prototype.contains = function(arg1) {
	
	return this.indexOf(arg1) &gt; -1;
		
};</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>6a420042-a38d-4d6b-8567-d0290086256a</id>
            <name>Check if String contains HTTP code</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122593</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>COMPILED_CODE</type>
              <code>/**
	To verify if the given string contains HTTP status code.

	@param - no parameter
	@return {String} return true if the string contains the HTTP status code, false otherwise
*/

function isHttpCode2xx(arg1) {
	var code2xx = [&apos;200&apos;,&apos;201&apos;,&apos;202&apos;,&apos;203&apos;,&apos;204&apos;,&apos;205&apos;,&apos;206&apos;,&apos;207&apos;,&apos;208&apos;];	
	var length = code2xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code2xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode4xx(arg1) {
	var code4xx = [&apos;400&apos;,&apos;401&apos;,&apos;402&apos;,&apos;403&apos;,&apos;404&apos;,&apos;405&apos;,&apos;406&apos;,&apos;407&apos;,&apos;408&apos;,&apos;409&apos;,&apos;410&apos;,&apos;411&apos;,&apos;412&apos;,&apos;413&apos;,&apos;414&apos;,&apos;415&apos;,&apos;416&apos;,&apos;417&apos;,&apos;429&apos;,&apos;431&apos;,&apos;451&apos;];	
	var length = code4xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code4xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}

function isHttpCode5xx(arg1) {
	var code5xx = [&apos;500&apos;,&apos;501&apos;,&apos;502&apos;,&apos;503&apos;,&apos;504&apos;,&apos;505&apos;,&apos;506&apos;,&apos;510&apos;,&apos;511&apos;];	
	var length = code5xx.length;
	
	while(length--) {
   		if (arg1.indexOf(code5xx[length]) &gt; -1) {
       		return true;
   		}   		
	}
	return false;
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>8515e088-5c50-47ee-9e2f-9fad1ecf48bd</id>
            <name>Check if String is JSON</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123309</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Added by Kirby Knight
	12/21/2020
	Test for JSON

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function isJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>5f2f84ba-3e66-4be3-8260-8fbd8258bd92</id>
            <name>Check if the PDF is valid</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122055</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
//This function is used for checking the word &quot;PDF&quot; in inbound attachment.
function isValidBase64PDF(base64) {
	const ENCODED_PDF_SIGN = &quot;JVBERi&quot;; // %PDF sign
	const PDF_EOF = &quot;JSVFT0YNCg&quot;; // %EOF
	var pdfBase64Size = (base64.length() * (3 / 4)) - 1;
	
	return (base64.indexOf(ENCODED_PDF_SIGN) != -1 &amp;&amp; base64.indexOf(PDF_EOF) != -1 &amp;&amp; pdf_base64_size &gt; 36);
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>42dbc1c3-72e4-4ece-a6b8-5cd188446027</id>
            <name>Convert JSON date to HL7v2 date</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122137</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	To convert JSON date/time format to HL7v2 date only format.

	@param {String} datetime - JSON date/time (yyyy-MM-ddThh:mm:ss.sss-00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 date (yyyyMMdd)
*/
function convertToHL7v2Date(datetime) { 

	var date = datetime.toString().match(/\d{4}\-\d{2}\-\d{2}/);
	return ((date.length &gt; 0) ? date[0].replace(/\-/g,&apos;&apos;) : date.replace(/\-/g,&apos;&apos;));
	
};</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>5b60cf28-571b-4aa8-94fe-d3cdf069471b</id>
            <name>Convert JSON datetime to HL7v2 datetime</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122430</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	To convert JSON date/time format to HL7v2 date only format.
	Possible formats:
	&quot;2016-01-01T00:00:00.000Z&quot;	JavaScript built-in JSON object
	&quot;2016-01-01T00:00:00-00:00&quot;	ISO 8601

	@param {String} datetime - JSON date/time with offset (yyyy-MM-ddThh:mm:ss.sss-/+00:00) or (yyyy-MM-dd)
	@return {String} return HL7v2 DTM date type
*/
function convertToHL7v2DateTime(datetime) { 

	var date = [];
	var hl7Date = &quot;&quot;;
	var timeZome = &quot;&quot;;

	if (datetime.indexOf(&quot;T&quot;) &gt; -1) {

		var zone = datetime.toString().slice(datetime.indexOf(&quot;T&quot;) + 1);
		if (zone.indexOf(&quot;+&quot;) &gt; 0) timeZone = &quot;+&quot;;
		if (zone.indexOf(&quot;-&quot;) &gt; 0) timeZone = &quot;-&quot;;

		if (datetime.indexOf(&quot;Z&quot;) &gt; 0) {
			date = datetime.toString().split(/\-|\+|T|:|\./g);
		} else {
			date = datetime.toString().split(/\-|\+|T|:/g);
		}
		
		for (var i=0; i &lt; 6; i++) {			
			hl7Date += date[i]; 
		}
		
		var offset = date.slice(6);
		for (var i=0; i &lt; offset.length; i++) {
			timeZone += offset[i];
		}

		return hl7Date + timeZone;

	} else {
		return convertToHL7v2Date(datetime);
	}
};</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>bb21449a-df39-48c6-be52-24106c8df4c4</id>
            <name>Destination Formatting</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122703</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Kirby Knight 03/10/2021
	
	This function will remove all other ROOT.Meta.Destinations nodes that are not passed in the
	destination variable and removes the ROOT.Meta.Destinations[x].Destination node

	@param {Any} destination - 
	@return {String} return description
*/
function formatDestinations(destination) {
var arrDestinations = msg[&apos;Meta&apos;][&apos;Destinations&apos;];
	//  Start at the end of the array because of the posibility of deleted array items 
	for (var i = arrDestinations.length - 1; i &gt;= 0; i--) {
		if (arrDestinations[i][&apos;Destination&apos;] == destination){
			delete arrDestinations[i][&apos;Destination&apos;]
		}else if (arrDestinations[i][&apos;Destination&apos;] != destination){
			arrDestinations.splice(i, 1);
		}
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>d014f2fc-cf80-47ad-9de8-6c84807e2f70</id>
            <name>Extract JSON node data</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121748</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Validates if node is not NULL or &quot;undefined&quot;. If the given node is an array, return a string of values.

	@param {String} node - node to extract the data from
	@return {String} return given node value or empty string if such node does not exist
*/
function extract(node) {

	try {
		var result = &quot;&quot;;

		if (null == node) return result;
		
		if ((typeof node) !== &quot;undefined&quot;) {

			if (Object.prototype.toString.call(node) === &apos;[object Array]&apos;) {
				result = org.apache.commons.lang3.StringUtils.join(node, &quot; &quot;)
			} else 
				result = node;
		}
	} finally {
		return result.toString().trim();
	}
}

</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>7ed44f8a-fa40-4f3e-9426-3021604eabe0</id>
            <name>Get Feature Value by Name and Database</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123262</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Returns a string containing the feature value (system property) for a specific client database.

	@param {String} featureName - name of the feature, ie: &quot;BetterPTBidirectionalScheduling&quot;
	@param {String} databaseIdentifier - database name or databaseID / TenantID
	@param {String} databaseIdentifierType - what value is provided in databaseIdentifier. current options include &quot;ID&quot; or &quot;NAME&quot;
	@return {String} returns feature value
*/
function getFeatureValueByNameDatabase(featureName, databaseIdentifier, databaseIdentifierType) {
	var paramList = new Packages.java.util.ArrayList();
	paramList.add(featureName);
	paramList.add(databaseIdentifier);
	paramList.add(databaseIdentifierType);
	
	var sSQL = &apos;EXEC [dbo].[pr_FeatureValueByNameDatabase] ?, ?, ?&apos;;
	
	try {
		var result = executeSharedDBStatementFhirCh(sSQL, true, paramList);
		var featureValue ;
		if(result.next()){			//Added
		 featureValue = result.getString(1);
		}
		return featureValue;
	} catch (e) {
		logger.error(e);
	}
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>9842be2c-c633-42ac-87f1-f91aca9e370f</id>
            <name>JSON Patient IDs</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121776</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	This function populates the MR and PI patient IDS to channelMap

	@return {String} return description
*/
function jsonPatientIds() {
	for each (patId in msg[&apos;Patient&apos;][&apos;Identifiers&apos;]) {
	if (patId[&apos;IDType&apos;].toString() == &apos;MR&apos;){
		channelMap.put(&apos;extPatId&apos;, patId[&apos;ID&apos;].toString());
	}else if(patId[&apos;IDType&apos;].toString() == &apos;PI&apos;){
		channelMap.put(&apos;patId&apos;, patId[&apos;ID&apos;].toString());
	}
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>a3f85cc2-9b95-45a9-9cb1-937197e09cdc</id>
            <name>Verify JSON node for existance</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122542</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Verify if the given node exists.

	@param {String} node - node to verify for existance
	@return {String} return true if the given node exists, false otherwise
*/
function keyExists(node) {
	return ( ((typeof node) !== &quot;undefined&quot;) &amp;&amp; ((typeof node) !== null) );
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.0.0">
        <id>394664c0-d536-4310-970e-181dc03ee7da</id>
        <name>WebPT-Conversions</name>
        <revision>2</revision>
        <lastModified>
          <time>1690140133427</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
          <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
          <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
          <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
          <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
          <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
          <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
          <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
          <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
          <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
          <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
          <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
          <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
          <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
          <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
          <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
          <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
          <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
          <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
          <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
          <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
          <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
          <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
          <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
          <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
          <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
          <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
          <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
          <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
          <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
          <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
          <string>72383579-097e-4205-b030-ce272c90b835</string>
          <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
          <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
          <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
          <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
          <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
          <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
          <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
          <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
          <string>3792b059-e098-436c-81fe-23502ef5042b</string>
          <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
          <string>a757905f-315a-43be-a624-38780a3d7574</string>
          <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
          <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
          <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
          <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
          <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
          <string>38e80069-5a80-4483-9a22-02c928973719</string>
          <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
          <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
          <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
          <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
          <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
          <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
          <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
          <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
          <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
          <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
          <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
          <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
          <string>c65024ed-4660-4423-9636-cb6309cae138</string>
          <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
          <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
          <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
          <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
          <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
          <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
          <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
          <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
          <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
          <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
          <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
          <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
          <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
          <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
          <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
          <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
          <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
          <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
          <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
          <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
          <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
          <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
          <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="4.0.0">
            <id>3a388aa0-c0ba-460c-b790-1c42c081c84d</id>
            <name>Convert FHIR codes to HL7v2 codes</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122899</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Map FHIR codes to corresponding HL7v2.6 codes using the Table number.

	@param {String} FhirCode - FHIR code
	@param {String} tableName - HL7v2.6 Table Name	
	@return {String} return corresponsing HL7v2.6 code if known or &quot;Unknown&quot; result
*/
function convertToHL7v2Table(FhirCode,tableNumber) {

	var code = &apos;&apos;;
	if (&apos;undefined&apos; !== typeof FhirCode &amp;&amp; null !== FhirCode) {
		code = FhirCode.toString().toLowerCase();	
	}
	

	switch(tableNumber) {
		case &quot;0001&quot;:
			if (&apos;female&apos; == code || &apos;f&apos; == code) return &apos;F&apos;; else
			if (&apos;male&apos; == code || &apos;m&apos; == code) return &apos;M&apos;; else
			if (&apos;other&apos; == code) return &apos;O&apos;; else
			return &apos;U&apos;; 			
		break;

		case &quot;0004&quot;:
			// http://hl7.org/fhir/encounter-class
			if (&apos;emergency&apos; == code) return &apos;E&apos;; else				
			if (&apos;inpatient&apos; == code) return &apos;I&apos;; else
			if (&apos;outpatient&apos; == code) return &apos;O&apos;; else
			return &quot;U&quot;;
		break;

		case &quot;0190&quot;:
			// http://hl7.org/fhir/ValueSet/address-type
			if (&apos;postal&apos; == code) return &apos;H&apos;; else				
			if (&apos;physical&apos; == code) return &apos;P&apos;; else
			if (&apos;both&apos; == code) return &apos;H&apos;; else
			return &quot;M&quot;;
		break;		

		case &quot;0201&quot;:
			// http://hl7.org/fhir/ValueSet/contact-point-use
			if (&apos;home&apos; == code) return &apos;PRN&apos;; else				
			if (&apos;work&apos; == code) return &apos;WPN&apos;; else
			if (&apos;mobile&apos; == code) return &apos;PRS&apos;; else
			if (&apos;temp&apos; == code) return &apos;TMP&apos;; else			
			if (&apos;old&apos; == code) return &apos;OLD&apos;; else
			return &quot;PRN&quot;;
		break;	

		case &quot;0202&quot;:
			// http://hl7.org/fhir/contact-point-system
			if (&apos;phone&apos; == code) return &apos;PH&apos;; else				
			if (&apos;fax&apos; == code) return &apos;FX&apos;; else
			if (&apos;pager&apos; == code) return &apos;BP&apos;; else
			if (&apos;email&apos; == code) return &apos;Internet&apos;; else
			return &quot;PH&quot;;
		break;	

		case &quot;0063&quot;:
			// http://hl7.org/fhir/ValueSet/patient-contact-relationship
			// (SN) Partial list
			if (&apos;parent&apos; == code) return &apos;PAR&apos;; else
			if (&apos;MTH&apos; == code) return &apos;MTH&apos;; else
			if (&apos;FTH&apos; == code) return &apos;FTH&apos;; else	
			if (&apos;caregiver&apos; == code) return &apos;CGV&apos;; else
			if (&apos;SPS&apos; == code) return &apos;SPO&apos;; else
			if (&apos;CHILD&apos; == code) return &apos;CHD&apos;; else
			if (&apos;GRNDCHILD&apos; == code) return &apos;GCH&apos;; else
			if (&apos;GRPRN&apos; == code) return &apos;GRP&apos;; else
			if (&apos;SIB&apos; == code) return &apos;SIB&apos;; else
			if (&apos;BRO&apos; == code) return &apos;BRO&apos;; else
			if (&apos;SIS&apos; == code) return &apos;SIS&apos;; else
			if (&apos;friend&apos; == code) return &apos;FND&apos;; else
			if (&apos;ONESELF&apos; == code) return &apos;SEL&apos;; else
			if (&apos;emergency&apos; == code) return &apos;EMC&apos;; else
			return &apos;UNK&apos;;		
		break;
		default:
			return &apos;U&apos;;
	}


}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.0.0">
        <id>2fc8cbf3-0d92-4d1d-a3d6-136c09bd9f2a</id>
        <name>WebPT-Custom Database Functions</name>
        <revision>5</revision>
        <lastModified>
          <time>1703964939898</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
          <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
          <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
          <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
          <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
          <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
          <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
          <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
          <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
          <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
          <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
          <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
          <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
          <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
          <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
          <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
          <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
          <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
          <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
          <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
          <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
          <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
          <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
          <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
          <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
          <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
          <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
          <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
          <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
          <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
          <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
          <string>72383579-097e-4205-b030-ce272c90b835</string>
          <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
          <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
          <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
          <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
          <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
          <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
          <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
          <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
          <string>3792b059-e098-436c-81fe-23502ef5042b</string>
          <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
          <string>a757905f-315a-43be-a624-38780a3d7574</string>
          <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
          <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
          <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
          <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
          <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
          <string>38e80069-5a80-4483-9a22-02c928973719</string>
          <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
          <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
          <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
          <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
          <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
          <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
          <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
          <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
          <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
          <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
          <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
          <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
          <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
          <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
          <string>c65024ed-4660-4423-9636-cb6309cae138</string>
          <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
          <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
          <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
          <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
          <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
          <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
          <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
          <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
          <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
          <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
          <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
          <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
          <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
          <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
          <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
          <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
          <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
          <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
          <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
          <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
          <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
          <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
          <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
          <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
          <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
          <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="4.0.0">
            <id>23c0b510-63e4-40fa-a4e1-7b2b92ce9a96</id>
            <name>Execute Statement Shared DB Conn clientDb Ch</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122401</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
Executes a SQL statement using a shared database connection stored in the Global Map. If the
connection does not exist, creates it.

@param {String} statement - The SQL statement to execute
@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
@param {List} paramList - A Java List object containing the parameters for the statement (optional)
 */
function executeSharedDBStatementclientDbCh(statement, isQuery, paramList) {
    var result;

    try {
        var dbConnclientDbCh = globalChannelMap.get(&quot;dbConnclientDbCh&quot;);

        if (dbConnclientDbCh == null || dbConnclientDbCh.getConnection().isClosed()) {
            dbConnclientDbCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;), $(&apos;dbClient&apos;), $(&apos;dbUserFhir&apos;), $(&apos;dbPwFhir&apos;));
            globalChannelMap.put(&quot;dbConnclientDbCh&quot;, dbConnclientDbCh);
        }

        if (paramList == undefined) {
            paramList = new Packages.java.util.ArrayList();
        }

        if (isQuery) {
            result = dbConnclientDbCh.executeCachedQuery(statement, paramList);
        } else {
            result = dbConnclientDbCh.executeUpdate(statement, paramList);
        }
    } catch (e) {
        logger.error(e);
    }
    finally {
        return result;
    }
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>4efb3110-a83f-48b5-93ad-79c847b51865</id>
            <name>Execute Statement Shared DB Conn clntAcl Ch</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123455</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClntAclCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnClntAclCh = globalChannelMap.get(&quot;dbConnClntAclCh&quot;);

		if (dbConnClntAclCh == null || dbConnClntAclCh.getConnection().isClosed())
		{
			dbConnClntAclCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbClntAcl&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnClntAclCh&quot;, dbConnClntAclCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnClntAclCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnClntAclCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>d96d45dd-57f7-4aa9-9bf4-e464d31b94c6</id>
            <name>Execute Statement Shared DB Conn FHIR</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121922</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhir(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhir.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhir.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>6014068e-c021-4a38-9fa6-6f38f6a2cdab</id>
            <name>Execute Statement Shared DB Conn FHIR Ch</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123492</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementFhirCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnFhirCh = globalChannelMap.get(&quot;dbConnFhirCh&quot;);

		if (dbConnFhirCh == null || dbConnFhirCh.getConnection().isClosed())
		{
			dbConnFhirCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlFhir&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnFhirCh&quot;, dbConnFhirCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnFhirCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnFhirCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>fbd5c4a1-b816-4496-acdf-067005f1d376</id>
            <name>Execute Statement Shared DB Conn Translations Ch</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123008</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementTranslationsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnTranslationsCh = globalChannelMap.get(&quot;dbConnTranslationsCh&quot;);

		if (dbConnTranslationsCh == null || dbConnTranslationsCh.getConnection().isClosed())
		{
			dbConnTranslationsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlTranslations&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnTranslationsCh&quot;, dbConnTranslationsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnTranslationsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnTranslationsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>5d1a5577-4ba4-4d1e-b6cd-e2d924164909</id>
            <name>Execute Statement with Shared DB Conn ODS Ch</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122280</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdsCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdsCh = globalChannelMap.get(&quot;dbConnOdsCh&quot;);

		if (dbConnOdsCh == null || dbConnOdsCh.getConnection().isClosed())
		{
			dbConnOdsCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOds&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdsCh&quot;, dbConnOdsCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdsCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdsCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>3991db14-0c0b-4123-952c-5164c1ded501</id>
            <name>Execute Statement with Shared DB Conn ODW Ch</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122960</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Channel Map. If the
	connection does not exist, creates it.  THis connects to the ODW db in Azure

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement
		(optional)
	@return {Any} 
*/
function executeSharedDBStatementOdwCh(statement, isQuery, paramList)
{
	var result;

	try
	{
		var dbConnOdwCh = globalChannelMap.get(&quot;dbConnOdwCh&quot;);

		if (dbConnOdwCh == null || dbConnOdwCh.getConnection().isClosed())
		{
			dbConnOdwCh = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),$(&apos;dbUrlOdw&apos;),$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			globalChannelMap.put(&quot;dbConnOdwCh&quot;, dbConnOdwCh);
		}

		if (paramList == undefined)
		{
			paramList = new Packages.java.util.ArrayList();
		}

		if (isQuery)
		{
			result = dbConnOdwCh.executeCachedQuery(statement, paramList);
		}
		else
		{
			result = dbConnOdwCh.executeUpdate(statement, paramList);
		}
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>fae08c88-7550-479a-b8ed-ffef47e8eed9</id>
            <name>executeSharedDBStatementClient</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121956</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Executes a SQL statement using a shared database connection stored in the Global Map. If the
	connection does not exist, creates it.

	@param {String} statement - The SQL statement to execute
	@param {Boolean} isQuery - true if the statement is a SELECT, otherwise false
	@param {List} paramList - A Java List object containing the parameters for the statement (optional)
*/
function executeSharedDBStatementClient(statement, isQuery, paramList, dbname)
{
	var result;
 	var dburl= &apos;jdbc:sqlserver://AZW1DEV-SQL02.clinicient.com:1433;databaseName=&apos;+dbname+&apos;&apos;;
	try
	{
		var dbConnFhir = globalMap.get(&quot;dbConnFhir&quot;);

		if (dbConnFhir == null || dbConnFhir.getConnection().isClosed())
		{
			dbConnFhir = DatabaseConnectionFactory.createDatabaseConnection($(&apos;dbDriverMsSql&apos;),dburl,$(&apos;dbUserFhir&apos;),$(&apos;dbPwFhir&apos;));
			
			//globalMap.put(&quot;dbConnFhir&quot;, dbConnFhir);
		}

		result = dbConnFhir.executeCachedQuery(statement);
	
	}
	catch (e)
	{
		logger.error(e);
	}
	finally
	{
		return result;
	}
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.0.0">
        <id>ed20a457-5beb-4aea-9bb9-cf91112ccc56</id>
        <name>WebPT-Default Functions</name>
        <revision>10</revision>
        <lastModified>
          <time>1690140133487</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
          <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
          <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
          <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
          <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
          <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
          <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
          <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
          <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
          <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
          <string>8664ea57-77f2-481d-8f1c-9b45761285e8</string>
          <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
          <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
          <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
          <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
          <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
          <string>2d61ede3-55be-462f-b71c-d7ecc67baabd</string>
          <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
          <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
          <string>2a908305-89cf-4e4f-9a66-c6fed1e9d976</string>
          <string>c74d49f9-3866-495c-a5b4-90cb4754c6f8</string>
          <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
          <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
          <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
          <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
          <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
          <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
          <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
          <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
          <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
          <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
          <string>72383579-097e-4205-b030-ce272c90b835</string>
          <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
          <string>ace8b46e-8a2f-490e-afd1-24202f8b4b17</string>
          <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
          <string>cdfecd0a-b177-441d-8b7e-9c239d4a5816</string>
          <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
          <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
          <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
          <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
          <string>3792b059-e098-436c-81fe-23502ef5042b</string>
          <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
          <string>a757905f-315a-43be-a624-38780a3d7574</string>
          <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
          <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
          <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
          <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
          <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
          <string>38e80069-5a80-4483-9a22-02c928973719</string>
          <string>73070cc2-f8a4-46a8-8d28-a1c1d4648520</string>
          <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
          <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
          <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
          <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
          <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
          <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
          <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
          <string>c3882ee4-e2e6-47c6-8da9-801a847e0459</string>
          <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
          <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
          <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
          <string>c65024ed-4660-4423-9636-cb6309cae138</string>
          <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
          <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
          <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
          <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
          <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
          <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
          <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
          <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
          <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
          <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
          <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
          <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
          <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
          <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
          <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
          <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
          <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
          <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
          <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
          <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
          <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
          <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
          <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="4.0.0">
            <id>a8a9a0c8-9322-46dc-bef8-011eb3d70291</id>
            <name>Create Header for CSV</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121678</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	This creates a header for csv files based on the contents of the header variable.  The header
	variable is populated in the channel from the outbound msg template

	@return {String} return description
*/
function createHeader() {
	//Destination transformer.  this creates the header for each new file

	var path = java.nio.file.Paths.get($(&apos;filePath&apos;)+$(&apos;fileName&apos;));
	var bytes = (new java.lang.String($(&apos;header&apos;))).getBytes(&quot;UTF-8&quot;);
	try {
	  java.nio.file.Files.write(path, bytes, java.nio.file.StandardOpenOption.CREATE_NEW);
	}
	catch (e) {
	  //logger.info(&quot; should throw IOException if file already exists&quot;);
	
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>5a886a1f-dab1-41b5-94c6-1a639907d7da</id>
            <name>Filter Message Evaluate Received Checksum</name>
            <revision>33</revision>
            <lastModified>
              <time>1678916806664</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**  This code works by calculating a checksum for each provided message.  We save off the most recent 100 unique checksum values in a global 
	array so if the current message has been recently received we are able to ignore it.
	
	@author:  	Jeffrey Ritz
	@scriptName: 	filterEvaluateReceivedChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {boolean} filter - return filter boolean (true= filter msg, false= do not filter msg)
		persist received_checksum global ChannelMap array
		persist filterMessage ChannelMap variable
	@history
*/
function filterEvaluateReceivedChecksum(msg) {	

	var scriptName= &apos;filterEvaluateReceivedChecksum&apos;
	var filter = false;
	var received_len_limit = 999;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; A msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; B connectorMessage.getRawData() typeof: &apos;+typeof(connectorMessage.getRawData())+&apos; msg: &apos;+connectorMessage.getRawData());
	} // end if 
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	// var dataBytes = new java.lang.String(connectorMessage.getRawData()).getBytes(&apos;UTF-8&apos;);
	// message = new String(message.getBytes(&quot;utf-8&quot;), &quot;utf-8&quot;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; C msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	// var dataBytes = new java.lang.String(msg.getBytes(&apos;UTF-8&apos;));
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);

	// var messageObjectgetBytes= checksum.update(connectorMessage.getRawData().getBytes());
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 
	
	$c(&apos;checksum&apos;, checksum.getValue());
	
	//grab the global channel map variable holding the last X unique checksums that we&apos;ve received
	var received = $gc(&apos;received_checksums&apos;);
	
	if (received == undefined) {
		var received = new Array();
		received.push(checksum.getValue());
	} else {
		//check if we&apos;ve recently received this message, skip it if so
		if (received.indexOf(checksum.getValue()) &gt; -1) {
			filter = true;
		//we haven&apos;t seen it recently, so remember it and allow it through
		} else {
			var received_len = received.length;
			if (received_len &gt; received_len_limit) {
				//remove oldest/first entry, shift all entries forward, and add new entry to end
				received.shift();
				received[received_len_limit] = checksum.getValue();
			} else {
				//add new entry to end of array
				received[received_len] = checksum.getValue();
			} // end if 
		} // end if 
	} // end if 

	 //debug code
	/*for (x=0; x&lt;=received_len_limit; x++) {
		$c(&apos;received-&apos;+x, received[x]);
	} */

	$c(&apos;filterMessage&apos;,filter);
	$gc(&apos;received_checksums&apos;,received);

	return filter;

} // end function</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>fbd0484d-74a2-48e4-aedd-f97c2fcefa16</id>
            <name>Get Message Checksum</name>
            <revision>12</revision>
            <lastModified>
              <time>1678916806703</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**  This code works by calculating and reutrning a checksum for each provided message
	
	@author:  	Jeffrey Ritz
	@scriptName: 	getMessageChecksum.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
	@param {object} result - return checksum value
	@history
	2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() to remove the exponential representation of the number value
*/
function getMessageChecksum(msg) {	

	var scriptName= &apos;getMessageChecksum&apos;;
	var debug= 0;
	if(typeof(msg)=== &apos;object&apos;) var msg= JSON.stringify(msg);
	
	//calculate checksum for current message (ignoring MSH and ORC segments)
	var checksum = new java.util.zip.CRC32();
	var dataBytes = new java.lang.String(msg).getBytes(&apos;UTF-8&apos;);
	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; D dataBytes msg typeof: &apos;+typeof(dataBytes)+&apos; dataBytes: &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; E msg typeof: &apos;+typeof(msg)+&apos; msg: &apos;+msg);
	} // end if 
	var messageObjectgetBytes= checksum.update(dataBytes);

	if(debug&gt;0) {
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; msg typeof: &apos;+typeof(msg)+&apos; msg.getBytes(): &apos;+dataBytes);
		logger.error(&apos;DEBUG::&apos;+scriptName+&apos; messageObjectgetBytes typeof: &apos;+typeof(messageObjectgetBytes)+&apos; messageObjectgetBytes: &apos;+messageObjectgetBytes);
	} // end if 

	var checksumValue= checksum.getValue();
	// 2023-03-15 JER - Modified to push in values into the arrChecksumValue new Array() 
	var arrChecksumValue= new Array(); 
	arrChecksumValue.push(checksumValue);
	$c(&apos;checksum&apos;, arrChecksumValue);

	return checksumValue;

} // end function</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>91db9bd1-ca92-4dcc-bba4-e1ece603fc87</id>
            <name>Remove Child Object From Parent Object Json</name>
            <revision>22</revision>
            <lastModified>
              <time>1678916845037</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**  This function will remove a JSON child object and it&apos;s descendents from a parent object JSON
	
	@author:  	Jeffrey Ritz
	@scriptName: 	removeChildObjectFromParentObjectJson.js
	@created: 	2023-03-09
	@param {object} msg - Inbound connectorMessage.getRawData()
		{string} parentObject - place the name of the string to be designated as the parent object in the JSON
		{string} childObject  - place the name of the string to be designated as the child object to be deleted from the JSON
	@param {object} msg - return modified Json object msg excluding specified Json child object
	@history
*/
function removeChildObjectFromParentObjectJson(msg, parentObject, childObject) {
	
	var scriptName= &apos;removeChildObjectFromParentObjectJson&apos;;
	var debug= 0;

	//var strObjJson= JSON.parse(msg);
	var strObjJson= JSON.stringify(msg);
	
	//var objJson= JSON.parse(msg);
	var newParentObjects= new Object();
	var parentObjects= msg;
	var arrParentObjects= new Array();
	var arrTransactionObjects= new Array();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof parentObjects: &apos;+typeof(parentObjects));
	for (var key in parentObjects) {
		if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof key: &apos;+typeof(key)+&apos; key: &apos;+key);
		if(key== parentObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Parent Objects typeof objJson[key]: &apos;+typeof(parentObjects[key])+&apos; parentObjects[key]: &apos;+JSON.stringify(parentObjects[key]));
			
			var newChildObjects= new Object();
			var childObjects= parentObjects[key];
			var arrChildObjects= new Array();
			
			for(var key2 in childObjects) {
				if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key2: &apos;+typeof(key2)+&apos; key2: &apos;+key2+&apos; childObject: &apos;+childObject);
				for(var key3 in childObjects[key2]) {
					if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof key3: &apos;+typeof(key3)+&apos; key3: &apos;+key3+&apos; childObject: &apos;+childObject);
					if(key3== childObject) {
						var transactionObject= new Object();
						if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; childObject typeof: &apos;+typeof(childObjects[key2][key3])+&apos; childObject: &apos;+JSON.stringify(childObjects[key2][key3]));
						transactionObject.key= key3;
						transactionObject.value= childObjects[key2][key3];
						delete childObjects[key2][key3];
						if(debug&gt;0) logger.info(&apos;DEBUG::&apos;+scriptName+&apos; DELETE childObject: &apos;+key3+&apos; of parentObject: &apos;+JSON.stringify(childObjects[key2]));
						arrTransactionObjects.push(transactionObject);
					} // end if
				} // end for 
				arrChildObjects.push(childObjects[key2]);
			} // end for
			newParentObjects[key]= arrChildObjects;
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add all child keys: &apos;+JSON.stringify(arrChildObjects)+&apos; into ParentObject[&apos;+key+&apos;]: &apos;+newParentObjects[key]);
		} else {
			newParentObjects[key]= parentObjects[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+parentObjects[key]+&apos; string: &apos;+JSON.stringify(parentObjects[key]));
		} // end if
		arrParentObjects.push(newParentObjects);
	} // end for 
	var newMsg= arrParentObjects;
	channelMap.put(&apos;removeChildObjectMsg&apos;,newMsg);
	channelMap.put(&apos;removedChildTransIds&apos;,arrTransactionObjects);
	
	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));
	return newMsg;
	
} </code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>2ff28338-dfb6-445d-a04e-c74b5486a08c</id>
            <name>Remove Object From Json</name>
            <revision>26</revision>
            <lastModified>
              <time>1703964988318</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**  Desc: This function will remove a JSON object and it&apos;s descendents from the msg
	
	fileName: 	removeObjectFromJson.js
	name:		Remove Object From Json	
	Authored:  	Jeffrey Ritz
	Created: 		2023-03-09
	Details:
		@param IN {string} msg - provide parent JSON object (i.e. Inbound connectorMessage.getRawData() - msg)
		@param IN {string} removeObject - provide JSON object to evaluate and remove from parent JSON object (msg)
		OUT (object) newMsg - return JSON object from processing
	@history
	2023-03-15 JER - Modified to include removeObject function parameter to specify specific JSON object by referencing key to be removed
*/
function removeObjectFromJson(msg, removeObject) {
	
	var scriptName= &apos;removeObjectFromJson&apos;;
	var debug= 0;
	//var objJson= JSON.stringify(msg);
	var objJson= JSON.parse(msg);
	var newObjJson= new Object();

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; typeof objJson: &apos;+typeof(objJson)+&apos; objJSON: &apos;+JSON.stringify(objJson));
	for (var key in objJson) {
		if(key== removeObject) {
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; DELETE key: &apos;+key);
			// delete objJson[key];
		} else {
			newObjJson[key]= objJson[key];
			if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; Add key: &apos;+key+&apos; object: &apos;+objJson[key]+&apos; string: &apos;+JSON.stringify(objJson[key]));
		} // end if 
	} // end for 
	var newMsg= newObjJson;

	if(debug&gt;0) logger.error(&apos;DEBUG::&apos;+scriptName+&apos; AFTER msg: &apos;+JSON.stringify(newMsg));

	// return JSON.stringify(newMsg);
	return newMsg;
} 
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>993a6fd8-454a-4133-ba32-dbcfea71582b</id>
            <name>Update EDITransactionLog</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123233</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	The purpose of this function is to update the status in Insight.
	Populate the channel map with the following variables functionalGroupControlNumber, status, eventDate

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateStatus () {

	//  Build the llst of paramters to pass to the database
	var paramList = new Packages.java.util.ArrayList();
	paramList.add($(&apos;functionalGroupControlNumber&apos;));
	paramList.add($(&apos;eventDate&apos;));  //dateTime in the acknoledged field in this format (&quot;2017-07-31 14:15:01.577&quot;)
	paramList.add(new java.lang.Integer(parseInt($(&apos;status&apos;), 10)));
	
//	logger.info(&quot;updateStatus &quot;+paramList);

	//  SQL Statement and paramters that will be sent to SQL
	var statement = &quot;EXEC dbo.pr_EDITransactionLog_Update ?, ?, ?&quot;;
	//  Code template used for establishiing connection and passing the sql statement and parameter list  
	var result = executeSharedDBStatementFhirCh(statement, false, paramList);
	return result;
	
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>42cb290e-5fb0-46b8-82db-576ea1e1ba0d</id>
            <name>Update EDITransactionLog from responseStatus in the response transformer </name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123356</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Call this in the response transformer on the destination.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function updateReponseStatus() {
	var status = 0;
	if (responseStatus == SENT){
		var status = 1;
		channelMap.put(&apos;status&apos;,status);
	}

updateStatus()
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>2223579b-f914-4be7-a575-f1a2a2aa1ae2</id>
            <name>ValidateToString</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123044</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} mapping - 
	@param {Any} defaultValue - 
	@param {Any} replacement - 
	@return {String} return description
*/
function validateToString(mapping, defaultValue, replacement) {
    if (mapping == null) {
        mapping = &apos;&apos;;
    }
    return validate(mapping, defaultValue, replacement).toString() + &apos;&apos;;
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.0.0">
        <id>8c9a8268-4ef0-43e9-ae5b-bf8895f0b80c</id>
        <name>WebPT-FORMAT</name>
        <revision>4</revision>
        <lastModified>
          <time>1703964939902</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description>Include any functions or codes with 
-date &amp; time formating related
-data type formatting</description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
          <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
          <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
          <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
          <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
          <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
          <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
          <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
          <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
          <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
          <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
          <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
          <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
          <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
          <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
          <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
          <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
          <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
          <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
          <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
          <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
          <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
          <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
          <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
          <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
          <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
          <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
          <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
          <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
          <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
          <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
          <string>72383579-097e-4205-b030-ce272c90b835</string>
          <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
          <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
          <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
          <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
          <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
          <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
          <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
          <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
          <string>3792b059-e098-436c-81fe-23502ef5042b</string>
          <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
          <string>a757905f-315a-43be-a624-38780a3d7574</string>
          <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
          <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
          <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
          <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
          <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
          <string>38e80069-5a80-4483-9a22-02c928973719</string>
          <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
          <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
          <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
          <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
          <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
          <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
          <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
          <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
          <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
          <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
          <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
          <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
          <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
          <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
          <string>c65024ed-4660-4423-9636-cb6309cae138</string>
          <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
          <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
          <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
          <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
          <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
          <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
          <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
          <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
          <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
          <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
          <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
          <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
          <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
          <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
          <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
          <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
          <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
          <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
          <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
          <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
          <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
          <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
          <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
          <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
          <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
          <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="4.0.0">
            <id>920c9ead-70a6-4168-9d95-89261b73ae44</id>
            <name>12digitDateTime</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123520</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
Take any 12 digit string yyyyMMddHHmm and change to MM/dd/yyyy HH:mm 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm
*/
function yyyyMMddHHmm(string) {
	return DateUtil.convertDate(&quot;yyyyMMddHHmm&quot;, &quot;MM/dd/yyyy HH:mm&quot;, string);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>fe2689ec-1946-46d5-8dd6-8fbbf106e1e6</id>
            <name>14digitDateTime</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122871</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Take 14 digit string yyyyMMddHHmmss and change to MM/dd/yyyy HH:mm:ss 

	@param {String} arg1 - date and time digit string
	@return {String} return human readable format MM/dd/yyyy HH:mm:ss
*/
function yyyyMMddHHmmss(string) {
	if (string.length == 14) {
		  return DateUtil.convertDate(&quot;yyyyMMddHHmmss&quot;, &quot;MM/dd/yyyy HH:mm:ss&quot;, string);
	}
	else {
		return &quot;unregcognized string&quot;;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>b9db35e2-d5bd-48a1-8cc6-3475c698d7b4</id>
            <name>currentDT_yyyy-MM-dd HH:mm:ss.SSS</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123114</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Author: Kirby Knight
	Date Modified:  11/09/2020
	Retund the current date/time down to the millisecond

	@return {String} return description
*/
function currentDtToMilliseconds() {
	return DateUtil.getCurrentDate(&apos;yyyy-MM-dd HH:mm:ss.SSS&apos;);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>7e747999-4bec-43fc-978d-7049d3543cf0</id>
            <name>fixHL7NodeOrder</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123155</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/

function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

// Helper function for fixHL7NodeOrder
function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>dfedacf6-773b-413e-b78d-1bf16a92071d</id>
            <name>formatHL7Date</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121643</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Take any eight digit HL7 message data string (yyyyMMdd) and formats it human-readable format (MM/dd/yyyy)
	such as 20090612 -&gt; 06/12/2009

	@param {String} arg1 - 8 digit HL7 message data string yyyyMMdd
	@return {String} return date format as MM/dd/yyyy
*/
function formatHL7Date(string) {
	return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;MM/dd/yyyy&quot;, string);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>a8f54921-2cb6-4134-8806-3c4e10a757d9</id>
            <name>getCurrentLocalTime</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122014</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = getCurrentLocalTimestamp();

	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestamp() {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(&quot;EST&quot;)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>6c5f1bd8-ebbf-4c8e-b465-0be8ccaba0d0</id>
            <name>getCurrentLocalTimeToMs</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476123077</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**

	Gets the current local date/time to the milliseconds
	Converts to the timezone that is passed in Examples (America/New_York, America/Chicago, America/Phoenix )

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getCurrentLocalTimestampToMs(timeZone) {
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(timeZone)); 
   return formatter.format(new Packages.java.util.Date()); 
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>78d74c5b-c881-404a-ad96-4e909e1a19f3</id>
            <name>phoneToE164</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121982</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Convert Insight phone number to E164 format 5554446666 to +15554446666

	@param {Any} phoneIn - 
	@return {String} return description
*/
function phoneToE164(phoneIn) {
	logger.info(&apos;L1 &apos;+phoneIn);
	if(phoneIn != null ){
	//phoneIn = &apos;+1&apos; + phoneIn.toString(); 
	logger.info(&apos;L2 &apos;+phoneIn);
	return &apos;+1&apos; + phoneIn.toString(); 
	} else{
		return null;
	}
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.0.0">
        <id>6a32d94d-408c-4e10-9799-e45e150b5c1f</id>
        <name>WebPT-MISC</name>
        <revision>4</revision>
        <lastModified>
          <time>1703964939909</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description>miscellaneous javascript</description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
          <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
          <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
          <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
          <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
          <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
          <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
          <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
          <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
          <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
          <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
          <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
          <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
          <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
          <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
          <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
          <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
          <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
          <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
          <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
          <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
          <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
          <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
          <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
          <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
          <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
          <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
          <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
          <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
          <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
          <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
          <string>72383579-097e-4205-b030-ce272c90b835</string>
          <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
          <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
          <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
          <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
          <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
          <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
          <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
          <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
          <string>3792b059-e098-436c-81fe-23502ef5042b</string>
          <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
          <string>a757905f-315a-43be-a624-38780a3d7574</string>
          <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
          <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
          <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
          <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
          <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
          <string>38e80069-5a80-4483-9a22-02c928973719</string>
          <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
          <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
          <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
          <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
          <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
          <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
          <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
          <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
          <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
          <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
          <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
          <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
          <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
          <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
          <string>c65024ed-4660-4423-9636-cb6309cae138</string>
          <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
          <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
          <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
          <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
          <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
          <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
          <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
          <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
          <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
          <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
          <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
          <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
          <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
          <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
          <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
          <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
          <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
          <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
          <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
          <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
          <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
          <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
          <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
          <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
          <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
          <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="4.0.0">
            <id>84b4f1c7-f82d-4140-9fbd-98a95f68ff32</id>
            <name>getChannelState</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122648</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetChannelState(channel_id) {

    var channel_status = &quot;NA&quot;;

    var channel_count = parseInt(Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().size());

    for(var i=0;i&lt;channel_count;i++) {
        if (channel_id == Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getChannelId()) {
            channel_status = Packages.com.webreach.mirth.server.controllers.ChannelStatusController.getInstance().getChannelStatusList().get(i).getState();
        }
    }

    return channel_status;

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>715435a9-cb15-4e8f-bc5b-4249eaea6e17</id>
            <name>momentjs</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122487</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>COMPILED_CODE</type>
              <code>/**
	Testing MIRTH-3794 using external JavaScript library &quot;moment.js&quot;
*/
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){&quot;object&quot;==typeof exports&amp;&amp;&quot;undefined&quot;!=typeof module?module.exports=b():&quot;function&quot;==typeof define&amp;&amp;define.amd?define(b):a.moment=b()}(this,function(){&quot;use strict&quot;;function a(){return Hc.apply(null,arguments)}function b(a){Hc=a}function c(a){return&quot;[object Array]&quot;===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||&quot;[object Date]&quot;===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c&lt;a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&amp;&amp;(a[c]=b[c]);return f(b,&quot;toString&quot;)&amp;&amp;(a.toString=b.toString),f(b,&quot;valueOf&quot;)&amp;&amp;(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ca(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&amp;&amp;(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow&lt;0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&amp;&amp;(a._isValid=a._isValid&amp;&amp;0===b.charsLeftOver&amp;&amp;0===b.unusedTokens.length&amp;&amp;void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a,b){var c,d,e;if(&quot;undefined&quot;!=typeof b._isAMomentObject&amp;&amp;(a._isAMomentObject=b._isAMomentObject),&quot;undefined&quot;!=typeof b._i&amp;&amp;(a._i=b._i),&quot;undefined&quot;!=typeof b._f&amp;&amp;(a._f=b._f),&quot;undefined&quot;!=typeof b._l&amp;&amp;(a._l=b._l),&quot;undefined&quot;!=typeof b._strict&amp;&amp;(a._strict=b._strict),&quot;undefined&quot;!=typeof b._tzm&amp;&amp;(a._tzm=b._tzm),&quot;undefined&quot;!=typeof b._isUTC&amp;&amp;(a._isUTC=b._isUTC),&quot;undefined&quot;!=typeof b._offset&amp;&amp;(a._offset=b._offset),&quot;undefined&quot;!=typeof b._pf&amp;&amp;(a._pf=j(b)),&quot;undefined&quot;!=typeof b._locale&amp;&amp;(a._locale=b._locale),Jc.length&gt;0)for(c in Jc)d=Jc[c],e=b[d],&quot;undefined&quot;!=typeof e&amp;&amp;(a[d]=e);return a}function n(b){m(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),Kc===!1&amp;&amp;(Kc=!0,a.updateOffset(this),Kc=!1)}function o(a){return a instanceof n||null!=a&amp;&amp;null!=a._isAMomentObject}function p(a){return 0&gt;a?Math.ceil(a):Math.floor(a)}function q(a){var b=+a,c=0;return 0!==b&amp;&amp;isFinite(b)&amp;&amp;(c=p(b)),c}function r(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e&gt;d;d++)(c&amp;&amp;a[d]!==b[d]||!c&amp;&amp;q(a[d])!==q(b[d]))&amp;&amp;g++;return g+f}function s(){}function t(a){return a?a.toLowerCase().replace(&quot;_&quot;,&quot;-&quot;):a}function u(a){for(var b,c,d,e,f=0;f&lt;a.length;){for(e=t(a[f]).split(&quot;-&quot;),b=e.length,c=t(a[f+1]),c=c?c.split(&quot;-&quot;):null;b&gt;0;){if(d=v(e.slice(0,b).join(&quot;-&quot;)))return d;if(c&amp;&amp;c.length&gt;=b&amp;&amp;r(e,c,!0)&gt;=b-1)break;b--}f++}return null}function v(a){var b=null;if(!Lc[a]&amp;&amp;&quot;undefined&quot;!=typeof module&amp;&amp;module&amp;&amp;module.exports)try{b=Ic._abbr,require(&quot;./locale/&quot;+a),w(b)}catch(c){}return Lc[a]}function w(a,b){var c;return a&amp;&amp;(c=&quot;undefined&quot;==typeof b?y(a):x(a,b),c&amp;&amp;(Ic=c)),Ic._abbr}function x(a,b){return null!==b?(b.abbr=a,Lc[a]=Lc[a]||new s,Lc[a].set(b),w(a),Lc[a]):(delete Lc[a],null)}function y(a){var b;if(a&amp;&amp;a._locale&amp;&amp;a._locale._abbr&amp;&amp;(a=a._locale._abbr),!a)return Ic;if(!c(a)){if(b=v(a))return b;a=[a]}return u(a)}function z(a,b){var c=a.toLowerCase();Mc[c]=Mc[c+&quot;s&quot;]=Mc[b]=a}function A(a){return&quot;string&quot;==typeof a?Mc[a]||Mc[a.toLowerCase()]:void 0}function B(a){var b,c,d={};for(c in a)f(a,c)&amp;&amp;(b=A(c),b&amp;&amp;(d[b]=a[c]));return d}function C(b,c){return function(d){return null!=d?(E(this,b,d),a.updateOffset(this,c),this):D(this,b)}}function D(a,b){return a._d[&quot;get&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b]()}function E(a,b,c){return a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+b](c)}function F(a,b){var c;if(&quot;object&quot;==typeof a)for(c in a)this.set(c,a[c]);else if(a=A(a),&quot;function&quot;==typeof this[a])return this[a](b);return this}function G(a,b,c){var d=&quot;&quot;+Math.abs(a),e=b-d.length,f=a&gt;=0;return(f?c?&quot;+&quot;:&quot;&quot;:&quot;-&quot;)+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function H(a,b,c,d){var e=d;&quot;string&quot;==typeof d&amp;&amp;(e=function(){return this[d]()}),a&amp;&amp;(Qc[a]=e),b&amp;&amp;(Qc[b[0]]=function(){return G(e.apply(this,arguments),b[1],b[2])}),c&amp;&amp;(Qc[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function I(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,&quot;&quot;):a.replace(/\\/g,&quot;&quot;)}function J(a){var b,c,d=a.match(Nc);for(b=0,c=d.length;c&gt;b;b++)Qc[d[b]]?d[b]=Qc[d[b]]:d[b]=I(d[b]);return function(e){var f=&quot;&quot;;for(b=0;c&gt;b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function K(a,b){return a.isValid()?(b=L(b,a.localeData()),Pc[b]=Pc[b]||J(b),Pc[b](a)):a.localeData().invalidDate()}function L(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Oc.lastIndex=0;d&gt;=0&amp;&amp;Oc.test(a);)a=a.replace(Oc,c),Oc.lastIndex=0,d-=1;return a}function M(a){return&quot;function&quot;==typeof a&amp;&amp;&quot;[object Function]&quot;===Object.prototype.toString.call(a)}function N(a,b,c){dd[a]=M(b)?b:function(a){return a&amp;&amp;c?c:b}}function O(a,b){return f(dd,a)?dd[a](b._strict,b._locale):new RegExp(P(a))}function P(a){return a.replace(&quot;\\&quot;,&quot;&quot;).replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}).replace(/[-\/\\^$*+?.()|[\]{}]/g,&quot;\\$&amp;&quot;)}function Q(a,b){var c,d=b;for(&quot;string&quot;==typeof a&amp;&amp;(a=[a]),&quot;number&quot;==typeof b&amp;&amp;(d=function(a,c){c[b]=q(a)}),c=0;c&lt;a.length;c++)ed[a[c]]=d}function R(a,b){Q(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function S(a,b,c){null!=b&amp;&amp;f(ed,a)&amp;&amp;ed[a](b,c._a,c,a)}function T(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function U(a){return this._months[a.month()]}function V(a){return this._monthsShort[a.month()]}function W(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12&gt;d;d++){if(e=h([2e3,d]),c&amp;&amp;!this._longMonthsParse[d]&amp;&amp;(this._longMonthsParse[d]=new RegExp(&quot;^&quot;+this.months(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;),this._shortMonthsParse[d]=new RegExp(&quot;^&quot;+this.monthsShort(e,&quot;&quot;).replace(&quot;.&quot;,&quot;&quot;)+&quot;$&quot;,&quot;i&quot;)),c||this._monthsParse[d]||(f=&quot;^&quot;+this.months(e,&quot;&quot;)+&quot;|^&quot;+this.monthsShort(e,&quot;&quot;),this._monthsParse[d]=new RegExp(f.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),c&amp;&amp;&quot;MMMM&quot;===b&amp;&amp;this._longMonthsParse[d].test(a))return d;if(c&amp;&amp;&quot;MMM&quot;===b&amp;&amp;this._shortMonthsParse[d].test(a))return d;if(!c&amp;&amp;this._monthsParse[d].test(a))return d}}function X(a,b){var c;return&quot;string&quot;==typeof b&amp;&amp;(b=a.localeData().monthsParse(b),&quot;number&quot;!=typeof b)?a:(c=Math.min(a.date(),T(a.year(),b)),a._d[&quot;set&quot;+(a._isUTC?&quot;UTC&quot;:&quot;&quot;)+&quot;Month&quot;](b,c),a)}function Y(b){return null!=b?(X(this,b),a.updateOffset(this,!0),this):D(this,&quot;Month&quot;)}function Z(){return T(this.year(),this.month())}function $(a){var b,c=a._a;return c&amp;&amp;-2===j(a).overflow&amp;&amp;(b=c[gd]&lt;0||c[gd]&gt;11?gd:c[hd]&lt;1||c[hd]&gt;T(c[fd],c[gd])?hd:c[id]&lt;0||c[id]&gt;24||24===c[id]&amp;&amp;(0!==c[jd]||0!==c[kd]||0!==c[ld])?id:c[jd]&lt;0||c[jd]&gt;59?jd:c[kd]&lt;0||c[kd]&gt;59?kd:c[ld]&lt;0||c[ld]&gt;999?ld:-1,j(a)._overflowDayOfYear&amp;&amp;(fd&gt;b||b&gt;hd)&amp;&amp;(b=hd),j(a).overflow=b),a}function _(b){a.suppressDeprecationWarnings===!1&amp;&amp;&quot;undefined&quot;!=typeof console&amp;&amp;console.warn&amp;&amp;console.warn(&quot;Deprecation warning: &quot;+b)}function aa(a,b){var c=!0;return g(function(){return c&amp;&amp;(_(a+&quot;\n&quot;+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function ba(a,b){od[a]||(_(b),od[a]=!0)}function ca(a){var b,c,d=a._i,e=pd.exec(d);if(e){for(j(a).iso=!0,b=0,c=qd.length;c&gt;b;b++)if(qd[b][1].exec(d)){a._f=qd[b][0];break}for(b=0,c=rd.length;c&gt;b;b++)if(rd[b][1].exec(d)){a._f+=(e[6]||&quot; &quot;)+rd[b][0];break}d.match(ad)&amp;&amp;(a._f+=&quot;Z&quot;),va(a)}else a._isValid=!1}function da(b){var c=sd.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ca(b),void(b._isValid===!1&amp;&amp;(delete b._isValid,a.createFromInputFallback(b))))}function ea(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970&gt;a&amp;&amp;h.setFullYear(a),h}function fa(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970&gt;a&amp;&amp;b.setUTCFullYear(a),b}function ga(a){return ha(a)?366:365}function ha(a){return a%4===0&amp;&amp;a%100!==0||a%400===0}function ia(){return ha(this.year())}function ja(a,b,c){var d,e=c-b,f=c-a.day();return f&gt;e&amp;&amp;(f-=7),e-7&gt;f&amp;&amp;(f+=7),d=Da(a).add(f,&quot;d&quot;),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function ka(a){return ja(a,this._week.dow,this._week.doy).week}function la(){return this._week.dow}function ma(){return this._week.doy}function na(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function oa(a){var b=ja(this,1,4).week;return null==a?b:this.add(7*(a-b),&quot;d&quot;)}function pa(a,b,c,d,e){var f,g=6+e-d,h=fa(a,0,1+g),i=h.getUTCDay();return e&gt;i&amp;&amp;(i+=7),c=null!=c?1*c:e,f=1+g+7*(b-1)-i+c,{year:f&gt;0?a:a-1,dayOfYear:f&gt;0?f:ga(a-1)+f}}function qa(a){var b=Math.round((this.clone().startOf(&quot;day&quot;)-this.clone().startOf(&quot;year&quot;))/864e5)+1;return null==a?b:this.add(a-b,&quot;d&quot;)}function ra(a,b,c){return null!=a?a:null!=b?b:c}function sa(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function ta(a){var b,c,d,e,f=[];if(!a._d){for(d=sa(a),a._w&amp;&amp;null==a._a[hd]&amp;&amp;null==a._a[gd]&amp;&amp;ua(a),a._dayOfYear&amp;&amp;(e=ra(a._a[fd],d[fd]),a._dayOfYear&gt;ga(e)&amp;&amp;(j(a)._overflowDayOfYear=!0),c=fa(e,0,a._dayOfYear),a._a[gd]=c.getUTCMonth(),a._a[hd]=c.getUTCDate()),b=0;3&gt;b&amp;&amp;null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7&gt;b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[id]&amp;&amp;0===a._a[jd]&amp;&amp;0===a._a[kd]&amp;&amp;0===a._a[ld]&amp;&amp;(a._nextDay=!0,a._a[id]=0),a._d=(a._useUTC?fa:ea).apply(null,f),null!=a._tzm&amp;&amp;a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&amp;&amp;(a._a[id]=24)}}function ua(a){var b,c,d,e,f,g,h;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=ra(b.GG,a._a[fd],ja(Da(),1,4).year),d=ra(b.W,1),e=ra(b.E,1)):(f=a._locale._week.dow,g=a._locale._week.doy,c=ra(b.gg,a._a[fd],ja(Da(),f,g).year),d=ra(b.w,1),null!=b.d?(e=b.d,f&gt;e&amp;&amp;++d):e=null!=b.e?b.e+f:f),h=pa(c,d,e,g,f),a._a[fd]=h.year,a._dayOfYear=h.dayOfYear}function va(b){if(b._f===a.ISO_8601)return void ca(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=&quot;&quot;+b._i,i=h.length,k=0;for(e=L(b._f,b._locale).match(Nc)||[],c=0;c&lt;e.length;c++)f=e[c],d=(h.match(O(f,b))||[])[0],d&amp;&amp;(g=h.substr(0,h.indexOf(d)),g.length&gt;0&amp;&amp;j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),Qc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),S(f,d,b)):b._strict&amp;&amp;!d&amp;&amp;j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length&gt;0&amp;&amp;j(b).unusedInput.push(h),j(b).bigHour===!0&amp;&amp;b._a[id]&lt;=12&amp;&amp;b._a[id]&gt;0&amp;&amp;(j(b).bigHour=void 0),b._a[id]=wa(b._locale,b._a[id],b._meridiem),ta(b),$(b)}function wa(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&amp;&amp;12&gt;b&amp;&amp;(b+=12),d||12!==b||(b=0),b):b}function xa(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e&lt;a._f.length;e++)f=0,b=m({},a),null!=a._useUTC&amp;&amp;(b._useUTC=a._useUTC),b._f=a._f[e],va(b),k(b)&amp;&amp;(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d&gt;f)&amp;&amp;(d=f,c=b));g(a,c||b)}function ya(a){if(!a._d){var b=B(a._i);a._a=[b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],ta(a)}}function za(a){var b=new n($(Aa(a)));return b._nextDay&amp;&amp;(b.add(1,&quot;d&quot;),b._nextDay=void 0),b}function Aa(a){var b=a._i,e=a._f;return a._locale=a._locale||y(a._l),null===b||void 0===e&amp;&amp;&quot;&quot;===b?l({nullInput:!0}):(&quot;string&quot;==typeof b&amp;&amp;(a._i=b=a._locale.preparse(b)),o(b)?new n($(b)):(c(e)?xa(a):e?va(a):d(b)?a._d=b:Ba(a),a))}function Ba(b){var f=b._i;void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):&quot;string&quot;==typeof f?da(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),ta(b)):&quot;object&quot;==typeof f?ya(b):&quot;number&quot;==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ca(a,b,c,d,e){var f={};return&quot;boolean&quot;==typeof c&amp;&amp;(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,za(f)}function Da(a,b,c,d){return Ca(a,b,c,d,!1)}function Ea(a,b){var d,e;if(1===b.length&amp;&amp;c(b[0])&amp;&amp;(b=b[0]),!b.length)return Da();for(d=b[0],e=1;e&lt;b.length;++e)(!b[e].isValid()||b[e][a](d))&amp;&amp;(d=b[e]);return d}function Fa(){var a=[].slice.call(arguments,0);return Ea(&quot;isBefore&quot;,a)}function Ga(){var a=[].slice.call(arguments,0);return Ea(&quot;isAfter&quot;,a)}function Ha(a){var b=B(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=y(),this._bubble()}function Ia(a){return a instanceof Ha}function Ja(a,b){H(a,0,0,function(){var a=this.utcOffset(),c=&quot;+&quot;;return 0&gt;a&amp;&amp;(a=-a,c=&quot;-&quot;),c+G(~~(a/60),2)+b+G(~~a%60,2)})}function Ka(a){var b=(a||&quot;&quot;).match(ad)||[],c=b[b.length-1]||[],d=(c+&quot;&quot;).match(xd)||[&quot;-&quot;,0,0],e=+(60*d[1])+q(d[2]);return&quot;+&quot;===d[0]?e:-e}function La(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(o(b)||d(b)?+b:+Da(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Da(b).local()}function Ma(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Na(b,c){var d,e=this._offset||0;return null!=b?(&quot;string&quot;==typeof b&amp;&amp;(b=Ka(b)),Math.abs(b)&lt;16&amp;&amp;(b=60*b),!this._isUTC&amp;&amp;c&amp;&amp;(d=Ma(this)),this._offset=b,this._isUTC=!0,null!=d&amp;&amp;this.add(d,&quot;m&quot;),e!==b&amp;&amp;(!c||this._changeInProgress?bb(this,Ya(b-e,&quot;m&quot;),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Ma(this)}function Oa(a,b){return null!=a?(&quot;string&quot;!=typeof a&amp;&amp;(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Pa(a){return this.utcOffset(0,a)}function Qa(a){return this._isUTC&amp;&amp;(this.utcOffset(0,a),this._isUTC=!1,a&amp;&amp;this.subtract(Ma(this),&quot;m&quot;)),this}function Ra(){return this._tzm?this.utcOffset(this._tzm):&quot;string&quot;==typeof this._i&amp;&amp;this.utcOffset(Ka(this._i)),this}function Sa(a){return a=a?Da(a).utcOffset():0,(this.utcOffset()-a)%60===0}function Ta(){return this.utcOffset()&gt;this.clone().month(0).utcOffset()||this.utcOffset()&gt;this.clone().month(5).utcOffset()}function Ua(){if(&quot;undefined&quot;!=typeof this._isDSTShifted)return this._isDSTShifted;var a={};if(m(a,this),a=Aa(a),a._a){var b=a._isUTC?h(a._a):Da(a._a);this._isDSTShifted=this.isValid()&amp;&amp;r(a._a,b.toArray())&gt;0}else this._isDSTShifted=!1;return this._isDSTShifted}function Va(){return!this._isUTC}function Wa(){return this._isUTC}function Xa(){return this._isUTC&amp;&amp;0===this._offset}function Ya(a,b){var c,d,e,g=a,h=null;return Ia(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:&quot;number&quot;==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=yd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:0,d:q(h[hd])*c,h:q(h[id])*c,m:q(h[jd])*c,s:q(h[kd])*c,ms:q(h[ld])*c}):(h=zd.exec(a))?(c=&quot;-&quot;===h[1]?-1:1,g={y:Za(h[2],c),M:Za(h[3],c),d:Za(h[4],c),h:Za(h[5],c),m:Za(h[6],c),s:Za(h[7],c),w:Za(h[8],c)}):null==g?g={}:&quot;object&quot;==typeof g&amp;&amp;(&quot;from&quot;in g||&quot;to&quot;in g)&amp;&amp;(e=_a(Da(g.from),Da(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Ha(g),Ia(a)&amp;&amp;f(a,&quot;_locale&quot;)&amp;&amp;(d._locale=a._locale),d}function Za(a,b){var c=a&amp;&amp;parseFloat(a.replace(&quot;,&quot;,&quot;.&quot;));return(isNaN(c)?0:c)*b}function $a(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,&quot;M&quot;).isAfter(b)&amp;&amp;--c.months,c.milliseconds=+b-+a.clone().add(c.months,&quot;M&quot;),c}function _a(a,b){var c;return b=La(b,a),a.isBefore(b)?c=$a(a,b):(c=$a(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function ab(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(ba(b,&quot;moment().&quot;+b+&quot;(period, number) is deprecated. Please use moment().&quot;+b+&quot;(number, period).&quot;),f=c,c=d,d=f),c=&quot;string&quot;==typeof c?+c:c,e=Ya(c,d),bb(this,e,a),this}}function bb(b,c,d,e){var f=c._milliseconds,g=c._days,h=c._months;e=null==e?!0:e,f&amp;&amp;b._d.setTime(+b._d+f*d),g&amp;&amp;E(b,&quot;Date&quot;,D(b,&quot;Date&quot;)+g*d),h&amp;&amp;X(b,D(b,&quot;Month&quot;)+h*d),e&amp;&amp;a.updateOffset(b,g||h)}function cb(a,b){var c=a||Da(),d=La(c,this).startOf(&quot;day&quot;),e=this.diff(d,&quot;days&quot;,!0),f=-6&gt;e?&quot;sameElse&quot;:-1&gt;e?&quot;lastWeek&quot;:0&gt;e?&quot;lastDay&quot;:1&gt;e?&quot;sameDay&quot;:2&gt;e?&quot;nextDay&quot;:7&gt;e?&quot;nextWeek&quot;:&quot;sameElse&quot;;return this.format(b&amp;&amp;b[f]||this.localeData().calendar(f,this,Da(c)))}function db(){return new n(this)}function eb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this&gt;+a):(c=o(a)?+a:+Da(a),c&lt;+this.clone().startOf(b))}function fb(a,b){var c;return b=A(&quot;undefined&quot;!=typeof b?b:&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+a&gt;+this):(c=o(a)?+a:+Da(a),+this.clone().endOf(b)&lt;c)}function gb(a,b,c){return this.isAfter(a,c)&amp;&amp;this.isBefore(b,c)}function hb(a,b){var c;return b=A(b||&quot;millisecond&quot;),&quot;millisecond&quot;===b?(a=o(a)?a:Da(a),+this===+a):(c=+Da(a),+this.clone().startOf(b)&lt;=c&amp;&amp;c&lt;=+this.clone().endOf(b))}function ib(a,b,c){var d,e,f=La(a,this),g=6e4*(f.utcOffset()-this.utcOffset());return b=A(b),&quot;year&quot;===b||&quot;month&quot;===b||&quot;quarter&quot;===b?(e=jb(this,f),&quot;quarter&quot;===b?e/=3:&quot;year&quot;===b&amp;&amp;(e/=12)):(d=this-f,e=&quot;second&quot;===b?d/1e3:&quot;minute&quot;===b?d/6e4:&quot;hour&quot;===b?d/36e5:&quot;day&quot;===b?(d-g)/864e5:&quot;week&quot;===b?(d-g)/6048e5:d),c?e:p(e)}function jb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,&quot;months&quot;);return 0&gt;b-f?(c=a.clone().add(e-1,&quot;months&quot;),d=(b-f)/(f-c)):(c=a.clone().add(e+1,&quot;months&quot;),d=(b-f)/(c-f)),-(e+d)}function kb(){return this.clone().locale(&quot;en&quot;).format(&quot;ddd MMM DD YYYY HH:mm:ss [GMT]ZZ&quot;)}function lb(){var a=this.clone().utc();return 0&lt;a.year()&amp;&amp;a.year()&lt;=9999?&quot;function&quot;==typeof Date.prototype.toISOString?this.toDate().toISOString():K(a,&quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;):K(a,&quot;YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;)}function mb(b){var c=K(this,b||a.defaultFormat);return this.localeData().postformat(c)}function nb(a,b){return this.isValid()?Ya({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ob(a){return this.from(Da(),a)}function pb(a,b){return this.isValid()?Ya({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function qb(a){return this.to(Da(),a)}function rb(a){var b;return void 0===a?this._locale._abbr:(b=y(a),null!=b&amp;&amp;(this._locale=b),this)}function sb(){return this._locale}function tb(a){switch(a=A(a)){case&quot;year&quot;:this.month(0);case&quot;quarter&quot;:case&quot;month&quot;:this.date(1);case&quot;week&quot;:case&quot;isoWeek&quot;:case&quot;day&quot;:this.hours(0);case&quot;hour&quot;:this.minutes(0);case&quot;minute&quot;:this.seconds(0);case&quot;second&quot;:this.milliseconds(0)}return&quot;week&quot;===a&amp;&amp;this.weekday(0),&quot;isoWeek&quot;===a&amp;&amp;this.isoWeekday(1),&quot;quarter&quot;===a&amp;&amp;this.month(3*Math.floor(this.month()/3)),this}function ub(a){return a=A(a),void 0===a||&quot;millisecond&quot;===a?this:this.startOf(a).add(1,&quot;isoWeek&quot;===a?&quot;week&quot;:a).subtract(1,&quot;ms&quot;)}function vb(){return+this._d-6e4*(this._offset||0)}function wb(){return Math.floor(+this/1e3)}function xb(){return this._offset?new Date(+this):this._d}function yb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function zb(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Ab(){return k(this)}function Bb(){return g({},j(this))}function Cb(){return j(this).overflow}function Db(a,b){H(0,[a,a.length],0,b)}function Eb(a,b,c){return ja(Da([a,11,31+b-c]),b,c).week}function Fb(a){var b=ja(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Gb(a){var b=ja(this,1,4).year;return null==a?b:this.add(a-b,&quot;y&quot;)}function Hb(){return Eb(this.year(),1,4)}function Ib(){var a=this.localeData()._week;return Eb(this.year(),a.dow,a.doy)}function Jb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Kb(a,b){return&quot;string&quot;!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),&quot;number&quot;==typeof a?a:null):parseInt(a,10)}function Lb(a){return this._weekdays[a.day()]}function Mb(a){return this._weekdaysShort[a.day()]}function Nb(a){return this._weekdaysMin[a.day()]}function Ob(a){var b,c,d;for(this._weekdaysParse=this._weekdaysParse||[],b=0;7&gt;b;b++)if(this._weekdaysParse[b]||(c=Da([2e3,1]).day(b),d=&quot;^&quot;+this.weekdays(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysShort(c,&quot;&quot;)+&quot;|^&quot;+this.weekdaysMin(c,&quot;&quot;),this._weekdaysParse[b]=new RegExp(d.replace(&quot;.&quot;,&quot;&quot;),&quot;i&quot;)),this._weekdaysParse[b].test(a))return b}function Pb(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Kb(a,this.localeData()),this.add(a-b,&quot;d&quot;)):b}function Qb(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,&quot;d&quot;)}function Rb(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)}function Sb(a,b){H(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function Tb(a,b){return b._meridiemParse}function Ub(a){return&quot;p&quot;===(a+&quot;&quot;).toLowerCase().charAt(0)}function Vb(a,b,c){return a&gt;11?c?&quot;pm&quot;:&quot;PM&quot;:c?&quot;am&quot;:&quot;AM&quot;}function Wb(a,b){b[ld]=q(1e3*(&quot;0.&quot;+a))}function Xb(){return this._isUTC?&quot;UTC&quot;:&quot;&quot;}function Yb(){return this._isUTC?&quot;Coordinated Universal Time&quot;:&quot;&quot;}function Zb(a){return Da(1e3*a)}function $b(){return Da.apply(null,arguments).parseZone()}function _b(a,b,c){var d=this._calendar[a];return&quot;function&quot;==typeof d?d.call(b,c):d}function ac(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function bc(){return this._invalidDate}function cc(a){return this._ordinal.replace(&quot;%d&quot;,a)}function dc(a){return a}function ec(a,b,c,d){var e=this._relativeTime[c];return&quot;function&quot;==typeof e?e(a,b,c,d):e.replace(/%d/i,a)}function fc(a,b){var c=this._relativeTime[a&gt;0?&quot;future&quot;:&quot;past&quot;];return&quot;function&quot;==typeof c?c(b):c.replace(/%s/i,b)}function gc(a){var b,c;for(c in a)b=a[c],&quot;function&quot;==typeof b?this[c]=b:this[&quot;_&quot;+c]=b;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+&quot;|&quot;+/\d{1,2}/.source)}function hc(a,b,c,d){var e=y(),f=h().set(d,b);return e[c](f,a)}function ic(a,b,c,d,e){if(&quot;number&quot;==typeof a&amp;&amp;(b=a,a=void 0),a=a||&quot;&quot;,null!=b)return hc(a,b,c,e);var f,g=[];for(f=0;d&gt;f;f++)g[f]=hc(a,f,c,e);return g}function jc(a,b){return ic(a,b,&quot;months&quot;,12,&quot;month&quot;)}function kc(a,b){return ic(a,b,&quot;monthsShort&quot;,12,&quot;month&quot;)}function lc(a,b){return ic(a,b,&quot;weekdays&quot;,7,&quot;day&quot;)}function mc(a,b){return ic(a,b,&quot;weekdaysShort&quot;,7,&quot;day&quot;)}function nc(a,b){return ic(a,b,&quot;weekdaysMin&quot;,7,&quot;day&quot;)}function oc(){var a=this._data;return this._milliseconds=Wd(this._milliseconds),this._days=Wd(this._days),this._months=Wd(this._months),a.milliseconds=Wd(a.milliseconds),a.seconds=Wd(a.seconds),a.minutes=Wd(a.minutes),a.hours=Wd(a.hours),a.months=Wd(a.months),a.years=Wd(a.years),this}function pc(a,b,c,d){var e=Ya(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function qc(a,b){return pc(this,a,b,1)}function rc(a,b){return pc(this,a,b,-1)}function sc(a){return 0&gt;a?Math.floor(a):Math.ceil(a)}function tc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f&gt;=0&amp;&amp;g&gt;=0&amp;&amp;h&gt;=0||0&gt;=f&amp;&amp;0&gt;=g&amp;&amp;0&gt;=h||(f+=864e5*sc(vc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=p(f/1e3),i.seconds=a%60,b=p(a/60),i.minutes=b%60,c=p(b/60),i.hours=c%24,g+=p(c/24),e=p(uc(g)),h+=e,g-=sc(vc(e)),d=p(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function uc(a){return 4800*a/146097}function vc(a){return 146097*a/4800}function wc(a){var b,c,d=this._milliseconds;if(a=A(a),&quot;month&quot;===a||&quot;year&quot;===a)return b=this._days+d/864e5,c=this._months+uc(b),&quot;month&quot;===a?c:c/12;switch(b=this._days+Math.round(vc(this._months)),a){case&quot;week&quot;:return b/7+d/6048e5;case&quot;day&quot;:return b+d/864e5;case&quot;hour&quot;:return 24*b+d/36e5;case&quot;minute&quot;:return 1440*b+d/6e4;case&quot;second&quot;:return 86400*b+d/1e3;case&quot;millisecond&quot;:return Math.floor(864e5*b)+d;default:throw new Error(&quot;Unknown unit &quot;+a)}}function xc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*q(this._months/12)}function yc(a){return function(){return this.as(a)}}function zc(a){return a=A(a),this[a+&quot;s&quot;]()}function Ac(a){return function(){return this._data[a]}}function Bc(){return p(this.days()/7)}function Cc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Dc(a,b,c){var d=Ya(a).abs(),e=ke(d.as(&quot;s&quot;)),f=ke(d.as(&quot;m&quot;)),g=ke(d.as(&quot;h&quot;)),h=ke(d.as(&quot;d&quot;)),i=ke(d.as(&quot;M&quot;)),j=ke(d.as(&quot;y&quot;)),k=e&lt;le.s&amp;&amp;[&quot;s&quot;,e]||1===f&amp;&amp;[&quot;m&quot;]||f&lt;le.m&amp;&amp;[&quot;mm&quot;,f]||1===g&amp;&amp;[&quot;h&quot;]||g&lt;le.h&amp;&amp;[&quot;hh&quot;,g]||1===h&amp;&amp;[&quot;d&quot;]||h&lt;le.d&amp;&amp;[&quot;dd&quot;,h]||1===i&amp;&amp;[&quot;M&quot;]||i&lt;le.M&amp;&amp;[&quot;MM&quot;,i]||1===j&amp;&amp;[&quot;y&quot;]||[&quot;yy&quot;,j];return k[2]=b,k[3]=+a&gt;0,k[4]=c,Cc.apply(null,k)}function Ec(a,b){return void 0===le[a]?!1:void 0===b?le[a]:(le[a]=b,!0)}function Fc(a){var b=this.localeData(),c=Dc(this,!a,b);return a&amp;&amp;(c=b.pastFuture(+this,c)),b.postformat(c)}function Gc(){var a,b,c,d=me(this._milliseconds)/1e3,e=me(this._days),f=me(this._months);a=p(d/60),b=p(a/60),d%=60,a%=60,c=p(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0&gt;m?&quot;-&quot;:&quot;&quot;)+&quot;P&quot;+(g?g+&quot;Y&quot;:&quot;&quot;)+(h?h+&quot;M&quot;:&quot;&quot;)+(i?i+&quot;D&quot;:&quot;&quot;)+(j||k||l?&quot;T&quot;:&quot;&quot;)+(j?j+&quot;H&quot;:&quot;&quot;)+(k?k+&quot;M&quot;:&quot;&quot;)+(l?l+&quot;S&quot;:&quot;&quot;):&quot;P0D&quot;}var Hc,Ic,Jc=a.momentProperties=[],Kc=!1,Lc={},Mc={},Nc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Pc={},Qc={},Rc=/\d/,Sc=/\d\d/,Tc=/\d{3}/,Uc=/\d{4}/,Vc=/[+-]?\d{6}/,Wc=/\d\d?/,Xc=/\d{1,3}/,Yc=/\d{1,4}/,Zc=/[+-]?\d{1,6}/,$c=/\d+/,_c=/[+-]?\d+/,ad=/Z|[+-]\d\d:?\d\d/gi,bd=/[+-]?\d+(\.\d{1,3})?/,cd=/[0-9]*[&apos;a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,dd={},ed={},fd=0,gd=1,hd=2,id=3,jd=4,kd=5,ld=6;H(&quot;M&quot;,[&quot;MM&quot;,2],&quot;Mo&quot;,function(){return this.month()+1}),H(&quot;MMM&quot;,0,0,function(a){return this.localeData().monthsShort(this,a)}),H(&quot;MMMM&quot;,0,0,function(a){return this.localeData().months(this,a)}),z(&quot;month&quot;,&quot;M&quot;),N(&quot;M&quot;,Wc),N(&quot;MM&quot;,Wc,Sc),N(&quot;MMM&quot;,cd),N(&quot;MMMM&quot;,cd),Q([&quot;M&quot;,&quot;MM&quot;],function(a,b){b[gd]=q(a)-1}),Q([&quot;MMM&quot;,&quot;MMMM&quot;],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[gd]=e:j(c).invalidMonth=a});var md=&quot;January_February_March_April_May_June_July_August_September_October_November_December&quot;.split(&quot;_&quot;),nd=&quot;Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec&quot;.split(&quot;_&quot;),od={};a.suppressDeprecationWarnings=!1;var pd=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,qd=[[&quot;YYYYYY-MM-DD&quot;,/[+-]\d{6}-\d{2}-\d{2}/],[&quot;YYYY-MM-DD&quot;,/\d{4}-\d{2}-\d{2}/],[&quot;GGGG-[W]WW-E&quot;,/\d{4}-W\d{2}-\d/],[&quot;GGGG-[W]WW&quot;,/\d{4}-W\d{2}/],[&quot;YYYY-DDD&quot;,/\d{4}-\d{3}/]],rd=[[&quot;HH:mm:ss.SSSS&quot;,/(T| )\d\d:\d\d:\d\d\.\d+/],[&quot;HH:mm:ss&quot;,/(T| )\d\d:\d\d:\d\d/],[&quot;HH:mm&quot;,/(T| )\d\d:\d\d/],[&quot;HH&quot;,/(T| )\d\d/]],sd=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=aa(&quot;moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.&quot;,function(a){a._d=new Date(a._i+(a._useUTC?&quot; UTC&quot;:&quot;&quot;))}),H(0,[&quot;YY&quot;,2],0,function(){return this.year()%100}),H(0,[&quot;YYYY&quot;,4],0,&quot;year&quot;),H(0,[&quot;YYYYY&quot;,5],0,&quot;year&quot;),H(0,[&quot;YYYYYY&quot;,6,!0],0,&quot;year&quot;),z(&quot;year&quot;,&quot;y&quot;),N(&quot;Y&quot;,_c),N(&quot;YY&quot;,Wc,Sc),N(&quot;YYYY&quot;,Yc,Uc),N(&quot;YYYYY&quot;,Zc,Vc),N(&quot;YYYYYY&quot;,Zc,Vc),Q([&quot;YYYYY&quot;,&quot;YYYYYY&quot;],fd),Q(&quot;YYYY&quot;,function(b,c){c[fd]=2===b.length?a.parseTwoDigitYear(b):q(b)}),Q(&quot;YY&quot;,function(b,c){c[fd]=a.parseTwoDigitYear(b)}),a.parseTwoDigitYear=function(a){return q(a)+(q(a)&gt;68?1900:2e3)};var td=C(&quot;FullYear&quot;,!1);H(&quot;w&quot;,[&quot;ww&quot;,2],&quot;wo&quot;,&quot;week&quot;),H(&quot;W&quot;,[&quot;WW&quot;,2],&quot;Wo&quot;,&quot;isoWeek&quot;),z(&quot;week&quot;,&quot;w&quot;),z(&quot;isoWeek&quot;,&quot;W&quot;),N(&quot;w&quot;,Wc),N(&quot;ww&quot;,Wc,Sc),N(&quot;W&quot;,Wc),N(&quot;WW&quot;,Wc,Sc),R([&quot;w&quot;,&quot;ww&quot;,&quot;W&quot;,&quot;WW&quot;],function(a,b,c,d){b[d.substr(0,1)]=q(a)});var ud={dow:0,doy:6};H(&quot;DDD&quot;,[&quot;DDDD&quot;,3],&quot;DDDo&quot;,&quot;dayOfYear&quot;),z(&quot;dayOfYear&quot;,&quot;DDD&quot;),N(&quot;DDD&quot;,Xc),N(&quot;DDDD&quot;,Tc),Q([&quot;DDD&quot;,&quot;DDDD&quot;],function(a,b,c){c._dayOfYear=q(a)}),a.ISO_8601=function(){};var vd=aa(&quot;moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return this&gt;a?this:a}),wd=aa(&quot;moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548&quot;,function(){var a=Da.apply(null,arguments);return a&gt;this?this:a});Ja(&quot;Z&quot;,&quot;:&quot;),Ja(&quot;ZZ&quot;,&quot;&quot;),N(&quot;Z&quot;,ad),N(&quot;ZZ&quot;,ad),Q([&quot;Z&quot;,&quot;ZZ&quot;],function(a,b,c){c._useUTC=!0,c._tzm=Ka(a)});var xd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var yd=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,zd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Ya.fn=Ha.prototype;var Ad=ab(1,&quot;add&quot;),Bd=ab(-1,&quot;subtract&quot;);a.defaultFormat=&quot;YYYY-MM-DDTHH:mm:ssZ&quot;;var Cd=aa(&quot;moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.&quot;,function(a){return void 0===a?this.localeData():this.locale(a)});H(0,[&quot;gg&quot;,2],0,function(){return this.weekYear()%100}),H(0,[&quot;GG&quot;,2],0,function(){return this.isoWeekYear()%100}),Db(&quot;gggg&quot;,&quot;weekYear&quot;),Db(&quot;ggggg&quot;,&quot;weekYear&quot;),Db(&quot;GGGG&quot;,&quot;isoWeekYear&quot;),Db(&quot;GGGGG&quot;,&quot;isoWeekYear&quot;),z(&quot;weekYear&quot;,&quot;gg&quot;),z(&quot;isoWeekYear&quot;,&quot;GG&quot;),N(&quot;G&quot;,_c),N(&quot;g&quot;,_c),N(&quot;GG&quot;,Wc,Sc),N(&quot;gg&quot;,Wc,Sc),N(&quot;GGGG&quot;,Yc,Uc),N(&quot;gggg&quot;,Yc,Uc),N(&quot;GGGGG&quot;,Zc,Vc),N(&quot;ggggg&quot;,Zc,Vc),R([&quot;gggg&quot;,&quot;ggggg&quot;,&quot;GGGG&quot;,&quot;GGGGG&quot;],function(a,b,c,d){b[d.substr(0,2)]=q(a)}),R([&quot;gg&quot;,&quot;GG&quot;],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),H(&quot;Q&quot;,0,0,&quot;quarter&quot;),z(&quot;quarter&quot;,&quot;Q&quot;),N(&quot;Q&quot;,Rc),Q(&quot;Q&quot;,function(a,b){b[gd]=3*(q(a)-1)}),H(&quot;D&quot;,[&quot;DD&quot;,2],&quot;Do&quot;,&quot;date&quot;),z(&quot;date&quot;,&quot;D&quot;),N(&quot;D&quot;,Wc),N(&quot;DD&quot;,Wc,Sc),N(&quot;Do&quot;,function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),Q([&quot;D&quot;,&quot;DD&quot;],hd),Q(&quot;Do&quot;,function(a,b){b[hd]=q(a.match(Wc)[0],10)});var Dd=C(&quot;Date&quot;,!0);H(&quot;d&quot;,0,&quot;do&quot;,&quot;day&quot;),H(&quot;dd&quot;,0,0,function(a){return this.localeData().weekdaysMin(this,a)}),H(&quot;ddd&quot;,0,0,function(a){return this.localeData().weekdaysShort(this,a)}),H(&quot;dddd&quot;,0,0,function(a){return this.localeData().weekdays(this,a)}),H(&quot;e&quot;,0,0,&quot;weekday&quot;),H(&quot;E&quot;,0,0,&quot;isoWeekday&quot;),z(&quot;day&quot;,&quot;d&quot;),z(&quot;weekday&quot;,&quot;e&quot;),z(&quot;isoWeekday&quot;,&quot;E&quot;),N(&quot;d&quot;,Wc),N(&quot;e&quot;,Wc),N(&quot;E&quot;,Wc),N(&quot;dd&quot;,cd),N(&quot;ddd&quot;,cd),N(&quot;dddd&quot;,cd),R([&quot;dd&quot;,&quot;ddd&quot;,&quot;dddd&quot;],function(a,b,c){var d=c._locale.weekdaysParse(a);null!=d?b.d=d:j(c).invalidWeekday=a}),R([&quot;d&quot;,&quot;e&quot;,&quot;E&quot;],function(a,b,c,d){b[d]=q(a)});var Ed=&quot;Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday&quot;.split(&quot;_&quot;),Fd=&quot;Sun_Mon_Tue_Wed_Thu_Fri_Sat&quot;.split(&quot;_&quot;),Gd=&quot;Su_Mo_Tu_We_Th_Fr_Sa&quot;.split(&quot;_&quot;);H(&quot;H&quot;,[&quot;HH&quot;,2],0,&quot;hour&quot;),H(&quot;h&quot;,[&quot;hh&quot;,2],0,function(){return this.hours()%12||12}),Sb(&quot;a&quot;,!0),Sb(&quot;A&quot;,!1),z(&quot;hour&quot;,&quot;h&quot;),N(&quot;a&quot;,Tb),N(&quot;A&quot;,Tb),N(&quot;H&quot;,Wc),N(&quot;h&quot;,Wc),N(&quot;HH&quot;,Wc,Sc),N(&quot;hh&quot;,Wc,Sc),Q([&quot;H&quot;,&quot;HH&quot;],id),Q([&quot;a&quot;,&quot;A&quot;],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),Q([&quot;h&quot;,&quot;hh&quot;],function(a,b,c){b[id]=q(a),j(c).bigHour=!0});var Hd=/[ap]\.?m?\.?/i,Id=C(&quot;Hours&quot;,!0);H(&quot;m&quot;,[&quot;mm&quot;,2],0,&quot;minute&quot;),z(&quot;minute&quot;,&quot;m&quot;),N(&quot;m&quot;,Wc),N(&quot;mm&quot;,Wc,Sc),Q([&quot;m&quot;,&quot;mm&quot;],jd);var Jd=C(&quot;Minutes&quot;,!1);H(&quot;s&quot;,[&quot;ss&quot;,2],0,&quot;second&quot;),z(&quot;second&quot;,&quot;s&quot;),N(&quot;s&quot;,Wc),N(&quot;ss&quot;,Wc,Sc),Q([&quot;s&quot;,&quot;ss&quot;],kd);var Kd=C(&quot;Seconds&quot;,!1);H(&quot;S&quot;,0,0,function(){return~~(this.millisecond()/100)}),H(0,[&quot;SS&quot;,2],0,function(){return~~(this.millisecond()/10)}),H(0,[&quot;SSS&quot;,3],0,&quot;millisecond&quot;),H(0,[&quot;SSSS&quot;,4],0,function(){return 10*this.millisecond()}),H(0,[&quot;SSSSS&quot;,5],0,function(){return 100*this.millisecond()}),H(0,[&quot;SSSSSS&quot;,6],0,function(){return 1e3*this.millisecond()}),H(0,[&quot;SSSSSSS&quot;,7],0,function(){return 1e4*this.millisecond()}),H(0,[&quot;SSSSSSSS&quot;,8],0,function(){return 1e5*this.millisecond()}),H(0,[&quot;SSSSSSSSS&quot;,9],0,function(){return 1e6*this.millisecond()}),z(&quot;millisecond&quot;,&quot;ms&quot;),N(&quot;S&quot;,Xc,Rc),N(&quot;SS&quot;,Xc,Sc),N(&quot;SSS&quot;,Xc,Tc);var Ld;for(Ld=&quot;SSSS&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)N(Ld,$c);for(Ld=&quot;S&quot;;Ld.length&lt;=9;Ld+=&quot;S&quot;)Q(Ld,Wb);var Md=C(&quot;Milliseconds&quot;,!1);H(&quot;z&quot;,0,0,&quot;zoneAbbr&quot;),H(&quot;zz&quot;,0,0,&quot;zoneName&quot;);var Nd=n.prototype;Nd.add=Ad,Nd.calendar=cb,Nd.clone=db,Nd.diff=ib,Nd.endOf=ub,Nd.format=mb,Nd.from=nb,Nd.fromNow=ob,Nd.to=pb,Nd.toNow=qb,Nd.get=F,Nd.invalidAt=Cb,Nd.isAfter=eb,Nd.isBefore=fb,Nd.isBetween=gb,Nd.isSame=hb,Nd.isValid=Ab,Nd.lang=Cd,Nd.locale=rb,Nd.localeData=sb,Nd.max=wd,Nd.min=vd,Nd.parsingFlags=Bb,Nd.set=F,Nd.startOf=tb,Nd.subtract=Bd,Nd.toArray=yb,Nd.toObject=zb,Nd.toDate=xb,Nd.toISOString=lb,Nd.toJSON=lb,Nd.toString=kb,Nd.unix=wb,Nd.valueOf=vb,Nd.year=td,Nd.isLeapYear=ia,Nd.weekYear=Fb,Nd.isoWeekYear=Gb,Nd.quarter=Nd.quarters=Jb,Nd.month=Y,Nd.daysInMonth=Z,Nd.week=Nd.weeks=na,Nd.isoWeek=Nd.isoWeeks=oa,Nd.weeksInYear=Ib,Nd.isoWeeksInYear=Hb,Nd.date=Dd,Nd.day=Nd.days=Pb,Nd.weekday=Qb,Nd.isoWeekday=Rb,Nd.dayOfYear=qa,Nd.hour=Nd.hours=Id,Nd.minute=Nd.minutes=Jd,Nd.second=Nd.seconds=Kd,
Nd.millisecond=Nd.milliseconds=Md,Nd.utcOffset=Na,Nd.utc=Pa,Nd.local=Qa,Nd.parseZone=Ra,Nd.hasAlignedHourOffset=Sa,Nd.isDST=Ta,Nd.isDSTShifted=Ua,Nd.isLocal=Va,Nd.isUtcOffset=Wa,Nd.isUtc=Xa,Nd.isUTC=Xa,Nd.zoneAbbr=Xb,Nd.zoneName=Yb,Nd.dates=aa(&quot;dates accessor is deprecated. Use date instead.&quot;,Dd),Nd.months=aa(&quot;months accessor is deprecated. Use month instead&quot;,Y),Nd.years=aa(&quot;years accessor is deprecated. Use year instead&quot;,td),Nd.zone=aa(&quot;moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779&quot;,Oa);var Od=Nd,Pd={sameDay:&quot;[Today at] LT&quot;,nextDay:&quot;[Tomorrow at] LT&quot;,nextWeek:&quot;dddd [at] LT&quot;,lastDay:&quot;[Yesterday at] LT&quot;,lastWeek:&quot;[Last] dddd [at] LT&quot;,sameElse:&quot;L&quot;},Qd={LTS:&quot;h:mm:ss A&quot;,LT:&quot;h:mm A&quot;,L:&quot;MM/DD/YYYY&quot;,LL:&quot;MMMM D, YYYY&quot;,LLL:&quot;MMMM D, YYYY h:mm A&quot;,LLLL:&quot;dddd, MMMM D, YYYY h:mm A&quot;},Rd=&quot;Invalid date&quot;,Sd=&quot;%d&quot;,Td=/\d{1,2}/,Ud={future:&quot;in %s&quot;,past:&quot;%s ago&quot;,s:&quot;a few seconds&quot;,m:&quot;a minute&quot;,mm:&quot;%d minutes&quot;,h:&quot;an hour&quot;,hh:&quot;%d hours&quot;,d:&quot;a day&quot;,dd:&quot;%d days&quot;,M:&quot;a month&quot;,MM:&quot;%d months&quot;,y:&quot;a year&quot;,yy:&quot;%d years&quot;},Vd=s.prototype;Vd._calendar=Pd,Vd.calendar=_b,Vd._longDateFormat=Qd,Vd.longDateFormat=ac,Vd._invalidDate=Rd,Vd.invalidDate=bc,Vd._ordinal=Sd,Vd.ordinal=cc,Vd._ordinalParse=Td,Vd.preparse=dc,Vd.postformat=dc,Vd._relativeTime=Ud,Vd.relativeTime=ec,Vd.pastFuture=fc,Vd.set=gc,Vd.months=U,Vd._months=md,Vd.monthsShort=V,Vd._monthsShort=nd,Vd.monthsParse=W,Vd.week=ka,Vd._week=ud,Vd.firstDayOfYear=ma,Vd.firstDayOfWeek=la,Vd.weekdays=Lb,Vd._weekdays=Ed,Vd.weekdaysMin=Nb,Vd._weekdaysMin=Gd,Vd.weekdaysShort=Mb,Vd._weekdaysShort=Fd,Vd.weekdaysParse=Ob,Vd.isPM=Ub,Vd._meridiemParse=Hd,Vd.meridiem=Vb,w(&quot;en&quot;,{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===q(a%100/10)?&quot;th&quot;:1===b?&quot;st&quot;:2===b?&quot;nd&quot;:3===b?&quot;rd&quot;:&quot;th&quot;;return a+c}}),a.lang=aa(&quot;moment.lang is deprecated. Use moment.locale instead.&quot;,w),a.langData=aa(&quot;moment.langData is deprecated. Use moment.localeData instead.&quot;,y);var Wd=Math.abs,Xd=yc(&quot;ms&quot;),Yd=yc(&quot;s&quot;),Zd=yc(&quot;m&quot;),$d=yc(&quot;h&quot;),_d=yc(&quot;d&quot;),ae=yc(&quot;w&quot;),be=yc(&quot;M&quot;),ce=yc(&quot;y&quot;),de=Ac(&quot;milliseconds&quot;),ee=Ac(&quot;seconds&quot;),fe=Ac(&quot;minutes&quot;),ge=Ac(&quot;hours&quot;),he=Ac(&quot;days&quot;),ie=Ac(&quot;months&quot;),je=Ac(&quot;years&quot;),ke=Math.round,le={s:45,m:45,h:22,d:26,M:11},me=Math.abs,ne=Ha.prototype;ne.abs=oc,ne.add=qc,ne.subtract=rc,ne.as=wc,ne.asMilliseconds=Xd,ne.asSeconds=Yd,ne.asMinutes=Zd,ne.asHours=$d,ne.asDays=_d,ne.asWeeks=ae,ne.asMonths=be,ne.asYears=ce,ne.valueOf=xc,ne._bubble=tc,ne.get=zc,ne.milliseconds=de,ne.seconds=ee,ne.minutes=fe,ne.hours=ge,ne.days=he,ne.weeks=Bc,ne.months=ie,ne.years=je,ne.humanize=Fc,ne.toISOString=Gc,ne.toString=Gc,ne.toJSON=Gc,ne.locale=rb,ne.localeData=sb,ne.toIsoString=aa(&quot;toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)&quot;,Gc),ne.lang=Cd,H(&quot;X&quot;,0,0,&quot;unix&quot;),H(&quot;x&quot;,0,0,&quot;valueOf&quot;),N(&quot;x&quot;,_c),N(&quot;X&quot;,bd),Q(&quot;X&quot;,function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),Q(&quot;x&quot;,function(a,b,c){c._d=new Date(q(a))}),a.version=&quot;2.10.6&quot;,b(Da),a.fn=Od,a.min=Fa,a.max=Ga,a.utc=h,a.unix=Zb,a.months=jc,a.isDate=d,a.locale=w,a.invalid=l,a.duration=Ya,a.isMoment=o,a.weekdays=lc,a.parseZone=$b,a.localeData=y,a.isDuration=Ia,a.monthsShort=kc,a.weekdaysMin=nc,a.defineLocale=x,a.weekdaysShort=mc,a.normalizeUnits=A,a.relativeTimeThreshold=Ec;var oe=a;return oe});</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>2c64669f-f07e-4365-bf64-c559ace83004</id>
            <name>stopOnErrorCount</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122375</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Function to Stop a channel if it reaches a particular error count. 
	Also sends an alert message via another channel (this sends a sms via our monitoring system).

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function stopOnErrorCount(cid, errorCount) {
	var channelStatisticsController = Packages.com.mirth.connect.server.controllers.ChannelStatisticsController.getInstance();
	var channelStatusController = Packages.com.mirth.connect.server.controllers.ChannelStatusController.getInstance();
	var stats = channelStatisticsController.getStatistics(cid);
	// var numOfQueued = stats.queued;
	var numOfErrors = stats.error;

	if(numOfErrors &gt; errorCount )
	{
		//Stop Me
		channelStatusController.stopChannel(cid);
		//Alert msg sent to _SVHALERT channel
		var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
		var channelName = channelController.getDeployedChannelById(cid).getName();
		var alertmsg = &apos;mirth01 mirth_channel_status codeTemplate_stopOnErrorCount 0 &apos; +
					   &apos;channel &apos; + channelName + &apos; stopped&apos;;
		router.routeMessage(&apos;_SVHALERT&apos;, alertmsg);
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>08044817-3504-4fc1-80ee-404870195151</id>
            <name>test</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122745</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>COMPILED_CODE</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.
	searchword
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function testfunc(arg1) {
	return arg1;
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.0.0">
        <id>833c5444-6415-4d62-a76b-caa39589c2fa</id>
        <name>WebPT-Mirth</name>
        <revision>1</revision>
        <lastModified>
          <time>1678476121602</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>3792b059-e098-436c-81fe-23502ef5042b</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="4.0.0">
            <id>b9eceb1d-8abb-4931-8247-209d70519f99</id>
            <name>Fix HL7v2 Node Order</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476121804</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/*

	See issue: http://www.mirthcorp.com/community/issues/browse/MIRTH-625

	Author: Nick Rupley
	Date Modified: 4/18/2012

	fixHL7NodeOrder: Returns a new E4X node where the order of all siblings and descendants have been fixed as per the Mirth HL7 dot notation convention.

	Arguments
	---------
		Required
		--------
		node: The node to be fixed. 
*/
function fixHL7NodeOrder(node) {
	// Create output node
	var newNode = new XML();
	// In case the node is an XMLList of multiple siblings, loop through each sibling
	for each (sibling in node) {
		// Create new sibling node
		var newSibling = new XML(&apos;&lt;&apos;+sibling.name().toString()+&apos;/&gt;&apos;);
		// Iterate through each child node
		for each (child in sibling.children())
			// If the child has its own children, then recursively fix the node order of the child
			if (child.hasComplexContent())
				newSibling.appendChild(fixHL7NodeOrder(child));
			// If the child doesn&apos;t have its own children, then just add the child to the new sibling node
			else
				newSibling.appendChild(child);
		// After recursively fixing all of the child nodes, now we&apos;ll fix the current node
		newNode += sortHL7Node(newSibling);
	}
	// Return the fixed node
	return newNode;
}

function sortHL7Node(node) {
	// If the node has no children, then there&apos;s nothing to sort
	if (node.hasSimpleContent())
		return node;
	// Create new output node
	var newNode = new XML(&apos;&lt;&apos;+node.name().toString()+&apos;/&gt;&apos;);
	// Iterate through each child in the node
	for each (child in node.children()) {
		// If the child has a QName, then we can sort on it
		if (child.name()) {
			// Get the current &quot;index&quot; of the child. Id est, if the QName is PID.3.1, then the index is 1
			curChildIndex = parseInt(child.name().toString().substring(child.name().toString().lastIndexOf(&apos;.&apos;)+1),10);
			// Boolean placeholder
			var inserted = false;
			// Iterate through each child currently in the NEW node
			for (var i = 0; i &lt;= newNode.children().length()-1; i++) {
				// Get the index of the child of the new node
				loopChildIndex = parseInt(newNode.child(i).name().toString().substring(newNode.child(i).name().toString().lastIndexOf(&apos;.&apos;)+1),10);
				// If the child we want to insert has a lower index then the current child of the new node, then we&apos;re going to insert the child 
				// right before the current newNode child
				if (curChildIndex &lt; loopChildIndex) {
					// Insert the child
					newNode.insertChildBefore(newNode.children()[i],child);
					// Set our flag, indicating that an insertion was made
					inserted = true;
					// No need to continue iteration
					break;
				}
			}
			// If no insertion was made, then the index of the child we want to insert is greater than or equal to all of the
			// indices of the children that have already been inserted in newNode. So, we&apos;ll just append the child to the end.
			if (!inserted)
				newNode.appendChild(child);
		}
	}
	// Return the sorted HL7 node
	return newNode;
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.0.0">
        <id>35f4c250-08b4-4e42-8e60-f85aa98dfe50</id>
        <name>WebPT-Translations</name>
        <revision>4</revision>
        <lastModified>
          <time>1703964939924</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>c5aa527b-0e36-4790-8302-e1a6a472455e</string>
          <string>4e15d4c9-43b4-4d2c-9185-701707cd2f6a</string>
          <string>f7c77a5d-b086-4aed-aa56-e72984abd5ea</string>
          <string>65d47b29-67e5-4533-917c-337880fb8b17</string>
          <string>b7f455da-a5a4-4c75-be8f-d6f2c3561ac8</string>
          <string>42b2b012-ffc4-41ba-a71e-00fbd1cc1c67</string>
          <string>ead4368c-a612-459c-950e-50e49df05d9b</string>
          <string>81988bfb-2e74-4e25-ac01-1a000e027e97</string>
          <string>4964d3cc-7004-41c7-a704-da97ac92caf3</string>
          <string>954d2af0-df2c-46c6-95bc-02661a8d4424</string>
          <string>fd14f323-1f60-4ec5-b3e1-6ce8248bbcf3</string>
          <string>e248ef99-284c-41f3-adac-d7b43433b16f</string>
          <string>e20d28dc-e360-4b54-a225-5c6cddeba9a3</string>
          <string>6910529c-6cd1-4838-9a4f-d3c84faa2866</string>
          <string>8913e845-1fff-427c-bec0-e0a01d131f89</string>
          <string>19a0dcf7-3736-4b25-9049-80301c6cd04d</string>
          <string>32516e02-db8c-47f3-aba9-adfff1ea28c2</string>
          <string>b19c96b2-afb4-4248-83a8-96f521b20489</string>
          <string>f1688a2f-ece0-4292-b5f9-e56c50b6bc5a</string>
          <string>ed58a744-1f83-44aa-ad23-feef56e2f5e6</string>
          <string>4a98f7b0-d1f3-478d-ad65-550f8287fe24</string>
          <string>7a3b0715-12e0-4803-aa51-c1a947ef9b66</string>
          <string>dff92eca-e23d-4802-8e3c-023f3af3e640</string>
          <string>a3e80233-747a-4ce0-9f8f-59dcbe8e2ca6</string>
          <string>0ace74f9-8ee8-45a5-8093-8d5bb95dae90</string>
          <string>32ea3c4a-9c59-4482-beb2-22d729e5e379</string>
          <string>a827a980-9c7f-410c-893a-141429f7b30a</string>
          <string>fba4345d-b56d-4b31-802c-cdac2248902d</string>
          <string>9ba29622-ed1f-4a34-9cbe-6f3df0eb3026</string>
          <string>d6ea31a1-1aa6-4a53-adde-10a1bcdcd3c5</string>
          <string>4966bc7c-223c-4c44-8f71-4625cfcc0cc0</string>
          <string>72383579-097e-4205-b030-ce272c90b835</string>
          <string>88f9a267-e37f-418d-aaf2-d077b7a0cdca</string>
          <string>a2b31875-5c31-4052-938f-a69550a8cb55</string>
          <string>37b05d6c-c044-4394-a60a-deaee676ce0d</string>
          <string>71368dee-5964-4073-bab7-ae0fd3ae90b0</string>
          <string>5cc5d7df-228a-4d24-b774-681c717e1876</string>
          <string>4c3b5879-a8d9-48be-83cc-5f7c5777a188</string>
          <string>c65d1ffa-65af-4ee8-803a-2f32b201889d</string>
          <string>5c763fad-3eae-4e87-b944-0dbfe25814e0</string>
          <string>3792b059-e098-436c-81fe-23502ef5042b</string>
          <string>8a4eb453-fc7a-484a-8e15-422d9b490edf</string>
          <string>a757905f-315a-43be-a624-38780a3d7574</string>
          <string>1c6037e0-7bf9-41ae-b896-5be7b77e711f</string>
          <string>631f9a02-6b74-4ecd-9582-221b98a0450e</string>
          <string>c2277647-41dc-4e15-bce4-2ae23cec064b</string>
          <string>c1fd4789-03e5-4ec3-91d2-cdded4b13365</string>
          <string>318f77fc-a631-48e0-8a4e-a87831bd81a7</string>
          <string>38e80069-5a80-4483-9a22-02c928973719</string>
          <string>ba9dcc01-6b1c-4fc3-afc4-cf1c5da9a8aa</string>
          <string>77033047-c5e7-4308-b2ed-d361923ed9a2</string>
          <string>2e0d9b6c-294f-4506-8632-dc4622b4f651</string>
          <string>d3f6504f-12cd-4e69-a920-6bb3a2195cc2</string>
          <string>a6fc8ba1-0134-4d1a-a341-cd9a2f295595</string>
          <string>57fa694a-2758-4e52-b725-967a74786d1f</string>
          <string>a45d1db0-9b84-49d3-b26b-243dbf2a4f70</string>
          <string>ab7d9121-bd5f-47c1-964a-53531cd178dd</string>
          <string>bfc00235-7e2e-457a-b27f-e5288e9c28c4</string>
          <string>6be39ce0-8f88-42fb-b3a4-4afd4da39734</string>
          <string>754a8caa-2161-45d8-b261-e32d8b0fb044</string>
          <string>9370b181-aa9c-4db3-b7dc-2cd81cc91fdd</string>
          <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
          <string>7741037b-845e-4e6d-b6aa-c9f249b06084</string>
          <string>c65024ed-4660-4423-9636-cb6309cae138</string>
          <string>0972a85f-5ad7-4a93-88e1-5f991b7f7879</string>
          <string>3fdef7e5-20e2-4e6f-aad4-a156ddb2e5e2</string>
          <string>ccd59c71-8d2a-40e9-8647-57e000ec6f43</string>
          <string>a25fa941-8ba3-47eb-81d1-24c9e45fe29d</string>
          <string>8cbc4731-752e-4e2e-a61d-018ed3e0cef0</string>
          <string>1b12c7a8-abee-4c24-85a4-d3b447e9d280</string>
          <string>5cfc8ad8-0fb2-48bf-a318-1aabd86cf60e</string>
          <string>10ef3f18-f1c1-495c-80be-026eb56436c5</string>
          <string>c15d4352-13b2-4698-a771-b3593449d7ba</string>
          <string>64e32643-e41c-4986-9550-c634cb02f9ba</string>
          <string>347deee2-a3c1-4542-bc3e-c619defe0b64</string>
          <string>9e040198-05cf-11e8-ba89-0ed5f89f718b</string>
          <string>dc8e6472-bc7e-4ebe-a8dd-968b791e2975</string>
          <string>66487d57-e34e-4a9a-8296-e62a66d3ab8b</string>
          <string>99b43124-34ef-4ead-a348-ef0ac0a52539</string>
          <string>4c2e73a8-aabe-4c04-9ba5-50ab49d3cb95</string>
          <string>0df5acd6-0251-4546-9d35-ed7f1515e00b</string>
          <string>93f57fef-8fc0-4b05-91de-b1cdb48034a2</string>
          <string>db4e2d12-f41b-4da9-87b8-a1feb4c29054</string>
          <string>a6ec1677-5012-430f-bcbc-f41fe39ecf1f</string>
          <string>5c5b6b2c-f3fd-456d-a90d-d684b5fb061e</string>
          <string>42e730bb-0721-435e-8dcf-d25d6d5d1dc6</string>
          <string>c90c935e-e3de-4ffe-839f-5560b39f07fb</string>
          <string>18803b99-6545-4d09-9277-a559ee2e94fd</string>
          <string>5231fded-a3aa-44e8-bd77-3ad84d39e1d2</string>
          <string>89faf430-5bd7-4440-9ed0-4b02d3462403</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="4.0.0">
            <id>be8f057b-2640-4613-b2e7-83326c59169c</id>
            <name>AddZeros</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122826</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function addZeroes(num) {
   return num.toLocaleString(&quot;en&quot;, {useGrouping: false, minimumFractionDigits: 2})
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>51913864-7702-489a-b7c6-54992c12b19d</id>
            <name>FindLookupValueWithDefault</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122218</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function FindLookupValueWithDefault ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        //obj.LeftValue = LeftValue;
        //obj.RightValue1 = DefaultValue1;
        //obj.RightValue2   = DefaultValue2; 
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);
            var result = pattern.test(LeftValue );

            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>c276be9f-c8f1-4dea-8df0-e000c6745271</id>
            <name>FindLookupValueWithInsuranceId</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122080</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function FindLookupValueWithInsuranceId ( LookupGlobalMapName, LeftValue){
    /*********************************
    DESCRIPTION: Retrieves lookup table values from the global map and uses the input values to return output values

     PARAMETERS:
       LookupGlobalMapName - name of the lookup table in the Global Map
       LeftValue - The value to look up
       DefaultValue1 - the first default value if a match was not found
       DefaultValue2 - the second default value if a match was not found

    RETURNS:
       An object containing the replacement value and associated OID if applicable

    REMARKS: 
    ********************************/
        // Retrieve the previously matched item from the globalmap
        //    We do this to save time and not look through a huge lookup table tons of times
        //    unless we absolutely have to
        var prevItem = globalChannelMap.get(LookupGlobalMapName + &apos;-Previous&apos;);

        // This is the same item requested for this globalmap name - just return the previous value
        if ( prevItem != null &amp;&amp; prevItem.LeftValue == LeftValue) {
            return prevItem;
        }

        //
        // If we reach this point the previous item either did not exist or did not match 
        //

        // Retrieve the array with lookup objects from the globalmap and search for the matching value
        var arr = globalChannelMap.get(LookupGlobalMapName);
        var obj = new Object();
        for each ( item in arr )
        {
            var pattern=new RegExp(&quot;^&quot; + item.LeftValue + &quot;$&quot;);             
            var result = pattern.test(LeftValue );
	
            if ( pattern.test(LeftValue ) )
            {
                obj = item;
                break;
            } 
        }

        // Store the previous value in the globalmap
        globalChannelMap.put( LookupGlobalMapName + &apos;-Previous&apos;, obj );

        // Return the object we found or created
        return obj;
    }</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>7d746da2-58c6-44eb-ad5c-c5bfd0a0c537</id>
            <name>UseExternalProblemID</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122349</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalProblemID() {

if ([&apos;2804&apos;, &apos;2822&apos;].indexOf($(&apos;tenantId&apos;) + &apos;&apos;) &gt; -1) {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitexternalproblemid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;AccountNumber&apos;] = msg[&apos;visitaccountnumber&apos;].toString();
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.0.0">
            <id>07730e85-7f30-4ddf-90a4-78183c896ab5</id>
            <name>UseExternalVisitID</name>
            <revision>1</revision>
            <lastModified>
              <time>1678476122192</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function useExternalVisitID() {
	
if ($(&apos;tenantId&apos;)  == &apos;9999&apos; ) {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitexternalvisitid&apos;].toString()
} else {
    tmp[&apos;Visit&apos;][&apos;VisitNumber&apos;] = msg[&apos;visitvisitnumber&apos;].toString();
}
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
    </codeTemplateLibraries>
  </exportData>
</channel>